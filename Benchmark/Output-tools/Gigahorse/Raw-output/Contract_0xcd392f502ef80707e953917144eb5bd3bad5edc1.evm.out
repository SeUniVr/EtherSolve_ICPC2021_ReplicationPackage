
Begin block 0x0
prev = {}, next = {'0xd', '0x17a0'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x1776: v1776(0x17a0) = CONST 
0x1777: JUMPI v1776(0x17a0) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x17a3', '0x3b'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x31: v31(0x6fdde03) = CONST 
0x36: v36 = EQ v31(0x6fdde03) v2f
0x1778: v1778(0x17a3) = CONST 
0x1779: JUMPI v1778(0x17a3) v36
----------------------------------

Begin block 0x3b
prev = {'0xd'}, next = {'0x46', '0x17a6'}
----------------------------------
Block 0x3b
0x3c: v3c(0x95ea7b3) = CONST 
0x41: v41 = EQ v3c(0x95ea7b3) v2f
0x177a: v177a(0x17a6) = CONST 
0x177b: JUMPI v177a(0x17a6) v41
----------------------------------

Begin block 0x46
prev = {'0x3b'}, next = {'0x51', '0x17a9'}
----------------------------------
Block 0x46
0x47: v47(0x18160ddd) = CONST 
0x4c: v4c = EQ v47(0x18160ddd) v2f
0x177c: v177c(0x17a9) = CONST 
0x177d: JUMPI v177c(0x17a9) v4c
----------------------------------

Begin block 0x51
prev = {'0x46'}, next = {'0x17ac', '0x5c'}
----------------------------------
Block 0x51
0x52: v52(0x23b872dd) = CONST 
0x57: v57 = EQ v52(0x23b872dd) v2f
0x177e: v177e(0x17ac) = CONST 
0x177f: JUMPI v177e(0x17ac) v57
----------------------------------

Begin block 0x5c
prev = {'0x51'}, next = {'0x67', '0x17af'}
----------------------------------
Block 0x5c
0x5d: v5d(0x313ce567) = CONST 
0x62: v62 = EQ v5d(0x313ce567) v2f
0x1780: v1780(0x17af) = CONST 
0x1781: JUMPI v1780(0x17af) v62
----------------------------------

Begin block 0x67
prev = {'0x5c'}, next = {'0x72', '0x17b2'}
----------------------------------
Block 0x67
0x68: v68(0x3eaaf86b) = CONST 
0x6d: v6d = EQ v68(0x3eaaf86b) v2f
0x1782: v1782(0x17b2) = CONST 
0x1783: JUMPI v1782(0x17b2) v6d
----------------------------------

Begin block 0x72
prev = {'0x67'}, next = {'0x17b5', '0x7d'}
----------------------------------
Block 0x72
0x73: v73(0x70a08231) = CONST 
0x78: v78 = EQ v73(0x70a08231) v2f
0x1784: v1784(0x17b5) = CONST 
0x1785: JUMPI v1784(0x17b5) v78
----------------------------------

Begin block 0x7d
prev = {'0x72'}, next = {'0x88', '0x17b8'}
----------------------------------
Block 0x7d
0x7e: v7e(0x79ba5097) = CONST 
0x83: v83 = EQ v7e(0x79ba5097) v2f
0x1786: v1786(0x17b8) = CONST 
0x1787: JUMPI v1786(0x17b8) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0x17bb', '0x93'}
----------------------------------
Block 0x88
0x89: v89(0x8da5cb5b) = CONST 
0x8e: v8e = EQ v89(0x8da5cb5b) v2f
0x1788: v1788(0x17bb) = CONST 
0x1789: JUMPI v1788(0x17bb) v8e
----------------------------------

Begin block 0x93
prev = {'0x88'}, next = {'0x9e', '0x17be'}
----------------------------------
Block 0x93
0x94: v94(0x95d89b41) = CONST 
0x99: v99 = EQ v94(0x95d89b41) v2f
0x178a: v178a(0x17be) = CONST 
0x178b: JUMPI v178a(0x17be) v99
----------------------------------

Begin block 0x9e
prev = {'0x93'}, next = {'0x17c1', '0xa9'}
----------------------------------
Block 0x9e
0x9f: v9f(0xa293d1e8) = CONST 
0xa4: va4 = EQ v9f(0xa293d1e8) v2f
0x178c: v178c(0x17c1) = CONST 
0x178d: JUMPI v178c(0x17c1) va4
----------------------------------

Begin block 0xa9
prev = {'0x9e'}, next = {'0xb4', '0x17c4'}
----------------------------------
Block 0xa9
0xaa: vaa(0xa9059cbb) = CONST 
0xaf: vaf = EQ vaa(0xa9059cbb) v2f
0x178e: v178e(0x17c4) = CONST 
0x178f: JUMPI v178e(0x17c4) vaf
----------------------------------

Begin block 0xb4
prev = {'0xa9'}, next = {'0xbf', '0x17c7'}
----------------------------------
Block 0xb4
0xb5: vb5(0xb5931f7c) = CONST 
0xba: vba = EQ vb5(0xb5931f7c) v2f
0x1790: v1790(0x17c7) = CONST 
0x1791: JUMPI v1790(0x17c7) vba
----------------------------------

Begin block 0xbf
prev = {'0xb4'}, next = {'0xca', '0x17ca'}
----------------------------------
Block 0xbf
0xc0: vc0(0xcae9ca51) = CONST 
0xc5: vc5 = EQ vc0(0xcae9ca51) v2f
0x1792: v1792(0x17ca) = CONST 
0x1793: JUMPI v1792(0x17ca) vc5
----------------------------------

Begin block 0xca
prev = {'0xbf'}, next = {'0x17cd', '0xd5'}
----------------------------------
Block 0xca
0xcb: vcb(0xd05c78da) = CONST 
0xd0: vd0 = EQ vcb(0xd05c78da) v2f
0x1794: v1794(0x17cd) = CONST 
0x1795: JUMPI v1794(0x17cd) vd0
----------------------------------

Begin block 0xd5
prev = {'0xca'}, next = {'0x17d0', '0xe0'}
----------------------------------
Block 0xd5
0xd6: vd6(0xd4ee1d90) = CONST 
0xdb: vdb = EQ vd6(0xd4ee1d90) v2f
0x1796: v1796(0x17d0) = CONST 
0x1797: JUMPI v1796(0x17d0) vdb
----------------------------------

Begin block 0xe0
prev = {'0xd5'}, next = {'0xeb', '0x17d3'}
----------------------------------
Block 0xe0
0xe1: ve1(0xdc39d06d) = CONST 
0xe6: ve6 = EQ ve1(0xdc39d06d) v2f
0x1798: v1798(0x17d3) = CONST 
0x1799: JUMPI v1798(0x17d3) ve6
----------------------------------

Begin block 0xeb
prev = {'0xe0'}, next = {'0xf6', '0x17d6'}
----------------------------------
Block 0xeb
0xec: vec(0xdd62ed3e) = CONST 
0xf1: vf1 = EQ vec(0xdd62ed3e) v2f
0x179a: v179a(0x17d6) = CONST 
0x179b: JUMPI v179a(0x17d6) vf1
----------------------------------

Begin block 0xf6
prev = {'0xeb'}, next = {'0x101', '0x17d9'}
----------------------------------
Block 0xf6
0xf7: vf7(0xe6cb9013) = CONST 
0xfc: vfc = EQ vf7(0xe6cb9013) v2f
0x179c: v179c(0x17d9) = CONST 
0x179d: JUMPI v179c(0x17d9) vfc
----------------------------------

Begin block 0x101
prev = {'0xf6'}, next = {'0x17dc', '0x17a0'}
----------------------------------
Block 0x101
0x102: v102(0xf2fde38b) = CONST 
0x107: v107 = EQ v102(0xf2fde38b) v2f
0x179e: v179e(0x17dc) = CONST 
0x179f: JUMPI v179e(0x17dc) v107
----------------------------------

Begin block 0x10c
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x10c
0x10d: v10d(0x0) = CONST 
0x110: REVERT v10d(0x0) v10d(0x0)
----------------------------------

Begin block 0x111
prev = {}, next = {'0x11d', '0x119'}
----------------------------------
function name()()
Block 0x111
0x112: v112 = CALLVALUE 
0x114: v114 = ISZERO v112
0x115: v115(0x11d) = CONST 
0x118: JUMPI v115(0x11d) v114
----------------------------------

Begin block 0x119
prev = {'0x111'}, next = {}
----------------------------------
Block 0x119
0x119: v119(0x0) = CONST 
0x11c: REVERT v119(0x0) v119(0x0)
----------------------------------

Begin block 0x11d
prev = {'0x111'}, next = {'0x912'}
----------------------------------
Block 0x11d
0x11f: v11f(0x126) = CONST 
0x122: v122(0x912) = CONST 
0x125: JUMP v122(0x912)
----------------------------------

Begin block 0x126
prev = {'0x9a8'}, next = {'0x14b'}
----------------------------------
Block 0x126
0x127: v127(0x40) = CONST 
0x129: v129 = MLOAD v127(0x40)
0x12c: v12c(0x20) = CONST 
0x12e: v12e = ADD v12c(0x20) v129
0x131: v131 = SUB v12e v129
0x133: MSTORE v129 v131
0x137: v137 = MLOAD v937
0x139: MSTORE v12e v137
0x13a: v13a(0x20) = CONST 
0x13c: v13c = ADD v13a(0x20) v12e
0x140: v140 = MLOAD v937
0x142: v142(0x20) = CONST 
0x144: v144 = ADD v142(0x20) v937
0x149: v149(0x0) = CONST 
----------------------------------

Begin block 0x14b
prev = {'0x154', '0x126'}, next = {'0x154', '0x166'}
----------------------------------
Block 0x14b
0x14b_0x0: v14b_0 = PHI v149(0x0) v15f
0x14e: v14e = LT v14b_0 v140
0x14f: v14f = ISZERO v14e
0x150: v150(0x166) = CONST 
0x153: JUMPI v150(0x166) v14f
----------------------------------

Begin block 0x154
prev = {'0x14b'}, next = {'0x14b'}
----------------------------------
Block 0x154
0x154_0x0: v154_0 = PHI v149(0x0) v15f
0x156: v156 = ADD v144 v154_0
0x157: v157 = MLOAD v156
0x15a: v15a = ADD v13c v154_0
0x15b: MSTORE v15a v157
0x15c: v15c(0x20) = CONST 
0x15f: v15f = ADD v154_0 v15c(0x20)
0x162: v162(0x14b) = CONST 
0x165: JUMP v162(0x14b)
----------------------------------

Begin block 0x166
prev = {'0x14b'}, next = {'0x17a', '0x193'}
----------------------------------
Block 0x166
0x16f: v16f = ADD v140 v13c
0x171: v171(0x1f) = CONST 
0x173: v173 = AND v171(0x1f) v140
0x175: v175 = ISZERO v173
0x176: v176(0x193) = CONST 
0x179: JUMPI v176(0x193) v175
----------------------------------

Begin block 0x17a
prev = {'0x166'}, next = {'0x193'}
----------------------------------
Block 0x17a
0x17c: v17c = SUB v16f v173
0x17e: v17e = MLOAD v17c
0x17f: v17f(0x1) = CONST 
0x182: v182(0x20) = CONST 
0x184: v184 = SUB v182(0x20) v173
0x185: v185(0x100) = CONST 
0x188: v188 = EXP v185(0x100) v184
0x189: v189 = SUB v188 v17f(0x1)
0x18a: v18a = NOT v189
0x18b: v18b = AND v18a v17e
0x18d: MSTORE v17c v18b
0x18e: v18e(0x20) = CONST 
0x190: v190 = ADD v18e(0x20) v17c
----------------------------------

Begin block 0x193
prev = {'0x17a', '0x166'}, next = {}
----------------------------------
Block 0x193
0x193_0x1: v193_1 = PHI v16f v190
0x199: v199(0x40) = CONST 
0x19b: v19b = MLOAD v199(0x40)
0x19e: v19e = SUB v193_1 v19b
0x1a0: RETURN v19b v19e
----------------------------------

Begin block 0x1a1
prev = {}, next = {'0x1ad', '0x1a9'}
----------------------------------
function approve(address,uint256)()
Block 0x1a1
0x1a2: v1a2 = CALLVALUE 
0x1a4: v1a4 = ISZERO v1a2
0x1a5: v1a5(0x1ad) = CONST 
0x1a8: JUMPI v1a5(0x1ad) v1a4
----------------------------------

Begin block 0x1a9
prev = {'0x1a1'}, next = {}
----------------------------------
Block 0x1a9
0x1a9: v1a9(0x0) = CONST 
0x1ac: REVERT v1a9(0x0) v1a9(0x0)
----------------------------------

Begin block 0x1ad
prev = {'0x1a1'}, next = {'0x1c0', '0x1c4'}
----------------------------------
Block 0x1ad
0x1af: v1af(0x1fa) = CONST 
0x1b2: v1b2(0x4) = CONST 
0x1b5: v1b5 = CALLDATASIZE 
0x1b6: v1b6 = SUB v1b5 v1b2(0x4)
0x1b7: v1b7(0x40) = CONST 
0x1ba: v1ba = LT v1b6 v1b7(0x40)
0x1bb: v1bb = ISZERO v1ba
0x1bc: v1bc(0x1c4) = CONST 
0x1bf: JUMPI v1bc(0x1c4) v1bb
----------------------------------

Begin block 0x1c0
prev = {'0x1ad'}, next = {}
----------------------------------
Block 0x1c0
0x1c0: v1c0(0x0) = CONST 
0x1c3: REVERT v1c0(0x0) v1c0(0x0)
----------------------------------

Begin block 0x1c4
prev = {'0x1ad'}, next = {'0x9b0'}
----------------------------------
Block 0x1c4
0x1c6: v1c6 = ADD v1b2(0x4) v1b6
0x1ca: v1ca = CALLDATALOAD v1b2(0x4)
0x1cb: v1cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1e0: v1e0 = AND v1cb(0xffffffffffffffffffffffffffffffffffffffff) v1ca
0x1e2: v1e2(0x20) = CONST 
0x1e4: v1e4 = ADD v1e2(0x20) v1b2(0x4)
0x1ea: v1ea = CALLDATALOAD v1e4
0x1ec: v1ec(0x20) = CONST 
0x1ee: v1ee = ADD v1ec(0x20) v1e4
0x1f6: v1f6(0x9b0) = CONST 
0x1f9: JUMP v1f6(0x9b0)
----------------------------------

Begin block 0x1fa
prev = {'0x9b0'}, next = {}
----------------------------------
Block 0x1fa
0x1fb: v1fb(0x40) = CONST 
0x1fd: v1fd = MLOAD v1fb(0x40)
0x200: v200 = ISZERO va99(0x1)
0x201: v201 = ISZERO v200
0x202: v202 = ISZERO v201
0x203: v203 = ISZERO v202
0x205: MSTORE v1fd v203
0x206: v206(0x20) = CONST 
0x208: v208 = ADD v206(0x20) v1fd
0x20c: v20c(0x40) = CONST 
0x20e: v20e = MLOAD v20c(0x40)
0x211: v211 = SUB v208 v20e
0x213: RETURN v20e v211
----------------------------------

Begin block 0x214
prev = {}, next = {'0x21c', '0x220'}
----------------------------------
function totalSupply()()
Block 0x214
0x215: v215 = CALLVALUE 
0x217: v217 = ISZERO v215
0x218: v218(0x220) = CONST 
0x21b: JUMPI v218(0x220) v217
----------------------------------

Begin block 0x21c
prev = {'0x214'}, next = {}
----------------------------------
Block 0x21c
0x21c: v21c(0x0) = CONST 
0x21f: REVERT v21c(0x0) v21c(0x0)
----------------------------------

Begin block 0x220
prev = {'0x214'}, next = {'0xaa2'}
----------------------------------
Block 0x220
0x222: v222(0x229) = CONST 
0x225: v225(0xaa2) = CONST 
0x228: JUMP v225(0xaa2)
----------------------------------

Begin block 0x229
prev = {'0xaa2'}, next = {}
----------------------------------
Block 0x229
0x22a: v22a(0x40) = CONST 
0x22c: v22c = MLOAD v22a(0x40)
0x230: MSTORE v22c vae8
0x231: v231(0x20) = CONST 
0x233: v233 = ADD v231(0x20) v22c
0x237: v237(0x40) = CONST 
0x239: v239 = MLOAD v237(0x40)
0x23c: v23c = SUB v233 v239
0x23e: RETURN v239 v23c
----------------------------------

Begin block 0x23f
prev = {}, next = {'0x247', '0x24b'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x23f
0x240: v240 = CALLVALUE 
0x242: v242 = ISZERO v240
0x243: v243(0x24b) = CONST 
0x246: JUMPI v243(0x24b) v242
----------------------------------

Begin block 0x247
prev = {'0x23f'}, next = {}
----------------------------------
Block 0x247
0x247: v247(0x0) = CONST 
0x24a: REVERT v247(0x0) v247(0x0)
----------------------------------

Begin block 0x24b
prev = {'0x23f'}, next = {'0x25e', '0x262'}
----------------------------------
Block 0x24b
0x24d: v24d(0x2b8) = CONST 
0x250: v250(0x4) = CONST 
0x253: v253 = CALLDATASIZE 
0x254: v254 = SUB v253 v250(0x4)
0x255: v255(0x60) = CONST 
0x258: v258 = LT v254 v255(0x60)
0x259: v259 = ISZERO v258
0x25a: v25a(0x262) = CONST 
0x25d: JUMPI v25a(0x262) v259
----------------------------------

Begin block 0x25e
prev = {'0x24b'}, next = {}
----------------------------------
Block 0x25e
0x25e: v25e(0x0) = CONST 
0x261: REVERT v25e(0x0) v25e(0x0)
----------------------------------

Begin block 0x262
prev = {'0x24b'}, next = {'0xaed'}
----------------------------------
Block 0x262
0x264: v264 = ADD v250(0x4) v254
0x268: v268 = CALLDATALOAD v250(0x4)
0x269: v269(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x27e: v27e = AND v269(0xffffffffffffffffffffffffffffffffffffffff) v268
0x280: v280(0x20) = CONST 
0x282: v282 = ADD v280(0x20) v250(0x4)
0x288: v288 = CALLDATALOAD v282
0x289: v289(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x29e: v29e = AND v289(0xffffffffffffffffffffffffffffffffffffffff) v288
0x2a0: v2a0(0x20) = CONST 
0x2a2: v2a2 = ADD v2a0(0x20) v282
0x2a8: v2a8 = CALLDATALOAD v2a2
0x2aa: v2aa(0x20) = CONST 
0x2ac: v2ac = ADD v2aa(0x20) v2a2
0x2b4: v2b4(0xaed) = CONST 
0x2b7: JUMP v2b4(0xaed)
----------------------------------

Begin block 0x2b8
prev = {'0xcca'}, next = {}
----------------------------------
Block 0x2b8
0x2b9: v2b9(0x40) = CONST 
0x2bb: v2bb = MLOAD v2b9(0x40)
0x2be: v2be = ISZERO vd73(0x1)
0x2bf: v2bf = ISZERO v2be
0x2c0: v2c0 = ISZERO v2bf
0x2c1: v2c1 = ISZERO v2c0
0x2c3: MSTORE v2bb v2c1
0x2c4: v2c4(0x20) = CONST 
0x2c6: v2c6 = ADD v2c4(0x20) v2bb
0x2ca: v2ca(0x40) = CONST 
0x2cc: v2cc = MLOAD v2ca(0x40)
0x2cf: v2cf = SUB v2c6 v2cc
0x2d1: RETURN v2cc v2cf
----------------------------------

Begin block 0x2d2
prev = {}, next = {'0x2da', '0x2de'}
----------------------------------
function decimals()()
Block 0x2d2
0x2d3: v2d3 = CALLVALUE 
0x2d5: v2d5 = ISZERO v2d3
0x2d6: v2d6(0x2de) = CONST 
0x2d9: JUMPI v2d6(0x2de) v2d5
----------------------------------

Begin block 0x2da
prev = {'0x2d2'}, next = {}
----------------------------------
Block 0x2da
0x2da: v2da(0x0) = CONST 
0x2dd: REVERT v2da(0x0) v2da(0x0)
----------------------------------

Begin block 0x2de
prev = {'0x2d2'}, next = {'0xd7d'}
----------------------------------
Block 0x2de
0x2e0: v2e0(0x2e7) = CONST 
0x2e3: v2e3(0xd7d) = CONST 
0x2e6: JUMP v2e3(0xd7d)
----------------------------------

Begin block 0x2e7
prev = {'0xd7d'}, next = {}
----------------------------------
Block 0x2e7
0x2e8: v2e8(0x40) = CONST 
0x2ea: v2ea = MLOAD v2e8(0x40)
0x2ed: v2ed(0xff) = CONST 
0x2ef: v2ef = AND v2ed(0xff) vd8d
0x2f0: v2f0(0xff) = CONST 
0x2f2: v2f2 = AND v2f0(0xff) v2ef
0x2f4: MSTORE v2ea v2f2
0x2f5: v2f5(0x20) = CONST 
0x2f7: v2f7 = ADD v2f5(0x20) v2ea
0x2fb: v2fb(0x40) = CONST 
0x2fd: v2fd = MLOAD v2fb(0x40)
0x300: v300 = SUB v2f7 v2fd
0x302: RETURN v2fd v300
----------------------------------

Begin block 0x303
prev = {}, next = {'0x30b', '0x30f'}
----------------------------------
function _totalSupply()()
Block 0x303
0x304: v304 = CALLVALUE 
0x306: v306 = ISZERO v304
0x307: v307(0x30f) = CONST 
0x30a: JUMPI v307(0x30f) v306
----------------------------------

Begin block 0x30b
prev = {'0x303'}, next = {}
----------------------------------
Block 0x30b
0x30b: v30b(0x0) = CONST 
0x30e: REVERT v30b(0x0) v30b(0x0)
----------------------------------

Begin block 0x30f
prev = {'0x303'}, next = {'0xd90'}
----------------------------------
Block 0x30f
0x311: v311(0x318) = CONST 
0x314: v314(0xd90) = CONST 
0x317: JUMP v314(0xd90)
----------------------------------

Begin block 0x318
prev = {'0xd90'}, next = {}
----------------------------------
Block 0x318
0x319: v319(0x40) = CONST 
0x31b: v31b = MLOAD v319(0x40)
0x31f: MSTORE v31b vd93
0x320: v320(0x20) = CONST 
0x322: v322 = ADD v320(0x20) v31b
0x326: v326(0x40) = CONST 
0x328: v328 = MLOAD v326(0x40)
0x32b: v32b = SUB v322 v328
0x32d: RETURN v328 v32b
----------------------------------

Begin block 0x32e
prev = {}, next = {'0x33a', '0x336'}
----------------------------------
function balanceOf(address)()
Block 0x32e
0x32f: v32f = CALLVALUE 
0x331: v331 = ISZERO v32f
0x332: v332(0x33a) = CONST 
0x335: JUMPI v332(0x33a) v331
----------------------------------

Begin block 0x336
prev = {'0x32e'}, next = {}
----------------------------------
Block 0x336
0x336: v336(0x0) = CONST 
0x339: REVERT v336(0x0) v336(0x0)
----------------------------------

Begin block 0x33a
prev = {'0x32e'}, next = {'0x34d', '0x351'}
----------------------------------
Block 0x33a
0x33c: v33c(0x37d) = CONST 
0x33f: v33f(0x4) = CONST 
0x342: v342 = CALLDATASIZE 
0x343: v343 = SUB v342 v33f(0x4)
0x344: v344(0x20) = CONST 
0x347: v347 = LT v343 v344(0x20)
0x348: v348 = ISZERO v347
0x349: v349(0x351) = CONST 
0x34c: JUMPI v349(0x351) v348
----------------------------------

Begin block 0x34d
prev = {'0x33a'}, next = {}
----------------------------------
Block 0x34d
0x34d: v34d(0x0) = CONST 
0x350: REVERT v34d(0x0) v34d(0x0)
----------------------------------

Begin block 0x351
prev = {'0x33a'}, next = {'0xd96'}
----------------------------------
Block 0x351
0x353: v353 = ADD v33f(0x4) v343
0x357: v357 = CALLDATALOAD v33f(0x4)
0x358: v358(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x36d: v36d = AND v358(0xffffffffffffffffffffffffffffffffffffffff) v357
0x36f: v36f(0x20) = CONST 
0x371: v371 = ADD v36f(0x20) v33f(0x4)
0x379: v379(0xd96) = CONST 
0x37c: JUMP v379(0xd96)
----------------------------------

Begin block 0x37d
prev = {'0xd96'}, next = {}
----------------------------------
Block 0x37d
0x37e: v37e(0x40) = CONST 
0x380: v380 = MLOAD v37e(0x40)
0x384: MSTORE v380 vdd8
0x385: v385(0x20) = CONST 
0x387: v387 = ADD v385(0x20) v380
0x38b: v38b(0x40) = CONST 
0x38d: v38d = MLOAD v38b(0x40)
0x390: v390 = SUB v387 v38d
0x392: RETURN v38d v390
----------------------------------

Begin block 0x393
prev = {}, next = {'0x39f', '0x39b'}
----------------------------------
function acceptOwnership()()
Block 0x393
0x394: v394 = CALLVALUE 
0x396: v396 = ISZERO v394
0x397: v397(0x39f) = CONST 
0x39a: JUMPI v397(0x39f) v396
----------------------------------

Begin block 0x39b
prev = {'0x393'}, next = {}
----------------------------------
Block 0x39b
0x39b: v39b(0x0) = CONST 
0x39e: REVERT v39b(0x0) v39b(0x0)
----------------------------------

Begin block 0x39f
prev = {'0x393'}, next = {'0xddf'}
----------------------------------
Block 0x39f
0x3a1: v3a1(0x3a8) = CONST 
0x3a4: v3a4(0xddf) = CONST 
0x3a7: JUMP v3a4(0xddf)
----------------------------------

Begin block 0x3a8
prev = {'0xe3b'}, next = {}
----------------------------------
Block 0x3a8
0x3a9: STOP 
----------------------------------

Begin block 0x3aa
prev = {}, next = {'0x3b2', '0x3b6'}
----------------------------------
function owner()()
Block 0x3aa
0x3ab: v3ab = CALLVALUE 
0x3ad: v3ad = ISZERO v3ab
0x3ae: v3ae(0x3b6) = CONST 
0x3b1: JUMPI v3ae(0x3b6) v3ad
----------------------------------

Begin block 0x3b2
prev = {'0x3aa'}, next = {}
----------------------------------
Block 0x3b2
0x3b2: v3b2(0x0) = CONST 
0x3b5: REVERT v3b2(0x0) v3b2(0x0)
----------------------------------

Begin block 0x3b6
prev = {'0x3aa'}, next = {'0xf7e'}
----------------------------------
Block 0x3b6
0x3b8: v3b8(0x3bf) = CONST 
0x3bb: v3bb(0xf7e) = CONST 
0x3be: JUMP v3bb(0xf7e)
----------------------------------

Begin block 0x3bf
prev = {'0xf7e'}, next = {}
----------------------------------
Block 0x3bf
0x3c0: v3c0(0x40) = CONST 
0x3c2: v3c2 = MLOAD v3c0(0x40)
0x3c5: v3c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3da: v3da = AND v3c5(0xffffffffffffffffffffffffffffffffffffffff) vfa0
0x3db: v3db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3f0: v3f0 = AND v3db(0xffffffffffffffffffffffffffffffffffffffff) v3da
0x3f2: MSTORE v3c2 v3f0
0x3f3: v3f3(0x20) = CONST 
0x3f5: v3f5 = ADD v3f3(0x20) v3c2
0x3f9: v3f9(0x40) = CONST 
0x3fb: v3fb = MLOAD v3f9(0x40)
0x3fe: v3fe = SUB v3f5 v3fb
0x400: RETURN v3fb v3fe
----------------------------------

Begin block 0x401
prev = {}, next = {'0x40d', '0x409'}
----------------------------------
function symbol()()
Block 0x401
0x402: v402 = CALLVALUE 
0x404: v404 = ISZERO v402
0x405: v405(0x40d) = CONST 
0x408: JUMPI v405(0x40d) v404
----------------------------------

Begin block 0x409
prev = {'0x401'}, next = {}
----------------------------------
Block 0x409
0x409: v409(0x0) = CONST 
0x40c: REVERT v409(0x0) v409(0x0)
----------------------------------

Begin block 0x40d
prev = {'0x401'}, next = {'0xfa3'}
----------------------------------
Block 0x40d
0x40f: v40f(0x416) = CONST 
0x412: v412(0xfa3) = CONST 
0x415: JUMP v412(0xfa3)
----------------------------------

Begin block 0x416
prev = {'0x1039'}, next = {'0x43b'}
----------------------------------
Block 0x416
0x417: v417(0x40) = CONST 
0x419: v419 = MLOAD v417(0x40)
0x41c: v41c(0x20) = CONST 
0x41e: v41e = ADD v41c(0x20) v419
0x421: v421 = SUB v41e v419
0x423: MSTORE v419 v421
0x427: v427 = MLOAD vfc8
0x429: MSTORE v41e v427
0x42a: v42a(0x20) = CONST 
0x42c: v42c = ADD v42a(0x20) v41e
0x430: v430 = MLOAD vfc8
0x432: v432(0x20) = CONST 
0x434: v434 = ADD v432(0x20) vfc8
0x439: v439(0x0) = CONST 
----------------------------------

Begin block 0x43b
prev = {'0x444', '0x416'}, next = {'0x444', '0x456'}
----------------------------------
Block 0x43b
0x43b_0x0: v43b_0 = PHI v439(0x0) v44f
0x43e: v43e = LT v43b_0 v430
0x43f: v43f = ISZERO v43e
0x440: v440(0x456) = CONST 
0x443: JUMPI v440(0x456) v43f
----------------------------------

Begin block 0x444
prev = {'0x43b'}, next = {'0x43b'}
----------------------------------
Block 0x444
0x444_0x0: v444_0 = PHI v439(0x0) v44f
0x446: v446 = ADD v434 v444_0
0x447: v447 = MLOAD v446
0x44a: v44a = ADD v42c v444_0
0x44b: MSTORE v44a v447
0x44c: v44c(0x20) = CONST 
0x44f: v44f = ADD v444_0 v44c(0x20)
0x452: v452(0x43b) = CONST 
0x455: JUMP v452(0x43b)
----------------------------------

Begin block 0x456
prev = {'0x43b'}, next = {'0x483', '0x46a'}
----------------------------------
Block 0x456
0x45f: v45f = ADD v430 v42c
0x461: v461(0x1f) = CONST 
0x463: v463 = AND v461(0x1f) v430
0x465: v465 = ISZERO v463
0x466: v466(0x483) = CONST 
0x469: JUMPI v466(0x483) v465
----------------------------------

Begin block 0x46a
prev = {'0x456'}, next = {'0x483'}
----------------------------------
Block 0x46a
0x46c: v46c = SUB v45f v463
0x46e: v46e = MLOAD v46c
0x46f: v46f(0x1) = CONST 
0x472: v472(0x20) = CONST 
0x474: v474 = SUB v472(0x20) v463
0x475: v475(0x100) = CONST 
0x478: v478 = EXP v475(0x100) v474
0x479: v479 = SUB v478 v46f(0x1)
0x47a: v47a = NOT v479
0x47b: v47b = AND v47a v46e
0x47d: MSTORE v46c v47b
0x47e: v47e(0x20) = CONST 
0x480: v480 = ADD v47e(0x20) v46c
----------------------------------

Begin block 0x483
prev = {'0x456', '0x46a'}, next = {}
----------------------------------
Block 0x483
0x483_0x1: v483_1 = PHI v45f v480
0x489: v489(0x40) = CONST 
0x48b: v48b = MLOAD v489(0x40)
0x48e: v48e = SUB v483_1 v48b
0x490: RETURN v48b v48e
----------------------------------

Begin block 0x491
prev = {}, next = {'0x49d', '0x499'}
----------------------------------
function safeSub(uint256,uint256)()
Block 0x491
0x492: v492 = CALLVALUE 
0x494: v494 = ISZERO v492
0x495: v495(0x49d) = CONST 
0x498: JUMPI v495(0x49d) v494
----------------------------------

Begin block 0x499
prev = {'0x491'}, next = {}
----------------------------------
Block 0x499
0x499: v499(0x0) = CONST 
0x49c: REVERT v499(0x0) v499(0x0)
----------------------------------

Begin block 0x49d
prev = {'0x491'}, next = {'0x4b0', '0x4b4'}
----------------------------------
Block 0x49d
0x49f: v49f(0x4d4) = CONST 
0x4a2: v4a2(0x4) = CONST 
0x4a5: v4a5 = CALLDATASIZE 
0x4a6: v4a6 = SUB v4a5 v4a2(0x4)
0x4a7: v4a7(0x40) = CONST 
0x4aa: v4aa = LT v4a6 v4a7(0x40)
0x4ab: v4ab = ISZERO v4aa
0x4ac: v4ac(0x4b4) = CONST 
0x4af: JUMPI v4ac(0x4b4) v4ab
----------------------------------

Begin block 0x4b0
prev = {'0x49d'}, next = {}
----------------------------------
Block 0x4b0
0x4b0: v4b0(0x0) = CONST 
0x4b3: REVERT v4b0(0x0) v4b0(0x0)
----------------------------------

Begin block 0x4b4
prev = {'0x49d'}, next = {'0x10410x491'}
----------------------------------
Block 0x4b4
0x4b6: v4b6 = ADD v4a2(0x4) v4a6
0x4ba: v4ba = CALLDATALOAD v4a2(0x4)
0x4bc: v4bc(0x20) = CONST 
0x4be: v4be = ADD v4bc(0x20) v4a2(0x4)
0x4c4: v4c4 = CALLDATALOAD v4be
0x4c6: v4c6(0x20) = CONST 
0x4c8: v4c8 = ADD v4c6(0x20) v4be
0x4d0: v4d0(0x1041) = CONST 
0x4d3: JUMP v4d0(0x1041)
----------------------------------

Begin block 0x4d4
prev = {'0x10520x491'}, next = {}
----------------------------------
Block 0x4d4
0x4d5: v4d5(0x40) = CONST 
0x4d7: v4d7 = MLOAD v4d5(0x40)
0x4db: MSTORE v4d7 v4911055
0x4dc: v4dc(0x20) = CONST 
0x4de: v4de = ADD v4dc(0x20) v4d7
0x4e2: v4e2(0x40) = CONST 
0x4e4: v4e4 = MLOAD v4e2(0x40)
0x4e7: v4e7 = SUB v4de v4e4
0x4e9: RETURN v4e4 v4e7
----------------------------------

Begin block 0x4ea
prev = {}, next = {'0x4f2', '0x4f6'}
----------------------------------
function transfer(address,uint256)()
Block 0x4ea
0x4eb: v4eb = CALLVALUE 
0x4ed: v4ed = ISZERO v4eb
0x4ee: v4ee(0x4f6) = CONST 
0x4f1: JUMPI v4ee(0x4f6) v4ed
----------------------------------

Begin block 0x4f2
prev = {'0x4ea'}, next = {}
----------------------------------
Block 0x4f2
0x4f2: v4f2(0x0) = CONST 
0x4f5: REVERT v4f2(0x0) v4f2(0x0)
----------------------------------

Begin block 0x4f6
prev = {'0x4ea'}, next = {'0x50d', '0x509'}
----------------------------------
Block 0x4f6
0x4f8: v4f8(0x543) = CONST 
0x4fb: v4fb(0x4) = CONST 
0x4fe: v4fe = CALLDATASIZE 
0x4ff: v4ff = SUB v4fe v4fb(0x4)
0x500: v500(0x40) = CONST 
0x503: v503 = LT v4ff v500(0x40)
0x504: v504 = ISZERO v503
0x505: v505(0x50d) = CONST 
0x508: JUMPI v505(0x50d) v504
----------------------------------

Begin block 0x509
prev = {'0x4f6'}, next = {}
----------------------------------
Block 0x509
0x509: v509(0x0) = CONST 
0x50c: REVERT v509(0x0) v509(0x0)
----------------------------------

Begin block 0x50d
prev = {'0x4f6'}, next = {'0x105d'}
----------------------------------
Block 0x50d
0x50f: v50f = ADD v4fb(0x4) v4ff
0x513: v513 = CALLDATALOAD v4fb(0x4)
0x514: v514(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x529: v529 = AND v514(0xffffffffffffffffffffffffffffffffffffffff) v513
0x52b: v52b(0x20) = CONST 
0x52d: v52d = ADD v52b(0x20) v4fb(0x4)
0x533: v533 = CALLDATALOAD v52d
0x535: v535(0x20) = CONST 
0x537: v537 = ADD v535(0x20) v52d
0x53f: v53f(0x105d) = CONST 
0x542: JUMP v53f(0x105d)
----------------------------------

Begin block 0x543
prev = {'0x1134'}, next = {}
----------------------------------
Block 0x543
0x544: v544(0x40) = CONST 
0x546: v546 = MLOAD v544(0x40)
0x549: v549 = ISZERO v11dd(0x1)
0x54a: v54a = ISZERO v549
0x54b: v54b = ISZERO v54a
0x54c: v54c = ISZERO v54b
0x54e: MSTORE v546 v54c
0x54f: v54f(0x20) = CONST 
0x551: v551 = ADD v54f(0x20) v546
0x555: v555(0x40) = CONST 
0x557: v557 = MLOAD v555(0x40)
0x55a: v55a = SUB v551 v557
0x55c: RETURN v557 v55a
----------------------------------

Begin block 0x55d
prev = {}, next = {'0x569', '0x565'}
----------------------------------
function safeDiv(uint256,uint256)()
Block 0x55d
0x55e: v55e = CALLVALUE 
0x560: v560 = ISZERO v55e
0x561: v561(0x569) = CONST 
0x564: JUMPI v561(0x569) v560
----------------------------------

Begin block 0x565
prev = {'0x55d'}, next = {}
----------------------------------
Block 0x565
0x565: v565(0x0) = CONST 
0x568: REVERT v565(0x0) v565(0x0)
----------------------------------

Begin block 0x569
prev = {'0x55d'}, next = {'0x580', '0x57c'}
----------------------------------
Block 0x569
0x56b: v56b(0x5a0) = CONST 
0x56e: v56e(0x4) = CONST 
0x571: v571 = CALLDATASIZE 
0x572: v572 = SUB v571 v56e(0x4)
0x573: v573(0x40) = CONST 
0x576: v576 = LT v572 v573(0x40)
0x577: v577 = ISZERO v576
0x578: v578(0x580) = CONST 
0x57b: JUMPI v578(0x580) v577
----------------------------------

Begin block 0x57c
prev = {'0x569'}, next = {}
----------------------------------
Block 0x57c
0x57c: v57c(0x0) = CONST 
0x57f: REVERT v57c(0x0) v57c(0x0)
----------------------------------

Begin block 0x580
prev = {'0x569'}, next = {'0x11e6'}
----------------------------------
Block 0x580
0x582: v582 = ADD v56e(0x4) v572
0x586: v586 = CALLDATALOAD v56e(0x4)
0x588: v588(0x20) = CONST 
0x58a: v58a = ADD v588(0x20) v56e(0x4)
0x590: v590 = CALLDATALOAD v58a
0x592: v592(0x20) = CONST 
0x594: v594 = ADD v592(0x20) v58a
0x59c: v59c(0x11e6) = CONST 
0x59f: JUMP v59c(0x11e6)
----------------------------------

Begin block 0x5a0
prev = {'0x1201'}, next = {}
----------------------------------
Block 0x5a0
0x5a1: v5a1(0x40) = CONST 
0x5a3: v5a3 = MLOAD v5a1(0x40)
0x5a7: MSTORE v5a3 v1202
0x5a8: v5a8(0x20) = CONST 
0x5aa: v5aa = ADD v5a8(0x20) v5a3
0x5ae: v5ae(0x40) = CONST 
0x5b0: v5b0 = MLOAD v5ae(0x40)
0x5b3: v5b3 = SUB v5aa v5b0
0x5b5: RETURN v5b0 v5b3
----------------------------------

Begin block 0x5b6
prev = {}, next = {'0x5c2', '0x5be'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x5b6
0x5b7: v5b7 = CALLVALUE 
0x5b9: v5b9 = ISZERO v5b7
0x5ba: v5ba(0x5c2) = CONST 
0x5bd: JUMPI v5ba(0x5c2) v5b9
----------------------------------

Begin block 0x5be
prev = {'0x5b6'}, next = {}
----------------------------------
Block 0x5be
0x5be: v5be(0x0) = CONST 
0x5c1: REVERT v5be(0x0) v5be(0x0)
----------------------------------

Begin block 0x5c2
prev = {'0x5b6'}, next = {'0x5d9', '0x5d5'}
----------------------------------
Block 0x5c2
0x5c4: v5c4(0x6a6) = CONST 
0x5c7: v5c7(0x4) = CONST 
0x5ca: v5ca = CALLDATASIZE 
0x5cb: v5cb = SUB v5ca v5c7(0x4)
0x5cc: v5cc(0x60) = CONST 
0x5cf: v5cf = LT v5cb v5cc(0x60)
0x5d0: v5d0 = ISZERO v5cf
0x5d1: v5d1(0x5d9) = CONST 
0x5d4: JUMPI v5d1(0x5d9) v5d0
----------------------------------

Begin block 0x5d5
prev = {'0x5c2'}, next = {}
----------------------------------
Block 0x5d5
0x5d5: v5d5(0x0) = CONST 
0x5d8: REVERT v5d5(0x0) v5d5(0x0)
----------------------------------

Begin block 0x5d9
prev = {'0x5c2'}, next = {'0x620', '0x61c'}
----------------------------------
Block 0x5d9
0x5db: v5db = ADD v5c7(0x4) v5cb
0x5df: v5df = CALLDATALOAD v5c7(0x4)
0x5e0: v5e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5f5: v5f5 = AND v5e0(0xffffffffffffffffffffffffffffffffffffffff) v5df
0x5f7: v5f7(0x20) = CONST 
0x5f9: v5f9 = ADD v5f7(0x20) v5c7(0x4)
0x5ff: v5ff = CALLDATALOAD v5f9
0x601: v601(0x20) = CONST 
0x603: v603 = ADD v601(0x20) v5f9
0x609: v609 = CALLDATALOAD v603
0x60b: v60b(0x20) = CONST 
0x60d: v60d = ADD v60b(0x20) v603
0x60f: v60f(0x100000000) = CONST 
0x616: v616 = GT v609 v60f(0x100000000)
0x617: v617 = ISZERO v616
0x618: v618(0x620) = CONST 
0x61b: JUMPI v618(0x620) v617
----------------------------------

Begin block 0x61c
prev = {'0x5d9'}, next = {}
----------------------------------
Block 0x61c
0x61c: v61c(0x0) = CONST 
0x61f: REVERT v61c(0x0) v61c(0x0)
----------------------------------

Begin block 0x620
prev = {'0x5d9'}, next = {'0x632', '0x62e'}
----------------------------------
Block 0x620
0x622: v622 = ADD v5c7(0x4) v609
0x624: v624(0x20) = CONST 
0x627: v627 = ADD v622 v624(0x20)
0x628: v628 = GT v627 v5db
0x629: v629 = ISZERO v628
0x62a: v62a(0x632) = CONST 
0x62d: JUMPI v62a(0x632) v629
----------------------------------

Begin block 0x62e
prev = {'0x620'}, next = {}
----------------------------------
Block 0x62e
0x62e: v62e(0x0) = CONST 
0x631: REVERT v62e(0x0) v62e(0x0)
----------------------------------

Begin block 0x632
prev = {'0x620'}, next = {'0x650', '0x654'}
----------------------------------
Block 0x632
0x634: v634 = CALLDATALOAD v622
0x636: v636(0x20) = CONST 
0x638: v638 = ADD v636(0x20) v622
0x63b: v63b(0x1) = CONST 
0x63e: v63e = MUL v634 v63b(0x1)
0x640: v640 = ADD v638 v63e
0x641: v641 = GT v640 v5db
0x642: v642(0x100000000) = CONST 
0x649: v649 = GT v634 v642(0x100000000)
0x64a: v64a = OR v649 v641
0x64b: v64b = ISZERO v64a
0x64c: v64c(0x654) = CONST 
0x64f: JUMPI v64c(0x654) v64b
----------------------------------

Begin block 0x650
prev = {'0x632'}, next = {}
----------------------------------
Block 0x650
0x650: v650(0x0) = CONST 
0x653: REVERT v650(0x0) v650(0x0)
----------------------------------

Begin block 0x654
prev = {'0x632'}, next = {'0x120a'}
----------------------------------
Block 0x654
0x659: v659(0x1f) = CONST 
0x65b: v65b = ADD v659(0x1f) v634
0x65c: v65c(0x20) = CONST 
0x660: v660 = DIV v65b v65c(0x20)
0x661: v661 = MUL v660 v65c(0x20)
0x662: v662(0x20) = CONST 
0x664: v664 = ADD v662(0x20) v661
0x665: v665(0x40) = CONST 
0x667: v667 = MLOAD v665(0x40)
0x66a: v66a = ADD v667 v664
0x66b: v66b(0x40) = CONST 
0x66d: MSTORE v66b(0x40) v66a
0x675: MSTORE v667 v634
0x676: v676(0x20) = CONST 
0x678: v678 = ADD v676(0x20) v667
0x67e: CALLDATACOPY v678 v638 v634
0x67f: v67f(0x0) = CONST 
0x683: v683 = ADD v678 v634
0x684: MSTORE v683 v67f(0x0)
0x685: v685(0x1f) = CONST 
0x687: v687(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v685(0x1f)
0x688: v688(0x1f) = CONST 
0x68b: v68b = ADD v634 v688(0x1f)
0x68c: v68c = AND v68b v687(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0x691: v691 = ADD v678 v68c
0x6a2: v6a2(0x120a) = CONST 
0x6a5: JUMP v6a2(0x120a)
----------------------------------

Begin block 0x6a6
prev = {'0x144a'}, next = {}
----------------------------------
Block 0x6a6
0x6a7: v6a7(0x40) = CONST 
0x6a9: v6a9 = MLOAD v6a7(0x40)
0x6ac: v6ac = ISZERO v144f(0x1)
0x6ad: v6ad = ISZERO v6ac
0x6ae: v6ae = ISZERO v6ad
0x6af: v6af = ISZERO v6ae
0x6b1: MSTORE v6a9 v6af
0x6b2: v6b2(0x20) = CONST 
0x6b4: v6b4 = ADD v6b2(0x20) v6a9
0x6b8: v6b8(0x40) = CONST 
0x6ba: v6ba = MLOAD v6b8(0x40)
0x6bd: v6bd = SUB v6b4 v6ba
0x6bf: RETURN v6ba v6bd
----------------------------------

Begin block 0x6c0
prev = {}, next = {'0x6cc', '0x6c8'}
----------------------------------
function safeMul(uint256,uint256)()
Block 0x6c0
0x6c1: v6c1 = CALLVALUE 
0x6c3: v6c3 = ISZERO v6c1
0x6c4: v6c4(0x6cc) = CONST 
0x6c7: JUMPI v6c4(0x6cc) v6c3
----------------------------------

Begin block 0x6c8
prev = {'0x6c0'}, next = {}
----------------------------------
Block 0x6c8
0x6c8: v6c8(0x0) = CONST 
0x6cb: REVERT v6c8(0x0) v6c8(0x0)
----------------------------------

Begin block 0x6cc
prev = {'0x6c0'}, next = {'0x6df', '0x6e3'}
----------------------------------
Block 0x6cc
0x6ce: v6ce(0x703) = CONST 
0x6d1: v6d1(0x4) = CONST 
0x6d4: v6d4 = CALLDATASIZE 
0x6d5: v6d5 = SUB v6d4 v6d1(0x4)
0x6d6: v6d6(0x40) = CONST 
0x6d9: v6d9 = LT v6d5 v6d6(0x40)
0x6da: v6da = ISZERO v6d9
0x6db: v6db(0x6e3) = CONST 
0x6de: JUMPI v6db(0x6e3) v6da
----------------------------------

Begin block 0x6df
prev = {'0x6cc'}, next = {}
----------------------------------
Block 0x6df
0x6df: v6df(0x0) = CONST 
0x6e2: REVERT v6df(0x0) v6df(0x0)
----------------------------------

Begin block 0x6e3
prev = {'0x6cc'}, next = {'0x1459'}
----------------------------------
Block 0x6e3
0x6e5: v6e5 = ADD v6d1(0x4) v6d5
0x6e9: v6e9 = CALLDATALOAD v6d1(0x4)
0x6eb: v6eb(0x20) = CONST 
0x6ed: v6ed = ADD v6eb(0x20) v6d1(0x4)
0x6f3: v6f3 = CALLDATALOAD v6ed
0x6f5: v6f5(0x20) = CONST 
0x6f7: v6f7 = ADD v6f5(0x20) v6ed
0x6ff: v6ff(0x1459) = CONST 
0x702: JUMP v6ff(0x1459)
----------------------------------

Begin block 0x703
prev = {'0x1484'}, next = {}
----------------------------------
Block 0x703
0x704: v704(0x40) = CONST 
0x706: v706 = MLOAD v704(0x40)
0x70a: MSTORE v706 v145e
0x70b: v70b(0x20) = CONST 
0x70d: v70d = ADD v70b(0x20) v706
0x711: v711(0x40) = CONST 
0x713: v713 = MLOAD v711(0x40)
0x716: v716 = SUB v70d v713
0x718: RETURN v713 v716
----------------------------------

Begin block 0x719
prev = {}, next = {'0x721', '0x725'}
----------------------------------
function newOwner()()
Block 0x719
0x71a: v71a = CALLVALUE 
0x71c: v71c = ISZERO v71a
0x71d: v71d(0x725) = CONST 
0x720: JUMPI v71d(0x725) v71c
----------------------------------

Begin block 0x721
prev = {'0x719'}, next = {}
----------------------------------
Block 0x721
0x721: v721(0x0) = CONST 
0x724: REVERT v721(0x0) v721(0x0)
----------------------------------

Begin block 0x725
prev = {'0x719'}, next = {'0x148a'}
----------------------------------
Block 0x725
0x727: v727(0x72e) = CONST 
0x72a: v72a(0x148a) = CONST 
0x72d: JUMP v72a(0x148a)
----------------------------------

Begin block 0x72e
prev = {'0x148a'}, next = {}
----------------------------------
Block 0x72e
0x72f: v72f(0x40) = CONST 
0x731: v731 = MLOAD v72f(0x40)
0x734: v734(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x749: v749 = AND v734(0xffffffffffffffffffffffffffffffffffffffff) v14ad
0x74a: v74a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75f: v75f = AND v74a(0xffffffffffffffffffffffffffffffffffffffff) v749
0x761: MSTORE v731 v75f
0x762: v762(0x20) = CONST 
0x764: v764 = ADD v762(0x20) v731
0x768: v768(0x40) = CONST 
0x76a: v76a = MLOAD v768(0x40)
0x76d: v76d = SUB v764 v76a
0x76f: RETURN v76a v76d
----------------------------------

Begin block 0x770
prev = {}, next = {'0x778', '0x77c'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x770
0x771: v771 = CALLVALUE 
0x773: v773 = ISZERO v771
0x774: v774(0x77c) = CONST 
0x777: JUMPI v774(0x77c) v773
----------------------------------

Begin block 0x778
prev = {'0x770'}, next = {}
----------------------------------
Block 0x778
0x778: v778(0x0) = CONST 
0x77b: REVERT v778(0x0) v778(0x0)
----------------------------------

Begin block 0x77c
prev = {'0x770'}, next = {'0x78f', '0x793'}
----------------------------------
Block 0x77c
0x77e: v77e(0x7c9) = CONST 
0x781: v781(0x4) = CONST 
0x784: v784 = CALLDATASIZE 
0x785: v785 = SUB v784 v781(0x4)
0x786: v786(0x40) = CONST 
0x789: v789 = LT v785 v786(0x40)
0x78a: v78a = ISZERO v789
0x78b: v78b(0x793) = CONST 
0x78e: JUMPI v78b(0x793) v78a
----------------------------------

Begin block 0x78f
prev = {'0x77c'}, next = {}
----------------------------------
Block 0x78f
0x78f: v78f(0x0) = CONST 
0x792: REVERT v78f(0x0) v78f(0x0)
----------------------------------

Begin block 0x793
prev = {'0x77c'}, next = {'0x14b0'}
----------------------------------
Block 0x793
0x795: v795 = ADD v781(0x4) v785
0x799: v799 = CALLDATALOAD v781(0x4)
0x79a: v79a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7af: v7af = AND v79a(0xffffffffffffffffffffffffffffffffffffffff) v799
0x7b1: v7b1(0x20) = CONST 
0x7b3: v7b3 = ADD v7b1(0x20) v781(0x4)
0x7b9: v7b9 = CALLDATALOAD v7b3
0x7bb: v7bb(0x20) = CONST 
0x7bd: v7bd = ADD v7bb(0x20) v7b3
0x7c5: v7c5(0x14b0) = CONST 
0x7c8: JUMP v7c5(0x14b0)
----------------------------------

Begin block 0x7c9
prev = {'0x15fb'}, next = {}
----------------------------------
Block 0x7c9
0x7ca: v7ca(0x40) = CONST 
0x7cc: v7cc = MLOAD v7ca(0x40)
0x7cf: v7cf = ISZERO v1601
0x7d0: v7d0 = ISZERO v7cf
0x7d1: v7d1 = ISZERO v7d0
0x7d2: v7d2 = ISZERO v7d1
0x7d4: MSTORE v7cc v7d2
0x7d5: v7d5(0x20) = CONST 
0x7d7: v7d7 = ADD v7d5(0x20) v7cc
0x7db: v7db(0x40) = CONST 
0x7dd: v7dd = MLOAD v7db(0x40)
0x7e0: v7e0 = SUB v7d7 v7dd
0x7e2: RETURN v7dd v7e0
----------------------------------

Begin block 0x7e3
prev = {}, next = {'0x7eb', '0x7ef'}
----------------------------------
function allowance(address,address)()
Block 0x7e3
0x7e4: v7e4 = CALLVALUE 
0x7e6: v7e6 = ISZERO v7e4
0x7e7: v7e7(0x7ef) = CONST 
0x7ea: JUMPI v7e7(0x7ef) v7e6
----------------------------------

Begin block 0x7eb
prev = {'0x7e3'}, next = {}
----------------------------------
Block 0x7eb
0x7eb: v7eb(0x0) = CONST 
0x7ee: REVERT v7eb(0x0) v7eb(0x0)
----------------------------------

Begin block 0x7ef
prev = {'0x7e3'}, next = {'0x806', '0x802'}
----------------------------------
Block 0x7ef
0x7f1: v7f1(0x852) = CONST 
0x7f4: v7f4(0x4) = CONST 
0x7f7: v7f7 = CALLDATASIZE 
0x7f8: v7f8 = SUB v7f7 v7f4(0x4)
0x7f9: v7f9(0x40) = CONST 
0x7fc: v7fc = LT v7f8 v7f9(0x40)
0x7fd: v7fd = ISZERO v7fc
0x7fe: v7fe(0x806) = CONST 
0x801: JUMPI v7fe(0x806) v7fd
----------------------------------

Begin block 0x802
prev = {'0x7ef'}, next = {}
----------------------------------
Block 0x802
0x802: v802(0x0) = CONST 
0x805: REVERT v802(0x0) v802(0x0)
----------------------------------

Begin block 0x806
prev = {'0x7ef'}, next = {'0x1614'}
----------------------------------
Block 0x806
0x808: v808 = ADD v7f4(0x4) v7f8
0x80c: v80c = CALLDATALOAD v7f4(0x4)
0x80d: v80d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x822: v822 = AND v80d(0xffffffffffffffffffffffffffffffffffffffff) v80c
0x824: v824(0x20) = CONST 
0x826: v826 = ADD v824(0x20) v7f4(0x4)
0x82c: v82c = CALLDATALOAD v826
0x82d: v82d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x842: v842 = AND v82d(0xffffffffffffffffffffffffffffffffffffffff) v82c
0x844: v844(0x20) = CONST 
0x846: v846 = ADD v844(0x20) v826
0x84e: v84e(0x1614) = CONST 
0x851: JUMP v84e(0x1614)
----------------------------------

Begin block 0x852
prev = {'0x1614'}, next = {}
----------------------------------
Block 0x852
0x853: v853(0x40) = CONST 
0x855: v855 = MLOAD v853(0x40)
0x859: MSTORE v855 v1693
0x85a: v85a(0x20) = CONST 
0x85c: v85c = ADD v85a(0x20) v855
0x860: v860(0x40) = CONST 
0x862: v862 = MLOAD v860(0x40)
0x865: v865 = SUB v85c v862
0x867: RETURN v862 v865
----------------------------------

Begin block 0x868
prev = {}, next = {'0x870', '0x874'}
----------------------------------
function safeAdd(uint256,uint256)()
Block 0x868
0x869: v869 = CALLVALUE 
0x86b: v86b = ISZERO v869
0x86c: v86c(0x874) = CONST 
0x86f: JUMPI v86c(0x874) v86b
----------------------------------

Begin block 0x870
prev = {'0x868'}, next = {}
----------------------------------
Block 0x870
0x870: v870(0x0) = CONST 
0x873: REVERT v870(0x0) v870(0x0)
----------------------------------

Begin block 0x874
prev = {'0x868'}, next = {'0x88b', '0x887'}
----------------------------------
Block 0x874
0x876: v876(0x8ab) = CONST 
0x879: v879(0x4) = CONST 
0x87c: v87c = CALLDATASIZE 
0x87d: v87d = SUB v87c v879(0x4)
0x87e: v87e(0x40) = CONST 
0x881: v881 = LT v87d v87e(0x40)
0x882: v882 = ISZERO v881
0x883: v883(0x88b) = CONST 
0x886: JUMPI v883(0x88b) v882
----------------------------------

Begin block 0x887
prev = {'0x874'}, next = {}
----------------------------------
Block 0x887
0x887: v887(0x0) = CONST 
0x88a: REVERT v887(0x0) v887(0x0)
----------------------------------

Begin block 0x88b
prev = {'0x874'}, next = {'0x169b0x868'}
----------------------------------
Block 0x88b
0x88d: v88d = ADD v879(0x4) v87d
0x891: v891 = CALLDATALOAD v879(0x4)
0x893: v893(0x20) = CONST 
0x895: v895 = ADD v893(0x20) v879(0x4)
0x89b: v89b = CALLDATALOAD v895
0x89d: v89d(0x20) = CONST 
0x89f: v89f = ADD v89d(0x20) v895
0x8a7: v8a7(0x169b) = CONST 
0x8aa: JUMP v8a7(0x169b)
----------------------------------

Begin block 0x8ab
prev = {'0x16b10x868'}, next = {}
----------------------------------
Block 0x8ab
0x8ac: v8ac(0x40) = CONST 
0x8ae: v8ae = MLOAD v8ac(0x40)
0x8b2: MSTORE v8ae v86816a0
0x8b3: v8b3(0x20) = CONST 
0x8b5: v8b5 = ADD v8b3(0x20) v8ae
0x8b9: v8b9(0x40) = CONST 
0x8bb: v8bb = MLOAD v8b9(0x40)
0x8be: v8be = SUB v8b5 v8bb
0x8c0: RETURN v8bb v8be
----------------------------------

Begin block 0x8c1
prev = {}, next = {'0x8c9', '0x8cd'}
----------------------------------
function transferOwnership(address)()
Block 0x8c1
0x8c2: v8c2 = CALLVALUE 
0x8c4: v8c4 = ISZERO v8c2
0x8c5: v8c5(0x8cd) = CONST 
0x8c8: JUMPI v8c5(0x8cd) v8c4
----------------------------------

Begin block 0x8c9
prev = {'0x8c1'}, next = {}
----------------------------------
Block 0x8c9
0x8c9: v8c9(0x0) = CONST 
0x8cc: REVERT v8c9(0x0) v8c9(0x0)
----------------------------------

Begin block 0x8cd
prev = {'0x8c1'}, next = {'0x8e0', '0x8e4'}
----------------------------------
Block 0x8cd
0x8cf: v8cf(0x910) = CONST 
0x8d2: v8d2(0x4) = CONST 
0x8d5: v8d5 = CALLDATASIZE 
0x8d6: v8d6 = SUB v8d5 v8d2(0x4)
0x8d7: v8d7(0x20) = CONST 
0x8da: v8da = LT v8d6 v8d7(0x20)
0x8db: v8db = ISZERO v8da
0x8dc: v8dc(0x8e4) = CONST 
0x8df: JUMPI v8dc(0x8e4) v8db
----------------------------------

Begin block 0x8e0
prev = {'0x8cd'}, next = {}
----------------------------------
Block 0x8e0
0x8e0: v8e0(0x0) = CONST 
0x8e3: REVERT v8e0(0x0) v8e0(0x0)
----------------------------------

Begin block 0x8e4
prev = {'0x8cd'}, next = {'0x16b7'}
----------------------------------
Block 0x8e4
0x8e6: v8e6 = ADD v8d2(0x4) v8d6
0x8ea: v8ea = CALLDATALOAD v8d2(0x4)
0x8eb: v8eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x900: v900 = AND v8eb(0xffffffffffffffffffffffffffffffffffffffff) v8ea
0x902: v902(0x20) = CONST 
0x904: v904 = ADD v902(0x20) v8d2(0x4)
0x90c: v90c(0x16b7) = CONST 
0x90f: JUMP v90c(0x16b7)
----------------------------------

Begin block 0x910
prev = {'0x1712'}, next = {}
----------------------------------
Block 0x910
0x911: STOP 
----------------------------------

Begin block 0x912
prev = {'0x11d'}, next = {'0x962', '0x9a8'}
----------------------------------
Block 0x912
0x913: v913(0x3) = CONST 
0x916: v916 = SLOAD v913(0x3)
0x917: v917(0x1) = CONST 
0x91a: v91a(0x1) = CONST 
0x91c: v91c = AND v91a(0x1) v916
0x91d: v91d = ISZERO v91c
0x91e: v91e(0x100) = CONST 
0x921: v921 = MUL v91e(0x100) v91d
0x922: v922 = SUB v921 v917(0x1)
0x923: v923 = AND v922 v916
0x924: v924(0x2) = CONST 
0x927: v927 = DIV v923 v924(0x2)
0x929: v929(0x1f) = CONST 
0x92b: v92b = ADD v929(0x1f) v927
0x92c: v92c(0x20) = CONST 
0x930: v930 = DIV v92b v92c(0x20)
0x931: v931 = MUL v930 v92c(0x20)
0x932: v932(0x20) = CONST 
0x934: v934 = ADD v932(0x20) v931
0x935: v935(0x40) = CONST 
0x937: v937 = MLOAD v935(0x40)
0x93a: v93a = ADD v937 v934
0x93b: v93b(0x40) = CONST 
0x93d: MSTORE v93b(0x40) v93a
0x944: MSTORE v937 v927
0x945: v945(0x20) = CONST 
0x947: v947 = ADD v945(0x20) v937
0x94a: v94a = SLOAD v913(0x3)
0x94b: v94b(0x1) = CONST 
0x94e: v94e(0x1) = CONST 
0x950: v950 = AND v94e(0x1) v94a
0x951: v951 = ISZERO v950
0x952: v952(0x100) = CONST 
0x955: v955 = MUL v952(0x100) v951
0x956: v956 = SUB v955 v94b(0x1)
0x957: v957 = AND v956 v94a
0x958: v958(0x2) = CONST 
0x95b: v95b = DIV v957 v958(0x2)
0x95d: v95d = ISZERO v95b
0x95e: v95e(0x9a8) = CONST 
0x961: JUMPI v95e(0x9a8) v95d
----------------------------------

Begin block 0x962
prev = {'0x912'}, next = {'0x97d', '0x96a'}
----------------------------------
Block 0x962
0x963: v963(0x1f) = CONST 
0x965: v965 = LT v963(0x1f) v95b
0x966: v966(0x97d) = CONST 
0x969: JUMPI v966(0x97d) v965
----------------------------------

Begin block 0x96a
prev = {'0x962'}, next = {'0x9a8'}
----------------------------------
Block 0x96a
0x96a: v96a(0x100) = CONST 
0x96f: v96f = SLOAD v913(0x3)
0x970: v970 = DIV v96f v96a(0x100)
0x971: v971 = MUL v970 v96a(0x100)
0x973: MSTORE v947 v971
0x975: v975(0x20) = CONST 
0x977: v977 = ADD v975(0x20) v947
0x979: v979(0x9a8) = CONST 
0x97c: JUMP v979(0x9a8)
----------------------------------

Begin block 0x97d
prev = {'0x962'}, next = {'0x98b'}
----------------------------------
Block 0x97d
0x97f: v97f = ADD v947 v95b
0x982: v982(0x0) = CONST 
0x984: MSTORE v982(0x0) v913(0x3)
0x985: v985(0x20) = CONST 
0x987: v987(0x0) = CONST 
0x989: v989 = SHA3 v987(0x0) v985(0x20)
----------------------------------

Begin block 0x98b
prev = {'0x97d', '0x98b'}, next = {'0x98b', '0x99f'}
----------------------------------
Block 0x98b
0x98b_0x0: v98b_0 = PHI v947 v997
0x98b_0x1: v98b_1 = PHI v989 v993
0x98d: v98d = SLOAD v98b_1
0x98f: MSTORE v98b_0 v98d
0x991: v991(0x1) = CONST 
0x993: v993 = ADD v991(0x1) v98b_1
0x995: v995(0x20) = CONST 
0x997: v997 = ADD v995(0x20) v98b_0
0x99a: v99a = GT v97f v997
0x99b: v99b(0x98b) = CONST 
0x99e: JUMPI v99b(0x98b) v99a
----------------------------------

Begin block 0x99f
prev = {'0x98b'}, next = {'0x9a8'}
----------------------------------
Block 0x99f
0x9a1: v9a1 = SUB v997 v97f
0x9a2: v9a2(0x1f) = CONST 
0x9a4: v9a4 = AND v9a2(0x1f) v9a1
0x9a6: v9a6 = ADD v97f v9a4
----------------------------------

Begin block 0x9a8
prev = {'0x99f', '0x96a', '0x912'}, next = {'0x126'}
----------------------------------
Block 0x9a8
0x9af: JUMP v11f(0x126)
----------------------------------

Begin block 0x9b0
prev = {'0x1c4'}, next = {'0x1fa'}
----------------------------------
Block 0x9b0
0x9b1: v9b1(0x0) = CONST 
0x9b4: v9b4(0x7) = CONST 
0x9b6: v9b6(0x0) = CONST 
0x9b8: v9b8 = CALLER 
0x9b9: v9b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ce: v9ce = AND v9b9(0xffffffffffffffffffffffffffffffffffffffff) v9b8
0x9cf: v9cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e4: v9e4 = AND v9cf(0xffffffffffffffffffffffffffffffffffffffff) v9ce
0x9e6: MSTORE v9b6(0x0) v9e4
0x9e7: v9e7(0x20) = CONST 
0x9e9: v9e9(0x20) = ADD v9e7(0x20) v9b6(0x0)
0x9ec: MSTORE v9e9(0x20) v9b4(0x7)
0x9ed: v9ed(0x20) = CONST 
0x9ef: v9ef(0x40) = ADD v9ed(0x20) v9e9(0x20)
0x9f0: v9f0(0x0) = CONST 
0x9f2: v9f2 = SHA3 v9f0(0x0) v9ef(0x40)
0x9f3: v9f3(0x0) = CONST 
0x9f6: v9f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa0b: va0b = AND v9f6(0xffffffffffffffffffffffffffffffffffffffff) v1e0
0xa0c: va0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa21: va21 = AND va0c(0xffffffffffffffffffffffffffffffffffffffff) va0b
0xa23: MSTORE v9f3(0x0) va21
0xa24: va24(0x20) = CONST 
0xa26: va26(0x20) = ADD va24(0x20) v9f3(0x0)
0xa29: MSTORE va26(0x20) v9f2
0xa2a: va2a(0x20) = CONST 
0xa2c: va2c(0x40) = ADD va2a(0x20) va26(0x20)
0xa2d: va2d(0x0) = CONST 
0xa2f: va2f = SHA3 va2d(0x0) va2c(0x40)
0xa32: SSTORE va2f v1ea
0xa35: va35(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa4a: va4a = AND va35(0xffffffffffffffffffffffffffffffffffffffff) v1e0
0xa4b: va4b = CALLER 
0xa4c: va4c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa61: va61 = AND va4c(0xffffffffffffffffffffffffffffffffffffffff) va4b
0xa62: va62(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa84: va84(0x40) = CONST 
0xa86: va86 = MLOAD va84(0x40)
0xa8a: MSTORE va86 v1ea
0xa8b: va8b(0x20) = CONST 
0xa8d: va8d = ADD va8b(0x20) va86
0xa91: va91(0x40) = CONST 
0xa93: va93 = MLOAD va91(0x40)
0xa96: va96 = SUB va8d va93
0xa98: LOG3 va93 va96 va62(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va61 va4a
0xa99: va99(0x1) = CONST 
0xaa1: JUMP v1af(0x1fa)
----------------------------------

Begin block 0xaa2
prev = {'0x220'}, next = {'0x229'}
----------------------------------
Block 0xaa2
0xaa3: vaa3(0x0) = CONST 
0xaa5: vaa5(0x6) = CONST 
0xaa7: vaa7(0x0) = CONST 
0xaaa: vaaa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xabf: vabf(0x0) = AND vaaa(0xffffffffffffffffffffffffffffffffffffffff) vaa7(0x0)
0xac0: vac0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xad5: vad5(0x0) = AND vac0(0xffffffffffffffffffffffffffffffffffffffff) vabf(0x0)
0xad7: MSTORE vaa7(0x0) vad5(0x0)
0xad8: vad8(0x20) = CONST 
0xada: vada(0x20) = ADD vad8(0x20) vaa7(0x0)
0xadd: MSTORE vada(0x20) vaa5(0x6)
0xade: vade(0x20) = CONST 
0xae0: vae0(0x40) = ADD vade(0x20) vada(0x20)
0xae1: vae1(0x0) = CONST 
0xae3: vae3 = SHA3 vae1(0x0) vae0(0x40)
0xae4: vae4 = SLOAD vae3
0xae5: vae5(0x5) = CONST 
0xae7: vae7 = SLOAD vae5(0x5)
0xae8: vae8 = SUB vae7 vae4
0xaec: JUMP v222(0x229)
----------------------------------

Begin block 0xaed
prev = {'0x262'}, next = {'0xb38'}
----------------------------------
Block 0xaed
0xaee: vaee(0x0) = CONST 
0xaf0: vaf0(0xb38) = CONST 
0xaf3: vaf3(0x6) = CONST 
0xaf5: vaf5(0x0) = CONST 
0xaf8: vaf8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb0d: vb0d = AND vaf8(0xffffffffffffffffffffffffffffffffffffffff) v27e
0xb0e: vb0e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb23: vb23 = AND vb0e(0xffffffffffffffffffffffffffffffffffffffff) vb0d
0xb25: MSTORE vaf5(0x0) vb23
0xb26: vb26(0x20) = CONST 
0xb28: vb28(0x20) = ADD vb26(0x20) vaf5(0x0)
0xb2b: MSTORE vb28(0x20) vaf3(0x6)
0xb2c: vb2c(0x20) = CONST 
0xb2e: vb2e(0x40) = ADD vb2c(0x20) vb28(0x20)
0xb2f: vb2f(0x0) = CONST 
0xb31: vb31 = SHA3 vb2f(0x0) vb2e(0x40)
0xb32: vb32 = SLOAD vb31
0xb34: vb34(0x1041) = CONST 
0xb37: vb37_0 = CALLPRIVATE vb34(0x1041) v2a8 vb32 vaf0(0xb38)
----------------------------------

Begin block 0xb38
prev = {'0xaed'}, next = {'0xc01'}
----------------------------------
Block 0xb38
0xb39: vb39(0x6) = CONST 
0xb3b: vb3b(0x0) = CONST 
0xb3e: vb3e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb53: vb53 = AND vb3e(0xffffffffffffffffffffffffffffffffffffffff) v27e
0xb54: vb54(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb69: vb69 = AND vb54(0xffffffffffffffffffffffffffffffffffffffff) vb53
0xb6b: MSTORE vb3b(0x0) vb69
0xb6c: vb6c(0x20) = CONST 
0xb6e: vb6e(0x20) = ADD vb6c(0x20) vb3b(0x0)
0xb71: MSTORE vb6e(0x20) vb39(0x6)
0xb72: vb72(0x20) = CONST 
0xb74: vb74(0x40) = ADD vb72(0x20) vb6e(0x20)
0xb75: vb75(0x0) = CONST 
0xb77: vb77 = SHA3 vb75(0x0) vb74(0x40)
0xb7a: SSTORE vb77 vb37_0
0xb7c: vb7c(0xc01) = CONST 
0xb7f: vb7f(0x7) = CONST 
0xb81: vb81(0x0) = CONST 
0xb84: vb84(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb99: vb99 = AND vb84(0xffffffffffffffffffffffffffffffffffffffff) v27e
0xb9a: vb9a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbaf: vbaf = AND vb9a(0xffffffffffffffffffffffffffffffffffffffff) vb99
0xbb1: MSTORE vb81(0x0) vbaf
0xbb2: vbb2(0x20) = CONST 
0xbb4: vbb4(0x20) = ADD vbb2(0x20) vb81(0x0)
0xbb7: MSTORE vbb4(0x20) vb7f(0x7)
0xbb8: vbb8(0x20) = CONST 
0xbba: vbba(0x40) = ADD vbb8(0x20) vbb4(0x20)
0xbbb: vbbb(0x0) = CONST 
0xbbd: vbbd = SHA3 vbbb(0x0) vbba(0x40)
0xbbe: vbbe(0x0) = CONST 
0xbc0: vbc0 = CALLER 
0xbc1: vbc1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbd6: vbd6 = AND vbc1(0xffffffffffffffffffffffffffffffffffffffff) vbc0
0xbd7: vbd7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbec: vbec = AND vbd7(0xffffffffffffffffffffffffffffffffffffffff) vbd6
0xbee: MSTORE vbbe(0x0) vbec
0xbef: vbef(0x20) = CONST 
0xbf1: vbf1(0x20) = ADD vbef(0x20) vbbe(0x0)
0xbf4: MSTORE vbf1(0x20) vbbd
0xbf5: vbf5(0x20) = CONST 
0xbf7: vbf7(0x40) = ADD vbf5(0x20) vbf1(0x20)
0xbf8: vbf8(0x0) = CONST 
0xbfa: vbfa = SHA3 vbf8(0x0) vbf7(0x40)
0xbfb: vbfb = SLOAD vbfa
0xbfd: vbfd(0x1041) = CONST 
0xc00: vc00_0 = CALLPRIVATE vbfd(0x1041) v2a8 vbfb vb7c(0xc01)
----------------------------------

Begin block 0xc01
prev = {'0xb38'}, next = {'0xcca'}
----------------------------------
Block 0xc01
0xc02: vc02(0x7) = CONST 
0xc04: vc04(0x0) = CONST 
0xc07: vc07(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc1c: vc1c = AND vc07(0xffffffffffffffffffffffffffffffffffffffff) v27e
0xc1d: vc1d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc32: vc32 = AND vc1d(0xffffffffffffffffffffffffffffffffffffffff) vc1c
0xc34: MSTORE vc04(0x0) vc32
0xc35: vc35(0x20) = CONST 
0xc37: vc37(0x20) = ADD vc35(0x20) vc04(0x0)
0xc3a: MSTORE vc37(0x20) vc02(0x7)
0xc3b: vc3b(0x20) = CONST 
0xc3d: vc3d(0x40) = ADD vc3b(0x20) vc37(0x20)
0xc3e: vc3e(0x0) = CONST 
0xc40: vc40 = SHA3 vc3e(0x0) vc3d(0x40)
0xc41: vc41(0x0) = CONST 
0xc43: vc43 = CALLER 
0xc44: vc44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc59: vc59 = AND vc44(0xffffffffffffffffffffffffffffffffffffffff) vc43
0xc5a: vc5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6f: vc6f = AND vc5a(0xffffffffffffffffffffffffffffffffffffffff) vc59
0xc71: MSTORE vc41(0x0) vc6f
0xc72: vc72(0x20) = CONST 
0xc74: vc74(0x20) = ADD vc72(0x20) vc41(0x0)
0xc77: MSTORE vc74(0x20) vc40
0xc78: vc78(0x20) = CONST 
0xc7a: vc7a(0x40) = ADD vc78(0x20) vc74(0x20)
0xc7b: vc7b(0x0) = CONST 
0xc7d: vc7d = SHA3 vc7b(0x0) vc7a(0x40)
0xc80: SSTORE vc7d vc00_0
0xc82: vc82(0xcca) = CONST 
0xc85: vc85(0x6) = CONST 
0xc87: vc87(0x0) = CONST 
0xc8a: vc8a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc9f: vc9f = AND vc8a(0xffffffffffffffffffffffffffffffffffffffff) v29e
0xca0: vca0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcb5: vcb5 = AND vca0(0xffffffffffffffffffffffffffffffffffffffff) vc9f
0xcb7: MSTORE vc87(0x0) vcb5
0xcb8: vcb8(0x20) = CONST 
0xcba: vcba(0x20) = ADD vcb8(0x20) vc87(0x0)
0xcbd: MSTORE vcba(0x20) vc85(0x6)
0xcbe: vcbe(0x20) = CONST 
0xcc0: vcc0(0x40) = ADD vcbe(0x20) vcba(0x20)
0xcc1: vcc1(0x0) = CONST 
0xcc3: vcc3 = SHA3 vcc1(0x0) vcc0(0x40)
0xcc4: vcc4 = SLOAD vcc3
0xcc6: vcc6(0x169b) = CONST 
0xcc9: vcc9_0 = CALLPRIVATE vcc6(0x169b) v2a8 vcc4 vc82(0xcca)
----------------------------------

Begin block 0xcca
prev = {'0xc01'}, next = {'0x2b8'}
----------------------------------
Block 0xcca
0xccb: vccb(0x6) = CONST 
0xccd: vccd(0x0) = CONST 
0xcd0: vcd0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xce5: vce5 = AND vcd0(0xffffffffffffffffffffffffffffffffffffffff) v29e
0xce6: vce6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcfb: vcfb = AND vce6(0xffffffffffffffffffffffffffffffffffffffff) vce5
0xcfd: MSTORE vccd(0x0) vcfb
0xcfe: vcfe(0x20) = CONST 
0xd00: vd00(0x20) = ADD vcfe(0x20) vccd(0x0)
0xd03: MSTORE vd00(0x20) vccb(0x6)
0xd04: vd04(0x20) = CONST 
0xd06: vd06(0x40) = ADD vd04(0x20) vd00(0x20)
0xd07: vd07(0x0) = CONST 
0xd09: vd09 = SHA3 vd07(0x0) vd06(0x40)
0xd0c: SSTORE vd09 vcc9_0
0xd0f: vd0f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd24: vd24 = AND vd0f(0xffffffffffffffffffffffffffffffffffffffff) v29e
0xd26: vd26(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd3b: vd3b = AND vd26(0xffffffffffffffffffffffffffffffffffffffff) v27e
0xd3c: vd3c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd5e: vd5e(0x40) = CONST 
0xd60: vd60 = MLOAD vd5e(0x40)
0xd64: MSTORE vd60 v2a8
0xd65: vd65(0x20) = CONST 
0xd67: vd67 = ADD vd65(0x20) vd60
0xd6b: vd6b(0x40) = CONST 
0xd6d: vd6d = MLOAD vd6b(0x40)
0xd70: vd70 = SUB vd67 vd6d
0xd72: LOG3 vd6d vd70 vd3c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vd3b vd24
0xd73: vd73(0x1) = CONST 
0xd7c: JUMP v24d(0x2b8)
----------------------------------

Begin block 0xd7d
prev = {'0x2de'}, next = {'0x2e7'}
----------------------------------
Block 0xd7d
0xd7e: vd7e(0x4) = CONST 
0xd80: vd80(0x0) = CONST 
0xd83: vd83 = SLOAD vd7e(0x4)
0xd85: vd85(0x100) = CONST 
0xd88: vd88(0x1) = EXP vd85(0x100) vd80(0x0)
0xd8a: vd8a = DIV vd83 vd88(0x1)
0xd8b: vd8b(0xff) = CONST 
0xd8d: vd8d = AND vd8b(0xff) vd8a
0xd8f: JUMP v2e0(0x2e7)
----------------------------------

Begin block 0xd90
prev = {'0x30f'}, next = {'0x318'}
----------------------------------
Block 0xd90
0xd91: vd91(0x5) = CONST 
0xd93: vd93 = SLOAD vd91(0x5)
0xd95: JUMP v311(0x318)
----------------------------------

Begin block 0xd96
prev = {'0x351'}, next = {'0x37d'}
----------------------------------
Block 0xd96
0xd97: vd97(0x0) = CONST 
0xd99: vd99(0x6) = CONST 
0xd9b: vd9b(0x0) = CONST 
0xd9e: vd9e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdb3: vdb3 = AND vd9e(0xffffffffffffffffffffffffffffffffffffffff) v36d
0xdb4: vdb4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc9: vdc9 = AND vdb4(0xffffffffffffffffffffffffffffffffffffffff) vdb3
0xdcb: MSTORE vd9b(0x0) vdc9
0xdcc: vdcc(0x20) = CONST 
0xdce: vdce(0x20) = ADD vdcc(0x20) vd9b(0x0)
0xdd1: MSTORE vdce(0x20) vd99(0x6)
0xdd2: vdd2(0x20) = CONST 
0xdd4: vdd4(0x40) = ADD vdd2(0x20) vdce(0x20)
0xdd5: vdd5(0x0) = CONST 
0xdd7: vdd7 = SHA3 vdd5(0x0) vdd4(0x40)
0xdd8: vdd8 = SLOAD vdd7
0xdde: JUMP v33c(0x37d)
----------------------------------

Begin block 0xddf
prev = {'0x39f'}, next = {'0xe3b', '0xe37'}
----------------------------------
Block 0xddf
0xde0: vde0(0x1) = CONST 
0xde2: vde2(0x0) = CONST 
0xde5: vde5 = SLOAD vde0(0x1)
0xde7: vde7(0x100) = CONST 
0xdea: vdea(0x1) = EXP vde7(0x100) vde2(0x0)
0xdec: vdec = DIV vde5 vdea(0x1)
0xded: vded(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe02: ve02 = AND vded(0xffffffffffffffffffffffffffffffffffffffff) vdec
0xe03: ve03(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe18: ve18 = AND ve03(0xffffffffffffffffffffffffffffffffffffffff) ve02
0xe19: ve19 = CALLER 
0xe1a: ve1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe2f: ve2f = AND ve1a(0xffffffffffffffffffffffffffffffffffffffff) ve19
0xe30: ve30 = EQ ve2f ve18
0xe31: ve31 = ISZERO ve30
0xe32: ve32 = ISZERO ve31
0xe33: ve33(0xe3b) = CONST 
0xe36: JUMPI ve33(0xe3b) ve32
----------------------------------

Begin block 0xe37
prev = {'0xddf'}, next = {}
----------------------------------
Block 0xe37
0xe37: ve37(0x0) = CONST 
0xe3a: REVERT ve37(0x0) ve37(0x0)
----------------------------------

Begin block 0xe3b
prev = {'0xddf'}, next = {'0x3a8'}
----------------------------------
Block 0xe3b
0xe3c: ve3c(0x1) = CONST 
0xe3e: ve3e(0x0) = CONST 
0xe41: ve41 = SLOAD ve3c(0x1)
0xe43: ve43(0x100) = CONST 
0xe46: ve46(0x1) = EXP ve43(0x100) ve3e(0x0)
0xe48: ve48 = DIV ve41 ve46(0x1)
0xe49: ve49(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe5e: ve5e = AND ve49(0xffffffffffffffffffffffffffffffffffffffff) ve48
0xe5f: ve5f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe74: ve74 = AND ve5f(0xffffffffffffffffffffffffffffffffffffffff) ve5e
0xe75: ve75(0x0) = CONST 
0xe79: ve79 = SLOAD ve75(0x0)
0xe7b: ve7b(0x100) = CONST 
0xe7e: ve7e(0x1) = EXP ve7b(0x100) ve75(0x0)
0xe80: ve80 = DIV ve79 ve7e(0x1)
0xe81: ve81(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe96: ve96 = AND ve81(0xffffffffffffffffffffffffffffffffffffffff) ve80
0xe97: ve97(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeac: veac = AND ve97(0xffffffffffffffffffffffffffffffffffffffff) ve96
0xead: vead(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xece: vece(0x40) = CONST 
0xed0: ved0 = MLOAD vece(0x40)
0xed1: ved1(0x40) = CONST 
0xed3: ved3 = MLOAD ved1(0x40)
0xed6: ved6 = SUB ved0 ved3
0xed8: LOG3 ved3 ved6 vead(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) veac ve74
0xed9: ved9(0x1) = CONST 
0xedb: vedb(0x0) = CONST 
0xede: vede = SLOAD ved9(0x1)
0xee0: vee0(0x100) = CONST 
0xee3: vee3(0x1) = EXP vee0(0x100) vedb(0x0)
0xee5: vee5 = DIV vede vee3(0x1)
0xee6: vee6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xefb: vefb = AND vee6(0xffffffffffffffffffffffffffffffffffffffff) vee5
0xefc: vefc(0x0) = CONST 
0xeff: veff(0x100) = CONST 
0xf02: vf02(0x1) = EXP veff(0x100) vefc(0x0)
0xf04: vf04 = SLOAD vefc(0x0)
0xf06: vf06(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1b: vf1b(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf06(0xffffffffffffffffffffffffffffffffffffffff) vf02(0x1)
0xf1c: vf1c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf1b(0xffffffffffffffffffffffffffffffffffffffff)
0xf1d: vf1d = AND vf1c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf04
0xf20: vf20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf35: vf35 = AND vf20(0xffffffffffffffffffffffffffffffffffffffff) vefb
0xf36: vf36 = MUL vf35 vf02(0x1)
0xf37: vf37 = OR vf36 vf1d
0xf39: SSTORE vefc(0x0) vf37
0xf3b: vf3b(0x0) = CONST 
0xf3d: vf3d(0x1) = CONST 
0xf3f: vf3f(0x0) = CONST 
0xf41: vf41(0x100) = CONST 
0xf44: vf44(0x1) = EXP vf41(0x100) vf3f(0x0)
0xf46: vf46 = SLOAD vf3d(0x1)
0xf48: vf48(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf5d: vf5d(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf48(0xffffffffffffffffffffffffffffffffffffffff) vf44(0x1)
0xf5e: vf5e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf5d(0xffffffffffffffffffffffffffffffffffffffff)
0xf5f: vf5f = AND vf5e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf46
0xf62: vf62(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf77: vf77(0x0) = AND vf62(0xffffffffffffffffffffffffffffffffffffffff) vf3b(0x0)
0xf78: vf78(0x0) = MUL vf77(0x0) vf44(0x1)
0xf79: vf79 = OR vf78(0x0) vf5f
0xf7b: SSTORE vf3d(0x1) vf79
0xf7d: JUMP v3a1(0x3a8)
----------------------------------

Begin block 0xf7e
prev = {'0x3b6'}, next = {'0x3bf'}
----------------------------------
Block 0xf7e
0xf7f: vf7f(0x0) = CONST 
0xf83: vf83 = SLOAD vf7f(0x0)
0xf85: vf85(0x100) = CONST 
0xf88: vf88(0x1) = EXP vf85(0x100) vf7f(0x0)
0xf8a: vf8a = DIV vf83 vf88(0x1)
0xf8b: vf8b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa0: vfa0 = AND vf8b(0xffffffffffffffffffffffffffffffffffffffff) vf8a
0xfa2: JUMP v3b8(0x3bf)
----------------------------------

Begin block 0xfa3
prev = {'0x40d'}, next = {'0xff3', '0x1039'}
----------------------------------
Block 0xfa3
0xfa4: vfa4(0x2) = CONST 
0xfa7: vfa7 = SLOAD vfa4(0x2)
0xfa8: vfa8(0x1) = CONST 
0xfab: vfab(0x1) = CONST 
0xfad: vfad = AND vfab(0x1) vfa7
0xfae: vfae = ISZERO vfad
0xfaf: vfaf(0x100) = CONST 
0xfb2: vfb2 = MUL vfaf(0x100) vfae
0xfb3: vfb3 = SUB vfb2 vfa8(0x1)
0xfb4: vfb4 = AND vfb3 vfa7
0xfb5: vfb5(0x2) = CONST 
0xfb8: vfb8 = DIV vfb4 vfb5(0x2)
0xfba: vfba(0x1f) = CONST 
0xfbc: vfbc = ADD vfba(0x1f) vfb8
0xfbd: vfbd(0x20) = CONST 
0xfc1: vfc1 = DIV vfbc vfbd(0x20)
0xfc2: vfc2 = MUL vfc1 vfbd(0x20)
0xfc3: vfc3(0x20) = CONST 
0xfc5: vfc5 = ADD vfc3(0x20) vfc2
0xfc6: vfc6(0x40) = CONST 
0xfc8: vfc8 = MLOAD vfc6(0x40)
0xfcb: vfcb = ADD vfc8 vfc5
0xfcc: vfcc(0x40) = CONST 
0xfce: MSTORE vfcc(0x40) vfcb
0xfd5: MSTORE vfc8 vfb8
0xfd6: vfd6(0x20) = CONST 
0xfd8: vfd8 = ADD vfd6(0x20) vfc8
0xfdb: vfdb = SLOAD vfa4(0x2)
0xfdc: vfdc(0x1) = CONST 
0xfdf: vfdf(0x1) = CONST 
0xfe1: vfe1 = AND vfdf(0x1) vfdb
0xfe2: vfe2 = ISZERO vfe1
0xfe3: vfe3(0x100) = CONST 
0xfe6: vfe6 = MUL vfe3(0x100) vfe2
0xfe7: vfe7 = SUB vfe6 vfdc(0x1)
0xfe8: vfe8 = AND vfe7 vfdb
0xfe9: vfe9(0x2) = CONST 
0xfec: vfec = DIV vfe8 vfe9(0x2)
0xfee: vfee = ISZERO vfec
0xfef: vfef(0x1039) = CONST 
0xff2: JUMPI vfef(0x1039) vfee
----------------------------------

Begin block 0xff3
prev = {'0xfa3'}, next = {'0x100e', '0xffb'}
----------------------------------
Block 0xff3
0xff4: vff4(0x1f) = CONST 
0xff6: vff6 = LT vff4(0x1f) vfec
0xff7: vff7(0x100e) = CONST 
0xffa: JUMPI vff7(0x100e) vff6
----------------------------------

Begin block 0xffb
prev = {'0xff3'}, next = {'0x1039'}
----------------------------------
Block 0xffb
0xffb: vffb(0x100) = CONST 
0x1000: v1000 = SLOAD vfa4(0x2)
0x1001: v1001 = DIV v1000 vffb(0x100)
0x1002: v1002 = MUL v1001 vffb(0x100)
0x1004: MSTORE vfd8 v1002
0x1006: v1006(0x20) = CONST 
0x1008: v1008 = ADD v1006(0x20) vfd8
0x100a: v100a(0x1039) = CONST 
0x100d: JUMP v100a(0x1039)
----------------------------------

Begin block 0x100e
prev = {'0xff3'}, next = {'0x101c'}
----------------------------------
Block 0x100e
0x1010: v1010 = ADD vfd8 vfec
0x1013: v1013(0x0) = CONST 
0x1015: MSTORE v1013(0x0) vfa4(0x2)
0x1016: v1016(0x20) = CONST 
0x1018: v1018(0x0) = CONST 
0x101a: v101a = SHA3 v1018(0x0) v1016(0x20)
----------------------------------

Begin block 0x101c
prev = {'0x101c', '0x100e'}, next = {'0x101c', '0x1030'}
----------------------------------
Block 0x101c
0x101c_0x0: v101c_0 = PHI vfd8 v1028
0x101c_0x1: v101c_1 = PHI v101a v1024
0x101e: v101e = SLOAD v101c_1
0x1020: MSTORE v101c_0 v101e
0x1022: v1022(0x1) = CONST 
0x1024: v1024 = ADD v1022(0x1) v101c_1
0x1026: v1026(0x20) = CONST 
0x1028: v1028 = ADD v1026(0x20) v101c_0
0x102b: v102b = GT v1010 v1028
0x102c: v102c(0x101c) = CONST 
0x102f: JUMPI v102c(0x101c) v102b
----------------------------------

Begin block 0x1030
prev = {'0x101c'}, next = {'0x1039'}
----------------------------------
Block 0x1030
0x1032: v1032 = SUB v1028 v1010
0x1033: v1033(0x1f) = CONST 
0x1035: v1035 = AND v1033(0x1f) v1032
0x1037: v1037 = ADD v1010 v1035
----------------------------------

Begin block 0x1039
prev = {'0xffb', '0x1030', '0xfa3'}, next = {'0x416'}
----------------------------------
Block 0x1039
0x1040: JUMP v40f(0x416)
----------------------------------

Begin block 0x1041
prev = {}, next = {'0x104e0x1041', '0x10520x1041'}
----------------------------------
function 0x1041(v1041arg0, v1041arg1, v1041arg2)
Block 0x1041
0x1042: v1042(0x0) = CONST 
0x1046: v1046 = GT v1041arg0 v1041arg1
0x1047: v1047 = ISZERO v1046
0x1048: v1048 = ISZERO v1047
0x1049: v1049 = ISZERO v1048
0x104a: v104a(0x1052) = CONST 
0x104d: JUMPI v104a(0x1052) v1049
----------------------------------

Begin block 0x10410x491
prev = {'0x4b4'}, next = {'0x10520x491', '0x104e0x491'}
----------------------------------
Block 0x10410x491
0x10420x491: v4911042(0x0) = CONST 
0x10460x491: v4911046 = GT v4c4 v4ba
0x10470x491: v4911047 = ISZERO v4911046
0x10480x491: v4911048 = ISZERO v4911047
0x10490x491: v4911049 = ISZERO v4911048
0x104a0x491: v491104a(0x1052) = CONST 
0x104d0x491: JUMPI v491104a(0x1052) v4911049
----------------------------------

Begin block 0x104e0x491
prev = {'0x10410x491'}, next = {}
----------------------------------
Block 0x104e0x491
0x104e0x491: v491104e(0x0) = CONST 
0x10510x491: REVERT v491104e(0x0) v491104e(0x0)
----------------------------------

Begin block 0x104e0x1041
prev = {'0x1041'}, next = {}
----------------------------------
Block 0x104e0x1041
0x104e0x1041: v1041104e(0x0) = CONST 
0x10510x1041: REVERT v1041104e(0x0) v1041104e(0x0)
----------------------------------

Begin block 0x10520x491
prev = {'0x10410x491'}, next = {'0x4d4'}
----------------------------------
Block 0x10520x491
0x10550x491: v4911055 = SUB v4ba v4c4
0x105c0x491: JUMP v49f(0x4d4)
----------------------------------

Begin block 0x10520x1041
prev = {'0x1041'}, next = {}
----------------------------------
Block 0x10520x1041
0x10550x1041: v10411055 = SUB v1041arg1 v1041arg0
0x105c0x1041: RETURNPRIVATE v1041arg2 v10411055
----------------------------------

Begin block 0x105d
prev = {'0x50d'}, next = {'0x10a8'}
----------------------------------
Block 0x105d
0x105e: v105e(0x0) = CONST 
0x1060: v1060(0x10a8) = CONST 
0x1063: v1063(0x6) = CONST 
0x1065: v1065(0x0) = CONST 
0x1067: v1067 = CALLER 
0x1068: v1068(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x107d: v107d = AND v1068(0xffffffffffffffffffffffffffffffffffffffff) v1067
0x107e: v107e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1093: v1093 = AND v107e(0xffffffffffffffffffffffffffffffffffffffff) v107d
0x1095: MSTORE v1065(0x0) v1093
0x1096: v1096(0x20) = CONST 
0x1098: v1098(0x20) = ADD v1096(0x20) v1065(0x0)
0x109b: MSTORE v1098(0x20) v1063(0x6)
0x109c: v109c(0x20) = CONST 
0x109e: v109e(0x40) = ADD v109c(0x20) v1098(0x20)
0x109f: v109f(0x0) = CONST 
0x10a1: v10a1 = SHA3 v109f(0x0) v109e(0x40)
0x10a2: v10a2 = SLOAD v10a1
0x10a4: v10a4(0x1041) = CONST 
0x10a7: v10a7_0 = CALLPRIVATE v10a4(0x1041) v533 v10a2 v1060(0x10a8)
----------------------------------

Begin block 0x10a8
prev = {'0x105d'}, next = {'0x1134'}
----------------------------------
Block 0x10a8
0x10a9: v10a9(0x6) = CONST 
0x10ab: v10ab(0x0) = CONST 
0x10ad: v10ad = CALLER 
0x10ae: v10ae(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c3: v10c3 = AND v10ae(0xffffffffffffffffffffffffffffffffffffffff) v10ad
0x10c4: v10c4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10d9: v10d9 = AND v10c4(0xffffffffffffffffffffffffffffffffffffffff) v10c3
0x10db: MSTORE v10ab(0x0) v10d9
0x10dc: v10dc(0x20) = CONST 
0x10de: v10de(0x20) = ADD v10dc(0x20) v10ab(0x0)
0x10e1: MSTORE v10de(0x20) v10a9(0x6)
0x10e2: v10e2(0x20) = CONST 
0x10e4: v10e4(0x40) = ADD v10e2(0x20) v10de(0x20)
0x10e5: v10e5(0x0) = CONST 
0x10e7: v10e7 = SHA3 v10e5(0x0) v10e4(0x40)
0x10ea: SSTORE v10e7 v10a7_0
0x10ec: v10ec(0x1134) = CONST 
0x10ef: v10ef(0x6) = CONST 
0x10f1: v10f1(0x0) = CONST 
0x10f4: v10f4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1109: v1109 = AND v10f4(0xffffffffffffffffffffffffffffffffffffffff) v529
0x110a: v110a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x111f: v111f = AND v110a(0xffffffffffffffffffffffffffffffffffffffff) v1109
0x1121: MSTORE v10f1(0x0) v111f
0x1122: v1122(0x20) = CONST 
0x1124: v1124(0x20) = ADD v1122(0x20) v10f1(0x0)
0x1127: MSTORE v1124(0x20) v10ef(0x6)
0x1128: v1128(0x20) = CONST 
0x112a: v112a(0x40) = ADD v1128(0x20) v1124(0x20)
0x112b: v112b(0x0) = CONST 
0x112d: v112d = SHA3 v112b(0x0) v112a(0x40)
0x112e: v112e = SLOAD v112d
0x1130: v1130(0x169b) = CONST 
0x1133: v1133_0 = CALLPRIVATE v1130(0x169b) v533 v112e v10ec(0x1134)
----------------------------------

Begin block 0x1134
prev = {'0x10a8'}, next = {'0x543'}
----------------------------------
Block 0x1134
0x1135: v1135(0x6) = CONST 
0x1137: v1137(0x0) = CONST 
0x113a: v113a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x114f: v114f = AND v113a(0xffffffffffffffffffffffffffffffffffffffff) v529
0x1150: v1150(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1165: v1165 = AND v1150(0xffffffffffffffffffffffffffffffffffffffff) v114f
0x1167: MSTORE v1137(0x0) v1165
0x1168: v1168(0x20) = CONST 
0x116a: v116a(0x20) = ADD v1168(0x20) v1137(0x0)
0x116d: MSTORE v116a(0x20) v1135(0x6)
0x116e: v116e(0x20) = CONST 
0x1170: v1170(0x40) = ADD v116e(0x20) v116a(0x20)
0x1171: v1171(0x0) = CONST 
0x1173: v1173 = SHA3 v1171(0x0) v1170(0x40)
0x1176: SSTORE v1173 v1133_0
0x1179: v1179(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x118e: v118e = AND v1179(0xffffffffffffffffffffffffffffffffffffffff) v529
0x118f: v118f = CALLER 
0x1190: v1190(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11a5: v11a5 = AND v1190(0xffffffffffffffffffffffffffffffffffffffff) v118f
0x11a6: v11a6(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x11c8: v11c8(0x40) = CONST 
0x11ca: v11ca = MLOAD v11c8(0x40)
0x11ce: MSTORE v11ca v533
0x11cf: v11cf(0x20) = CONST 
0x11d1: v11d1 = ADD v11cf(0x20) v11ca
0x11d5: v11d5(0x40) = CONST 
0x11d7: v11d7 = MLOAD v11d5(0x40)
0x11da: v11da = SUB v11d1 v11d7
0x11dc: LOG3 v11d7 v11da v11a6(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v11a5 v118e
0x11dd: v11dd(0x1) = CONST 
0x11e5: JUMP v4f8(0x543)
----------------------------------

Begin block 0x11e6
prev = {'0x580'}, next = {'0x11f6', '0x11f2'}
----------------------------------
Block 0x11e6
0x11e7: v11e7(0x0) = CONST 
0x11eb: v11eb = GT v590 v11e7(0x0)
0x11ec: v11ec = ISZERO v11eb
0x11ed: v11ed = ISZERO v11ec
0x11ee: v11ee(0x11f6) = CONST 
0x11f1: JUMPI v11ee(0x11f6) v11ed
----------------------------------

Begin block 0x11f2
prev = {'0x11e6'}, next = {}
----------------------------------
Block 0x11f2
0x11f2: v11f2(0x0) = CONST 
0x11f5: REVERT v11f2(0x0) v11f2(0x0)
----------------------------------

Begin block 0x11f6
prev = {'0x11e6'}, next = {'0x1201', '0x1200'}
----------------------------------
Block 0x11f6
0x11fa: v11fa = ISZERO v590
0x11fb: v11fb = ISZERO v11fa
0x11fc: v11fc(0x1201) = CONST 
0x11ff: JUMPI v11fc(0x1201) v11fb
----------------------------------

Begin block 0x1200
prev = {'0x11f6'}, next = {}
----------------------------------
Block 0x1200
0x1200: THROW 
----------------------------------

Begin block 0x1201
prev = {'0x11f6'}, next = {'0x5a0'}
----------------------------------
Block 0x1201
0x1202: v1202 = DIV v586 v590
0x1209: JUMP v56b(0x5a0)
----------------------------------

Begin block 0x120a
prev = {'0x654'}, next = {'0x13cc'}
----------------------------------
Block 0x120a
0x120b: v120b(0x0) = CONST 
0x120e: v120e(0x7) = CONST 
0x1210: v1210(0x0) = CONST 
0x1212: v1212 = CALLER 
0x1213: v1213(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1228: v1228 = AND v1213(0xffffffffffffffffffffffffffffffffffffffff) v1212
0x1229: v1229(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x123e: v123e = AND v1229(0xffffffffffffffffffffffffffffffffffffffff) v1228
0x1240: MSTORE v1210(0x0) v123e
0x1241: v1241(0x20) = CONST 
0x1243: v1243(0x20) = ADD v1241(0x20) v1210(0x0)
0x1246: MSTORE v1243(0x20) v120e(0x7)
0x1247: v1247(0x20) = CONST 
0x1249: v1249(0x40) = ADD v1247(0x20) v1243(0x20)
0x124a: v124a(0x0) = CONST 
0x124c: v124c = SHA3 v124a(0x0) v1249(0x40)
0x124d: v124d(0x0) = CONST 
0x1250: v1250(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1265: v1265 = AND v1250(0xffffffffffffffffffffffffffffffffffffffff) v5f5
0x1266: v1266(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x127b: v127b = AND v1266(0xffffffffffffffffffffffffffffffffffffffff) v1265
0x127d: MSTORE v124d(0x0) v127b
0x127e: v127e(0x20) = CONST 
0x1280: v1280(0x20) = ADD v127e(0x20) v124d(0x0)
0x1283: MSTORE v1280(0x20) v124c
0x1284: v1284(0x20) = CONST 
0x1286: v1286(0x40) = ADD v1284(0x20) v1280(0x20)
0x1287: v1287(0x0) = CONST 
0x1289: v1289 = SHA3 v1287(0x0) v1286(0x40)
0x128c: SSTORE v1289 v5ff
0x128f: v128f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12a4: v12a4 = AND v128f(0xffffffffffffffffffffffffffffffffffffffff) v5f5
0x12a5: v12a5 = CALLER 
0x12a6: v12a6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12bb: v12bb = AND v12a6(0xffffffffffffffffffffffffffffffffffffffff) v12a5
0x12bc: v12bc(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x12de: v12de(0x40) = CONST 
0x12e0: v12e0 = MLOAD v12de(0x40)
0x12e4: MSTORE v12e0 v5ff
0x12e5: v12e5(0x20) = CONST 
0x12e7: v12e7 = ADD v12e5(0x20) v12e0
0x12eb: v12eb(0x40) = CONST 
0x12ed: v12ed = MLOAD v12eb(0x40)
0x12f0: v12f0 = SUB v12e7 v12ed
0x12f2: LOG3 v12ed v12f0 v12bc(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v12bb v12a4
0x12f4: v12f4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1309: v1309 = AND v12f4(0xffffffffffffffffffffffffffffffffffffffff) v5f5
0x130a: v130a(0x8f4ffcb1) = CONST 
0x130f: v130f = CALLER 
0x1311: v1311 = ADDRESS 
0x1313: v1313(0x40) = CONST 
0x1315: v1315 = MLOAD v1313(0x40)
0x1317: v1317(0xffffffff) = CONST 
0x131c: v131c(0x8f4ffcb1) = AND v1317(0xffffffff) v130a(0x8f4ffcb1)
0x131d: v131d(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x133b: v133b(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v131d(0x100000000000000000000000000000000000000000000000000000000) v131c(0x8f4ffcb1)
0x133d: MSTORE v1315 v133b(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x133e: v133e(0x4) = CONST 
0x1340: v1340 = ADD v133e(0x4) v1315
0x1343: v1343(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1358: v1358 = AND v1343(0xffffffffffffffffffffffffffffffffffffffff) v130f
0x1359: v1359(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x136e: v136e = AND v1359(0xffffffffffffffffffffffffffffffffffffffff) v1358
0x1370: MSTORE v1340 v136e
0x1371: v1371(0x20) = CONST 
0x1373: v1373 = ADD v1371(0x20) v1340
0x1376: MSTORE v1373 v5ff
0x1377: v1377(0x20) = CONST 
0x1379: v1379 = ADD v1377(0x20) v1373
0x137b: v137b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1390: v1390 = AND v137b(0xffffffffffffffffffffffffffffffffffffffff) v1311
0x1391: v1391(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13a6: v13a6 = AND v1391(0xffffffffffffffffffffffffffffffffffffffff) v1390
0x13a8: MSTORE v1379 v13a6
0x13a9: v13a9(0x20) = CONST 
0x13ab: v13ab = ADD v13a9(0x20) v1379
0x13ad: v13ad(0x20) = CONST 
0x13af: v13af = ADD v13ad(0x20) v13ab
0x13b2: v13b2 = SUB v13af v1340
0x13b4: MSTORE v13ab v13b2
0x13b8: v13b8 = MLOAD v667
0x13ba: MSTORE v13af v13b8
0x13bb: v13bb(0x20) = CONST 
0x13bd: v13bd = ADD v13bb(0x20) v13af
0x13c1: v13c1 = MLOAD v667
0x13c3: v13c3(0x20) = CONST 
0x13c5: v13c5 = ADD v13c3(0x20) v667
0x13ca: v13ca(0x0) = CONST 
----------------------------------

Begin block 0x13cc
prev = {'0x13d5', '0x120a'}, next = {'0x13d5', '0x13e7'}
----------------------------------
Block 0x13cc
0x13cc_0x0: v13cc_0 = PHI v13ca(0x0) v13e0
0x13cf: v13cf = LT v13cc_0 v13c1
0x13d0: v13d0 = ISZERO v13cf
0x13d1: v13d1(0x13e7) = CONST 
0x13d4: JUMPI v13d1(0x13e7) v13d0
----------------------------------

Begin block 0x13d5
prev = {'0x13cc'}, next = {'0x13cc'}
----------------------------------
Block 0x13d5
0x13d5_0x0: v13d5_0 = PHI v13ca(0x0) v13e0
0x13d7: v13d7 = ADD v13c5 v13d5_0
0x13d8: v13d8 = MLOAD v13d7
0x13db: v13db = ADD v13bd v13d5_0
0x13dc: MSTORE v13db v13d8
0x13dd: v13dd(0x20) = CONST 
0x13e0: v13e0 = ADD v13d5_0 v13dd(0x20)
0x13e3: v13e3(0x13cc) = CONST 
0x13e6: JUMP v13e3(0x13cc)
----------------------------------

Begin block 0x13e7
prev = {'0x13cc'}, next = {'0x1414', '0x13fb'}
----------------------------------
Block 0x13e7
0x13f0: v13f0 = ADD v13c1 v13bd
0x13f2: v13f2(0x1f) = CONST 
0x13f4: v13f4 = AND v13f2(0x1f) v13c1
0x13f6: v13f6 = ISZERO v13f4
0x13f7: v13f7(0x1414) = CONST 
0x13fa: JUMPI v13f7(0x1414) v13f6
----------------------------------

Begin block 0x13fb
prev = {'0x13e7'}, next = {'0x1414'}
----------------------------------
Block 0x13fb
0x13fd: v13fd = SUB v13f0 v13f4
0x13ff: v13ff = MLOAD v13fd
0x1400: v1400(0x1) = CONST 
0x1403: v1403(0x20) = CONST 
0x1405: v1405 = SUB v1403(0x20) v13f4
0x1406: v1406(0x100) = CONST 
0x1409: v1409 = EXP v1406(0x100) v1405
0x140a: v140a = SUB v1409 v1400(0x1)
0x140b: v140b = NOT v140a
0x140c: v140c = AND v140b v13ff
0x140e: MSTORE v13fd v140c
0x140f: v140f(0x20) = CONST 
0x1411: v1411 = ADD v140f(0x20) v13fd
----------------------------------

Begin block 0x1414
prev = {'0x13e7', '0x13fb'}, next = {'0x1432', '0x1436'}
----------------------------------
Block 0x1414
0x1414_0x1: v1414_1 = PHI v13f0 v1411
0x141d: v141d(0x0) = CONST 
0x141f: v141f(0x40) = CONST 
0x1421: v1421 = MLOAD v141f(0x40)
0x1424: v1424 = SUB v1414_1 v1421
0x1426: v1426(0x0) = CONST 
0x142a: v142a = EXTCODESIZE v1309
0x142b: v142b = ISZERO v142a
0x142d: v142d = ISZERO v142b
0x142e: v142e(0x1436) = CONST 
0x1431: JUMPI v142e(0x1436) v142d
----------------------------------

Begin block 0x1432
prev = {'0x1414'}, next = {}
----------------------------------
Block 0x1432
0x1432: v1432(0x0) = CONST 
0x1435: REVERT v1432(0x0) v1432(0x0)
----------------------------------

Begin block 0x1436
prev = {'0x1414'}, next = {'0x144a', '0x1441'}
----------------------------------
Block 0x1436
0x1438: v1438 = GAS 
0x1439: v1439 = CALL v1438 v1309 v1426(0x0) v1421 v1424 v1421 v141d(0x0)
0x143a: v143a = ISZERO v1439
0x143c: v143c = ISZERO v143a
0x143d: v143d(0x144a) = CONST 
0x1440: JUMPI v143d(0x144a) v143c
----------------------------------

Begin block 0x1441
prev = {'0x1436'}, next = {}
----------------------------------
Block 0x1441
0x1441: v1441 = RETURNDATASIZE 
0x1442: v1442(0x0) = CONST 
0x1445: RETURNDATACOPY v1442(0x0) v1442(0x0) v1441
0x1446: v1446 = RETURNDATASIZE 
0x1447: v1447(0x0) = CONST 
0x1449: REVERT v1447(0x0) v1446
----------------------------------

Begin block 0x144a
prev = {'0x1436'}, next = {'0x6a6'}
----------------------------------
Block 0x144a
0x144f: v144f(0x1) = CONST 
0x1458: JUMP v5c4(0x6a6)
----------------------------------

Begin block 0x1459
prev = {'0x6e3'}, next = {'0x1479', '0x146a'}
----------------------------------
Block 0x1459
0x145a: v145a(0x0) = CONST 
0x145e: v145e = MUL v6e9 v6f3
0x1461: v1461(0x0) = CONST 
0x1464: v1464 = EQ v6e9 v1461(0x0)
0x1466: v1466(0x1479) = CONST 
0x1469: JUMPI v1466(0x1479) v1464
----------------------------------

Begin block 0x146a
prev = {'0x1459'}, next = {'0x1476', '0x1475'}
----------------------------------
Block 0x146a
0x146f: v146f = ISZERO v6e9
0x1470: v1470 = ISZERO v146f
0x1471: v1471(0x1476) = CONST 
0x1474: JUMPI v1471(0x1476) v1470
----------------------------------

Begin block 0x1475
prev = {'0x146a'}, next = {}
----------------------------------
Block 0x1475
0x1475: THROW 
----------------------------------

Begin block 0x1476
prev = {'0x146a'}, next = {'0x1479'}
----------------------------------
Block 0x1476
0x1477: v1477 = DIV v145e v6e9
0x1478: v1478 = EQ v1477 v6f3
----------------------------------

Begin block 0x1479
prev = {'0x1476', '0x1459'}, next = {'0x1480', '0x1484'}
----------------------------------
Block 0x1479
0x1479_0x0: v1479_0 = PHI v1464 v1478
0x147a: v147a = ISZERO v1479_0
0x147b: v147b = ISZERO v147a
0x147c: v147c(0x1484) = CONST 
0x147f: JUMPI v147c(0x1484) v147b
----------------------------------

Begin block 0x1480
prev = {'0x1479'}, next = {}
----------------------------------
Block 0x1480
0x1480: v1480(0x0) = CONST 
0x1483: REVERT v1480(0x0) v1480(0x0)
----------------------------------

Begin block 0x1484
prev = {'0x1479'}, next = {'0x703'}
----------------------------------
Block 0x1484
0x1489: JUMP v6ce(0x703)
----------------------------------

Begin block 0x148a
prev = {'0x725'}, next = {'0x72e'}
----------------------------------
Block 0x148a
0x148b: v148b(0x1) = CONST 
0x148d: v148d(0x0) = CONST 
0x1490: v1490 = SLOAD v148b(0x1)
0x1492: v1492(0x100) = CONST 
0x1495: v1495(0x1) = EXP v1492(0x100) v148d(0x0)
0x1497: v1497 = DIV v1490 v1495(0x1)
0x1498: v1498(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14ad: v14ad = AND v1498(0xffffffffffffffffffffffffffffffffffffffff) v1497
0x14af: JUMP v727(0x72e)
----------------------------------

Begin block 0x14b0
prev = {'0x793'}, next = {'0x1509', '0x150d'}
----------------------------------
Block 0x14b0
0x14b1: v14b1(0x0) = CONST 
0x14b4: v14b4(0x0) = CONST 
0x14b7: v14b7 = SLOAD v14b1(0x0)
0x14b9: v14b9(0x100) = CONST 
0x14bc: v14bc(0x1) = EXP v14b9(0x100) v14b4(0x0)
0x14be: v14be = DIV v14b7 v14bc(0x1)
0x14bf: v14bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14d4: v14d4 = AND v14bf(0xffffffffffffffffffffffffffffffffffffffff) v14be
0x14d5: v14d5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14ea: v14ea = AND v14d5(0xffffffffffffffffffffffffffffffffffffffff) v14d4
0x14eb: v14eb = CALLER 
0x14ec: v14ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1501: v1501 = AND v14ec(0xffffffffffffffffffffffffffffffffffffffff) v14eb
0x1502: v1502 = EQ v1501 v14ea
0x1503: v1503 = ISZERO v1502
0x1504: v1504 = ISZERO v1503
0x1505: v1505(0x150d) = CONST 
0x1508: JUMPI v1505(0x150d) v1504
----------------------------------

Begin block 0x1509
prev = {'0x14b0'}, next = {}
----------------------------------
Block 0x1509
0x1509: v1509(0x0) = CONST 
0x150c: REVERT v1509(0x0) v1509(0x0)
----------------------------------

Begin block 0x150d
prev = {'0x14b0'}, next = {'0x15cd', '0x15d1'}
----------------------------------
Block 0x150d
0x150f: v150f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1524: v1524 = AND v150f(0xffffffffffffffffffffffffffffffffffffffff) v7af
0x1525: v1525(0xa9059cbb) = CONST 
0x152a: v152a(0x0) = CONST 
0x152e: v152e = SLOAD v152a(0x0)
0x1530: v1530(0x100) = CONST 
0x1533: v1533(0x1) = EXP v1530(0x100) v152a(0x0)
0x1535: v1535 = DIV v152e v1533(0x1)
0x1536: v1536(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x154b: v154b = AND v1536(0xffffffffffffffffffffffffffffffffffffffff) v1535
0x154d: v154d(0x40) = CONST 
0x154f: v154f = MLOAD v154d(0x40)
0x1551: v1551(0xffffffff) = CONST 
0x1556: v1556(0xa9059cbb) = AND v1551(0xffffffff) v1525(0xa9059cbb)
0x1557: v1557(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x1575: v1575(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = MUL v1557(0x100000000000000000000000000000000000000000000000000000000) v1556(0xa9059cbb)
0x1577: MSTORE v154f v1575(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x1578: v1578(0x4) = CONST 
0x157a: v157a = ADD v1578(0x4) v154f
0x157d: v157d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1592: v1592 = AND v157d(0xffffffffffffffffffffffffffffffffffffffff) v154b
0x1593: v1593(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15a8: v15a8 = AND v1593(0xffffffffffffffffffffffffffffffffffffffff) v1592
0x15aa: MSTORE v157a v15a8
0x15ab: v15ab(0x20) = CONST 
0x15ad: v15ad = ADD v15ab(0x20) v157a
0x15b0: MSTORE v15ad v7b9
0x15b1: v15b1(0x20) = CONST 
0x15b3: v15b3 = ADD v15b1(0x20) v15ad
0x15b8: v15b8(0x20) = CONST 
0x15ba: v15ba(0x40) = CONST 
0x15bc: v15bc = MLOAD v15ba(0x40)
0x15bf: v15bf = SUB v15b3 v15bc
0x15c1: v15c1(0x0) = CONST 
0x15c5: v15c5 = EXTCODESIZE v1524
0x15c6: v15c6 = ISZERO v15c5
0x15c8: v15c8 = ISZERO v15c6
0x15c9: v15c9(0x15d1) = CONST 
0x15cc: JUMPI v15c9(0x15d1) v15c8
----------------------------------

Begin block 0x15cd
prev = {'0x150d'}, next = {}
----------------------------------
Block 0x15cd
0x15cd: v15cd(0x0) = CONST 
0x15d0: REVERT v15cd(0x0) v15cd(0x0)
----------------------------------

Begin block 0x15d1
prev = {'0x150d'}, next = {'0x15e5', '0x15dc'}
----------------------------------
Block 0x15d1
0x15d3: v15d3 = GAS 
0x15d4: v15d4 = CALL v15d3 v1524 v15c1(0x0) v15bc v15bf v15bc v15b8(0x20)
0x15d5: v15d5 = ISZERO v15d4
0x15d7: v15d7 = ISZERO v15d5
0x15d8: v15d8(0x15e5) = CONST 
0x15db: JUMPI v15d8(0x15e5) v15d7
----------------------------------

Begin block 0x15dc
prev = {'0x15d1'}, next = {}
----------------------------------
Block 0x15dc
0x15dc: v15dc = RETURNDATASIZE 
0x15dd: v15dd(0x0) = CONST 
0x15e0: RETURNDATACOPY v15dd(0x0) v15dd(0x0) v15dc
0x15e1: v15e1 = RETURNDATASIZE 
0x15e2: v15e2(0x0) = CONST 
0x15e4: REVERT v15e2(0x0) v15e1
----------------------------------

Begin block 0x15e5
prev = {'0x15d1'}, next = {'0x15f7', '0x15fb'}
----------------------------------
Block 0x15e5
0x15ea: v15ea(0x40) = CONST 
0x15ec: v15ec = MLOAD v15ea(0x40)
0x15ed: v15ed = RETURNDATASIZE 
0x15ee: v15ee(0x20) = CONST 
0x15f1: v15f1 = LT v15ed v15ee(0x20)
0x15f2: v15f2 = ISZERO v15f1
0x15f3: v15f3(0x15fb) = CONST 
0x15f6: JUMPI v15f3(0x15fb) v15f2
----------------------------------

Begin block 0x15f7
prev = {'0x15e5'}, next = {}
----------------------------------
Block 0x15f7
0x15f7: v15f7(0x0) = CONST 
0x15fa: REVERT v15f7(0x0) v15f7(0x0)
----------------------------------

Begin block 0x15fb
prev = {'0x15e5'}, next = {'0x7c9'}
----------------------------------
Block 0x15fb
0x15fd: v15fd = ADD v15ec v15ed
0x1601: v1601 = MLOAD v15ec
0x1603: v1603(0x20) = CONST 
0x1605: v1605 = ADD v1603(0x20) v15ec
0x1613: JUMP v77e(0x7c9)
----------------------------------

Begin block 0x1614
prev = {'0x806'}, next = {'0x852'}
----------------------------------
Block 0x1614
0x1615: v1615(0x0) = CONST 
0x1617: v1617(0x7) = CONST 
0x1619: v1619(0x0) = CONST 
0x161c: v161c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1631: v1631 = AND v161c(0xffffffffffffffffffffffffffffffffffffffff) v822
0x1632: v1632(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1647: v1647 = AND v1632(0xffffffffffffffffffffffffffffffffffffffff) v1631
0x1649: MSTORE v1619(0x0) v1647
0x164a: v164a(0x20) = CONST 
0x164c: v164c(0x20) = ADD v164a(0x20) v1619(0x0)
0x164f: MSTORE v164c(0x20) v1617(0x7)
0x1650: v1650(0x20) = CONST 
0x1652: v1652(0x40) = ADD v1650(0x20) v164c(0x20)
0x1653: v1653(0x0) = CONST 
0x1655: v1655 = SHA3 v1653(0x0) v1652(0x40)
0x1656: v1656(0x0) = CONST 
0x1659: v1659(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x166e: v166e = AND v1659(0xffffffffffffffffffffffffffffffffffffffff) v842
0x166f: v166f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1684: v1684 = AND v166f(0xffffffffffffffffffffffffffffffffffffffff) v166e
0x1686: MSTORE v1656(0x0) v1684
0x1687: v1687(0x20) = CONST 
0x1689: v1689(0x20) = ADD v1687(0x20) v1656(0x0)
0x168c: MSTORE v1689(0x20) v1655
0x168d: v168d(0x20) = CONST 
0x168f: v168f(0x40) = ADD v168d(0x20) v1689(0x20)
0x1690: v1690(0x0) = CONST 
0x1692: v1692 = SHA3 v1690(0x0) v168f(0x40)
0x1693: v1693 = SLOAD v1692
0x169a: JUMP v7f1(0x852)
----------------------------------

Begin block 0x169b
prev = {}, next = {'0x16ad0x169b', '0x16b10x169b'}
----------------------------------
function 0x169b(v169barg0, v169barg1, v169barg2)
Block 0x169b
0x169c: v169c(0x0) = CONST 
0x16a0: v16a0 = ADD v169barg1 v169barg0
0x16a5: v16a5 = LT v16a0 v169barg1
0x16a6: v16a6 = ISZERO v16a5
0x16a7: v16a7 = ISZERO v16a6
0x16a8: v16a8 = ISZERO v16a7
0x16a9: v16a9(0x16b1) = CONST 
0x16ac: JUMPI v16a9(0x16b1) v16a8
----------------------------------

Begin block 0x169b0x868
prev = {'0x88b'}, next = {'0x16b10x868', '0x16ad0x868'}
----------------------------------
Block 0x169b0x868
0x169c0x868: v868169c(0x0) = CONST 
0x16a00x868: v86816a0 = ADD v891 v89b
0x16a50x868: v86816a5 = LT v86816a0 v891
0x16a60x868: v86816a6 = ISZERO v86816a5
0x16a70x868: v86816a7 = ISZERO v86816a6
0x16a80x868: v86816a8 = ISZERO v86816a7
0x16a90x868: v86816a9(0x16b1) = CONST 
0x16ac0x868: JUMPI v86816a9(0x16b1) v86816a8
----------------------------------

Begin block 0x16ad0x868
prev = {'0x169b0x868'}, next = {}
----------------------------------
Block 0x16ad0x868
0x16ad0x868: v86816ad(0x0) = CONST 
0x16b00x868: REVERT v86816ad(0x0) v86816ad(0x0)
----------------------------------

Begin block 0x16ad0x169b
prev = {'0x169b'}, next = {}
----------------------------------
Block 0x16ad0x169b
0x16ad0x169b: v169b16ad(0x0) = CONST 
0x16b00x169b: REVERT v169b16ad(0x0) v169b16ad(0x0)
----------------------------------

Begin block 0x16b10x868
prev = {'0x169b0x868'}, next = {'0x8ab'}
----------------------------------
Block 0x16b10x868
0x16b60x868: JUMP v876(0x8ab)
----------------------------------

Begin block 0x16b10x169b
prev = {'0x169b'}, next = {}
----------------------------------
Block 0x16b10x169b
0x16b60x169b: RETURNPRIVATE v169barg2 v16a0
----------------------------------

Begin block 0x16b7
prev = {'0x8e4'}, next = {'0x170e', '0x1712'}
----------------------------------
Block 0x16b7
0x16b8: v16b8(0x0) = CONST 
0x16bc: v16bc = SLOAD v16b8(0x0)
0x16be: v16be(0x100) = CONST 
0x16c1: v16c1(0x1) = EXP v16be(0x100) v16b8(0x0)
0x16c3: v16c3 = DIV v16bc v16c1(0x1)
0x16c4: v16c4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16d9: v16d9 = AND v16c4(0xffffffffffffffffffffffffffffffffffffffff) v16c3
0x16da: v16da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16ef: v16ef = AND v16da(0xffffffffffffffffffffffffffffffffffffffff) v16d9
0x16f0: v16f0 = CALLER 
0x16f1: v16f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1706: v1706 = AND v16f1(0xffffffffffffffffffffffffffffffffffffffff) v16f0
0x1707: v1707 = EQ v1706 v16ef
0x1708: v1708 = ISZERO v1707
0x1709: v1709 = ISZERO v1708
0x170a: v170a(0x1712) = CONST 
0x170d: JUMPI v170a(0x1712) v1709
----------------------------------

Begin block 0x170e
prev = {'0x16b7'}, next = {}
----------------------------------
Block 0x170e
0x170e: v170e(0x0) = CONST 
0x1711: REVERT v170e(0x0) v170e(0x0)
----------------------------------

Begin block 0x1712
prev = {'0x16b7'}, next = {'0x910'}
----------------------------------
Block 0x1712
0x1714: v1714(0x1) = CONST 
0x1716: v1716(0x0) = CONST 
0x1718: v1718(0x100) = CONST 
0x171b: v171b(0x1) = EXP v1718(0x100) v1716(0x0)
0x171d: v171d = SLOAD v1714(0x1)
0x171f: v171f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1734: v1734(0xffffffffffffffffffffffffffffffffffffffff) = MUL v171f(0xffffffffffffffffffffffffffffffffffffffff) v171b(0x1)
0x1735: v1735(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1734(0xffffffffffffffffffffffffffffffffffffffff)
0x1736: v1736 = AND v1735(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v171d
0x1739: v1739(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x174e: v174e = AND v1739(0xffffffffffffffffffffffffffffffffffffffff) v900
0x174f: v174f = MUL v174e v171b(0x1)
0x1750: v1750 = OR v174f v1736
0x1752: SSTORE v1714(0x1) v1750
0x1755: JUMP v8cf(0x910)
----------------------------------

Begin block 0x17a0
prev = {'0x0', '0x101'}, next = {}
----------------------------------
Block 0x17a0
0x17a1: v17a1(0x10c) = CONST 
0x17a2: CALLPRIVATE v17a1(0x10c)
----------------------------------

Begin block 0x17a3
prev = {'0xd'}, next = {}
----------------------------------
Block 0x17a3
0x17a4: v17a4(0x111) = CONST 
0x17a5: CALLPRIVATE v17a4(0x111)
----------------------------------

Begin block 0x17a6
prev = {'0x3b'}, next = {}
----------------------------------
Block 0x17a6
0x17a7: v17a7(0x1a1) = CONST 
0x17a8: CALLPRIVATE v17a7(0x1a1)
----------------------------------

Begin block 0x17a9
prev = {'0x46'}, next = {}
----------------------------------
Block 0x17a9
0x17aa: v17aa(0x214) = CONST 
0x17ab: CALLPRIVATE v17aa(0x214)
----------------------------------

Begin block 0x17ac
prev = {'0x51'}, next = {}
----------------------------------
Block 0x17ac
0x17ad: v17ad(0x23f) = CONST 
0x17ae: CALLPRIVATE v17ad(0x23f)
----------------------------------

Begin block 0x17af
prev = {'0x5c'}, next = {}
----------------------------------
Block 0x17af
0x17b0: v17b0(0x2d2) = CONST 
0x17b1: CALLPRIVATE v17b0(0x2d2)
----------------------------------

Begin block 0x17b2
prev = {'0x67'}, next = {}
----------------------------------
Block 0x17b2
0x17b3: v17b3(0x303) = CONST 
0x17b4: CALLPRIVATE v17b3(0x303)
----------------------------------

Begin block 0x17b5
prev = {'0x72'}, next = {}
----------------------------------
Block 0x17b5
0x17b6: v17b6(0x32e) = CONST 
0x17b7: CALLPRIVATE v17b6(0x32e)
----------------------------------

Begin block 0x17b8
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x17b8
0x17b9: v17b9(0x393) = CONST 
0x17ba: CALLPRIVATE v17b9(0x393)
----------------------------------

Begin block 0x17bb
prev = {'0x88'}, next = {}
----------------------------------
Block 0x17bb
0x17bc: v17bc(0x3aa) = CONST 
0x17bd: CALLPRIVATE v17bc(0x3aa)
----------------------------------

Begin block 0x17be
prev = {'0x93'}, next = {}
----------------------------------
Block 0x17be
0x17bf: v17bf(0x401) = CONST 
0x17c0: CALLPRIVATE v17bf(0x401)
----------------------------------

Begin block 0x17c1
prev = {'0x9e'}, next = {}
----------------------------------
Block 0x17c1
0x17c2: v17c2(0x491) = CONST 
0x17c3: CALLPRIVATE v17c2(0x491)
----------------------------------

Begin block 0x17c4
prev = {'0xa9'}, next = {}
----------------------------------
Block 0x17c4
0x17c5: v17c5(0x4ea) = CONST 
0x17c6: CALLPRIVATE v17c5(0x4ea)
----------------------------------

Begin block 0x17c7
prev = {'0xb4'}, next = {}
----------------------------------
Block 0x17c7
0x17c8: v17c8(0x55d) = CONST 
0x17c9: CALLPRIVATE v17c8(0x55d)
----------------------------------

Begin block 0x17ca
prev = {'0xbf'}, next = {}
----------------------------------
Block 0x17ca
0x17cb: v17cb(0x5b6) = CONST 
0x17cc: CALLPRIVATE v17cb(0x5b6)
----------------------------------

Begin block 0x17cd
prev = {'0xca'}, next = {}
----------------------------------
Block 0x17cd
0x17ce: v17ce(0x6c0) = CONST 
0x17cf: CALLPRIVATE v17ce(0x6c0)
----------------------------------

Begin block 0x17d0
prev = {'0xd5'}, next = {}
----------------------------------
Block 0x17d0
0x17d1: v17d1(0x719) = CONST 
0x17d2: CALLPRIVATE v17d1(0x719)
----------------------------------

Begin block 0x17d3
prev = {'0xe0'}, next = {}
----------------------------------
Block 0x17d3
0x17d4: v17d4(0x770) = CONST 
0x17d5: CALLPRIVATE v17d4(0x770)
----------------------------------

Begin block 0x17d6
prev = {'0xeb'}, next = {}
----------------------------------
Block 0x17d6
0x17d7: v17d7(0x7e3) = CONST 
0x17d8: CALLPRIVATE v17d7(0x7e3)
----------------------------------

Begin block 0x17d9
prev = {'0xf6'}, next = {}
----------------------------------
Block 0x17d9
0x17da: v17da(0x868) = CONST 
0x17db: CALLPRIVATE v17da(0x868)
----------------------------------

Begin block 0x17dc
prev = {'0x101'}, next = {}
----------------------------------
Block 0x17dc
0x17dd: v17dd(0x8c1) = CONST 
0x17de: CALLPRIVATE v17dd(0x8c1)
----------------------------------
