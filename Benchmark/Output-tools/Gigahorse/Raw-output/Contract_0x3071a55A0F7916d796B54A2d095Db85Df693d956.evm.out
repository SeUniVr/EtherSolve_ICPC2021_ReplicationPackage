
Begin block 0x0
prev = {}, next = {'0xd', '0x8e2'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x8c8: v8c8(0x8e2) = CONST 
0x8c9: JUMPI v8c8(0x8e2) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x40', '0x8e5'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0x8ca: v8ca(0x8e5) = CONST 
0x8cb: JUMPI v8ca(0x8e5) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0x8e8', '0x4b'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0x8cc: v8cc(0x8e8) = CONST 
0x8cd: JUMPI v8cc(0x8e8) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0x8eb', '0x56'}
----------------------------------
Block 0x4b
0x4c: v4c(0x18160ddd) = CONST 
0x51: v51 = EQ v4c(0x18160ddd) v34
0x8ce: v8ce(0x8eb) = CONST 
0x8cf: JUMPI v8ce(0x8eb) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x61', '0x8ee'}
----------------------------------
Block 0x56
0x57: v57(0x23b872dd) = CONST 
0x5c: v5c = EQ v57(0x23b872dd) v34
0x8d0: v8d0(0x8ee) = CONST 
0x8d1: JUMPI v8d0(0x8ee) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x8f1', '0x6c'}
----------------------------------
Block 0x61
0x62: v62(0x313ce567) = CONST 
0x67: v67 = EQ v62(0x313ce567) v34
0x8d2: v8d2(0x8f1) = CONST 
0x8d3: JUMPI v8d2(0x8f1) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0x77', '0x8f4'}
----------------------------------
Block 0x6c
0x6d: v6d(0x42966c68) = CONST 
0x72: v72 = EQ v6d(0x42966c68) v34
0x8d4: v8d4(0x8f4) = CONST 
0x8d5: JUMPI v8d4(0x8f4) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0x82', '0x8f7'}
----------------------------------
Block 0x77
0x78: v78(0x70a08231) = CONST 
0x7d: v7d = EQ v78(0x70a08231) v34
0x8d6: v8d6(0x8f7) = CONST 
0x8d7: JUMPI v8d6(0x8f7) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0x8d', '0x8fa'}
----------------------------------
Block 0x82
0x83: v83(0x79cc6790) = CONST 
0x88: v88 = EQ v83(0x79cc6790) v34
0x8d8: v8d8(0x8fa) = CONST 
0x8d9: JUMPI v8d8(0x8fa) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x98', '0x8fd'}
----------------------------------
Block 0x8d
0x8e: v8e(0x95d89b41) = CONST 
0x93: v93 = EQ v8e(0x95d89b41) v34
0x8da: v8da(0x8fd) = CONST 
0x8db: JUMPI v8da(0x8fd) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0x900', '0xa3'}
----------------------------------
Block 0x98
0x99: v99(0xa9059cbb) = CONST 
0x9e: v9e = EQ v99(0xa9059cbb) v34
0x8dc: v8dc(0x900) = CONST 
0x8dd: JUMPI v8dc(0x900) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0xae', '0x903'}
----------------------------------
Block 0xa3
0xa4: va4(0xcae9ca51) = CONST 
0xa9: va9 = EQ va4(0xcae9ca51) v34
0x8de: v8de(0x903) = CONST 
0x8df: JUMPI v8de(0x903) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0x906', '0x8e2'}
----------------------------------
Block 0xae
0xaf: vaf(0xdd62ed3e) = CONST 
0xb4: vb4 = EQ vaf(0xdd62ed3e) v34
0x8e0: v8e0(0x906) = CONST 
0x8e1: JUMPI v8e0(0x906) vb4
----------------------------------

Begin block 0xb9
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xb9
0xba: vba(0x0) = CONST 
0xbd: REVERT vba(0x0) vba(0x0)
----------------------------------

Begin block 0xbe
prev = {}, next = {'0xc6', '0xca'}
----------------------------------
function name()()
Block 0xbe
0xbf: vbf = CALLVALUE 
0xc1: vc1 = ISZERO vbf
0xc2: vc2(0xca) = CONST 
0xc5: JUMPI vc2(0xca) vc1
----------------------------------

Begin block 0xc6
prev = {'0xbe'}, next = {}
----------------------------------
Block 0xc6
0xc6: vc6(0x0) = CONST 
0xc9: REVERT vc6(0x0) vc6(0x0)
----------------------------------

Begin block 0xca
prev = {'0xbe'}, next = {'0xd30xbe'}
----------------------------------
Block 0xca
0xcc: vcc(0xd3) = CONST 
0xcf: vcf(0x322) = CONST 
0xd2: vd2_0, vd2_1 = CALLPRIVATE vcf(0x322) vcc(0xd3)
----------------------------------

Begin block 0xd30xbe
prev = {'0xca'}, next = {'0xf50xbe'}
----------------------------------
Block 0xd30xbe
0xd40xbe: vbed4(0x40) = CONST 
0xd70xbe: vbed7 = MLOAD vbed4(0x40)
0xd80xbe: vbed8(0x20) = CONST 
0xdc0xbe: MSTORE vbed7 vbed8(0x20)
0xde0xbe: vbede = MLOAD vd2_0
0xe10xbe: vbee1 = ADD vbed7 vbed8(0x20)
0xe20xbe: MSTORE vbee1 vbede
0xe40xbe: vbee4 = MLOAD vd2_0
0xeb0xbe: vbeeb = ADD vbed7 vbed4(0x40)
0xee0xbe: vbeee = ADD vd2_0 vbed8(0x20)
0xf30xbe: vbef3(0x0) = CONST 
----------------------------------

Begin block 0xd30x259
prev = {'0x265'}, next = {'0xf50x259'}
----------------------------------
Block 0xd30x259
0xd40x259: v259d4(0x40) = CONST 
0xd70x259: v259d7 = MLOAD v259d4(0x40)
0xd80x259: v259d8(0x20) = CONST 
0xdc0x259: MSTORE v259d7 v259d8(0x20)
0xde0x259: v259de = MLOAD v26d_0
0xe10x259: v259e1 = ADD v259d7 v259d8(0x20)
0xe20x259: MSTORE v259e1 v259de
0xe40x259: v259e4 = MLOAD v26d_0
0xeb0x259: v259eb = ADD v259d7 v259d4(0x40)
0xee0x259: v259ee = ADD v26d_0 v259d8(0x20)
0xf30x259: v259f3(0x0) = CONST 
----------------------------------

Begin block 0xf50xbe
prev = {'0xd30xbe', '0xfe0xbe'}, next = {'0x10d0xbe', '0xfe0xbe'}
----------------------------------
Block 0xf50xbe
0xf50xbe_0x0: vf5be_0 = PHI vbef3(0x0) vbe108
0xf80xbe: vbef8 = LT vf5be_0 vbee4
0xf90xbe: vbef9 = ISZERO vbef8
0xfa0xbe: vbefa(0x10d) = CONST 
0xfd0xbe: JUMPI vbefa(0x10d) vbef9
----------------------------------

Begin block 0xf50x259
prev = {'0xd30x259', '0xfe0x259'}, next = {'0xfe0x259', '0x10d0x259'}
----------------------------------
Block 0xf50x259
0xf50x259_0x0: vf5259_0 = PHI v259f3(0x0) v259108
0xf80x259: v259f8 = LT vf5259_0 v259e4
0xf90x259: v259f9 = ISZERO v259f8
0xfa0x259: v259fa(0x10d) = CONST 
0xfd0x259: JUMPI v259fa(0x10d) v259f9
----------------------------------

Begin block 0xfe0xbe
prev = {'0xf50xbe'}, next = {'0xf50xbe'}
----------------------------------
Block 0xfe0xbe
0xfe0xbe_0x0: vfebe_0 = PHI vbef3(0x0) vbe108
0x1000xbe: vbe100 = ADD vfebe_0 vbeee
0x1010xbe: vbe101 = MLOAD vbe100
0x1040xbe: vbe104 = ADD vfebe_0 vbeeb
0x1050xbe: MSTORE vbe104 vbe101
0x1060xbe: vbe106(0x20) = CONST 
0x1080xbe: vbe108 = ADD vbe106(0x20) vfebe_0
0x1090xbe: vbe109(0xf5) = CONST 
0x10c0xbe: JUMP vbe109(0xf5)
----------------------------------

Begin block 0xfe0x259
prev = {'0xf50x259'}, next = {'0xf50x259'}
----------------------------------
Block 0xfe0x259
0xfe0x259_0x0: vfe259_0 = PHI v259f3(0x0) v259108
0x1000x259: v259100 = ADD vfe259_0 v259ee
0x1010x259: v259101 = MLOAD v259100
0x1040x259: v259104 = ADD vfe259_0 v259eb
0x1050x259: MSTORE v259104 v259101
0x1060x259: v259106(0x20) = CONST 
0x1080x259: v259108 = ADD v259106(0x20) vfe259_0
0x1090x259: v259109(0xf5) = CONST 
0x10c0x259: JUMP v259109(0xf5)
----------------------------------

Begin block 0x10d0xbe
prev = {'0xf50xbe'}, next = {'0x13a0xbe', '0x1210xbe'}
----------------------------------
Block 0x10d0xbe
0x1160xbe: vbe116 = ADD vbee4 vbeeb
0x1180xbe: vbe118(0x1f) = CONST 
0x11a0xbe: vbe11a = AND vbe118(0x1f) vbee4
0x11c0xbe: vbe11c = ISZERO vbe11a
0x11d0xbe: vbe11d(0x13a) = CONST 
0x1200xbe: JUMPI vbe11d(0x13a) vbe11c
----------------------------------

Begin block 0x10d0x259
prev = {'0xf50x259'}, next = {'0x13a0x259', '0x1210x259'}
----------------------------------
Block 0x10d0x259
0x1160x259: v259116 = ADD v259e4 v259eb
0x1180x259: v259118(0x1f) = CONST 
0x11a0x259: v25911a = AND v259118(0x1f) v259e4
0x11c0x259: v25911c = ISZERO v25911a
0x11d0x259: v25911d(0x13a) = CONST 
0x1200x259: JUMPI v25911d(0x13a) v25911c
----------------------------------

Begin block 0x1210xbe
prev = {'0x10d0xbe'}, next = {'0x13a0xbe'}
----------------------------------
Block 0x1210xbe
0x1230xbe: vbe123 = SUB vbe116 vbe11a
0x1250xbe: vbe125 = MLOAD vbe123
0x1260xbe: vbe126(0x1) = CONST 
0x1290xbe: vbe129(0x20) = CONST 
0x12b0xbe: vbe12b = SUB vbe129(0x20) vbe11a
0x12c0xbe: vbe12c(0x100) = CONST 
0x12f0xbe: vbe12f = EXP vbe12c(0x100) vbe12b
0x1300xbe: vbe130 = SUB vbe12f vbe126(0x1)
0x1310xbe: vbe131 = NOT vbe130
0x1320xbe: vbe132 = AND vbe131 vbe125
0x1340xbe: MSTORE vbe123 vbe132
0x1350xbe: vbe135(0x20) = CONST 
0x1370xbe: vbe137 = ADD vbe135(0x20) vbe123
----------------------------------

Begin block 0x1210x259
prev = {'0x10d0x259'}, next = {'0x13a0x259'}
----------------------------------
Block 0x1210x259
0x1230x259: v259123 = SUB v259116 v25911a
0x1250x259: v259125 = MLOAD v259123
0x1260x259: v259126(0x1) = CONST 
0x1290x259: v259129(0x20) = CONST 
0x12b0x259: v25912b = SUB v259129(0x20) v25911a
0x12c0x259: v25912c(0x100) = CONST 
0x12f0x259: v25912f = EXP v25912c(0x100) v25912b
0x1300x259: v259130 = SUB v25912f v259126(0x1)
0x1310x259: v259131 = NOT v259130
0x1320x259: v259132 = AND v259131 v259125
0x1340x259: MSTORE v259123 v259132
0x1350x259: v259135(0x20) = CONST 
0x1370x259: v259137 = ADD v259135(0x20) v259123
----------------------------------

Begin block 0x13a0xbe
prev = {'0x10d0xbe', '0x1210xbe'}, next = {}
----------------------------------
Block 0x13a0xbe
0x13a0xbe_0x1: v13abe_1 = PHI vbe116 vbe137
0x1400xbe: vbe140(0x40) = CONST 
0x1420xbe: vbe142 = MLOAD vbe140(0x40)
0x1450xbe: vbe145 = SUB v13abe_1 vbe142
0x1470xbe: RETURN vbe142 vbe145
----------------------------------

Begin block 0x13a0x259
prev = {'0x1210x259', '0x10d0x259'}, next = {}
----------------------------------
Block 0x13a0x259
0x13a0x259_0x1: v13a259_1 = PHI v259116 v259137
0x1400x259: v259140(0x40) = CONST 
0x1420x259: v259142 = MLOAD v259140(0x40)
0x1450x259: v259145 = SUB v13a259_1 v259142
0x1470x259: RETURN v259142 v259145
----------------------------------

Begin block 0x148
prev = {}, next = {'0x154', '0x150'}
----------------------------------
function approve(address,uint256)()
Block 0x148
0x149: v149 = CALLVALUE 
0x14b: v14b = ISZERO v149
0x14c: v14c(0x154) = CONST 
0x14f: JUMPI v14c(0x154) v14b
----------------------------------

Begin block 0x150
prev = {'0x148'}, next = {}
----------------------------------
Block 0x150
0x150: v150(0x0) = CONST 
0x153: REVERT v150(0x0) v150(0x0)
----------------------------------

Begin block 0x154
prev = {'0x148'}, next = {'0x16c0x148'}
----------------------------------
Block 0x154
0x156: v156(0x16c) = CONST 
0x159: v159(0x1) = CONST 
0x15b: v15b(0xa0) = CONST 
0x15d: v15d(0x2) = CONST 
0x15f: v15f(0x10000000000000000000000000000000000000000) = EXP v15d(0x2) v15b(0xa0)
0x160: v160(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f(0x10000000000000000000000000000000000000000) v159(0x1)
0x161: v161(0x4) = CONST 
0x163: v163 = CALLDATALOAD v161(0x4)
0x164: v164 = AND v163 v160(0xffffffffffffffffffffffffffffffffffffffff)
0x165: v165(0x24) = CONST 
0x167: v167 = CALLDATALOAD v165(0x24)
0x168: v168(0x3b0) = CONST 
0x16b: v16b_0 = CALLPRIVATE v168(0x3b0) v167 v164 v156(0x16c)
----------------------------------

Begin block 0x16c0x148
prev = {'0x154'}, next = {}
----------------------------------
Block 0x16c0x148
0x16d0x148: v14816d(0x40) = CONST 
0x1700x148: v148170 = MLOAD v14816d(0x40)
0x1720x148: v148172 = ISZERO v16b_0
0x1730x148: v148173 = ISZERO v148172
0x1750x148: MSTORE v148170 v148173
0x1760x148: v148176 = MLOAD v14816d(0x40)
0x17a0x148: v14817a = SUB v148170 v148176
0x17b0x148: v14817b(0x20) = CONST 
0x17d0x148: v14817d = ADD v14817b(0x20) v14817a
0x17f0x148: RETURN v148176 v14817d
----------------------------------

Begin block 0x16c0x1a7
prev = {'0x481'}, next = {}
----------------------------------
Block 0x16c0x1a7
0x16d0x1a7: v1a716d(0x40) = CONST 
0x1700x1a7: v1a7170 = MLOAD v1a716d(0x40)
0x1720x1a7: v1a7172 = ISZERO v483(0x1)
0x1730x1a7: v1a7173 = ISZERO v1a7172
0x1750x1a7: MSTORE v1a7170 v1a7173
0x1760x1a7: v1a7176 = MLOAD v1a716d(0x40)
0x17a0x1a7: v1a717a = SUB v1a7170 v1a7176
0x17b0x1a7: v1a717b(0x20) = CONST 
0x17d0x1a7: v1a717d = ADD v1a717b(0x20) v1a717a
0x17f0x1a7: RETURN v1a7176 v1a717d
----------------------------------

Begin block 0x16c0x1fc
prev = {'0x4b0'}, next = {}
----------------------------------
Block 0x16c0x1fc
0x16d0x1fc: v1fc16d(0x40) = CONST 
0x1700x1fc: v1fc170 = MLOAD v1fc16d(0x40)
0x1720x1fc: v1fc172 = ISZERO v506(0x1)
0x1730x1fc: v1fc173 = ISZERO v1fc172
0x1750x1fc: MSTORE v1fc170 v1fc173
0x1760x1fc: v1fc176 = MLOAD v1fc16d(0x40)
0x17a0x1fc: v1fc17a = SUB v1fc170 v1fc176
0x17b0x1fc: v1fc17b(0x20) = CONST 
0x17d0x1fc: v1fc17d = ADD v1fc17b(0x20) v1fc17a
0x17f0x1fc: RETURN v1fc176 v1fc17d
----------------------------------

Begin block 0x16c0x235
prev = {'0x573'}, next = {}
----------------------------------
Block 0x16c0x235
0x16d0x235: v23516d(0x40) = CONST 
0x1700x235: v235170 = MLOAD v23516d(0x40)
0x1720x235: v235172 = ISZERO v5e8(0x1)
0x1730x235: v235173 = ISZERO v235172
0x1750x235: MSTORE v235170 v235173
0x1760x235: v235176 = MLOAD v23516d(0x40)
0x17a0x235: v23517a = SUB v235170 v235176
0x17b0x235: v23517b(0x20) = CONST 
0x17d0x235: v23517d = ADD v23517b(0x20) v23517a
0x17f0x235: RETURN v235176 v23517d
----------------------------------

Begin block 0x16c0x26e
prev = {'0x656'}, next = {}
----------------------------------
Block 0x16c0x26e
0x16d0x26e: v26e16d(0x40) = CONST 
0x1700x26e: v26e170 = MLOAD v26e16d(0x40)
0x1720x26e: v26e172 = ISZERO v658(0x1)
0x1730x26e: v26e173 = ISZERO v26e172
0x1750x26e: MSTORE v26e170 v26e173
0x1760x26e: v26e176 = MLOAD v26e16d(0x40)
0x17a0x26e: v26e17a = SUB v26e170 v26e176
0x17b0x26e: v26e17b(0x20) = CONST 
0x17d0x26e: v26e17d = ADD v26e17b(0x20) v26e17a
0x17f0x26e: RETURN v26e176 v26e17d
----------------------------------

Begin block 0x16c0x292
prev = {'0x770'}, next = {}
----------------------------------
Block 0x16c0x292
0x16c0x292_0x0: v16c292_0 = PHI v660(0x0) v76c(0x1)
0x16d0x292: v29216d(0x40) = CONST 
0x1700x292: v292170 = MLOAD v29216d(0x40)
0x1720x292: v292172 = ISZERO v16c292_0
0x1730x292: v292173 = ISZERO v292172
0x1750x292: MSTORE v292170 v292173
0x1760x292: v292176 = MLOAD v29216d(0x40)
0x17a0x292: v29217a = SUB v292170 v292176
0x17b0x292: v29217b(0x20) = CONST 
0x17d0x292: v29217d = ADD v29217b(0x20) v29217a
0x17f0x292: RETURN v292176 v29217d
----------------------------------

Begin block 0x180
prev = {}, next = {'0x18c', '0x188'}
----------------------------------
function totalSupply()()
Block 0x180
0x181: v181 = CALLVALUE 
0x183: v183 = ISZERO v181
0x184: v184(0x18c) = CONST 
0x187: JUMPI v184(0x18c) v183
----------------------------------

Begin block 0x188
prev = {'0x180'}, next = {}
----------------------------------
Block 0x188
0x188: v188(0x0) = CONST 
0x18b: REVERT v188(0x0) v188(0x0)
----------------------------------

Begin block 0x18c
prev = {'0x180'}, next = {'0x416'}
----------------------------------
Block 0x18c
0x18e: v18e(0x195) = CONST 
0x191: v191(0x416) = CONST 
0x194: JUMP v191(0x416)
----------------------------------

Begin block 0x1950x180
prev = {'0x416'}, next = {}
----------------------------------
Block 0x1950x180
0x1960x180: v180196(0x40) = CONST 
0x1990x180: v180199 = MLOAD v180196(0x40)
0x19c0x180: MSTORE v180199 v419
0x19d0x180: v18019d = MLOAD v180196(0x40)
0x1a10x180: v1801a1 = SUB v180199 v18019d
0x1a20x180: v1801a2(0x20) = CONST 
0x1a40x180: v1801a4 = ADD v1801a2(0x20) v1801a1
0x1a60x180: RETURN v18019d v1801a4
----------------------------------

Begin block 0x1950x214
prev = {'0x50c'}, next = {}
----------------------------------
Block 0x1950x214
0x1960x214: v214196(0x40) = CONST 
0x1990x214: v214199 = MLOAD v214196(0x40)
0x19c0x214: MSTORE v214199 v51b
0x19d0x214: v21419d = MLOAD v214196(0x40)
0x1a10x214: v2141a1 = SUB v214199 v21419d
0x1a20x214: v2141a2(0x20) = CONST 
0x1a40x214: v2141a4 = ADD v2141a2(0x20) v2141a1
0x1a60x214: RETURN v21419d v2141a4
----------------------------------

Begin block 0x1950x2fb
prev = {'0x778'}, next = {}
----------------------------------
Block 0x1950x2fb
0x1960x2fb: v2fb196(0x40) = CONST 
0x1990x2fb: v2fb199 = MLOAD v2fb196(0x40)
0x19c0x2fb: MSTORE v2fb199 v792
0x19d0x2fb: v2fb19d = MLOAD v2fb196(0x40)
0x1a10x2fb: v2fb1a1 = SUB v2fb199 v2fb19d
0x1a20x2fb: v2fb1a2(0x20) = CONST 
0x1a40x2fb: v2fb1a4 = ADD v2fb1a2(0x20) v2fb1a1
0x1a60x2fb: RETURN v2fb19d v2fb1a4
----------------------------------

Begin block 0x1a7
prev = {}, next = {'0x1af', '0x1b3'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1a7
0x1a8: v1a8 = CALLVALUE 
0x1aa: v1aa = ISZERO v1a8
0x1ab: v1ab(0x1b3) = CONST 
0x1ae: JUMPI v1ab(0x1b3) v1aa
----------------------------------

Begin block 0x1af
prev = {'0x1a7'}, next = {}
----------------------------------
Block 0x1af
0x1af: v1af(0x0) = CONST 
0x1b2: REVERT v1af(0x0) v1af(0x0)
----------------------------------

Begin block 0x1b3
prev = {'0x1a7'}, next = {'0x41c'}
----------------------------------
Block 0x1b3
0x1b5: v1b5(0x16c) = CONST 
0x1b8: v1b8(0x1) = CONST 
0x1ba: v1ba(0xa0) = CONST 
0x1bc: v1bc(0x2) = CONST 
0x1be: v1be(0x10000000000000000000000000000000000000000) = EXP v1bc(0x2) v1ba(0xa0)
0x1bf: v1bf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1be(0x10000000000000000000000000000000000000000) v1b8(0x1)
0x1c0: v1c0(0x4) = CONST 
0x1c2: v1c2 = CALLDATALOAD v1c0(0x4)
0x1c4: v1c4 = AND v1bf(0xffffffffffffffffffffffffffffffffffffffff) v1c2
0x1c6: v1c6(0x24) = CONST 
0x1c8: v1c8 = CALLDATALOAD v1c6(0x24)
0x1c9: v1c9 = AND v1c8 v1bf(0xffffffffffffffffffffffffffffffffffffffff)
0x1ca: v1ca(0x44) = CONST 
0x1cc: v1cc = CALLDATALOAD v1ca(0x44)
0x1cd: v1cd(0x41c) = CONST 
0x1d0: JUMP v1cd(0x41c)
----------------------------------

Begin block 0x1d1
prev = {}, next = {'0x1d9', '0x1dd'}
----------------------------------
function decimals()()
Block 0x1d1
0x1d2: v1d2 = CALLVALUE 
0x1d4: v1d4 = ISZERO v1d2
0x1d5: v1d5(0x1dd) = CONST 
0x1d8: JUMPI v1d5(0x1dd) v1d4
----------------------------------

Begin block 0x1d9
prev = {'0x1d1'}, next = {}
----------------------------------
Block 0x1d9
0x1d9: v1d9(0x0) = CONST 
0x1dc: REVERT v1d9(0x0) v1d9(0x0)
----------------------------------

Begin block 0x1dd
prev = {'0x1d1'}, next = {'0x48b'}
----------------------------------
Block 0x1dd
0x1df: v1df(0x1e6) = CONST 
0x1e2: v1e2(0x48b) = CONST 
0x1e5: JUMP v1e2(0x48b)
----------------------------------

Begin block 0x1e6
prev = {'0x48b'}, next = {}
----------------------------------
Block 0x1e6
0x1e7: v1e7(0x40) = CONST 
0x1ea: v1ea = MLOAD v1e7(0x40)
0x1eb: v1eb(0xff) = CONST 
0x1ef: v1ef = AND v491 v1eb(0xff)
0x1f1: MSTORE v1ea v1ef
0x1f2: v1f2 = MLOAD v1e7(0x40)
0x1f6: v1f6 = SUB v1ea v1f2
0x1f7: v1f7(0x20) = CONST 
0x1f9: v1f9 = ADD v1f7(0x20) v1f6
0x1fb: RETURN v1f2 v1f9
----------------------------------

Begin block 0x1fc
prev = {}, next = {'0x208', '0x204'}
----------------------------------
function burn(uint256)()
Block 0x1fc
0x1fd: v1fd = CALLVALUE 
0x1ff: v1ff = ISZERO v1fd
0x200: v200(0x208) = CONST 
0x203: JUMPI v200(0x208) v1ff
----------------------------------

Begin block 0x204
prev = {'0x1fc'}, next = {}
----------------------------------
Block 0x204
0x204: v204(0x0) = CONST 
0x207: REVERT v204(0x0) v204(0x0)
----------------------------------

Begin block 0x208
prev = {'0x1fc'}, next = {'0x494'}
----------------------------------
Block 0x208
0x20a: v20a(0x16c) = CONST 
0x20d: v20d(0x4) = CONST 
0x20f: v20f = CALLDATALOAD v20d(0x4)
0x210: v210(0x494) = CONST 
0x213: JUMP v210(0x494)
----------------------------------

Begin block 0x214
prev = {}, next = {'0x220', '0x21c'}
----------------------------------
function balanceOf(address)()
Block 0x214
0x215: v215 = CALLVALUE 
0x217: v217 = ISZERO v215
0x218: v218(0x220) = CONST 
0x21b: JUMPI v218(0x220) v217
----------------------------------

Begin block 0x21c
prev = {'0x214'}, next = {}
----------------------------------
Block 0x21c
0x21c: v21c(0x0) = CONST 
0x21f: REVERT v21c(0x0) v21c(0x0)
----------------------------------

Begin block 0x220
prev = {'0x214'}, next = {'0x50c'}
----------------------------------
Block 0x220
0x222: v222(0x195) = CONST 
0x225: v225(0x1) = CONST 
0x227: v227(0xa0) = CONST 
0x229: v229(0x2) = CONST 
0x22b: v22b(0x10000000000000000000000000000000000000000) = EXP v229(0x2) v227(0xa0)
0x22c: v22c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v22b(0x10000000000000000000000000000000000000000) v225(0x1)
0x22d: v22d(0x4) = CONST 
0x22f: v22f = CALLDATALOAD v22d(0x4)
0x230: v230 = AND v22f v22c(0xffffffffffffffffffffffffffffffffffffffff)
0x231: v231(0x50c) = CONST 
0x234: JUMP v231(0x50c)
----------------------------------

Begin block 0x235
prev = {}, next = {'0x23d', '0x241'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x235
0x236: v236 = CALLVALUE 
0x238: v238 = ISZERO v236
0x239: v239(0x241) = CONST 
0x23c: JUMPI v239(0x241) v238
----------------------------------

Begin block 0x23d
prev = {'0x235'}, next = {}
----------------------------------
Block 0x23d
0x23d: v23d(0x0) = CONST 
0x240: REVERT v23d(0x0) v23d(0x0)
----------------------------------

Begin block 0x241
prev = {'0x235'}, next = {'0x51e'}
----------------------------------
Block 0x241
0x243: v243(0x16c) = CONST 
0x246: v246(0x1) = CONST 
0x248: v248(0xa0) = CONST 
0x24a: v24a(0x2) = CONST 
0x24c: v24c(0x10000000000000000000000000000000000000000) = EXP v24a(0x2) v248(0xa0)
0x24d: v24d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v24c(0x10000000000000000000000000000000000000000) v246(0x1)
0x24e: v24e(0x4) = CONST 
0x250: v250 = CALLDATALOAD v24e(0x4)
0x251: v251 = AND v250 v24d(0xffffffffffffffffffffffffffffffffffffffff)
0x252: v252(0x24) = CONST 
0x254: v254 = CALLDATALOAD v252(0x24)
0x255: v255(0x51e) = CONST 
0x258: JUMP v255(0x51e)
----------------------------------

Begin block 0x259
prev = {}, next = {'0x265', '0x261'}
----------------------------------
function symbol()()
Block 0x259
0x25a: v25a = CALLVALUE 
0x25c: v25c = ISZERO v25a
0x25d: v25d(0x265) = CONST 
0x260: JUMPI v25d(0x265) v25c
----------------------------------

Begin block 0x261
prev = {'0x259'}, next = {}
----------------------------------
Block 0x261
0x261: v261(0x0) = CONST 
0x264: REVERT v261(0x0) v261(0x0)
----------------------------------

Begin block 0x265
prev = {'0x259'}, next = {'0xd30x259'}
----------------------------------
Block 0x265
0x267: v267(0xd3) = CONST 
0x26a: v26a(0x5ef) = CONST 
0x26d: v26d_0, v26d_1 = CALLPRIVATE v26a(0x5ef) v267(0xd3)
----------------------------------

Begin block 0x26e
prev = {}, next = {'0x276', '0x27a'}
----------------------------------
function transfer(address,uint256)()
Block 0x26e
0x26f: v26f = CALLVALUE 
0x271: v271 = ISZERO v26f
0x272: v272(0x27a) = CONST 
0x275: JUMPI v272(0x27a) v271
----------------------------------

Begin block 0x276
prev = {'0x26e'}, next = {}
----------------------------------
Block 0x276
0x276: v276(0x0) = CONST 
0x279: REVERT v276(0x0) v276(0x0)
----------------------------------

Begin block 0x27a
prev = {'0x26e'}, next = {'0x649'}
----------------------------------
Block 0x27a
0x27c: v27c(0x16c) = CONST 
0x27f: v27f(0x1) = CONST 
0x281: v281(0xa0) = CONST 
0x283: v283(0x2) = CONST 
0x285: v285(0x10000000000000000000000000000000000000000) = EXP v283(0x2) v281(0xa0)
0x286: v286(0xffffffffffffffffffffffffffffffffffffffff) = SUB v285(0x10000000000000000000000000000000000000000) v27f(0x1)
0x287: v287(0x4) = CONST 
0x289: v289 = CALLDATALOAD v287(0x4)
0x28a: v28a = AND v289 v286(0xffffffffffffffffffffffffffffffffffffffff)
0x28b: v28b(0x24) = CONST 
0x28d: v28d = CALLDATALOAD v28b(0x24)
0x28e: v28e(0x649) = CONST 
0x291: JUMP v28e(0x649)
----------------------------------

Begin block 0x292
prev = {}, next = {'0x29a', '0x29e'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x292
0x293: v293 = CALLVALUE 
0x295: v295 = ISZERO v293
0x296: v296(0x29e) = CONST 
0x299: JUMPI v296(0x29e) v295
----------------------------------

Begin block 0x29a
prev = {'0x292'}, next = {}
----------------------------------
Block 0x29a
0x29a: v29a(0x0) = CONST 
0x29d: REVERT v29a(0x0) v29a(0x0)
----------------------------------

Begin block 0x29e
prev = {'0x292'}, next = {'0x65f'}
----------------------------------
Block 0x29e
0x2a0: v2a0(0x40) = CONST 
0x2a3: v2a3 = MLOAD v2a0(0x40)
0x2a4: v2a4(0x20) = CONST 
0x2a6: v2a6(0x4) = CONST 
0x2a8: v2a8(0x44) = CONST 
0x2aa: v2aa = CALLDATALOAD v2a8(0x44)
0x2ad: v2ad = ADD v2aa v2a6(0x4)
0x2ae: v2ae = CALLDATALOAD v2ad
0x2af: v2af(0x1f) = CONST 
0x2b2: v2b2 = ADD v2ae v2af(0x1f)
0x2b5: v2b5 = DIV v2b2 v2a4(0x20)
0x2b7: v2b7 = MUL v2a4(0x20) v2b5
0x2b9: v2b9 = ADD v2a3 v2b7
0x2bb: v2bb = ADD v2a4(0x20) v2b9
0x2be: MSTORE v2a0(0x40) v2bb
0x2c1: MSTORE v2a3 v2ae
0x2c2: v2c2(0x16c) = CONST 
0x2c7: v2c7 = CALLDATALOAD v2a6(0x4)
0x2c8: v2c8(0x1) = CONST 
0x2ca: v2ca(0xa0) = CONST 
0x2cc: v2cc(0x2) = CONST 
0x2ce: v2ce(0x10000000000000000000000000000000000000000) = EXP v2cc(0x2) v2ca(0xa0)
0x2cf: v2cf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2ce(0x10000000000000000000000000000000000000000) v2c8(0x1)
0x2d0: v2d0 = AND v2cf(0xffffffffffffffffffffffffffffffffffffffff) v2c7
0x2d2: v2d2(0x24) = CONST 
0x2d5: v2d5 = CALLDATALOAD v2d2(0x24)
0x2d7: v2d7 = CALLDATASIZE 
0x2da: v2da(0x64) = CONST 
0x2de: v2de = ADD v2d2(0x24) v2aa
0x2e4: v2e4 = ADD v2a3 v2a4(0x20)
0x2ea: CALLDATACOPY v2e4 v2de v2ae
0x2ef: v2ef(0x65f) = CONST 
0x2fa: JUMP v2ef(0x65f)
----------------------------------

Begin block 0x2fb
prev = {}, next = {'0x303', '0x307'}
----------------------------------
function allowance(address,address)()
Block 0x2fb
0x2fc: v2fc = CALLVALUE 
0x2fe: v2fe = ISZERO v2fc
0x2ff: v2ff(0x307) = CONST 
0x302: JUMPI v2ff(0x307) v2fe
----------------------------------

Begin block 0x303
prev = {'0x2fb'}, next = {}
----------------------------------
Block 0x303
0x303: v303(0x0) = CONST 
0x306: REVERT v303(0x0) v303(0x0)
----------------------------------

Begin block 0x307
prev = {'0x2fb'}, next = {'0x778'}
----------------------------------
Block 0x307
0x309: v309(0x195) = CONST 
0x30c: v30c(0x1) = CONST 
0x30e: v30e(0xa0) = CONST 
0x310: v310(0x2) = CONST 
0x312: v312(0x10000000000000000000000000000000000000000) = EXP v310(0x2) v30e(0xa0)
0x313: v313(0xffffffffffffffffffffffffffffffffffffffff) = SUB v312(0x10000000000000000000000000000000000000000) v30c(0x1)
0x314: v314(0x4) = CONST 
0x316: v316 = CALLDATALOAD v314(0x4)
0x318: v318 = AND v313(0xffffffffffffffffffffffffffffffffffffffff) v316
0x31a: v31a(0x24) = CONST 
0x31c: v31c = CALLDATALOAD v31a(0x24)
0x31d: v31d = AND v31c v313(0xffffffffffffffffffffffffffffffffffffffff)
0x31e: v31e(0x778) = CONST 
0x321: JUMP v31e(0x778)
----------------------------------

Begin block 0x322
prev = {}, next = {'0x3a80x322', '0x362'}
----------------------------------
function 0x322(v322arg0)
Block 0x322
0x323: v323(0x0) = CONST 
0x326: v326 = SLOAD v323(0x0)
0x327: v327(0x40) = CONST 
0x32a: v32a = MLOAD v327(0x40)
0x32b: v32b(0x20) = CONST 
0x32d: v32d(0x2) = CONST 
0x32f: v32f(0x1) = CONST 
0x332: v332 = AND v326 v32f(0x1)
0x333: v333 = ISZERO v332
0x334: v334(0x100) = CONST 
0x337: v337 = MUL v334(0x100) v333
0x338: v338(0x0) = CONST 
0x33a: v33a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v338(0x0)
0x33b: v33b = ADD v33a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v337
0x33e: v33e = AND v326 v33b
0x342: v342 = DIV v33e v32d(0x2)
0x343: v343(0x1f) = CONST 
0x346: v346 = ADD v342 v343(0x1f)
0x349: v349 = DIV v346 v32b(0x20)
0x34b: v34b = MUL v32b(0x20) v349
0x34d: v34d = ADD v32a v34b
0x34f: v34f = ADD v32b(0x20) v34d
0x352: MSTORE v327(0x40) v34f
0x355: MSTORE v32a v342
0x359: v359 = ADD v32a v32b(0x20)
0x35d: v35d = ISZERO v342
0x35e: v35e(0x3a8) = CONST 
0x361: JUMPI v35e(0x3a8) v35d
----------------------------------

Begin block 0x362
prev = {'0x322'}, next = {'0x37d0x322', '0x36a'}
----------------------------------
Block 0x362
0x363: v363(0x1f) = CONST 
0x365: v365 = LT v363(0x1f) v342
0x366: v366(0x37d) = CONST 
0x369: JUMPI v366(0x37d) v365
----------------------------------

Begin block 0x36a
prev = {'0x362'}, next = {'0x3a80x322'}
----------------------------------
Block 0x36a
0x36a: v36a(0x100) = CONST 
0x36f: v36f = SLOAD v323(0x0)
0x370: v370 = DIV v36f v36a(0x100)
0x371: v371 = MUL v370 v36a(0x100)
0x373: MSTORE v359 v371
0x375: v375(0x20) = CONST 
0x377: v377 = ADD v375(0x20) v359
0x379: v379(0x3a8) = CONST 
0x37c: JUMP v379(0x3a8)
----------------------------------

Begin block 0x37d0x322
prev = {'0x362'}, next = {'0x38b0x322'}
----------------------------------
Block 0x37d0x322
0x37f0x322: v32237f = ADD v359 v342
0x3820x322: v322382(0x0) = CONST 
0x3840x322: MSTORE v322382(0x0) v323(0x0)
0x3850x322: v322385(0x20) = CONST 
0x3870x322: v322387(0x0) = CONST 
0x3890x322: v322389 = SHA3 v322387(0x0) v322385(0x20)
----------------------------------

Begin block 0x37d0x5ef
prev = {'0x62e'}, next = {'0x38b0x5ef'}
----------------------------------
Block 0x37d0x5ef
0x37f0x5ef: v5ef37f = ADD v625 v60e
0x3820x5ef: v5ef382(0x0) = CONST 
0x3840x5ef: MSTORE v5ef382(0x0) v5f0(0x1)
0x3850x5ef: v5ef385(0x20) = CONST 
0x3870x5ef: v5ef387(0x0) = CONST 
0x3890x5ef: v5ef389 = SHA3 v5ef387(0x0) v5ef385(0x20)
----------------------------------

Begin block 0x38b0x322
prev = {'0x37d0x322', '0x38b0x322'}, next = {'0x39f0x322', '0x38b0x322'}
----------------------------------
Block 0x38b0x322
0x38b0x322_0x0: v38b322_0 = PHI v359 v322397
0x38b0x322_0x1: v38b322_1 = PHI v322393 v322389
0x38d0x322: v32238d = SLOAD v38b322_1
0x38f0x322: MSTORE v38b322_0 v32238d
0x3910x322: v322391(0x1) = CONST 
0x3930x322: v322393 = ADD v322391(0x1) v38b322_1
0x3950x322: v322395(0x20) = CONST 
0x3970x322: v322397 = ADD v322395(0x20) v38b322_0
0x39a0x322: v32239a = GT v32237f v322397
0x39b0x322: v32239b(0x38b) = CONST 
0x39e0x322: JUMPI v32239b(0x38b) v32239a
----------------------------------

Begin block 0x38b0x5ef
prev = {'0x38b0x5ef', '0x37d0x5ef'}, next = {'0x39f0x5ef', '0x38b0x5ef'}
----------------------------------
Block 0x38b0x5ef
0x38b0x5ef_0x0: v38b5ef_0 = PHI v625 v5ef397
0x38b0x5ef_0x1: v38b5ef_1 = PHI v5ef393 v5ef389
0x38d0x5ef: v5ef38d = SLOAD v38b5ef_1
0x38f0x5ef: MSTORE v38b5ef_0 v5ef38d
0x3910x5ef: v5ef391(0x1) = CONST 
0x3930x5ef: v5ef393 = ADD v5ef391(0x1) v38b5ef_1
0x3950x5ef: v5ef395(0x20) = CONST 
0x3970x5ef: v5ef397 = ADD v5ef395(0x20) v38b5ef_0
0x39a0x5ef: v5ef39a = GT v5ef37f v5ef397
0x39b0x5ef: v5ef39b(0x38b) = CONST 
0x39e0x5ef: JUMPI v5ef39b(0x38b) v5ef39a
----------------------------------

Begin block 0x39f0x322
prev = {'0x38b0x322'}, next = {'0x3a80x322'}
----------------------------------
Block 0x39f0x322
0x3a10x322: v3223a1 = SUB v322397 v32237f
0x3a20x322: v3223a2(0x1f) = CONST 
0x3a40x322: v3223a4 = AND v3223a2(0x1f) v3223a1
0x3a60x322: v3223a6 = ADD v32237f v3223a4
----------------------------------

Begin block 0x39f0x5ef
prev = {'0x38b0x5ef'}, next = {'0x3a80x5ef'}
----------------------------------
Block 0x39f0x5ef
0x3a10x5ef: v5ef3a1 = SUB v5ef397 v5ef37f
0x3a20x5ef: v5ef3a2(0x1f) = CONST 
0x3a40x5ef: v5ef3a4 = AND v5ef3a2(0x1f) v5ef3a1
0x3a60x5ef: v5ef3a6 = ADD v5ef37f v5ef3a4
----------------------------------

Begin block 0x3a80x322
prev = {'0x39f0x322', '0x36a', '0x322'}, next = {}
----------------------------------
Block 0x3a80x322
0x3af0x322: RETURNPRIVATE v322arg0 v32a v322arg0
----------------------------------

Begin block 0x3a80x5ef
prev = {'0x636', '0x5ef', '0x39f0x5ef'}, next = {}
----------------------------------
Block 0x3a80x5ef
0x3af0x5ef: RETURNPRIVATE v5efarg0 v5f7 v5efarg0
----------------------------------

Begin block 0x3b0
prev = {}, next = {}
----------------------------------
function 0x3b0(v3b0arg0, v3b0arg1, v3b0arg2)
Block 0x3b0
0x3b1: v3b1 = CALLER 
0x3b2: v3b2(0x0) = CONST 
0x3b6: MSTORE v3b2(0x0) v3b1
0x3b7: v3b7(0x5) = CONST 
0x3b9: v3b9(0x20) = CONST 
0x3bd: MSTORE v3b9(0x20) v3b7(0x5)
0x3be: v3be(0x40) = CONST 
0x3c2: v3c2 = SHA3 v3b2(0x0) v3be(0x40)
0x3c3: v3c3(0x1) = CONST 
0x3c5: v3c5(0xa0) = CONST 
0x3c7: v3c7(0x2) = CONST 
0x3c9: v3c9(0x10000000000000000000000000000000000000000) = EXP v3c7(0x2) v3c5(0xa0)
0x3ca: v3ca(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c9(0x10000000000000000000000000000000000000000) v3c3(0x1)
0x3cc: v3cc = AND v3b0arg1 v3ca(0xffffffffffffffffffffffffffffffffffffffff)
0x3cf: MSTORE v3b2(0x0) v3cc
0x3d2: MSTORE v3b9(0x20) v3c2
0x3d5: v3d5 = SHA3 v3b2(0x0) v3be(0x40)
0x3d8: SSTORE v3d5 v3b0arg0
0x3da: v3da = MLOAD v3be(0x40)
0x3dd: MSTORE v3da v3b0arg0
0x3df: v3df = MLOAD v3be(0x40)
0x3e6: v3e6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x40a: v40a = SUB v3da v3df
0x40b: v40b = ADD v40a v3b9(0x20)
0x40d: LOG3 v3df v40b v3e6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v3b1 v3cc
0x40f: v40f(0x1) = CONST 
0x415: RETURNPRIVATE v3b0arg2 v40f(0x1)
----------------------------------

Begin block 0x416
prev = {'0x18c'}, next = {'0x1950x180'}
----------------------------------
Block 0x416
0x417: v417(0x3) = CONST 
0x419: v419 = SLOAD v417(0x3)
0x41b: JUMP v18e(0x195)
----------------------------------

Begin block 0x41c
prev = {'0x1b3'}, next = {'0x44c', '0x448'}
----------------------------------
Block 0x41c
0x41d: v41d(0x1) = CONST 
0x41f: v41f(0xa0) = CONST 
0x421: v421(0x2) = CONST 
0x423: v423(0x10000000000000000000000000000000000000000) = EXP v421(0x2) v41f(0xa0)
0x424: v424(0xffffffffffffffffffffffffffffffffffffffff) = SUB v423(0x10000000000000000000000000000000000000000) v41d(0x1)
0x426: v426 = AND v1c4 v424(0xffffffffffffffffffffffffffffffffffffffff)
0x427: v427(0x0) = CONST 
0x42b: MSTORE v427(0x0) v426
0x42c: v42c(0x5) = CONST 
0x42e: v42e(0x20) = CONST 
0x432: MSTORE v42e(0x20) v42c(0x5)
0x433: v433(0x40) = CONST 
0x437: v437 = SHA3 v427(0x0) v433(0x40)
0x438: v438 = CALLER 
0x43a: MSTORE v427(0x0) v438
0x43d: MSTORE v42e(0x20) v437
0x43f: v43f = SHA3 v427(0x0) v433(0x40)
0x440: v440 = SLOAD v43f
0x442: v442 = GT v1cc v440
0x443: v443 = ISZERO v442
0x444: v444(0x44c) = CONST 
0x447: JUMPI v444(0x44c) v443
----------------------------------

Begin block 0x448
prev = {'0x41c'}, next = {}
----------------------------------
Block 0x448
0x448: v448(0x0) = CONST 
0x44b: REVERT v448(0x0) v448(0x0)
----------------------------------

Begin block 0x44c
prev = {'0x41c'}, next = {'0x481'}
----------------------------------
Block 0x44c
0x44d: v44d(0x1) = CONST 
0x44f: v44f(0xa0) = CONST 
0x451: v451(0x2) = CONST 
0x453: v453(0x10000000000000000000000000000000000000000) = EXP v451(0x2) v44f(0xa0)
0x454: v454(0xffffffffffffffffffffffffffffffffffffffff) = SUB v453(0x10000000000000000000000000000000000000000) v44d(0x1)
0x456: v456 = AND v1c4 v454(0xffffffffffffffffffffffffffffffffffffffff)
0x457: v457(0x0) = CONST 
0x45b: MSTORE v457(0x0) v456
0x45c: v45c(0x5) = CONST 
0x45e: v45e(0x20) = CONST 
0x462: MSTORE v45e(0x20) v45c(0x5)
0x463: v463(0x40) = CONST 
0x467: v467 = SHA3 v457(0x0) v463(0x40)
0x468: v468 = CALLER 
0x46a: MSTORE v457(0x0) v468
0x46d: MSTORE v45e(0x20) v467
0x46f: v46f = SHA3 v457(0x0) v463(0x40)
0x471: v471 = SLOAD v46f
0x474: v474 = SUB v471 v1cc
0x476: SSTORE v46f v474
0x477: v477(0x481) = CONST 
0x47d: v47d(0x795) = CONST 
0x480: CALLPRIVATE v47d(0x795) v1cc v1c9 v1c4 v477(0x481)
----------------------------------

Begin block 0x481
prev = {'0x44c'}, next = {'0x16c0x1a7'}
----------------------------------
Block 0x481
0x483: v483(0x1) = CONST 
0x48a: JUMP v1b5(0x16c)
----------------------------------

Begin block 0x48b
prev = {'0x1dd'}, next = {'0x1e6'}
----------------------------------
Block 0x48b
0x48c: v48c(0x2) = CONST 
0x48e: v48e = SLOAD v48c(0x2)
0x48f: v48f(0xff) = CONST 
0x491: v491 = AND v48f(0xff) v48e
0x493: JUMP v1df(0x1e6)
----------------------------------

Begin block 0x494
prev = {'0x208'}, next = {'0x4b0', '0x4ac'}
----------------------------------
Block 0x494
0x495: v495 = CALLER 
0x496: v496(0x0) = CONST 
0x49a: MSTORE v496(0x0) v495
0x49b: v49b(0x4) = CONST 
0x49d: v49d(0x20) = CONST 
0x49f: MSTORE v49d(0x20) v49b(0x4)
0x4a0: v4a0(0x40) = CONST 
0x4a3: v4a3 = SHA3 v496(0x0) v4a0(0x40)
0x4a4: v4a4 = SLOAD v4a3
0x4a6: v4a6 = GT v20f v4a4
0x4a7: v4a7 = ISZERO v4a6
0x4a8: v4a8(0x4b0) = CONST 
0x4ab: JUMPI v4a8(0x4b0) v4a7
----------------------------------

Begin block 0x4ac
prev = {'0x494'}, next = {}
----------------------------------
Block 0x4ac
0x4ac: v4ac(0x0) = CONST 
0x4af: REVERT v4ac(0x0) v4ac(0x0)
----------------------------------

Begin block 0x4b0
prev = {'0x494'}, next = {'0x16c0x1fc'}
----------------------------------
Block 0x4b0
0x4b1: v4b1 = CALLER 
0x4b2: v4b2(0x0) = CONST 
0x4b6: MSTORE v4b2(0x0) v4b1
0x4b7: v4b7(0x4) = CONST 
0x4b9: v4b9(0x20) = CONST 
0x4bd: MSTORE v4b9(0x20) v4b7(0x4)
0x4be: v4be(0x40) = CONST 
0x4c3: v4c3 = SHA3 v4b2(0x0) v4be(0x40)
0x4c5: v4c5 = SLOAD v4c3
0x4c8: v4c8 = SUB v4c5 v20f
0x4ca: SSTORE v4c3 v4c8
0x4cb: v4cb(0x3) = CONST 
0x4ce: v4ce = SLOAD v4cb(0x3)
0x4d1: v4d1 = SUB v4ce v20f
0x4d3: SSTORE v4cb(0x3) v4d1
0x4d5: v4d5 = MLOAD v4be(0x40)
0x4d8: MSTORE v4d5 v20f
0x4da: v4da = MLOAD v4be(0x40)
0x4db: v4db(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x4ff: v4ff = SUB v4d5 v4da
0x502: v502 = ADD v4b9(0x20) v4ff
0x504: LOG2 v4da v502 v4db(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v4b1
0x506: v506(0x1) = CONST 
0x50b: JUMP v20a(0x16c)
----------------------------------

Begin block 0x50c
prev = {'0x220'}, next = {'0x1950x214'}
----------------------------------
Block 0x50c
0x50d: v50d(0x4) = CONST 
0x50f: v50f(0x20) = CONST 
0x511: MSTORE v50f(0x20) v50d(0x4)
0x512: v512(0x0) = CONST 
0x516: MSTORE v512(0x0) v230
0x517: v517(0x40) = CONST 
0x51a: v51a = SHA3 v512(0x0) v517(0x40)
0x51b: v51b = SLOAD v51a
0x51d: JUMP v222(0x195)
----------------------------------

Begin block 0x51e
prev = {'0x241'}, next = {'0x53f', '0x543'}
----------------------------------
Block 0x51e
0x51f: v51f(0x1) = CONST 
0x521: v521(0xa0) = CONST 
0x523: v523(0x2) = CONST 
0x525: v525(0x10000000000000000000000000000000000000000) = EXP v523(0x2) v521(0xa0)
0x526: v526(0xffffffffffffffffffffffffffffffffffffffff) = SUB v525(0x10000000000000000000000000000000000000000) v51f(0x1)
0x528: v528 = AND v251 v526(0xffffffffffffffffffffffffffffffffffffffff)
0x529: v529(0x0) = CONST 
0x52d: MSTORE v529(0x0) v528
0x52e: v52e(0x4) = CONST 
0x530: v530(0x20) = CONST 
0x532: MSTORE v530(0x20) v52e(0x4)
0x533: v533(0x40) = CONST 
0x536: v536 = SHA3 v529(0x0) v533(0x40)
0x537: v537 = SLOAD v536
0x539: v539 = GT v254 v537
0x53a: v53a = ISZERO v539
0x53b: v53b(0x543) = CONST 
0x53e: JUMPI v53b(0x543) v53a
----------------------------------

Begin block 0x53f
prev = {'0x51e'}, next = {}
----------------------------------
Block 0x53f
0x53f: v53f(0x0) = CONST 
0x542: REVERT v53f(0x0) v53f(0x0)
----------------------------------

Begin block 0x543
prev = {'0x51e'}, next = {'0x573', '0x56f'}
----------------------------------
Block 0x543
0x544: v544(0x1) = CONST 
0x546: v546(0xa0) = CONST 
0x548: v548(0x2) = CONST 
0x54a: v54a(0x10000000000000000000000000000000000000000) = EXP v548(0x2) v546(0xa0)
0x54b: v54b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v54a(0x10000000000000000000000000000000000000000) v544(0x1)
0x54d: v54d = AND v251 v54b(0xffffffffffffffffffffffffffffffffffffffff)
0x54e: v54e(0x0) = CONST 
0x552: MSTORE v54e(0x0) v54d
0x553: v553(0x5) = CONST 
0x555: v555(0x20) = CONST 
0x559: MSTORE v555(0x20) v553(0x5)
0x55a: v55a(0x40) = CONST 
0x55e: v55e = SHA3 v54e(0x0) v55a(0x40)
0x55f: v55f = CALLER 
0x561: MSTORE v54e(0x0) v55f
0x564: MSTORE v555(0x20) v55e
0x566: v566 = SHA3 v54e(0x0) v55a(0x40)
0x567: v567 = SLOAD v566
0x569: v569 = GT v254 v567
0x56a: v56a = ISZERO v569
0x56b: v56b(0x573) = CONST 
0x56e: JUMPI v56b(0x573) v56a
----------------------------------

Begin block 0x56f
prev = {'0x543'}, next = {}
----------------------------------
Block 0x56f
0x56f: v56f(0x0) = CONST 
0x572: REVERT v56f(0x0) v56f(0x0)
----------------------------------

Begin block 0x573
prev = {'0x543'}, next = {'0x16c0x235'}
----------------------------------
Block 0x573
0x574: v574(0x1) = CONST 
0x576: v576(0xa0) = CONST 
0x578: v578(0x2) = CONST 
0x57a: v57a(0x10000000000000000000000000000000000000000) = EXP v578(0x2) v576(0xa0)
0x57b: v57b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v57a(0x10000000000000000000000000000000000000000) v574(0x1)
0x57d: v57d = AND v251 v57b(0xffffffffffffffffffffffffffffffffffffffff)
0x57e: v57e(0x0) = CONST 
0x582: MSTORE v57e(0x0) v57d
0x583: v583(0x4) = CONST 
0x585: v585(0x20) = CONST 
0x589: MSTORE v585(0x20) v583(0x4)
0x58a: v58a(0x40) = CONST 
0x58e: v58e = SHA3 v57e(0x0) v58a(0x40)
0x590: v590 = SLOAD v58e
0x593: v593 = SUB v590 v254
0x595: SSTORE v58e v593
0x596: v596(0x5) = CONST 
0x599: MSTORE v585(0x20) v596(0x5)
0x59c: v59c = SHA3 v57e(0x0) v58a(0x40)
0x59d: v59d = CALLER 
0x59f: MSTORE v57e(0x0) v59d
0x5a1: MSTORE v585(0x20) v59c
0x5a5: v5a5 = SHA3 v57e(0x0) v58a(0x40)
0x5a7: v5a7 = SLOAD v5a5
0x5aa: v5aa = SUB v5a7 v254
0x5ac: SSTORE v5a5 v5aa
0x5ad: v5ad(0x3) = CONST 
0x5b0: v5b0 = SLOAD v5ad(0x3)
0x5b3: v5b3 = SUB v5b0 v254
0x5b5: SSTORE v5ad(0x3) v5b3
0x5b7: v5b7 = MLOAD v58a(0x40)
0x5ba: MSTORE v5b7 v254
0x5bc: v5bc = MLOAD v58a(0x40)
0x5bd: v5bd(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x5e1: v5e1 = SUB v5b7 v5bc
0x5e4: v5e4 = ADD v585(0x20) v5e1
0x5e6: LOG2 v5bc v5e4 v5bd(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v57d
0x5e8: v5e8(0x1) = CONST 
0x5ee: JUMP v243(0x16c)
----------------------------------

Begin block 0x5ef
prev = {}, next = {'0x62e', '0x3a80x5ef'}
----------------------------------
function 0x5ef(v5efarg0)
Block 0x5ef
0x5f0: v5f0(0x1) = CONST 
0x5f3: v5f3 = SLOAD v5f0(0x1)
0x5f4: v5f4(0x40) = CONST 
0x5f7: v5f7 = MLOAD v5f4(0x40)
0x5f8: v5f8(0x20) = CONST 
0x5fa: v5fa(0x2) = CONST 
0x5fe: v5fe = AND v5f0(0x1) v5f3
0x5ff: v5ff = ISZERO v5fe
0x600: v600(0x100) = CONST 
0x603: v603 = MUL v600(0x100) v5ff
0x604: v604(0x0) = CONST 
0x606: v606(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v604(0x0)
0x607: v607 = ADD v606(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v603
0x60a: v60a = AND v5f3 v607
0x60e: v60e = DIV v60a v5fa(0x2)
0x60f: v60f(0x1f) = CONST 
0x612: v612 = ADD v60e v60f(0x1f)
0x615: v615 = DIV v612 v5f8(0x20)
0x617: v617 = MUL v5f8(0x20) v615
0x619: v619 = ADD v5f7 v617
0x61b: v61b = ADD v5f8(0x20) v619
0x61e: MSTORE v5f4(0x40) v61b
0x621: MSTORE v5f7 v60e
0x625: v625 = ADD v5f7 v5f8(0x20)
0x629: v629 = ISZERO v60e
0x62a: v62a(0x3a8) = CONST 
0x62d: JUMPI v62a(0x3a8) v629
----------------------------------

Begin block 0x62e
prev = {'0x5ef'}, next = {'0x636', '0x37d0x5ef'}
----------------------------------
Block 0x62e
0x62f: v62f(0x1f) = CONST 
0x631: v631 = LT v62f(0x1f) v60e
0x632: v632(0x37d) = CONST 
0x635: JUMPI v632(0x37d) v631
----------------------------------

Begin block 0x636
prev = {'0x62e'}, next = {'0x3a80x5ef'}
----------------------------------
Block 0x636
0x636: v636(0x100) = CONST 
0x63b: v63b = SLOAD v5f0(0x1)
0x63c: v63c = DIV v63b v636(0x100)
0x63d: v63d = MUL v63c v636(0x100)
0x63f: MSTORE v625 v63d
0x641: v641(0x20) = CONST 
0x643: v643 = ADD v641(0x20) v625
0x645: v645(0x3a8) = CONST 
0x648: JUMP v645(0x3a8)
----------------------------------

Begin block 0x649
prev = {'0x27a'}, next = {'0x656'}
----------------------------------
Block 0x649
0x64a: v64a(0x0) = CONST 
0x64c: v64c(0x656) = CONST 
0x64f: v64f = CALLER 
0x652: v652(0x795) = CONST 
0x655: CALLPRIVATE v652(0x795) v28d v28a v64f v64c(0x656)
----------------------------------

Begin block 0x656
prev = {'0x649'}, next = {'0x16c0x26e'}
----------------------------------
Block 0x656
0x658: v658(0x1) = CONST 
0x65e: JUMP v27c(0x16c)
----------------------------------

Begin block 0x65f
prev = {'0x29e'}, next = {'0x66c'}
----------------------------------
Block 0x65f
0x660: v660(0x0) = CONST 
0x663: v663(0x66c) = CONST 
0x668: v668(0x3b0) = CONST 
0x66b: v66b_0 = CALLPRIVATE v668(0x3b0) v2d5 v2d0 v663(0x66c)
----------------------------------

Begin block 0x66c
prev = {'0x65f'}, next = {'0x770', '0x672'}
----------------------------------
Block 0x66c
0x66d: v66d = ISZERO v66b_0
0x66e: v66e(0x770) = CONST 
0x671: JUMPI v66e(0x770) v66d
----------------------------------

Begin block 0x672
prev = {'0x66c'}, next = {'0x6ec'}
----------------------------------
Block 0x672
0x672: v672(0x40) = CONST 
0x674: v674 = MLOAD v672(0x40)
0x675: v675(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = CONST 
0x697: MSTORE v674 v675(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x698: v698 = CALLER 
0x699: v699(0x4) = CONST 
0x69c: v69c = ADD v674 v699(0x4)
0x69f: MSTORE v69c v698
0x6a0: v6a0(0x24) = CONST 
0x6a3: v6a3 = ADD v674 v6a0(0x24)
0x6a6: MSTORE v6a3 v2d5
0x6a7: v6a7 = ADDRESS 
0x6a8: v6a8(0x44) = CONST 
0x6ab: v6ab = ADD v674 v6a8(0x44)
0x6ae: MSTORE v6ab v6a7
0x6af: v6af(0x80) = CONST 
0x6b1: v6b1(0x64) = CONST 
0x6b4: v6b4 = ADD v674 v6b1(0x64)
0x6b7: MSTORE v6b4 v6af(0x80)
0x6b9: v6b9 = MLOAD v2a3
0x6ba: v6ba(0x84) = CONST 
0x6bd: v6bd = ADD v674 v6ba(0x84)
0x6be: MSTORE v6bd v6b9
0x6c0: v6c0 = MLOAD v2a3
0x6c1: v6c1(0x1) = CONST 
0x6c3: v6c3(0xa0) = CONST 
0x6c5: v6c5(0x2) = CONST 
0x6c7: v6c7(0x10000000000000000000000000000000000000000) = EXP v6c5(0x2) v6c3(0xa0)
0x6c8: v6c8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6c7(0x10000000000000000000000000000000000000000) v6c1(0x1)
0x6ca: v6ca = AND v2d0 v6c8(0xffffffffffffffffffffffffffffffffffffffff)
0x6cc: v6cc(0x8f4ffcb1) = CONST 
0x6dc: v6dc(0xa4) = CONST 
0x6e0: v6e0 = ADD v674 v6dc(0xa4)
0x6e2: v6e2(0x20) = CONST 
0x6e5: v6e5 = ADD v2a3 v6e2(0x20)
0x6ea: v6ea(0x0) = CONST 
----------------------------------

Begin block 0x6ec
prev = {'0x672', '0x6f5'}, next = {'0x6f5', '0x704'}
----------------------------------
Block 0x6ec
0x6ec_0x0: v6ec_0 = PHI v6ea(0x0) v6ff
0x6ef: v6ef = LT v6ec_0 v6c0
0x6f0: v6f0 = ISZERO v6ef
0x6f1: v6f1(0x704) = CONST 
0x6f4: JUMPI v6f1(0x704) v6f0
----------------------------------

Begin block 0x6f5
prev = {'0x6ec'}, next = {'0x6ec'}
----------------------------------
Block 0x6f5
0x6f5_0x0: v6f5_0 = PHI v6ea(0x0) v6ff
0x6f7: v6f7 = ADD v6f5_0 v6e5
0x6f8: v6f8 = MLOAD v6f7
0x6fb: v6fb = ADD v6f5_0 v6e0
0x6fc: MSTORE v6fb v6f8
0x6fd: v6fd(0x20) = CONST 
0x6ff: v6ff = ADD v6fd(0x20) v6f5_0
0x700: v700(0x6ec) = CONST 
0x703: JUMP v700(0x6ec)
----------------------------------

Begin block 0x704
prev = {'0x6ec'}, next = {'0x718', '0x731'}
----------------------------------
Block 0x704
0x70d: v70d = ADD v6c0 v6e0
0x70f: v70f(0x1f) = CONST 
0x711: v711 = AND v70f(0x1f) v6c0
0x713: v713 = ISZERO v711
0x714: v714(0x731) = CONST 
0x717: JUMPI v714(0x731) v713
----------------------------------

Begin block 0x718
prev = {'0x704'}, next = {'0x731'}
----------------------------------
Block 0x718
0x71a: v71a = SUB v70d v711
0x71c: v71c = MLOAD v71a
0x71d: v71d(0x1) = CONST 
0x720: v720(0x20) = CONST 
0x722: v722 = SUB v720(0x20) v711
0x723: v723(0x100) = CONST 
0x726: v726 = EXP v723(0x100) v722
0x727: v727 = SUB v726 v71d(0x1)
0x728: v728 = NOT v727
0x729: v729 = AND v728 v71c
0x72b: MSTORE v71a v729
0x72c: v72c(0x20) = CONST 
0x72e: v72e = ADD v72c(0x20) v71a
----------------------------------

Begin block 0x731
prev = {'0x718', '0x704'}, next = {'0x74f', '0x753'}
----------------------------------
Block 0x731
0x731_0x1: v731_1 = PHI v70d v72e
0x73a: v73a(0x0) = CONST 
0x73c: v73c(0x40) = CONST 
0x73e: v73e = MLOAD v73c(0x40)
0x741: v741 = SUB v731_1 v73e
0x743: v743(0x0) = CONST 
0x747: v747 = EXTCODESIZE v6ca
0x748: v748 = ISZERO v747
0x74a: v74a = ISZERO v748
0x74b: v74b(0x753) = CONST 
0x74e: JUMPI v74b(0x753) v74a
----------------------------------

Begin block 0x74f
prev = {'0x731'}, next = {}
----------------------------------
Block 0x74f
0x74f: v74f(0x0) = CONST 
0x752: REVERT v74f(0x0) v74f(0x0)
----------------------------------

Begin block 0x753
prev = {'0x731'}, next = {'0x767', '0x75e'}
----------------------------------
Block 0x753
0x755: v755 = GAS 
0x756: v756 = CALL v755 v6ca v743(0x0) v73e v741 v73e v73a(0x0)
0x757: v757 = ISZERO v756
0x759: v759 = ISZERO v757
0x75a: v75a(0x767) = CONST 
0x75d: JUMPI v75a(0x767) v759
----------------------------------

Begin block 0x75e
prev = {'0x753'}, next = {}
----------------------------------
Block 0x75e
0x75e: v75e = RETURNDATASIZE 
0x75f: v75f(0x0) = CONST 
0x762: RETURNDATACOPY v75f(0x0) v75f(0x0) v75e
0x763: v763 = RETURNDATASIZE 
0x764: v764(0x0) = CONST 
0x766: REVERT v764(0x0) v763
----------------------------------

Begin block 0x767
prev = {'0x753'}, next = {'0x770'}
----------------------------------
Block 0x767
0x76c: v76c(0x1) = CONST 
----------------------------------

Begin block 0x770
prev = {'0x767', '0x66c'}, next = {'0x16c0x292'}
----------------------------------
Block 0x770
0x777: JUMP v2c2(0x16c)
----------------------------------

Begin block 0x778
prev = {'0x307'}, next = {'0x1950x2fb'}
----------------------------------
Block 0x778
0x779: v779(0x5) = CONST 
0x77b: v77b(0x20) = CONST 
0x77f: MSTORE v77b(0x20) v779(0x5)
0x780: v780(0x0) = CONST 
0x784: MSTORE v780(0x0) v318
0x785: v785(0x40) = CONST 
0x789: v789 = SHA3 v780(0x0) v785(0x40)
0x78c: MSTORE v77b(0x20) v789
0x78f: MSTORE v780(0x0) v31d
0x791: v791 = SHA3 v780(0x0) v785(0x40)
0x792: v792 = SLOAD v791
0x794: JUMP v309(0x195)
----------------------------------

Begin block 0x795
prev = {}, next = {'0x7ac', '0x7a8'}
----------------------------------
function 0x795(v795arg0, v795arg1, v795arg2, v795arg3)
Block 0x795
0x796: v796(0x0) = CONST 
0x798: v798(0x1) = CONST 
0x79a: v79a(0xa0) = CONST 
0x79c: v79c(0x2) = CONST 
0x79e: v79e(0x10000000000000000000000000000000000000000) = EXP v79c(0x2) v79a(0xa0)
0x79f: v79f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v79e(0x10000000000000000000000000000000000000000) v798(0x1)
0x7a1: v7a1 = AND v795arg1 v79f(0xffffffffffffffffffffffffffffffffffffffff)
0x7a2: v7a2 = ISZERO v7a1
0x7a3: v7a3 = ISZERO v7a2
0x7a4: v7a4(0x7ac) = CONST 
0x7a7: JUMPI v7a4(0x7ac) v7a3
----------------------------------

Begin block 0x7a8
prev = {'0x795'}, next = {}
----------------------------------
Block 0x7a8
0x7a8: v7a8(0x0) = CONST 
0x7ab: REVERT v7a8(0x0) v7a8(0x0)
----------------------------------

Begin block 0x7ac
prev = {'0x795'}, next = {'0x7d1', '0x7cd'}
----------------------------------
Block 0x7ac
0x7ad: v7ad(0x1) = CONST 
0x7af: v7af(0xa0) = CONST 
0x7b1: v7b1(0x2) = CONST 
0x7b3: v7b3(0x10000000000000000000000000000000000000000) = EXP v7b1(0x2) v7af(0xa0)
0x7b4: v7b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7b3(0x10000000000000000000000000000000000000000) v7ad(0x1)
0x7b6: v7b6 = AND v795arg2 v7b4(0xffffffffffffffffffffffffffffffffffffffff)
0x7b7: v7b7(0x0) = CONST 
0x7bb: MSTORE v7b7(0x0) v7b6
0x7bc: v7bc(0x4) = CONST 
0x7be: v7be(0x20) = CONST 
0x7c0: MSTORE v7be(0x20) v7bc(0x4)
0x7c1: v7c1(0x40) = CONST 
0x7c4: v7c4 = SHA3 v7b7(0x0) v7c1(0x40)
0x7c5: v7c5 = SLOAD v7c4
0x7c7: v7c7 = GT v795arg0 v7c5
0x7c8: v7c8 = ISZERO v7c7
0x7c9: v7c9(0x7d1) = CONST 
0x7cc: JUMPI v7c9(0x7d1) v7c8
----------------------------------

Begin block 0x7cd
prev = {'0x7ac'}, next = {}
----------------------------------
Block 0x7cd
0x7cd: v7cd(0x0) = CONST 
0x7d0: REVERT v7cd(0x0) v7cd(0x0)
----------------------------------

Begin block 0x7d1
prev = {'0x7ac'}, next = {'0x7f7', '0x7f3'}
----------------------------------
Block 0x7d1
0x7d2: v7d2(0x1) = CONST 
0x7d4: v7d4(0xa0) = CONST 
0x7d6: v7d6(0x2) = CONST 
0x7d8: v7d8(0x10000000000000000000000000000000000000000) = EXP v7d6(0x2) v7d4(0xa0)
0x7d9: v7d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7d8(0x10000000000000000000000000000000000000000) v7d2(0x1)
0x7db: v7db = AND v795arg1 v7d9(0xffffffffffffffffffffffffffffffffffffffff)
0x7dc: v7dc(0x0) = CONST 
0x7e0: MSTORE v7dc(0x0) v7db
0x7e1: v7e1(0x4) = CONST 
0x7e3: v7e3(0x20) = CONST 
0x7e5: MSTORE v7e3(0x20) v7e1(0x4)
0x7e6: v7e6(0x40) = CONST 
0x7e9: v7e9 = SHA3 v7dc(0x0) v7e6(0x40)
0x7ea: v7ea = SLOAD v7e9
0x7ed: v7ed = ADD v7ea v795arg0
0x7ee: v7ee = GT v7ed v7ea
0x7ef: v7ef(0x7f7) = CONST 
0x7f2: JUMPI v7ef(0x7f7) v7ee
----------------------------------

Begin block 0x7f3
prev = {'0x7d1'}, next = {}
----------------------------------
Block 0x7f3
0x7f3: v7f3(0x0) = CONST 
0x7f6: REVERT v7f3(0x0) v7f3(0x0)
----------------------------------

Begin block 0x7f7
prev = {'0x7d1'}, next = {'0x895', '0x896'}
----------------------------------
Block 0x7f7
0x7f9: v7f9(0x1) = CONST 
0x7fb: v7fb(0xa0) = CONST 
0x7fd: v7fd(0x2) = CONST 
0x7ff: v7ff(0x10000000000000000000000000000000000000000) = EXP v7fd(0x2) v7fb(0xa0)
0x800: v800(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ff(0x10000000000000000000000000000000000000000) v7f9(0x1)
0x803: v803 = AND v795arg1 v800(0xffffffffffffffffffffffffffffffffffffffff)
0x804: v804(0x0) = CONST 
0x808: MSTORE v804(0x0) v803
0x809: v809(0x4) = CONST 
0x80b: v80b(0x20) = CONST 
0x80f: MSTORE v80b(0x20) v809(0x4)
0x810: v810(0x40) = CONST 
0x814: v814 = SHA3 v804(0x0) v810(0x40)
0x816: v816 = SLOAD v814
0x819: v819 = AND v795arg2 v800(0xffffffffffffffffffffffffffffffffffffffff)
0x81c: MSTORE v804(0x0) v819
0x81f: v81f = SHA3 v804(0x0) v810(0x40)
0x821: v821 = SLOAD v81f
0x824: v824 = SUB v821 v795arg0
0x827: SSTORE v81f v824
0x82b: MSTORE v804(0x0) v803
0x82d: v82d = SLOAD v814
0x82f: v82f = ADD v795arg0 v82d
0x832: SSTORE v814 v82f
0x834: v834 = MLOAD v810(0x40)
0x837: MSTORE v834 v795arg0
0x839: v839 = MLOAD v810(0x40)
0x83d: v83d = ADD v816 v821
0x840: v840(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x865: v865 = SUB v834 v839
0x868: v868 = ADD v80b(0x20) v865
0x86a: LOG3 v839 v868 v840(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v819 v803
0x86b: v86b(0x1) = CONST 
0x86d: v86d(0xa0) = CONST 
0x86f: v86f(0x2) = CONST 
0x871: v871(0x10000000000000000000000000000000000000000) = EXP v86f(0x2) v86d(0xa0)
0x872: v872(0xffffffffffffffffffffffffffffffffffffffff) = SUB v871(0x10000000000000000000000000000000000000000) v86b(0x1)
0x875: v875 = AND v795arg1 v872(0xffffffffffffffffffffffffffffffffffffffff)
0x876: v876(0x0) = CONST 
0x87a: MSTORE v876(0x0) v875
0x87b: v87b(0x4) = CONST 
0x87d: v87d(0x20) = CONST 
0x87f: MSTORE v87d(0x20) v87b(0x4)
0x880: v880(0x40) = CONST 
0x884: v884 = SHA3 v876(0x0) v880(0x40)
0x885: v885 = SLOAD v884
0x888: v888 = AND v795arg2 v872(0xffffffffffffffffffffffffffffffffffffffff)
0x88a: MSTORE v876(0x0) v888
0x88c: v88c = SHA3 v876(0x0) v880(0x40)
0x88d: v88d = SLOAD v88c
0x88e: v88e = ADD v88d v885
0x890: v890 = EQ v83d v88e
0x891: v891(0x896) = CONST 
0x894: JUMPI v891(0x896) v890
----------------------------------

Begin block 0x895
prev = {'0x7f7'}, next = {}
----------------------------------
Block 0x895
0x895: THROW 
----------------------------------

Begin block 0x896
prev = {'0x7f7'}, next = {}
----------------------------------
Block 0x896
0x89b: RETURNPRIVATE v795arg3
----------------------------------

Begin block 0x8e2
prev = {'0xae', '0x0'}, next = {}
----------------------------------
Block 0x8e2
0x8e3: v8e3(0xb9) = CONST 
0x8e4: CALLPRIVATE v8e3(0xb9)
----------------------------------

Begin block 0x8e5
prev = {'0xd'}, next = {}
----------------------------------
Block 0x8e5
0x8e6: v8e6(0xbe) = CONST 
0x8e7: CALLPRIVATE v8e6(0xbe)
----------------------------------

Begin block 0x8e8
prev = {'0x40'}, next = {}
----------------------------------
Block 0x8e8
0x8e9: v8e9(0x148) = CONST 
0x8ea: CALLPRIVATE v8e9(0x148)
----------------------------------

Begin block 0x8eb
prev = {'0x4b'}, next = {}
----------------------------------
Block 0x8eb
0x8ec: v8ec(0x180) = CONST 
0x8ed: CALLPRIVATE v8ec(0x180)
----------------------------------

Begin block 0x8ee
prev = {'0x56'}, next = {}
----------------------------------
Block 0x8ee
0x8ef: v8ef(0x1a7) = CONST 
0x8f0: CALLPRIVATE v8ef(0x1a7)
----------------------------------

Begin block 0x8f1
prev = {'0x61'}, next = {}
----------------------------------
Block 0x8f1
0x8f2: v8f2(0x1d1) = CONST 
0x8f3: CALLPRIVATE v8f2(0x1d1)
----------------------------------

Begin block 0x8f4
prev = {'0x6c'}, next = {}
----------------------------------
Block 0x8f4
0x8f5: v8f5(0x1fc) = CONST 
0x8f6: CALLPRIVATE v8f5(0x1fc)
----------------------------------

Begin block 0x8f7
prev = {'0x77'}, next = {}
----------------------------------
Block 0x8f7
0x8f8: v8f8(0x214) = CONST 
0x8f9: CALLPRIVATE v8f8(0x214)
----------------------------------

Begin block 0x8fa
prev = {'0x82'}, next = {}
----------------------------------
Block 0x8fa
0x8fb: v8fb(0x235) = CONST 
0x8fc: CALLPRIVATE v8fb(0x235)
----------------------------------

Begin block 0x8fd
prev = {'0x8d'}, next = {}
----------------------------------
Block 0x8fd
0x8fe: v8fe(0x259) = CONST 
0x8ff: CALLPRIVATE v8fe(0x259)
----------------------------------

Begin block 0x900
prev = {'0x98'}, next = {}
----------------------------------
Block 0x900
0x901: v901(0x26e) = CONST 
0x902: CALLPRIVATE v901(0x26e)
----------------------------------

Begin block 0x903
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x903
0x904: v904(0x292) = CONST 
0x905: CALLPRIVATE v904(0x292)
----------------------------------

Begin block 0x906
prev = {'0xae'}, next = {}
----------------------------------
Block 0x906
0x907: v907(0x2fb) = CONST 
0x908: CALLPRIVATE v907(0x2fb)
----------------------------------
