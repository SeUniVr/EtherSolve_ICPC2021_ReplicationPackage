
Begin block 0x0
prev = {}, next = {'0xc4a', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xc32: vc32(0xc4a) = CONST 
0xc33: JUMPI vc32(0xc4a) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xc4d', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0xc34: vc34(0xc4d) = CONST 
0xc35: JUMPI vc34(0xc4d) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0xc50', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0xc36: vc36(0xc50) = CONST 
0xc37: JUMPI vc36(0xc50) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0xc53'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0xc38: vc38(0xc53) = CONST 
0xc39: JUMPI vc38(0xc53) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x62', '0xc56'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0xc3a: vc3a(0xc56) = CONST 
0xc3b: JUMPI vc3a(0xc56) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0xc59'}
----------------------------------
Block 0x62
0x63: v63(0x27e235e3) = CONST 
0x68: v68 = EQ v63(0x27e235e3) v35
0xc3c: vc3c(0xc59) = CONST 
0xc3d: JUMPI vc3c(0xc59) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x78', '0xc5c'}
----------------------------------
Block 0x6d
0x6e: v6e(0x313ce567) = CONST 
0x73: v73 = EQ v6e(0x313ce567) v35
0xc3e: vc3e(0xc5c) = CONST 
0xc3f: JUMPI vc3e(0xc5c) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0xc5f', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x5c658165) = CONST 
0x7e: v7e = EQ v79(0x5c658165) v35
0xc40: vc40(0xc5f) = CONST 
0xc41: JUMPI vc40(0xc5f) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0xc62', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x70a08231) = CONST 
0x89: v89 = EQ v84(0x70a08231) v35
0xc42: vc42(0xc62) = CONST 
0xc43: JUMPI vc42(0xc62) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0xc65', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x95d89b41) = CONST 
0x94: v94 = EQ v8f(0x95d89b41) v35
0xc44: vc44(0xc65) = CONST 
0xc45: JUMPI vc44(0xc65) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xc68', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0xa9059cbb) = CONST 
0x9f: v9f = EQ v9a(0xa9059cbb) v35
0xc46: vc46(0xc68) = CONST 
0xc47: JUMPI vc46(0xc68) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xc6b', '0xc4a'}
----------------------------------
Block 0xa4
0xa5: va5(0xdd62ed3e) = CONST 
0xaa: vaa = EQ va5(0xdd62ed3e) v35
0xc48: vc48(0xc6b) = CONST 
0xc49: JUMPI vc48(0xc6b) vaa
----------------------------------

Begin block 0xaf
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xaf
0xb0: vb0(0x0) = CONST 
0xb3: REVERT vb0(0x0) vb0(0x0)
----------------------------------

Begin block 0xb4
prev = {}, next = {'0xbb', '0xbf'}
----------------------------------
function name()()
Block 0xb4
0xb5: vb5 = CALLVALUE 
0xb6: vb6 = ISZERO vb5
0xb7: vb7(0xbf) = CONST 
0xba: JUMPI vb7(0xbf) vb6
----------------------------------

Begin block 0xbb
prev = {'0xb4'}, next = {}
----------------------------------
Block 0xbb
0xbb: vbb(0x0) = CONST 
0xbe: REVERT vbb(0x0) vbb(0x0)
----------------------------------

Begin block 0xbf
prev = {'0xb4'}, next = {'0x4c7'}
----------------------------------
Block 0xbf
0xc0: vc0(0xc7) = CONST 
0xc3: vc3(0x4c7) = CONST 
0xc6: JUMP vc3(0x4c7)
----------------------------------

Begin block 0xc7
prev = {'0x55d'}, next = {'0xec'}
----------------------------------
Block 0xc7
0xc8: vc8(0x40) = CONST 
0xca: vca = MLOAD vc8(0x40)
0xcd: vcd(0x20) = CONST 
0xcf: vcf = ADD vcd(0x20) vca
0xd2: vd2 = SUB vcf vca
0xd4: MSTORE vca vd2
0xd8: vd8 = MLOAD v4ec
0xda: MSTORE vcf vd8
0xdb: vdb(0x20) = CONST 
0xdd: vdd = ADD vdb(0x20) vcf
0xe1: ve1 = MLOAD v4ec
0xe3: ve3(0x20) = CONST 
0xe5: ve5 = ADD ve3(0x20) v4ec
0xea: vea(0x0) = CONST 
----------------------------------

Begin block 0xec
prev = {'0xf5', '0xc7'}, next = {'0xf5', '0x107'}
----------------------------------
Block 0xec
0xec_0x0: vec_0 = PHI vea(0x0) v100
0xef: vef = LT vec_0 ve1
0xf0: vf0 = ISZERO vef
0xf1: vf1(0x107) = CONST 
0xf4: JUMPI vf1(0x107) vf0
----------------------------------

Begin block 0xf5
prev = {'0xec'}, next = {'0xec'}
----------------------------------
Block 0xf5
0xf5_0x0: vf5_0 = PHI vea(0x0) v100
0xf7: vf7 = ADD ve5 vf5_0
0xf8: vf8 = MLOAD vf7
0xfb: vfb = ADD vdd vf5_0
0xfc: MSTORE vfb vf8
0xfd: vfd(0x20) = CONST 
0x100: v100 = ADD vf5_0 vfd(0x20)
0x103: v103(0xec) = CONST 
0x106: JUMP v103(0xec)
----------------------------------

Begin block 0x107
prev = {'0xec'}, next = {'0x11b', '0x134'}
----------------------------------
Block 0x107
0x110: v110 = ADD ve1 vdd
0x112: v112(0x1f) = CONST 
0x114: v114 = AND v112(0x1f) ve1
0x116: v116 = ISZERO v114
0x117: v117(0x134) = CONST 
0x11a: JUMPI v117(0x134) v116
----------------------------------

Begin block 0x11b
prev = {'0x107'}, next = {'0x134'}
----------------------------------
Block 0x11b
0x11d: v11d = SUB v110 v114
0x11f: v11f = MLOAD v11d
0x120: v120(0x1) = CONST 
0x123: v123(0x20) = CONST 
0x125: v125 = SUB v123(0x20) v114
0x126: v126(0x100) = CONST 
0x129: v129 = EXP v126(0x100) v125
0x12a: v12a = SUB v129 v120(0x1)
0x12b: v12b = NOT v12a
0x12c: v12c = AND v12b v11f
0x12e: MSTORE v11d v12c
0x12f: v12f(0x20) = CONST 
0x131: v131 = ADD v12f(0x20) v11d
----------------------------------

Begin block 0x134
prev = {'0x107', '0x11b'}, next = {}
----------------------------------
Block 0x134
0x134_0x1: v134_1 = PHI v110 v131
0x13a: v13a(0x40) = CONST 
0x13c: v13c = MLOAD v13a(0x40)
0x13f: v13f = SUB v134_1 v13c
0x141: RETURN v13c v13f
----------------------------------

Begin block 0x142
prev = {}, next = {'0x149', '0x14d'}
----------------------------------
function approve(address,uint256)()
Block 0x142
0x143: v143 = CALLVALUE 
0x144: v144 = ISZERO v143
0x145: v145(0x14d) = CONST 
0x148: JUMPI v145(0x14d) v144
----------------------------------

Begin block 0x149
prev = {'0x142'}, next = {}
----------------------------------
Block 0x149
0x149: v149(0x0) = CONST 
0x14c: REVERT v149(0x0) v149(0x0)
----------------------------------

Begin block 0x14d
prev = {'0x142'}, next = {'0x565'}
----------------------------------
Block 0x14d
0x14e: v14e(0x182) = CONST 
0x151: v151(0x4) = CONST 
0x155: v155 = CALLDATALOAD v151(0x4)
0x156: v156(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16b: v16b = AND v156(0xffffffffffffffffffffffffffffffffffffffff) v155
0x16d: v16d(0x20) = CONST 
0x16f: v16f(0x24) = ADD v16d(0x20) v151(0x4)
0x174: v174 = CALLDATALOAD v16f(0x24)
0x176: v176(0x20) = CONST 
0x178: v178(0x44) = ADD v176(0x20) v16f(0x24)
0x17e: v17e(0x565) = CONST 
0x181: JUMP v17e(0x565)
----------------------------------

Begin block 0x182
prev = {'0x565'}, next = {}
----------------------------------
Block 0x182
0x183: v183(0x40) = CONST 
0x185: v185 = MLOAD v183(0x40)
0x188: v188 = ISZERO v64e(0x1)
0x189: v189 = ISZERO v188
0x18a: v18a = ISZERO v189
0x18b: v18b = ISZERO v18a
0x18d: MSTORE v185 v18b
0x18e: v18e(0x20) = CONST 
0x190: v190 = ADD v18e(0x20) v185
0x194: v194(0x40) = CONST 
0x196: v196 = MLOAD v194(0x40)
0x199: v199 = SUB v190 v196
0x19b: RETURN v196 v199
----------------------------------

Begin block 0x19c
prev = {}, next = {'0x1a3', '0x1a7'}
----------------------------------
function totalSupply()()
Block 0x19c
0x19d: v19d = CALLVALUE 
0x19e: v19e = ISZERO v19d
0x19f: v19f(0x1a7) = CONST 
0x1a2: JUMPI v19f(0x1a7) v19e
----------------------------------

Begin block 0x1a3
prev = {'0x19c'}, next = {}
----------------------------------
Block 0x1a3
0x1a3: v1a3(0x0) = CONST 
0x1a6: REVERT v1a3(0x0) v1a3(0x0)
----------------------------------

Begin block 0x1a7
prev = {'0x19c'}, next = {'0x657'}
----------------------------------
Block 0x1a7
0x1a8: v1a8(0x1af) = CONST 
0x1ab: v1ab(0x657) = CONST 
0x1ae: JUMP v1ab(0x657)
----------------------------------

Begin block 0x1af
prev = {'0x657'}, next = {}
----------------------------------
Block 0x1af
0x1b0: v1b0(0x40) = CONST 
0x1b2: v1b2 = MLOAD v1b0(0x40)
0x1b6: MSTORE v1b2 v65a
0x1b7: v1b7(0x20) = CONST 
0x1b9: v1b9 = ADD v1b7(0x20) v1b2
0x1bd: v1bd(0x40) = CONST 
0x1bf: v1bf = MLOAD v1bd(0x40)
0x1c2: v1c2 = SUB v1b9 v1bf
0x1c4: RETURN v1bf v1c2
----------------------------------

Begin block 0x1c5
prev = {}, next = {'0x1d0', '0x1cc'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1c5
0x1c6: v1c6 = CALLVALUE 
0x1c7: v1c7 = ISZERO v1c6
0x1c8: v1c8(0x1d0) = CONST 
0x1cb: JUMPI v1c8(0x1d0) v1c7
----------------------------------

Begin block 0x1cc
prev = {'0x1c5'}, next = {}
----------------------------------
Block 0x1cc
0x1cc: v1cc(0x0) = CONST 
0x1cf: REVERT v1cc(0x0) v1cc(0x0)
----------------------------------

Begin block 0x1d0
prev = {'0x1c5'}, next = {'0x65d'}
----------------------------------
Block 0x1d0
0x1d1: v1d1(0x224) = CONST 
0x1d4: v1d4(0x4) = CONST 
0x1d8: v1d8 = CALLDATALOAD v1d4(0x4)
0x1d9: v1d9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1ee: v1ee = AND v1d9(0xffffffffffffffffffffffffffffffffffffffff) v1d8
0x1f0: v1f0(0x20) = CONST 
0x1f2: v1f2(0x24) = ADD v1f0(0x20) v1d4(0x4)
0x1f7: v1f7 = CALLDATALOAD v1f2(0x24)
0x1f8: v1f8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x20d: v20d = AND v1f8(0xffffffffffffffffffffffffffffffffffffffff) v1f7
0x20f: v20f(0x20) = CONST 
0x211: v211(0x44) = ADD v20f(0x20) v1f2(0x24)
0x216: v216 = CALLDATALOAD v211(0x44)
0x218: v218(0x20) = CONST 
0x21a: v21a(0x64) = ADD v218(0x20) v211(0x44)
0x220: v220(0x65d) = CONST 
0x223: JUMP v220(0x65d)
----------------------------------

Begin block 0x224
prev = {'0x886'}, next = {}
----------------------------------
Block 0x224
0x225: v225(0x40) = CONST 
0x227: v227 = MLOAD v225(0x40)
0x22a: v22a = ISZERO v8ec(0x1)
0x22b: v22b = ISZERO v22a
0x22c: v22c = ISZERO v22b
0x22d: v22d = ISZERO v22c
0x22f: MSTORE v227 v22d
0x230: v230(0x20) = CONST 
0x232: v232 = ADD v230(0x20) v227
0x236: v236(0x40) = CONST 
0x238: v238 = MLOAD v236(0x40)
0x23b: v23b = SUB v232 v238
0x23d: RETURN v238 v23b
----------------------------------

Begin block 0x23e
prev = {}, next = {'0x245', '0x249'}
----------------------------------
function balances(address)()
Block 0x23e
0x23f: v23f = CALLVALUE 
0x240: v240 = ISZERO v23f
0x241: v241(0x249) = CONST 
0x244: JUMPI v241(0x249) v240
----------------------------------

Begin block 0x245
prev = {'0x23e'}, next = {}
----------------------------------
Block 0x245
0x245: v245(0x0) = CONST 
0x248: REVERT v245(0x0) v245(0x0)
----------------------------------

Begin block 0x249
prev = {'0x23e'}, next = {'0x8f7'}
----------------------------------
Block 0x249
0x24a: v24a(0x275) = CONST 
0x24d: v24d(0x4) = CONST 
0x251: v251 = CALLDATALOAD v24d(0x4)
0x252: v252(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x267: v267 = AND v252(0xffffffffffffffffffffffffffffffffffffffff) v251
0x269: v269(0x20) = CONST 
0x26b: v26b(0x24) = ADD v269(0x20) v24d(0x4)
0x271: v271(0x8f7) = CONST 
0x274: JUMP v271(0x8f7)
----------------------------------

Begin block 0x275
prev = {'0x8f7'}, next = {}
----------------------------------
Block 0x275
0x276: v276(0x40) = CONST 
0x278: v278 = MLOAD v276(0x40)
0x27c: MSTORE v278 v90c
0x27d: v27d(0x20) = CONST 
0x27f: v27f = ADD v27d(0x20) v278
0x283: v283(0x40) = CONST 
0x285: v285 = MLOAD v283(0x40)
0x288: v288 = SUB v27f v285
0x28a: RETURN v285 v288
----------------------------------

Begin block 0x28b
prev = {}, next = {'0x296', '0x292'}
----------------------------------
function decimals()()
Block 0x28b
0x28c: v28c = CALLVALUE 
0x28d: v28d = ISZERO v28c
0x28e: v28e(0x296) = CONST 
0x291: JUMPI v28e(0x296) v28d
----------------------------------

Begin block 0x292
prev = {'0x28b'}, next = {}
----------------------------------
Block 0x292
0x292: v292(0x0) = CONST 
0x295: REVERT v292(0x0) v292(0x0)
----------------------------------

Begin block 0x296
prev = {'0x28b'}, next = {'0x90f'}
----------------------------------
Block 0x296
0x297: v297(0x29e) = CONST 
0x29a: v29a(0x90f) = CONST 
0x29d: JUMP v29a(0x90f)
----------------------------------

Begin block 0x29e
prev = {'0x90f'}, next = {}
----------------------------------
Block 0x29e
0x29f: v29f(0x40) = CONST 
0x2a1: v2a1 = MLOAD v29f(0x40)
0x2a4: v2a4(0xff) = CONST 
0x2a6: v2a6 = AND v2a4(0xff) v91f
0x2a7: v2a7(0xff) = CONST 
0x2a9: v2a9 = AND v2a7(0xff) v2a6
0x2ab: MSTORE v2a1 v2a9
0x2ac: v2ac(0x20) = CONST 
0x2ae: v2ae = ADD v2ac(0x20) v2a1
0x2b2: v2b2(0x40) = CONST 
0x2b4: v2b4 = MLOAD v2b2(0x40)
0x2b7: v2b7 = SUB v2ae v2b4
0x2b9: RETURN v2b4 v2b7
----------------------------------

Begin block 0x2ba
prev = {}, next = {'0x2c5', '0x2c1'}
----------------------------------
function allowed(address,address)()
Block 0x2ba
0x2bb: v2bb = CALLVALUE 
0x2bc: v2bc = ISZERO v2bb
0x2bd: v2bd(0x2c5) = CONST 
0x2c0: JUMPI v2bd(0x2c5) v2bc
----------------------------------

Begin block 0x2c1
prev = {'0x2ba'}, next = {}
----------------------------------
Block 0x2c1
0x2c1: v2c1(0x0) = CONST 
0x2c4: REVERT v2c1(0x0) v2c1(0x0)
----------------------------------

Begin block 0x2c5
prev = {'0x2ba'}, next = {'0x922'}
----------------------------------
Block 0x2c5
0x2c6: v2c6(0x310) = CONST 
0x2c9: v2c9(0x4) = CONST 
0x2cd: v2cd = CALLDATALOAD v2c9(0x4)
0x2ce: v2ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2e3: v2e3 = AND v2ce(0xffffffffffffffffffffffffffffffffffffffff) v2cd
0x2e5: v2e5(0x20) = CONST 
0x2e7: v2e7(0x24) = ADD v2e5(0x20) v2c9(0x4)
0x2ec: v2ec = CALLDATALOAD v2e7(0x24)
0x2ed: v2ed(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x302: v302 = AND v2ed(0xffffffffffffffffffffffffffffffffffffffff) v2ec
0x304: v304(0x20) = CONST 
0x306: v306(0x44) = ADD v304(0x20) v2e7(0x24)
0x30c: v30c(0x922) = CONST 
0x30f: JUMP v30c(0x922)
----------------------------------

Begin block 0x310
prev = {'0x922'}, next = {}
----------------------------------
Block 0x310
0x311: v311(0x40) = CONST 
0x313: v313 = MLOAD v311(0x40)
0x317: MSTORE v313 v944
0x318: v318(0x20) = CONST 
0x31a: v31a = ADD v318(0x20) v313
0x31e: v31e(0x40) = CONST 
0x320: v320 = MLOAD v31e(0x40)
0x323: v323 = SUB v31a v320
0x325: RETURN v320 v323
----------------------------------

Begin block 0x326
prev = {}, next = {'0x32d', '0x331'}
----------------------------------
function balanceOf(address)()
Block 0x326
0x327: v327 = CALLVALUE 
0x328: v328 = ISZERO v327
0x329: v329(0x331) = CONST 
0x32c: JUMPI v329(0x331) v328
----------------------------------

Begin block 0x32d
prev = {'0x326'}, next = {}
----------------------------------
Block 0x32d
0x32d: v32d(0x0) = CONST 
0x330: REVERT v32d(0x0) v32d(0x0)
----------------------------------

Begin block 0x331
prev = {'0x326'}, next = {'0x947'}
----------------------------------
Block 0x331
0x332: v332(0x35d) = CONST 
0x335: v335(0x4) = CONST 
0x339: v339 = CALLDATALOAD v335(0x4)
0x33a: v33a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x34f: v34f = AND v33a(0xffffffffffffffffffffffffffffffffffffffff) v339
0x351: v351(0x20) = CONST 
0x353: v353(0x24) = ADD v351(0x20) v335(0x4)
0x359: v359(0x947) = CONST 
0x35c: JUMP v359(0x947)
----------------------------------

Begin block 0x35d
prev = {'0x947'}, next = {}
----------------------------------
Block 0x35d
0x35e: v35e(0x40) = CONST 
0x360: v360 = MLOAD v35e(0x40)
0x364: MSTORE v360 v989
0x365: v365(0x20) = CONST 
0x367: v367 = ADD v365(0x20) v360
0x36b: v36b(0x40) = CONST 
0x36d: v36d = MLOAD v36b(0x40)
0x370: v370 = SUB v367 v36d
0x372: RETURN v36d v370
----------------------------------

Begin block 0x373
prev = {}, next = {'0x37a', '0x37e'}
----------------------------------
function symbol()()
Block 0x373
0x374: v374 = CALLVALUE 
0x375: v375 = ISZERO v374
0x376: v376(0x37e) = CONST 
0x379: JUMPI v376(0x37e) v375
----------------------------------

Begin block 0x37a
prev = {'0x373'}, next = {}
----------------------------------
Block 0x37a
0x37a: v37a(0x0) = CONST 
0x37d: REVERT v37a(0x0) v37a(0x0)
----------------------------------

Begin block 0x37e
prev = {'0x373'}, next = {'0x990'}
----------------------------------
Block 0x37e
0x37f: v37f(0x386) = CONST 
0x382: v382(0x990) = CONST 
0x385: JUMP v382(0x990)
----------------------------------

Begin block 0x386
prev = {'0xa26'}, next = {'0x3ab'}
----------------------------------
Block 0x386
0x387: v387(0x40) = CONST 
0x389: v389 = MLOAD v387(0x40)
0x38c: v38c(0x20) = CONST 
0x38e: v38e = ADD v38c(0x20) v389
0x391: v391 = SUB v38e v389
0x393: MSTORE v389 v391
0x397: v397 = MLOAD v9b5
0x399: MSTORE v38e v397
0x39a: v39a(0x20) = CONST 
0x39c: v39c = ADD v39a(0x20) v38e
0x3a0: v3a0 = MLOAD v9b5
0x3a2: v3a2(0x20) = CONST 
0x3a4: v3a4 = ADD v3a2(0x20) v9b5
0x3a9: v3a9(0x0) = CONST 
----------------------------------

Begin block 0x3ab
prev = {'0x3b4', '0x386'}, next = {'0x3b4', '0x3c6'}
----------------------------------
Block 0x3ab
0x3ab_0x0: v3ab_0 = PHI v3a9(0x0) v3bf
0x3ae: v3ae = LT v3ab_0 v3a0
0x3af: v3af = ISZERO v3ae
0x3b0: v3b0(0x3c6) = CONST 
0x3b3: JUMPI v3b0(0x3c6) v3af
----------------------------------

Begin block 0x3b4
prev = {'0x3ab'}, next = {'0x3ab'}
----------------------------------
Block 0x3b4
0x3b4_0x0: v3b4_0 = PHI v3a9(0x0) v3bf
0x3b6: v3b6 = ADD v3a4 v3b4_0
0x3b7: v3b7 = MLOAD v3b6
0x3ba: v3ba = ADD v39c v3b4_0
0x3bb: MSTORE v3ba v3b7
0x3bc: v3bc(0x20) = CONST 
0x3bf: v3bf = ADD v3b4_0 v3bc(0x20)
0x3c2: v3c2(0x3ab) = CONST 
0x3c5: JUMP v3c2(0x3ab)
----------------------------------

Begin block 0x3c6
prev = {'0x3ab'}, next = {'0x3da', '0x3f3'}
----------------------------------
Block 0x3c6
0x3cf: v3cf = ADD v3a0 v39c
0x3d1: v3d1(0x1f) = CONST 
0x3d3: v3d3 = AND v3d1(0x1f) v3a0
0x3d5: v3d5 = ISZERO v3d3
0x3d6: v3d6(0x3f3) = CONST 
0x3d9: JUMPI v3d6(0x3f3) v3d5
----------------------------------

Begin block 0x3da
prev = {'0x3c6'}, next = {'0x3f3'}
----------------------------------
Block 0x3da
0x3dc: v3dc = SUB v3cf v3d3
0x3de: v3de = MLOAD v3dc
0x3df: v3df(0x1) = CONST 
0x3e2: v3e2(0x20) = CONST 
0x3e4: v3e4 = SUB v3e2(0x20) v3d3
0x3e5: v3e5(0x100) = CONST 
0x3e8: v3e8 = EXP v3e5(0x100) v3e4
0x3e9: v3e9 = SUB v3e8 v3df(0x1)
0x3ea: v3ea = NOT v3e9
0x3eb: v3eb = AND v3ea v3de
0x3ed: MSTORE v3dc v3eb
0x3ee: v3ee(0x20) = CONST 
0x3f0: v3f0 = ADD v3ee(0x20) v3dc
----------------------------------

Begin block 0x3f3
prev = {'0x3da', '0x3c6'}, next = {}
----------------------------------
Block 0x3f3
0x3f3_0x1: v3f3_1 = PHI v3cf v3f0
0x3f9: v3f9(0x40) = CONST 
0x3fb: v3fb = MLOAD v3f9(0x40)
0x3fe: v3fe = SUB v3f3_1 v3fb
0x400: RETURN v3fb v3fe
----------------------------------

Begin block 0x401
prev = {}, next = {'0x40c', '0x408'}
----------------------------------
function transfer(address,uint256)()
Block 0x401
0x402: v402 = CALLVALUE 
0x403: v403 = ISZERO v402
0x404: v404(0x40c) = CONST 
0x407: JUMPI v404(0x40c) v403
----------------------------------

Begin block 0x408
prev = {'0x401'}, next = {}
----------------------------------
Block 0x408
0x408: v408(0x0) = CONST 
0x40b: REVERT v408(0x0) v408(0x0)
----------------------------------

Begin block 0x40c
prev = {'0x401'}, next = {'0xa2e'}
----------------------------------
Block 0x40c
0x40d: v40d(0x441) = CONST 
0x410: v410(0x4) = CONST 
0x414: v414 = CALLDATALOAD v410(0x4)
0x415: v415(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x42a: v42a = AND v415(0xffffffffffffffffffffffffffffffffffffffff) v414
0x42c: v42c(0x20) = CONST 
0x42e: v42e(0x24) = ADD v42c(0x20) v410(0x4)
0x433: v433 = CALLDATALOAD v42e(0x24)
0x435: v435(0x20) = CONST 
0x437: v437(0x44) = ADD v435(0x20) v42e(0x24)
0x43d: v43d(0xa2e) = CONST 
0x440: JUMP v43d(0xa2e)
----------------------------------

Begin block 0x441
prev = {'0xa7e'}, next = {}
----------------------------------
Block 0x441
0x442: v442(0x40) = CONST 
0x444: v444 = MLOAD v442(0x40)
0x447: v447 = ISZERO vb7e(0x1)
0x448: v448 = ISZERO v447
0x449: v449 = ISZERO v448
0x44a: v44a = ISZERO v449
0x44c: MSTORE v444 v44a
0x44d: v44d(0x20) = CONST 
0x44f: v44f = ADD v44d(0x20) v444
0x453: v453(0x40) = CONST 
0x455: v455 = MLOAD v453(0x40)
0x458: v458 = SUB v44f v455
0x45a: RETURN v455 v458
----------------------------------

Begin block 0x45b
prev = {}, next = {'0x462', '0x466'}
----------------------------------
function allowance(address,address)()
Block 0x45b
0x45c: v45c = CALLVALUE 
0x45d: v45d = ISZERO v45c
0x45e: v45e(0x466) = CONST 
0x461: JUMPI v45e(0x466) v45d
----------------------------------

Begin block 0x462
prev = {'0x45b'}, next = {}
----------------------------------
Block 0x462
0x462: v462(0x0) = CONST 
0x465: REVERT v462(0x0) v462(0x0)
----------------------------------

Begin block 0x466
prev = {'0x45b'}, next = {'0xb87'}
----------------------------------
Block 0x466
0x467: v467(0x4b1) = CONST 
0x46a: v46a(0x4) = CONST 
0x46e: v46e = CALLDATALOAD v46a(0x4)
0x46f: v46f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x484: v484 = AND v46f(0xffffffffffffffffffffffffffffffffffffffff) v46e
0x486: v486(0x20) = CONST 
0x488: v488(0x24) = ADD v486(0x20) v46a(0x4)
0x48d: v48d = CALLDATALOAD v488(0x24)
0x48e: v48e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4a3: v4a3 = AND v48e(0xffffffffffffffffffffffffffffffffffffffff) v48d
0x4a5: v4a5(0x20) = CONST 
0x4a7: v4a7(0x44) = ADD v4a5(0x20) v488(0x24)
0x4ad: v4ad(0xb87) = CONST 
0x4b0: JUMP v4ad(0xb87)
----------------------------------

Begin block 0x4b1
prev = {'0xb87'}, next = {}
----------------------------------
Block 0x4b1
0x4b2: v4b2(0x40) = CONST 
0x4b4: v4b4 = MLOAD v4b2(0x40)
0x4b8: MSTORE v4b4 vc06
0x4b9: v4b9(0x20) = CONST 
0x4bb: v4bb = ADD v4b9(0x20) v4b4
0x4bf: v4bf(0x40) = CONST 
0x4c1: v4c1 = MLOAD v4bf(0x40)
0x4c4: v4c4 = SUB v4bb v4c1
0x4c6: RETURN v4c1 v4c4
----------------------------------

Begin block 0x4c7
prev = {'0xbf'}, next = {'0x55d', '0x517'}
----------------------------------
Block 0x4c7
0x4c8: v4c8(0x3) = CONST 
0x4cb: v4cb = SLOAD v4c8(0x3)
0x4cc: v4cc(0x1) = CONST 
0x4cf: v4cf(0x1) = CONST 
0x4d1: v4d1 = AND v4cf(0x1) v4cb
0x4d2: v4d2 = ISZERO v4d1
0x4d3: v4d3(0x100) = CONST 
0x4d6: v4d6 = MUL v4d3(0x100) v4d2
0x4d7: v4d7 = SUB v4d6 v4cc(0x1)
0x4d8: v4d8 = AND v4d7 v4cb
0x4d9: v4d9(0x2) = CONST 
0x4dc: v4dc = DIV v4d8 v4d9(0x2)
0x4de: v4de(0x1f) = CONST 
0x4e0: v4e0 = ADD v4de(0x1f) v4dc
0x4e1: v4e1(0x20) = CONST 
0x4e5: v4e5 = DIV v4e0 v4e1(0x20)
0x4e6: v4e6 = MUL v4e5 v4e1(0x20)
0x4e7: v4e7(0x20) = CONST 
0x4e9: v4e9 = ADD v4e7(0x20) v4e6
0x4ea: v4ea(0x40) = CONST 
0x4ec: v4ec = MLOAD v4ea(0x40)
0x4ef: v4ef = ADD v4ec v4e9
0x4f0: v4f0(0x40) = CONST 
0x4f2: MSTORE v4f0(0x40) v4ef
0x4f9: MSTORE v4ec v4dc
0x4fa: v4fa(0x20) = CONST 
0x4fc: v4fc = ADD v4fa(0x20) v4ec
0x4ff: v4ff = SLOAD v4c8(0x3)
0x500: v500(0x1) = CONST 
0x503: v503(0x1) = CONST 
0x505: v505 = AND v503(0x1) v4ff
0x506: v506 = ISZERO v505
0x507: v507(0x100) = CONST 
0x50a: v50a = MUL v507(0x100) v506
0x50b: v50b = SUB v50a v500(0x1)
0x50c: v50c = AND v50b v4ff
0x50d: v50d(0x2) = CONST 
0x510: v510 = DIV v50c v50d(0x2)
0x512: v512 = ISZERO v510
0x513: v513(0x55d) = CONST 
0x516: JUMPI v513(0x55d) v512
----------------------------------

Begin block 0x517
prev = {'0x4c7'}, next = {'0x51f', '0x532'}
----------------------------------
Block 0x517
0x518: v518(0x1f) = CONST 
0x51a: v51a = LT v518(0x1f) v510
0x51b: v51b(0x532) = CONST 
0x51e: JUMPI v51b(0x532) v51a
----------------------------------

Begin block 0x51f
prev = {'0x517'}, next = {'0x55d'}
----------------------------------
Block 0x51f
0x51f: v51f(0x100) = CONST 
0x524: v524 = SLOAD v4c8(0x3)
0x525: v525 = DIV v524 v51f(0x100)
0x526: v526 = MUL v525 v51f(0x100)
0x528: MSTORE v4fc v526
0x52a: v52a(0x20) = CONST 
0x52c: v52c = ADD v52a(0x20) v4fc
0x52e: v52e(0x55d) = CONST 
0x531: JUMP v52e(0x55d)
----------------------------------

Begin block 0x532
prev = {'0x517'}, next = {'0x540'}
----------------------------------
Block 0x532
0x534: v534 = ADD v4fc v510
0x537: v537(0x0) = CONST 
0x539: MSTORE v537(0x0) v4c8(0x3)
0x53a: v53a(0x20) = CONST 
0x53c: v53c(0x0) = CONST 
0x53e: v53e = SHA3 v53c(0x0) v53a(0x20)
----------------------------------

Begin block 0x540
prev = {'0x540', '0x532'}, next = {'0x540', '0x554'}
----------------------------------
Block 0x540
0x540_0x0: v540_0 = PHI v4fc v54c
0x540_0x1: v540_1 = PHI v53e v548
0x542: v542 = SLOAD v540_1
0x544: MSTORE v540_0 v542
0x546: v546(0x1) = CONST 
0x548: v548 = ADD v546(0x1) v540_1
0x54a: v54a(0x20) = CONST 
0x54c: v54c = ADD v54a(0x20) v540_0
0x54f: v54f = GT v534 v54c
0x550: v550(0x540) = CONST 
0x553: JUMPI v550(0x540) v54f
----------------------------------

Begin block 0x554
prev = {'0x540'}, next = {'0x55d'}
----------------------------------
Block 0x554
0x556: v556 = SUB v54c v534
0x557: v557(0x1f) = CONST 
0x559: v559 = AND v557(0x1f) v556
0x55b: v55b = ADD v534 v559
----------------------------------

Begin block 0x55d
prev = {'0x51f', '0x4c7', '0x554'}, next = {'0xc7'}
----------------------------------
Block 0x55d
0x564: JUMP vc0(0xc7)
----------------------------------

Begin block 0x565
prev = {'0x14d'}, next = {'0x182'}
----------------------------------
Block 0x565
0x566: v566(0x0) = CONST 
0x569: v569(0x2) = CONST 
0x56b: v56b(0x0) = CONST 
0x56d: v56d = CALLER 
0x56e: v56e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x583: v583 = AND v56e(0xffffffffffffffffffffffffffffffffffffffff) v56d
0x584: v584(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x599: v599 = AND v584(0xffffffffffffffffffffffffffffffffffffffff) v583
0x59b: MSTORE v56b(0x0) v599
0x59c: v59c(0x20) = CONST 
0x59e: v59e(0x20) = ADD v59c(0x20) v56b(0x0)
0x5a1: MSTORE v59e(0x20) v569(0x2)
0x5a2: v5a2(0x20) = CONST 
0x5a4: v5a4(0x40) = ADD v5a2(0x20) v59e(0x20)
0x5a5: v5a5(0x0) = CONST 
0x5a7: v5a7 = SHA3 v5a5(0x0) v5a4(0x40)
0x5a8: v5a8(0x0) = CONST 
0x5ab: v5ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5c0: v5c0 = AND v5ab(0xffffffffffffffffffffffffffffffffffffffff) v16b
0x5c1: v5c1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5d6: v5d6 = AND v5c1(0xffffffffffffffffffffffffffffffffffffffff) v5c0
0x5d8: MSTORE v5a8(0x0) v5d6
0x5d9: v5d9(0x20) = CONST 
0x5db: v5db(0x20) = ADD v5d9(0x20) v5a8(0x0)
0x5de: MSTORE v5db(0x20) v5a7
0x5df: v5df(0x20) = CONST 
0x5e1: v5e1(0x40) = ADD v5df(0x20) v5db(0x20)
0x5e2: v5e2(0x0) = CONST 
0x5e4: v5e4 = SHA3 v5e2(0x0) v5e1(0x40)
0x5e7: SSTORE v5e4 v174
0x5ea: v5ea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5ff: v5ff = AND v5ea(0xffffffffffffffffffffffffffffffffffffffff) v16b
0x600: v600 = CALLER 
0x601: v601(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x616: v616 = AND v601(0xffffffffffffffffffffffffffffffffffffffff) v600
0x617: v617(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x639: v639(0x40) = CONST 
0x63b: v63b = MLOAD v639(0x40)
0x63f: MSTORE v63b v174
0x640: v640(0x20) = CONST 
0x642: v642 = ADD v640(0x20) v63b
0x646: v646(0x40) = CONST 
0x648: v648 = MLOAD v646(0x40)
0x64b: v64b = SUB v642 v648
0x64d: LOG3 v648 v64b v617(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v616 v5ff
0x64e: v64e(0x1) = CONST 
0x656: JUMP v14e(0x182)
----------------------------------

Begin block 0x657
prev = {'0x1a7'}, next = {'0x1af'}
----------------------------------
Block 0x657
0x658: v658(0x0) = CONST 
0x65a: v65a = SLOAD v658(0x0)
0x65c: JUMP v1a8(0x1af)
----------------------------------

Begin block 0x65d
prev = {'0x1d0'}, next = {'0x72e', '0x729'}
----------------------------------
Block 0x65d
0x65e: v65e(0x0) = CONST 
0x661: v661(0x2) = CONST 
0x663: v663(0x0) = CONST 
0x666: v666(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x67b: v67b = AND v666(0xffffffffffffffffffffffffffffffffffffffff) v1ee
0x67c: v67c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x691: v691 = AND v67c(0xffffffffffffffffffffffffffffffffffffffff) v67b
0x693: MSTORE v663(0x0) v691
0x694: v694(0x20) = CONST 
0x696: v696(0x20) = ADD v694(0x20) v663(0x0)
0x699: MSTORE v696(0x20) v661(0x2)
0x69a: v69a(0x20) = CONST 
0x69c: v69c(0x40) = ADD v69a(0x20) v696(0x20)
0x69d: v69d(0x0) = CONST 
0x69f: v69f = SHA3 v69d(0x0) v69c(0x40)
0x6a0: v6a0(0x0) = CONST 
0x6a2: v6a2 = CALLER 
0x6a3: v6a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6b8: v6b8 = AND v6a3(0xffffffffffffffffffffffffffffffffffffffff) v6a2
0x6b9: v6b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ce: v6ce = AND v6b9(0xffffffffffffffffffffffffffffffffffffffff) v6b8
0x6d0: MSTORE v6a0(0x0) v6ce
0x6d1: v6d1(0x20) = CONST 
0x6d3: v6d3(0x20) = ADD v6d1(0x20) v6a0(0x0)
0x6d6: MSTORE v6d3(0x20) v69f
0x6d7: v6d7(0x20) = CONST 
0x6d9: v6d9(0x40) = ADD v6d7(0x20) v6d3(0x20)
0x6da: v6da(0x0) = CONST 
0x6dc: v6dc = SHA3 v6da(0x0) v6d9(0x40)
0x6dd: v6dd = SLOAD v6dc
0x6e1: v6e1(0x1) = CONST 
0x6e3: v6e3(0x0) = CONST 
0x6e6: v6e6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6fb: v6fb = AND v6e6(0xffffffffffffffffffffffffffffffffffffffff) v1ee
0x6fc: v6fc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x711: v711 = AND v6fc(0xffffffffffffffffffffffffffffffffffffffff) v6fb
0x713: MSTORE v6e3(0x0) v711
0x714: v714(0x20) = CONST 
0x716: v716(0x20) = ADD v714(0x20) v6e3(0x0)
0x719: MSTORE v716(0x20) v6e1(0x1)
0x71a: v71a(0x20) = CONST 
0x71c: v71c(0x40) = ADD v71a(0x20) v716(0x20)
0x71d: v71d(0x0) = CONST 
0x71f: v71f = SHA3 v71d(0x0) v71c(0x40)
0x720: v720 = SLOAD v71f
0x721: v721 = LT v720 v216
0x722: v722 = ISZERO v721
0x724: v724 = ISZERO v722
0x725: v725(0x72e) = CONST 
0x728: JUMPI v725(0x72e) v724
----------------------------------

Begin block 0x729
prev = {'0x65d'}, next = {'0x72e'}
----------------------------------
Block 0x729
0x72c: v72c = LT v6dd v216
0x72d: v72d = ISZERO v72c
----------------------------------

Begin block 0x72e
prev = {'0x729', '0x65d'}, next = {'0x735', '0x739'}
----------------------------------
Block 0x72e
0x72e_0x0: v72e_0 = PHI v722 v72d
0x72f: v72f = ISZERO v72e_0
0x730: v730 = ISZERO v72f
0x731: v731(0x739) = CONST 
0x734: JUMPI v731(0x739) v730
----------------------------------

Begin block 0x735
prev = {'0x72e'}, next = {}
----------------------------------
Block 0x735
0x735: v735(0x0) = CONST 
0x738: REVERT v735(0x0) v735(0x0)
----------------------------------

Begin block 0x739
prev = {'0x72e'}, next = {'0x7fc', '0x886'}
----------------------------------
Block 0x739
0x73b: v73b(0x1) = CONST 
0x73d: v73d(0x0) = CONST 
0x740: v740(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x755: v755 = AND v740(0xffffffffffffffffffffffffffffffffffffffff) v20d
0x756: v756(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x76b: v76b = AND v756(0xffffffffffffffffffffffffffffffffffffffff) v755
0x76d: MSTORE v73d(0x0) v76b
0x76e: v76e(0x20) = CONST 
0x770: v770(0x20) = ADD v76e(0x20) v73d(0x0)
0x773: MSTORE v770(0x20) v73b(0x1)
0x774: v774(0x20) = CONST 
0x776: v776(0x40) = ADD v774(0x20) v770(0x20)
0x777: v777(0x0) = CONST 
0x779: v779 = SHA3 v777(0x0) v776(0x40)
0x77a: v77a(0x0) = CONST 
0x77e: v77e = SLOAD v779
0x77f: v77f = ADD v77e v216
0x785: SSTORE v779 v77f
0x788: v788(0x1) = CONST 
0x78a: v78a(0x0) = CONST 
0x78d: v78d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a2: v7a2 = AND v78d(0xffffffffffffffffffffffffffffffffffffffff) v1ee
0x7a3: v7a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7b8: v7b8 = AND v7a3(0xffffffffffffffffffffffffffffffffffffffff) v7a2
0x7ba: MSTORE v78a(0x0) v7b8
0x7bb: v7bb(0x20) = CONST 
0x7bd: v7bd(0x20) = ADD v7bb(0x20) v78a(0x0)
0x7c0: MSTORE v7bd(0x20) v788(0x1)
0x7c1: v7c1(0x20) = CONST 
0x7c3: v7c3(0x40) = ADD v7c1(0x20) v7bd(0x20)
0x7c4: v7c4(0x0) = CONST 
0x7c6: v7c6 = SHA3 v7c4(0x0) v7c3(0x40)
0x7c7: v7c7(0x0) = CONST 
0x7cb: v7cb = SLOAD v7c6
0x7cc: v7cc = SUB v7cb v216
0x7d2: SSTORE v7c6 v7cc
0x7d4: v7d4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7f6: v7f6 = LT v6dd v7d4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x7f7: v7f7 = ISZERO v7f6
0x7f8: v7f8(0x886) = CONST 
0x7fb: JUMPI v7f8(0x886) v7f7
----------------------------------

Begin block 0x7fc
prev = {'0x739'}, next = {'0x886'}
----------------------------------
Block 0x7fc
0x7fd: v7fd(0x2) = CONST 
0x7ff: v7ff(0x0) = CONST 
0x802: v802(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x817: v817 = AND v802(0xffffffffffffffffffffffffffffffffffffffff) v1ee
0x818: v818(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82d: v82d = AND v818(0xffffffffffffffffffffffffffffffffffffffff) v817
0x82f: MSTORE v7ff(0x0) v82d
0x830: v830(0x20) = CONST 
0x832: v832(0x20) = ADD v830(0x20) v7ff(0x0)
0x835: MSTORE v832(0x20) v7fd(0x2)
0x836: v836(0x20) = CONST 
0x838: v838(0x40) = ADD v836(0x20) v832(0x20)
0x839: v839(0x0) = CONST 
0x83b: v83b = SHA3 v839(0x0) v838(0x40)
0x83c: v83c(0x0) = CONST 
0x83e: v83e = CALLER 
0x83f: v83f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x854: v854 = AND v83f(0xffffffffffffffffffffffffffffffffffffffff) v83e
0x855: v855(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86a: v86a = AND v855(0xffffffffffffffffffffffffffffffffffffffff) v854
0x86c: MSTORE v83c(0x0) v86a
0x86d: v86d(0x20) = CONST 
0x86f: v86f(0x20) = ADD v86d(0x20) v83c(0x0)
0x872: MSTORE v86f(0x20) v83b
0x873: v873(0x20) = CONST 
0x875: v875(0x40) = ADD v873(0x20) v86f(0x20)
0x876: v876(0x0) = CONST 
0x878: v878 = SHA3 v876(0x0) v875(0x40)
0x879: v879(0x0) = CONST 
0x87d: v87d = SLOAD v878
0x87e: v87e = SUB v87d v216
0x884: SSTORE v878 v87e
----------------------------------

Begin block 0x886
prev = {'0x7fc', '0x739'}, next = {'0x224'}
----------------------------------
Block 0x886
0x888: v888(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x89d: v89d = AND v888(0xffffffffffffffffffffffffffffffffffffffff) v20d
0x89f: v89f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8b4: v8b4 = AND v89f(0xffffffffffffffffffffffffffffffffffffffff) v1ee
0x8b5: v8b5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x8d7: v8d7(0x40) = CONST 
0x8d9: v8d9 = MLOAD v8d7(0x40)
0x8dd: MSTORE v8d9 v216
0x8de: v8de(0x20) = CONST 
0x8e0: v8e0 = ADD v8de(0x20) v8d9
0x8e4: v8e4(0x40) = CONST 
0x8e6: v8e6 = MLOAD v8e4(0x40)
0x8e9: v8e9 = SUB v8e0 v8e6
0x8eb: LOG3 v8e6 v8e9 v8b5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v8b4 v89d
0x8ec: v8ec(0x1) = CONST 
0x8f6: JUMP v1d1(0x224)
----------------------------------

Begin block 0x8f7
prev = {'0x249'}, next = {'0x275'}
----------------------------------
Block 0x8f7
0x8f8: v8f8(0x1) = CONST 
0x8fa: v8fa(0x20) = CONST 
0x8fc: MSTORE v8fa(0x20) v8f8(0x1)
0x8fe: v8fe(0x0) = CONST 
0x900: MSTORE v8fe(0x0) v267
0x901: v901(0x40) = CONST 
0x903: v903(0x0) = CONST 
0x905: v905 = SHA3 v903(0x0) v901(0x40)
0x906: v906(0x0) = CONST 
0x90c: v90c = SLOAD v905
0x90e: JUMP v24a(0x275)
----------------------------------

Begin block 0x90f
prev = {'0x296'}, next = {'0x29e'}
----------------------------------
Block 0x90f
0x910: v910(0x4) = CONST 
0x912: v912(0x0) = CONST 
0x915: v915 = SLOAD v910(0x4)
0x917: v917(0x100) = CONST 
0x91a: v91a(0x1) = EXP v917(0x100) v912(0x0)
0x91c: v91c = DIV v915 v91a(0x1)
0x91d: v91d(0xff) = CONST 
0x91f: v91f = AND v91d(0xff) v91c
0x921: JUMP v297(0x29e)
----------------------------------

Begin block 0x922
prev = {'0x2c5'}, next = {'0x310'}
----------------------------------
Block 0x922
0x923: v923(0x2) = CONST 
0x925: v925(0x20) = CONST 
0x927: MSTORE v925(0x20) v923(0x2)
0x929: v929(0x0) = CONST 
0x92b: MSTORE v929(0x0) v2e3
0x92c: v92c(0x40) = CONST 
0x92e: v92e(0x0) = CONST 
0x930: v930 = SHA3 v92e(0x0) v92c(0x40)
0x931: v931(0x20) = CONST 
0x933: MSTORE v931(0x20) v930
0x935: v935(0x0) = CONST 
0x937: MSTORE v935(0x0) v302
0x938: v938(0x40) = CONST 
0x93a: v93a(0x0) = CONST 
0x93c: v93c = SHA3 v93a(0x0) v938(0x40)
0x93d: v93d(0x0) = CONST 
0x944: v944 = SLOAD v93c
0x946: JUMP v2c6(0x310)
----------------------------------

Begin block 0x947
prev = {'0x331'}, next = {'0x35d'}
----------------------------------
Block 0x947
0x948: v948(0x0) = CONST 
0x94a: v94a(0x1) = CONST 
0x94c: v94c(0x0) = CONST 
0x94f: v94f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x964: v964 = AND v94f(0xffffffffffffffffffffffffffffffffffffffff) v34f
0x965: v965(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x97a: v97a = AND v965(0xffffffffffffffffffffffffffffffffffffffff) v964
0x97c: MSTORE v94c(0x0) v97a
0x97d: v97d(0x20) = CONST 
0x97f: v97f(0x20) = ADD v97d(0x20) v94c(0x0)
0x982: MSTORE v97f(0x20) v94a(0x1)
0x983: v983(0x20) = CONST 
0x985: v985(0x40) = ADD v983(0x20) v97f(0x20)
0x986: v986(0x0) = CONST 
0x988: v988 = SHA3 v986(0x0) v985(0x40)
0x989: v989 = SLOAD v988
0x98f: JUMP v332(0x35d)
----------------------------------

Begin block 0x990
prev = {'0x37e'}, next = {'0xa26', '0x9e0'}
----------------------------------
Block 0x990
0x991: v991(0x5) = CONST 
0x994: v994 = SLOAD v991(0x5)
0x995: v995(0x1) = CONST 
0x998: v998(0x1) = CONST 
0x99a: v99a = AND v998(0x1) v994
0x99b: v99b = ISZERO v99a
0x99c: v99c(0x100) = CONST 
0x99f: v99f = MUL v99c(0x100) v99b
0x9a0: v9a0 = SUB v99f v995(0x1)
0x9a1: v9a1 = AND v9a0 v994
0x9a2: v9a2(0x2) = CONST 
0x9a5: v9a5 = DIV v9a1 v9a2(0x2)
0x9a7: v9a7(0x1f) = CONST 
0x9a9: v9a9 = ADD v9a7(0x1f) v9a5
0x9aa: v9aa(0x20) = CONST 
0x9ae: v9ae = DIV v9a9 v9aa(0x20)
0x9af: v9af = MUL v9ae v9aa(0x20)
0x9b0: v9b0(0x20) = CONST 
0x9b2: v9b2 = ADD v9b0(0x20) v9af
0x9b3: v9b3(0x40) = CONST 
0x9b5: v9b5 = MLOAD v9b3(0x40)
0x9b8: v9b8 = ADD v9b5 v9b2
0x9b9: v9b9(0x40) = CONST 
0x9bb: MSTORE v9b9(0x40) v9b8
0x9c2: MSTORE v9b5 v9a5
0x9c3: v9c3(0x20) = CONST 
0x9c5: v9c5 = ADD v9c3(0x20) v9b5
0x9c8: v9c8 = SLOAD v991(0x5)
0x9c9: v9c9(0x1) = CONST 
0x9cc: v9cc(0x1) = CONST 
0x9ce: v9ce = AND v9cc(0x1) v9c8
0x9cf: v9cf = ISZERO v9ce
0x9d0: v9d0(0x100) = CONST 
0x9d3: v9d3 = MUL v9d0(0x100) v9cf
0x9d4: v9d4 = SUB v9d3 v9c9(0x1)
0x9d5: v9d5 = AND v9d4 v9c8
0x9d6: v9d6(0x2) = CONST 
0x9d9: v9d9 = DIV v9d5 v9d6(0x2)
0x9db: v9db = ISZERO v9d9
0x9dc: v9dc(0xa26) = CONST 
0x9df: JUMPI v9dc(0xa26) v9db
----------------------------------

Begin block 0x9e0
prev = {'0x990'}, next = {'0x9fb', '0x9e8'}
----------------------------------
Block 0x9e0
0x9e1: v9e1(0x1f) = CONST 
0x9e3: v9e3 = LT v9e1(0x1f) v9d9
0x9e4: v9e4(0x9fb) = CONST 
0x9e7: JUMPI v9e4(0x9fb) v9e3
----------------------------------

Begin block 0x9e8
prev = {'0x9e0'}, next = {'0xa26'}
----------------------------------
Block 0x9e8
0x9e8: v9e8(0x100) = CONST 
0x9ed: v9ed = SLOAD v991(0x5)
0x9ee: v9ee = DIV v9ed v9e8(0x100)
0x9ef: v9ef = MUL v9ee v9e8(0x100)
0x9f1: MSTORE v9c5 v9ef
0x9f3: v9f3(0x20) = CONST 
0x9f5: v9f5 = ADD v9f3(0x20) v9c5
0x9f7: v9f7(0xa26) = CONST 
0x9fa: JUMP v9f7(0xa26)
----------------------------------

Begin block 0x9fb
prev = {'0x9e0'}, next = {'0xa09'}
----------------------------------
Block 0x9fb
0x9fd: v9fd = ADD v9c5 v9d9
0xa00: va00(0x0) = CONST 
0xa02: MSTORE va00(0x0) v991(0x5)
0xa03: va03(0x20) = CONST 
0xa05: va05(0x0) = CONST 
0xa07: va07 = SHA3 va05(0x0) va03(0x20)
----------------------------------

Begin block 0xa09
prev = {'0x9fb', '0xa09'}, next = {'0xa1d', '0xa09'}
----------------------------------
Block 0xa09
0xa09_0x0: va09_0 = PHI v9c5 va15
0xa09_0x1: va09_1 = PHI va07 va11
0xa0b: va0b = SLOAD va09_1
0xa0d: MSTORE va09_0 va0b
0xa0f: va0f(0x1) = CONST 
0xa11: va11 = ADD va0f(0x1) va09_1
0xa13: va13(0x20) = CONST 
0xa15: va15 = ADD va13(0x20) va09_0
0xa18: va18 = GT v9fd va15
0xa19: va19(0xa09) = CONST 
0xa1c: JUMPI va19(0xa09) va18
----------------------------------

Begin block 0xa1d
prev = {'0xa09'}, next = {'0xa26'}
----------------------------------
Block 0xa1d
0xa1f: va1f = SUB va15 v9fd
0xa20: va20(0x1f) = CONST 
0xa22: va22 = AND va20(0x1f) va1f
0xa24: va24 = ADD v9fd va22
----------------------------------

Begin block 0xa26
prev = {'0x990', '0xa1d', '0x9e8'}, next = {'0x386'}
----------------------------------
Block 0xa26
0xa2d: JUMP v37f(0x386)
----------------------------------

Begin block 0xa2e
prev = {'0x40c'}, next = {'0xa7a', '0xa7e'}
----------------------------------
Block 0xa2e
0xa2f: va2f(0x0) = CONST 
0xa32: va32(0x1) = CONST 
0xa34: va34(0x0) = CONST 
0xa36: va36 = CALLER 
0xa37: va37(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa4c: va4c = AND va37(0xffffffffffffffffffffffffffffffffffffffff) va36
0xa4d: va4d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa62: va62 = AND va4d(0xffffffffffffffffffffffffffffffffffffffff) va4c
0xa64: MSTORE va34(0x0) va62
0xa65: va65(0x20) = CONST 
0xa67: va67(0x20) = ADD va65(0x20) va34(0x0)
0xa6a: MSTORE va67(0x20) va32(0x1)
0xa6b: va6b(0x20) = CONST 
0xa6d: va6d(0x40) = ADD va6b(0x20) va67(0x20)
0xa6e: va6e(0x0) = CONST 
0xa70: va70 = SHA3 va6e(0x0) va6d(0x40)
0xa71: va71 = SLOAD va70
0xa72: va72 = LT va71 v433
0xa73: va73 = ISZERO va72
0xa74: va74 = ISZERO va73
0xa75: va75 = ISZERO va74
0xa76: va76(0xa7e) = CONST 
0xa79: JUMPI va76(0xa7e) va75
----------------------------------

Begin block 0xa7a
prev = {'0xa2e'}, next = {}
----------------------------------
Block 0xa7a
0xa7a: va7a(0x0) = CONST 
0xa7d: REVERT va7a(0x0) va7a(0x0)
----------------------------------

Begin block 0xa7e
prev = {'0xa2e'}, next = {'0x441'}
----------------------------------
Block 0xa7e
0xa80: va80(0x1) = CONST 
0xa82: va82(0x0) = CONST 
0xa84: va84 = CALLER 
0xa85: va85(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa9a: va9a = AND va85(0xffffffffffffffffffffffffffffffffffffffff) va84
0xa9b: va9b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab0: vab0 = AND va9b(0xffffffffffffffffffffffffffffffffffffffff) va9a
0xab2: MSTORE va82(0x0) vab0
0xab3: vab3(0x20) = CONST 
0xab5: vab5(0x20) = ADD vab3(0x20) va82(0x0)
0xab8: MSTORE vab5(0x20) va80(0x1)
0xab9: vab9(0x20) = CONST 
0xabb: vabb(0x40) = ADD vab9(0x20) vab5(0x20)
0xabc: vabc(0x0) = CONST 
0xabe: vabe = SHA3 vabc(0x0) vabb(0x40)
0xabf: vabf(0x0) = CONST 
0xac3: vac3 = SLOAD vabe
0xac4: vac4 = SUB vac3 v433
0xaca: SSTORE vabe vac4
0xacd: vacd(0x1) = CONST 
0xacf: vacf(0x0) = CONST 
0xad2: vad2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xae7: vae7 = AND vad2(0xffffffffffffffffffffffffffffffffffffffff) v42a
0xae8: vae8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xafd: vafd = AND vae8(0xffffffffffffffffffffffffffffffffffffffff) vae7
0xaff: MSTORE vacf(0x0) vafd
0xb00: vb00(0x20) = CONST 
0xb02: vb02(0x20) = ADD vb00(0x20) vacf(0x0)
0xb05: MSTORE vb02(0x20) vacd(0x1)
0xb06: vb06(0x20) = CONST 
0xb08: vb08(0x40) = ADD vb06(0x20) vb02(0x20)
0xb09: vb09(0x0) = CONST 
0xb0b: vb0b = SHA3 vb09(0x0) vb08(0x40)
0xb0c: vb0c(0x0) = CONST 
0xb10: vb10 = SLOAD vb0b
0xb11: vb11 = ADD vb10 v433
0xb17: SSTORE vb0b vb11
0xb1a: vb1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb2f: vb2f = AND vb1a(0xffffffffffffffffffffffffffffffffffffffff) v42a
0xb30: vb30 = CALLER 
0xb31: vb31(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb46: vb46 = AND vb31(0xffffffffffffffffffffffffffffffffffffffff) vb30
0xb47: vb47(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xb69: vb69(0x40) = CONST 
0xb6b: vb6b = MLOAD vb69(0x40)
0xb6f: MSTORE vb6b v433
0xb70: vb70(0x20) = CONST 
0xb72: vb72 = ADD vb70(0x20) vb6b
0xb76: vb76(0x40) = CONST 
0xb78: vb78 = MLOAD vb76(0x40)
0xb7b: vb7b = SUB vb72 vb78
0xb7d: LOG3 vb78 vb7b vb47(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vb46 vb2f
0xb7e: vb7e(0x1) = CONST 
0xb86: JUMP v40d(0x441)
----------------------------------

Begin block 0xb87
prev = {'0x466'}, next = {'0x4b1'}
----------------------------------
Block 0xb87
0xb88: vb88(0x0) = CONST 
0xb8a: vb8a(0x2) = CONST 
0xb8c: vb8c(0x0) = CONST 
0xb8f: vb8f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xba4: vba4 = AND vb8f(0xffffffffffffffffffffffffffffffffffffffff) v484
0xba5: vba5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbba: vbba = AND vba5(0xffffffffffffffffffffffffffffffffffffffff) vba4
0xbbc: MSTORE vb8c(0x0) vbba
0xbbd: vbbd(0x20) = CONST 
0xbbf: vbbf(0x20) = ADD vbbd(0x20) vb8c(0x0)
0xbc2: MSTORE vbbf(0x20) vb8a(0x2)
0xbc3: vbc3(0x20) = CONST 
0xbc5: vbc5(0x40) = ADD vbc3(0x20) vbbf(0x20)
0xbc6: vbc6(0x0) = CONST 
0xbc8: vbc8 = SHA3 vbc6(0x0) vbc5(0x40)
0xbc9: vbc9(0x0) = CONST 
0xbcc: vbcc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe1: vbe1 = AND vbcc(0xffffffffffffffffffffffffffffffffffffffff) v4a3
0xbe2: vbe2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf7: vbf7 = AND vbe2(0xffffffffffffffffffffffffffffffffffffffff) vbe1
0xbf9: MSTORE vbc9(0x0) vbf7
0xbfa: vbfa(0x20) = CONST 
0xbfc: vbfc(0x20) = ADD vbfa(0x20) vbc9(0x0)
0xbff: MSTORE vbfc(0x20) vbc8
0xc00: vc00(0x20) = CONST 
0xc02: vc02(0x40) = ADD vc00(0x20) vbfc(0x20)
0xc03: vc03(0x0) = CONST 
0xc05: vc05 = SHA3 vc03(0x0) vc02(0x40)
0xc06: vc06 = SLOAD vc05
0xc0d: JUMP v467(0x4b1)
----------------------------------

Begin block 0xc4a
prev = {'0x0', '0xa4'}, next = {}
----------------------------------
Block 0xc4a
0xc4b: vc4b(0xaf) = CONST 
0xc4c: CALLPRIVATE vc4b(0xaf)
----------------------------------

Begin block 0xc4d
prev = {'0xd'}, next = {}
----------------------------------
Block 0xc4d
0xc4e: vc4e(0xb4) = CONST 
0xc4f: CALLPRIVATE vc4e(0xb4)
----------------------------------

Begin block 0xc50
prev = {'0x41'}, next = {}
----------------------------------
Block 0xc50
0xc51: vc51(0x142) = CONST 
0xc52: CALLPRIVATE vc51(0x142)
----------------------------------

Begin block 0xc53
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xc53
0xc54: vc54(0x19c) = CONST 
0xc55: CALLPRIVATE vc54(0x19c)
----------------------------------

Begin block 0xc56
prev = {'0x57'}, next = {}
----------------------------------
Block 0xc56
0xc57: vc57(0x1c5) = CONST 
0xc58: CALLPRIVATE vc57(0x1c5)
----------------------------------

Begin block 0xc59
prev = {'0x62'}, next = {}
----------------------------------
Block 0xc59
0xc5a: vc5a(0x23e) = CONST 
0xc5b: CALLPRIVATE vc5a(0x23e)
----------------------------------

Begin block 0xc5c
prev = {'0x6d'}, next = {}
----------------------------------
Block 0xc5c
0xc5d: vc5d(0x28b) = CONST 
0xc5e: CALLPRIVATE vc5d(0x28b)
----------------------------------

Begin block 0xc5f
prev = {'0x78'}, next = {}
----------------------------------
Block 0xc5f
0xc60: vc60(0x2ba) = CONST 
0xc61: CALLPRIVATE vc60(0x2ba)
----------------------------------

Begin block 0xc62
prev = {'0x83'}, next = {}
----------------------------------
Block 0xc62
0xc63: vc63(0x326) = CONST 
0xc64: CALLPRIVATE vc63(0x326)
----------------------------------

Begin block 0xc65
prev = {'0x8e'}, next = {}
----------------------------------
Block 0xc65
0xc66: vc66(0x373) = CONST 
0xc67: CALLPRIVATE vc66(0x373)
----------------------------------

Begin block 0xc68
prev = {'0x99'}, next = {}
----------------------------------
Block 0xc68
0xc69: vc69(0x401) = CONST 
0xc6a: CALLPRIVATE vc69(0x401)
----------------------------------

Begin block 0xc6b
prev = {'0xa4'}, next = {}
----------------------------------
Block 0xc6b
0xc6c: vc6c(0x45b) = CONST 
0xc6d: CALLPRIVATE vc6c(0x45b)
----------------------------------
