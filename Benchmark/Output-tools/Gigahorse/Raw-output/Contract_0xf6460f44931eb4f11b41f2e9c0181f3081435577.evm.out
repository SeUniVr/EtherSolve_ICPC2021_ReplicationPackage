
Begin block 0x0
prev = {}, next = {'0x8a2', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x888: v888(0x8a2) = CONST 
0x889: JUMPI v888(0x8a2) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x27', '0x8a5'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0xe0) = CONST 
0x14: v14(0x2) = CONST 
0x16: v16(0x100000000000000000000000000000000000000000000000000000000) = EXP v14(0x2) v12(0xe0)
0x17: v17(0x0) = CONST 
0x19: v19 = CALLDATALOAD v17(0x0)
0x1a: v1a = DIV v19 v16(0x100000000000000000000000000000000000000000000000000000000)
0x1b: v1b = AND v1a vd(0xffffffff)
0x1c: v1c(0x6fdde03) = CONST 
0x22: v22 = EQ v1b v1c(0x6fdde03)
0x88a: v88a(0x8a5) = CONST 
0x88b: JUMPI v88a(0x8a5) v22
----------------------------------

Begin block 0x27
prev = {'0xd'}, next = {'0x8a8', '0x32'}
----------------------------------
Block 0x27
0x28: v28(0x95ea7b3) = CONST 
0x2d: v2d = EQ v28(0x95ea7b3) v1b
0x88c: v88c(0x8a8) = CONST 
0x88d: JUMPI v88c(0x8a8) v2d
----------------------------------

Begin block 0x32
prev = {'0x27'}, next = {'0x3d', '0x8ab'}
----------------------------------
Block 0x32
0x33: v33(0x18160ddd) = CONST 
0x38: v38 = EQ v33(0x18160ddd) v1b
0x88e: v88e(0x8ab) = CONST 
0x88f: JUMPI v88e(0x8ab) v38
----------------------------------

Begin block 0x3d
prev = {'0x32'}, next = {'0x8ae', '0x48'}
----------------------------------
Block 0x3d
0x3e: v3e(0x23b872dd) = CONST 
0x43: v43 = EQ v3e(0x23b872dd) v1b
0x890: v890(0x8ae) = CONST 
0x891: JUMPI v890(0x8ae) v43
----------------------------------

Begin block 0x48
prev = {'0x3d'}, next = {'0x8b1', '0x53'}
----------------------------------
Block 0x48
0x49: v49(0x313ce567) = CONST 
0x4e: v4e = EQ v49(0x313ce567) v1b
0x892: v892(0x8b1) = CONST 
0x893: JUMPI v892(0x8b1) v4e
----------------------------------

Begin block 0x53
prev = {'0x48'}, next = {'0x8b4', '0x5e'}
----------------------------------
Block 0x53
0x54: v54(0x54fd4d50) = CONST 
0x59: v59 = EQ v54(0x54fd4d50) v1b
0x894: v894(0x8b4) = CONST 
0x895: JUMPI v894(0x8b4) v59
----------------------------------

Begin block 0x5e
prev = {'0x53'}, next = {'0x8b7', '0x69'}
----------------------------------
Block 0x5e
0x5f: v5f(0x70a08231) = CONST 
0x64: v64 = EQ v5f(0x70a08231) v1b
0x896: v896(0x8b7) = CONST 
0x897: JUMPI v896(0x8b7) v64
----------------------------------

Begin block 0x69
prev = {'0x5e'}, next = {'0x8ba', '0x74'}
----------------------------------
Block 0x69
0x6a: v6a(0x95d89b41) = CONST 
0x6f: v6f = EQ v6a(0x95d89b41) v1b
0x898: v898(0x8ba) = CONST 
0x899: JUMPI v898(0x8ba) v6f
----------------------------------

Begin block 0x74
prev = {'0x69'}, next = {'0x8bd', '0x7f'}
----------------------------------
Block 0x74
0x75: v75(0xa9059cbb) = CONST 
0x7a: v7a = EQ v75(0xa9059cbb) v1b
0x89a: v89a(0x8bd) = CONST 
0x89b: JUMPI v89a(0x8bd) v7a
----------------------------------

Begin block 0x7f
prev = {'0x74'}, next = {'0x8c0', '0x8a'}
----------------------------------
Block 0x7f
0x80: v80(0xcae9ca51) = CONST 
0x85: v85 = EQ v80(0xcae9ca51) v1b
0x89c: v89c(0x8c0) = CONST 
0x89d: JUMPI v89c(0x8c0) v85
----------------------------------

Begin block 0x8a
prev = {'0x7f'}, next = {'0x8c3', '0x95'}
----------------------------------
Block 0x8a
0x8b: v8b(0xdd62ed3e) = CONST 
0x90: v90 = EQ v8b(0xdd62ed3e) v1b
0x89e: v89e(0x8c3) = CONST 
0x89f: JUMPI v89e(0x8c3) v90
----------------------------------

Begin block 0x95
prev = {'0x8a'}, next = {'0x8c6', '0x8a2'}
----------------------------------
Block 0x95
0x96: v96(0xfc1ed437) = CONST 
0x9b: v9b = EQ v96(0xfc1ed437) v1b
0x8a0: v8a0(0x8c6) = CONST 
0x8a1: JUMPI v8a0(0x8c6) v9b
----------------------------------

Begin block 0xa0
prev = {}, next = {'0xab', '0xa7'}
----------------------------------
function batchLock_63efZf()()
Block 0xa0
0xa1: va1 = CALLVALUE 
0xa2: va2 = ISZERO va1
0xa3: va3(0xab) = CONST 
0xa6: JUMPI va3(0xab) va2
----------------------------------

Begin block 0xa7
prev = {'0xa0'}, next = {}
----------------------------------
Block 0xa7
0xa7: va7(0x0) = CONST 
0xaa: REVERT va7(0x0) va7(0x0)
----------------------------------

Begin block 0xab
prev = {'0xa0'}, next = {}
----------------------------------
Block 0xab
0xac: STOP 
----------------------------------

Begin block 0xad
prev = {}, next = {'0xb4', '0xb8'}
----------------------------------
function name()()
Block 0xad
0xae: vae = CALLVALUE 
0xaf: vaf = ISZERO vae
0xb0: vb0(0xb8) = CONST 
0xb3: JUMPI vb0(0xb8) vaf
----------------------------------

Begin block 0xb4
prev = {'0xad'}, next = {}
----------------------------------
Block 0xb4
0xb4: vb4(0x0) = CONST 
0xb7: REVERT vb4(0x0) vb4(0x0)
----------------------------------

Begin block 0xb8
prev = {'0xad'}, next = {'0xc00xad'}
----------------------------------
Block 0xb8
0xb9: vb9(0xc0) = CONST 
0xbc: vbc(0x2e7) = CONST 
0xbf: vbf_0, vbf_1 = CALLPRIVATE vbc(0x2e7) vb9(0xc0)
----------------------------------

Begin block 0xc00xad
prev = {'0xb8'}, next = {'0xe40xad'}
----------------------------------
Block 0xc00xad
0xc10xad: vadc1(0x40) = CONST 
0xc30xad: vadc3 = MLOAD vadc1(0x40)
0xc40xad: vadc4(0x20) = CONST 
0xc80xad: MSTORE vadc3 vadc4(0x20)
0xcc0xad: vadcc = ADD vadc3 vadc4(0x20)
0xd00xad: vadd0 = MLOAD vbf_0
0xd20xad: MSTORE vadcc vadd0
0xd30xad: vadd3(0x20) = CONST 
0xd50xad: vadd5 = ADD vadd3(0x20) vadcc
0xd90xad: vadd9 = MLOAD vbf_0
0xdb0xad: vaddb(0x20) = CONST 
0xdd0xad: vaddd = ADD vaddb(0x20) vbf_0
0xe20xad: vade2(0x0) = CONST 
----------------------------------

Begin block 0xc00x1e3
prev = {'0x1ee'}, next = {'0xe40x1e3'}
----------------------------------
Block 0xc00x1e3
0xc10x1e3: v1e3c1(0x40) = CONST 
0xc30x1e3: v1e3c3 = MLOAD v1e3c1(0x40)
0xc40x1e3: v1e3c4(0x20) = CONST 
0xc80x1e3: MSTORE v1e3c3 v1e3c4(0x20)
0xcc0x1e3: v1e3cc = ADD v1e3c3 v1e3c4(0x20)
0xd00x1e3: v1e3d0 = MLOAD v1f5_0
0xd20x1e3: MSTORE v1e3cc v1e3d0
0xd30x1e3: v1e3d3(0x20) = CONST 
0xd50x1e3: v1e3d5 = ADD v1e3d3(0x20) v1e3cc
0xd90x1e3: v1e3d9 = MLOAD v1f5_0
0xdb0x1e3: v1e3db(0x20) = CONST 
0xdd0x1e3: v1e3dd = ADD v1e3db(0x20) v1f5_0
0xe20x1e3: v1e3e2(0x0) = CONST 
----------------------------------

Begin block 0xc00x215
prev = {'0x220'}, next = {'0xe40x215'}
----------------------------------
Block 0xc00x215
0xc10x215: v215c1(0x40) = CONST 
0xc30x215: v215c3 = MLOAD v215c1(0x40)
0xc40x215: v215c4(0x20) = CONST 
0xc80x215: MSTORE v215c3 v215c4(0x20)
0xcc0x215: v215cc = ADD v215c3 v215c4(0x20)
0xd00x215: v215d0 = MLOAD v227_0
0xd20x215: MSTORE v215cc v215d0
0xd30x215: v215d3(0x20) = CONST 
0xd50x215: v215d5 = ADD v215d3(0x20) v215cc
0xd90x215: v215d9 = MLOAD v227_0
0xdb0x215: v215db(0x20) = CONST 
0xdd0x215: v215dd = ADD v215db(0x20) v227_0
0xe20x215: v215e2(0x0) = CONST 
----------------------------------

Begin block 0xe40xad
prev = {'0xc00xad', '0xed0xad'}, next = {'0xed0xad', '0xfc0xad'}
----------------------------------
Block 0xe40xad
0xe40xad_0x0: ve4ad_0 = PHI vade2(0x0) vadf7
0xe70xad: vade7 = LT ve4ad_0 vadd9
0xe80xad: vade8 = ISZERO vade7
0xe90xad: vade9(0xfc) = CONST 
0xec0xad: JUMPI vade9(0xfc) vade8
----------------------------------

Begin block 0xe40x1e3
prev = {'0xc00x1e3', '0xed0x1e3'}, next = {'0xed0x1e3', '0xfc0x1e3'}
----------------------------------
Block 0xe40x1e3
0xe40x1e3_0x0: ve41e3_0 = PHI v1e3e2(0x0) v1e3f7
0xe70x1e3: v1e3e7 = LT ve41e3_0 v1e3d9
0xe80x1e3: v1e3e8 = ISZERO v1e3e7
0xe90x1e3: v1e3e9(0xfc) = CONST 
0xec0x1e3: JUMPI v1e3e9(0xfc) v1e3e8
----------------------------------

Begin block 0xe40x215
prev = {'0xc00x215', '0xed0x215'}, next = {'0xfc0x215', '0xed0x215'}
----------------------------------
Block 0xe40x215
0xe40x215_0x0: ve4215_0 = PHI v215e2(0x0) v215f7
0xe70x215: v215e7 = LT ve4215_0 v215d9
0xe80x215: v215e8 = ISZERO v215e7
0xe90x215: v215e9(0xfc) = CONST 
0xec0x215: JUMPI v215e9(0xfc) v215e8
----------------------------------

Begin block 0xed0xad
prev = {'0xe40xad'}, next = {'0xe40xad'}
----------------------------------
Block 0xed0xad
0xed0xad_0x0: vedad_0 = PHI vade2(0x0) vadf7
0xef0xad: vadef = ADD vaddd vedad_0
0xf00xad: vadf0 = MLOAD vadef
0xf30xad: vadf3 = ADD vedad_0 vadd5
0xf40xad: MSTORE vadf3 vadf0
0xf50xad: vadf5(0x20) = CONST 
0xf70xad: vadf7 = ADD vadf5(0x20) vedad_0
0xf80xad: vadf8(0xe4) = CONST 
0xfb0xad: JUMP vadf8(0xe4)
----------------------------------

Begin block 0xed0x1e3
prev = {'0xe40x1e3'}, next = {'0xe40x1e3'}
----------------------------------
Block 0xed0x1e3
0xed0x1e3_0x0: ved1e3_0 = PHI v1e3e2(0x0) v1e3f7
0xef0x1e3: v1e3ef = ADD v1e3dd ved1e3_0
0xf00x1e3: v1e3f0 = MLOAD v1e3ef
0xf30x1e3: v1e3f3 = ADD ved1e3_0 v1e3d5
0xf40x1e3: MSTORE v1e3f3 v1e3f0
0xf50x1e3: v1e3f5(0x20) = CONST 
0xf70x1e3: v1e3f7 = ADD v1e3f5(0x20) ved1e3_0
0xf80x1e3: v1e3f8(0xe4) = CONST 
0xfb0x1e3: JUMP v1e3f8(0xe4)
----------------------------------

Begin block 0xed0x215
prev = {'0xe40x215'}, next = {'0xe40x215'}
----------------------------------
Block 0xed0x215
0xed0x215_0x0: ved215_0 = PHI v215e2(0x0) v215f7
0xef0x215: v215ef = ADD v215dd ved215_0
0xf00x215: v215f0 = MLOAD v215ef
0xf30x215: v215f3 = ADD ved215_0 v215d5
0xf40x215: MSTORE v215f3 v215f0
0xf50x215: v215f5(0x20) = CONST 
0xf70x215: v215f7 = ADD v215f5(0x20) ved215_0
0xf80x215: v215f8(0xe4) = CONST 
0xfb0x215: JUMP v215f8(0xe4)
----------------------------------

Begin block 0xfc0xad
prev = {'0xe40xad'}, next = {'0x1290xad', '0x1100xad'}
----------------------------------
Block 0xfc0xad
0x1050xad: vad105 = ADD vadd9 vadd5
0x1070xad: vad107(0x1f) = CONST 
0x1090xad: vad109 = AND vad107(0x1f) vadd9
0x10b0xad: vad10b = ISZERO vad109
0x10c0xad: vad10c(0x129) = CONST 
0x10f0xad: JUMPI vad10c(0x129) vad10b
----------------------------------

Begin block 0xfc0x1e3
prev = {'0xe40x1e3'}, next = {'0x1100x1e3', '0x1290x1e3'}
----------------------------------
Block 0xfc0x1e3
0x1050x1e3: v1e3105 = ADD v1e3d9 v1e3d5
0x1070x1e3: v1e3107(0x1f) = CONST 
0x1090x1e3: v1e3109 = AND v1e3107(0x1f) v1e3d9
0x10b0x1e3: v1e310b = ISZERO v1e3109
0x10c0x1e3: v1e310c(0x129) = CONST 
0x10f0x1e3: JUMPI v1e310c(0x129) v1e310b
----------------------------------

Begin block 0xfc0x215
prev = {'0xe40x215'}, next = {'0x1290x215', '0x1100x215'}
----------------------------------
Block 0xfc0x215
0x1050x215: v215105 = ADD v215d9 v215d5
0x1070x215: v215107(0x1f) = CONST 
0x1090x215: v215109 = AND v215107(0x1f) v215d9
0x10b0x215: v21510b = ISZERO v215109
0x10c0x215: v21510c(0x129) = CONST 
0x10f0x215: JUMPI v21510c(0x129) v21510b
----------------------------------

Begin block 0x1100xad
prev = {'0xfc0xad'}, next = {'0x1290xad'}
----------------------------------
Block 0x1100xad
0x1120xad: vad112 = SUB vad105 vad109
0x1140xad: vad114 = MLOAD vad112
0x1150xad: vad115(0x1) = CONST 
0x1180xad: vad118(0x20) = CONST 
0x11a0xad: vad11a = SUB vad118(0x20) vad109
0x11b0xad: vad11b(0x100) = CONST 
0x11e0xad: vad11e = EXP vad11b(0x100) vad11a
0x11f0xad: vad11f = SUB vad11e vad115(0x1)
0x1200xad: vad120 = NOT vad11f
0x1210xad: vad121 = AND vad120 vad114
0x1230xad: MSTORE vad112 vad121
0x1240xad: vad124(0x20) = CONST 
0x1260xad: vad126 = ADD vad124(0x20) vad112
----------------------------------

Begin block 0x1100x1e3
prev = {'0xfc0x1e3'}, next = {'0x1290x1e3'}
----------------------------------
Block 0x1100x1e3
0x1120x1e3: v1e3112 = SUB v1e3105 v1e3109
0x1140x1e3: v1e3114 = MLOAD v1e3112
0x1150x1e3: v1e3115(0x1) = CONST 
0x1180x1e3: v1e3118(0x20) = CONST 
0x11a0x1e3: v1e311a = SUB v1e3118(0x20) v1e3109
0x11b0x1e3: v1e311b(0x100) = CONST 
0x11e0x1e3: v1e311e = EXP v1e311b(0x100) v1e311a
0x11f0x1e3: v1e311f = SUB v1e311e v1e3115(0x1)
0x1200x1e3: v1e3120 = NOT v1e311f
0x1210x1e3: v1e3121 = AND v1e3120 v1e3114
0x1230x1e3: MSTORE v1e3112 v1e3121
0x1240x1e3: v1e3124(0x20) = CONST 
0x1260x1e3: v1e3126 = ADD v1e3124(0x20) v1e3112
----------------------------------

Begin block 0x1100x215
prev = {'0xfc0x215'}, next = {'0x1290x215'}
----------------------------------
Block 0x1100x215
0x1120x215: v215112 = SUB v215105 v215109
0x1140x215: v215114 = MLOAD v215112
0x1150x215: v215115(0x1) = CONST 
0x1180x215: v215118(0x20) = CONST 
0x11a0x215: v21511a = SUB v215118(0x20) v215109
0x11b0x215: v21511b(0x100) = CONST 
0x11e0x215: v21511e = EXP v21511b(0x100) v21511a
0x11f0x215: v21511f = SUB v21511e v215115(0x1)
0x1200x215: v215120 = NOT v21511f
0x1210x215: v215121 = AND v215120 v215114
0x1230x215: MSTORE v215112 v215121
0x1240x215: v215124(0x20) = CONST 
0x1260x215: v215126 = ADD v215124(0x20) v215112
----------------------------------

Begin block 0x1290xad
prev = {'0x1100xad', '0xfc0xad'}, next = {}
----------------------------------
Block 0x1290xad
0x1290xad_0x1: v129ad_1 = PHI vad105 vad126
0x12f0xad: vad12f(0x40) = CONST 
0x1310xad: vad131 = MLOAD vad12f(0x40)
0x1340xad: vad134 = SUB v129ad_1 vad131
0x1360xad: RETURN vad131 vad134
----------------------------------

Begin block 0x1290x1e3
prev = {'0x1100x1e3', '0xfc0x1e3'}, next = {}
----------------------------------
Block 0x1290x1e3
0x1290x1e3_0x1: v1291e3_1 = PHI v1e3105 v1e3126
0x12f0x1e3: v1e312f(0x40) = CONST 
0x1310x1e3: v1e3131 = MLOAD v1e312f(0x40)
0x1340x1e3: v1e3134 = SUB v1291e3_1 v1e3131
0x1360x1e3: RETURN v1e3131 v1e3134
----------------------------------

Begin block 0x1290x215
prev = {'0xfc0x215', '0x1100x215'}, next = {}
----------------------------------
Block 0x1290x215
0x1290x215_0x1: v129215_1 = PHI v215105 v215126
0x12f0x215: v21512f(0x40) = CONST 
0x1310x215: v215131 = MLOAD v21512f(0x40)
0x1340x215: v215134 = SUB v129215_1 v215131
0x1360x215: RETURN v215131 v215134
----------------------------------

Begin block 0x137
prev = {}, next = {'0x142', '0x13e'}
----------------------------------
function approve(address,uint256)()
Block 0x137
0x138: v138 = CALLVALUE 
0x139: v139 = ISZERO v138
0x13a: v13a(0x142) = CONST 
0x13d: JUMPI v13a(0x142) v139
----------------------------------

Begin block 0x13e
prev = {'0x137'}, next = {}
----------------------------------
Block 0x13e
0x13e: v13e(0x0) = CONST 
0x141: REVERT v13e(0x0) v13e(0x0)
----------------------------------

Begin block 0x142
prev = {'0x137'}, next = {'0x385'}
----------------------------------
Block 0x142
0x143: v143(0x159) = CONST 
0x146: v146(0x1) = CONST 
0x148: v148(0xa0) = CONST 
0x14a: v14a(0x2) = CONST 
0x14c: v14c(0x10000000000000000000000000000000000000000) = EXP v14a(0x2) v148(0xa0)
0x14d: v14d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v14c(0x10000000000000000000000000000000000000000) v146(0x1)
0x14e: v14e(0x4) = CONST 
0x150: v150 = CALLDATALOAD v14e(0x4)
0x151: v151 = AND v150 v14d(0xffffffffffffffffffffffffffffffffffffffff)
0x152: v152(0x24) = CONST 
0x154: v154 = CALLDATALOAD v152(0x24)
0x155: v155(0x385) = CONST 
0x158: JUMP v155(0x385)
----------------------------------

Begin block 0x1590x137
prev = {'0x385'}, next = {}
----------------------------------
Block 0x1590x137
0x15a0x137: v13715a(0x40) = CONST 
0x15c0x137: v13715c = MLOAD v13715a(0x40)
0x15e0x137: v13715e = ISZERO v3ea(0x1)
0x15f0x137: v13715f = ISZERO v13715e
0x1610x137: MSTORE v13715c v13715f
0x1620x137: v137162(0x20) = CONST 
0x1640x137: v137164 = ADD v137162(0x20) v13715c
0x1650x137: v137165(0x40) = CONST 
0x1670x137: v137167 = MLOAD v137165(0x40)
0x16a0x137: v13716a = SUB v137164 v137167
0x16c0x137: RETURN v137167 v13716a
----------------------------------

Begin block 0x1590x192
prev = {'0x4ab'}, next = {}
----------------------------------
Block 0x1590x192
0x15a0x192: v19215a(0x40) = CONST 
0x15c0x192: v19215c = MLOAD v19215a(0x40)
0x15e0x192: v19215e = ISZERO v4f4(0x1)
0x15f0x192: v19215f = ISZERO v19215e
0x1610x192: MSTORE v19215c v19215f
0x1620x192: v192162(0x20) = CONST 
0x1640x192: v192164 = ADD v192162(0x20) v19215c
0x1650x192: v192165(0x40) = CONST 
0x1670x192: v192167 = MLOAD v192165(0x40)
0x16a0x192: v19216a = SUB v192164 v192167
0x16c0x192: RETURN v192167 v19216a
----------------------------------

Begin block 0x1590x228
prev = {'0x61d'}, next = {}
----------------------------------
Block 0x1590x228
0x15a0x228: v22815a(0x40) = CONST 
0x15c0x228: v22815c = MLOAD v22815a(0x40)
0x15e0x228: v22815e = ISZERO v684(0x1)
0x15f0x228: v22815f = ISZERO v22815e
0x1610x228: MSTORE v22815c v22815f
0x1620x228: v228162(0x20) = CONST 
0x1640x228: v228164 = ADD v228162(0x20) v22815c
0x1650x228: v228165(0x40) = CONST 
0x1670x228: v228167 = MLOAD v228165(0x40)
0x16a0x228: v22816a = SUB v228164 v228167
0x16c0x228: RETURN v228167 v22816a
----------------------------------

Begin block 0x1590x24a
prev = {'0x821'}, next = {}
----------------------------------
Block 0x1590x24a
0x15a0x24a: v24a15a(0x40) = CONST 
0x15c0x24a: v24a15c = MLOAD v24a15a(0x40)
0x15e0x24a: v24a15e = ISZERO v823(0x1)
0x15f0x24a: v24a15f = ISZERO v24a15e
0x1610x24a: MSTORE v24a15c v24a15f
0x1620x24a: v24a162(0x20) = CONST 
0x1640x24a: v24a164 = ADD v24a162(0x20) v24a15c
0x1650x24a: v24a165(0x40) = CONST 
0x1670x24a: v24a167 = MLOAD v24a165(0x40)
0x16a0x24a: v24a16a = SUB v24a164 v24a167
0x16c0x24a: RETURN v24a167 v24a16a
----------------------------------

Begin block 0x16d
prev = {}, next = {'0x174', '0x178'}
----------------------------------
function totalSupply()()
Block 0x16d
0x16e: v16e = CALLVALUE 
0x16f: v16f = ISZERO v16e
0x170: v170(0x178) = CONST 
0x173: JUMPI v170(0x178) v16f
----------------------------------

Begin block 0x174
prev = {'0x16d'}, next = {}
----------------------------------
Block 0x174
0x174: v174(0x0) = CONST 
0x177: REVERT v174(0x0) v174(0x0)
----------------------------------

Begin block 0x178
prev = {'0x16d'}, next = {'0x3f1'}
----------------------------------
Block 0x178
0x179: v179(0x180) = CONST 
0x17c: v17c(0x3f1) = CONST 
0x17f: JUMP v17c(0x3f1)
----------------------------------

Begin block 0x1800x16d
prev = {'0x3f1'}, next = {}
----------------------------------
Block 0x1800x16d
0x1810x16d: v16d181(0x40) = CONST 
0x1830x16d: v16d183 = MLOAD v16d181(0x40)
0x1860x16d: MSTORE v16d183 v3f4
0x1870x16d: v16d187(0x20) = CONST 
0x1890x16d: v16d189 = ADD v16d187(0x20) v16d183
0x18a0x16d: v16d18a(0x40) = CONST 
0x18c0x16d: v16d18c = MLOAD v16d18a(0x40)
0x18f0x16d: v16d18f = SUB v16d189 v16d18c
0x1910x16d: RETURN v16d18c v16d18f
----------------------------------

Begin block 0x1800x1f6
prev = {'0x571'}, next = {}
----------------------------------
Block 0x1800x1f6
0x1810x1f6: v1f6181(0x40) = CONST 
0x1830x1f6: v1f6183 = MLOAD v1f6181(0x40)
0x1860x1f6: MSTORE v1f6183 v589
0x1870x1f6: v1f6187(0x20) = CONST 
0x1890x1f6: v1f6189 = ADD v1f6187(0x20) v1f6183
0x18a0x1f6: v1f618a(0x40) = CONST 
0x18c0x1f6: v1f618c = MLOAD v1f618a(0x40)
0x18f0x1f6: v1f618f = SUB v1f6189 v1f618c
0x1910x1f6: RETURN v1f618c v1f618f
----------------------------------

Begin block 0x1800x2af
prev = {'0x82b'}, next = {}
----------------------------------
Block 0x1800x2af
0x1810x2af: v2af181(0x40) = CONST 
0x1830x2af: v2af183 = MLOAD v2af181(0x40)
0x1860x2af: MSTORE v2af183 v853
0x1870x2af: v2af187(0x20) = CONST 
0x1890x2af: v2af189 = ADD v2af187(0x20) v2af183
0x18a0x2af: v2af18a(0x40) = CONST 
0x18c0x2af: v2af18c = MLOAD v2af18a(0x40)
0x18f0x2af: v2af18f = SUB v2af189 v2af18c
0x1910x2af: RETURN v2af18c v2af18f
----------------------------------

Begin block 0x1800x2d4
prev = {'0x856'}, next = {}
----------------------------------
Block 0x1800x2d4
0x1810x2d4: v2d4181(0x40) = CONST 
0x1830x2d4: v2d4183 = MLOAD v2d4181(0x40)
0x1860x2d4: MSTORE v2d4183 v859
0x1870x2d4: v2d4187(0x20) = CONST 
0x1890x2d4: v2d4189 = ADD v2d4187(0x20) v2d4183
0x18a0x2d4: v2d418a(0x40) = CONST 
0x18c0x2d4: v2d418c = MLOAD v2d418a(0x40)
0x18f0x2d4: v2d418f = SUB v2d4189 v2d418c
0x1910x2d4: RETURN v2d418c v2d418f
----------------------------------

Begin block 0x192
prev = {}, next = {'0x19d', '0x199'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x192
0x193: v193 = CALLVALUE 
0x194: v194 = ISZERO v193
0x195: v195(0x19d) = CONST 
0x198: JUMPI v195(0x19d) v194
----------------------------------

Begin block 0x199
prev = {'0x192'}, next = {}
----------------------------------
Block 0x199
0x199: v199(0x0) = CONST 
0x19c: REVERT v199(0x0) v199(0x0)
----------------------------------

Begin block 0x19d
prev = {'0x192'}, next = {'0x3f7'}
----------------------------------
Block 0x19d
0x19e: v19e(0x159) = CONST 
0x1a1: v1a1(0x1) = CONST 
0x1a3: v1a3(0xa0) = CONST 
0x1a5: v1a5(0x2) = CONST 
0x1a7: v1a7(0x10000000000000000000000000000000000000000) = EXP v1a5(0x2) v1a3(0xa0)
0x1a8: v1a8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a7(0x10000000000000000000000000000000000000000) v1a1(0x1)
0x1a9: v1a9(0x4) = CONST 
0x1ab: v1ab = CALLDATALOAD v1a9(0x4)
0x1ad: v1ad = AND v1a8(0xffffffffffffffffffffffffffffffffffffffff) v1ab
0x1af: v1af(0x24) = CONST 
0x1b1: v1b1 = CALLDATALOAD v1af(0x24)
0x1b2: v1b2 = AND v1b1 v1a8(0xffffffffffffffffffffffffffffffffffffffff)
0x1b3: v1b3(0x44) = CONST 
0x1b5: v1b5 = CALLDATALOAD v1b3(0x44)
0x1b6: v1b6(0x3f7) = CONST 
0x1b9: JUMP v1b6(0x3f7)
----------------------------------

Begin block 0x1ba
prev = {}, next = {'0x1c1', '0x1c5'}
----------------------------------
function decimals()()
Block 0x1ba
0x1bb: v1bb = CALLVALUE 
0x1bc: v1bc = ISZERO v1bb
0x1bd: v1bd(0x1c5) = CONST 
0x1c0: JUMPI v1bd(0x1c5) v1bc
----------------------------------

Begin block 0x1c1
prev = {'0x1ba'}, next = {}
----------------------------------
Block 0x1c1
0x1c1: v1c1(0x0) = CONST 
0x1c4: REVERT v1c1(0x0) v1c1(0x0)
----------------------------------

Begin block 0x1c5
prev = {'0x1ba'}, next = {'0x4fd'}
----------------------------------
Block 0x1c5
0x1c6: v1c6(0x1cd) = CONST 
0x1c9: v1c9(0x4fd) = CONST 
0x1cc: JUMP v1c9(0x4fd)
----------------------------------

Begin block 0x1cd
prev = {'0x4fd'}, next = {}
----------------------------------
Block 0x1cd
0x1ce: v1ce(0x40) = CONST 
0x1d0: v1d0 = MLOAD v1ce(0x40)
0x1d1: v1d1(0xff) = CONST 
0x1d5: v1d5 = AND v503 v1d1(0xff)
0x1d7: MSTORE v1d0 v1d5
0x1d8: v1d8(0x20) = CONST 
0x1da: v1da = ADD v1d8(0x20) v1d0
0x1db: v1db(0x40) = CONST 
0x1dd: v1dd = MLOAD v1db(0x40)
0x1e0: v1e0 = SUB v1da v1dd
0x1e2: RETURN v1dd v1e0
----------------------------------

Begin block 0x1e3
prev = {}, next = {'0x1ea', '0x1ee'}
----------------------------------
function version()()
Block 0x1e3
0x1e4: v1e4 = CALLVALUE 
0x1e5: v1e5 = ISZERO v1e4
0x1e6: v1e6(0x1ee) = CONST 
0x1e9: JUMPI v1e6(0x1ee) v1e5
----------------------------------

Begin block 0x1ea
prev = {'0x1e3'}, next = {}
----------------------------------
Block 0x1ea
0x1ea: v1ea(0x0) = CONST 
0x1ed: REVERT v1ea(0x0) v1ea(0x0)
----------------------------------

Begin block 0x1ee
prev = {'0x1e3'}, next = {'0xc00x1e3'}
----------------------------------
Block 0x1ee
0x1ef: v1ef(0xc0) = CONST 
0x1f2: v1f2(0x506) = CONST 
0x1f5: v1f5_0, v1f5_1 = CALLPRIVATE v1f2(0x506) v1ef(0xc0)
----------------------------------

Begin block 0x1f6
prev = {}, next = {'0x1fd', '0x201'}
----------------------------------
function balanceOf(address)()
Block 0x1f6
0x1f7: v1f7 = CALLVALUE 
0x1f8: v1f8 = ISZERO v1f7
0x1f9: v1f9(0x201) = CONST 
0x1fc: JUMPI v1f9(0x201) v1f8
----------------------------------

Begin block 0x1fd
prev = {'0x1f6'}, next = {}
----------------------------------
Block 0x1fd
0x1fd: v1fd(0x0) = CONST 
0x200: REVERT v1fd(0x0) v1fd(0x0)
----------------------------------

Begin block 0x201
prev = {'0x1f6'}, next = {'0x571'}
----------------------------------
Block 0x201
0x202: v202(0x180) = CONST 
0x205: v205(0x1) = CONST 
0x207: v207(0xa0) = CONST 
0x209: v209(0x2) = CONST 
0x20b: v20b(0x10000000000000000000000000000000000000000) = EXP v209(0x2) v207(0xa0)
0x20c: v20c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v20b(0x10000000000000000000000000000000000000000) v205(0x1)
0x20d: v20d(0x4) = CONST 
0x20f: v20f = CALLDATALOAD v20d(0x4)
0x210: v210 = AND v20f v20c(0xffffffffffffffffffffffffffffffffffffffff)
0x211: v211(0x571) = CONST 
0x214: JUMP v211(0x571)
----------------------------------

Begin block 0x215
prev = {}, next = {'0x220', '0x21c'}
----------------------------------
function symbol()()
Block 0x215
0x216: v216 = CALLVALUE 
0x217: v217 = ISZERO v216
0x218: v218(0x220) = CONST 
0x21b: JUMPI v218(0x220) v217
----------------------------------

Begin block 0x21c
prev = {'0x215'}, next = {}
----------------------------------
Block 0x21c
0x21c: v21c(0x0) = CONST 
0x21f: REVERT v21c(0x0) v21c(0x0)
----------------------------------

Begin block 0x220
prev = {'0x215'}, next = {'0xc00x215'}
----------------------------------
Block 0x220
0x221: v221(0xc0) = CONST 
0x224: v224(0x58c) = CONST 
0x227: v227_0, v227_1 = CALLPRIVATE v224(0x58c) v221(0xc0)
----------------------------------

Begin block 0x228
prev = {}, next = {'0x22f', '0x233'}
----------------------------------
function transfer(address,uint256)()
Block 0x228
0x229: v229 = CALLVALUE 
0x22a: v22a = ISZERO v229
0x22b: v22b(0x233) = CONST 
0x22e: JUMPI v22b(0x233) v22a
----------------------------------

Begin block 0x22f
prev = {'0x228'}, next = {}
----------------------------------
Block 0x22f
0x22f: v22f(0x0) = CONST 
0x232: REVERT v22f(0x0) v22f(0x0)
----------------------------------

Begin block 0x233
prev = {'0x228'}, next = {'0x5f7'}
----------------------------------
Block 0x233
0x234: v234(0x159) = CONST 
0x237: v237(0x1) = CONST 
0x239: v239(0xa0) = CONST 
0x23b: v23b(0x2) = CONST 
0x23d: v23d(0x10000000000000000000000000000000000000000) = EXP v23b(0x2) v239(0xa0)
0x23e: v23e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v23d(0x10000000000000000000000000000000000000000) v237(0x1)
0x23f: v23f(0x4) = CONST 
0x241: v241 = CALLDATALOAD v23f(0x4)
0x242: v242 = AND v241 v23e(0xffffffffffffffffffffffffffffffffffffffff)
0x243: v243(0x24) = CONST 
0x245: v245 = CALLDATALOAD v243(0x24)
0x246: v246(0x5f7) = CONST 
0x249: JUMP v246(0x5f7)
----------------------------------

Begin block 0x24a
prev = {}, next = {'0x251', '0x255'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x24a
0x24b: v24b = CALLVALUE 
0x24c: v24c = ISZERO v24b
0x24d: v24d(0x255) = CONST 
0x250: JUMPI v24d(0x255) v24c
----------------------------------

Begin block 0x251
prev = {'0x24a'}, next = {}
----------------------------------
Block 0x251
0x251: v251(0x0) = CONST 
0x254: REVERT v251(0x0) v251(0x0)
----------------------------------

Begin block 0x255
prev = {'0x24a'}, next = {'0x68b'}
----------------------------------
Block 0x255
0x256: v256(0x159) = CONST 
0x259: v259(0x4) = CONST 
0x25c: v25c = CALLDATALOAD v259(0x4)
0x25d: v25d(0x1) = CONST 
0x25f: v25f(0xa0) = CONST 
0x261: v261(0x2) = CONST 
0x263: v263(0x10000000000000000000000000000000000000000) = EXP v261(0x2) v25f(0xa0)
0x264: v264(0xffffffffffffffffffffffffffffffffffffffff) = SUB v263(0x10000000000000000000000000000000000000000) v25d(0x1)
0x265: v265 = AND v264(0xffffffffffffffffffffffffffffffffffffffff) v25c
0x267: v267(0x24) = CONST 
0x26a: v26a = CALLDATALOAD v267(0x24)
0x26d: v26d(0x64) = CONST 
0x270: v270(0x44) = CONST 
0x272: v272 = CALLDATALOAD v270(0x44)
0x275: v275 = ADD v272 v267(0x24)
0x278: v278 = ADD v259(0x4) v272
0x279: v279 = CALLDATALOAD v278
0x27b: v27b(0x20) = CONST 
0x27d: v27d(0x1f) = CONST 
0x280: v280 = ADD v279 v27d(0x1f)
0x283: v283 = DIV v280 v27b(0x20)
0x285: v285 = MUL v27b(0x20) v283
0x286: v286 = ADD v285 v27b(0x20)
0x287: v287(0x40) = CONST 
0x289: v289 = MLOAD v287(0x40)
0x28c: v28c = ADD v289 v286
0x28d: v28d(0x40) = CONST 
0x28f: MSTORE v28d(0x40) v28c
0x292: MSTORE v289 v279
0x296: v296(0x20) = CONST 
0x299: v299 = ADD v289 v296(0x20)
0x29f: CALLDATACOPY v299 v275 v279
0x2a4: v2a4(0x68b) = CONST 
0x2ae: JUMP v2a4(0x68b)
----------------------------------

Begin block 0x2af
prev = {}, next = {'0x2b6', '0x2ba'}
----------------------------------
function allowance(address,address)()
Block 0x2af
0x2b0: v2b0 = CALLVALUE 
0x2b1: v2b1 = ISZERO v2b0
0x2b2: v2b2(0x2ba) = CONST 
0x2b5: JUMPI v2b2(0x2ba) v2b1
----------------------------------

Begin block 0x2b6
prev = {'0x2af'}, next = {}
----------------------------------
Block 0x2b6
0x2b6: v2b6(0x0) = CONST 
0x2b9: REVERT v2b6(0x0) v2b6(0x0)
----------------------------------

Begin block 0x2ba
prev = {'0x2af'}, next = {'0x82b'}
----------------------------------
Block 0x2ba
0x2bb: v2bb(0x180) = CONST 
0x2be: v2be(0x1) = CONST 
0x2c0: v2c0(0xa0) = CONST 
0x2c2: v2c2(0x2) = CONST 
0x2c4: v2c4(0x10000000000000000000000000000000000000000) = EXP v2c2(0x2) v2c0(0xa0)
0x2c5: v2c5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c4(0x10000000000000000000000000000000000000000) v2be(0x1)
0x2c6: v2c6(0x4) = CONST 
0x2c8: v2c8 = CALLDATALOAD v2c6(0x4)
0x2ca: v2ca = AND v2c5(0xffffffffffffffffffffffffffffffffffffffff) v2c8
0x2cc: v2cc(0x24) = CONST 
0x2ce: v2ce = CALLDATALOAD v2cc(0x24)
0x2cf: v2cf = AND v2ce v2c5(0xffffffffffffffffffffffffffffffffffffffff)
0x2d0: v2d0(0x82b) = CONST 
0x2d3: JUMP v2d0(0x82b)
----------------------------------

Begin block 0x2d4
prev = {}, next = {'0x2df', '0x2db'}
----------------------------------
function initialAmount()()
Block 0x2d4
0x2d5: v2d5 = CALLVALUE 
0x2d6: v2d6 = ISZERO v2d5
0x2d7: v2d7(0x2df) = CONST 
0x2da: JUMPI v2d7(0x2df) v2d6
----------------------------------

Begin block 0x2db
prev = {'0x2d4'}, next = {}
----------------------------------
Block 0x2db
0x2db: v2db(0x0) = CONST 
0x2de: REVERT v2db(0x0) v2db(0x0)
----------------------------------

Begin block 0x2df
prev = {'0x2d4'}, next = {'0x856'}
----------------------------------
Block 0x2df
0x2e0: v2e0(0x180) = CONST 
0x2e3: v2e3(0x856) = CONST 
0x2e6: JUMP v2e3(0x856)
----------------------------------

Begin block 0x2e7
prev = {}, next = {'0x337', '0x37d0x2e7'}
----------------------------------
function 0x2e7(v2e7arg0)
Block 0x2e7
0x2e8: v2e8(0x3) = CONST 
0x2eb: v2eb = SLOAD v2e8(0x3)
0x2ec: v2ec(0x1) = CONST 
0x2ef: v2ef(0x1) = CONST 
0x2f1: v2f1 = AND v2ef(0x1) v2eb
0x2f2: v2f2 = ISZERO v2f1
0x2f3: v2f3(0x100) = CONST 
0x2f6: v2f6 = MUL v2f3(0x100) v2f2
0x2f7: v2f7 = SUB v2f6 v2ec(0x1)
0x2f8: v2f8 = AND v2f7 v2eb
0x2f9: v2f9(0x2) = CONST 
0x2fc: v2fc = DIV v2f8 v2f9(0x2)
0x2fe: v2fe(0x1f) = CONST 
0x300: v300 = ADD v2fe(0x1f) v2fc
0x301: v301(0x20) = CONST 
0x305: v305 = DIV v300 v301(0x20)
0x306: v306 = MUL v305 v301(0x20)
0x307: v307(0x20) = CONST 
0x309: v309 = ADD v307(0x20) v306
0x30a: v30a(0x40) = CONST 
0x30c: v30c = MLOAD v30a(0x40)
0x30f: v30f = ADD v30c v309
0x310: v310(0x40) = CONST 
0x312: MSTORE v310(0x40) v30f
0x319: MSTORE v30c v2fc
0x31a: v31a(0x20) = CONST 
0x31c: v31c = ADD v31a(0x20) v30c
0x31f: v31f = SLOAD v2e8(0x3)
0x320: v320(0x1) = CONST 
0x323: v323(0x1) = CONST 
0x325: v325 = AND v323(0x1) v31f
0x326: v326 = ISZERO v325
0x327: v327(0x100) = CONST 
0x32a: v32a = MUL v327(0x100) v326
0x32b: v32b = SUB v32a v320(0x1)
0x32c: v32c = AND v32b v31f
0x32d: v32d(0x2) = CONST 
0x330: v330 = DIV v32c v32d(0x2)
0x332: v332 = ISZERO v330
0x333: v333(0x37d) = CONST 
0x336: JUMPI v333(0x37d) v332
----------------------------------

Begin block 0x337
prev = {'0x2e7'}, next = {'0x3520x2e7', '0x33f'}
----------------------------------
Block 0x337
0x338: v338(0x1f) = CONST 
0x33a: v33a = LT v338(0x1f) v330
0x33b: v33b(0x352) = CONST 
0x33e: JUMPI v33b(0x352) v33a
----------------------------------

Begin block 0x33f
prev = {'0x337'}, next = {'0x37d0x2e7'}
----------------------------------
Block 0x33f
0x33f: v33f(0x100) = CONST 
0x344: v344 = SLOAD v2e8(0x3)
0x345: v345 = DIV v344 v33f(0x100)
0x346: v346 = MUL v345 v33f(0x100)
0x348: MSTORE v31c v346
0x34a: v34a(0x20) = CONST 
0x34c: v34c = ADD v34a(0x20) v31c
0x34e: v34e(0x37d) = CONST 
0x351: JUMP v34e(0x37d)
----------------------------------

Begin block 0x3520x2e7
prev = {'0x337'}, next = {'0x3600x2e7'}
----------------------------------
Block 0x3520x2e7
0x3540x2e7: v2e7354 = ADD v31c v330
0x3570x2e7: v2e7357(0x0) = CONST 
0x3590x2e7: MSTORE v2e7357(0x0) v2e8(0x3)
0x35a0x2e7: v2e735a(0x20) = CONST 
0x35c0x2e7: v2e735c(0x0) = CONST 
0x35e0x2e7: v2e735e = SHA3 v2e735c(0x0) v2e735a(0x20)
----------------------------------

Begin block 0x3520x506
prev = {'0x556'}, next = {'0x3600x506'}
----------------------------------
Block 0x3520x506
0x3540x506: v506354 = ADD v53b v54f
0x3570x506: v506357(0x0) = CONST 
0x3590x506: MSTORE v506357(0x0) v507(0x6)
0x35a0x506: v50635a(0x20) = CONST 
0x35c0x506: v50635c(0x0) = CONST 
0x35e0x506: v50635e = SHA3 v50635c(0x0) v50635a(0x20)
----------------------------------

Begin block 0x3520x58c
prev = {'0x5dc'}, next = {'0x3600x58c'}
----------------------------------
Block 0x3520x58c
0x3540x58c: v58c354 = ADD v5c1 v5d5
0x3570x58c: v58c357(0x0) = CONST 
0x3590x58c: MSTORE v58c357(0x0) v58d(0x5)
0x35a0x58c: v58c35a(0x20) = CONST 
0x35c0x58c: v58c35c(0x0) = CONST 
0x35e0x58c: v58c35e = SHA3 v58c35c(0x0) v58c35a(0x20)
----------------------------------

Begin block 0x3600x2e7
prev = {'0x3520x2e7', '0x3600x2e7'}, next = {'0x3740x2e7', '0x3600x2e7'}
----------------------------------
Block 0x3600x2e7
0x3600x2e7_0x0: v3602e7_0 = PHI v31c v2e736c
0x3600x2e7_0x1: v3602e7_1 = PHI v2e7368 v2e735e
0x3620x2e7: v2e7362 = SLOAD v3602e7_1
0x3640x2e7: MSTORE v3602e7_0 v2e7362
0x3660x2e7: v2e7366(0x1) = CONST 
0x3680x2e7: v2e7368 = ADD v2e7366(0x1) v3602e7_1
0x36a0x2e7: v2e736a(0x20) = CONST 
0x36c0x2e7: v2e736c = ADD v2e736a(0x20) v3602e7_0
0x36f0x2e7: v2e736f = GT v2e7354 v2e736c
0x3700x2e7: v2e7370(0x360) = CONST 
0x3730x2e7: JUMPI v2e7370(0x360) v2e736f
----------------------------------

Begin block 0x3600x506
prev = {'0x3520x506', '0x3600x506'}, next = {'0x3740x506', '0x3600x506'}
----------------------------------
Block 0x3600x506
0x3600x506_0x0: v360506_0 = PHI v53b v50636c
0x3600x506_0x1: v360506_1 = PHI v506368 v50635e
0x3620x506: v506362 = SLOAD v360506_1
0x3640x506: MSTORE v360506_0 v506362
0x3660x506: v506366(0x1) = CONST 
0x3680x506: v506368 = ADD v506366(0x1) v360506_1
0x36a0x506: v50636a(0x20) = CONST 
0x36c0x506: v50636c = ADD v50636a(0x20) v360506_0
0x36f0x506: v50636f = GT v506354 v50636c
0x3700x506: v506370(0x360) = CONST 
0x3730x506: JUMPI v506370(0x360) v50636f
----------------------------------

Begin block 0x3600x58c
prev = {'0x3600x58c', '0x3520x58c'}, next = {'0x3600x58c', '0x3740x58c'}
----------------------------------
Block 0x3600x58c
0x3600x58c_0x0: v36058c_0 = PHI v5c1 v58c36c
0x3600x58c_0x1: v36058c_1 = PHI v58c368 v58c35e
0x3620x58c: v58c362 = SLOAD v36058c_1
0x3640x58c: MSTORE v36058c_0 v58c362
0x3660x58c: v58c366(0x1) = CONST 
0x3680x58c: v58c368 = ADD v58c366(0x1) v36058c_1
0x36a0x58c: v58c36a(0x20) = CONST 
0x36c0x58c: v58c36c = ADD v58c36a(0x20) v36058c_0
0x36f0x58c: v58c36f = GT v58c354 v58c36c
0x3700x58c: v58c370(0x360) = CONST 
0x3730x58c: JUMPI v58c370(0x360) v58c36f
----------------------------------

Begin block 0x3740x2e7
prev = {'0x3600x2e7'}, next = {'0x37d0x2e7'}
----------------------------------
Block 0x3740x2e7
0x3760x2e7: v2e7376 = SUB v2e736c v2e7354
0x3770x2e7: v2e7377(0x1f) = CONST 
0x3790x2e7: v2e7379 = AND v2e7377(0x1f) v2e7376
0x37b0x2e7: v2e737b = ADD v2e7354 v2e7379
----------------------------------

Begin block 0x3740x506
prev = {'0x3600x506'}, next = {'0x37d0x506'}
----------------------------------
Block 0x3740x506
0x3760x506: v506376 = SUB v50636c v506354
0x3770x506: v506377(0x1f) = CONST 
0x3790x506: v506379 = AND v506377(0x1f) v506376
0x37b0x506: v50637b = ADD v506354 v506379
----------------------------------

Begin block 0x3740x58c
prev = {'0x3600x58c'}, next = {'0x37d0x58c'}
----------------------------------
Block 0x3740x58c
0x3760x58c: v58c376 = SUB v58c36c v58c354
0x3770x58c: v58c377(0x1f) = CONST 
0x3790x58c: v58c379 = AND v58c377(0x1f) v58c376
0x37b0x58c: v58c37b = ADD v58c354 v58c379
----------------------------------

Begin block 0x37d0x2e7
prev = {'0x3740x2e7', '0x2e7', '0x33f'}, next = {}
----------------------------------
Block 0x37d0x2e7
0x3840x2e7: RETURNPRIVATE v2e7arg0 v30c v2e7arg0
----------------------------------

Begin block 0x37d0x506
prev = {'0x3740x506', '0x55e', '0x506'}, next = {}
----------------------------------
Block 0x37d0x506
0x3840x506: RETURNPRIVATE v506arg0 v52b v506arg0
----------------------------------

Begin block 0x37d0x58c
prev = {'0x58c', '0x3740x58c', '0x5e4'}, next = {}
----------------------------------
Block 0x37d0x58c
0x3840x58c: RETURNPRIVATE v58carg0 v5b1 v58carg0
----------------------------------

Begin block 0x385
prev = {'0x142'}, next = {'0x1590x137'}
----------------------------------
Block 0x385
0x386: v386(0x1) = CONST 
0x388: v388(0xa0) = CONST 
0x38a: v38a(0x2) = CONST 
0x38c: v38c(0x10000000000000000000000000000000000000000) = EXP v38a(0x2) v388(0xa0)
0x38d: v38d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v38c(0x10000000000000000000000000000000000000000) v386(0x1)
0x38e: v38e = CALLER 
0x390: v390 = AND v38d(0xffffffffffffffffffffffffffffffffffffffff) v38e
0x391: v391(0x0) = CONST 
0x395: MSTORE v391(0x0) v390
0x396: v396(0x2) = CONST 
0x398: v398(0x20) = CONST 
0x39c: MSTORE v398(0x20) v396(0x2)
0x39d: v39d(0x40) = CONST 
0x3a1: v3a1 = SHA3 v391(0x0) v39d(0x40)
0x3a4: v3a4 = AND v151 v38d(0xffffffffffffffffffffffffffffffffffffffff)
0x3a7: MSTORE v391(0x0) v3a4
0x3ab: MSTORE v398(0x20) v3a1
0x3ae: v3ae = SHA3 v391(0x0) v39d(0x40)
0x3b1: SSTORE v3ae v154
0x3b6: v3b6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x3da: v3da = MLOAD v39d(0x40)
0x3dd: MSTORE v3da v154
0x3de: v3de(0x20) = CONST 
0x3e0: v3e0 = ADD v3de(0x20) v3da
0x3e1: v3e1(0x40) = CONST 
0x3e3: v3e3 = MLOAD v3e1(0x40)
0x3e6: v3e6 = SUB v3e0 v3e3
0x3e8: LOG3 v3e3 v3e6 v3b6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v390 v3a4
0x3ea: v3ea(0x1) = CONST 
0x3f0: JUMP v143(0x159)
----------------------------------

Begin block 0x3f1
prev = {'0x178'}, next = {'0x1800x16d'}
----------------------------------
Block 0x3f1
0x3f2: v3f2(0x0) = CONST 
0x3f4: v3f4 = SLOAD v3f2(0x0)
0x3f6: JUMP v179(0x180)
----------------------------------

Begin block 0x3f7
prev = {'0x19d'}, next = {'0x43b', '0x436'}
----------------------------------
Block 0x3f7
0x3f8: v3f8(0x1) = CONST 
0x3fa: v3fa(0xa0) = CONST 
0x3fc: v3fc(0x2) = CONST 
0x3fe: v3fe(0x10000000000000000000000000000000000000000) = EXP v3fc(0x2) v3fa(0xa0)
0x3ff: v3ff(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3fe(0x10000000000000000000000000000000000000000) v3f8(0x1)
0x402: v402 = AND v1ad v3ff(0xffffffffffffffffffffffffffffffffffffffff)
0x403: v403(0x0) = CONST 
0x407: MSTORE v403(0x0) v402
0x408: v408(0x2) = CONST 
0x40a: v40a(0x20) = CONST 
0x40e: MSTORE v40a(0x20) v408(0x2)
0x40f: v40f(0x40) = CONST 
0x413: v413 = SHA3 v403(0x0) v40f(0x40)
0x414: v414 = CALLER 
0x417: v417 = AND v3ff(0xffffffffffffffffffffffffffffffffffffffff) v414
0x419: MSTORE v403(0x0) v417
0x41c: MSTORE v40a(0x20) v413
0x41f: v41f = SHA3 v403(0x0) v40f(0x40)
0x420: v420 = SLOAD v41f
0x423: MSTORE v403(0x0) v402
0x424: v424(0x1) = CONST 
0x427: MSTORE v40a(0x20) v424(0x1)
0x42a: v42a = SHA3 v403(0x0) v40f(0x40)
0x42b: v42b = SLOAD v42a
0x42e: v42e = LT v42b v1b5
0x430: v430 = ISZERO v42e
0x432: v432(0x43b) = CONST 
0x435: JUMPI v432(0x43b) v42e
----------------------------------

Begin block 0x436
prev = {'0x3f7'}, next = {'0x43b'}
----------------------------------
Block 0x436
0x439: v439 = LT v420 v1b5
0x43a: v43a = ISZERO v439
----------------------------------

Begin block 0x43b
prev = {'0x3f7', '0x436'}, next = {'0x442', '0x446'}
----------------------------------
Block 0x43b
0x43b_0x0: v43b_0 = PHI v430 v43a
0x43c: v43c = ISZERO v43b_0
0x43d: v43d = ISZERO v43c
0x43e: v43e(0x446) = CONST 
0x441: JUMPI v43e(0x446) v43d
----------------------------------

Begin block 0x442
prev = {'0x43b'}, next = {}
----------------------------------
Block 0x442
0x442: v442(0x0) = CONST 
0x445: REVERT v442(0x0) v442(0x0)
----------------------------------

Begin block 0x446
prev = {'0x43b'}, next = {'0x4ab', '0x47e'}
----------------------------------
Block 0x446
0x447: v447(0x1) = CONST 
0x449: v449(0xa0) = CONST 
0x44b: v44b(0x2) = CONST 
0x44d: v44d(0x10000000000000000000000000000000000000000) = EXP v44b(0x2) v449(0xa0)
0x44e: v44e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v44d(0x10000000000000000000000000000000000000000) v447(0x1)
0x451: v451 = AND v1b2 v44e(0xffffffffffffffffffffffffffffffffffffffff)
0x452: v452(0x0) = CONST 
0x456: MSTORE v452(0x0) v451
0x457: v457(0x1) = CONST 
0x459: v459(0x20) = CONST 
0x45b: MSTORE v459(0x20) v457(0x1)
0x45c: v45c(0x40) = CONST 
0x460: v460 = SHA3 v452(0x0) v45c(0x40)
0x462: v462 = SLOAD v460
0x464: v464 = ADD v1b5 v462
0x466: SSTORE v460 v464
0x469: v469 = AND v1ad v44e(0xffffffffffffffffffffffffffffffffffffffff)
0x46b: MSTORE v452(0x0) v469
0x46c: v46c = SHA3 v452(0x0) v45c(0x40)
0x46e: v46e = SLOAD v46c
0x471: v471 = SUB v46e v1b5
0x473: SSTORE v46c v471
0x474: v474(0x0) = CONST 
0x476: v476(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v474(0x0)
0x478: v478 = LT v420 v476(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x479: v479 = ISZERO v478
0x47a: v47a(0x4ab) = CONST 
0x47d: JUMPI v47a(0x4ab) v479
----------------------------------

Begin block 0x47e
prev = {'0x446'}, next = {'0x4ab'}
----------------------------------
Block 0x47e
0x47e: v47e(0x1) = CONST 
0x480: v480(0xa0) = CONST 
0x482: v482(0x2) = CONST 
0x484: v484(0x10000000000000000000000000000000000000000) = EXP v482(0x2) v480(0xa0)
0x485: v485(0xffffffffffffffffffffffffffffffffffffffff) = SUB v484(0x10000000000000000000000000000000000000000) v47e(0x1)
0x488: v488 = AND v1ad v485(0xffffffffffffffffffffffffffffffffffffffff)
0x489: v489(0x0) = CONST 
0x48d: MSTORE v489(0x0) v488
0x48e: v48e(0x2) = CONST 
0x490: v490(0x20) = CONST 
0x494: MSTORE v490(0x20) v48e(0x2)
0x495: v495(0x40) = CONST 
0x499: v499 = SHA3 v489(0x0) v495(0x40)
0x49a: v49a = CALLER 
0x49d: v49d = AND v485(0xffffffffffffffffffffffffffffffffffffffff) v49a
0x49f: MSTORE v489(0x0) v49d
0x4a2: MSTORE v490(0x20) v499
0x4a3: v4a3 = SHA3 v489(0x0) v495(0x40)
0x4a5: v4a5 = SLOAD v4a3
0x4a8: v4a8 = SUB v4a5 v1b5
0x4aa: SSTORE v4a3 v4a8
----------------------------------

Begin block 0x4ab
prev = {'0x47e', '0x446'}, next = {'0x1590x192'}
----------------------------------
Block 0x4ab
0x4ad: v4ad(0x1) = CONST 
0x4af: v4af(0xa0) = CONST 
0x4b1: v4b1(0x2) = CONST 
0x4b3: v4b3(0x10000000000000000000000000000000000000000) = EXP v4b1(0x2) v4af(0xa0)
0x4b4: v4b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4b3(0x10000000000000000000000000000000000000000) v4ad(0x1)
0x4b5: v4b5 = AND v4b4(0xffffffffffffffffffffffffffffffffffffffff) v1b2
0x4b7: v4b7(0x1) = CONST 
0x4b9: v4b9(0xa0) = CONST 
0x4bb: v4bb(0x2) = CONST 
0x4bd: v4bd(0x10000000000000000000000000000000000000000) = EXP v4bb(0x2) v4b9(0xa0)
0x4be: v4be(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4bd(0x10000000000000000000000000000000000000000) v4b7(0x1)
0x4bf: v4bf = AND v4be(0xffffffffffffffffffffffffffffffffffffffff) v1ad
0x4c0: v4c0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x4e2: v4e2(0x40) = CONST 
0x4e4: v4e4 = MLOAD v4e2(0x40)
0x4e7: MSTORE v4e4 v1b5
0x4e8: v4e8(0x20) = CONST 
0x4ea: v4ea = ADD v4e8(0x20) v4e4
0x4eb: v4eb(0x40) = CONST 
0x4ed: v4ed = MLOAD v4eb(0x40)
0x4f0: v4f0 = SUB v4ea v4ed
0x4f2: LOG3 v4ed v4f0 v4c0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v4bf v4b5
0x4f4: v4f4(0x1) = CONST 
0x4fc: JUMP v19e(0x159)
----------------------------------

Begin block 0x4fd
prev = {'0x1c5'}, next = {'0x1cd'}
----------------------------------
Block 0x4fd
0x4fe: v4fe(0x4) = CONST 
0x500: v500 = SLOAD v4fe(0x4)
0x501: v501(0xff) = CONST 
0x503: v503 = AND v501(0xff) v500
0x505: JUMP v1c6(0x1cd)
----------------------------------

Begin block 0x506
prev = {}, next = {'0x556', '0x37d0x506'}
----------------------------------
function 0x506(v506arg0)
Block 0x506
0x507: v507(0x6) = CONST 
0x50a: v50a = SLOAD v507(0x6)
0x50b: v50b(0x1) = CONST 
0x50e: v50e(0x1) = CONST 
0x510: v510 = AND v50e(0x1) v50a
0x511: v511 = ISZERO v510
0x512: v512(0x100) = CONST 
0x515: v515 = MUL v512(0x100) v511
0x516: v516 = SUB v515 v50b(0x1)
0x517: v517 = AND v516 v50a
0x518: v518(0x2) = CONST 
0x51b: v51b = DIV v517 v518(0x2)
0x51d: v51d(0x1f) = CONST 
0x51f: v51f = ADD v51d(0x1f) v51b
0x520: v520(0x20) = CONST 
0x524: v524 = DIV v51f v520(0x20)
0x525: v525 = MUL v524 v520(0x20)
0x526: v526(0x20) = CONST 
0x528: v528 = ADD v526(0x20) v525
0x529: v529(0x40) = CONST 
0x52b: v52b = MLOAD v529(0x40)
0x52e: v52e = ADD v52b v528
0x52f: v52f(0x40) = CONST 
0x531: MSTORE v52f(0x40) v52e
0x538: MSTORE v52b v51b
0x539: v539(0x20) = CONST 
0x53b: v53b = ADD v539(0x20) v52b
0x53e: v53e = SLOAD v507(0x6)
0x53f: v53f(0x1) = CONST 
0x542: v542(0x1) = CONST 
0x544: v544 = AND v542(0x1) v53e
0x545: v545 = ISZERO v544
0x546: v546(0x100) = CONST 
0x549: v549 = MUL v546(0x100) v545
0x54a: v54a = SUB v549 v53f(0x1)
0x54b: v54b = AND v54a v53e
0x54c: v54c(0x2) = CONST 
0x54f: v54f = DIV v54b v54c(0x2)
0x551: v551 = ISZERO v54f
0x552: v552(0x37d) = CONST 
0x555: JUMPI v552(0x37d) v551
----------------------------------

Begin block 0x556
prev = {'0x506'}, next = {'0x55e', '0x3520x506'}
----------------------------------
Block 0x556
0x557: v557(0x1f) = CONST 
0x559: v559 = LT v557(0x1f) v54f
0x55a: v55a(0x352) = CONST 
0x55d: JUMPI v55a(0x352) v559
----------------------------------

Begin block 0x55e
prev = {'0x556'}, next = {'0x37d0x506'}
----------------------------------
Block 0x55e
0x55e: v55e(0x100) = CONST 
0x563: v563 = SLOAD v507(0x6)
0x564: v564 = DIV v563 v55e(0x100)
0x565: v565 = MUL v564 v55e(0x100)
0x567: MSTORE v53b v565
0x569: v569(0x20) = CONST 
0x56b: v56b = ADD v569(0x20) v53b
0x56d: v56d(0x37d) = CONST 
0x570: JUMP v56d(0x37d)
----------------------------------

Begin block 0x571
prev = {'0x201'}, next = {'0x1800x1f6'}
----------------------------------
Block 0x571
0x572: v572(0x1) = CONST 
0x574: v574(0xa0) = CONST 
0x576: v576(0x2) = CONST 
0x578: v578(0x10000000000000000000000000000000000000000) = EXP v576(0x2) v574(0xa0)
0x579: v579(0xffffffffffffffffffffffffffffffffffffffff) = SUB v578(0x10000000000000000000000000000000000000000) v572(0x1)
0x57a: v57a = AND v579(0xffffffffffffffffffffffffffffffffffffffff) v210
0x57b: v57b(0x0) = CONST 
0x57f: MSTORE v57b(0x0) v57a
0x580: v580(0x1) = CONST 
0x582: v582(0x20) = CONST 
0x584: MSTORE v582(0x20) v580(0x1)
0x585: v585(0x40) = CONST 
0x588: v588 = SHA3 v57b(0x0) v585(0x40)
0x589: v589 = SLOAD v588
0x58b: JUMP v202(0x180)
----------------------------------

Begin block 0x58c
prev = {}, next = {'0x5dc', '0x37d0x58c'}
----------------------------------
function 0x58c(v58carg0)
Block 0x58c
0x58d: v58d(0x5) = CONST 
0x590: v590 = SLOAD v58d(0x5)
0x591: v591(0x1) = CONST 
0x594: v594(0x1) = CONST 
0x596: v596 = AND v594(0x1) v590
0x597: v597 = ISZERO v596
0x598: v598(0x100) = CONST 
0x59b: v59b = MUL v598(0x100) v597
0x59c: v59c = SUB v59b v591(0x1)
0x59d: v59d = AND v59c v590
0x59e: v59e(0x2) = CONST 
0x5a1: v5a1 = DIV v59d v59e(0x2)
0x5a3: v5a3(0x1f) = CONST 
0x5a5: v5a5 = ADD v5a3(0x1f) v5a1
0x5a6: v5a6(0x20) = CONST 
0x5aa: v5aa = DIV v5a5 v5a6(0x20)
0x5ab: v5ab = MUL v5aa v5a6(0x20)
0x5ac: v5ac(0x20) = CONST 
0x5ae: v5ae = ADD v5ac(0x20) v5ab
0x5af: v5af(0x40) = CONST 
0x5b1: v5b1 = MLOAD v5af(0x40)
0x5b4: v5b4 = ADD v5b1 v5ae
0x5b5: v5b5(0x40) = CONST 
0x5b7: MSTORE v5b5(0x40) v5b4
0x5be: MSTORE v5b1 v5a1
0x5bf: v5bf(0x20) = CONST 
0x5c1: v5c1 = ADD v5bf(0x20) v5b1
0x5c4: v5c4 = SLOAD v58d(0x5)
0x5c5: v5c5(0x1) = CONST 
0x5c8: v5c8(0x1) = CONST 
0x5ca: v5ca = AND v5c8(0x1) v5c4
0x5cb: v5cb = ISZERO v5ca
0x5cc: v5cc(0x100) = CONST 
0x5cf: v5cf = MUL v5cc(0x100) v5cb
0x5d0: v5d0 = SUB v5cf v5c5(0x1)
0x5d1: v5d1 = AND v5d0 v5c4
0x5d2: v5d2(0x2) = CONST 
0x5d5: v5d5 = DIV v5d1 v5d2(0x2)
0x5d7: v5d7 = ISZERO v5d5
0x5d8: v5d8(0x37d) = CONST 
0x5db: JUMPI v5d8(0x37d) v5d7
----------------------------------

Begin block 0x5dc
prev = {'0x58c'}, next = {'0x3520x58c', '0x5e4'}
----------------------------------
Block 0x5dc
0x5dd: v5dd(0x1f) = CONST 
0x5df: v5df = LT v5dd(0x1f) v5d5
0x5e0: v5e0(0x352) = CONST 
0x5e3: JUMPI v5e0(0x352) v5df
----------------------------------

Begin block 0x5e4
prev = {'0x5dc'}, next = {'0x37d0x58c'}
----------------------------------
Block 0x5e4
0x5e4: v5e4(0x100) = CONST 
0x5e9: v5e9 = SLOAD v58d(0x5)
0x5ea: v5ea = DIV v5e9 v5e4(0x100)
0x5eb: v5eb = MUL v5ea v5e4(0x100)
0x5ed: MSTORE v5c1 v5eb
0x5ef: v5ef(0x20) = CONST 
0x5f1: v5f1 = ADD v5ef(0x20) v5c1
0x5f3: v5f3(0x37d) = CONST 
0x5f6: JUMP v5f3(0x37d)
----------------------------------

Begin block 0x5f7
prev = {'0x233'}, next = {'0x61d', '0x619'}
----------------------------------
Block 0x5f7
0x5f8: v5f8(0x1) = CONST 
0x5fa: v5fa(0xa0) = CONST 
0x5fc: v5fc(0x2) = CONST 
0x5fe: v5fe(0x10000000000000000000000000000000000000000) = EXP v5fc(0x2) v5fa(0xa0)
0x5ff: v5ff(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5fe(0x10000000000000000000000000000000000000000) v5f8(0x1)
0x600: v600 = CALLER 
0x601: v601 = AND v600 v5ff(0xffffffffffffffffffffffffffffffffffffffff)
0x602: v602(0x0) = CONST 
0x606: MSTORE v602(0x0) v601
0x607: v607(0x1) = CONST 
0x609: v609(0x20) = CONST 
0x60b: MSTORE v609(0x20) v607(0x1)
0x60c: v60c(0x40) = CONST 
0x60f: v60f = SHA3 v602(0x0) v60c(0x40)
0x610: v610 = SLOAD v60f
0x613: v613 = LT v610 v245
0x614: v614 = ISZERO v613
0x615: v615(0x61d) = CONST 
0x618: JUMPI v615(0x61d) v614
----------------------------------

Begin block 0x619
prev = {'0x5f7'}, next = {}
----------------------------------
Block 0x619
0x619: v619(0x0) = CONST 
0x61c: REVERT v619(0x0) v619(0x0)
----------------------------------

Begin block 0x61d
prev = {'0x5f7'}, next = {'0x1590x228'}
----------------------------------
Block 0x61d
0x61e: v61e(0x1) = CONST 
0x620: v620(0xa0) = CONST 
0x622: v622(0x2) = CONST 
0x624: v624(0x10000000000000000000000000000000000000000) = EXP v622(0x2) v620(0xa0)
0x625: v625(0xffffffffffffffffffffffffffffffffffffffff) = SUB v624(0x10000000000000000000000000000000000000000) v61e(0x1)
0x626: v626 = CALLER 
0x628: v628 = AND v625(0xffffffffffffffffffffffffffffffffffffffff) v626
0x629: v629(0x0) = CONST 
0x62d: MSTORE v629(0x0) v628
0x62e: v62e(0x1) = CONST 
0x630: v630(0x20) = CONST 
0x632: MSTORE v630(0x20) v62e(0x1)
0x633: v633(0x40) = CONST 
0x637: v637 = SHA3 v629(0x0) v633(0x40)
0x639: v639 = SLOAD v637
0x63c: v63c = SUB v639 v245
0x63e: SSTORE v637 v63c
0x641: v641 = AND v242 v625(0xffffffffffffffffffffffffffffffffffffffff)
0x644: MSTORE v629(0x0) v641
0x648: v648 = SHA3 v629(0x0) v633(0x40)
0x64a: v64a = SLOAD v648
0x64c: v64c = ADD v245 v64a
0x64e: SSTORE v648 v64c
0x650: v650(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x674: v674 = MLOAD v633(0x40)
0x677: MSTORE v674 v245
0x678: v678(0x20) = CONST 
0x67a: v67a = ADD v678(0x20) v674
0x67b: v67b(0x40) = CONST 
0x67d: v67d = MLOAD v67b(0x40)
0x680: v680 = SUB v67a v67d
0x682: LOG3 v67d v680 v650(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v628 v641
0x684: v684(0x1) = CONST 
0x68a: JUMP v234(0x159)
----------------------------------

Begin block 0x68b
prev = {'0x255'}, next = {'0x7b4'}
----------------------------------
Block 0x68b
0x68c: v68c(0x1) = CONST 
0x68e: v68e(0xa0) = CONST 
0x690: v690(0x2) = CONST 
0x692: v692(0x10000000000000000000000000000000000000000) = EXP v690(0x2) v68e(0xa0)
0x693: v693(0xffffffffffffffffffffffffffffffffffffffff) = SUB v692(0x10000000000000000000000000000000000000000) v68c(0x1)
0x694: v694 = CALLER 
0x696: v696 = AND v693(0xffffffffffffffffffffffffffffffffffffffff) v694
0x697: v697(0x0) = CONST 
0x69b: MSTORE v697(0x0) v696
0x69c: v69c(0x2) = CONST 
0x69e: v69e(0x20) = CONST 
0x6a2: MSTORE v69e(0x20) v69c(0x2)
0x6a3: v6a3(0x40) = CONST 
0x6a7: v6a7 = SHA3 v697(0x0) v6a3(0x40)
0x6aa: v6aa = AND v265 v693(0xffffffffffffffffffffffffffffffffffffffff)
0x6ad: MSTORE v697(0x0) v6aa
0x6b1: MSTORE v69e(0x20) v6a7
0x6b4: v6b4 = SHA3 v697(0x0) v6a3(0x40)
0x6b7: SSTORE v6b4 v26a
0x6bc: v6bc(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x6e0: v6e0 = MLOAD v6a3(0x40)
0x6e3: MSTORE v6e0 v26a
0x6e4: v6e4(0x20) = CONST 
0x6e6: v6e6 = ADD v6e4(0x20) v6e0
0x6e7: v6e7(0x40) = CONST 
0x6e9: v6e9 = MLOAD v6e7(0x40)
0x6ec: v6ec = SUB v6e6 v6e9
0x6ee: LOG3 v6e9 v6ec v6bc(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v696 v6aa
0x6f0: v6f0(0x1) = CONST 
0x6f2: v6f2(0xa0) = CONST 
0x6f4: v6f4(0x2) = CONST 
0x6f6: v6f6(0x10000000000000000000000000000000000000000) = EXP v6f4(0x2) v6f2(0xa0)
0x6f7: v6f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6f6(0x10000000000000000000000000000000000000000) v6f0(0x1)
0x6f8: v6f8 = AND v6f7(0xffffffffffffffffffffffffffffffffffffffff) v265
0x6f9: v6f9(0x40) = CONST 
0x6fb: v6fb = MLOAD v6f9(0x40)
0x6fc: v6fc(0x72656365697665417070726f76616c28616464726573732c75696e743235362c) = CONST 
0x71e: MSTORE v6fb v6fc(0x72656365697665417070726f76616c28616464726573732c75696e743235362c)
0x71f: v71f(0x616464726573732c627974657329000000000000000000000000000000000000) = CONST 
0x740: v740(0x20) = CONST 
0x743: v743 = ADD v6fb v740(0x20)
0x744: MSTORE v743 v71f(0x616464726573732c627974657329000000000000000000000000000000000000)
0x745: v745(0x2e) = CONST 
0x747: v747 = ADD v745(0x2e) v6fb
0x748: v748(0x40) = CONST 
0x74a: v74a = MLOAD v748(0x40)
0x74d: v74d = SUB v747 v74a
0x74f: v74f = SHA3 v74a v74d
0x750: v750(0xe0) = CONST 
0x752: v752(0x2) = CONST 
0x754: v754(0x100000000000000000000000000000000000000000000000000000000) = EXP v752(0x2) v750(0xe0)
0x756: v756 = DIV v74f v754(0x100000000000000000000000000000000000000000000000000000000)
0x757: v757 = CALLER 
0x759: v759 = ADDRESS 
0x75b: v75b(0x40) = CONST 
0x75d: v75d = MLOAD v75b(0x40)
0x75f: v75f(0xffffffff) = CONST 
0x764: v764 = AND v75f(0xffffffff) v756
0x765: v765(0xe0) = CONST 
0x767: v767(0x2) = CONST 
0x769: v769(0x100000000000000000000000000000000000000000000000000000000) = EXP v767(0x2) v765(0xe0)
0x76a: v76a = MUL v769(0x100000000000000000000000000000000000000000000000000000000) v764
0x76c: MSTORE v75d v76a
0x76d: v76d(0x4) = CONST 
0x76f: v76f = ADD v76d(0x4) v75d
0x772: v772(0x1) = CONST 
0x774: v774(0xa0) = CONST 
0x776: v776(0x2) = CONST 
0x778: v778(0x10000000000000000000000000000000000000000) = EXP v776(0x2) v774(0xa0)
0x779: v779(0xffffffffffffffffffffffffffffffffffffffff) = SUB v778(0x10000000000000000000000000000000000000000) v772(0x1)
0x77a: v77a = AND v779(0xffffffffffffffffffffffffffffffffffffffff) v757
0x77b: v77b(0x1) = CONST 
0x77d: v77d(0xa0) = CONST 
0x77f: v77f(0x2) = CONST 
0x781: v781(0x10000000000000000000000000000000000000000) = EXP v77f(0x2) v77d(0xa0)
0x782: v782(0xffffffffffffffffffffffffffffffffffffffff) = SUB v781(0x10000000000000000000000000000000000000000) v77b(0x1)
0x783: v783 = AND v782(0xffffffffffffffffffffffffffffffffffffffff) v77a
0x785: MSTORE v76f v783
0x786: v786(0x20) = CONST 
0x788: v788 = ADD v786(0x20) v76f
0x78b: MSTORE v788 v26a
0x78c: v78c(0x20) = CONST 
0x78e: v78e = ADD v78c(0x20) v788
0x790: v790(0x1) = CONST 
0x792: v792(0xa0) = CONST 
0x794: v794(0x2) = CONST 
0x796: v796(0x10000000000000000000000000000000000000000) = EXP v794(0x2) v792(0xa0)
0x797: v797(0xffffffffffffffffffffffffffffffffffffffff) = SUB v796(0x10000000000000000000000000000000000000000) v790(0x1)
0x798: v798 = AND v797(0xffffffffffffffffffffffffffffffffffffffff) v759
0x799: v799(0x1) = CONST 
0x79b: v79b(0xa0) = CONST 
0x79d: v79d(0x2) = CONST 
0x79f: v79f(0x10000000000000000000000000000000000000000) = EXP v79d(0x2) v79b(0xa0)
0x7a0: v7a0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v79f(0x10000000000000000000000000000000000000000) v799(0x1)
0x7a1: v7a1 = AND v7a0(0xffffffffffffffffffffffffffffffffffffffff) v798
0x7a3: MSTORE v78e v7a1
0x7a4: v7a4(0x20) = CONST 
0x7a6: v7a6 = ADD v7a4(0x20) v78e
0x7a9: v7a9 = MLOAD v289
0x7ab: v7ab(0x20) = CONST 
0x7ad: v7ad = ADD v7ab(0x20) v289
0x7b2: v7b2(0x0) = CONST 
----------------------------------

Begin block 0x7b4
prev = {'0x7bd', '0x68b'}, next = {'0x7bd', '0x7cc'}
----------------------------------
Block 0x7b4
0x7b4_0x0: v7b4_0 = PHI v7b2(0x0) v7c7
0x7b7: v7b7 = LT v7b4_0 v7a9
0x7b8: v7b8 = ISZERO v7b7
0x7b9: v7b9(0x7cc) = CONST 
0x7bc: JUMPI v7b9(0x7cc) v7b8
----------------------------------

Begin block 0x7bd
prev = {'0x7b4'}, next = {'0x7b4'}
----------------------------------
Block 0x7bd
0x7bd_0x0: v7bd_0 = PHI v7b2(0x0) v7c7
0x7bf: v7bf = ADD v7ad v7bd_0
0x7c0: v7c0 = MLOAD v7bf
0x7c3: v7c3 = ADD v7bd_0 v7a6
0x7c4: MSTORE v7c3 v7c0
0x7c5: v7c5(0x20) = CONST 
0x7c7: v7c7 = ADD v7c5(0x20) v7bd_0
0x7c8: v7c8(0x7b4) = CONST 
0x7cb: JUMP v7c8(0x7b4)
----------------------------------

Begin block 0x7cc
prev = {'0x7b4'}, next = {'0x7f9', '0x7e0'}
----------------------------------
Block 0x7cc
0x7d5: v7d5 = ADD v7a9 v7a6
0x7d7: v7d7(0x1f) = CONST 
0x7d9: v7d9 = AND v7d7(0x1f) v7a9
0x7db: v7db = ISZERO v7d9
0x7dc: v7dc(0x7f9) = CONST 
0x7df: JUMPI v7dc(0x7f9) v7db
----------------------------------

Begin block 0x7e0
prev = {'0x7cc'}, next = {'0x7f9'}
----------------------------------
Block 0x7e0
0x7e2: v7e2 = SUB v7d5 v7d9
0x7e4: v7e4 = MLOAD v7e2
0x7e5: v7e5(0x1) = CONST 
0x7e8: v7e8(0x20) = CONST 
0x7ea: v7ea = SUB v7e8(0x20) v7d9
0x7eb: v7eb(0x100) = CONST 
0x7ee: v7ee = EXP v7eb(0x100) v7ea
0x7ef: v7ef = SUB v7ee v7e5(0x1)
0x7f0: v7f0 = NOT v7ef
0x7f1: v7f1 = AND v7f0 v7e4
0x7f3: MSTORE v7e2 v7f1
0x7f4: v7f4(0x20) = CONST 
0x7f6: v7f6 = ADD v7f4(0x20) v7e2
----------------------------------

Begin block 0x7f9
prev = {'0x7cc', '0x7e0'}, next = {'0x81d', '0x821'}
----------------------------------
Block 0x7f9
0x7f9_0x1: v7f9_1 = PHI v7d5 v7f6
0x801: v801(0x0) = CONST 
0x803: v803(0x40) = CONST 
0x805: v805 = MLOAD v803(0x40)
0x808: v808 = SUB v7f9_1 v805
0x80a: v80a(0x0) = CONST 
0x80d: v80d(0x646e) = CONST 
0x810: v810 = GAS 
0x811: v811 = SUB v810 v80d(0x646e)
0x812: v812 = CALL v811 v6f8 v80a(0x0) v805 v808 v805 v801(0x0)
0x817: v817 = ISZERO v812
0x818: v818 = ISZERO v817
0x819: v819(0x821) = CONST 
0x81c: JUMPI v819(0x821) v818
----------------------------------

Begin block 0x81d
prev = {'0x7f9'}, next = {}
----------------------------------
Block 0x81d
0x81d: v81d(0x0) = CONST 
0x820: REVERT v81d(0x0) v81d(0x0)
----------------------------------

Begin block 0x821
prev = {'0x7f9'}, next = {'0x1590x24a'}
----------------------------------
Block 0x821
0x823: v823(0x1) = CONST 
0x82a: JUMP v256(0x159)
----------------------------------

Begin block 0x82b
prev = {'0x2ba'}, next = {'0x1800x2af'}
----------------------------------
Block 0x82b
0x82c: v82c(0x1) = CONST 
0x82e: v82e(0xa0) = CONST 
0x830: v830(0x2) = CONST 
0x832: v832(0x10000000000000000000000000000000000000000) = EXP v830(0x2) v82e(0xa0)
0x833: v833(0xffffffffffffffffffffffffffffffffffffffff) = SUB v832(0x10000000000000000000000000000000000000000) v82c(0x1)
0x836: v836 = AND v833(0xffffffffffffffffffffffffffffffffffffffff) v2ca
0x837: v837(0x0) = CONST 
0x83b: MSTORE v837(0x0) v836
0x83c: v83c(0x2) = CONST 
0x83e: v83e(0x20) = CONST 
0x842: MSTORE v83e(0x20) v83c(0x2)
0x843: v843(0x40) = CONST 
0x847: v847 = SHA3 v837(0x0) v843(0x40)
0x84b: v84b = AND v833(0xffffffffffffffffffffffffffffffffffffffff) v2cf
0x84d: MSTORE v837(0x0) v84b
0x851: MSTORE v83e(0x20) v847
0x852: v852 = SHA3 v837(0x0) v843(0x40)
0x853: v853 = SLOAD v852
0x855: JUMP v2bb(0x180)
----------------------------------

Begin block 0x856
prev = {'0x2df'}, next = {'0x1800x2d4'}
----------------------------------
Block 0x856
0x857: v857(0x7) = CONST 
0x859: v859 = SLOAD v857(0x7)
0x85b: JUMP v2e0(0x180)
----------------------------------

Begin block 0x8a2
prev = {'0x0', '0x95'}, next = {}
----------------------------------
Block 0x8a2
0x8a3: v8a3(0xa0) = CONST 
0x8a4: CALLPRIVATE v8a3(0xa0)
----------------------------------

Begin block 0x8a5
prev = {'0xd'}, next = {}
----------------------------------
Block 0x8a5
0x8a6: v8a6(0xad) = CONST 
0x8a7: CALLPRIVATE v8a6(0xad)
----------------------------------

Begin block 0x8a8
prev = {'0x27'}, next = {}
----------------------------------
Block 0x8a8
0x8a9: v8a9(0x137) = CONST 
0x8aa: CALLPRIVATE v8a9(0x137)
----------------------------------

Begin block 0x8ab
prev = {'0x32'}, next = {}
----------------------------------
Block 0x8ab
0x8ac: v8ac(0x16d) = CONST 
0x8ad: CALLPRIVATE v8ac(0x16d)
----------------------------------

Begin block 0x8ae
prev = {'0x3d'}, next = {}
----------------------------------
Block 0x8ae
0x8af: v8af(0x192) = CONST 
0x8b0: CALLPRIVATE v8af(0x192)
----------------------------------

Begin block 0x8b1
prev = {'0x48'}, next = {}
----------------------------------
Block 0x8b1
0x8b2: v8b2(0x1ba) = CONST 
0x8b3: CALLPRIVATE v8b2(0x1ba)
----------------------------------

Begin block 0x8b4
prev = {'0x53'}, next = {}
----------------------------------
Block 0x8b4
0x8b5: v8b5(0x1e3) = CONST 
0x8b6: CALLPRIVATE v8b5(0x1e3)
----------------------------------

Begin block 0x8b7
prev = {'0x5e'}, next = {}
----------------------------------
Block 0x8b7
0x8b8: v8b8(0x1f6) = CONST 
0x8b9: CALLPRIVATE v8b8(0x1f6)
----------------------------------

Begin block 0x8ba
prev = {'0x69'}, next = {}
----------------------------------
Block 0x8ba
0x8bb: v8bb(0x215) = CONST 
0x8bc: CALLPRIVATE v8bb(0x215)
----------------------------------

Begin block 0x8bd
prev = {'0x74'}, next = {}
----------------------------------
Block 0x8bd
0x8be: v8be(0x228) = CONST 
0x8bf: CALLPRIVATE v8be(0x228)
----------------------------------

Begin block 0x8c0
prev = {'0x7f'}, next = {}
----------------------------------
Block 0x8c0
0x8c1: v8c1(0x24a) = CONST 
0x8c2: CALLPRIVATE v8c1(0x24a)
----------------------------------

Begin block 0x8c3
prev = {'0x8a'}, next = {}
----------------------------------
Block 0x8c3
0x8c4: v8c4(0x2af) = CONST 
0x8c5: CALLPRIVATE v8c4(0x2af)
----------------------------------

Begin block 0x8c6
prev = {'0x95'}, next = {}
----------------------------------
Block 0x8c6
0x8c7: v8c7(0x2d4) = CONST 
0x8c8: CALLPRIVATE v8c7(0x2d4)
----------------------------------
