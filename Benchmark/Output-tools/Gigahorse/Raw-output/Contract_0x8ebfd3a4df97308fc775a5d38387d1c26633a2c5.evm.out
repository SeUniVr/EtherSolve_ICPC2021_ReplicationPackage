
Begin block 0x0
prev = {}, next = {'0xca1', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xc89: vc89(0xca1) = CONST 
0xc8a: JUMPI vc89(0xca1) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xca4', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0xc8b: vc8b(0xca4) = CONST 
0xc8c: JUMPI vc8b(0xca4) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0xca7', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0xc8d: vc8d(0xca7) = CONST 
0xc8e: JUMPI vc8d(0xca7) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0xcaa', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0xc8f: vc8f(0xcaa) = CONST 
0xc90: JUMPI vc8f(0xcaa) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0xcad', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0xc91: vc91(0xcad) = CONST 
0xc92: JUMPI vc91(0xcad) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0xcb0'}
----------------------------------
Block 0x62
0x63: v63(0x27e235e3) = CONST 
0x68: v68 = EQ v63(0x27e235e3) v35
0xc93: vc93(0xcb0) = CONST 
0xc94: JUMPI vc93(0xcb0) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0xcb3', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x313ce567) = CONST 
0x73: v73 = EQ v6e(0x313ce567) v35
0xc95: vc95(0xcb3) = CONST 
0xc96: JUMPI vc95(0xcb3) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0xcb6', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x5c658165) = CONST 
0x7e: v7e = EQ v79(0x5c658165) v35
0xc97: vc97(0xcb6) = CONST 
0xc98: JUMPI vc97(0xcb6) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0xcb9', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x70a08231) = CONST 
0x89: v89 = EQ v84(0x70a08231) v35
0xc99: vc99(0xcb9) = CONST 
0xc9a: JUMPI vc99(0xcb9) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0xcbc', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x95d89b41) = CONST 
0x94: v94 = EQ v8f(0x95d89b41) v35
0xc9b: vc9b(0xcbc) = CONST 
0xc9c: JUMPI vc9b(0xcbc) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xa4', '0xcbf'}
----------------------------------
Block 0x99
0x9a: v9a(0xa9059cbb) = CONST 
0x9f: v9f = EQ v9a(0xa9059cbb) v35
0xc9d: vc9d(0xcbf) = CONST 
0xc9e: JUMPI vc9d(0xcbf) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xca1', '0xcc2'}
----------------------------------
Block 0xa4
0xa5: va5(0xdd62ed3e) = CONST 
0xaa: vaa = EQ va5(0xdd62ed3e) v35
0xc9f: vc9f(0xcc2) = CONST 
0xca0: JUMPI vc9f(0xcc2) vaa
----------------------------------

Begin block 0xaf
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xaf
0xb0: vb0(0x0) = CONST 
0xb3: REVERT vb0(0x0) vb0(0x0)
----------------------------------

Begin block 0xb4
prev = {}, next = {'0xc0', '0xbc'}
----------------------------------
function name()()
Block 0xb4
0xb5: vb5 = CALLVALUE 
0xb7: vb7 = ISZERO vb5
0xb8: vb8(0xc0) = CONST 
0xbb: JUMPI vb8(0xc0) vb7
----------------------------------

Begin block 0xbc
prev = {'0xb4'}, next = {}
----------------------------------
Block 0xbc
0xbc: vbc(0x0) = CONST 
0xbf: REVERT vbc(0x0) vbc(0x0)
----------------------------------

Begin block 0xc0
prev = {'0xb4'}, next = {'0x51b'}
----------------------------------
Block 0xc0
0xc2: vc2(0xc9) = CONST 
0xc5: vc5(0x51b) = CONST 
0xc8: JUMP vc5(0x51b)
----------------------------------

Begin block 0xc9
prev = {'0x5b1'}, next = {'0xee'}
----------------------------------
Block 0xc9
0xca: vca(0x40) = CONST 
0xcc: vcc = MLOAD vca(0x40)
0xcf: vcf(0x20) = CONST 
0xd1: vd1 = ADD vcf(0x20) vcc
0xd4: vd4 = SUB vd1 vcc
0xd6: MSTORE vcc vd4
0xda: vda = MLOAD v540
0xdc: MSTORE vd1 vda
0xdd: vdd(0x20) = CONST 
0xdf: vdf = ADD vdd(0x20) vd1
0xe3: ve3 = MLOAD v540
0xe5: ve5(0x20) = CONST 
0xe7: ve7 = ADD ve5(0x20) v540
0xec: vec(0x0) = CONST 
----------------------------------

Begin block 0xee
prev = {'0xc9', '0xf7'}, next = {'0x109', '0xf7'}
----------------------------------
Block 0xee
0xee_0x0: vee_0 = PHI vec(0x0) v102
0xf1: vf1 = LT vee_0 ve3
0xf2: vf2 = ISZERO vf1
0xf3: vf3(0x109) = CONST 
0xf6: JUMPI vf3(0x109) vf2
----------------------------------

Begin block 0xf7
prev = {'0xee'}, next = {'0xee'}
----------------------------------
Block 0xf7
0xf7_0x0: vf7_0 = PHI vec(0x0) v102
0xf9: vf9 = ADD ve7 vf7_0
0xfa: vfa = MLOAD vf9
0xfd: vfd = ADD vdf vf7_0
0xfe: MSTORE vfd vfa
0xff: vff(0x20) = CONST 
0x102: v102 = ADD vf7_0 vff(0x20)
0x105: v105(0xee) = CONST 
0x108: JUMP v105(0xee)
----------------------------------

Begin block 0x109
prev = {'0xee'}, next = {'0x11d', '0x136'}
----------------------------------
Block 0x109
0x112: v112 = ADD ve3 vdf
0x114: v114(0x1f) = CONST 
0x116: v116 = AND v114(0x1f) ve3
0x118: v118 = ISZERO v116
0x119: v119(0x136) = CONST 
0x11c: JUMPI v119(0x136) v118
----------------------------------

Begin block 0x11d
prev = {'0x109'}, next = {'0x136'}
----------------------------------
Block 0x11d
0x11f: v11f = SUB v112 v116
0x121: v121 = MLOAD v11f
0x122: v122(0x1) = CONST 
0x125: v125(0x20) = CONST 
0x127: v127 = SUB v125(0x20) v116
0x128: v128(0x100) = CONST 
0x12b: v12b = EXP v128(0x100) v127
0x12c: v12c = SUB v12b v122(0x1)
0x12d: v12d = NOT v12c
0x12e: v12e = AND v12d v121
0x130: MSTORE v11f v12e
0x131: v131(0x20) = CONST 
0x133: v133 = ADD v131(0x20) v11f
----------------------------------

Begin block 0x136
prev = {'0x109', '0x11d'}, next = {}
----------------------------------
Block 0x136
0x136_0x1: v136_1 = PHI v112 v133
0x13c: v13c(0x40) = CONST 
0x13e: v13e = MLOAD v13c(0x40)
0x141: v141 = SUB v136_1 v13e
0x143: RETURN v13e v141
----------------------------------

Begin block 0x144
prev = {}, next = {'0x14c', '0x150'}
----------------------------------
function approve(address,uint256)()
Block 0x144
0x145: v145 = CALLVALUE 
0x147: v147 = ISZERO v145
0x148: v148(0x150) = CONST 
0x14b: JUMPI v148(0x150) v147
----------------------------------

Begin block 0x14c
prev = {'0x144'}, next = {}
----------------------------------
Block 0x14c
0x14c: v14c(0x0) = CONST 
0x14f: REVERT v14c(0x0) v14c(0x0)
----------------------------------

Begin block 0x150
prev = {'0x144'}, next = {'0x5b9'}
----------------------------------
Block 0x150
0x152: v152(0x18f) = CONST 
0x155: v155(0x4) = CONST 
0x158: v158 = CALLDATASIZE 
0x159: v159 = SUB v158 v155(0x4)
0x15b: v15b = ADD v155(0x4) v159
0x15f: v15f = CALLDATALOAD v155(0x4)
0x160: v160(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x175: v175 = AND v160(0xffffffffffffffffffffffffffffffffffffffff) v15f
0x177: v177(0x20) = CONST 
0x179: v179(0x24) = ADD v177(0x20) v155(0x4)
0x17f: v17f = CALLDATALOAD v179(0x24)
0x181: v181(0x20) = CONST 
0x183: v183(0x44) = ADD v181(0x20) v179(0x24)
0x18b: v18b(0x5b9) = CONST 
0x18e: JUMP v18b(0x5b9)
----------------------------------

Begin block 0x18f
prev = {'0x5b9'}, next = {}
----------------------------------
Block 0x18f
0x190: v190(0x40) = CONST 
0x192: v192 = MLOAD v190(0x40)
0x195: v195 = ISZERO v6a2(0x1)
0x196: v196 = ISZERO v195
0x197: v197 = ISZERO v196
0x198: v198 = ISZERO v197
0x19a: MSTORE v192 v198
0x19b: v19b(0x20) = CONST 
0x19d: v19d = ADD v19b(0x20) v192
0x1a1: v1a1(0x40) = CONST 
0x1a3: v1a3 = MLOAD v1a1(0x40)
0x1a6: v1a6 = SUB v19d v1a3
0x1a8: RETURN v1a3 v1a6
----------------------------------

Begin block 0x1a9
prev = {}, next = {'0x1b1', '0x1b5'}
----------------------------------
function totalSupply()()
Block 0x1a9
0x1aa: v1aa = CALLVALUE 
0x1ac: v1ac = ISZERO v1aa
0x1ad: v1ad(0x1b5) = CONST 
0x1b0: JUMPI v1ad(0x1b5) v1ac
----------------------------------

Begin block 0x1b1
prev = {'0x1a9'}, next = {}
----------------------------------
Block 0x1b1
0x1b1: v1b1(0x0) = CONST 
0x1b4: REVERT v1b1(0x0) v1b1(0x0)
----------------------------------

Begin block 0x1b5
prev = {'0x1a9'}, next = {'0x6ab'}
----------------------------------
Block 0x1b5
0x1b7: v1b7(0x1be) = CONST 
0x1ba: v1ba(0x6ab) = CONST 
0x1bd: JUMP v1ba(0x6ab)
----------------------------------

Begin block 0x1be
prev = {'0x6ab'}, next = {}
----------------------------------
Block 0x1be
0x1bf: v1bf(0x40) = CONST 
0x1c1: v1c1 = MLOAD v1bf(0x40)
0x1c5: MSTORE v1c1 v6ae
0x1c6: v1c6(0x20) = CONST 
0x1c8: v1c8 = ADD v1c6(0x20) v1c1
0x1cc: v1cc(0x40) = CONST 
0x1ce: v1ce = MLOAD v1cc(0x40)
0x1d1: v1d1 = SUB v1c8 v1ce
0x1d3: RETURN v1ce v1d1
----------------------------------

Begin block 0x1d4
prev = {}, next = {'0x1dc', '0x1e0'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1d4
0x1d5: v1d5 = CALLVALUE 
0x1d7: v1d7 = ISZERO v1d5
0x1d8: v1d8(0x1e0) = CONST 
0x1db: JUMPI v1d8(0x1e0) v1d7
----------------------------------

Begin block 0x1dc
prev = {'0x1d4'}, next = {}
----------------------------------
Block 0x1dc
0x1dc: v1dc(0x0) = CONST 
0x1df: REVERT v1dc(0x0) v1dc(0x0)
----------------------------------

Begin block 0x1e0
prev = {'0x1d4'}, next = {'0x6b1'}
----------------------------------
Block 0x1e0
0x1e2: v1e2(0x23f) = CONST 
0x1e5: v1e5(0x4) = CONST 
0x1e8: v1e8 = CALLDATASIZE 
0x1e9: v1e9 = SUB v1e8 v1e5(0x4)
0x1eb: v1eb = ADD v1e5(0x4) v1e9
0x1ef: v1ef = CALLDATALOAD v1e5(0x4)
0x1f0: v1f0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x205: v205 = AND v1f0(0xffffffffffffffffffffffffffffffffffffffff) v1ef
0x207: v207(0x20) = CONST 
0x209: v209(0x24) = ADD v207(0x20) v1e5(0x4)
0x20f: v20f = CALLDATALOAD v209(0x24)
0x210: v210(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x225: v225 = AND v210(0xffffffffffffffffffffffffffffffffffffffff) v20f
0x227: v227(0x20) = CONST 
0x229: v229(0x44) = ADD v227(0x20) v209(0x24)
0x22f: v22f = CALLDATALOAD v229(0x44)
0x231: v231(0x20) = CONST 
0x233: v233(0x64) = ADD v231(0x20) v229(0x44)
0x23b: v23b(0x6b1) = CONST 
0x23e: JUMP v23b(0x6b1)
----------------------------------

Begin block 0x23f
prev = {'0x8da'}, next = {}
----------------------------------
Block 0x23f
0x240: v240(0x40) = CONST 
0x242: v242 = MLOAD v240(0x40)
0x245: v245 = ISZERO v940(0x1)
0x246: v246 = ISZERO v245
0x247: v247 = ISZERO v246
0x248: v248 = ISZERO v247
0x24a: MSTORE v242 v248
0x24b: v24b(0x20) = CONST 
0x24d: v24d = ADD v24b(0x20) v242
0x251: v251(0x40) = CONST 
0x253: v253 = MLOAD v251(0x40)
0x256: v256 = SUB v24d v253
0x258: RETURN v253 v256
----------------------------------

Begin block 0x259
prev = {}, next = {'0x261', '0x265'}
----------------------------------
function balances(address)()
Block 0x259
0x25a: v25a = CALLVALUE 
0x25c: v25c = ISZERO v25a
0x25d: v25d(0x265) = CONST 
0x260: JUMPI v25d(0x265) v25c
----------------------------------

Begin block 0x261
prev = {'0x259'}, next = {}
----------------------------------
Block 0x261
0x261: v261(0x0) = CONST 
0x264: REVERT v261(0x0) v261(0x0)
----------------------------------

Begin block 0x265
prev = {'0x259'}, next = {'0x94b'}
----------------------------------
Block 0x265
0x267: v267(0x29a) = CONST 
0x26a: v26a(0x4) = CONST 
0x26d: v26d = CALLDATASIZE 
0x26e: v26e = SUB v26d v26a(0x4)
0x270: v270 = ADD v26a(0x4) v26e
0x274: v274 = CALLDATALOAD v26a(0x4)
0x275: v275(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x28a: v28a = AND v275(0xffffffffffffffffffffffffffffffffffffffff) v274
0x28c: v28c(0x20) = CONST 
0x28e: v28e(0x24) = ADD v28c(0x20) v26a(0x4)
0x296: v296(0x94b) = CONST 
0x299: JUMP v296(0x94b)
----------------------------------

Begin block 0x29a
prev = {'0x94b'}, next = {}
----------------------------------
Block 0x29a
0x29b: v29b(0x40) = CONST 
0x29d: v29d = MLOAD v29b(0x40)
0x2a1: MSTORE v29d v960
0x2a2: v2a2(0x20) = CONST 
0x2a4: v2a4 = ADD v2a2(0x20) v29d
0x2a8: v2a8(0x40) = CONST 
0x2aa: v2aa = MLOAD v2a8(0x40)
0x2ad: v2ad = SUB v2a4 v2aa
0x2af: RETURN v2aa v2ad
----------------------------------

Begin block 0x2b0
prev = {}, next = {'0x2bc', '0x2b8'}
----------------------------------
function decimals()()
Block 0x2b0
0x2b1: v2b1 = CALLVALUE 
0x2b3: v2b3 = ISZERO v2b1
0x2b4: v2b4(0x2bc) = CONST 
0x2b7: JUMPI v2b4(0x2bc) v2b3
----------------------------------

Begin block 0x2b8
prev = {'0x2b0'}, next = {}
----------------------------------
Block 0x2b8
0x2b8: v2b8(0x0) = CONST 
0x2bb: REVERT v2b8(0x0) v2b8(0x0)
----------------------------------

Begin block 0x2bc
prev = {'0x2b0'}, next = {'0x963'}
----------------------------------
Block 0x2bc
0x2be: v2be(0x2c5) = CONST 
0x2c1: v2c1(0x963) = CONST 
0x2c4: JUMP v2c1(0x963)
----------------------------------

Begin block 0x2c5
prev = {'0x963'}, next = {}
----------------------------------
Block 0x2c5
0x2c6: v2c6(0x40) = CONST 
0x2c8: v2c8 = MLOAD v2c6(0x40)
0x2cb: v2cb(0xff) = CONST 
0x2cd: v2cd = AND v2cb(0xff) v973
0x2ce: v2ce(0xff) = CONST 
0x2d0: v2d0 = AND v2ce(0xff) v2cd
0x2d2: MSTORE v2c8 v2d0
0x2d3: v2d3(0x20) = CONST 
0x2d5: v2d5 = ADD v2d3(0x20) v2c8
0x2d9: v2d9(0x40) = CONST 
0x2db: v2db = MLOAD v2d9(0x40)
0x2de: v2de = SUB v2d5 v2db
0x2e0: RETURN v2db v2de
----------------------------------

Begin block 0x2e1
prev = {}, next = {'0x2e9', '0x2ed'}
----------------------------------
function allowed(address,address)()
Block 0x2e1
0x2e2: v2e2 = CALLVALUE 
0x2e4: v2e4 = ISZERO v2e2
0x2e5: v2e5(0x2ed) = CONST 
0x2e8: JUMPI v2e5(0x2ed) v2e4
----------------------------------

Begin block 0x2e9
prev = {'0x2e1'}, next = {}
----------------------------------
Block 0x2e9
0x2e9: v2e9(0x0) = CONST 
0x2ec: REVERT v2e9(0x0) v2e9(0x0)
----------------------------------

Begin block 0x2ed
prev = {'0x2e1'}, next = {'0x976'}
----------------------------------
Block 0x2ed
0x2ef: v2ef(0x342) = CONST 
0x2f2: v2f2(0x4) = CONST 
0x2f5: v2f5 = CALLDATASIZE 
0x2f6: v2f6 = SUB v2f5 v2f2(0x4)
0x2f8: v2f8 = ADD v2f2(0x4) v2f6
0x2fc: v2fc = CALLDATALOAD v2f2(0x4)
0x2fd: v2fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x312: v312 = AND v2fd(0xffffffffffffffffffffffffffffffffffffffff) v2fc
0x314: v314(0x20) = CONST 
0x316: v316(0x24) = ADD v314(0x20) v2f2(0x4)
0x31c: v31c = CALLDATALOAD v316(0x24)
0x31d: v31d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x332: v332 = AND v31d(0xffffffffffffffffffffffffffffffffffffffff) v31c
0x334: v334(0x20) = CONST 
0x336: v336(0x44) = ADD v334(0x20) v316(0x24)
0x33e: v33e(0x976) = CONST 
0x341: JUMP v33e(0x976)
----------------------------------

Begin block 0x342
prev = {'0x976'}, next = {}
----------------------------------
Block 0x342
0x343: v343(0x40) = CONST 
0x345: v345 = MLOAD v343(0x40)
0x349: MSTORE v345 v998
0x34a: v34a(0x20) = CONST 
0x34c: v34c = ADD v34a(0x20) v345
0x350: v350(0x40) = CONST 
0x352: v352 = MLOAD v350(0x40)
0x355: v355 = SUB v34c v352
0x357: RETURN v352 v355
----------------------------------

Begin block 0x358
prev = {}, next = {'0x360', '0x364'}
----------------------------------
function balanceOf(address)()
Block 0x358
0x359: v359 = CALLVALUE 
0x35b: v35b = ISZERO v359
0x35c: v35c(0x364) = CONST 
0x35f: JUMPI v35c(0x364) v35b
----------------------------------

Begin block 0x360
prev = {'0x358'}, next = {}
----------------------------------
Block 0x360
0x360: v360(0x0) = CONST 
0x363: REVERT v360(0x0) v360(0x0)
----------------------------------

Begin block 0x364
prev = {'0x358'}, next = {'0x99b'}
----------------------------------
Block 0x364
0x366: v366(0x399) = CONST 
0x369: v369(0x4) = CONST 
0x36c: v36c = CALLDATASIZE 
0x36d: v36d = SUB v36c v369(0x4)
0x36f: v36f = ADD v369(0x4) v36d
0x373: v373 = CALLDATALOAD v369(0x4)
0x374: v374(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x389: v389 = AND v374(0xffffffffffffffffffffffffffffffffffffffff) v373
0x38b: v38b(0x20) = CONST 
0x38d: v38d(0x24) = ADD v38b(0x20) v369(0x4)
0x395: v395(0x99b) = CONST 
0x398: JUMP v395(0x99b)
----------------------------------

Begin block 0x399
prev = {'0x99b'}, next = {}
----------------------------------
Block 0x399
0x39a: v39a(0x40) = CONST 
0x39c: v39c = MLOAD v39a(0x40)
0x3a0: MSTORE v39c v9dd
0x3a1: v3a1(0x20) = CONST 
0x3a3: v3a3 = ADD v3a1(0x20) v39c
0x3a7: v3a7(0x40) = CONST 
0x3a9: v3a9 = MLOAD v3a7(0x40)
0x3ac: v3ac = SUB v3a3 v3a9
0x3ae: RETURN v3a9 v3ac
----------------------------------

Begin block 0x3af
prev = {}, next = {'0x3bb', '0x3b7'}
----------------------------------
function symbol()()
Block 0x3af
0x3b0: v3b0 = CALLVALUE 
0x3b2: v3b2 = ISZERO v3b0
0x3b3: v3b3(0x3bb) = CONST 
0x3b6: JUMPI v3b3(0x3bb) v3b2
----------------------------------

Begin block 0x3b7
prev = {'0x3af'}, next = {}
----------------------------------
Block 0x3b7
0x3b7: v3b7(0x0) = CONST 
0x3ba: REVERT v3b7(0x0) v3b7(0x0)
----------------------------------

Begin block 0x3bb
prev = {'0x3af'}, next = {'0x9e4'}
----------------------------------
Block 0x3bb
0x3bd: v3bd(0x3c4) = CONST 
0x3c0: v3c0(0x9e4) = CONST 
0x3c3: JUMP v3c0(0x9e4)
----------------------------------

Begin block 0x3c4
prev = {'0xa7a'}, next = {'0x3e9'}
----------------------------------
Block 0x3c4
0x3c5: v3c5(0x40) = CONST 
0x3c7: v3c7 = MLOAD v3c5(0x40)
0x3ca: v3ca(0x20) = CONST 
0x3cc: v3cc = ADD v3ca(0x20) v3c7
0x3cf: v3cf = SUB v3cc v3c7
0x3d1: MSTORE v3c7 v3cf
0x3d5: v3d5 = MLOAD va09
0x3d7: MSTORE v3cc v3d5
0x3d8: v3d8(0x20) = CONST 
0x3da: v3da = ADD v3d8(0x20) v3cc
0x3de: v3de = MLOAD va09
0x3e0: v3e0(0x20) = CONST 
0x3e2: v3e2 = ADD v3e0(0x20) va09
0x3e7: v3e7(0x0) = CONST 
----------------------------------

Begin block 0x3e9
prev = {'0x3f2', '0x3c4'}, next = {'0x3f2', '0x404'}
----------------------------------
Block 0x3e9
0x3e9_0x0: v3e9_0 = PHI v3e7(0x0) v3fd
0x3ec: v3ec = LT v3e9_0 v3de
0x3ed: v3ed = ISZERO v3ec
0x3ee: v3ee(0x404) = CONST 
0x3f1: JUMPI v3ee(0x404) v3ed
----------------------------------

Begin block 0x3f2
prev = {'0x3e9'}, next = {'0x3e9'}
----------------------------------
Block 0x3f2
0x3f2_0x0: v3f2_0 = PHI v3e7(0x0) v3fd
0x3f4: v3f4 = ADD v3e2 v3f2_0
0x3f5: v3f5 = MLOAD v3f4
0x3f8: v3f8 = ADD v3da v3f2_0
0x3f9: MSTORE v3f8 v3f5
0x3fa: v3fa(0x20) = CONST 
0x3fd: v3fd = ADD v3f2_0 v3fa(0x20)
0x400: v400(0x3e9) = CONST 
0x403: JUMP v400(0x3e9)
----------------------------------

Begin block 0x404
prev = {'0x3e9'}, next = {'0x431', '0x418'}
----------------------------------
Block 0x404
0x40d: v40d = ADD v3de v3da
0x40f: v40f(0x1f) = CONST 
0x411: v411 = AND v40f(0x1f) v3de
0x413: v413 = ISZERO v411
0x414: v414(0x431) = CONST 
0x417: JUMPI v414(0x431) v413
----------------------------------

Begin block 0x418
prev = {'0x404'}, next = {'0x431'}
----------------------------------
Block 0x418
0x41a: v41a = SUB v40d v411
0x41c: v41c = MLOAD v41a
0x41d: v41d(0x1) = CONST 
0x420: v420(0x20) = CONST 
0x422: v422 = SUB v420(0x20) v411
0x423: v423(0x100) = CONST 
0x426: v426 = EXP v423(0x100) v422
0x427: v427 = SUB v426 v41d(0x1)
0x428: v428 = NOT v427
0x429: v429 = AND v428 v41c
0x42b: MSTORE v41a v429
0x42c: v42c(0x20) = CONST 
0x42e: v42e = ADD v42c(0x20) v41a
----------------------------------

Begin block 0x431
prev = {'0x418', '0x404'}, next = {}
----------------------------------
Block 0x431
0x431_0x1: v431_1 = PHI v40d v42e
0x437: v437(0x40) = CONST 
0x439: v439 = MLOAD v437(0x40)
0x43c: v43c = SUB v431_1 v439
0x43e: RETURN v439 v43c
----------------------------------

Begin block 0x43f
prev = {}, next = {'0x447', '0x44b'}
----------------------------------
function transfer(address,uint256)()
Block 0x43f
0x440: v440 = CALLVALUE 
0x442: v442 = ISZERO v440
0x443: v443(0x44b) = CONST 
0x446: JUMPI v443(0x44b) v442
----------------------------------

Begin block 0x447
prev = {'0x43f'}, next = {}
----------------------------------
Block 0x447
0x447: v447(0x0) = CONST 
0x44a: REVERT v447(0x0) v447(0x0)
----------------------------------

Begin block 0x44b
prev = {'0x43f'}, next = {'0xa82'}
----------------------------------
Block 0x44b
0x44d: v44d(0x48a) = CONST 
0x450: v450(0x4) = CONST 
0x453: v453 = CALLDATASIZE 
0x454: v454 = SUB v453 v450(0x4)
0x456: v456 = ADD v450(0x4) v454
0x45a: v45a = CALLDATALOAD v450(0x4)
0x45b: v45b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x470: v470 = AND v45b(0xffffffffffffffffffffffffffffffffffffffff) v45a
0x472: v472(0x20) = CONST 
0x474: v474(0x24) = ADD v472(0x20) v450(0x4)
0x47a: v47a = CALLDATALOAD v474(0x24)
0x47c: v47c(0x20) = CONST 
0x47e: v47e(0x44) = ADD v47c(0x20) v474(0x24)
0x486: v486(0xa82) = CONST 
0x489: JUMP v486(0xa82)
----------------------------------

Begin block 0x48a
prev = {'0xad2'}, next = {}
----------------------------------
Block 0x48a
0x48b: v48b(0x40) = CONST 
0x48d: v48d = MLOAD v48b(0x40)
0x490: v490 = ISZERO vbd2(0x1)
0x491: v491 = ISZERO v490
0x492: v492 = ISZERO v491
0x493: v493 = ISZERO v492
0x495: MSTORE v48d v493
0x496: v496(0x20) = CONST 
0x498: v498 = ADD v496(0x20) v48d
0x49c: v49c(0x40) = CONST 
0x49e: v49e = MLOAD v49c(0x40)
0x4a1: v4a1 = SUB v498 v49e
0x4a3: RETURN v49e v4a1
----------------------------------

Begin block 0x4a4
prev = {}, next = {'0x4ac', '0x4b0'}
----------------------------------
function allowance(address,address)()
Block 0x4a4
0x4a5: v4a5 = CALLVALUE 
0x4a7: v4a7 = ISZERO v4a5
0x4a8: v4a8(0x4b0) = CONST 
0x4ab: JUMPI v4a8(0x4b0) v4a7
----------------------------------

Begin block 0x4ac
prev = {'0x4a4'}, next = {}
----------------------------------
Block 0x4ac
0x4ac: v4ac(0x0) = CONST 
0x4af: REVERT v4ac(0x0) v4ac(0x0)
----------------------------------

Begin block 0x4b0
prev = {'0x4a4'}, next = {'0xbdb'}
----------------------------------
Block 0x4b0
0x4b2: v4b2(0x505) = CONST 
0x4b5: v4b5(0x4) = CONST 
0x4b8: v4b8 = CALLDATASIZE 
0x4b9: v4b9 = SUB v4b8 v4b5(0x4)
0x4bb: v4bb = ADD v4b5(0x4) v4b9
0x4bf: v4bf = CALLDATALOAD v4b5(0x4)
0x4c0: v4c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4d5: v4d5 = AND v4c0(0xffffffffffffffffffffffffffffffffffffffff) v4bf
0x4d7: v4d7(0x20) = CONST 
0x4d9: v4d9(0x24) = ADD v4d7(0x20) v4b5(0x4)
0x4df: v4df = CALLDATALOAD v4d9(0x24)
0x4e0: v4e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4f5: v4f5 = AND v4e0(0xffffffffffffffffffffffffffffffffffffffff) v4df
0x4f7: v4f7(0x20) = CONST 
0x4f9: v4f9(0x44) = ADD v4f7(0x20) v4d9(0x24)
0x501: v501(0xbdb) = CONST 
0x504: JUMP v501(0xbdb)
----------------------------------

Begin block 0x505
prev = {'0xbdb'}, next = {}
----------------------------------
Block 0x505
0x506: v506(0x40) = CONST 
0x508: v508 = MLOAD v506(0x40)
0x50c: MSTORE v508 vc5a
0x50d: v50d(0x20) = CONST 
0x50f: v50f = ADD v50d(0x20) v508
0x513: v513(0x40) = CONST 
0x515: v515 = MLOAD v513(0x40)
0x518: v518 = SUB v50f v515
0x51a: RETURN v515 v518
----------------------------------

Begin block 0x51b
prev = {'0xc0'}, next = {'0x5b1', '0x56b'}
----------------------------------
Block 0x51b
0x51c: v51c(0x3) = CONST 
0x51f: v51f = SLOAD v51c(0x3)
0x520: v520(0x1) = CONST 
0x523: v523(0x1) = CONST 
0x525: v525 = AND v523(0x1) v51f
0x526: v526 = ISZERO v525
0x527: v527(0x100) = CONST 
0x52a: v52a = MUL v527(0x100) v526
0x52b: v52b = SUB v52a v520(0x1)
0x52c: v52c = AND v52b v51f
0x52d: v52d(0x2) = CONST 
0x530: v530 = DIV v52c v52d(0x2)
0x532: v532(0x1f) = CONST 
0x534: v534 = ADD v532(0x1f) v530
0x535: v535(0x20) = CONST 
0x539: v539 = DIV v534 v535(0x20)
0x53a: v53a = MUL v539 v535(0x20)
0x53b: v53b(0x20) = CONST 
0x53d: v53d = ADD v53b(0x20) v53a
0x53e: v53e(0x40) = CONST 
0x540: v540 = MLOAD v53e(0x40)
0x543: v543 = ADD v540 v53d
0x544: v544(0x40) = CONST 
0x546: MSTORE v544(0x40) v543
0x54d: MSTORE v540 v530
0x54e: v54e(0x20) = CONST 
0x550: v550 = ADD v54e(0x20) v540
0x553: v553 = SLOAD v51c(0x3)
0x554: v554(0x1) = CONST 
0x557: v557(0x1) = CONST 
0x559: v559 = AND v557(0x1) v553
0x55a: v55a = ISZERO v559
0x55b: v55b(0x100) = CONST 
0x55e: v55e = MUL v55b(0x100) v55a
0x55f: v55f = SUB v55e v554(0x1)
0x560: v560 = AND v55f v553
0x561: v561(0x2) = CONST 
0x564: v564 = DIV v560 v561(0x2)
0x566: v566 = ISZERO v564
0x567: v567(0x5b1) = CONST 
0x56a: JUMPI v567(0x5b1) v566
----------------------------------

Begin block 0x56b
prev = {'0x51b'}, next = {'0x586', '0x573'}
----------------------------------
Block 0x56b
0x56c: v56c(0x1f) = CONST 
0x56e: v56e = LT v56c(0x1f) v564
0x56f: v56f(0x586) = CONST 
0x572: JUMPI v56f(0x586) v56e
----------------------------------

Begin block 0x573
prev = {'0x56b'}, next = {'0x5b1'}
----------------------------------
Block 0x573
0x573: v573(0x100) = CONST 
0x578: v578 = SLOAD v51c(0x3)
0x579: v579 = DIV v578 v573(0x100)
0x57a: v57a = MUL v579 v573(0x100)
0x57c: MSTORE v550 v57a
0x57e: v57e(0x20) = CONST 
0x580: v580 = ADD v57e(0x20) v550
0x582: v582(0x5b1) = CONST 
0x585: JUMP v582(0x5b1)
----------------------------------

Begin block 0x586
prev = {'0x56b'}, next = {'0x594'}
----------------------------------
Block 0x586
0x588: v588 = ADD v550 v564
0x58b: v58b(0x0) = CONST 
0x58d: MSTORE v58b(0x0) v51c(0x3)
0x58e: v58e(0x20) = CONST 
0x590: v590(0x0) = CONST 
0x592: v592 = SHA3 v590(0x0) v58e(0x20)
----------------------------------

Begin block 0x594
prev = {'0x594', '0x586'}, next = {'0x594', '0x5a8'}
----------------------------------
Block 0x594
0x594_0x0: v594_0 = PHI v550 v5a0
0x594_0x1: v594_1 = PHI v592 v59c
0x596: v596 = SLOAD v594_1
0x598: MSTORE v594_0 v596
0x59a: v59a(0x1) = CONST 
0x59c: v59c = ADD v59a(0x1) v594_1
0x59e: v59e(0x20) = CONST 
0x5a0: v5a0 = ADD v59e(0x20) v594_0
0x5a3: v5a3 = GT v588 v5a0
0x5a4: v5a4(0x594) = CONST 
0x5a7: JUMPI v5a4(0x594) v5a3
----------------------------------

Begin block 0x5a8
prev = {'0x594'}, next = {'0x5b1'}
----------------------------------
Block 0x5a8
0x5aa: v5aa = SUB v5a0 v588
0x5ab: v5ab(0x1f) = CONST 
0x5ad: v5ad = AND v5ab(0x1f) v5aa
0x5af: v5af = ADD v588 v5ad
----------------------------------

Begin block 0x5b1
prev = {'0x5a8', '0x51b', '0x573'}, next = {'0xc9'}
----------------------------------
Block 0x5b1
0x5b8: JUMP vc2(0xc9)
----------------------------------

Begin block 0x5b9
prev = {'0x150'}, next = {'0x18f'}
----------------------------------
Block 0x5b9
0x5ba: v5ba(0x0) = CONST 
0x5bd: v5bd(0x2) = CONST 
0x5bf: v5bf(0x0) = CONST 
0x5c1: v5c1 = CALLER 
0x5c2: v5c2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5d7: v5d7 = AND v5c2(0xffffffffffffffffffffffffffffffffffffffff) v5c1
0x5d8: v5d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5ed: v5ed = AND v5d8(0xffffffffffffffffffffffffffffffffffffffff) v5d7
0x5ef: MSTORE v5bf(0x0) v5ed
0x5f0: v5f0(0x20) = CONST 
0x5f2: v5f2(0x20) = ADD v5f0(0x20) v5bf(0x0)
0x5f5: MSTORE v5f2(0x20) v5bd(0x2)
0x5f6: v5f6(0x20) = CONST 
0x5f8: v5f8(0x40) = ADD v5f6(0x20) v5f2(0x20)
0x5f9: v5f9(0x0) = CONST 
0x5fb: v5fb = SHA3 v5f9(0x0) v5f8(0x40)
0x5fc: v5fc(0x0) = CONST 
0x5ff: v5ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x614: v614 = AND v5ff(0xffffffffffffffffffffffffffffffffffffffff) v175
0x615: v615(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x62a: v62a = AND v615(0xffffffffffffffffffffffffffffffffffffffff) v614
0x62c: MSTORE v5fc(0x0) v62a
0x62d: v62d(0x20) = CONST 
0x62f: v62f(0x20) = ADD v62d(0x20) v5fc(0x0)
0x632: MSTORE v62f(0x20) v5fb
0x633: v633(0x20) = CONST 
0x635: v635(0x40) = ADD v633(0x20) v62f(0x20)
0x636: v636(0x0) = CONST 
0x638: v638 = SHA3 v636(0x0) v635(0x40)
0x63b: SSTORE v638 v17f
0x63e: v63e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x653: v653 = AND v63e(0xffffffffffffffffffffffffffffffffffffffff) v175
0x654: v654 = CALLER 
0x655: v655(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x66a: v66a = AND v655(0xffffffffffffffffffffffffffffffffffffffff) v654
0x66b: v66b(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x68d: v68d(0x40) = CONST 
0x68f: v68f = MLOAD v68d(0x40)
0x693: MSTORE v68f v17f
0x694: v694(0x20) = CONST 
0x696: v696 = ADD v694(0x20) v68f
0x69a: v69a(0x40) = CONST 
0x69c: v69c = MLOAD v69a(0x40)
0x69f: v69f = SUB v696 v69c
0x6a1: LOG3 v69c v69f v66b(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v66a v653
0x6a2: v6a2(0x1) = CONST 
0x6aa: JUMP v152(0x18f)
----------------------------------

Begin block 0x6ab
prev = {'0x1b5'}, next = {'0x1be'}
----------------------------------
Block 0x6ab
0x6ac: v6ac(0x0) = CONST 
0x6ae: v6ae = SLOAD v6ac(0x0)
0x6b0: JUMP v1b7(0x1be)
----------------------------------

Begin block 0x6b1
prev = {'0x1e0'}, next = {'0x77d', '0x782'}
----------------------------------
Block 0x6b1
0x6b2: v6b2(0x0) = CONST 
0x6b5: v6b5(0x2) = CONST 
0x6b7: v6b7(0x0) = CONST 
0x6ba: v6ba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6cf: v6cf = AND v6ba(0xffffffffffffffffffffffffffffffffffffffff) v205
0x6d0: v6d0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e5: v6e5 = AND v6d0(0xffffffffffffffffffffffffffffffffffffffff) v6cf
0x6e7: MSTORE v6b7(0x0) v6e5
0x6e8: v6e8(0x20) = CONST 
0x6ea: v6ea(0x20) = ADD v6e8(0x20) v6b7(0x0)
0x6ed: MSTORE v6ea(0x20) v6b5(0x2)
0x6ee: v6ee(0x20) = CONST 
0x6f0: v6f0(0x40) = ADD v6ee(0x20) v6ea(0x20)
0x6f1: v6f1(0x0) = CONST 
0x6f3: v6f3 = SHA3 v6f1(0x0) v6f0(0x40)
0x6f4: v6f4(0x0) = CONST 
0x6f6: v6f6 = CALLER 
0x6f7: v6f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x70c: v70c = AND v6f7(0xffffffffffffffffffffffffffffffffffffffff) v6f6
0x70d: v70d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x722: v722 = AND v70d(0xffffffffffffffffffffffffffffffffffffffff) v70c
0x724: MSTORE v6f4(0x0) v722
0x725: v725(0x20) = CONST 
0x727: v727(0x20) = ADD v725(0x20) v6f4(0x0)
0x72a: MSTORE v727(0x20) v6f3
0x72b: v72b(0x20) = CONST 
0x72d: v72d(0x40) = ADD v72b(0x20) v727(0x20)
0x72e: v72e(0x0) = CONST 
0x730: v730 = SHA3 v72e(0x0) v72d(0x40)
0x731: v731 = SLOAD v730
0x735: v735(0x1) = CONST 
0x737: v737(0x0) = CONST 
0x73a: v73a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x74f: v74f = AND v73a(0xffffffffffffffffffffffffffffffffffffffff) v205
0x750: v750(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x765: v765 = AND v750(0xffffffffffffffffffffffffffffffffffffffff) v74f
0x767: MSTORE v737(0x0) v765
0x768: v768(0x20) = CONST 
0x76a: v76a(0x20) = ADD v768(0x20) v737(0x0)
0x76d: MSTORE v76a(0x20) v735(0x1)
0x76e: v76e(0x20) = CONST 
0x770: v770(0x40) = ADD v76e(0x20) v76a(0x20)
0x771: v771(0x0) = CONST 
0x773: v773 = SHA3 v771(0x0) v770(0x40)
0x774: v774 = SLOAD v773
0x775: v775 = LT v774 v22f
0x776: v776 = ISZERO v775
0x778: v778 = ISZERO v776
0x779: v779(0x782) = CONST 
0x77c: JUMPI v779(0x782) v778
----------------------------------

Begin block 0x77d
prev = {'0x6b1'}, next = {'0x782'}
----------------------------------
Block 0x77d
0x780: v780 = LT v731 v22f
0x781: v781 = ISZERO v780
----------------------------------

Begin block 0x782
prev = {'0x6b1', '0x77d'}, next = {'0x789', '0x78d'}
----------------------------------
Block 0x782
0x782_0x0: v782_0 = PHI v776 v781
0x783: v783 = ISZERO v782_0
0x784: v784 = ISZERO v783
0x785: v785(0x78d) = CONST 
0x788: JUMPI v785(0x78d) v784
----------------------------------

Begin block 0x789
prev = {'0x782'}, next = {}
----------------------------------
Block 0x789
0x789: v789(0x0) = CONST 
0x78c: REVERT v789(0x0) v789(0x0)
----------------------------------

Begin block 0x78d
prev = {'0x782'}, next = {'0x850', '0x8da'}
----------------------------------
Block 0x78d
0x78f: v78f(0x1) = CONST 
0x791: v791(0x0) = CONST 
0x794: v794(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a9: v7a9 = AND v794(0xffffffffffffffffffffffffffffffffffffffff) v225
0x7aa: v7aa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7bf: v7bf = AND v7aa(0xffffffffffffffffffffffffffffffffffffffff) v7a9
0x7c1: MSTORE v791(0x0) v7bf
0x7c2: v7c2(0x20) = CONST 
0x7c4: v7c4(0x20) = ADD v7c2(0x20) v791(0x0)
0x7c7: MSTORE v7c4(0x20) v78f(0x1)
0x7c8: v7c8(0x20) = CONST 
0x7ca: v7ca(0x40) = ADD v7c8(0x20) v7c4(0x20)
0x7cb: v7cb(0x0) = CONST 
0x7cd: v7cd = SHA3 v7cb(0x0) v7ca(0x40)
0x7ce: v7ce(0x0) = CONST 
0x7d2: v7d2 = SLOAD v7cd
0x7d3: v7d3 = ADD v7d2 v22f
0x7d9: SSTORE v7cd v7d3
0x7dc: v7dc(0x1) = CONST 
0x7de: v7de(0x0) = CONST 
0x7e1: v7e1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7f6: v7f6 = AND v7e1(0xffffffffffffffffffffffffffffffffffffffff) v205
0x7f7: v7f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80c: v80c = AND v7f7(0xffffffffffffffffffffffffffffffffffffffff) v7f6
0x80e: MSTORE v7de(0x0) v80c
0x80f: v80f(0x20) = CONST 
0x811: v811(0x20) = ADD v80f(0x20) v7de(0x0)
0x814: MSTORE v811(0x20) v7dc(0x1)
0x815: v815(0x20) = CONST 
0x817: v817(0x40) = ADD v815(0x20) v811(0x20)
0x818: v818(0x0) = CONST 
0x81a: v81a = SHA3 v818(0x0) v817(0x40)
0x81b: v81b(0x0) = CONST 
0x81f: v81f = SLOAD v81a
0x820: v820 = SUB v81f v22f
0x826: SSTORE v81a v820
0x828: v828(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
0x84a: v84a = LT v731 v828(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x84b: v84b = ISZERO v84a
0x84c: v84c(0x8da) = CONST 
0x84f: JUMPI v84c(0x8da) v84b
----------------------------------

Begin block 0x850
prev = {'0x78d'}, next = {'0x8da'}
----------------------------------
Block 0x850
0x851: v851(0x2) = CONST 
0x853: v853(0x0) = CONST 
0x856: v856(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86b: v86b = AND v856(0xffffffffffffffffffffffffffffffffffffffff) v205
0x86c: v86c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x881: v881 = AND v86c(0xffffffffffffffffffffffffffffffffffffffff) v86b
0x883: MSTORE v853(0x0) v881
0x884: v884(0x20) = CONST 
0x886: v886(0x20) = ADD v884(0x20) v853(0x0)
0x889: MSTORE v886(0x20) v851(0x2)
0x88a: v88a(0x20) = CONST 
0x88c: v88c(0x40) = ADD v88a(0x20) v886(0x20)
0x88d: v88d(0x0) = CONST 
0x88f: v88f = SHA3 v88d(0x0) v88c(0x40)
0x890: v890(0x0) = CONST 
0x892: v892 = CALLER 
0x893: v893(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a8: v8a8 = AND v893(0xffffffffffffffffffffffffffffffffffffffff) v892
0x8a9: v8a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8be: v8be = AND v8a9(0xffffffffffffffffffffffffffffffffffffffff) v8a8
0x8c0: MSTORE v890(0x0) v8be
0x8c1: v8c1(0x20) = CONST 
0x8c3: v8c3(0x20) = ADD v8c1(0x20) v890(0x0)
0x8c6: MSTORE v8c3(0x20) v88f
0x8c7: v8c7(0x20) = CONST 
0x8c9: v8c9(0x40) = ADD v8c7(0x20) v8c3(0x20)
0x8ca: v8ca(0x0) = CONST 
0x8cc: v8cc = SHA3 v8ca(0x0) v8c9(0x40)
0x8cd: v8cd(0x0) = CONST 
0x8d1: v8d1 = SLOAD v8cc
0x8d2: v8d2 = SUB v8d1 v22f
0x8d8: SSTORE v8cc v8d2
----------------------------------

Begin block 0x8da
prev = {'0x850', '0x78d'}, next = {'0x23f'}
----------------------------------
Block 0x8da
0x8dc: v8dc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f1: v8f1 = AND v8dc(0xffffffffffffffffffffffffffffffffffffffff) v225
0x8f3: v8f3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x908: v908 = AND v8f3(0xffffffffffffffffffffffffffffffffffffffff) v205
0x909: v909(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x92b: v92b(0x40) = CONST 
0x92d: v92d = MLOAD v92b(0x40)
0x931: MSTORE v92d v22f
0x932: v932(0x20) = CONST 
0x934: v934 = ADD v932(0x20) v92d
0x938: v938(0x40) = CONST 
0x93a: v93a = MLOAD v938(0x40)
0x93d: v93d = SUB v934 v93a
0x93f: LOG3 v93a v93d v909(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v908 v8f1
0x940: v940(0x1) = CONST 
0x94a: JUMP v1e2(0x23f)
----------------------------------

Begin block 0x94b
prev = {'0x265'}, next = {'0x29a'}
----------------------------------
Block 0x94b
0x94c: v94c(0x1) = CONST 
0x94e: v94e(0x20) = CONST 
0x950: MSTORE v94e(0x20) v94c(0x1)
0x952: v952(0x0) = CONST 
0x954: MSTORE v952(0x0) v28a
0x955: v955(0x40) = CONST 
0x957: v957(0x0) = CONST 
0x959: v959 = SHA3 v957(0x0) v955(0x40)
0x95a: v95a(0x0) = CONST 
0x960: v960 = SLOAD v959
0x962: JUMP v267(0x29a)
----------------------------------

Begin block 0x963
prev = {'0x2bc'}, next = {'0x2c5'}
----------------------------------
Block 0x963
0x964: v964(0x4) = CONST 
0x966: v966(0x0) = CONST 
0x969: v969 = SLOAD v964(0x4)
0x96b: v96b(0x100) = CONST 
0x96e: v96e(0x1) = EXP v96b(0x100) v966(0x0)
0x970: v970 = DIV v969 v96e(0x1)
0x971: v971(0xff) = CONST 
0x973: v973 = AND v971(0xff) v970
0x975: JUMP v2be(0x2c5)
----------------------------------

Begin block 0x976
prev = {'0x2ed'}, next = {'0x342'}
----------------------------------
Block 0x976
0x977: v977(0x2) = CONST 
0x979: v979(0x20) = CONST 
0x97b: MSTORE v979(0x20) v977(0x2)
0x97d: v97d(0x0) = CONST 
0x97f: MSTORE v97d(0x0) v312
0x980: v980(0x40) = CONST 
0x982: v982(0x0) = CONST 
0x984: v984 = SHA3 v982(0x0) v980(0x40)
0x985: v985(0x20) = CONST 
0x987: MSTORE v985(0x20) v984
0x989: v989(0x0) = CONST 
0x98b: MSTORE v989(0x0) v332
0x98c: v98c(0x40) = CONST 
0x98e: v98e(0x0) = CONST 
0x990: v990 = SHA3 v98e(0x0) v98c(0x40)
0x991: v991(0x0) = CONST 
0x998: v998 = SLOAD v990
0x99a: JUMP v2ef(0x342)
----------------------------------

Begin block 0x99b
prev = {'0x364'}, next = {'0x399'}
----------------------------------
Block 0x99b
0x99c: v99c(0x0) = CONST 
0x99e: v99e(0x1) = CONST 
0x9a0: v9a0(0x0) = CONST 
0x9a3: v9a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9b8: v9b8 = AND v9a3(0xffffffffffffffffffffffffffffffffffffffff) v389
0x9b9: v9b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ce: v9ce = AND v9b9(0xffffffffffffffffffffffffffffffffffffffff) v9b8
0x9d0: MSTORE v9a0(0x0) v9ce
0x9d1: v9d1(0x20) = CONST 
0x9d3: v9d3(0x20) = ADD v9d1(0x20) v9a0(0x0)
0x9d6: MSTORE v9d3(0x20) v99e(0x1)
0x9d7: v9d7(0x20) = CONST 
0x9d9: v9d9(0x40) = ADD v9d7(0x20) v9d3(0x20)
0x9da: v9da(0x0) = CONST 
0x9dc: v9dc = SHA3 v9da(0x0) v9d9(0x40)
0x9dd: v9dd = SLOAD v9dc
0x9e3: JUMP v366(0x399)
----------------------------------

Begin block 0x9e4
prev = {'0x3bb'}, next = {'0xa7a', '0xa34'}
----------------------------------
Block 0x9e4
0x9e5: v9e5(0x5) = CONST 
0x9e8: v9e8 = SLOAD v9e5(0x5)
0x9e9: v9e9(0x1) = CONST 
0x9ec: v9ec(0x1) = CONST 
0x9ee: v9ee = AND v9ec(0x1) v9e8
0x9ef: v9ef = ISZERO v9ee
0x9f0: v9f0(0x100) = CONST 
0x9f3: v9f3 = MUL v9f0(0x100) v9ef
0x9f4: v9f4 = SUB v9f3 v9e9(0x1)
0x9f5: v9f5 = AND v9f4 v9e8
0x9f6: v9f6(0x2) = CONST 
0x9f9: v9f9 = DIV v9f5 v9f6(0x2)
0x9fb: v9fb(0x1f) = CONST 
0x9fd: v9fd = ADD v9fb(0x1f) v9f9
0x9fe: v9fe(0x20) = CONST 
0xa02: va02 = DIV v9fd v9fe(0x20)
0xa03: va03 = MUL va02 v9fe(0x20)
0xa04: va04(0x20) = CONST 
0xa06: va06 = ADD va04(0x20) va03
0xa07: va07(0x40) = CONST 
0xa09: va09 = MLOAD va07(0x40)
0xa0c: va0c = ADD va09 va06
0xa0d: va0d(0x40) = CONST 
0xa0f: MSTORE va0d(0x40) va0c
0xa16: MSTORE va09 v9f9
0xa17: va17(0x20) = CONST 
0xa19: va19 = ADD va17(0x20) va09
0xa1c: va1c = SLOAD v9e5(0x5)
0xa1d: va1d(0x1) = CONST 
0xa20: va20(0x1) = CONST 
0xa22: va22 = AND va20(0x1) va1c
0xa23: va23 = ISZERO va22
0xa24: va24(0x100) = CONST 
0xa27: va27 = MUL va24(0x100) va23
0xa28: va28 = SUB va27 va1d(0x1)
0xa29: va29 = AND va28 va1c
0xa2a: va2a(0x2) = CONST 
0xa2d: va2d = DIV va29 va2a(0x2)
0xa2f: va2f = ISZERO va2d
0xa30: va30(0xa7a) = CONST 
0xa33: JUMPI va30(0xa7a) va2f
----------------------------------

Begin block 0xa34
prev = {'0x9e4'}, next = {'0xa3c', '0xa4f'}
----------------------------------
Block 0xa34
0xa35: va35(0x1f) = CONST 
0xa37: va37 = LT va35(0x1f) va2d
0xa38: va38(0xa4f) = CONST 
0xa3b: JUMPI va38(0xa4f) va37
----------------------------------

Begin block 0xa3c
prev = {'0xa34'}, next = {'0xa7a'}
----------------------------------
Block 0xa3c
0xa3c: va3c(0x100) = CONST 
0xa41: va41 = SLOAD v9e5(0x5)
0xa42: va42 = DIV va41 va3c(0x100)
0xa43: va43 = MUL va42 va3c(0x100)
0xa45: MSTORE va19 va43
0xa47: va47(0x20) = CONST 
0xa49: va49 = ADD va47(0x20) va19
0xa4b: va4b(0xa7a) = CONST 
0xa4e: JUMP va4b(0xa7a)
----------------------------------

Begin block 0xa4f
prev = {'0xa34'}, next = {'0xa5d'}
----------------------------------
Block 0xa4f
0xa51: va51 = ADD va19 va2d
0xa54: va54(0x0) = CONST 
0xa56: MSTORE va54(0x0) v9e5(0x5)
0xa57: va57(0x20) = CONST 
0xa59: va59(0x0) = CONST 
0xa5b: va5b = SHA3 va59(0x0) va57(0x20)
----------------------------------

Begin block 0xa5d
prev = {'0xa5d', '0xa4f'}, next = {'0xa71', '0xa5d'}
----------------------------------
Block 0xa5d
0xa5d_0x0: va5d_0 = PHI va19 va69
0xa5d_0x1: va5d_1 = PHI va5b va65
0xa5f: va5f = SLOAD va5d_1
0xa61: MSTORE va5d_0 va5f
0xa63: va63(0x1) = CONST 
0xa65: va65 = ADD va63(0x1) va5d_1
0xa67: va67(0x20) = CONST 
0xa69: va69 = ADD va67(0x20) va5d_0
0xa6c: va6c = GT va51 va69
0xa6d: va6d(0xa5d) = CONST 
0xa70: JUMPI va6d(0xa5d) va6c
----------------------------------

Begin block 0xa71
prev = {'0xa5d'}, next = {'0xa7a'}
----------------------------------
Block 0xa71
0xa73: va73 = SUB va69 va51
0xa74: va74(0x1f) = CONST 
0xa76: va76 = AND va74(0x1f) va73
0xa78: va78 = ADD va51 va76
----------------------------------

Begin block 0xa7a
prev = {'0xa3c', '0xa71', '0x9e4'}, next = {'0x3c4'}
----------------------------------
Block 0xa7a
0xa81: JUMP v3bd(0x3c4)
----------------------------------

Begin block 0xa82
prev = {'0x44b'}, next = {'0xad2', '0xace'}
----------------------------------
Block 0xa82
0xa83: va83(0x0) = CONST 
0xa86: va86(0x1) = CONST 
0xa88: va88(0x0) = CONST 
0xa8a: va8a = CALLER 
0xa8b: va8b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa0: vaa0 = AND va8b(0xffffffffffffffffffffffffffffffffffffffff) va8a
0xaa1: vaa1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab6: vab6 = AND vaa1(0xffffffffffffffffffffffffffffffffffffffff) vaa0
0xab8: MSTORE va88(0x0) vab6
0xab9: vab9(0x20) = CONST 
0xabb: vabb(0x20) = ADD vab9(0x20) va88(0x0)
0xabe: MSTORE vabb(0x20) va86(0x1)
0xabf: vabf(0x20) = CONST 
0xac1: vac1(0x40) = ADD vabf(0x20) vabb(0x20)
0xac2: vac2(0x0) = CONST 
0xac4: vac4 = SHA3 vac2(0x0) vac1(0x40)
0xac5: vac5 = SLOAD vac4
0xac6: vac6 = LT vac5 v47a
0xac7: vac7 = ISZERO vac6
0xac8: vac8 = ISZERO vac7
0xac9: vac9 = ISZERO vac8
0xaca: vaca(0xad2) = CONST 
0xacd: JUMPI vaca(0xad2) vac9
----------------------------------

Begin block 0xace
prev = {'0xa82'}, next = {}
----------------------------------
Block 0xace
0xace: vace(0x0) = CONST 
0xad1: REVERT vace(0x0) vace(0x0)
----------------------------------

Begin block 0xad2
prev = {'0xa82'}, next = {'0x48a'}
----------------------------------
Block 0xad2
0xad4: vad4(0x1) = CONST 
0xad6: vad6(0x0) = CONST 
0xad8: vad8 = CALLER 
0xad9: vad9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaee: vaee = AND vad9(0xffffffffffffffffffffffffffffffffffffffff) vad8
0xaef: vaef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb04: vb04 = AND vaef(0xffffffffffffffffffffffffffffffffffffffff) vaee
0xb06: MSTORE vad6(0x0) vb04
0xb07: vb07(0x20) = CONST 
0xb09: vb09(0x20) = ADD vb07(0x20) vad6(0x0)
0xb0c: MSTORE vb09(0x20) vad4(0x1)
0xb0d: vb0d(0x20) = CONST 
0xb0f: vb0f(0x40) = ADD vb0d(0x20) vb09(0x20)
0xb10: vb10(0x0) = CONST 
0xb12: vb12 = SHA3 vb10(0x0) vb0f(0x40)
0xb13: vb13(0x0) = CONST 
0xb17: vb17 = SLOAD vb12
0xb18: vb18 = SUB vb17 v47a
0xb1e: SSTORE vb12 vb18
0xb21: vb21(0x1) = CONST 
0xb23: vb23(0x0) = CONST 
0xb26: vb26(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb3b: vb3b = AND vb26(0xffffffffffffffffffffffffffffffffffffffff) v470
0xb3c: vb3c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb51: vb51 = AND vb3c(0xffffffffffffffffffffffffffffffffffffffff) vb3b
0xb53: MSTORE vb23(0x0) vb51
0xb54: vb54(0x20) = CONST 
0xb56: vb56(0x20) = ADD vb54(0x20) vb23(0x0)
0xb59: MSTORE vb56(0x20) vb21(0x1)
0xb5a: vb5a(0x20) = CONST 
0xb5c: vb5c(0x40) = ADD vb5a(0x20) vb56(0x20)
0xb5d: vb5d(0x0) = CONST 
0xb5f: vb5f = SHA3 vb5d(0x0) vb5c(0x40)
0xb60: vb60(0x0) = CONST 
0xb64: vb64 = SLOAD vb5f
0xb65: vb65 = ADD vb64 v47a
0xb6b: SSTORE vb5f vb65
0xb6e: vb6e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb83: vb83 = AND vb6e(0xffffffffffffffffffffffffffffffffffffffff) v470
0xb84: vb84 = CALLER 
0xb85: vb85(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9a: vb9a = AND vb85(0xffffffffffffffffffffffffffffffffffffffff) vb84
0xb9b: vb9b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xbbd: vbbd(0x40) = CONST 
0xbbf: vbbf = MLOAD vbbd(0x40)
0xbc3: MSTORE vbbf v47a
0xbc4: vbc4(0x20) = CONST 
0xbc6: vbc6 = ADD vbc4(0x20) vbbf
0xbca: vbca(0x40) = CONST 
0xbcc: vbcc = MLOAD vbca(0x40)
0xbcf: vbcf = SUB vbc6 vbcc
0xbd1: LOG3 vbcc vbcf vb9b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vb9a vb83
0xbd2: vbd2(0x1) = CONST 
0xbda: JUMP v44d(0x48a)
----------------------------------

Begin block 0xbdb
prev = {'0x4b0'}, next = {'0x505'}
----------------------------------
Block 0xbdb
0xbdc: vbdc(0x0) = CONST 
0xbde: vbde(0x2) = CONST 
0xbe0: vbe0(0x0) = CONST 
0xbe3: vbe3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf8: vbf8 = AND vbe3(0xffffffffffffffffffffffffffffffffffffffff) v4d5
0xbf9: vbf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0e: vc0e = AND vbf9(0xffffffffffffffffffffffffffffffffffffffff) vbf8
0xc10: MSTORE vbe0(0x0) vc0e
0xc11: vc11(0x20) = CONST 
0xc13: vc13(0x20) = ADD vc11(0x20) vbe0(0x0)
0xc16: MSTORE vc13(0x20) vbde(0x2)
0xc17: vc17(0x20) = CONST 
0xc19: vc19(0x40) = ADD vc17(0x20) vc13(0x20)
0xc1a: vc1a(0x0) = CONST 
0xc1c: vc1c = SHA3 vc1a(0x0) vc19(0x40)
0xc1d: vc1d(0x0) = CONST 
0xc20: vc20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc35: vc35 = AND vc20(0xffffffffffffffffffffffffffffffffffffffff) v4f5
0xc36: vc36(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc4b: vc4b = AND vc36(0xffffffffffffffffffffffffffffffffffffffff) vc35
0xc4d: MSTORE vc1d(0x0) vc4b
0xc4e: vc4e(0x20) = CONST 
0xc50: vc50(0x20) = ADD vc4e(0x20) vc1d(0x0)
0xc53: MSTORE vc50(0x20) vc1c
0xc54: vc54(0x20) = CONST 
0xc56: vc56(0x40) = ADD vc54(0x20) vc50(0x20)
0xc57: vc57(0x0) = CONST 
0xc59: vc59 = SHA3 vc57(0x0) vc56(0x40)
0xc5a: vc5a = SLOAD vc59
0xc61: JUMP v4b2(0x505)
----------------------------------

Begin block 0xca1
prev = {'0x0', '0xa4'}, next = {}
----------------------------------
Block 0xca1
0xca2: vca2(0xaf) = CONST 
0xca3: CALLPRIVATE vca2(0xaf)
----------------------------------

Begin block 0xca4
prev = {'0xd'}, next = {}
----------------------------------
Block 0xca4
0xca5: vca5(0xb4) = CONST 
0xca6: CALLPRIVATE vca5(0xb4)
----------------------------------

Begin block 0xca7
prev = {'0x41'}, next = {}
----------------------------------
Block 0xca7
0xca8: vca8(0x144) = CONST 
0xca9: CALLPRIVATE vca8(0x144)
----------------------------------

Begin block 0xcaa
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xcaa
0xcab: vcab(0x1a9) = CONST 
0xcac: CALLPRIVATE vcab(0x1a9)
----------------------------------

Begin block 0xcad
prev = {'0x57'}, next = {}
----------------------------------
Block 0xcad
0xcae: vcae(0x1d4) = CONST 
0xcaf: CALLPRIVATE vcae(0x1d4)
----------------------------------

Begin block 0xcb0
prev = {'0x62'}, next = {}
----------------------------------
Block 0xcb0
0xcb1: vcb1(0x259) = CONST 
0xcb2: CALLPRIVATE vcb1(0x259)
----------------------------------

Begin block 0xcb3
prev = {'0x6d'}, next = {}
----------------------------------
Block 0xcb3
0xcb4: vcb4(0x2b0) = CONST 
0xcb5: CALLPRIVATE vcb4(0x2b0)
----------------------------------

Begin block 0xcb6
prev = {'0x78'}, next = {}
----------------------------------
Block 0xcb6
0xcb7: vcb7(0x2e1) = CONST 
0xcb8: CALLPRIVATE vcb7(0x2e1)
----------------------------------

Begin block 0xcb9
prev = {'0x83'}, next = {}
----------------------------------
Block 0xcb9
0xcba: vcba(0x358) = CONST 
0xcbb: CALLPRIVATE vcba(0x358)
----------------------------------

Begin block 0xcbc
prev = {'0x8e'}, next = {}
----------------------------------
Block 0xcbc
0xcbd: vcbd(0x3af) = CONST 
0xcbe: CALLPRIVATE vcbd(0x3af)
----------------------------------

Begin block 0xcbf
prev = {'0x99'}, next = {}
----------------------------------
Block 0xcbf
0xcc0: vcc0(0x43f) = CONST 
0xcc1: CALLPRIVATE vcc0(0x43f)
----------------------------------

Begin block 0xcc2
prev = {'0xa4'}, next = {}
----------------------------------
Block 0xcc2
0xcc3: vcc3(0x4a4) = CONST 
0xcc4: CALLPRIVATE vcc3(0x4a4)
----------------------------------
