
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1a', '0xe62'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0xe52: ve52(0xe62) = CONST 
0xe53: JUMPI ve52(0xe62) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x5b', '0x2b'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x8da5cb5b) = CONST 
0x26: v26 = GT v21(0x8da5cb5b) v1f
0x27: v27(0x5b) = CONST 
0x2a: JUMPI v27(0x5b) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0xe6e', '0x36'}
----------------------------------
Block 0x2b
0x2c: v2c(0x8da5cb5b) = CONST 
0x31: v31 = EQ v2c(0x8da5cb5b) v1f
0xe54: ve54(0xe6e) = CONST 
0xe55: JUMPI ve54(0xe6e) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x41', '0xe71'}
----------------------------------
Block 0x36
0x37: v37(0x989796b5) = CONST 
0x3c: v3c = EQ v37(0x989796b5) v1f
0xe56: ve56(0xe71) = CONST 
0xe57: JUMPI ve56(0xe71) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0xe74', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0xeb511dd4) = CONST 
0x47: v47 = EQ v42(0xeb511dd4) v1f
0xe58: ve58(0xe74) = CONST 
0xe59: JUMPI ve58(0xe74) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0xe77'}
----------------------------------
Block 0x4c
0x4d: v4d(0xf2fde38b) = CONST 
0x52: v52 = EQ v4d(0xf2fde38b) v1f
0xe5a: ve5a(0xe77) = CONST 
0xe5b: JUMPI ve5a(0xe77) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x7c0x0'}
----------------------------------
Block 0x57
0x57: v57(0x7c) = CONST 
0x5a: JUMP v57(0x7c)
----------------------------------

Begin block 0x5b
prev = {'0x1a'}, next = {'0x66', '0xe65'}
----------------------------------
Block 0x5b
0x5d: v5d(0x23de29) = CONST 
0x61: v61 = EQ v5d(0x23de29) v1f
0xe5c: ve5c(0xe65) = CONST 
0xe5d: JUMPI ve5c(0xe65) v61
----------------------------------

Begin block 0x66
prev = {'0x5b'}, next = {'0xe68', '0x71'}
----------------------------------
Block 0x66
0x67: v67(0xcd865ec) = CONST 
0x6c: v6c = EQ v67(0xcd865ec) v1f
0xe5e: ve5e(0xe68) = CONST 
0xe5f: JUMPI ve5e(0xe68) v6c
----------------------------------

Begin block 0x71
prev = {'0x66'}, next = {'0xe62', '0xe6b'}
----------------------------------
Block 0x71
0x72: v72(0x715018a6) = CONST 
0x77: v77 = EQ v72(0x715018a6) v1f
0xe60: ve60(0xe6b) = CONST 
0xe61: JUMPI ve60(0xe6b) v77
----------------------------------

Begin block 0x7c
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x7c
0x7d: v7d(0x0) = CONST 
0x80: REVERT v7d(0x0) v7d(0x0)
----------------------------------

Begin block 0x7c0x0
prev = {'0x57', '0xe62'}, next = {}
----------------------------------
Block 0x7c0x0
0x7d0x0: v07d(0x0) = CONST 
0x800x0: REVERT v07d(0x0) v07d(0x0)
----------------------------------

Begin block 0x81
prev = {}, next = {'0x93', '0x97'}
----------------------------------
function tokensReceived(address,address,address,uint256,bytes,bytes)()
Block 0x81
0x82: v82(0x16b) = CONST 
0x85: v85(0x4) = CONST 
0x88: v88 = CALLDATASIZE 
0x89: v89 = SUB v88 v85(0x4)
0x8a: v8a(0xc0) = CONST 
0x8d: v8d = LT v89 v8a(0xc0)
0x8e: v8e = ISZERO v8d
0x8f: v8f(0x97) = CONST 
0x92: JUMPI v8f(0x97) v8e
----------------------------------

Begin block 0x93
prev = {'0x81'}, next = {}
----------------------------------
Block 0x93
0x93: v93(0x0) = CONST 
0x96: REVERT v93(0x0) v93(0x0)
----------------------------------

Begin block 0x97
prev = {'0x81'}, next = {'0xd6', '0xda'}
----------------------------------
Block 0x97
0x98: v98(0x1) = CONST 
0x9a: v9a(0x1) = CONST 
0x9c: v9c(0xa0) = CONST 
0x9e: v9e(0x10000000000000000000000000000000000000000) = SHL v9c(0xa0) v9a(0x1)
0x9f: v9f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9e(0x10000000000000000000000000000000000000000) v98(0x1)
0xa1: va1 = CALLDATALOAD v85(0x4)
0xa3: va3 = AND v9f(0xffffffffffffffffffffffffffffffffffffffff) va1
0xa5: va5(0x20) = CONST 
0xa8: va8 = ADD v85(0x4) va5(0x20)
0xa9: va9 = CALLDATALOAD va8
0xab: vab = AND v9f(0xffffffffffffffffffffffffffffffffffffffff) va9
0xad: vad(0x40) = CONST 
0xb0: vb0 = ADD v85(0x4) vad(0x40)
0xb1: vb1 = CALLDATALOAD vb0
0xb4: vb4 = AND v9f(0xffffffffffffffffffffffffffffffffffffffff) vb1
0xb6: vb6(0x60) = CONST 
0xb9: vb9 = ADD v85(0x4) vb6(0x60)
0xba: vba = CALLDATALOAD vb9
0xbe: vbe = ADD v85(0x4) v89
0xc0: vc0(0xa0) = CONST 
0xc3: vc3 = ADD v85(0x4) vc0(0xa0)
0xc4: vc4(0x80) = CONST 
0xc7: vc7 = ADD v85(0x4) vc4(0x80)
0xc8: vc8 = CALLDATALOAD vc7
0xc9: vc9(0x100000000) = CONST 
0xd0: vd0 = GT vc8 vc9(0x100000000)
0xd1: vd1 = ISZERO vd0
0xd2: vd2(0xda) = CONST 
0xd5: JUMPI vd2(0xda) vd1
----------------------------------

Begin block 0xd6
prev = {'0x97'}, next = {}
----------------------------------
Block 0xd6
0xd6: vd6(0x0) = CONST 
0xd9: REVERT vd6(0x0) vd6(0x0)
----------------------------------

Begin block 0xda
prev = {'0x97'}, next = {'0xe8', '0xec'}
----------------------------------
Block 0xda
0xdc: vdc = ADD v85(0x4) vc8
0xde: vde(0x20) = CONST 
0xe1: ve1 = ADD vdc vde(0x20)
0xe2: ve2 = GT ve1 vbe
0xe3: ve3 = ISZERO ve2
0xe4: ve4(0xec) = CONST 
0xe7: JUMPI ve4(0xec) ve3
----------------------------------

Begin block 0xe8
prev = {'0xda'}, next = {}
----------------------------------
Block 0xe8
0xe8: ve8(0x0) = CONST 
0xeb: REVERT ve8(0x0) ve8(0x0)
----------------------------------

Begin block 0xec
prev = {'0xda'}, next = {'0x10a', '0x10e'}
----------------------------------
Block 0xec
0xee: vee = CALLDATALOAD vdc
0xf0: vf0(0x20) = CONST 
0xf2: vf2 = ADD vf0(0x20) vdc
0xf5: vf5(0x1) = CONST 
0xf8: vf8 = MUL vee vf5(0x1)
0xfa: vfa = ADD vf2 vf8
0xfb: vfb = GT vfa vbe
0xfc: vfc(0x100000000) = CONST 
0x103: v103 = GT vee vfc(0x100000000)
0x104: v104 = OR v103 vfb
0x105: v105 = ISZERO v104
0x106: v106(0x10e) = CONST 
0x109: JUMPI v106(0x10e) v105
----------------------------------

Begin block 0x10a
prev = {'0xec'}, next = {}
----------------------------------
Block 0x10a
0x10a: v10a(0x0) = CONST 
0x10d: REVERT v10a(0x0) v10a(0x0)
----------------------------------

Begin block 0x10e
prev = {'0xec'}, next = {'0x128', '0x12c'}
----------------------------------
Block 0x10e
0x115: v115(0x20) = CONST 
0x118: v118 = ADD vc3 v115(0x20)
0x11a: v11a = CALLDATALOAD vc3
0x11b: v11b(0x100000000) = CONST 
0x122: v122 = GT v11a v11b(0x100000000)
0x123: v123 = ISZERO v122
0x124: v124(0x12c) = CONST 
0x127: JUMPI v124(0x12c) v123
----------------------------------

Begin block 0x128
prev = {'0x10e'}, next = {}
----------------------------------
Block 0x128
0x128: v128(0x0) = CONST 
0x12b: REVERT v128(0x0) v128(0x0)
----------------------------------

Begin block 0x12c
prev = {'0x10e'}, next = {'0x13e', '0x13a'}
----------------------------------
Block 0x12c
0x12e: v12e = ADD v85(0x4) v11a
0x130: v130(0x20) = CONST 
0x133: v133 = ADD v12e v130(0x20)
0x134: v134 = GT v133 vbe
0x135: v135 = ISZERO v134
0x136: v136(0x13e) = CONST 
0x139: JUMPI v136(0x13e) v135
----------------------------------

Begin block 0x13a
prev = {'0x12c'}, next = {}
----------------------------------
Block 0x13a
0x13a: v13a(0x0) = CONST 
0x13d: REVERT v13a(0x0) v13a(0x0)
----------------------------------

Begin block 0x13e
prev = {'0x12c'}, next = {'0x160', '0x15c'}
----------------------------------
Block 0x13e
0x140: v140 = CALLDATALOAD v12e
0x142: v142(0x20) = CONST 
0x144: v144 = ADD v142(0x20) v12e
0x147: v147(0x1) = CONST 
0x14a: v14a = MUL v140 v147(0x1)
0x14c: v14c = ADD v144 v14a
0x14d: v14d = GT v14c vbe
0x14e: v14e(0x100000000) = CONST 
0x155: v155 = GT v140 v14e(0x100000000)
0x156: v156 = OR v155 v14d
0x157: v157 = ISZERO v156
0x158: v158(0x160) = CONST 
0x15b: JUMPI v158(0x160) v157
----------------------------------

Begin block 0x15c
prev = {'0x13e'}, next = {}
----------------------------------
Block 0x15c
0x15c: v15c(0x0) = CONST 
0x15f: REVERT v15c(0x0) v15c(0x0)
----------------------------------

Begin block 0x160
prev = {'0x13e'}, next = {'0x239'}
----------------------------------
Block 0x160
0x167: v167(0x239) = CONST 
0x16a: JUMP v167(0x239)
----------------------------------

Begin block 0x16b0x81
prev = {'0x27b'}, next = {}
----------------------------------
Block 0x16b0x81
0x16c0x81: STOP 
----------------------------------

Begin block 0x16b0x16d
prev = {'0x370'}, next = {}
----------------------------------
Block 0x16b0x16d
0x16c0x16d: STOP 
----------------------------------

Begin block 0x16b0x193
prev = {'0x3e1'}, next = {}
----------------------------------
Block 0x16b0x193
0x16c0x193: STOP 
----------------------------------

Begin block 0x16b0x1e5
prev = {'0x61f'}, next = {}
----------------------------------
Block 0x16b0x1e5
0x16c0x1e5: STOP 
----------------------------------

Begin block 0x16b0x213
prev = {'0x72e'}, next = {}
----------------------------------
Block 0x16b0x213
0x16c0x213: STOP 
----------------------------------

Begin block 0x16d
prev = {}, next = {'0x17f', '0x183'}
----------------------------------
function recover(address)()
Block 0x16d
0x16e: v16e(0x16b) = CONST 
0x171: v171(0x4) = CONST 
0x174: v174 = CALLDATASIZE 
0x175: v175 = SUB v174 v171(0x4)
0x176: v176(0x20) = CONST 
0x179: v179 = LT v175 v176(0x20)
0x17a: v17a = ISZERO v179
0x17b: v17b(0x183) = CONST 
0x17e: JUMPI v17b(0x183) v17a
----------------------------------

Begin block 0x17f
prev = {'0x16d'}, next = {}
----------------------------------
Block 0x17f
0x17f: v17f(0x0) = CONST 
0x182: REVERT v17f(0x0) v17f(0x0)
----------------------------------

Begin block 0x183
prev = {'0x16d'}, next = {'0x285'}
----------------------------------
Block 0x183
0x185: v185 = CALLDATALOAD v171(0x4)
0x186: v186(0x1) = CONST 
0x188: v188(0x1) = CONST 
0x18a: v18a(0xa0) = CONST 
0x18c: v18c(0x10000000000000000000000000000000000000000) = SHL v18a(0xa0) v188(0x1)
0x18d: v18d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v18c(0x10000000000000000000000000000000000000000) v186(0x1)
0x18e: v18e = AND v18d(0xffffffffffffffffffffffffffffffffffffffff) v185
0x18f: v18f(0x285) = CONST 
0x192: JUMP v18f(0x285)
----------------------------------

Begin block 0x193
prev = {}, next = {'0x377'}
----------------------------------
function renounceOwnership()()
Block 0x193
0x194: v194(0x16b) = CONST 
0x197: v197(0x377) = CONST 
0x19a: JUMP v197(0x377)
----------------------------------

Begin block 0x19b
prev = {}, next = {'0x42b'}
----------------------------------
function owner()()
Block 0x19b
0x19c: v19c(0x1a3) = CONST 
0x19f: v19f(0x42b) = CONST 
0x1a2: JUMP v19f(0x42b)
----------------------------------

Begin block 0x1a30x19b
prev = {'0x42b'}, next = {}
----------------------------------
Block 0x1a30x19b
0x1a40x19b: v19b1a4(0x40) = CONST 
0x1a70x19b: v19b1a7 = MLOAD v19b1a4(0x40)
0x1a80x19b: v19b1a8(0x1) = CONST 
0x1aa0x19b: v19b1aa(0x1) = CONST 
0x1ac0x19b: v19b1ac(0xa0) = CONST 
0x1ae0x19b: v19b1ae(0x10000000000000000000000000000000000000000) = SHL v19b1ac(0xa0) v19b1aa(0x1)
0x1af0x19b: v19b1af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v19b1ae(0x10000000000000000000000000000000000000000) v19b1a8(0x1)
0x1b20x19b: v19b1b2 = AND v437 v19b1af(0xffffffffffffffffffffffffffffffffffffffff)
0x1b40x19b: MSTORE v19b1a7 v19b1b2
0x1b50x19b: v19b1b5 = MLOAD v19b1a4(0x40)
0x1b90x19b: v19b1b9 = SUB v19b1a7 v19b1b5
0x1ba0x19b: v19b1ba(0x20) = CONST 
0x1bc0x19b: v19b1bc = ADD v19b1ba(0x20) v19b1b9
0x1be0x19b: RETURN v19b1b5 v19b1bc
----------------------------------

Begin block 0x1a30x1bf
prev = {'0x43a'}, next = {}
----------------------------------
Block 0x1a30x1bf
0x1a40x1bf: v1bf1a4(0x40) = CONST 
0x1a70x1bf: v1bf1a7 = MLOAD v1bf1a4(0x40)
0x1a80x1bf: v1bf1a8(0x1) = CONST 
0x1aa0x1bf: v1bf1aa(0x1) = CONST 
0x1ac0x1bf: v1bf1ac(0xa0) = CONST 
0x1ae0x1bf: v1bf1ae(0x10000000000000000000000000000000000000000) = SHL v1bf1ac(0xa0) v1bf1aa(0x1)
0x1af0x1bf: v1bf1af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1bf1ae(0x10000000000000000000000000000000000000000) v1bf1a8(0x1)
0x1b20x1bf: v1bf1b2 = AND v452 v1bf1af(0xffffffffffffffffffffffffffffffffffffffff)
0x1b40x1bf: MSTORE v1bf1a7 v1bf1b2
0x1b50x1bf: v1bf1b5 = MLOAD v1bf1a4(0x40)
0x1b90x1bf: v1bf1b9 = SUB v1bf1a7 v1bf1b5
0x1ba0x1bf: v1bf1ba(0x20) = CONST 
0x1bc0x1bf: v1bf1bc = ADD v1bf1ba(0x20) v1bf1b9
0x1be0x1bf: RETURN v1bf1b5 v1bf1bc
----------------------------------

Begin block 0x1bf
prev = {}, next = {'0x1d1', '0x1d5'}
----------------------------------
function 0x989796b5()
Block 0x1bf
0x1c0: v1c0(0x1a3) = CONST 
0x1c3: v1c3(0x4) = CONST 
0x1c6: v1c6 = CALLDATASIZE 
0x1c7: v1c7 = SUB v1c6 v1c3(0x4)
0x1c8: v1c8(0x20) = CONST 
0x1cb: v1cb = LT v1c7 v1c8(0x20)
0x1cc: v1cc = ISZERO v1cb
0x1cd: v1cd(0x1d5) = CONST 
0x1d0: JUMPI v1cd(0x1d5) v1cc
----------------------------------

Begin block 0x1d1
prev = {'0x1bf'}, next = {}
----------------------------------
Block 0x1d1
0x1d1: v1d1(0x0) = CONST 
0x1d4: REVERT v1d1(0x0) v1d1(0x0)
----------------------------------

Begin block 0x1d5
prev = {'0x1bf'}, next = {'0x43a'}
----------------------------------
Block 0x1d5
0x1d7: v1d7 = CALLDATALOAD v1c3(0x4)
0x1d8: v1d8(0x1) = CONST 
0x1da: v1da(0x1) = CONST 
0x1dc: v1dc(0xa0) = CONST 
0x1de: v1de(0x10000000000000000000000000000000000000000) = SHL v1dc(0xa0) v1da(0x1)
0x1df: v1df(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1de(0x10000000000000000000000000000000000000000) v1d8(0x1)
0x1e0: v1e0 = AND v1df(0xffffffffffffffffffffffffffffffffffffffff) v1d7
0x1e1: v1e1(0x43a) = CONST 
0x1e4: JUMP v1e1(0x43a)
----------------------------------

Begin block 0x1e5
prev = {}, next = {'0x1fb', '0x1f7'}
----------------------------------
function 0xeb511dd4()
Block 0x1e5
0x1e6: v1e6(0x16b) = CONST 
0x1e9: v1e9(0x4) = CONST 
0x1ec: v1ec = CALLDATASIZE 
0x1ed: v1ed = SUB v1ec v1e9(0x4)
0x1ee: v1ee(0x40) = CONST 
0x1f1: v1f1 = LT v1ed v1ee(0x40)
0x1f2: v1f2 = ISZERO v1f1
0x1f3: v1f3(0x1fb) = CONST 
0x1f6: JUMPI v1f3(0x1fb) v1f2
----------------------------------

Begin block 0x1f7
prev = {'0x1e5'}, next = {}
----------------------------------
Block 0x1f7
0x1f7: v1f7(0x0) = CONST 
0x1fa: REVERT v1f7(0x0) v1f7(0x0)
----------------------------------

Begin block 0x1fb
prev = {'0x1e5'}, next = {'0x455'}
----------------------------------
Block 0x1fb
0x1fd: v1fd(0x1) = CONST 
0x1ff: v1ff(0x1) = CONST 
0x201: v201(0xa0) = CONST 
0x203: v203(0x10000000000000000000000000000000000000000) = SHL v201(0xa0) v1ff(0x1)
0x204: v204(0xffffffffffffffffffffffffffffffffffffffff) = SUB v203(0x10000000000000000000000000000000000000000) v1fd(0x1)
0x206: v206 = CALLDATALOAD v1e9(0x4)
0x208: v208 = AND v204(0xffffffffffffffffffffffffffffffffffffffff) v206
0x20a: v20a(0x20) = CONST 
0x20c: v20c = ADD v20a(0x20) v1e9(0x4)
0x20d: v20d = CALLDATALOAD v20c
0x20e: v20e = AND v20d v204(0xffffffffffffffffffffffffffffffffffffffff)
0x20f: v20f(0x455) = CONST 
0x212: JUMP v20f(0x455)
----------------------------------

Begin block 0x213
prev = {}, next = {'0x225', '0x229'}
----------------------------------
function transferOwnership(address)()
Block 0x213
0x214: v214(0x16b) = CONST 
0x217: v217(0x4) = CONST 
0x21a: v21a = CALLDATASIZE 
0x21b: v21b = SUB v21a v217(0x4)
0x21c: v21c(0x20) = CONST 
0x21f: v21f = LT v21b v21c(0x20)
0x220: v220 = ISZERO v21f
0x221: v221(0x229) = CONST 
0x224: JUMPI v221(0x229) v220
----------------------------------

Begin block 0x225
prev = {'0x213'}, next = {}
----------------------------------
Block 0x225
0x225: v225(0x0) = CONST 
0x228: REVERT v225(0x0) v225(0x0)
----------------------------------

Begin block 0x229
prev = {'0x213'}, next = {'0x67f'}
----------------------------------
Block 0x229
0x22b: v22b = CALLDATALOAD v217(0x4)
0x22c: v22c(0x1) = CONST 
0x22e: v22e(0x1) = CONST 
0x230: v230(0xa0) = CONST 
0x232: v232(0x10000000000000000000000000000000000000000) = SHL v230(0xa0) v22e(0x1)
0x233: v233(0xffffffffffffffffffffffffffffffffffffffff) = SUB v232(0x10000000000000000000000000000000000000000) v22c(0x1)
0x234: v234 = AND v233(0xffffffffffffffffffffffffffffffffffffffff) v22b
0x235: v235(0x67f) = CONST 
0x238: JUMP v235(0x67f)
----------------------------------

Begin block 0x239
prev = {'0x160'}, next = {'0x78a'}
----------------------------------
Block 0x239
0x23a: v23a(0x27b) = CONST 
0x23d: v23d = CALLER 
0x244: v244(0x1f) = CONST 
0x246: v246 = ADD v244(0x1f) vee
0x247: v247(0x20) = CONST 
0x24b: v24b = DIV v246 v247(0x20)
0x24c: v24c = MUL v24b v247(0x20)
0x24d: v24d(0x20) = CONST 
0x24f: v24f = ADD v24d(0x20) v24c
0x250: v250(0x40) = CONST 
0x252: v252 = MLOAD v250(0x40)
0x255: v255 = ADD v252 v24f
0x256: v256(0x40) = CONST 
0x258: MSTORE v256(0x40) v255
0x260: MSTORE v252 vee
0x261: v261(0x20) = CONST 
0x263: v263 = ADD v261(0x20) v252
0x269: CALLDATACOPY v263 vf2 vee
0x26a: v26a(0x0) = CONST 
0x26d: v26d = ADD v263 vee
0x271: MSTORE v26d v26a(0x0)
0x273: v273(0x78a) = CONST 
0x27a: JUMP v273(0x78a)
----------------------------------

Begin block 0x27b
prev = {'0xe03'}, next = {'0x16b0x81'}
----------------------------------
Block 0x27b
0x284: JUMP v82(0x16b)
----------------------------------

Begin block 0x285
prev = {'0x183'}, next = {'0x2d2', '0x2d6'}
----------------------------------
Block 0x285
0x286: v286(0x40) = CONST 
0x289: v289 = MLOAD v286(0x40)
0x28a: v28a(0x70a08231) = CONST 
0x28f: v28f(0xe0) = CONST 
0x291: v291(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v28f(0xe0) v28a(0x70a08231)
0x293: MSTORE v289 v291(0x70a0823100000000000000000000000000000000000000000000000000000000)
0x294: v294 = ADDRESS 
0x295: v295(0x4) = CONST 
0x298: v298 = ADD v289 v295(0x4)
0x299: MSTORE v298 v294
0x29b: v29b = MLOAD v286(0x40)
0x29c: v29c(0x1) = CONST 
0x29e: v29e(0x1) = CONST 
0x2a0: v2a0(0xa0) = CONST 
0x2a2: v2a2(0x10000000000000000000000000000000000000000) = SHL v2a0(0xa0) v29e(0x1)
0x2a3: v2a3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a2(0x10000000000000000000000000000000000000000) v29c(0x1)
0x2a5: v2a5 = AND v18e v2a3(0xffffffffffffffffffffffffffffffffffffffff)
0x2a7: v2a7(0x9bd9bbc6) = CONST 
0x2ad: v2ad = CALLER 
0x2b1: v2b1(0x70a08231) = CONST 
0x2b7: v2b7(0x24) = CONST 
0x2bb: v2bb = ADD v289 v2b7(0x24)
0x2bd: v2bd(0x20) = CONST 
0x2c5: v2c5 = SUB v289 v29b
0x2c6: v2c6 = ADD v2c5 v2b7(0x24)
0x2ca: v2ca = EXTCODESIZE v2a5
0x2cb: v2cb = ISZERO v2ca
0x2cd: v2cd = ISZERO v2cb
0x2ce: v2ce(0x2d6) = CONST 
0x2d1: JUMPI v2ce(0x2d6) v2cd
----------------------------------

Begin block 0x2d2
prev = {'0x285'}, next = {}
----------------------------------
Block 0x2d2
0x2d2: v2d2(0x0) = CONST 
0x2d5: REVERT v2d2(0x0) v2d2(0x0)
----------------------------------

Begin block 0x2d6
prev = {'0x285'}, next = {'0x2e1', '0x2ea'}
----------------------------------
Block 0x2d6
0x2d8: v2d8 = GAS 
0x2d9: v2d9 = STATICCALL v2d8 v2a5 v29b v2c6 v29b v2bd(0x20)
0x2da: v2da = ISZERO v2d9
0x2dc: v2dc = ISZERO v2da
0x2dd: v2dd(0x2ea) = CONST 
0x2e0: JUMPI v2dd(0x2ea) v2dc
----------------------------------

Begin block 0x2e1
prev = {'0x2d6'}, next = {}
----------------------------------
Block 0x2e1
0x2e1: v2e1 = RETURNDATASIZE 
0x2e2: v2e2(0x0) = CONST 
0x2e5: RETURNDATACOPY v2e2(0x0) v2e2(0x0) v2e1
0x2e6: v2e6 = RETURNDATASIZE 
0x2e7: v2e7(0x0) = CONST 
0x2e9: REVERT v2e7(0x0) v2e6
----------------------------------

Begin block 0x2ea
prev = {'0x2d6'}, next = {'0x2fc', '0x300'}
----------------------------------
Block 0x2ea
0x2ef: v2ef(0x40) = CONST 
0x2f1: v2f1 = MLOAD v2ef(0x40)
0x2f2: v2f2 = RETURNDATASIZE 
0x2f3: v2f3(0x20) = CONST 
0x2f6: v2f6 = LT v2f2 v2f3(0x20)
0x2f7: v2f7 = ISZERO v2f6
0x2f8: v2f8(0x300) = CONST 
0x2fb: JUMPI v2f8(0x300) v2f7
----------------------------------

Begin block 0x2fc
prev = {'0x2ea'}, next = {}
----------------------------------
Block 0x2fc
0x2fc: v2fc(0x0) = CONST 
0x2ff: REVERT v2fc(0x0) v2fc(0x0)
----------------------------------

Begin block 0x300
prev = {'0x2ea'}, next = {'0x358', '0x35c'}
----------------------------------
Block 0x300
0x302: v302 = MLOAD v2f1
0x303: v303(0x40) = CONST 
0x306: v306 = MLOAD v303(0x40)
0x307: v307(0x1) = CONST 
0x309: v309(0x1) = CONST 
0x30b: v30b(0xe0) = CONST 
0x30d: v30d(0x100000000000000000000000000000000000000000000000000000000) = SHL v30b(0xe0) v309(0x1)
0x30e: v30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v30d(0x100000000000000000000000000000000000000000000000000000000) v307(0x1)
0x30f: v30f(0xffffffff00000000000000000000000000000000000000000000000000000000) = NOT v30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x310: v310(0xe0) = CONST 
0x314: v314 = SHL v310(0xe0) v2a7(0x9bd9bbc6)
0x315: v315 = AND v314 v30f(0xffffffff00000000000000000000000000000000000000000000000000000000)
0x317: MSTORE v306 v315
0x318: v318(0x1) = CONST 
0x31a: v31a(0x1) = CONST 
0x31c: v31c(0xa0) = CONST 
0x31e: v31e(0x10000000000000000000000000000000000000000) = SHL v31c(0xa0) v31a(0x1)
0x31f: v31f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v31e(0x10000000000000000000000000000000000000000) v318(0x1)
0x322: v322 = AND v2ad v31f(0xffffffffffffffffffffffffffffffffffffffff)
0x323: v323(0x4) = CONST 
0x326: v326 = ADD v306 v323(0x4)
0x327: MSTORE v326 v322
0x328: v328(0x24) = CONST 
0x32b: v32b = ADD v306 v328(0x24)
0x32f: MSTORE v32b v302
0x330: v330(0x60) = CONST 
0x332: v332(0x44) = CONST 
0x335: v335 = ADD v306 v332(0x44)
0x336: MSTORE v335 v330(0x60)
0x337: v337(0x0) = CONST 
0x339: v339(0x64) = CONST 
0x33c: v33c = ADD v306 v339(0x64)
0x33f: MSTORE v33c v337(0x0)
0x341: v341 = MLOAD v303(0x40)
0x342: v342(0xa4) = CONST 
0x346: v346 = ADD v306 v342(0xa4)
0x34a: v34a = SUB v306 v341
0x34b: v34b = ADD v34a v342(0xa4)
0x350: v350 = EXTCODESIZE v2a5
0x351: v351 = ISZERO v350
0x353: v353 = ISZERO v351
0x354: v354(0x35c) = CONST 
0x357: JUMPI v354(0x35c) v353
----------------------------------

Begin block 0x358
prev = {'0x300'}, next = {}
----------------------------------
Block 0x358
0x358: v358(0x0) = CONST 
0x35b: REVERT v358(0x0) v358(0x0)
----------------------------------

Begin block 0x35c
prev = {'0x300'}, next = {'0x370', '0x367'}
----------------------------------
Block 0x35c
0x35e: v35e = GAS 
0x35f: v35f = CALL v35e v2a5 v337(0x0) v341 v34b v341 v337(0x0)
0x360: v360 = ISZERO v35f
0x362: v362 = ISZERO v360
0x363: v363(0x370) = CONST 
0x366: JUMPI v363(0x370) v362
----------------------------------

Begin block 0x367
prev = {'0x35c'}, next = {}
----------------------------------
Block 0x367
0x367: v367 = RETURNDATASIZE 
0x368: v368(0x0) = CONST 
0x36b: RETURNDATACOPY v368(0x0) v368(0x0) v367
0x36c: v36c = RETURNDATASIZE 
0x36d: v36d(0x0) = CONST 
0x36f: REVERT v36d(0x0) v36c
----------------------------------

Begin block 0x370
prev = {'0x35c'}, next = {'0x16b0x16d'}
----------------------------------
Block 0x370
0x376: JUMP v16e(0x16b)
----------------------------------

Begin block 0x377
prev = {'0x193'}, next = {'0x37f'}
----------------------------------
Block 0x377
0x378: v378(0x37f) = CONST 
0x37b: v37b(0xe09) = CONST 
0x37e: v37e_0 = CALLPRIVATE v37b(0xe09) v378(0x37f)
----------------------------------

Begin block 0x37f
prev = {'0x377'}, next = {'0x395', '0x3e1'}
----------------------------------
Block 0x37f
0x380: v380(0x1) = CONST 
0x382: v382 = SLOAD v380(0x1)
0x383: v383(0x1) = CONST 
0x385: v385(0x1) = CONST 
0x387: v387(0xa0) = CONST 
0x389: v389(0x10000000000000000000000000000000000000000) = SHL v387(0xa0) v385(0x1)
0x38a: v38a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v389(0x10000000000000000000000000000000000000000) v383(0x1)
0x38d: v38d = AND v38a(0xffffffffffffffffffffffffffffffffffffffff) v382
0x38f: v38f = AND v37e_0 v38a(0xffffffffffffffffffffffffffffffffffffffff)
0x390: v390 = EQ v38f v38d
0x391: v391(0x3e1) = CONST 
0x394: JUMPI v391(0x3e1) v390
----------------------------------

Begin block 0x395
prev = {'0x37f'}, next = {}
----------------------------------
Block 0x395
0x395: v395(0x40) = CONST 
0x398: v398 = MLOAD v395(0x40)
0x399: v399(0x461bcd) = CONST 
0x39d: v39d(0xe5) = CONST 
0x39f: v39f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v39d(0xe5) v399(0x461bcd)
0x3a1: MSTORE v398 v39f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x3a2: v3a2(0x20) = CONST 
0x3a4: v3a4(0x4) = CONST 
0x3a7: v3a7 = ADD v398 v3a4(0x4)
0x3aa: MSTORE v3a7 v3a2(0x20)
0x3ab: v3ab(0x24) = CONST 
0x3ae: v3ae = ADD v398 v3ab(0x24)
0x3af: MSTORE v3ae v3a2(0x20)
0x3b0: v3b0(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x3d1: v3d1(0x44) = CONST 
0x3d4: v3d4 = ADD v398 v3d1(0x44)
0x3d5: MSTORE v3d4 v3b0(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x3d7: v3d7 = MLOAD v395(0x40)
0x3db: v3db = SUB v398 v3d7
0x3dc: v3dc(0x64) = CONST 
0x3de: v3de = ADD v3dc(0x64) v3db
0x3e0: REVERT v3d7 v3de
----------------------------------

Begin block 0x3e1
prev = {'0x37f'}, next = {'0x16b0x193'}
----------------------------------
Block 0x3e1
0x3e2: v3e2(0x1) = CONST 
0x3e4: v3e4 = SLOAD v3e2(0x1)
0x3e5: v3e5(0x40) = CONST 
0x3e7: v3e7 = MLOAD v3e5(0x40)
0x3e8: v3e8(0x0) = CONST 
0x3eb: v3eb(0x1) = CONST 
0x3ed: v3ed(0x1) = CONST 
0x3ef: v3ef(0xa0) = CONST 
0x3f1: v3f1(0x10000000000000000000000000000000000000000) = SHL v3ef(0xa0) v3ed(0x1)
0x3f2: v3f2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f1(0x10000000000000000000000000000000000000000) v3eb(0x1)
0x3f3: v3f3 = AND v3f2(0xffffffffffffffffffffffffffffffffffffffff) v3e4
0x3f5: v3f5(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x419: LOG3 v3e7 v3e8(0x0) v3f5(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v3f3 v3e8(0x0)
0x41a: v41a(0x1) = CONST 
0x41d: v41d = SLOAD v41a(0x1)
0x41e: v41e(0x1) = CONST 
0x420: v420(0x1) = CONST 
0x422: v422(0xa0) = CONST 
0x424: v424(0x10000000000000000000000000000000000000000) = SHL v422(0xa0) v420(0x1)
0x425: v425(0xffffffffffffffffffffffffffffffffffffffff) = SUB v424(0x10000000000000000000000000000000000000000) v41e(0x1)
0x426: v426(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v425(0xffffffffffffffffffffffffffffffffffffffff)
0x427: v427 = AND v426(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v41d
0x429: SSTORE v41a(0x1) v427
0x42a: JUMP v194(0x16b)
----------------------------------

Begin block 0x42b
prev = {'0x19b'}, next = {'0x1a30x19b'}
----------------------------------
Block 0x42b
0x42c: v42c(0x1) = CONST 
0x42e: v42e = SLOAD v42c(0x1)
0x42f: v42f(0x1) = CONST 
0x431: v431(0x1) = CONST 
0x433: v433(0xa0) = CONST 
0x435: v435(0x10000000000000000000000000000000000000000) = SHL v433(0xa0) v431(0x1)
0x436: v436(0xffffffffffffffffffffffffffffffffffffffff) = SUB v435(0x10000000000000000000000000000000000000000) v42f(0x1)
0x437: v437 = AND v436(0xffffffffffffffffffffffffffffffffffffffff) v42e
0x439: JUMP v19c(0x1a3)
----------------------------------

Begin block 0x43a
prev = {'0x1d5'}, next = {'0x1a30x1bf'}
----------------------------------
Block 0x43a
0x43b: v43b(0x3) = CONST 
0x43d: v43d(0x20) = CONST 
0x43f: MSTORE v43d(0x20) v43b(0x3)
0x440: v440(0x0) = CONST 
0x444: MSTORE v440(0x0) v1e0
0x445: v445(0x40) = CONST 
0x448: v448 = SHA3 v440(0x0) v445(0x40)
0x449: v449 = SLOAD v448
0x44a: v44a(0x1) = CONST 
0x44c: v44c(0x1) = CONST 
0x44e: v44e(0xa0) = CONST 
0x450: v450(0x10000000000000000000000000000000000000000) = SHL v44e(0xa0) v44c(0x1)
0x451: v451(0xffffffffffffffffffffffffffffffffffffffff) = SUB v450(0x10000000000000000000000000000000000000000) v44a(0x1)
0x452: v452 = AND v451(0xffffffffffffffffffffffffffffffffffffffff) v449
0x454: JUMP v1c0(0x1a3)
----------------------------------

Begin block 0x455
prev = {'0x1fb'}, next = {'0x45d'}
----------------------------------
Block 0x455
0x456: v456(0x45d) = CONST 
0x459: v459(0xe09) = CONST 
0x45c: v45c_0 = CALLPRIVATE v459(0xe09) v456(0x45d)
----------------------------------

Begin block 0x45d
prev = {'0x455'}, next = {'0x473', '0x4bf'}
----------------------------------
Block 0x45d
0x45e: v45e(0x1) = CONST 
0x460: v460 = SLOAD v45e(0x1)
0x461: v461(0x1) = CONST 
0x463: v463(0x1) = CONST 
0x465: v465(0xa0) = CONST 
0x467: v467(0x10000000000000000000000000000000000000000) = SHL v465(0xa0) v463(0x1)
0x468: v468(0xffffffffffffffffffffffffffffffffffffffff) = SUB v467(0x10000000000000000000000000000000000000000) v461(0x1)
0x46b: v46b = AND v468(0xffffffffffffffffffffffffffffffffffffffff) v460
0x46d: v46d = AND v45c_0 v468(0xffffffffffffffffffffffffffffffffffffffff)
0x46e: v46e = EQ v46d v46b
0x46f: v46f(0x4bf) = CONST 
0x472: JUMPI v46f(0x4bf) v46e
----------------------------------

Begin block 0x473
prev = {'0x45d'}, next = {}
----------------------------------
Block 0x473
0x473: v473(0x40) = CONST 
0x476: v476 = MLOAD v473(0x40)
0x477: v477(0x461bcd) = CONST 
0x47b: v47b(0xe5) = CONST 
0x47d: v47d(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v47b(0xe5) v477(0x461bcd)
0x47f: MSTORE v476 v47d(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x480: v480(0x20) = CONST 
0x482: v482(0x4) = CONST 
0x485: v485 = ADD v476 v482(0x4)
0x488: MSTORE v485 v480(0x20)
0x489: v489(0x24) = CONST 
0x48c: v48c = ADD v476 v489(0x24)
0x48d: MSTORE v48c v480(0x20)
0x48e: v48e(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x4af: v4af(0x44) = CONST 
0x4b2: v4b2 = ADD v476 v4af(0x44)
0x4b3: MSTORE v4b2 v48e(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x4b5: v4b5 = MLOAD v473(0x40)
0x4b9: v4b9 = SUB v476 v4b5
0x4ba: v4ba(0x64) = CONST 
0x4bc: v4bc = ADD v4ba(0x64) v4b9
0x4be: REVERT v4b5 v4bc
----------------------------------

Begin block 0x4bf
prev = {'0x45d'}, next = {'0x4f6', '0x4fa'}
----------------------------------
Block 0x4bf
0x4c0: v4c0(0x0) = CONST 
0x4c3: v4c3(0x1) = CONST 
0x4c5: v4c5(0x1) = CONST 
0x4c7: v4c7(0xa0) = CONST 
0x4c9: v4c9(0x10000000000000000000000000000000000000000) = SHL v4c7(0xa0) v4c5(0x1)
0x4ca: v4ca(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c9(0x10000000000000000000000000000000000000000) v4c3(0x1)
0x4cb: v4cb = AND v4ca(0xffffffffffffffffffffffffffffffffffffffff) v208
0x4cc: v4cc(0xfc0c546a) = CONST 
0x4d1: v4d1(0x40) = CONST 
0x4d3: v4d3 = MLOAD v4d1(0x40)
0x4d5: v4d5(0xffffffff) = CONST 
0x4da: v4da(0xfc0c546a) = AND v4d5(0xffffffff) v4cc(0xfc0c546a)
0x4db: v4db(0xe0) = CONST 
0x4dd: v4dd(0xfc0c546a00000000000000000000000000000000000000000000000000000000) = SHL v4db(0xe0) v4da(0xfc0c546a)
0x4df: MSTORE v4d3 v4dd(0xfc0c546a00000000000000000000000000000000000000000000000000000000)
0x4e0: v4e0(0x4) = CONST 
0x4e2: v4e2 = ADD v4e0(0x4) v4d3
0x4e3: v4e3(0x20) = CONST 
0x4e5: v4e5(0x40) = CONST 
0x4e7: v4e7 = MLOAD v4e5(0x40)
0x4ea: v4ea = SUB v4e2 v4e7
0x4ee: v4ee = EXTCODESIZE v4cb
0x4ef: v4ef = ISZERO v4ee
0x4f1: v4f1 = ISZERO v4ef
0x4f2: v4f2(0x4fa) = CONST 
0x4f5: JUMPI v4f2(0x4fa) v4f1
----------------------------------

Begin block 0x4f6
prev = {'0x4bf'}, next = {}
----------------------------------
Block 0x4f6
0x4f6: v4f6(0x0) = CONST 
0x4f9: REVERT v4f6(0x0) v4f6(0x0)
----------------------------------

Begin block 0x4fa
prev = {'0x4bf'}, next = {'0x50e', '0x505'}
----------------------------------
Block 0x4fa
0x4fc: v4fc = GAS 
0x4fd: v4fd = STATICCALL v4fc v4cb v4e7 v4ea v4e7 v4e3(0x20)
0x4fe: v4fe = ISZERO v4fd
0x500: v500 = ISZERO v4fe
0x501: v501(0x50e) = CONST 
0x504: JUMPI v501(0x50e) v500
----------------------------------

Begin block 0x505
prev = {'0x4fa'}, next = {}
----------------------------------
Block 0x505
0x505: v505 = RETURNDATASIZE 
0x506: v506(0x0) = CONST 
0x509: RETURNDATACOPY v506(0x0) v506(0x0) v505
0x50a: v50a = RETURNDATASIZE 
0x50b: v50b(0x0) = CONST 
0x50d: REVERT v50b(0x0) v50a
----------------------------------

Begin block 0x50e
prev = {'0x4fa'}, next = {'0x524', '0x520'}
----------------------------------
Block 0x50e
0x513: v513(0x40) = CONST 
0x515: v515 = MLOAD v513(0x40)
0x516: v516 = RETURNDATASIZE 
0x517: v517(0x20) = CONST 
0x51a: v51a = LT v516 v517(0x20)
0x51b: v51b = ISZERO v51a
0x51c: v51c(0x524) = CONST 
0x51f: JUMPI v51c(0x524) v51b
----------------------------------

Begin block 0x520
prev = {'0x50e'}, next = {}
----------------------------------
Block 0x520
0x520: v520(0x0) = CONST 
0x523: REVERT v520(0x0) v520(0x0)
----------------------------------

Begin block 0x524
prev = {'0x50e'}, next = {'0x56c', '0x568'}
----------------------------------
Block 0x524
0x526: v526 = MLOAD v515
0x527: v527(0x40) = CONST 
0x52a: v52a = MLOAD v527(0x40)
0x52b: v52b(0x32f7ce0b) = CONST 
0x530: v530(0xe2) = CONST 
0x532: v532(0xcbdf382c00000000000000000000000000000000000000000000000000000000) = SHL v530(0xe2) v52b(0x32f7ce0b)
0x534: MSTORE v52a v532(0xcbdf382c00000000000000000000000000000000000000000000000000000000)
0x536: v536 = MLOAD v527(0x40)
0x53a: v53a(0x0) = CONST 
0x53d: v53d(0x1) = CONST 
0x53f: v53f(0x1) = CONST 
0x541: v541(0xa0) = CONST 
0x543: v543(0x10000000000000000000000000000000000000000) = SHL v541(0xa0) v53f(0x1)
0x544: v544(0xffffffffffffffffffffffffffffffffffffffff) = SUB v543(0x10000000000000000000000000000000000000000) v53d(0x1)
0x546: v546 = AND v208 v544(0xffffffffffffffffffffffffffffffffffffffff)
0x548: v548(0xcbdf382c) = CONST 
0x54e: v54e(0x4) = CONST 
0x552: v552 = ADD v52a v54e(0x4)
0x554: v554(0x20) = CONST 
0x55b: v55b = SUB v52a v536
0x55c: v55c = ADD v55b v54e(0x4)
0x560: v560 = EXTCODESIZE v546
0x561: v561 = ISZERO v560
0x563: v563 = ISZERO v561
0x564: v564(0x56c) = CONST 
0x567: JUMPI v564(0x56c) v563
----------------------------------

Begin block 0x568
prev = {'0x524'}, next = {}
----------------------------------
Block 0x568
0x568: v568(0x0) = CONST 
0x56b: REVERT v568(0x0) v568(0x0)
----------------------------------

Begin block 0x56c
prev = {'0x524'}, next = {'0x577', '0x580'}
----------------------------------
Block 0x56c
0x56e: v56e = GAS 
0x56f: v56f = STATICCALL v56e v546 v536 v55c v536 v554(0x20)
0x570: v570 = ISZERO v56f
0x572: v572 = ISZERO v570
0x573: v573(0x580) = CONST 
0x576: JUMPI v573(0x580) v572
----------------------------------

Begin block 0x577
prev = {'0x56c'}, next = {}
----------------------------------
Block 0x577
0x577: v577 = RETURNDATASIZE 
0x578: v578(0x0) = CONST 
0x57b: RETURNDATACOPY v578(0x0) v578(0x0) v577
0x57c: v57c = RETURNDATASIZE 
0x57d: v57d(0x0) = CONST 
0x57f: REVERT v57d(0x0) v57c
----------------------------------

Begin block 0x580
prev = {'0x56c'}, next = {'0x596', '0x592'}
----------------------------------
Block 0x580
0x585: v585(0x40) = CONST 
0x587: v587 = MLOAD v585(0x40)
0x588: v588 = RETURNDATASIZE 
0x589: v589(0x20) = CONST 
0x58c: v58c = LT v588 v589(0x20)
0x58d: v58d = ISZERO v58c
0x58e: v58e(0x596) = CONST 
0x591: JUMPI v58e(0x596) v58d
----------------------------------

Begin block 0x592
prev = {'0x580'}, next = {}
----------------------------------
Block 0x592
0x592: v592(0x0) = CONST 
0x595: REVERT v592(0x0) v592(0x0)
----------------------------------

Begin block 0x596
prev = {'0x580'}, next = {'0x5dc', '0x5e0'}
----------------------------------
Block 0x596
0x598: v598 = MLOAD v587
0x599: v599(0x40) = CONST 
0x59c: v59c = MLOAD v599(0x40)
0x59d: v59d(0x7e062a35) = CONST 
0x5a2: v5a2(0xe1) = CONST 
0x5a4: v5a4(0xfc0c546a00000000000000000000000000000000000000000000000000000000) = SHL v5a2(0xe1) v59d(0x7e062a35)
0x5a6: MSTORE v59c v5a4(0xfc0c546a00000000000000000000000000000000000000000000000000000000)
0x5a8: v5a8 = MLOAD v599(0x40)
0x5ac: v5ac(0x1) = CONST 
0x5ae: v5ae(0x1) = CONST 
0x5b0: v5b0(0xa0) = CONST 
0x5b2: v5b2(0x10000000000000000000000000000000000000000) = SHL v5b0(0xa0) v5ae(0x1)
0x5b3: v5b3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5b2(0x10000000000000000000000000000000000000000) v5ac(0x1)
0x5b6: v5b6 = AND v526 v5b3(0xffffffffffffffffffffffffffffffffffffffff)
0x5ba: v5ba = AND v20e v5b3(0xffffffffffffffffffffffffffffffffffffffff)
0x5bc: v5bc(0xfc0c546a) = CONST 
0x5c2: v5c2(0x4) = CONST 
0x5c6: v5c6 = ADD v59c v5c2(0x4)
0x5c8: v5c8(0x20) = CONST 
0x5cf: v5cf = SUB v59c v5a8
0x5d0: v5d0 = ADD v5cf v5c2(0x4)
0x5d4: v5d4 = EXTCODESIZE v5ba
0x5d5: v5d5 = ISZERO v5d4
0x5d7: v5d7 = ISZERO v5d5
0x5d8: v5d8(0x5e0) = CONST 
0x5db: JUMPI v5d8(0x5e0) v5d7
----------------------------------

Begin block 0x5dc
prev = {'0x596'}, next = {}
----------------------------------
Block 0x5dc
0x5dc: v5dc(0x0) = CONST 
0x5df: REVERT v5dc(0x0) v5dc(0x0)
----------------------------------

Begin block 0x5e0
prev = {'0x596'}, next = {'0x5eb', '0x5f4'}
----------------------------------
Block 0x5e0
0x5e2: v5e2 = GAS 
0x5e3: v5e3 = STATICCALL v5e2 v5ba v5a8 v5d0 v5a8 v5c8(0x20)
0x5e4: v5e4 = ISZERO v5e3
0x5e6: v5e6 = ISZERO v5e4
0x5e7: v5e7(0x5f4) = CONST 
0x5ea: JUMPI v5e7(0x5f4) v5e6
----------------------------------

Begin block 0x5eb
prev = {'0x5e0'}, next = {}
----------------------------------
Block 0x5eb
0x5eb: v5eb = RETURNDATASIZE 
0x5ec: v5ec(0x0) = CONST 
0x5ef: RETURNDATACOPY v5ec(0x0) v5ec(0x0) v5eb
0x5f0: v5f0 = RETURNDATASIZE 
0x5f1: v5f1(0x0) = CONST 
0x5f3: REVERT v5f1(0x0) v5f0
----------------------------------

Begin block 0x5f4
prev = {'0x5e0'}, next = {'0x606', '0x60a'}
----------------------------------
Block 0x5f4
0x5f9: v5f9(0x40) = CONST 
0x5fb: v5fb = MLOAD v5f9(0x40)
0x5fc: v5fc = RETURNDATASIZE 
0x5fd: v5fd(0x20) = CONST 
0x600: v600 = LT v5fc v5fd(0x20)
0x601: v601 = ISZERO v600
0x602: v602(0x60a) = CONST 
0x605: JUMPI v602(0x60a) v601
----------------------------------

Begin block 0x606
prev = {'0x5f4'}, next = {}
----------------------------------
Block 0x606
0x606: v606(0x0) = CONST 
0x609: REVERT v606(0x0) v606(0x0)
----------------------------------

Begin block 0x60a
prev = {'0x5f4'}, next = {'0x61b', '0x61f'}
----------------------------------
Block 0x60a
0x60c: v60c = MLOAD v5fb
0x60d: v60d(0x1) = CONST 
0x60f: v60f(0x1) = CONST 
0x611: v611(0xa0) = CONST 
0x613: v613(0x10000000000000000000000000000000000000000) = SHL v611(0xa0) v60f(0x1)
0x614: v614(0xffffffffffffffffffffffffffffffffffffffff) = SUB v613(0x10000000000000000000000000000000000000000) v60d(0x1)
0x615: v615 = AND v614(0xffffffffffffffffffffffffffffffffffffffff) v60c
0x616: v616 = EQ v615 v5b6
0x617: v617(0x61f) = CONST 
0x61a: JUMPI v617(0x61f) v616
----------------------------------

Begin block 0x61b
prev = {'0x60a'}, next = {}
----------------------------------
Block 0x61b
0x61b: v61b(0x0) = CONST 
0x61e: REVERT v61b(0x0) v61b(0x0)
----------------------------------

Begin block 0x61f
prev = {'0x60a'}, next = {'0x16b0x1e5'}
----------------------------------
Block 0x61f
0x620: v620(0x1) = CONST 
0x622: v622(0x1) = CONST 
0x624: v624(0xa0) = CONST 
0x626: v626(0x10000000000000000000000000000000000000000) = SHL v624(0xa0) v622(0x1)
0x627: v627(0xffffffffffffffffffffffffffffffffffffffff) = SUB v626(0x10000000000000000000000000000000000000000) v620(0x1)
0x62a: v62a = AND v627(0xffffffffffffffffffffffffffffffffffffffff) v598
0x62b: v62b(0x0) = CONST 
0x62f: MSTORE v62b(0x0) v62a
0x630: v630(0x2) = CONST 
0x632: v632(0x20) = CONST 
0x636: MSTORE v632(0x20) v630(0x2)
0x637: v637(0x40) = CONST 
0x63b: v63b = SHA3 v62b(0x0) v637(0x40)
0x63d: v63d = SLOAD v63b
0x640: v640 = AND v627(0xffffffffffffffffffffffffffffffffffffffff) v208
0x641: v641(0x1) = CONST 
0x643: v643(0x1) = CONST 
0x645: v645(0xa0) = CONST 
0x647: v647(0x10000000000000000000000000000000000000000) = SHL v645(0xa0) v643(0x1)
0x648: v648(0xffffffffffffffffffffffffffffffffffffffff) = SUB v647(0x10000000000000000000000000000000000000000) v641(0x1)
0x649: v649(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v648(0xffffffffffffffffffffffffffffffffffffffff)
0x64c: v64c = AND v649(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v63d
0x64e: v64e = OR v640 v64c
0x651: SSTORE v63b v64e
0x654: v654 = AND v627(0xffffffffffffffffffffffffffffffffffffffff) v526
0x656: MSTORE v62b(0x0) v654
0x657: v657(0x3) = CONST 
0x65a: MSTORE v632(0x20) v657(0x3)
0x65d: v65d = SHA3 v62b(0x0) v637(0x40)
0x65f: v65f = SLOAD v65d
0x661: v661 = AND v649(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v65f
0x663: v663 = OR v640 v661
0x665: SSTORE v65d v663
0x668: MSTORE v62b(0x0) v640
0x669: v669(0x4) = CONST 
0x66c: MSTORE v632(0x20) v669(0x4)
0x670: v670 = SHA3 v62b(0x0) v637(0x40)
0x672: v672 = SLOAD v670
0x676: v676 = AND v627(0xffffffffffffffffffffffffffffffffffffffff) v20e
0x67a: v67a = AND v649(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v672
0x67b: v67b = OR v67a v676
0x67d: SSTORE v670 v67b
0x67e: JUMP v1e6(0x16b)
----------------------------------

Begin block 0x67f
prev = {'0x229'}, next = {'0x687'}
----------------------------------
Block 0x67f
0x680: v680(0x687) = CONST 
0x683: v683(0xe09) = CONST 
0x686: v686_0 = CALLPRIVATE v683(0xe09) v680(0x687)
----------------------------------

Begin block 0x687
prev = {'0x67f'}, next = {'0x69d', '0x6e9'}
----------------------------------
Block 0x687
0x688: v688(0x1) = CONST 
0x68a: v68a = SLOAD v688(0x1)
0x68b: v68b(0x1) = CONST 
0x68d: v68d(0x1) = CONST 
0x68f: v68f(0xa0) = CONST 
0x691: v691(0x10000000000000000000000000000000000000000) = SHL v68f(0xa0) v68d(0x1)
0x692: v692(0xffffffffffffffffffffffffffffffffffffffff) = SUB v691(0x10000000000000000000000000000000000000000) v68b(0x1)
0x695: v695 = AND v692(0xffffffffffffffffffffffffffffffffffffffff) v68a
0x697: v697 = AND v686_0 v692(0xffffffffffffffffffffffffffffffffffffffff)
0x698: v698 = EQ v697 v695
0x699: v699(0x6e9) = CONST 
0x69c: JUMPI v699(0x6e9) v698
----------------------------------

Begin block 0x69d
prev = {'0x687'}, next = {}
----------------------------------
Block 0x69d
0x69d: v69d(0x40) = CONST 
0x6a0: v6a0 = MLOAD v69d(0x40)
0x6a1: v6a1(0x461bcd) = CONST 
0x6a5: v6a5(0xe5) = CONST 
0x6a7: v6a7(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6a5(0xe5) v6a1(0x461bcd)
0x6a9: MSTORE v6a0 v6a7(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x6aa: v6aa(0x20) = CONST 
0x6ac: v6ac(0x4) = CONST 
0x6af: v6af = ADD v6a0 v6ac(0x4)
0x6b2: MSTORE v6af v6aa(0x20)
0x6b3: v6b3(0x24) = CONST 
0x6b6: v6b6 = ADD v6a0 v6b3(0x24)
0x6b7: MSTORE v6b6 v6aa(0x20)
0x6b8: v6b8(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x6d9: v6d9(0x44) = CONST 
0x6dc: v6dc = ADD v6a0 v6d9(0x44)
0x6dd: MSTORE v6dc v6b8(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x6df: v6df = MLOAD v69d(0x40)
0x6e3: v6e3 = SUB v6a0 v6df
0x6e4: v6e4(0x64) = CONST 
0x6e6: v6e6 = ADD v6e4(0x64) v6e3
0x6e8: REVERT v6df v6e6
----------------------------------

Begin block 0x6e9
prev = {'0x687'}, next = {'0x72e', '0x6f8'}
----------------------------------
Block 0x6e9
0x6ea: v6ea(0x1) = CONST 
0x6ec: v6ec(0x1) = CONST 
0x6ee: v6ee(0xa0) = CONST 
0x6f0: v6f0(0x10000000000000000000000000000000000000000) = SHL v6ee(0xa0) v6ec(0x1)
0x6f1: v6f1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6f0(0x10000000000000000000000000000000000000000) v6ea(0x1)
0x6f3: v6f3 = AND v234 v6f1(0xffffffffffffffffffffffffffffffffffffffff)
0x6f4: v6f4(0x72e) = CONST 
0x6f7: JUMPI v6f4(0x72e) v6f3
----------------------------------

Begin block 0x6f8
prev = {'0x6e9'}, next = {}
----------------------------------
Block 0x6f8
0x6f8: v6f8(0x40) = CONST 
0x6fa: v6fa = MLOAD v6f8(0x40)
0x6fb: v6fb(0x461bcd) = CONST 
0x6ff: v6ff(0xe5) = CONST 
0x701: v701(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6ff(0xe5) v6fb(0x461bcd)
0x703: MSTORE v6fa v701(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x704: v704(0x4) = CONST 
0x706: v706 = ADD v704(0x4) v6fa
0x709: v709(0x20) = CONST 
0x70b: v70b = ADD v709(0x20) v706
0x70e: v70e = SUB v70b v706
0x710: MSTORE v706 v70e
0x711: v711(0x26) = CONST 
0x714: MSTORE v70b v711(0x26)
0x715: v715(0x20) = CONST 
0x717: v717 = ADD v715(0x20) v70b
0x719: v719(0xe0e) = CONST 
0x71c: v71c(0x26) = CONST 
0x71f: CODECOPY v717 v719(0xe0e) v71c(0x26)
0x720: v720(0x40) = CONST 
0x722: v722 = ADD v720(0x40) v717
0x726: v726(0x40) = CONST 
0x728: v728 = MLOAD v726(0x40)
0x72b: v72b = SUB v722 v728
0x72d: REVERT v728 v72b
----------------------------------

Begin block 0x72e
prev = {'0x6e9'}, next = {'0x16b0x213'}
----------------------------------
Block 0x72e
0x72f: v72f(0x1) = CONST 
0x731: v731 = SLOAD v72f(0x1)
0x732: v732(0x40) = CONST 
0x734: v734 = MLOAD v732(0x40)
0x735: v735(0x1) = CONST 
0x737: v737(0x1) = CONST 
0x739: v739(0xa0) = CONST 
0x73b: v73b(0x10000000000000000000000000000000000000000) = SHL v739(0xa0) v737(0x1)
0x73c: v73c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v73b(0x10000000000000000000000000000000000000000) v735(0x1)
0x73f: v73f = AND v234 v73c(0xffffffffffffffffffffffffffffffffffffffff)
0x741: v741 = AND v731 v73c(0xffffffffffffffffffffffffffffffffffffffff)
0x743: v743(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x765: v765(0x0) = CONST 
0x768: LOG3 v734 v765(0x0) v743(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v741 v73f
0x769: v769(0x1) = CONST 
0x76c: v76c = SLOAD v769(0x1)
0x76d: v76d(0x1) = CONST 
0x76f: v76f(0x1) = CONST 
0x771: v771(0xa0) = CONST 
0x773: v773(0x10000000000000000000000000000000000000000) = SHL v771(0xa0) v76f(0x1)
0x774: v774(0xffffffffffffffffffffffffffffffffffffffff) = SUB v773(0x10000000000000000000000000000000000000000) v76d(0x1)
0x775: v775(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v774(0xffffffffffffffffffffffffffffffffffffffff)
0x776: v776 = AND v775(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v76c
0x777: v777(0x1) = CONST 
0x779: v779(0x1) = CONST 
0x77b: v77b(0xa0) = CONST 
0x77d: v77d(0x10000000000000000000000000000000000000000) = SHL v77b(0xa0) v779(0x1)
0x77e: v77e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v77d(0x10000000000000000000000000000000000000000) v777(0x1)
0x782: v782 = AND v77e(0xffffffffffffffffffffffffffffffffffffffff) v234
0x786: v786 = OR v782 v776
0x788: SSTORE v769(0x1) v786
0x789: JUMP v214(0x16b)
----------------------------------

Begin block 0x78a
prev = {'0x239'}, next = {'0x7a1', '0x7a5'}
----------------------------------
Block 0x78a
0x78b: v78b(0x5) = CONST 
0x78d: v78d = SLOAD v78b(0x5)
0x78e: v78e(0x1) = CONST 
0x790: v790(0x1) = CONST 
0x792: v792(0xa0) = CONST 
0x794: v794(0x10000000000000000000000000000000000000000) = SHL v792(0xa0) v790(0x1)
0x795: v795(0xffffffffffffffffffffffffffffffffffffffff) = SUB v794(0x10000000000000000000000000000000000000000) v78e(0x1)
0x798: v798 = AND v795(0xffffffffffffffffffffffffffffffffffffffff) v23d
0x79a: v79a = AND v78d v795(0xffffffffffffffffffffffffffffffffffffffff)
0x79b: v79b = EQ v79a v798
0x79c: v79c = ISZERO v79b
0x79d: v79d(0x7a5) = CONST 
0x7a0: JUMPI v79d(0x7a5) v79c
----------------------------------

Begin block 0x7a1
prev = {'0x78a'}, next = {'0xe03'}
----------------------------------
Block 0x7a1
0x7a1: v7a1(0xe03) = CONST 
0x7a4: JUMP v7a1(0xe03)
----------------------------------

Begin block 0x7a5
prev = {'0x78a'}, next = {'0x7c7', '0xa43'}
----------------------------------
Block 0x7a5
0x7a6: v7a6(0x1) = CONST 
0x7a8: v7a8(0x1) = CONST 
0x7aa: v7aa(0xa0) = CONST 
0x7ac: v7ac(0x10000000000000000000000000000000000000000) = SHL v7aa(0xa0) v7a8(0x1)
0x7ad: v7ad(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ac(0x10000000000000000000000000000000000000000) v7a6(0x1)
0x7b0: v7b0 = AND v23d v7ad(0xffffffffffffffffffffffffffffffffffffffff)
0x7b1: v7b1(0x0) = CONST 
0x7b5: MSTORE v7b1(0x0) v7b0
0x7b6: v7b6(0x2) = CONST 
0x7b8: v7b8(0x20) = CONST 
0x7ba: MSTORE v7b8(0x20) v7b6(0x2)
0x7bb: v7bb(0x40) = CONST 
0x7be: v7be = SHA3 v7b1(0x0) v7bb(0x40)
0x7bf: v7bf = SLOAD v7be
0x7c0: v7c0 = AND v7bf v7ad(0xffffffffffffffffffffffffffffffffffffffff)
0x7c2: v7c2 = ISZERO v7c0
0x7c3: v7c3(0xa43) = CONST 
0x7c6: JUMPI v7c3(0xa43) v7c2
----------------------------------

Begin block 0x7c7
prev = {'0x7a5'}, next = {'0x80c', '0x808'}
----------------------------------
Block 0x7c7
0x7c8: v7c8(0x1) = CONST 
0x7ca: v7ca(0x1) = CONST 
0x7cc: v7cc(0xa0) = CONST 
0x7ce: v7ce(0x10000000000000000000000000000000000000000) = SHL v7cc(0xa0) v7ca(0x1)
0x7cf: v7cf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ce(0x10000000000000000000000000000000000000000) v7c8(0x1)
0x7d0: v7d0 = AND v7cf(0xffffffffffffffffffffffffffffffffffffffff) v7c0
0x7d1: v7d1(0x2e1a7d4d) = CONST 
0x7d7: v7d7(0x40) = CONST 
0x7d9: v7d9 = MLOAD v7d7(0x40)
0x7db: v7db(0xffffffff) = CONST 
0x7e0: v7e0(0x2e1a7d4d) = AND v7db(0xffffffff) v7d1(0x2e1a7d4d)
0x7e1: v7e1(0xe0) = CONST 
0x7e3: v7e3(0x2e1a7d4d00000000000000000000000000000000000000000000000000000000) = SHL v7e1(0xe0) v7e0(0x2e1a7d4d)
0x7e5: MSTORE v7d9 v7e3(0x2e1a7d4d00000000000000000000000000000000000000000000000000000000)
0x7e6: v7e6(0x4) = CONST 
0x7e8: v7e8 = ADD v7e6(0x4) v7d9
0x7ec: MSTORE v7e8 vba
0x7ed: v7ed(0x20) = CONST 
0x7ef: v7ef = ADD v7ed(0x20) v7e8
0x7f3: v7f3(0x0) = CONST 
0x7f5: v7f5(0x40) = CONST 
0x7f7: v7f7 = MLOAD v7f5(0x40)
0x7fa: v7fa = SUB v7ef v7f7
0x7fc: v7fc(0x0) = CONST 
0x800: v800 = EXTCODESIZE v7d0
0x801: v801 = ISZERO v800
0x803: v803 = ISZERO v801
0x804: v804(0x80c) = CONST 
0x807: JUMPI v804(0x80c) v803
----------------------------------

Begin block 0x808
prev = {'0x7c7'}, next = {}
----------------------------------
Block 0x808
0x808: v808(0x0) = CONST 
0x80b: REVERT v808(0x0) v808(0x0)
----------------------------------

Begin block 0x80c
prev = {'0x7c7'}, next = {'0x817', '0x820'}
----------------------------------
Block 0x80c
0x80e: v80e = GAS 
0x80f: v80f = CALL v80e v7d0 v7fc(0x0) v7f7 v7fa v7f7 v7f3(0x0)
0x810: v810 = ISZERO v80f
0x812: v812 = ISZERO v810
0x813: v813(0x820) = CONST 
0x816: JUMPI v813(0x820) v812
----------------------------------

Begin block 0x817
prev = {'0x80c'}, next = {}
----------------------------------
Block 0x817
0x817: v817 = RETURNDATASIZE 
0x818: v818(0x0) = CONST 
0x81b: RETURNDATACOPY v818(0x0) v818(0x0) v817
0x81c: v81c = RETURNDATASIZE 
0x81d: v81d(0x0) = CONST 
0x81f: REVERT v81d(0x0) v81c
----------------------------------

Begin block 0x820
prev = {'0x80c'}, next = {'0x86e', '0x872'}
----------------------------------
Block 0x820
0x825: v825(0x1) = CONST 
0x827: v827(0x1) = CONST 
0x829: v829(0xa0) = CONST 
0x82b: v82b(0x10000000000000000000000000000000000000000) = SHL v829(0xa0) v827(0x1)
0x82c: v82c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v82b(0x10000000000000000000000000000000000000000) v825(0x1)
0x82f: v82f = AND v82c(0xffffffffffffffffffffffffffffffffffffffff) v7c0
0x830: v830(0x0) = CONST 
0x834: MSTORE v830(0x0) v82f
0x835: v835(0x4) = CONST 
0x837: v837(0x20) = CONST 
0x83b: MSTORE v837(0x20) v835(0x4)
0x83c: v83c(0x40) = CONST 
0x841: v841 = SHA3 v830(0x0) v83c(0x40)
0x842: v842 = SLOAD v841
0x844: v844 = MLOAD v83c(0x40)
0x845: v845(0x7e062a35) = CONST 
0x84a: v84a(0xe1) = CONST 
0x84c: v84c(0xfc0c546a00000000000000000000000000000000000000000000000000000000) = SHL v84a(0xe1) v845(0x7e062a35)
0x84e: MSTORE v844 v84c(0xfc0c546a00000000000000000000000000000000000000000000000000000000)
0x850: v850 = MLOAD v83c(0x40)
0x852: v852 = AND v82c(0xffffffffffffffffffffffffffffffffffffffff) v842
0x854: v854(0xfc0c546a) = CONST 
0x85c: v85c = ADD v835(0x4) v844
0x861: v861 = SUB v844 v850
0x862: v862 = ADD v861 v835(0x4)
0x866: v866 = EXTCODESIZE v82f
0x867: v867 = ISZERO v866
0x869: v869 = ISZERO v867
0x86a: v86a(0x872) = CONST 
0x86d: JUMPI v86a(0x872) v869
----------------------------------

Begin block 0x86e
prev = {'0x820'}, next = {}
----------------------------------
Block 0x86e
0x86e: v86e(0x0) = CONST 
0x871: REVERT v86e(0x0) v86e(0x0)
----------------------------------

Begin block 0x872
prev = {'0x820'}, next = {'0x886', '0x87d'}
----------------------------------
Block 0x872
0x874: v874 = GAS 
0x875: v875 = STATICCALL v874 v82f v850 v862 v850 v837(0x20)
0x876: v876 = ISZERO v875
0x878: v878 = ISZERO v876
0x879: v879(0x886) = CONST 
0x87c: JUMPI v879(0x886) v878
----------------------------------

Begin block 0x87d
prev = {'0x872'}, next = {}
----------------------------------
Block 0x87d
0x87d: v87d = RETURNDATASIZE 
0x87e: v87e(0x0) = CONST 
0x881: RETURNDATACOPY v87e(0x0) v87e(0x0) v87d
0x882: v882 = RETURNDATASIZE 
0x883: v883(0x0) = CONST 
0x885: REVERT v883(0x0) v882
----------------------------------

Begin block 0x886
prev = {'0x872'}, next = {'0x89c', '0x898'}
----------------------------------
Block 0x886
0x88b: v88b(0x40) = CONST 
0x88d: v88d = MLOAD v88b(0x40)
0x88e: v88e = RETURNDATASIZE 
0x88f: v88f(0x20) = CONST 
0x892: v892 = LT v88e v88f(0x20)
0x893: v893 = ISZERO v892
0x894: v894(0x89c) = CONST 
0x897: JUMPI v894(0x89c) v893
----------------------------------

Begin block 0x898
prev = {'0x886'}, next = {}
----------------------------------
Block 0x898
0x898: v898(0x0) = CONST 
0x89b: REVERT v898(0x0) v898(0x0)
----------------------------------

Begin block 0x89c
prev = {'0x886'}, next = {'0x8ed', '0x8f1'}
----------------------------------
Block 0x89c
0x89e: v89e = MLOAD v88d
0x89f: v89f(0x40) = CONST 
0x8a2: v8a2 = MLOAD v89f(0x40)
0x8a3: v8a3(0x95ea7b3) = CONST 
0x8a8: v8a8(0xe0) = CONST 
0x8aa: v8aa(0x95ea7b300000000000000000000000000000000000000000000000000000000) = SHL v8a8(0xe0) v8a3(0x95ea7b3)
0x8ac: MSTORE v8a2 v8aa(0x95ea7b300000000000000000000000000000000000000000000000000000000)
0x8ad: v8ad(0x1) = CONST 
0x8af: v8af(0x1) = CONST 
0x8b1: v8b1(0xa0) = CONST 
0x8b3: v8b3(0x10000000000000000000000000000000000000000) = SHL v8b1(0xa0) v8af(0x1)
0x8b4: v8b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b3(0x10000000000000000000000000000000000000000) v8ad(0x1)
0x8b7: v8b7 = AND v8b4(0xffffffffffffffffffffffffffffffffffffffff) v852
0x8b8: v8b8(0x4) = CONST 
0x8bb: v8bb = ADD v8a2 v8b8(0x4)
0x8bc: MSTORE v8bb v8b7
0x8bd: v8bd(0x24) = CONST 
0x8c0: v8c0 = ADD v8a2 v8bd(0x24)
0x8c3: MSTORE v8c0 vba
0x8c5: v8c5 = MLOAD v89f(0x40)
0x8c9: v8c9 = AND v89e v8b4(0xffffffffffffffffffffffffffffffffffffffff)
0x8cb: v8cb(0x95ea7b3) = CONST 
0x8d1: v8d1(0x44) = CONST 
0x8d5: v8d5 = ADD v8a2 v8d1(0x44)
0x8d7: v8d7(0x20) = CONST 
0x8de: v8de = SUB v8a2 v8c5
0x8df: v8df = ADD v8de v8d1(0x44)
0x8e1: v8e1(0x0) = CONST 
0x8e5: v8e5 = EXTCODESIZE v8c9
0x8e6: v8e6 = ISZERO v8e5
0x8e8: v8e8 = ISZERO v8e6
0x8e9: v8e9(0x8f1) = CONST 
0x8ec: JUMPI v8e9(0x8f1) v8e8
----------------------------------

Begin block 0x8ed
prev = {'0x89c'}, next = {}
----------------------------------
Block 0x8ed
0x8ed: v8ed(0x0) = CONST 
0x8f0: REVERT v8ed(0x0) v8ed(0x0)
----------------------------------

Begin block 0x8f1
prev = {'0x89c'}, next = {'0x8fc', '0x905'}
----------------------------------
Block 0x8f1
0x8f3: v8f3 = GAS 
0x8f4: v8f4 = CALL v8f3 v8c9 v8e1(0x0) v8c5 v8df v8c5 v8d7(0x20)
0x8f5: v8f5 = ISZERO v8f4
0x8f7: v8f7 = ISZERO v8f5
0x8f8: v8f8(0x905) = CONST 
0x8fb: JUMPI v8f8(0x905) v8f7
----------------------------------

Begin block 0x8fc
prev = {'0x8f1'}, next = {}
----------------------------------
Block 0x8fc
0x8fc: v8fc = RETURNDATASIZE 
0x8fd: v8fd(0x0) = CONST 
0x900: RETURNDATACOPY v8fd(0x0) v8fd(0x0) v8fc
0x901: v901 = RETURNDATASIZE 
0x902: v902(0x0) = CONST 
0x904: REVERT v902(0x0) v901
----------------------------------

Begin block 0x905
prev = {'0x8f1'}, next = {'0x91b', '0x917'}
----------------------------------
Block 0x905
0x90a: v90a(0x40) = CONST 
0x90c: v90c = MLOAD v90a(0x40)
0x90d: v90d = RETURNDATASIZE 
0x90e: v90e(0x20) = CONST 
0x911: v911 = LT v90d v90e(0x20)
0x912: v912 = ISZERO v911
0x913: v913(0x91b) = CONST 
0x916: JUMPI v913(0x91b) v912
----------------------------------

Begin block 0x917
prev = {'0x905'}, next = {}
----------------------------------
Block 0x917
0x917: v917(0x0) = CONST 
0x91a: REVERT v917(0x0) v917(0x0)
----------------------------------

Begin block 0x91b
prev = {'0x905'}, next = {'0x978', '0x97c'}
----------------------------------
Block 0x91b
0x91e: v91e(0x5) = CONST 
0x921: v921 = SLOAD v91e(0x5)
0x922: v922(0x1) = CONST 
0x924: v924(0x1) = CONST 
0x926: v926(0xa0) = CONST 
0x928: v928(0x10000000000000000000000000000000000000000) = SHL v926(0xa0) v924(0x1)
0x929: v929(0xffffffffffffffffffffffffffffffffffffffff) = SUB v928(0x10000000000000000000000000000000000000000) v922(0x1)
0x92a: v92a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v929(0xffffffffffffffffffffffffffffffffffffffff)
0x92b: v92b = AND v92a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v921
0x92c: v92c(0x1) = CONST 
0x92e: v92e(0x1) = CONST 
0x930: v930(0xa0) = CONST 
0x932: v932(0x10000000000000000000000000000000000000000) = SHL v930(0xa0) v92e(0x1)
0x933: v933(0xffffffffffffffffffffffffffffffffffffffff) = SUB v932(0x10000000000000000000000000000000000000000) v92c(0x1)
0x935: v935 = AND v852 v933(0xffffffffffffffffffffffffffffffffffffffff)
0x938: v938 = OR v935 v92b
0x93b: SSTORE v91e(0x5) v938
0x93c: v93c(0x40) = CONST 
0x93f: v93f = MLOAD v93c(0x40)
0x940: v940(0xea598cb) = CONST 
0x945: v945(0xe4) = CONST 
0x947: v947(0xea598cb000000000000000000000000000000000000000000000000000000000) = SHL v945(0xe4) v940(0xea598cb)
0x949: MSTORE v93f v947(0xea598cb000000000000000000000000000000000000000000000000000000000)
0x94a: v94a(0x4) = CONST 
0x94d: v94d = ADD v93f v94a(0x4)
0x950: MSTORE v94d vba
0x952: v952 = MLOAD v93c(0x40)
0x953: v953(0x0) = CONST 
0x957: v957(0xea598cb0) = CONST 
0x95d: v95d(0x24) = CONST 
0x961: v961 = ADD v93f v95d(0x24)
0x963: v963(0x20) = CONST 
0x96a: v96a = SUB v93f v952
0x96b: v96b = ADD v96a v95d(0x24)
0x970: v970 = EXTCODESIZE v935
0x971: v971 = ISZERO v970
0x973: v973 = ISZERO v971
0x974: v974(0x97c) = CONST 
0x977: JUMPI v974(0x97c) v973
----------------------------------

Begin block 0x978
prev = {'0x91b'}, next = {}
----------------------------------
Block 0x978
0x978: v978(0x0) = CONST 
0x97b: REVERT v978(0x0) v978(0x0)
----------------------------------

Begin block 0x97c
prev = {'0x91b'}, next = {'0x990', '0x987'}
----------------------------------
Block 0x97c
0x97e: v97e = GAS 
0x97f: v97f = CALL v97e v935 v953(0x0) v952 v96b v952 v963(0x20)
0x980: v980 = ISZERO v97f
0x982: v982 = ISZERO v980
0x983: v983(0x990) = CONST 
0x986: JUMPI v983(0x990) v982
----------------------------------

Begin block 0x987
prev = {'0x97c'}, next = {}
----------------------------------
Block 0x987
0x987: v987 = RETURNDATASIZE 
0x988: v988(0x0) = CONST 
0x98b: RETURNDATACOPY v988(0x0) v988(0x0) v987
0x98c: v98c = RETURNDATASIZE 
0x98d: v98d(0x0) = CONST 
0x98f: REVERT v98d(0x0) v98c
----------------------------------

Begin block 0x990
prev = {'0x97c'}, next = {'0x9a2', '0x9a6'}
----------------------------------
Block 0x990
0x995: v995(0x40) = CONST 
0x997: v997 = MLOAD v995(0x40)
0x998: v998 = RETURNDATASIZE 
0x999: v999(0x20) = CONST 
0x99c: v99c = LT v998 v999(0x20)
0x99d: v99d = ISZERO v99c
0x99e: v99e(0x9a6) = CONST 
0x9a1: JUMPI v99e(0x9a6) v99d
----------------------------------

Begin block 0x9a2
prev = {'0x990'}, next = {}
----------------------------------
Block 0x9a2
0x9a2: v9a2(0x0) = CONST 
0x9a5: REVERT v9a2(0x0) v9a2(0x0)
----------------------------------

Begin block 0x9a6
prev = {'0x990'}, next = {'0xa0e', '0xa0a'}
----------------------------------
Block 0x9a6
0x9a8: v9a8 = MLOAD v997
0x9a9: v9a9(0x5) = CONST 
0x9ac: v9ac = SLOAD v9a9(0x5)
0x9ad: v9ad(0x1) = CONST 
0x9af: v9af(0x1) = CONST 
0x9b1: v9b1(0xa0) = CONST 
0x9b3: v9b3(0x10000000000000000000000000000000000000000) = SHL v9b1(0xa0) v9af(0x1)
0x9b4: v9b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9b3(0x10000000000000000000000000000000000000000) v9ad(0x1)
0x9b5: v9b5(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v9b4(0xffffffffffffffffffffffffffffffffffffffff)
0x9b6: v9b6 = AND v9b5(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v9ac
0x9b8: SSTORE v9a9(0x5) v9b6
0x9b9: v9b9(0x40) = CONST 
0x9bc: v9bc = MLOAD v9b9(0x40)
0x9bd: v9bd(0xa9059cbb) = CONST 
0x9c2: v9c2(0xe0) = CONST 
0x9c4: v9c4(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v9c2(0xe0) v9bd(0xa9059cbb)
0x9c6: MSTORE v9bc v9c4(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x9c7: v9c7(0x1) = CONST 
0x9c9: v9c9(0x1) = CONST 
0x9cb: v9cb(0xa0) = CONST 
0x9cd: v9cd(0x10000000000000000000000000000000000000000) = SHL v9cb(0xa0) v9c9(0x1)
0x9ce: v9ce(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9cd(0x10000000000000000000000000000000000000000) v9c7(0x1)
0x9d1: v9d1 = AND v9ce(0xffffffffffffffffffffffffffffffffffffffff) vab
0x9d2: v9d2(0x4) = CONST 
0x9d5: v9d5 = ADD v9bc v9d2(0x4)
0x9d6: MSTORE v9d5 v9d1
0x9d7: v9d7(0x24) = CONST 
0x9da: v9da = ADD v9bc v9d7(0x24)
0x9dd: MSTORE v9da v9a8
0x9df: v9df = MLOAD v9b9(0x40)
0x9e5: v9e5 = AND v852 v9ce(0xffffffffffffffffffffffffffffffffffffffff)
0x9e7: v9e7(0xa9059cbb) = CONST 
0x9ed: v9ed(0x44) = CONST 
0x9f1: v9f1 = ADD v9bc v9ed(0x44)
0x9f3: v9f3(0x20) = CONST 
0x9fb: v9fb = SUB v9bc v9df
0x9fc: v9fc = ADD v9fb v9ed(0x44)
0x9fe: v9fe(0x0) = CONST 
0xa02: va02 = EXTCODESIZE v9e5
0xa03: va03 = ISZERO va02
0xa05: va05 = ISZERO va03
0xa06: va06(0xa0e) = CONST 
0xa09: JUMPI va06(0xa0e) va05
----------------------------------

Begin block 0xa0a
prev = {'0x9a6'}, next = {}
----------------------------------
Block 0xa0a
0xa0a: va0a(0x0) = CONST 
0xa0d: REVERT va0a(0x0) va0a(0x0)
----------------------------------

Begin block 0xa0e
prev = {'0x9a6'}, next = {'0xa22', '0xa19'}
----------------------------------
Block 0xa0e
0xa10: va10 = GAS 
0xa11: va11 = CALL va10 v9e5 v9fe(0x0) v9df v9fc v9df v9f3(0x20)
0xa12: va12 = ISZERO va11
0xa14: va14 = ISZERO va12
0xa15: va15(0xa22) = CONST 
0xa18: JUMPI va15(0xa22) va14
----------------------------------

Begin block 0xa19
prev = {'0xa0e'}, next = {}
----------------------------------
Block 0xa19
0xa19: va19 = RETURNDATASIZE 
0xa1a: va1a(0x0) = CONST 
0xa1d: RETURNDATACOPY va1a(0x0) va1a(0x0) va19
0xa1e: va1e = RETURNDATASIZE 
0xa1f: va1f(0x0) = CONST 
0xa21: REVERT va1f(0x0) va1e
----------------------------------

Begin block 0xa22
prev = {'0xa0e'}, next = {'0xa34', '0xa38'}
----------------------------------
Block 0xa22
0xa27: va27(0x40) = CONST 
0xa29: va29 = MLOAD va27(0x40)
0xa2a: va2a = RETURNDATASIZE 
0xa2b: va2b(0x20) = CONST 
0xa2e: va2e = LT va2a va2b(0x20)
0xa2f: va2f = ISZERO va2e
0xa30: va30(0xa38) = CONST 
0xa33: JUMPI va30(0xa38) va2f
----------------------------------

Begin block 0xa34
prev = {'0xa22'}, next = {}
----------------------------------
Block 0xa34
0xa34: va34(0x0) = CONST 
0xa37: REVERT va34(0x0) va34(0x0)
----------------------------------

Begin block 0xa38
prev = {'0xa22'}, next = {'0xe03'}
----------------------------------
Block 0xa38
0xa3a: va3a(0xe03) = CONST 
0xa42: JUMP va3a(0xe03)
----------------------------------

Begin block 0xa43
prev = {'0x7a5'}, next = {'0xa7e', '0xa7a'}
----------------------------------
Block 0xa43
0xa44: va44(0x0) = CONST 
0xa47: va47(0x1) = CONST 
0xa49: va49(0x1) = CONST 
0xa4b: va4b(0xa0) = CONST 
0xa4d: va4d(0x10000000000000000000000000000000000000000) = SHL va4b(0xa0) va49(0x1)
0xa4e: va4e(0xffffffffffffffffffffffffffffffffffffffff) = SUB va4d(0x10000000000000000000000000000000000000000) va47(0x1)
0xa4f: va4f = AND va4e(0xffffffffffffffffffffffffffffffffffffffff) v23d
0xa50: va50(0xfc0c546a) = CONST 
0xa55: va55(0x40) = CONST 
0xa57: va57 = MLOAD va55(0x40)
0xa59: va59(0xffffffff) = CONST 
0xa5e: va5e(0xfc0c546a) = AND va59(0xffffffff) va50(0xfc0c546a)
0xa5f: va5f(0xe0) = CONST 
0xa61: va61(0xfc0c546a00000000000000000000000000000000000000000000000000000000) = SHL va5f(0xe0) va5e(0xfc0c546a)
0xa63: MSTORE va57 va61(0xfc0c546a00000000000000000000000000000000000000000000000000000000)
0xa64: va64(0x4) = CONST 
0xa66: va66 = ADD va64(0x4) va57
0xa67: va67(0x20) = CONST 
0xa69: va69(0x40) = CONST 
0xa6b: va6b = MLOAD va69(0x40)
0xa6e: va6e = SUB va66 va6b
0xa72: va72 = EXTCODESIZE va4f
0xa73: va73 = ISZERO va72
0xa75: va75 = ISZERO va73
0xa76: va76(0xa7e) = CONST 
0xa79: JUMPI va76(0xa7e) va75
----------------------------------

Begin block 0xa7a
prev = {'0xa43'}, next = {}
----------------------------------
Block 0xa7a
0xa7a: va7a(0x0) = CONST 
0xa7d: REVERT va7a(0x0) va7a(0x0)
----------------------------------

Begin block 0xa7e
prev = {'0xa43'}, next = {'0xa92', '0xa89'}
----------------------------------
Block 0xa7e
0xa80: va80 = GAS 
0xa81: va81 = STATICCALL va80 va4f va6b va6e va6b va67(0x20)
0xa82: va82 = ISZERO va81
0xa84: va84 = ISZERO va82
0xa85: va85(0xa92) = CONST 
0xa88: JUMPI va85(0xa92) va84
----------------------------------

Begin block 0xa89
prev = {'0xa7e'}, next = {}
----------------------------------
Block 0xa89
0xa89: va89 = RETURNDATASIZE 
0xa8a: va8a(0x0) = CONST 
0xa8d: RETURNDATACOPY va8a(0x0) va8a(0x0) va89
0xa8e: va8e = RETURNDATASIZE 
0xa8f: va8f(0x0) = CONST 
0xa91: REVERT va8f(0x0) va8e
----------------------------------

Begin block 0xa92
prev = {'0xa7e'}, next = {'0xaa4', '0xaa8'}
----------------------------------
Block 0xa92
0xa97: va97(0x40) = CONST 
0xa99: va99 = MLOAD va97(0x40)
0xa9a: va9a = RETURNDATASIZE 
0xa9b: va9b(0x20) = CONST 
0xa9e: va9e = LT va9a va9b(0x20)
0xa9f: va9f = ISZERO va9e
0xaa0: vaa0(0xaa8) = CONST 
0xaa3: JUMPI vaa0(0xaa8) va9f
----------------------------------

Begin block 0xaa4
prev = {'0xa92'}, next = {}
----------------------------------
Block 0xaa4
0xaa4: vaa4(0x0) = CONST 
0xaa7: REVERT vaa4(0x0) vaa4(0x0)
----------------------------------

Begin block 0xaa8
prev = {'0xa92'}, next = {'0xad0', '0xdbf'}
----------------------------------
Block 0xaa8
0xaaa: vaaa = MLOAD va99
0xaab: vaab(0x1) = CONST 
0xaad: vaad(0x1) = CONST 
0xaaf: vaaf(0xa0) = CONST 
0xab1: vab1(0x10000000000000000000000000000000000000000) = SHL vaaf(0xa0) vaad(0x1)
0xab2: vab2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vab1(0x10000000000000000000000000000000000000000) vaab(0x1)
0xab5: vab5 = AND vaaa vab2(0xffffffffffffffffffffffffffffffffffffffff)
0xab6: vab6(0x0) = CONST 
0xaba: MSTORE vab6(0x0) vab5
0xabb: vabb(0x3) = CONST 
0xabd: vabd(0x20) = CONST 
0xabf: MSTORE vabd(0x20) vabb(0x3)
0xac0: vac0(0x40) = CONST 
0xac3: vac3 = SHA3 vab6(0x0) vac0(0x40)
0xac4: vac4 = SLOAD vac3
0xac5: vac5 = AND vac4 vab2(0xffffffffffffffffffffffffffffffffffffffff)
0xacb: vacb = ISZERO vac5
0xacc: vacc(0xdbf) = CONST 
0xacf: JUMPI vacc(0xdbf) vacb
----------------------------------

Begin block 0xad0
prev = {'0xaa8'}, next = {'0xb2b', '0xb27'}
----------------------------------
Block 0xad0
0xad0: vad0(0x40) = CONST 
0xad3: vad3 = MLOAD vad0(0x40)
0xad4: vad4(0x4decdde3) = CONST 
0xad9: vad9(0xe1) = CONST 
0xadb: vadb(0x9bd9bbc600000000000000000000000000000000000000000000000000000000) = SHL vad9(0xe1) vad4(0x4decdde3)
0xadd: MSTORE vad3 vadb(0x9bd9bbc600000000000000000000000000000000000000000000000000000000)
0xade: vade(0x1) = CONST 
0xae0: vae0(0x1) = CONST 
0xae2: vae2(0xa0) = CONST 
0xae4: vae4(0x10000000000000000000000000000000000000000) = SHL vae2(0xa0) vae0(0x1)
0xae5: vae5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae4(0x10000000000000000000000000000000000000000) vade(0x1)
0xae7: vae7 = AND v23d vae5(0xffffffffffffffffffffffffffffffffffffffff)
0xae8: vae8(0x4) = CONST 
0xaeb: vaeb = ADD vad3 vae8(0x4)
0xaee: MSTORE vaeb vae7
0xaef: vaef(0x24) = CONST 
0xaf2: vaf2 = ADD vad3 vaef(0x24)
0xaf5: MSTORE vaf2 vba
0xaf6: vaf6(0x60) = CONST 
0xaf8: vaf8(0x44) = CONST 
0xafb: vafb = ADD vad3 vaf8(0x44)
0xafc: MSTORE vafb vaf6(0x60)
0xafd: vafd(0x0) = CONST 
0xaff: vaff(0x64) = CONST 
0xb02: vb02 = ADD vad3 vaff(0x64)
0xb05: MSTORE vb02 vafd(0x0)
0xb07: vb07 = MLOAD vad0(0x40)
0xb0a: vb0a(0x9bd9bbc6) = CONST 
0xb10: vb10(0xa4) = CONST 
0xb14: vb14 = ADD vad3 vb10(0xa4)
0xb19: vb19 = SUB vad3 vb07
0xb1a: vb1a = ADD vb19 vb10(0xa4)
0xb1f: vb1f = EXTCODESIZE vae7
0xb20: vb20 = ISZERO vb1f
0xb22: vb22 = ISZERO vb20
0xb23: vb23(0xb2b) = CONST 
0xb26: JUMPI vb23(0xb2b) vb22
----------------------------------

Begin block 0xb27
prev = {'0xad0'}, next = {}
----------------------------------
Block 0xb27
0xb27: vb27(0x0) = CONST 
0xb2a: REVERT vb27(0x0) vb27(0x0)
----------------------------------

Begin block 0xb2b
prev = {'0xad0'}, next = {'0xb3f', '0xb36'}
----------------------------------
Block 0xb2b
0xb2d: vb2d = GAS 
0xb2e: vb2e = CALL vb2d vae7 vafd(0x0) vb07 vb1a vb07 vafd(0x0)
0xb2f: vb2f = ISZERO vb2e
0xb31: vb31 = ISZERO vb2f
0xb32: vb32(0xb3f) = CONST 
0xb35: JUMPI vb32(0xb3f) vb31
----------------------------------

Begin block 0xb36
prev = {'0xb2b'}, next = {}
----------------------------------
Block 0xb36
0xb36: vb36 = RETURNDATASIZE 
0xb37: vb37(0x0) = CONST 
0xb3a: RETURNDATACOPY vb37(0x0) vb37(0x0) vb36
0xb3b: vb3b = RETURNDATASIZE 
0xb3c: vb3c(0x0) = CONST 
0xb3e: REVERT vb3c(0x0) vb3b
----------------------------------

Begin block 0xb3f
prev = {'0xb2b'}, next = {'0xb89', '0xb8d'}
----------------------------------
Block 0xb3f
0xb42: vb42(0x40) = CONST 
0xb45: vb45 = MLOAD vb42(0x40)
0xb46: vb46(0x70a08231) = CONST 
0xb4b: vb4b(0xe0) = CONST 
0xb4d: vb4d(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL vb4b(0xe0) vb46(0x70a08231)
0xb4f: MSTORE vb45 vb4d(0x70a0823100000000000000000000000000000000000000000000000000000000)
0xb50: vb50 = ADDRESS 
0xb51: vb51(0x4) = CONST 
0xb54: vb54 = ADD vb45 vb51(0x4)
0xb55: MSTORE vb54 vb50
0xb57: vb57 = MLOAD vb42(0x40)
0xb58: vb58(0x0) = CONST 
0xb5c: vb5c(0x1) = CONST 
0xb5e: vb5e(0x1) = CONST 
0xb60: vb60(0xa0) = CONST 
0xb62: vb62(0x10000000000000000000000000000000000000000) = SHL vb60(0xa0) vb5e(0x1)
0xb63: vb63(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb62(0x10000000000000000000000000000000000000000) vb5c(0x1)
0xb65: vb65 = AND vaaa vb63(0xffffffffffffffffffffffffffffffffffffffff)
0xb68: vb68(0x70a08231) = CONST 
0xb6e: vb6e(0x24) = CONST 
0xb72: vb72 = ADD vb45 vb6e(0x24)
0xb74: vb74(0x20) = CONST 
0xb7c: vb7c = SUB vb45 vb57
0xb7d: vb7d = ADD vb7c vb6e(0x24)
0xb81: vb81 = EXTCODESIZE vb65
0xb82: vb82 = ISZERO vb81
0xb84: vb84 = ISZERO vb82
0xb85: vb85(0xb8d) = CONST 
0xb88: JUMPI vb85(0xb8d) vb84
----------------------------------

Begin block 0xb89
prev = {'0xb3f'}, next = {}
----------------------------------
Block 0xb89
0xb89: vb89(0x0) = CONST 
0xb8c: REVERT vb89(0x0) vb89(0x0)
----------------------------------

Begin block 0xb8d
prev = {'0xb3f'}, next = {'0xb98', '0xba1'}
----------------------------------
Block 0xb8d
0xb8f: vb8f = GAS 
0xb90: vb90 = STATICCALL vb8f vb65 vb57 vb7d vb57 vb74(0x20)
0xb91: vb91 = ISZERO vb90
0xb93: vb93 = ISZERO vb91
0xb94: vb94(0xba1) = CONST 
0xb97: JUMPI vb94(0xba1) vb93
----------------------------------

Begin block 0xb98
prev = {'0xb8d'}, next = {}
----------------------------------
Block 0xb98
0xb98: vb98 = RETURNDATASIZE 
0xb99: vb99(0x0) = CONST 
0xb9c: RETURNDATACOPY vb99(0x0) vb99(0x0) vb98
0xb9d: vb9d = RETURNDATASIZE 
0xb9e: vb9e(0x0) = CONST 
0xba0: REVERT vb9e(0x0) vb9d
----------------------------------

Begin block 0xba1
prev = {'0xb8d'}, next = {'0xbb7', '0xbb3'}
----------------------------------
Block 0xba1
0xba6: vba6(0x40) = CONST 
0xba8: vba8 = MLOAD vba6(0x40)
0xba9: vba9 = RETURNDATASIZE 
0xbaa: vbaa(0x20) = CONST 
0xbad: vbad = LT vba9 vbaa(0x20)
0xbae: vbae = ISZERO vbad
0xbaf: vbaf(0xbb7) = CONST 
0xbb2: JUMPI vbaf(0xbb7) vbae
----------------------------------

Begin block 0xbb3
prev = {'0xba1'}, next = {}
----------------------------------
Block 0xbb3
0xbb3: vbb3(0x0) = CONST 
0xbb6: REVERT vbb3(0x0) vbb3(0x0)
----------------------------------

Begin block 0xbb7
prev = {'0xba1'}, next = {'0xc0b', '0xc0f'}
----------------------------------
Block 0xbb7
0xbb9: vbb9 = MLOAD vba8
0xbba: vbba(0x40) = CONST 
0xbbd: vbbd = MLOAD vbba(0x40)
0xbbe: vbbe(0x95ea7b3) = CONST 
0xbc3: vbc3(0xe0) = CONST 
0xbc5: vbc5(0x95ea7b300000000000000000000000000000000000000000000000000000000) = SHL vbc3(0xe0) vbbe(0x95ea7b3)
0xbc7: MSTORE vbbd vbc5(0x95ea7b300000000000000000000000000000000000000000000000000000000)
0xbc8: vbc8(0x1) = CONST 
0xbca: vbca(0x1) = CONST 
0xbcc: vbcc(0xa0) = CONST 
0xbce: vbce(0x10000000000000000000000000000000000000000) = SHL vbcc(0xa0) vbca(0x1)
0xbcf: vbcf(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbce(0x10000000000000000000000000000000000000000) vbc8(0x1)
0xbd2: vbd2 = AND vbcf(0xffffffffffffffffffffffffffffffffffffffff) vac5
0xbd3: vbd3(0x4) = CONST 
0xbd6: vbd6 = ADD vbbd vbd3(0x4)
0xbd7: MSTORE vbd6 vbd2
0xbd8: vbd8(0x24) = CONST 
0xbdb: vbdb = ADD vbbd vbd8(0x24)
0xbde: MSTORE vbdb vbb9
0xbe0: vbe0 = MLOAD vbba(0x40)
0xbe6: vbe6 = AND vaaa vbcf(0xffffffffffffffffffffffffffffffffffffffff)
0xbe8: vbe8(0x95ea7b3) = CONST 
0xbee: vbee(0x44) = CONST 
0xbf2: vbf2 = ADD vbbd vbee(0x44)
0xbf4: vbf4(0x20) = CONST 
0xbfc: vbfc = SUB vbbd vbe0
0xbfd: vbfd = ADD vbfc vbee(0x44)
0xbff: vbff(0x0) = CONST 
0xc03: vc03 = EXTCODESIZE vbe6
0xc04: vc04 = ISZERO vc03
0xc06: vc06 = ISZERO vc04
0xc07: vc07(0xc0f) = CONST 
0xc0a: JUMPI vc07(0xc0f) vc06
----------------------------------

Begin block 0xc0b
prev = {'0xbb7'}, next = {}
----------------------------------
Block 0xc0b
0xc0b: vc0b(0x0) = CONST 
0xc0e: REVERT vc0b(0x0) vc0b(0x0)
----------------------------------

Begin block 0xc0f
prev = {'0xbb7'}, next = {'0xc1a', '0xc23'}
----------------------------------
Block 0xc0f
0xc11: vc11 = GAS 
0xc12: vc12 = CALL vc11 vbe6 vbff(0x0) vbe0 vbfd vbe0 vbf4(0x20)
0xc13: vc13 = ISZERO vc12
0xc15: vc15 = ISZERO vc13
0xc16: vc16(0xc23) = CONST 
0xc19: JUMPI vc16(0xc23) vc15
----------------------------------

Begin block 0xc1a
prev = {'0xc0f'}, next = {}
----------------------------------
Block 0xc1a
0xc1a: vc1a = RETURNDATASIZE 
0xc1b: vc1b(0x0) = CONST 
0xc1e: RETURNDATACOPY vc1b(0x0) vc1b(0x0) vc1a
0xc1f: vc1f = RETURNDATASIZE 
0xc20: vc20(0x0) = CONST 
0xc22: REVERT vc20(0x0) vc1f
----------------------------------

Begin block 0xc23
prev = {'0xc0f'}, next = {'0xc35', '0xc39'}
----------------------------------
Block 0xc23
0xc28: vc28(0x40) = CONST 
0xc2a: vc2a = MLOAD vc28(0x40)
0xc2b: vc2b = RETURNDATASIZE 
0xc2c: vc2c(0x20) = CONST 
0xc2f: vc2f = LT vc2b vc2c(0x20)
0xc30: vc30 = ISZERO vc2f
0xc31: vc31(0xc39) = CONST 
0xc34: JUMPI vc31(0xc39) vc30
----------------------------------

Begin block 0xc35
prev = {'0xc23'}, next = {}
----------------------------------
Block 0xc35
0xc35: vc35(0x0) = CONST 
0xc38: REVERT vc35(0x0) vc35(0x0)
----------------------------------

Begin block 0xc39
prev = {'0xc23'}, next = {'0xc7b', '0xc7f'}
----------------------------------
Block 0xc39
0xc3c: vc3c(0x40) = CONST 
0xc3f: vc3f = MLOAD vc3c(0x40)
0xc40: vc40(0x32f7ce0b) = CONST 
0xc45: vc45(0xe2) = CONST 
0xc47: vc47(0xcbdf382c00000000000000000000000000000000000000000000000000000000) = SHL vc45(0xe2) vc40(0x32f7ce0b)
0xc49: MSTORE vc3f vc47(0xcbdf382c00000000000000000000000000000000000000000000000000000000)
0xc4b: vc4b = MLOAD vc3c(0x40)
0xc4c: vc4c(0x0) = CONST 
0xc4f: vc4f(0x1) = CONST 
0xc51: vc51(0x1) = CONST 
0xc53: vc53(0xa0) = CONST 
0xc55: vc55(0x10000000000000000000000000000000000000000) = SHL vc53(0xa0) vc51(0x1)
0xc56: vc56(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc55(0x10000000000000000000000000000000000000000) vc4f(0x1)
0xc58: vc58 = AND vac5 vc56(0xffffffffffffffffffffffffffffffffffffffff)
0xc5a: vc5a(0xcbdf382c) = CONST 
0xc60: vc60(0x4) = CONST 
0xc64: vc64 = ADD vc3f vc60(0x4)
0xc66: vc66(0x20) = CONST 
0xc6e: vc6e = SUB vc3f vc4b
0xc6f: vc6f = ADD vc6e vc60(0x4)
0xc73: vc73 = EXTCODESIZE vc58
0xc74: vc74 = ISZERO vc73
0xc76: vc76 = ISZERO vc74
0xc77: vc77(0xc7f) = CONST 
0xc7a: JUMPI vc77(0xc7f) vc76
----------------------------------

Begin block 0xc7b
prev = {'0xc39'}, next = {}
----------------------------------
Block 0xc7b
0xc7b: vc7b(0x0) = CONST 
0xc7e: REVERT vc7b(0x0) vc7b(0x0)
----------------------------------

Begin block 0xc7f
prev = {'0xc39'}, next = {'0xc8a', '0xc93'}
----------------------------------
Block 0xc7f
0xc81: vc81 = GAS 
0xc82: vc82 = STATICCALL vc81 vc58 vc4b vc6f vc4b vc66(0x20)
0xc83: vc83 = ISZERO vc82
0xc85: vc85 = ISZERO vc83
0xc86: vc86(0xc93) = CONST 
0xc89: JUMPI vc86(0xc93) vc85
----------------------------------

Begin block 0xc8a
prev = {'0xc7f'}, next = {}
----------------------------------
Block 0xc8a
0xc8a: vc8a = RETURNDATASIZE 
0xc8b: vc8b(0x0) = CONST 
0xc8e: RETURNDATACOPY vc8b(0x0) vc8b(0x0) vc8a
0xc8f: vc8f = RETURNDATASIZE 
0xc90: vc90(0x0) = CONST 
0xc92: REVERT vc90(0x0) vc8f
----------------------------------

Begin block 0xc93
prev = {'0xc7f'}, next = {'0xca9', '0xca5'}
----------------------------------
Block 0xc93
0xc98: vc98(0x40) = CONST 
0xc9a: vc9a = MLOAD vc98(0x40)
0xc9b: vc9b = RETURNDATASIZE 
0xc9c: vc9c(0x20) = CONST 
0xc9f: vc9f = LT vc9b vc9c(0x20)
0xca0: vca0 = ISZERO vc9f
0xca1: vca1(0xca9) = CONST 
0xca4: JUMPI vca1(0xca9) vca0
----------------------------------

Begin block 0xca5
prev = {'0xc93'}, next = {}
----------------------------------
Block 0xca5
0xca5: vca5(0x0) = CONST 
0xca8: REVERT vca5(0x0) vca5(0x0)
----------------------------------

Begin block 0xca9
prev = {'0xc93'}, next = {'0xd0c', '0xd10'}
----------------------------------
Block 0xca9
0xcab: vcab = MLOAD vc9a
0xcac: vcac(0x5) = CONST 
0xcaf: vcaf = SLOAD vcac(0x5)
0xcb0: vcb0(0x1) = CONST 
0xcb2: vcb2(0x1) = CONST 
0xcb4: vcb4(0xa0) = CONST 
0xcb6: vcb6(0x10000000000000000000000000000000000000000) = SHL vcb4(0xa0) vcb2(0x1)
0xcb7: vcb7(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcb6(0x10000000000000000000000000000000000000000) vcb0(0x1)
0xcb8: vcb8(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vcb7(0xffffffffffffffffffffffffffffffffffffffff)
0xcb9: vcb9 = AND vcb8(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vcaf
0xcba: vcba(0x1) = CONST 
0xcbc: vcbc(0x1) = CONST 
0xcbe: vcbe(0xa0) = CONST 
0xcc0: vcc0(0x10000000000000000000000000000000000000000) = SHL vcbe(0xa0) vcbc(0x1)
0xcc1: vcc1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc0(0x10000000000000000000000000000000000000000) vcba(0x1)
0xcc4: vcc4 = AND vcab vcc1(0xffffffffffffffffffffffffffffffffffffffff)
0xcc8: vcc8 = OR vcc4 vcb9
0xccb: SSTORE vcac(0x5) vcc8
0xccc: vccc(0x40) = CONST 
0xccf: vccf = MLOAD vccc(0x40)
0xcd0: vcd0(0x8d10251) = CONST 
0xcd5: vcd5(0xe2) = CONST 
0xcd7: vcd7(0x2344094400000000000000000000000000000000000000000000000000000000) = SHL vcd5(0xe2) vcd0(0x8d10251)
0xcd9: MSTORE vccf vcd7(0x2344094400000000000000000000000000000000000000000000000000000000)
0xcda: vcda(0x4) = CONST 
0xcdd: vcdd = ADD vccf vcda(0x4)
0xce0: MSTORE vcdd vbb9
0xce2: vce2 = MLOAD vccc(0x40)
0xce8: vce8 = AND vac5 vcc1(0xffffffffffffffffffffffffffffffffffffffff)
0xcea: vcea(0x23440944) = CONST 
0xcf0: vcf0(0x24) = CONST 
0xcf4: vcf4 = ADD vccf vcf0(0x24)
0xcf6: vcf6(0x0) = CONST 
0xcfe: vcfe = SUB vccf vce2
0xcff: vcff = ADD vcfe vcf0(0x24)
0xd04: vd04 = EXTCODESIZE vce8
0xd05: vd05 = ISZERO vd04
0xd07: vd07 = ISZERO vd05
0xd08: vd08(0xd10) = CONST 
0xd0b: JUMPI vd08(0xd10) vd07
----------------------------------

Begin block 0xd0c
prev = {'0xca9'}, next = {}
----------------------------------
Block 0xd0c
0xd0c: vd0c(0x0) = CONST 
0xd0f: REVERT vd0c(0x0) vd0c(0x0)
----------------------------------

Begin block 0xd10
prev = {'0xca9'}, next = {'0xd24', '0xd1b'}
----------------------------------
Block 0xd10
0xd12: vd12 = GAS 
0xd13: vd13 = CALL vd12 vce8 vcf6(0x0) vce2 vcff vce2 vcf6(0x0)
0xd14: vd14 = ISZERO vd13
0xd16: vd16 = ISZERO vd14
0xd17: vd17(0xd24) = CONST 
0xd1a: JUMPI vd17(0xd24) vd16
----------------------------------

Begin block 0xd1b
prev = {'0xd10'}, next = {}
----------------------------------
Block 0xd1b
0xd1b: vd1b = RETURNDATASIZE 
0xd1c: vd1c(0x0) = CONST 
0xd1f: RETURNDATACOPY vd1c(0x0) vd1c(0x0) vd1b
0xd20: vd20 = RETURNDATASIZE 
0xd21: vd21(0x0) = CONST 
0xd23: REVERT vd21(0x0) vd20
----------------------------------

Begin block 0xd24
prev = {'0xd10'}, next = {'0xd8b', '0xd87'}
----------------------------------
Block 0xd24
0xd27: vd27(0x5) = CONST 
0xd2a: vd2a = SLOAD vd27(0x5)
0xd2b: vd2b(0x1) = CONST 
0xd2d: vd2d(0x1) = CONST 
0xd2f: vd2f(0xa0) = CONST 
0xd31: vd31(0x10000000000000000000000000000000000000000) = SHL vd2f(0xa0) vd2d(0x1)
0xd32: vd32(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd31(0x10000000000000000000000000000000000000000) vd2b(0x1)
0xd33: vd33(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vd32(0xffffffffffffffffffffffffffffffffffffffff)
0xd34: vd34 = AND vd33(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vd2a
0xd36: SSTORE vd27(0x5) vd34
0xd39: vd39(0x40) = CONST 
0xd3c: vd3c = MLOAD vd39(0x40)
0xd3d: vd3d(0xa9059cbb) = CONST 
0xd42: vd42(0xe0) = CONST 
0xd44: vd44(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL vd42(0xe0) vd3d(0xa9059cbb)
0xd46: MSTORE vd3c vd44(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xd47: vd47(0x1) = CONST 
0xd49: vd49(0x1) = CONST 
0xd4b: vd4b(0xa0) = CONST 
0xd4d: vd4d(0x10000000000000000000000000000000000000000) = SHL vd4b(0xa0) vd49(0x1)
0xd4e: vd4e(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd4d(0x10000000000000000000000000000000000000000) vd47(0x1)
0xd51: vd51 = AND vd4e(0xffffffffffffffffffffffffffffffffffffffff) vab
0xd52: vd52(0x4) = CONST 
0xd55: vd55 = ADD vd3c vd52(0x4)
0xd56: MSTORE vd55 vd51
0xd57: vd57(0x24) = CONST 
0xd5a: vd5a = ADD vd3c vd57(0x24)
0xd5d: MSTORE vd5a vbb9
0xd5f: vd5f = MLOAD vd39(0x40)
0xd62: vd62 = AND vcab vd4e(0xffffffffffffffffffffffffffffffffffffffff)
0xd64: vd64(0xa9059cbb) = CONST 
0xd6a: vd6a(0x44) = CONST 
0xd6e: vd6e = ADD vd3c vd6a(0x44)
0xd70: vd70(0x20) = CONST 
0xd78: vd78 = SUB vd3c vd5f
0xd79: vd79 = ADD vd78 vd6a(0x44)
0xd7b: vd7b(0x0) = CONST 
0xd7f: vd7f = EXTCODESIZE vd62
0xd80: vd80 = ISZERO vd7f
0xd82: vd82 = ISZERO vd80
0xd83: vd83(0xd8b) = CONST 
0xd86: JUMPI vd83(0xd8b) vd82
----------------------------------

Begin block 0xd87
prev = {'0xd24'}, next = {}
----------------------------------
Block 0xd87
0xd87: vd87(0x0) = CONST 
0xd8a: REVERT vd87(0x0) vd87(0x0)
----------------------------------

Begin block 0xd8b
prev = {'0xd24'}, next = {'0xd9f', '0xd96'}
----------------------------------
Block 0xd8b
0xd8d: vd8d = GAS 
0xd8e: vd8e = CALL vd8d vd62 vd7b(0x0) vd5f vd79 vd5f vd70(0x20)
0xd8f: vd8f = ISZERO vd8e
0xd91: vd91 = ISZERO vd8f
0xd92: vd92(0xd9f) = CONST 
0xd95: JUMPI vd92(0xd9f) vd91
----------------------------------

Begin block 0xd96
prev = {'0xd8b'}, next = {}
----------------------------------
Block 0xd96
0xd96: vd96 = RETURNDATASIZE 
0xd97: vd97(0x0) = CONST 
0xd9a: RETURNDATACOPY vd97(0x0) vd97(0x0) vd96
0xd9b: vd9b = RETURNDATASIZE 
0xd9c: vd9c(0x0) = CONST 
0xd9e: REVERT vd9c(0x0) vd9b
----------------------------------

Begin block 0xd9f
prev = {'0xd8b'}, next = {'0xdb5', '0xdb1'}
----------------------------------
Block 0xd9f
0xda4: vda4(0x40) = CONST 
0xda6: vda6 = MLOAD vda4(0x40)
0xda7: vda7 = RETURNDATASIZE 
0xda8: vda8(0x20) = CONST 
0xdab: vdab = LT vda7 vda8(0x20)
0xdac: vdac = ISZERO vdab
0xdad: vdad(0xdb5) = CONST 
0xdb0: JUMPI vdad(0xdb5) vdac
----------------------------------

Begin block 0xdb1
prev = {'0xd9f'}, next = {}
----------------------------------
Block 0xdb1
0xdb1: vdb1(0x0) = CONST 
0xdb4: REVERT vdb1(0x0) vdb1(0x0)
----------------------------------

Begin block 0xdb5
prev = {'0xd9f'}, next = {'0xe00'}
----------------------------------
Block 0xdb5
0xdb7: vdb7(0xe00) = CONST 
0xdbe: JUMP vdb7(0xe00)
----------------------------------

Begin block 0xdbf
prev = {'0xaa8'}, next = {}
----------------------------------
Block 0xdbf
0xdc0: vdc0(0x40) = CONST 
0xdc3: vdc3 = MLOAD vdc0(0x40)
0xdc4: vdc4(0x461bcd) = CONST 
0xdc8: vdc8(0xe5) = CONST 
0xdca: vdca(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vdc8(0xe5) vdc4(0x461bcd)
0xdcc: MSTORE vdc3 vdca(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xdcd: vdcd(0x20) = CONST 
0xdcf: vdcf(0x4) = CONST 
0xdd2: vdd2 = ADD vdc3 vdcf(0x4)
0xdd3: MSTORE vdd2 vdcd(0x20)
0xdd4: vdd4(0x11) = CONST 
0xdd6: vdd6(0x24) = CONST 
0xdd9: vdd9 = ADD vdc3 vdd6(0x24)
0xdda: MSTORE vdd9 vdd4(0x11)
0xddb: vddb(0x2ab739bab83837b93a32b2103a37b5b2b7) = CONST 
0xded: vded(0x79) = CONST 
0xdef: vdef(0x556e737570706f7274656420746f6b656e000000000000000000000000000000) = SHL vded(0x79) vddb(0x2ab739bab83837b93a32b2103a37b5b2b7)
0xdf0: vdf0(0x44) = CONST 
0xdf3: vdf3 = ADD vdc3 vdf0(0x44)
0xdf4: MSTORE vdf3 vdef(0x556e737570706f7274656420746f6b656e000000000000000000000000000000)
0xdf6: vdf6 = MLOAD vdc0(0x40)
0xdfa: vdfa = SUB vdc3 vdf6
0xdfb: vdfb(0x64) = CONST 
0xdfd: vdfd = ADD vdfb(0x64) vdfa
0xdff: REVERT vdf6 vdfd
----------------------------------

Begin block 0xe00
prev = {'0xdb5'}, next = {'0xe03'}
----------------------------------
Block 0xe00
----------------------------------

Begin block 0xe03
prev = {'0xe00', '0x7a1', '0xa38'}, next = {'0x27b'}
----------------------------------
Block 0xe03
0xe08: JUMP v23a(0x27b)
----------------------------------

Begin block 0xe09
prev = {}, next = {}
----------------------------------
function 0xe09(ve09arg0)
Block 0xe09
0xe0a: ve0a = CALLER 
0xe0c: RETURNPRIVATE ve09arg0 ve0a
----------------------------------

Begin block 0xe62
prev = {'0x10', '0x71'}, next = {'0x7c0x0'}
----------------------------------
Block 0xe62
0xe63: ve63(0x7c) = CONST 
0xe64: CALLPRIVATE ve63(0x7c)
----------------------------------

Begin block 0xe65
prev = {'0x5b'}, next = {}
----------------------------------
Block 0xe65
0xe66: ve66(0x81) = CONST 
0xe67: CALLPRIVATE ve66(0x81)
----------------------------------

Begin block 0xe68
prev = {'0x66'}, next = {}
----------------------------------
Block 0xe68
0xe69: ve69(0x16d) = CONST 
0xe6a: CALLPRIVATE ve69(0x16d)
----------------------------------

Begin block 0xe6b
prev = {'0x71'}, next = {}
----------------------------------
Block 0xe6b
0xe6c: ve6c(0x193) = CONST 
0xe6d: CALLPRIVATE ve6c(0x193)
----------------------------------

Begin block 0xe6e
prev = {'0x2b'}, next = {}
----------------------------------
Block 0xe6e
0xe6f: ve6f(0x19b) = CONST 
0xe70: CALLPRIVATE ve6f(0x19b)
----------------------------------

Begin block 0xe71
prev = {'0x36'}, next = {}
----------------------------------
Block 0xe71
0xe72: ve72(0x1bf) = CONST 
0xe73: CALLPRIVATE ve72(0x1bf)
----------------------------------

Begin block 0xe74
prev = {'0x41'}, next = {}
----------------------------------
Block 0xe74
0xe75: ve75(0x1e5) = CONST 
0xe76: CALLPRIVATE ve75(0x1e5)
----------------------------------

Begin block 0xe77
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xe77
0xe78: ve78(0x213) = CONST 
0xe79: CALLPRIVATE ve78(0x213)
----------------------------------
