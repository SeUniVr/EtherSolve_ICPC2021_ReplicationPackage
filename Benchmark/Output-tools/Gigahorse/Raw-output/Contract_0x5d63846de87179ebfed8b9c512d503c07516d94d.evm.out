
Begin block 0x0
prev = {}, next = {'0xb7', '0xb'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0xb7) = CONST 
0xa: JUMPI v7(0xb7) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0xa2b', '0x3e'}
----------------------------------
Block 0xb
0xb: vb(0xffffffff) = CONST 
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2e: v2e(0x0) = CONST 
0x30: v30 = CALLDATALOAD v2e(0x0)
0x31: v31 = DIV v30 v10(0x100000000000000000000000000000000000000000000000000000000)
0x32: v32 = AND v31 vb(0xffffffff)
0x33: v33(0x6fdde03) = CONST 
0x39: v39 = EQ v32 v33(0x6fdde03)
0xa13: va13(0xa2b) = CONST 
0xa14: JUMPI va13(0xa2b) v39
----------------------------------

Begin block 0x3e
prev = {'0xb'}, next = {'0x49', '0xa2e'}
----------------------------------
Block 0x3e
0x3f: v3f(0x95ea7b3) = CONST 
0x44: v44 = EQ v3f(0x95ea7b3) v32
0xa15: va15(0xa2e) = CONST 
0xa16: JUMPI va15(0xa2e) v44
----------------------------------

Begin block 0x49
prev = {'0x3e'}, next = {'0x54', '0xa31'}
----------------------------------
Block 0x49
0x4a: v4a(0x18160ddd) = CONST 
0x4f: v4f = EQ v4a(0x18160ddd) v32
0xa17: va17(0xa31) = CONST 
0xa18: JUMPI va17(0xa31) v4f
----------------------------------

Begin block 0x54
prev = {'0x49'}, next = {'0x5f', '0xa34'}
----------------------------------
Block 0x54
0x55: v55(0x23b872dd) = CONST 
0x5a: v5a = EQ v55(0x23b872dd) v32
0xa19: va19(0xa34) = CONST 
0xa1a: JUMPI va19(0xa34) v5a
----------------------------------

Begin block 0x5f
prev = {'0x54'}, next = {'0x6a', '0xa37'}
----------------------------------
Block 0x5f
0x60: v60(0x313ce567) = CONST 
0x65: v65 = EQ v60(0x313ce567) v32
0xa1b: va1b(0xa37) = CONST 
0xa1c: JUMPI va1b(0xa37) v65
----------------------------------

Begin block 0x6a
prev = {'0x5f'}, next = {'0xa3a', '0x75'}
----------------------------------
Block 0x6a
0x6b: v6b(0x42966c68) = CONST 
0x70: v70 = EQ v6b(0x42966c68) v32
0xa1d: va1d(0xa3a) = CONST 
0xa1e: JUMPI va1d(0xa3a) v70
----------------------------------

Begin block 0x75
prev = {'0x6a'}, next = {'0x80', '0xa3d'}
----------------------------------
Block 0x75
0x76: v76(0x70a08231) = CONST 
0x7b: v7b = EQ v76(0x70a08231) v32
0xa1f: va1f(0xa3d) = CONST 
0xa20: JUMPI va1f(0xa3d) v7b
----------------------------------

Begin block 0x80
prev = {'0x75'}, next = {'0xa40', '0x8b'}
----------------------------------
Block 0x80
0x81: v81(0x79cc6790) = CONST 
0x86: v86 = EQ v81(0x79cc6790) v32
0xa21: va21(0xa40) = CONST 
0xa22: JUMPI va21(0xa40) v86
----------------------------------

Begin block 0x8b
prev = {'0x80'}, next = {'0xa43', '0x96'}
----------------------------------
Block 0x8b
0x8c: v8c(0x95d89b41) = CONST 
0x91: v91 = EQ v8c(0x95d89b41) v32
0xa23: va23(0xa43) = CONST 
0xa24: JUMPI va23(0xa43) v91
----------------------------------

Begin block 0x96
prev = {'0x8b'}, next = {'0xa46', '0xa1'}
----------------------------------
Block 0x96
0x97: v97(0xa9059cbb) = CONST 
0x9c: v9c = EQ v97(0xa9059cbb) v32
0xa25: va25(0xa46) = CONST 
0xa26: JUMPI va25(0xa46) v9c
----------------------------------

Begin block 0xa1
prev = {'0x96'}, next = {'0xac', '0xa49'}
----------------------------------
Block 0xa1
0xa2: va2(0xcae9ca51) = CONST 
0xa7: va7 = EQ va2(0xcae9ca51) v32
0xa27: va27(0xa49) = CONST 
0xa28: JUMPI va27(0xa49) va7
----------------------------------

Begin block 0xac
prev = {'0xa1'}, next = {'0xb7', '0xa4c'}
----------------------------------
Block 0xac
0xad: vad(0xdd62ed3e) = CONST 
0xb2: vb2 = EQ vad(0xdd62ed3e) v32
0xa29: va29(0xa4c) = CONST 
0xa2a: JUMPI va29(0xa4c) vb2
----------------------------------

Begin block 0xb7
prev = {'0x0', '0xac'}, next = {}
----------------------------------
Block 0xb7
0xb8: vb8(0x0) = CONST 
0xbb: REVERT vb8(0x0) vb8(0x0)
----------------------------------

Begin block 0xbc
prev = {}, next = {'0xc3', '0xc7'}
----------------------------------
function name()()
Block 0xbc
0xbd: vbd = CALLVALUE 
0xbe: vbe = ISZERO vbd
0xbf: vbf(0xc7) = CONST 
0xc2: JUMPI vbf(0xc7) vbe
----------------------------------

Begin block 0xc3
prev = {'0xbc'}, next = {}
----------------------------------
Block 0xc3
0xc3: vc3(0x0) = CONST 
0xc6: REVERT vc3(0x0) vc3(0x0)
----------------------------------

Begin block 0xc7
prev = {'0xbc'}, next = {'0xcf0xbc'}
----------------------------------
Block 0xc7
0xc8: vc8(0xcf) = CONST 
0xcb: vcb(0x409) = CONST 
0xce: vce_0, vce_1 = CALLPRIVATE vcb(0x409) vc8(0xcf)
----------------------------------

Begin block 0xcf0xbc
prev = {'0xc7'}, next = {'0xf30xbc'}
----------------------------------
Block 0xcf0xbc
0xd00xbc: vbcd0(0x40) = CONST 
0xd20xbc: vbcd2 = MLOAD vbcd0(0x40)
0xd30xbc: vbcd3(0x20) = CONST 
0xd70xbc: MSTORE vbcd2 vbcd3(0x20)
0xdb0xbc: vbcdb = ADD vbcd2 vbcd3(0x20)
0xdf0xbc: vbcdf = MLOAD vce_0
0xe10xbc: MSTORE vbcdb vbcdf
0xe20xbc: vbce2(0x20) = CONST 
0xe40xbc: vbce4 = ADD vbce2(0x20) vbcdb
0xe80xbc: vbce8 = MLOAD vce_0
0xea0xbc: vbcea(0x20) = CONST 
0xec0xbc: vbcec = ADD vbcea(0x20) vce_0
0xf10xbc: vbcf1(0x0) = CONST 
----------------------------------

Begin block 0xcf0x298
prev = {'0x2a3'}, next = {'0xf30x298'}
----------------------------------
Block 0xcf0x298
0xd00x298: v298d0(0x40) = CONST 
0xd20x298: v298d2 = MLOAD v298d0(0x40)
0xd30x298: v298d3(0x20) = CONST 
0xd70x298: MSTORE v298d2 v298d3(0x20)
0xdb0x298: v298db = ADD v298d2 v298d3(0x20)
0xdf0x298: v298df = MLOAD v2aa_0
0xe10x298: MSTORE v298db v298df
0xe20x298: v298e2(0x20) = CONST 
0xe40x298: v298e4 = ADD v298e2(0x20) v298db
0xe80x298: v298e8 = MLOAD v2aa_0
0xea0x298: v298ea(0x20) = CONST 
0xec0x298: v298ec = ADD v298ea(0x20) v2aa_0
0xf10x298: v298f1(0x0) = CONST 
----------------------------------

Begin block 0xf30xbc
prev = {'0xcf0xbc', '0x1040xbc'}, next = {'0x10c0xbc', '0xfc0xbc'}
----------------------------------
Block 0xf30xbc
0xf30xbc_0x0: vf3bc_0 = PHI vbcf1(0x0) vbc107
0xf60xbc: vbcf6 = LT vf3bc_0 vbce8
0xf70xbc: vbcf7 = ISZERO vbcf6
0xf80xbc: vbcf8(0x10c) = CONST 
0xfb0xbc: JUMPI vbcf8(0x10c) vbcf7
----------------------------------

Begin block 0xf30x298
prev = {'0xcf0x298', '0x1040x298'}, next = {'0x10c0x298', '0xfc0x298'}
----------------------------------
Block 0xf30x298
0xf30x298_0x0: vf3298_0 = PHI v298f1(0x0) v298107
0xf60x298: v298f6 = LT vf3298_0 v298e8
0xf70x298: v298f7 = ISZERO v298f6
0xf80x298: v298f8(0x10c) = CONST 
0xfb0x298: JUMPI v298f8(0x10c) v298f7
----------------------------------

Begin block 0xfc0xbc
prev = {'0xf30xbc'}, next = {'0x1040xbc'}
----------------------------------
Block 0xfc0xbc
0xfc0xbc_0x0: vfcbc_0 = PHI vbcf1(0x0) vbc107
0xfe0xbc: vbcfe = ADD vbcec vfcbc_0
0xff0xbc: vbcff = MLOAD vbcfe
0x1020xbc: vbc102 = ADD vbce4 vfcbc_0
0x1030xbc: MSTORE vbc102 vbcff
----------------------------------

Begin block 0xfc0x298
prev = {'0xf30x298'}, next = {'0x1040x298'}
----------------------------------
Block 0xfc0x298
0xfc0x298_0x0: vfc298_0 = PHI v298f1(0x0) v298107
0xfe0x298: v298fe = ADD v298ec vfc298_0
0xff0x298: v298ff = MLOAD v298fe
0x1020x298: v298102 = ADD v298e4 vfc298_0
0x1030x298: MSTORE v298102 v298ff
----------------------------------

Begin block 0x1040xbc
prev = {'0xfc0xbc'}, next = {'0xf30xbc'}
----------------------------------
Block 0x1040xbc
0x1040xbc_0x0: v104bc_0 = PHI vbcf1(0x0) vbc107
0x1050xbc: vbc105(0x20) = CONST 
0x1070xbc: vbc107 = ADD vbc105(0x20) v104bc_0
0x1080xbc: vbc108(0xf3) = CONST 
0x10b0xbc: JUMP vbc108(0xf3)
----------------------------------

Begin block 0x1040x298
prev = {'0xfc0x298'}, next = {'0xf30x298'}
----------------------------------
Block 0x1040x298
0x1040x298_0x0: v104298_0 = PHI v298f1(0x0) v298107
0x1050x298: v298105(0x20) = CONST 
0x1070x298: v298107 = ADD v298105(0x20) v104298_0
0x1080x298: v298108(0xf3) = CONST 
0x10b0x298: JUMP v298108(0xf3)
----------------------------------

Begin block 0x10c0xbc
prev = {'0xf30xbc'}, next = {'0x1390xbc', '0x1200xbc'}
----------------------------------
Block 0x10c0xbc
0x1150xbc: vbc115 = ADD vbce8 vbce4
0x1170xbc: vbc117(0x1f) = CONST 
0x1190xbc: vbc119 = AND vbc117(0x1f) vbce8
0x11b0xbc: vbc11b = ISZERO vbc119
0x11c0xbc: vbc11c(0x139) = CONST 
0x11f0xbc: JUMPI vbc11c(0x139) vbc11b
----------------------------------

Begin block 0x10c0x298
prev = {'0xf30x298'}, next = {'0x1390x298', '0x1200x298'}
----------------------------------
Block 0x10c0x298
0x1150x298: v298115 = ADD v298e8 v298e4
0x1170x298: v298117(0x1f) = CONST 
0x1190x298: v298119 = AND v298117(0x1f) v298e8
0x11b0x298: v29811b = ISZERO v298119
0x11c0x298: v29811c(0x139) = CONST 
0x11f0x298: JUMPI v29811c(0x139) v29811b
----------------------------------

Begin block 0x1200xbc
prev = {'0x10c0xbc'}, next = {'0x1390xbc'}
----------------------------------
Block 0x1200xbc
0x1220xbc: vbc122 = SUB vbc115 vbc119
0x1240xbc: vbc124 = MLOAD vbc122
0x1250xbc: vbc125(0x1) = CONST 
0x1280xbc: vbc128(0x20) = CONST 
0x12a0xbc: vbc12a = SUB vbc128(0x20) vbc119
0x12b0xbc: vbc12b(0x100) = CONST 
0x12e0xbc: vbc12e = EXP vbc12b(0x100) vbc12a
0x12f0xbc: vbc12f = SUB vbc12e vbc125(0x1)
0x1300xbc: vbc130 = NOT vbc12f
0x1310xbc: vbc131 = AND vbc130 vbc124
0x1330xbc: MSTORE vbc122 vbc131
0x1340xbc: vbc134(0x20) = CONST 
0x1360xbc: vbc136 = ADD vbc134(0x20) vbc122
----------------------------------

Begin block 0x1200x298
prev = {'0x10c0x298'}, next = {'0x1390x298'}
----------------------------------
Block 0x1200x298
0x1220x298: v298122 = SUB v298115 v298119
0x1240x298: v298124 = MLOAD v298122
0x1250x298: v298125(0x1) = CONST 
0x1280x298: v298128(0x20) = CONST 
0x12a0x298: v29812a = SUB v298128(0x20) v298119
0x12b0x298: v29812b(0x100) = CONST 
0x12e0x298: v29812e = EXP v29812b(0x100) v29812a
0x12f0x298: v29812f = SUB v29812e v298125(0x1)
0x1300x298: v298130 = NOT v29812f
0x1310x298: v298131 = AND v298130 v298124
0x1330x298: MSTORE v298122 v298131
0x1340x298: v298134(0x20) = CONST 
0x1360x298: v298136 = ADD v298134(0x20) v298122
----------------------------------

Begin block 0x1390xbc
prev = {'0x10c0xbc', '0x1200xbc'}, next = {}
----------------------------------
Block 0x1390xbc
0x1390xbc_0x1: v139bc_1 = PHI vbc115 vbc136
0x13f0xbc: vbc13f(0x40) = CONST 
0x1410xbc: vbc141 = MLOAD vbc13f(0x40)
0x1440xbc: vbc144 = SUB v139bc_1 vbc141
0x1460xbc: RETURN vbc141 vbc144
----------------------------------

Begin block 0x1390x298
prev = {'0x10c0x298', '0x1200x298'}, next = {}
----------------------------------
Block 0x1390x298
0x1390x298_0x1: v139298_1 = PHI v298115 v298136
0x13f0x298: v29813f(0x40) = CONST 
0x1410x298: v298141 = MLOAD v29813f(0x40)
0x1440x298: v298144 = SUB v139298_1 v298141
0x1460x298: RETURN v298141 v298144
----------------------------------

Begin block 0x147
prev = {}, next = {'0x152', '0x14e'}
----------------------------------
function approve(address,uint256)()
Block 0x147
0x148: v148 = CALLVALUE 
0x149: v149 = ISZERO v148
0x14a: v14a(0x152) = CONST 
0x14d: JUMPI v14a(0x152) v149
----------------------------------

Begin block 0x14e
prev = {'0x147'}, next = {}
----------------------------------
Block 0x14e
0x14e: v14e(0x0) = CONST 
0x151: REVERT v14e(0x0) v14e(0x0)
----------------------------------

Begin block 0x152
prev = {'0x147'}, next = {'0x1690x147'}
----------------------------------
Block 0x152
0x153: v153(0x169) = CONST 
0x156: v156(0x1) = CONST 
0x158: v158(0xa0) = CONST 
0x15a: v15a(0x2) = CONST 
0x15c: v15c(0x10000000000000000000000000000000000000000) = EXP v15a(0x2) v158(0xa0)
0x15d: v15d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15c(0x10000000000000000000000000000000000000000) v156(0x1)
0x15e: v15e(0x4) = CONST 
0x160: v160 = CALLDATALOAD v15e(0x4)
0x161: v161 = AND v160 v15d(0xffffffffffffffffffffffffffffffffffffffff)
0x162: v162(0x24) = CONST 
0x164: v164 = CALLDATALOAD v162(0x24)
0x165: v165(0x4a7) = CONST 
0x168: v168_0 = CALLPRIVATE v165(0x4a7) v164 v161 v153(0x169)
----------------------------------

Begin block 0x1690x147
prev = {'0x152'}, next = {}
----------------------------------
Block 0x1690x147
0x16a0x147: v14716a(0x40) = CONST 
0x16c0x147: v14716c = MLOAD v14716a(0x40)
0x16e0x147: v14716e = ISZERO v168_0
0x16f0x147: v14716f = ISZERO v14716e
0x1710x147: MSTORE v14716c v14716f
0x1720x147: v147172(0x20) = CONST 
0x1740x147: v147174 = ADD v147172(0x20) v14716c
0x1750x147: v147175(0x40) = CONST 
0x1770x147: v147177 = MLOAD v147175(0x40)
0x17a0x147: v14717a = SUB v147174 v147177
0x17c0x147: RETURN v147177 v14717a
----------------------------------

Begin block 0x1690x1a2
prev = {'0x54f'}, next = {}
----------------------------------
Block 0x1690x1a2
0x16a0x1a2: v1a216a(0x40) = CONST 
0x16c0x1a2: v1a216c = MLOAD v1a216a(0x40)
0x16e0x1a2: v1a216e = ISZERO v54d(0x1)
0x16f0x1a2: v1a216f = ISZERO v1a216e
0x1710x1a2: MSTORE v1a216c v1a216f
0x1720x1a2: v1a2172(0x20) = CONST 
0x1740x1a2: v1a2174 = ADD v1a2172(0x20) v1a216c
0x1750x1a2: v1a2175(0x40) = CONST 
0x1770x1a2: v1a2177 = MLOAD v1a2175(0x40)
0x17a0x1a2: v1a217a = SUB v1a2174 v1a2177
0x17c0x1a2: RETURN v1a2177 v1a217a
----------------------------------

Begin block 0x1690x207
prev = {'0x5e6'}, next = {}
----------------------------------
Block 0x1690x207
0x16a0x207: v20716a(0x40) = CONST 
0x16c0x207: v20716c = MLOAD v20716a(0x40)
0x16e0x207: v20716e = ISZERO v5e4(0x1)
0x16f0x207: v20716f = ISZERO v20716e
0x1710x207: MSTORE v20716c v20716f
0x1720x207: v207172(0x20) = CONST 
0x1740x207: v207174 = ADD v207172(0x20) v20716c
0x1750x207: v207175(0x40) = CONST 
0x1770x207: v207177 = MLOAD v207175(0x40)
0x17a0x207: v20717a = SUB v207174 v207177
0x17c0x207: RETURN v207177 v20717a
----------------------------------

Begin block 0x1690x262
prev = {'0x6d4'}, next = {}
----------------------------------
Block 0x1690x262
0x16a0x262: v26216a(0x40) = CONST 
0x16c0x262: v26216c = MLOAD v26216a(0x40)
0x16e0x262: v26216e = ISZERO v6d2(0x1)
0x16f0x262: v26216f = ISZERO v26216e
0x1710x262: MSTORE v26216c v26216f
0x1720x262: v262172(0x20) = CONST 
0x1740x262: v262174 = ADD v262172(0x20) v26216c
0x1750x262: v262175(0x40) = CONST 
0x1770x262: v262177 = MLOAD v262175(0x40)
0x17a0x262: v26217a = SUB v262174 v262177
0x17c0x262: RETURN v262177 v26217a
----------------------------------

Begin block 0x1690x323
prev = {'0x789'}, next = {}
----------------------------------
Block 0x1690x323
0x16a0x323: v32316a(0x40) = CONST 
0x16c0x323: v32316c = MLOAD v32316a(0x40)
0x16e0x323: v32316e = ISZERO v787(0x1)
0x16f0x323: v32316f = ISZERO v32316e
0x1710x323: MSTORE v32316c v32316f
0x1720x323: v323172(0x20) = CONST 
0x1740x323: v323174 = ADD v323172(0x20) v32316c
0x1750x323: v323175(0x40) = CONST 
0x1770x323: v323177 = MLOAD v323175(0x40)
0x17a0x323: v32317a = SUB v323174 v323177
0x17c0x323: RETURN v323177 v32317a
----------------------------------

Begin block 0x1690x359
prev = {'0x8bb'}, next = {}
----------------------------------
Block 0x1690x359
0x1690x359_0x0: v169359_0 = PHI v790(0x0) v8b6(0x1)
0x16a0x359: v35916a(0x40) = CONST 
0x16c0x359: v35916c = MLOAD v35916a(0x40)
0x16e0x359: v35916e = ISZERO v169359_0
0x16f0x359: v35916f = ISZERO v35916e
0x1710x359: MSTORE v35916c v35916f
0x1720x359: v359172(0x20) = CONST 
0x1740x359: v359174 = ADD v359172(0x20) v35916c
0x1750x359: v359175(0x40) = CONST 
0x1770x359: v359177 = MLOAD v359175(0x40)
0x17a0x359: v35917a = SUB v359174 v359177
0x17c0x359: RETURN v359177 v35917a
----------------------------------

Begin block 0x17d
prev = {}, next = {'0x188', '0x184'}
----------------------------------
function totalSupply()()
Block 0x17d
0x17e: v17e = CALLVALUE 
0x17f: v17f = ISZERO v17e
0x180: v180(0x188) = CONST 
0x183: JUMPI v180(0x188) v17f
----------------------------------

Begin block 0x184
prev = {'0x17d'}, next = {}
----------------------------------
Block 0x184
0x184: v184(0x0) = CONST 
0x187: REVERT v184(0x0) v184(0x0)
----------------------------------

Begin block 0x188
prev = {'0x17d'}, next = {'0x4d8'}
----------------------------------
Block 0x188
0x189: v189(0x190) = CONST 
0x18c: v18c(0x4d8) = CONST 
0x18f: JUMP v18c(0x4d8)
----------------------------------

Begin block 0x1900x17d
prev = {'0x4d8'}, next = {}
----------------------------------
Block 0x1900x17d
0x1910x17d: v17d191(0x40) = CONST 
0x1930x17d: v17d193 = MLOAD v17d191(0x40)
0x1960x17d: MSTORE v17d193 v4db
0x1970x17d: v17d197(0x20) = CONST 
0x1990x17d: v17d199 = ADD v17d197(0x20) v17d193
0x19a0x17d: v17d19a(0x40) = CONST 
0x19c0x17d: v17d19c = MLOAD v17d19a(0x40)
0x19f0x17d: v17d19f = SUB v17d199 v17d19c
0x1a10x17d: RETURN v17d19c v17d19f
----------------------------------

Begin block 0x1900x231
prev = {'0x5eb'}, next = {}
----------------------------------
Block 0x1900x231
0x1910x231: v231191(0x40) = CONST 
0x1930x231: v231193 = MLOAD v231191(0x40)
0x1960x231: MSTORE v231193 v5fa
0x1970x231: v231197(0x20) = CONST 
0x1990x231: v231199 = ADD v231197(0x20) v231193
0x19a0x231: v23119a(0x40) = CONST 
0x19c0x231: v23119c = MLOAD v23119a(0x40)
0x19f0x231: v23119f = SUB v231199 v23119c
0x1a10x231: RETURN v23119c v23119f
----------------------------------

Begin block 0x1900x3d2
prev = {'0x8c3'}, next = {}
----------------------------------
Block 0x1900x3d2
0x1910x3d2: v3d2191(0x40) = CONST 
0x1930x3d2: v3d2193 = MLOAD v3d2191(0x40)
0x1960x3d2: MSTORE v3d2193 v8dd
0x1970x3d2: v3d2197(0x20) = CONST 
0x1990x3d2: v3d2199 = ADD v3d2197(0x20) v3d2193
0x19a0x3d2: v3d219a(0x40) = CONST 
0x19c0x3d2: v3d219c = MLOAD v3d219a(0x40)
0x19f0x3d2: v3d219f = SUB v3d2199 v3d219c
0x1a10x3d2: RETURN v3d219c v3d219f
----------------------------------

Begin block 0x1a2
prev = {}, next = {'0x1ad', '0x1a9'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1a2
0x1a3: v1a3 = CALLVALUE 
0x1a4: v1a4 = ISZERO v1a3
0x1a5: v1a5(0x1ad) = CONST 
0x1a8: JUMPI v1a5(0x1ad) v1a4
----------------------------------

Begin block 0x1a9
prev = {'0x1a2'}, next = {}
----------------------------------
Block 0x1a9
0x1a9: v1a9(0x0) = CONST 
0x1ac: REVERT v1a9(0x0) v1a9(0x0)
----------------------------------

Begin block 0x1ad
prev = {'0x1a2'}, next = {'0x4de'}
----------------------------------
Block 0x1ad
0x1ae: v1ae(0x169) = CONST 
0x1b1: v1b1(0x1) = CONST 
0x1b3: v1b3(0xa0) = CONST 
0x1b5: v1b5(0x2) = CONST 
0x1b7: v1b7(0x10000000000000000000000000000000000000000) = EXP v1b5(0x2) v1b3(0xa0)
0x1b8: v1b8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b7(0x10000000000000000000000000000000000000000) v1b1(0x1)
0x1b9: v1b9(0x4) = CONST 
0x1bb: v1bb = CALLDATALOAD v1b9(0x4)
0x1bd: v1bd = AND v1b8(0xffffffffffffffffffffffffffffffffffffffff) v1bb
0x1bf: v1bf(0x24) = CONST 
0x1c1: v1c1 = CALLDATALOAD v1bf(0x24)
0x1c2: v1c2 = AND v1c1 v1b8(0xffffffffffffffffffffffffffffffffffffffff)
0x1c3: v1c3(0x44) = CONST 
0x1c5: v1c5 = CALLDATALOAD v1c3(0x44)
0x1c6: v1c6(0x4de) = CONST 
0x1c9: JUMP v1c6(0x4de)
----------------------------------

Begin block 0x1de
prev = {}, next = {'0x1e5', '0x1e9'}
----------------------------------
function decimals()()
Block 0x1de
0x1df: v1df = CALLVALUE 
0x1e0: v1e0 = ISZERO v1df
0x1e1: v1e1(0x1e9) = CONST 
0x1e4: JUMPI v1e1(0x1e9) v1e0
----------------------------------

Begin block 0x1e5
prev = {'0x1de'}, next = {}
----------------------------------
Block 0x1e5
0x1e5: v1e5(0x0) = CONST 
0x1e8: REVERT v1e5(0x0) v1e5(0x0)
----------------------------------

Begin block 0x1e9
prev = {'0x1de'}, next = {'0x556'}
----------------------------------
Block 0x1e9
0x1ea: v1ea(0x1f1) = CONST 
0x1ed: v1ed(0x556) = CONST 
0x1f0: JUMP v1ed(0x556)
----------------------------------

Begin block 0x1f1
prev = {'0x556'}, next = {}
----------------------------------
Block 0x1f1
0x1f2: v1f2(0x40) = CONST 
0x1f4: v1f4 = MLOAD v1f2(0x40)
0x1f5: v1f5(0xff) = CONST 
0x1f9: v1f9 = AND v55c v1f5(0xff)
0x1fb: MSTORE v1f4 v1f9
0x1fc: v1fc(0x20) = CONST 
0x1fe: v1fe = ADD v1fc(0x20) v1f4
0x1ff: v1ff(0x40) = CONST 
0x201: v201 = MLOAD v1ff(0x40)
0x204: v204 = SUB v1fe v201
0x206: RETURN v201 v204
----------------------------------

Begin block 0x207
prev = {}, next = {'0x20e', '0x212'}
----------------------------------
function burn(uint256)()
Block 0x207
0x208: v208 = CALLVALUE 
0x209: v209 = ISZERO v208
0x20a: v20a(0x212) = CONST 
0x20d: JUMPI v20a(0x212) v209
----------------------------------

Begin block 0x20e
prev = {'0x207'}, next = {}
----------------------------------
Block 0x20e
0x20e: v20e(0x0) = CONST 
0x211: REVERT v20e(0x0) v20e(0x0)
----------------------------------

Begin block 0x212
prev = {'0x207'}, next = {'0x55f'}
----------------------------------
Block 0x212
0x213: v213(0x169) = CONST 
0x216: v216(0x4) = CONST 
0x218: v218 = CALLDATALOAD v216(0x4)
0x219: v219(0x55f) = CONST 
0x21c: JUMP v219(0x55f)
----------------------------------

Begin block 0x231
prev = {}, next = {'0x238', '0x23c'}
----------------------------------
function balanceOf(address)()
Block 0x231
0x232: v232 = CALLVALUE 
0x233: v233 = ISZERO v232
0x234: v234(0x23c) = CONST 
0x237: JUMPI v234(0x23c) v233
----------------------------------

Begin block 0x238
prev = {'0x231'}, next = {}
----------------------------------
Block 0x238
0x238: v238(0x0) = CONST 
0x23b: REVERT v238(0x0) v238(0x0)
----------------------------------

Begin block 0x23c
prev = {'0x231'}, next = {'0x5eb'}
----------------------------------
Block 0x23c
0x23d: v23d(0x190) = CONST 
0x240: v240(0x1) = CONST 
0x242: v242(0xa0) = CONST 
0x244: v244(0x2) = CONST 
0x246: v246(0x10000000000000000000000000000000000000000) = EXP v244(0x2) v242(0xa0)
0x247: v247(0xffffffffffffffffffffffffffffffffffffffff) = SUB v246(0x10000000000000000000000000000000000000000) v240(0x1)
0x248: v248(0x4) = CONST 
0x24a: v24a = CALLDATALOAD v248(0x4)
0x24b: v24b = AND v24a v247(0xffffffffffffffffffffffffffffffffffffffff)
0x24c: v24c(0x5eb) = CONST 
0x24f: JUMP v24c(0x5eb)
----------------------------------

Begin block 0x262
prev = {}, next = {'0x26d', '0x269'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x262
0x263: v263 = CALLVALUE 
0x264: v264 = ISZERO v263
0x265: v265(0x26d) = CONST 
0x268: JUMPI v265(0x26d) v264
----------------------------------

Begin block 0x269
prev = {'0x262'}, next = {}
----------------------------------
Block 0x269
0x269: v269(0x0) = CONST 
0x26c: REVERT v269(0x0) v269(0x0)
----------------------------------

Begin block 0x26d
prev = {'0x262'}, next = {'0x5fd'}
----------------------------------
Block 0x26d
0x26e: v26e(0x169) = CONST 
0x271: v271(0x1) = CONST 
0x273: v273(0xa0) = CONST 
0x275: v275(0x2) = CONST 
0x277: v277(0x10000000000000000000000000000000000000000) = EXP v275(0x2) v273(0xa0)
0x278: v278(0xffffffffffffffffffffffffffffffffffffffff) = SUB v277(0x10000000000000000000000000000000000000000) v271(0x1)
0x279: v279(0x4) = CONST 
0x27b: v27b = CALLDATALOAD v279(0x4)
0x27c: v27c = AND v27b v278(0xffffffffffffffffffffffffffffffffffffffff)
0x27d: v27d(0x24) = CONST 
0x27f: v27f = CALLDATALOAD v27d(0x24)
0x280: v280(0x5fd) = CONST 
0x283: JUMP v280(0x5fd)
----------------------------------

Begin block 0x298
prev = {}, next = {'0x29f', '0x2a3'}
----------------------------------
function symbol()()
Block 0x298
0x299: v299 = CALLVALUE 
0x29a: v29a = ISZERO v299
0x29b: v29b(0x2a3) = CONST 
0x29e: JUMPI v29b(0x2a3) v29a
----------------------------------

Begin block 0x29f
prev = {'0x298'}, next = {}
----------------------------------
Block 0x29f
0x29f: v29f(0x0) = CONST 
0x2a2: REVERT v29f(0x0) v29f(0x0)
----------------------------------

Begin block 0x2a3
prev = {'0x298'}, next = {'0xcf0x298'}
----------------------------------
Block 0x2a3
0x2a4: v2a4(0xcf) = CONST 
0x2a7: v2a7(0x6da) = CONST 
0x2aa: v2aa_0, v2aa_1 = CALLPRIVATE v2a7(0x6da) v2a4(0xcf)
----------------------------------

Begin block 0x323
prev = {}, next = {'0x32e', '0x32a'}
----------------------------------
function transfer(address,uint256)()
Block 0x323
0x324: v324 = CALLVALUE 
0x325: v325 = ISZERO v324
0x326: v326(0x32e) = CONST 
0x329: JUMPI v326(0x32e) v325
----------------------------------

Begin block 0x32a
prev = {'0x323'}, next = {}
----------------------------------
Block 0x32a
0x32a: v32a(0x0) = CONST 
0x32d: REVERT v32a(0x0) v32a(0x0)
----------------------------------

Begin block 0x32e
prev = {'0x323'}, next = {'0x778'}
----------------------------------
Block 0x32e
0x32f: v32f(0x169) = CONST 
0x332: v332(0x1) = CONST 
0x334: v334(0xa0) = CONST 
0x336: v336(0x2) = CONST 
0x338: v338(0x10000000000000000000000000000000000000000) = EXP v336(0x2) v334(0xa0)
0x339: v339(0xffffffffffffffffffffffffffffffffffffffff) = SUB v338(0x10000000000000000000000000000000000000000) v332(0x1)
0x33a: v33a(0x4) = CONST 
0x33c: v33c = CALLDATALOAD v33a(0x4)
0x33d: v33d = AND v33c v339(0xffffffffffffffffffffffffffffffffffffffff)
0x33e: v33e(0x24) = CONST 
0x340: v340 = CALLDATALOAD v33e(0x24)
0x341: v341(0x778) = CONST 
0x344: JUMP v341(0x778)
----------------------------------

Begin block 0x359
prev = {}, next = {'0x364', '0x360'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x359
0x35a: v35a = CALLVALUE 
0x35b: v35b = ISZERO v35a
0x35c: v35c(0x364) = CONST 
0x35f: JUMPI v35c(0x364) v35b
----------------------------------

Begin block 0x360
prev = {'0x359'}, next = {}
----------------------------------
Block 0x360
0x360: v360(0x0) = CONST 
0x363: REVERT v360(0x0) v360(0x0)
----------------------------------

Begin block 0x364
prev = {'0x359'}, next = {'0x78f'}
----------------------------------
Block 0x364
0x365: v365(0x169) = CONST 
0x368: v368(0x4) = CONST 
0x36b: v36b = CALLDATALOAD v368(0x4)
0x36c: v36c(0x1) = CONST 
0x36e: v36e(0xa0) = CONST 
0x370: v370(0x2) = CONST 
0x372: v372(0x10000000000000000000000000000000000000000) = EXP v370(0x2) v36e(0xa0)
0x373: v373(0xffffffffffffffffffffffffffffffffffffffff) = SUB v372(0x10000000000000000000000000000000000000000) v36c(0x1)
0x374: v374 = AND v373(0xffffffffffffffffffffffffffffffffffffffff) v36b
0x376: v376(0x24) = CONST 
0x379: v379 = CALLDATALOAD v376(0x24)
0x37c: v37c(0x64) = CONST 
0x37f: v37f(0x44) = CONST 
0x381: v381 = CALLDATALOAD v37f(0x44)
0x384: v384 = ADD v381 v376(0x24)
0x387: v387 = ADD v368(0x4) v381
0x388: v388 = CALLDATALOAD v387
0x38a: v38a(0x20) = CONST 
0x38c: v38c(0x1f) = CONST 
0x38f: v38f = ADD v388 v38c(0x1f)
0x392: v392 = DIV v38f v38a(0x20)
0x394: v394 = MUL v38a(0x20) v392
0x395: v395 = ADD v394 v38a(0x20)
0x396: v396(0x40) = CONST 
0x398: v398 = MLOAD v396(0x40)
0x39b: v39b = ADD v398 v395
0x39c: v39c(0x40) = CONST 
0x39e: MSTORE v39c(0x40) v39b
0x3a1: MSTORE v398 v388
0x3a5: v3a5(0x20) = CONST 
0x3a8: v3a8 = ADD v398 v3a5(0x20)
0x3ae: CALLDATACOPY v3a8 v384 v388
0x3b3: v3b3(0x78f) = CONST 
0x3bd: JUMP v3b3(0x78f)
----------------------------------

Begin block 0x3d2
prev = {}, next = {'0x3d9', '0x3dd'}
----------------------------------
function allowance(address,address)()
Block 0x3d2
0x3d3: v3d3 = CALLVALUE 
0x3d4: v3d4 = ISZERO v3d3
0x3d5: v3d5(0x3dd) = CONST 
0x3d8: JUMPI v3d5(0x3dd) v3d4
----------------------------------

Begin block 0x3d9
prev = {'0x3d2'}, next = {}
----------------------------------
Block 0x3d9
0x3d9: v3d9(0x0) = CONST 
0x3dc: REVERT v3d9(0x0) v3d9(0x0)
----------------------------------

Begin block 0x3dd
prev = {'0x3d2'}, next = {'0x8c3'}
----------------------------------
Block 0x3dd
0x3de: v3de(0x190) = CONST 
0x3e1: v3e1(0x1) = CONST 
0x3e3: v3e3(0xa0) = CONST 
0x3e5: v3e5(0x2) = CONST 
0x3e7: v3e7(0x10000000000000000000000000000000000000000) = EXP v3e5(0x2) v3e3(0xa0)
0x3e8: v3e8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3e7(0x10000000000000000000000000000000000000000) v3e1(0x1)
0x3e9: v3e9(0x4) = CONST 
0x3eb: v3eb = CALLDATALOAD v3e9(0x4)
0x3ed: v3ed = AND v3e8(0xffffffffffffffffffffffffffffffffffffffff) v3eb
0x3ef: v3ef(0x24) = CONST 
0x3f1: v3f1 = CALLDATALOAD v3ef(0x24)
0x3f2: v3f2 = AND v3f1 v3e8(0xffffffffffffffffffffffffffffffffffffffff)
0x3f3: v3f3(0x8c3) = CONST 
0x3f6: JUMP v3f3(0x8c3)
----------------------------------

Begin block 0x409
prev = {}, next = {'0x459', '0x49f0x409'}
----------------------------------
function 0x409(v409arg0)
Block 0x409
0x40a: v40a(0x0) = CONST 
0x40d: v40d = SLOAD v40a(0x0)
0x40e: v40e(0x1) = CONST 
0x411: v411(0x1) = CONST 
0x413: v413 = AND v411(0x1) v40d
0x414: v414 = ISZERO v413
0x415: v415(0x100) = CONST 
0x418: v418 = MUL v415(0x100) v414
0x419: v419 = SUB v418 v40e(0x1)
0x41a: v41a = AND v419 v40d
0x41b: v41b(0x2) = CONST 
0x41e: v41e = DIV v41a v41b(0x2)
0x420: v420(0x1f) = CONST 
0x422: v422 = ADD v420(0x1f) v41e
0x423: v423(0x20) = CONST 
0x427: v427 = DIV v422 v423(0x20)
0x428: v428 = MUL v427 v423(0x20)
0x429: v429(0x20) = CONST 
0x42b: v42b = ADD v429(0x20) v428
0x42c: v42c(0x40) = CONST 
0x42e: v42e = MLOAD v42c(0x40)
0x431: v431 = ADD v42e v42b
0x432: v432(0x40) = CONST 
0x434: MSTORE v432(0x40) v431
0x43b: MSTORE v42e v41e
0x43c: v43c(0x20) = CONST 
0x43e: v43e = ADD v43c(0x20) v42e
0x441: v441 = SLOAD v40a(0x0)
0x442: v442(0x1) = CONST 
0x445: v445(0x1) = CONST 
0x447: v447 = AND v445(0x1) v441
0x448: v448 = ISZERO v447
0x449: v449(0x100) = CONST 
0x44c: v44c = MUL v449(0x100) v448
0x44d: v44d = SUB v44c v442(0x1)
0x44e: v44e = AND v44d v441
0x44f: v44f(0x2) = CONST 
0x452: v452 = DIV v44e v44f(0x2)
0x454: v454 = ISZERO v452
0x455: v455(0x49f) = CONST 
0x458: JUMPI v455(0x49f) v454
----------------------------------

Begin block 0x459
prev = {'0x409'}, next = {'0x461', '0x4740x409'}
----------------------------------
Block 0x459
0x45a: v45a(0x1f) = CONST 
0x45c: v45c = LT v45a(0x1f) v452
0x45d: v45d(0x474) = CONST 
0x460: JUMPI v45d(0x474) v45c
----------------------------------

Begin block 0x461
prev = {'0x459'}, next = {'0x49f0x409'}
----------------------------------
Block 0x461
0x461: v461(0x100) = CONST 
0x466: v466 = SLOAD v40a(0x0)
0x467: v467 = DIV v466 v461(0x100)
0x468: v468 = MUL v467 v461(0x100)
0x46a: MSTORE v43e v468
0x46c: v46c(0x20) = CONST 
0x46e: v46e = ADD v46c(0x20) v43e
0x470: v470(0x49f) = CONST 
0x473: JUMP v470(0x49f)
----------------------------------

Begin block 0x4740x409
prev = {'0x459'}, next = {'0x4820x409'}
----------------------------------
Block 0x4740x409
0x4760x409: v409476 = ADD v43e v452
0x4790x409: v409479(0x0) = CONST 
0x47b0x409: MSTORE v409479(0x0) v40a(0x0)
0x47c0x409: v40947c(0x20) = CONST 
0x47e0x409: v40947e(0x0) = CONST 
0x4800x409: v409480 = SHA3 v40947e(0x0) v40947c(0x20)
----------------------------------

Begin block 0x4740x6da
prev = {'0x72a'}, next = {'0x4820x6da'}
----------------------------------
Block 0x4740x6da
0x4760x6da: v6da476 = ADD v70f v723
0x4790x6da: v6da479(0x0) = CONST 
0x47b0x6da: MSTORE v6da479(0x0) v6db(0x1)
0x47c0x6da: v6da47c(0x20) = CONST 
0x47e0x6da: v6da47e(0x0) = CONST 
0x4800x6da: v6da480 = SHA3 v6da47e(0x0) v6da47c(0x20)
----------------------------------

Begin block 0x4820x409
prev = {'0x4740x409', '0x4820x409'}, next = {'0x4820x409', '0x4960x409'}
----------------------------------
Block 0x4820x409
0x4820x409_0x0: v482409_0 = PHI v43e v40948e
0x4820x409_0x1: v482409_1 = PHI v40948a v409480
0x4840x409: v409484 = SLOAD v482409_1
0x4860x409: MSTORE v482409_0 v409484
0x4880x409: v409488(0x1) = CONST 
0x48a0x409: v40948a = ADD v409488(0x1) v482409_1
0x48c0x409: v40948c(0x20) = CONST 
0x48e0x409: v40948e = ADD v40948c(0x20) v482409_0
0x4910x409: v409491 = GT v409476 v40948e
0x4920x409: v409492(0x482) = CONST 
0x4950x409: JUMPI v409492(0x482) v409491
----------------------------------

Begin block 0x4820x6da
prev = {'0x4820x6da', '0x4740x6da'}, next = {'0x4820x6da', '0x4960x6da'}
----------------------------------
Block 0x4820x6da
0x4820x6da_0x0: v4826da_0 = PHI v70f v6da48e
0x4820x6da_0x1: v4826da_1 = PHI v6da48a v6da480
0x4840x6da: v6da484 = SLOAD v4826da_1
0x4860x6da: MSTORE v4826da_0 v6da484
0x4880x6da: v6da488(0x1) = CONST 
0x48a0x6da: v6da48a = ADD v6da488(0x1) v4826da_1
0x48c0x6da: v6da48c(0x20) = CONST 
0x48e0x6da: v6da48e = ADD v6da48c(0x20) v4826da_0
0x4910x6da: v6da491 = GT v6da476 v6da48e
0x4920x6da: v6da492(0x482) = CONST 
0x4950x6da: JUMPI v6da492(0x482) v6da491
----------------------------------

Begin block 0x4960x409
prev = {'0x4820x409'}, next = {'0x49f0x409'}
----------------------------------
Block 0x4960x409
0x4980x409: v409498 = SUB v40948e v409476
0x4990x409: v409499(0x1f) = CONST 
0x49b0x409: v40949b = AND v409499(0x1f) v409498
0x49d0x409: v40949d = ADD v409476 v40949b
----------------------------------

Begin block 0x4960x6da
prev = {'0x4820x6da'}, next = {'0x49f0x6da'}
----------------------------------
Block 0x4960x6da
0x4980x6da: v6da498 = SUB v6da48e v6da476
0x4990x6da: v6da499(0x1f) = CONST 
0x49b0x6da: v6da49b = AND v6da499(0x1f) v6da498
0x49d0x6da: v6da49d = ADD v6da476 v6da49b
----------------------------------

Begin block 0x49f0x409
prev = {'0x461', '0x4960x409', '0x409'}, next = {}
----------------------------------
Block 0x49f0x409
0x4a60x409: RETURNPRIVATE v409arg0 v42e v409arg0
----------------------------------

Begin block 0x49f0x6da
prev = {'0x6da', '0x732', '0x4960x6da'}, next = {}
----------------------------------
Block 0x49f0x6da
0x4a60x6da: RETURNPRIVATE v6daarg0 v6ff v6daarg0
----------------------------------

Begin block 0x4a7
prev = {}, next = {'0x4d2'}
----------------------------------
function 0x4a7(v4a7arg0, v4a7arg1, v4a7arg2)
Block 0x4a7
0x4a8: v4a8(0x1) = CONST 
0x4aa: v4aa(0xa0) = CONST 
0x4ac: v4ac(0x2) = CONST 
0x4ae: v4ae(0x10000000000000000000000000000000000000000) = EXP v4ac(0x2) v4aa(0xa0)
0x4af: v4af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ae(0x10000000000000000000000000000000000000000) v4a8(0x1)
0x4b0: v4b0 = CALLER 
0x4b2: v4b2 = AND v4af(0xffffffffffffffffffffffffffffffffffffffff) v4b0
0x4b3: v4b3(0x0) = CONST 
0x4b7: MSTORE v4b3(0x0) v4b2
0x4b8: v4b8(0x5) = CONST 
0x4ba: v4ba(0x20) = CONST 
0x4be: MSTORE v4ba(0x20) v4b8(0x5)
0x4bf: v4bf(0x40) = CONST 
0x4c3: v4c3 = SHA3 v4b3(0x0) v4bf(0x40)
0x4c6: v4c6 = AND v4a7arg1 v4af(0xffffffffffffffffffffffffffffffffffffffff)
0x4c8: MSTORE v4b3(0x0) v4c6
0x4cb: MSTORE v4ba(0x20) v4c3
0x4cc: v4cc = SHA3 v4b3(0x0) v4bf(0x40)
0x4cf: SSTORE v4cc v4a7arg0
0x4d0: v4d0(0x1) = CONST 
----------------------------------

Begin block 0x4d2
prev = {'0x4a7'}, next = {}
----------------------------------
Block 0x4d2
0x4d7: RETURNPRIVATE v4a7arg2 v4d0(0x1)
----------------------------------

Begin block 0x4d8
prev = {'0x188'}, next = {'0x1900x17d'}
----------------------------------
Block 0x4d8
0x4d9: v4d9(0x3) = CONST 
0x4db: v4db = SLOAD v4d9(0x3)
0x4dd: JUMP v189(0x190)
----------------------------------

Begin block 0x4de
prev = {'0x1ad'}, next = {'0x50f', '0x513'}
----------------------------------
Block 0x4de
0x4df: v4df(0x1) = CONST 
0x4e1: v4e1(0xa0) = CONST 
0x4e3: v4e3(0x2) = CONST 
0x4e5: v4e5(0x10000000000000000000000000000000000000000) = EXP v4e3(0x2) v4e1(0xa0)
0x4e6: v4e6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4e5(0x10000000000000000000000000000000000000000) v4df(0x1)
0x4e9: v4e9 = AND v1bd v4e6(0xffffffffffffffffffffffffffffffffffffffff)
0x4ea: v4ea(0x0) = CONST 
0x4ee: MSTORE v4ea(0x0) v4e9
0x4ef: v4ef(0x5) = CONST 
0x4f1: v4f1(0x20) = CONST 
0x4f5: MSTORE v4f1(0x20) v4ef(0x5)
0x4f6: v4f6(0x40) = CONST 
0x4fa: v4fa = SHA3 v4ea(0x0) v4f6(0x40)
0x4fb: v4fb = CALLER 
0x4fe: v4fe = AND v4e6(0xffffffffffffffffffffffffffffffffffffffff) v4fb
0x500: MSTORE v4ea(0x0) v4fe
0x503: MSTORE v4f1(0x20) v4fa
0x506: v506 = SHA3 v4ea(0x0) v4f6(0x40)
0x507: v507 = SLOAD v506
0x509: v509 = GT v1c5 v507
0x50a: v50a = ISZERO v509
0x50b: v50b(0x513) = CONST 
0x50e: JUMPI v50b(0x513) v50a
----------------------------------

Begin block 0x50f
prev = {'0x4de'}, next = {}
----------------------------------
Block 0x50f
0x50f: v50f(0x0) = CONST 
0x512: REVERT v50f(0x0) v50f(0x0)
----------------------------------

Begin block 0x513
prev = {'0x4de'}, next = {'0x54b'}
----------------------------------
Block 0x513
0x514: v514(0x1) = CONST 
0x516: v516(0xa0) = CONST 
0x518: v518(0x2) = CONST 
0x51a: v51a(0x10000000000000000000000000000000000000000) = EXP v518(0x2) v516(0xa0)
0x51b: v51b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v51a(0x10000000000000000000000000000000000000000) v514(0x1)
0x51e: v51e = AND v1bd v51b(0xffffffffffffffffffffffffffffffffffffffff)
0x51f: v51f(0x0) = CONST 
0x523: MSTORE v51f(0x0) v51e
0x524: v524(0x5) = CONST 
0x526: v526(0x20) = CONST 
0x52a: MSTORE v526(0x20) v524(0x5)
0x52b: v52b(0x40) = CONST 
0x52f: v52f = SHA3 v51f(0x0) v52b(0x40)
0x530: v530 = CALLER 
0x533: v533 = AND v51b(0xffffffffffffffffffffffffffffffffffffffff) v530
0x535: MSTORE v51f(0x0) v533
0x538: MSTORE v526(0x20) v52f
0x539: v539 = SHA3 v51f(0x0) v52b(0x40)
0x53b: v53b = SLOAD v539
0x53e: v53e = SUB v53b v1c5
0x540: SSTORE v539 v53e
0x541: v541(0x54b) = CONST 
0x547: v547(0x8e0) = CONST 
0x54a: CALLPRIVATE v547(0x8e0) v1c5 v1c2 v1bd v541(0x54b)
----------------------------------

Begin block 0x54b
prev = {'0x513'}, next = {'0x54f'}
----------------------------------
Block 0x54b
0x54d: v54d(0x1) = CONST 
----------------------------------

Begin block 0x54f
prev = {'0x54b'}, next = {'0x1690x1a2'}
----------------------------------
Block 0x54f
0x555: JUMP v1ae(0x169)
----------------------------------

Begin block 0x556
prev = {'0x1e9'}, next = {'0x1f1'}
----------------------------------
Block 0x556
0x557: v557(0x2) = CONST 
0x559: v559 = SLOAD v557(0x2)
0x55a: v55a(0xff) = CONST 
0x55c: v55c = AND v55a(0xff) v559
0x55e: JUMP v1ea(0x1f1)
----------------------------------

Begin block 0x55f
prev = {'0x212'}, next = {'0x581', '0x585'}
----------------------------------
Block 0x55f
0x560: v560(0x1) = CONST 
0x562: v562(0xa0) = CONST 
0x564: v564(0x2) = CONST 
0x566: v566(0x10000000000000000000000000000000000000000) = EXP v564(0x2) v562(0xa0)
0x567: v567(0xffffffffffffffffffffffffffffffffffffffff) = SUB v566(0x10000000000000000000000000000000000000000) v560(0x1)
0x568: v568 = CALLER 
0x569: v569 = AND v568 v567(0xffffffffffffffffffffffffffffffffffffffff)
0x56a: v56a(0x0) = CONST 
0x56e: MSTORE v56a(0x0) v569
0x56f: v56f(0x4) = CONST 
0x571: v571(0x20) = CONST 
0x573: MSTORE v571(0x20) v56f(0x4)
0x574: v574(0x40) = CONST 
0x577: v577 = SHA3 v56a(0x0) v574(0x40)
0x578: v578 = SLOAD v577
0x57b: v57b = LT v578 v218
0x57c: v57c = ISZERO v57b
0x57d: v57d(0x585) = CONST 
0x580: JUMPI v57d(0x585) v57c
----------------------------------

Begin block 0x581
prev = {'0x55f'}, next = {}
----------------------------------
Block 0x581
0x581: v581(0x0) = CONST 
0x584: REVERT v581(0x0) v581(0x0)
----------------------------------

Begin block 0x585
prev = {'0x55f'}, next = {'0x5e6'}
----------------------------------
Block 0x585
0x586: v586(0x1) = CONST 
0x588: v588(0xa0) = CONST 
0x58a: v58a(0x2) = CONST 
0x58c: v58c(0x10000000000000000000000000000000000000000) = EXP v58a(0x2) v588(0xa0)
0x58d: v58d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v58c(0x10000000000000000000000000000000000000000) v586(0x1)
0x58e: v58e = CALLER 
0x58f: v58f = AND v58e v58d(0xffffffffffffffffffffffffffffffffffffffff)
0x590: v590(0x0) = CONST 
0x594: MSTORE v590(0x0) v58f
0x595: v595(0x4) = CONST 
0x597: v597(0x20) = CONST 
0x599: MSTORE v597(0x20) v595(0x4)
0x59a: v59a(0x40) = CONST 
0x59f: v59f = SHA3 v590(0x0) v59a(0x40)
0x5a1: v5a1 = SLOAD v59f
0x5a4: v5a4 = SUB v5a1 v218
0x5a6: SSTORE v59f v5a4
0x5a7: v5a7(0x3) = CONST 
0x5aa: v5aa = SLOAD v5a7(0x3)
0x5ad: v5ad = SUB v5aa v218
0x5af: SSTORE v5a7(0x3) v5ad
0x5b0: v5b0(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x5d4: v5d4 = MLOAD v59a(0x40)
0x5d7: MSTORE v5d4 v218
0x5d8: v5d8(0x20) = CONST 
0x5da: v5da = ADD v5d8(0x20) v5d4
0x5db: v5db(0x40) = CONST 
0x5dd: v5dd = MLOAD v5db(0x40)
0x5e0: v5e0 = SUB v5da v5dd
0x5e2: LOG2 v5dd v5e0 v5b0(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v58f
0x5e4: v5e4(0x1) = CONST 
----------------------------------

Begin block 0x5e6
prev = {'0x585'}, next = {'0x1690x207'}
----------------------------------
Block 0x5e6
0x5ea: JUMP v213(0x169)
----------------------------------

Begin block 0x5eb
prev = {'0x23c'}, next = {'0x1900x231'}
----------------------------------
Block 0x5eb
0x5ec: v5ec(0x4) = CONST 
0x5ee: v5ee(0x20) = CONST 
0x5f0: MSTORE v5ee(0x20) v5ec(0x4)
0x5f1: v5f1(0x0) = CONST 
0x5f5: MSTORE v5f1(0x0) v24b
0x5f6: v5f6(0x40) = CONST 
0x5f9: v5f9 = SHA3 v5f1(0x0) v5f6(0x40)
0x5fa: v5fa = SLOAD v5f9
0x5fc: JUMP v23d(0x190)
----------------------------------

Begin block 0x5fd
prev = {'0x26d'}, next = {'0x623', '0x61f'}
----------------------------------
Block 0x5fd
0x5fe: v5fe(0x1) = CONST 
0x600: v600(0xa0) = CONST 
0x602: v602(0x2) = CONST 
0x604: v604(0x10000000000000000000000000000000000000000) = EXP v602(0x2) v600(0xa0)
0x605: v605(0xffffffffffffffffffffffffffffffffffffffff) = SUB v604(0x10000000000000000000000000000000000000000) v5fe(0x1)
0x607: v607 = AND v27c v605(0xffffffffffffffffffffffffffffffffffffffff)
0x608: v608(0x0) = CONST 
0x60c: MSTORE v608(0x0) v607
0x60d: v60d(0x4) = CONST 
0x60f: v60f(0x20) = CONST 
0x611: MSTORE v60f(0x20) v60d(0x4)
0x612: v612(0x40) = CONST 
0x615: v615 = SHA3 v608(0x0) v612(0x40)
0x616: v616 = SLOAD v615
0x619: v619 = LT v616 v27f
0x61a: v61a = ISZERO v619
0x61b: v61b(0x623) = CONST 
0x61e: JUMPI v61b(0x623) v61a
----------------------------------

Begin block 0x61f
prev = {'0x5fd'}, next = {}
----------------------------------
Block 0x61f
0x61f: v61f(0x0) = CONST 
0x622: REVERT v61f(0x0) v61f(0x0)
----------------------------------

Begin block 0x623
prev = {'0x5fd'}, next = {'0x656', '0x652'}
----------------------------------
Block 0x623
0x624: v624(0x1) = CONST 
0x626: v626(0xa0) = CONST 
0x628: v628(0x2) = CONST 
0x62a: v62a(0x10000000000000000000000000000000000000000) = EXP v628(0x2) v626(0xa0)
0x62b: v62b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v62a(0x10000000000000000000000000000000000000000) v624(0x1)
0x62e: v62e = AND v27c v62b(0xffffffffffffffffffffffffffffffffffffffff)
0x62f: v62f(0x0) = CONST 
0x633: MSTORE v62f(0x0) v62e
0x634: v634(0x5) = CONST 
0x636: v636(0x20) = CONST 
0x63a: MSTORE v636(0x20) v634(0x5)
0x63b: v63b(0x40) = CONST 
0x63f: v63f = SHA3 v62f(0x0) v63b(0x40)
0x640: v640 = CALLER 
0x643: v643 = AND v62b(0xffffffffffffffffffffffffffffffffffffffff) v640
0x645: MSTORE v62f(0x0) v643
0x648: MSTORE v636(0x20) v63f
0x649: v649 = SHA3 v62f(0x0) v63b(0x40)
0x64a: v64a = SLOAD v649
0x64c: v64c = GT v27f v64a
0x64d: v64d = ISZERO v64c
0x64e: v64e(0x656) = CONST 
0x651: JUMPI v64e(0x656) v64d
----------------------------------

Begin block 0x652
prev = {'0x623'}, next = {}
----------------------------------
Block 0x652
0x652: v652(0x0) = CONST 
0x655: REVERT v652(0x0) v652(0x0)
----------------------------------

Begin block 0x656
prev = {'0x623'}, next = {'0x6d4'}
----------------------------------
Block 0x656
0x657: v657(0x1) = CONST 
0x659: v659(0xa0) = CONST 
0x65b: v65b(0x2) = CONST 
0x65d: v65d(0x10000000000000000000000000000000000000000) = EXP v65b(0x2) v659(0xa0)
0x65e: v65e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v65d(0x10000000000000000000000000000000000000000) v657(0x1)
0x661: v661 = AND v27c v65e(0xffffffffffffffffffffffffffffffffffffffff)
0x662: v662(0x0) = CONST 
0x666: MSTORE v662(0x0) v661
0x667: v667(0x4) = CONST 
0x669: v669(0x20) = CONST 
0x66d: MSTORE v669(0x20) v667(0x4)
0x66e: v66e(0x40) = CONST 
0x672: v672 = SHA3 v662(0x0) v66e(0x40)
0x674: v674 = SLOAD v672
0x677: v677 = SUB v674 v27f
0x679: SSTORE v672 v677
0x67a: v67a(0x5) = CONST 
0x67d: MSTORE v669(0x20) v67a(0x5)
0x680: v680 = SHA3 v662(0x0) v66e(0x40)
0x681: v681 = CALLER 
0x684: v684 = AND v65e(0xffffffffffffffffffffffffffffffffffffffff) v681
0x686: MSTORE v662(0x0) v684
0x689: MSTORE v669(0x20) v680
0x68c: v68c = SHA3 v662(0x0) v66e(0x40)
0x68e: v68e = SLOAD v68c
0x691: v691 = SUB v68e v27f
0x693: SSTORE v68c v691
0x694: v694(0x3) = CONST 
0x697: v697 = SLOAD v694(0x3)
0x69a: v69a = SUB v697 v27f
0x69c: SSTORE v694(0x3) v69a
0x69e: v69e(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x6c2: v6c2 = MLOAD v66e(0x40)
0x6c5: MSTORE v6c2 v27f
0x6c6: v6c6(0x20) = CONST 
0x6c8: v6c8 = ADD v6c6(0x20) v6c2
0x6c9: v6c9(0x40) = CONST 
0x6cb: v6cb = MLOAD v6c9(0x40)
0x6ce: v6ce = SUB v6c8 v6cb
0x6d0: LOG2 v6cb v6ce v69e(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v661
0x6d2: v6d2(0x1) = CONST 
----------------------------------

Begin block 0x6d4
prev = {'0x656'}, next = {'0x1690x262'}
----------------------------------
Block 0x6d4
0x6d9: JUMP v26e(0x169)
----------------------------------

Begin block 0x6da
prev = {}, next = {'0x72a', '0x49f0x6da'}
----------------------------------
function 0x6da(v6daarg0)
Block 0x6da
0x6db: v6db(0x1) = CONST 
0x6de: v6de = SLOAD v6db(0x1)
0x6df: v6df(0x1) = CONST 
0x6e2: v6e2(0x1) = CONST 
0x6e4: v6e4 = AND v6e2(0x1) v6de
0x6e5: v6e5 = ISZERO v6e4
0x6e6: v6e6(0x100) = CONST 
0x6e9: v6e9 = MUL v6e6(0x100) v6e5
0x6ea: v6ea = SUB v6e9 v6df(0x1)
0x6eb: v6eb = AND v6ea v6de
0x6ec: v6ec(0x2) = CONST 
0x6ef: v6ef = DIV v6eb v6ec(0x2)
0x6f1: v6f1(0x1f) = CONST 
0x6f3: v6f3 = ADD v6f1(0x1f) v6ef
0x6f4: v6f4(0x20) = CONST 
0x6f8: v6f8 = DIV v6f3 v6f4(0x20)
0x6f9: v6f9 = MUL v6f8 v6f4(0x20)
0x6fa: v6fa(0x20) = CONST 
0x6fc: v6fc = ADD v6fa(0x20) v6f9
0x6fd: v6fd(0x40) = CONST 
0x6ff: v6ff = MLOAD v6fd(0x40)
0x702: v702 = ADD v6ff v6fc
0x703: v703(0x40) = CONST 
0x705: MSTORE v703(0x40) v702
0x70c: MSTORE v6ff v6ef
0x70d: v70d(0x20) = CONST 
0x70f: v70f = ADD v70d(0x20) v6ff
0x712: v712 = SLOAD v6db(0x1)
0x713: v713(0x1) = CONST 
0x716: v716(0x1) = CONST 
0x718: v718 = AND v716(0x1) v712
0x719: v719 = ISZERO v718
0x71a: v71a(0x100) = CONST 
0x71d: v71d = MUL v71a(0x100) v719
0x71e: v71e = SUB v71d v713(0x1)
0x71f: v71f = AND v71e v712
0x720: v720(0x2) = CONST 
0x723: v723 = DIV v71f v720(0x2)
0x725: v725 = ISZERO v723
0x726: v726(0x49f) = CONST 
0x729: JUMPI v726(0x49f) v725
----------------------------------

Begin block 0x72a
prev = {'0x6da'}, next = {'0x4740x6da', '0x732'}
----------------------------------
Block 0x72a
0x72b: v72b(0x1f) = CONST 
0x72d: v72d = LT v72b(0x1f) v723
0x72e: v72e(0x474) = CONST 
0x731: JUMPI v72e(0x474) v72d
----------------------------------

Begin block 0x732
prev = {'0x72a'}, next = {'0x49f0x6da'}
----------------------------------
Block 0x732
0x732: v732(0x100) = CONST 
0x737: v737 = SLOAD v6db(0x1)
0x738: v738 = DIV v737 v732(0x100)
0x739: v739 = MUL v738 v732(0x100)
0x73b: MSTORE v70f v739
0x73d: v73d(0x20) = CONST 
0x73f: v73f = ADD v73d(0x20) v70f
0x741: v741(0x49f) = CONST 
0x744: JUMP v741(0x49f)
----------------------------------

Begin block 0x778
prev = {'0x32e'}, next = {'0x785'}
----------------------------------
Block 0x778
0x779: v779(0x0) = CONST 
0x77b: v77b(0x785) = CONST 
0x77e: v77e = CALLER 
0x781: v781(0x8e0) = CONST 
0x784: CALLPRIVATE v781(0x8e0) v340 v33d v77e v77b(0x785)
----------------------------------

Begin block 0x785
prev = {'0x778'}, next = {'0x789'}
----------------------------------
Block 0x785
0x787: v787(0x1) = CONST 
----------------------------------

Begin block 0x789
prev = {'0x785'}, next = {'0x1690x323'}
----------------------------------
Block 0x789
0x78e: JUMP v32f(0x169)
----------------------------------

Begin block 0x78f
prev = {'0x364'}, next = {'0x79c'}
----------------------------------
Block 0x78f
0x790: v790(0x0) = CONST 
0x793: v793(0x79c) = CONST 
0x798: v798(0x4a7) = CONST 
0x79b: v79b_0 = CALLPRIVATE v798(0x4a7) v379 v374 v793(0x79c)
----------------------------------

Begin block 0x79c
prev = {'0x78f'}, next = {'0x8ba', '0x7a2'}
----------------------------------
Block 0x79c
0x79d: v79d = ISZERO v79b_0
0x79e: v79e(0x8ba) = CONST 
0x7a1: JUMPI v79e(0x8ba) v79d
----------------------------------

Begin block 0x7a2
prev = {'0x79c'}, next = {'0x83a'}
----------------------------------
Block 0x7a2
0x7a3: v7a3(0x1) = CONST 
0x7a5: v7a5(0xa0) = CONST 
0x7a7: v7a7(0x2) = CONST 
0x7a9: v7a9(0x10000000000000000000000000000000000000000) = EXP v7a7(0x2) v7a5(0xa0)
0x7aa: v7aa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7a9(0x10000000000000000000000000000000000000000) v7a3(0x1)
0x7ab: v7ab = AND v7aa(0xffffffffffffffffffffffffffffffffffffffff) v374
0x7ac: v7ac(0x8f4ffcb1) = CONST 
0x7b1: v7b1 = CALLER 
0x7b3: v7b3 = ADDRESS 
0x7b5: v7b5(0x40) = CONST 
0x7b7: v7b7 = MLOAD v7b5(0x40)
0x7b9: v7b9(0xffffffff) = CONST 
0x7be: v7be(0x8f4ffcb1) = AND v7b9(0xffffffff) v7ac(0x8f4ffcb1)
0x7bf: v7bf(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x7dd: v7dd(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v7bf(0x100000000000000000000000000000000000000000000000000000000) v7be(0x8f4ffcb1)
0x7df: MSTORE v7b7 v7dd(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x7e0: v7e0(0x4) = CONST 
0x7e2: v7e2 = ADD v7e0(0x4) v7b7
0x7e5: v7e5(0x1) = CONST 
0x7e7: v7e7(0xa0) = CONST 
0x7e9: v7e9(0x2) = CONST 
0x7eb: v7eb(0x10000000000000000000000000000000000000000) = EXP v7e9(0x2) v7e7(0xa0)
0x7ec: v7ec(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7eb(0x10000000000000000000000000000000000000000) v7e5(0x1)
0x7ed: v7ed = AND v7ec(0xffffffffffffffffffffffffffffffffffffffff) v7b1
0x7ee: v7ee(0x1) = CONST 
0x7f0: v7f0(0xa0) = CONST 
0x7f2: v7f2(0x2) = CONST 
0x7f4: v7f4(0x10000000000000000000000000000000000000000) = EXP v7f2(0x2) v7f0(0xa0)
0x7f5: v7f5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7f4(0x10000000000000000000000000000000000000000) v7ee(0x1)
0x7f6: v7f6 = AND v7f5(0xffffffffffffffffffffffffffffffffffffffff) v7ed
0x7f8: MSTORE v7e2 v7f6
0x7f9: v7f9(0x20) = CONST 
0x7fb: v7fb = ADD v7f9(0x20) v7e2
0x7fe: MSTORE v7fb v379
0x7ff: v7ff(0x20) = CONST 
0x801: v801 = ADD v7ff(0x20) v7fb
0x803: v803(0x1) = CONST 
0x805: v805(0xa0) = CONST 
0x807: v807(0x2) = CONST 
0x809: v809(0x10000000000000000000000000000000000000000) = EXP v807(0x2) v805(0xa0)
0x80a: v80a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v809(0x10000000000000000000000000000000000000000) v803(0x1)
0x80b: v80b = AND v80a(0xffffffffffffffffffffffffffffffffffffffff) v7b3
0x80c: v80c(0x1) = CONST 
0x80e: v80e(0xa0) = CONST 
0x810: v810(0x2) = CONST 
0x812: v812(0x10000000000000000000000000000000000000000) = EXP v810(0x2) v80e(0xa0)
0x813: v813(0xffffffffffffffffffffffffffffffffffffffff) = SUB v812(0x10000000000000000000000000000000000000000) v80c(0x1)
0x814: v814 = AND v813(0xffffffffffffffffffffffffffffffffffffffff) v80b
0x816: MSTORE v801 v814
0x817: v817(0x20) = CONST 
0x819: v819 = ADD v817(0x20) v801
0x81b: v81b(0x20) = CONST 
0x81d: v81d = ADD v81b(0x20) v819
0x820: v820 = SUB v81d v7e2
0x822: MSTORE v819 v820
0x826: v826 = MLOAD v398
0x828: MSTORE v81d v826
0x829: v829(0x20) = CONST 
0x82b: v82b = ADD v829(0x20) v81d
0x82f: v82f = MLOAD v398
0x831: v831(0x20) = CONST 
0x833: v833 = ADD v831(0x20) v398
0x838: v838(0x0) = CONST 
----------------------------------

Begin block 0x83a
prev = {'0x84b', '0x7a2'}, next = {'0x853', '0x843'}
----------------------------------
Block 0x83a
0x83a_0x0: v83a_0 = PHI v838(0x0) v84e
0x83d: v83d = LT v83a_0 v82f
0x83e: v83e = ISZERO v83d
0x83f: v83f(0x853) = CONST 
0x842: JUMPI v83f(0x853) v83e
----------------------------------

Begin block 0x843
prev = {'0x83a'}, next = {'0x84b'}
----------------------------------
Block 0x843
0x843_0x0: v843_0 = PHI v838(0x0) v84e
0x845: v845 = ADD v833 v843_0
0x846: v846 = MLOAD v845
0x849: v849 = ADD v82b v843_0
0x84a: MSTORE v849 v846
----------------------------------

Begin block 0x84b
prev = {'0x843'}, next = {'0x83a'}
----------------------------------
Block 0x84b
0x84b_0x0: v84b_0 = PHI v838(0x0) v84e
0x84c: v84c(0x20) = CONST 
0x84e: v84e = ADD v84c(0x20) v84b_0
0x84f: v84f(0x83a) = CONST 
0x852: JUMP v84f(0x83a)
----------------------------------

Begin block 0x853
prev = {'0x83a'}, next = {'0x880', '0x867'}
----------------------------------
Block 0x853
0x85c: v85c = ADD v82f v82b
0x85e: v85e(0x1f) = CONST 
0x860: v860 = AND v85e(0x1f) v82f
0x862: v862 = ISZERO v860
0x863: v863(0x880) = CONST 
0x866: JUMPI v863(0x880) v862
----------------------------------

Begin block 0x867
prev = {'0x853'}, next = {'0x880'}
----------------------------------
Block 0x867
0x869: v869 = SUB v85c v860
0x86b: v86b = MLOAD v869
0x86c: v86c(0x1) = CONST 
0x86f: v86f(0x20) = CONST 
0x871: v871 = SUB v86f(0x20) v860
0x872: v872(0x100) = CONST 
0x875: v875 = EXP v872(0x100) v871
0x876: v876 = SUB v875 v86c(0x1)
0x877: v877 = NOT v876
0x878: v878 = AND v877 v86b
0x87a: MSTORE v869 v878
0x87b: v87b(0x20) = CONST 
0x87d: v87d = ADD v87b(0x20) v869
----------------------------------

Begin block 0x880
prev = {'0x853', '0x867'}, next = {'0x8a1', '0x89d'}
----------------------------------
Block 0x880
0x880_0x1: v880_1 = PHI v85c v87d
0x889: v889(0x0) = CONST 
0x88b: v88b(0x40) = CONST 
0x88d: v88d = MLOAD v88b(0x40)
0x890: v890 = SUB v880_1 v88d
0x892: v892(0x0) = CONST 
0x896: v896 = EXTCODESIZE v7ab
0x897: v897 = ISZERO v896
0x898: v898 = ISZERO v897
0x899: v899(0x8a1) = CONST 
0x89c: JUMPI v899(0x8a1) v898
----------------------------------

Begin block 0x89d
prev = {'0x880'}, next = {}
----------------------------------
Block 0x89d
0x89d: v89d(0x0) = CONST 
0x8a0: REVERT v89d(0x0) v89d(0x0)
----------------------------------

Begin block 0x8a1
prev = {'0x880'}, next = {'0x8ae', '0x8b2'}
----------------------------------
Block 0x8a1
0x8a2: v8a2(0x2c6) = CONST 
0x8a5: v8a5 = GAS 
0x8a6: v8a6 = SUB v8a5 v8a2(0x2c6)
0x8a7: v8a7 = CALL v8a6 v7ab v892(0x0) v88d v890 v88d v889(0x0)
0x8a8: v8a8 = ISZERO v8a7
0x8a9: v8a9 = ISZERO v8a8
0x8aa: v8aa(0x8b2) = CONST 
0x8ad: JUMPI v8aa(0x8b2) v8a9
----------------------------------

Begin block 0x8ae
prev = {'0x8a1'}, next = {}
----------------------------------
Block 0x8ae
0x8ae: v8ae(0x0) = CONST 
0x8b1: REVERT v8ae(0x0) v8ae(0x0)
----------------------------------

Begin block 0x8b2
prev = {'0x8a1'}, next = {'0x8ba'}
----------------------------------
Block 0x8b2
0x8b6: v8b6(0x1) = CONST 
----------------------------------

Begin block 0x8ba
prev = {'0x8b2', '0x79c'}, next = {'0x8bb'}
----------------------------------
Block 0x8ba
----------------------------------

Begin block 0x8bb
prev = {'0x8ba'}, next = {'0x1690x359'}
----------------------------------
Block 0x8bb
0x8c2: JUMP v365(0x169)
----------------------------------

Begin block 0x8c3
prev = {'0x3dd'}, next = {'0x1900x3d2'}
----------------------------------
Block 0x8c3
0x8c4: v8c4(0x5) = CONST 
0x8c6: v8c6(0x20) = CONST 
0x8ca: MSTORE v8c6(0x20) v8c4(0x5)
0x8cb: v8cb(0x0) = CONST 
0x8cf: MSTORE v8cb(0x0) v3ed
0x8d0: v8d0(0x40) = CONST 
0x8d4: v8d4 = SHA3 v8cb(0x0) v8d0(0x40)
0x8d7: MSTORE v8c6(0x20) v8d4
0x8da: MSTORE v8cb(0x0) v3f2
0x8dc: v8dc = SHA3 v8cb(0x0) v8d0(0x40)
0x8dd: v8dd = SLOAD v8dc
0x8df: JUMP v3de(0x190)
----------------------------------

Begin block 0x8e0
prev = {}, next = {'0x8f7', '0x8f3'}
----------------------------------
function 0x8e0(v8e0arg0, v8e0arg1, v8e0arg2, v8e0arg3)
Block 0x8e0
0x8e1: v8e1(0x0) = CONST 
0x8e3: v8e3(0x1) = CONST 
0x8e5: v8e5(0xa0) = CONST 
0x8e7: v8e7(0x2) = CONST 
0x8e9: v8e9(0x10000000000000000000000000000000000000000) = EXP v8e7(0x2) v8e5(0xa0)
0x8ea: v8ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8e9(0x10000000000000000000000000000000000000000) v8e3(0x1)
0x8ec: v8ec = AND v8e0arg1 v8ea(0xffffffffffffffffffffffffffffffffffffffff)
0x8ed: v8ed = ISZERO v8ec
0x8ee: v8ee = ISZERO v8ed
0x8ef: v8ef(0x8f7) = CONST 
0x8f2: JUMPI v8ef(0x8f7) v8ee
----------------------------------

Begin block 0x8f3
prev = {'0x8e0'}, next = {}
----------------------------------
Block 0x8f3
0x8f3: v8f3(0x0) = CONST 
0x8f6: REVERT v8f3(0x0) v8f3(0x0)
----------------------------------

Begin block 0x8f7
prev = {'0x8e0'}, next = {'0x91d', '0x919'}
----------------------------------
Block 0x8f7
0x8f8: v8f8(0x1) = CONST 
0x8fa: v8fa(0xa0) = CONST 
0x8fc: v8fc(0x2) = CONST 
0x8fe: v8fe(0x10000000000000000000000000000000000000000) = EXP v8fc(0x2) v8fa(0xa0)
0x8ff: v8ff(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8fe(0x10000000000000000000000000000000000000000) v8f8(0x1)
0x901: v901 = AND v8e0arg2 v8ff(0xffffffffffffffffffffffffffffffffffffffff)
0x902: v902(0x0) = CONST 
0x906: MSTORE v902(0x0) v901
0x907: v907(0x4) = CONST 
0x909: v909(0x20) = CONST 
0x90b: MSTORE v909(0x20) v907(0x4)
0x90c: v90c(0x40) = CONST 
0x90f: v90f = SHA3 v902(0x0) v90c(0x40)
0x910: v910 = SLOAD v90f
0x913: v913 = LT v910 v8e0arg0
0x914: v914 = ISZERO v913
0x915: v915(0x91d) = CONST 
0x918: JUMPI v915(0x91d) v914
----------------------------------

Begin block 0x919
prev = {'0x8f7'}, next = {}
----------------------------------
Block 0x919
0x919: v919(0x0) = CONST 
0x91c: REVERT v919(0x0) v919(0x0)
----------------------------------

Begin block 0x91d
prev = {'0x8f7'}, next = {'0x943', '0x93f'}
----------------------------------
Block 0x91d
0x91e: v91e(0x1) = CONST 
0x920: v920(0xa0) = CONST 
0x922: v922(0x2) = CONST 
0x924: v924(0x10000000000000000000000000000000000000000) = EXP v922(0x2) v920(0xa0)
0x925: v925(0xffffffffffffffffffffffffffffffffffffffff) = SUB v924(0x10000000000000000000000000000000000000000) v91e(0x1)
0x927: v927 = AND v8e0arg1 v925(0xffffffffffffffffffffffffffffffffffffffff)
0x928: v928(0x0) = CONST 
0x92c: MSTORE v928(0x0) v927
0x92d: v92d(0x4) = CONST 
0x92f: v92f(0x20) = CONST 
0x931: MSTORE v92f(0x20) v92d(0x4)
0x932: v932(0x40) = CONST 
0x935: v935 = SHA3 v928(0x0) v932(0x40)
0x936: v936 = SLOAD v935
0x939: v939 = ADD v936 v8e0arg0
0x93a: v93a = GT v939 v936
0x93b: v93b(0x943) = CONST 
0x93e: JUMPI v93b(0x943) v93a
----------------------------------

Begin block 0x93f
prev = {'0x91d'}, next = {}
----------------------------------
Block 0x93f
0x93f: v93f(0x0) = CONST 
0x942: REVERT v93f(0x0) v93f(0x0)
----------------------------------

Begin block 0x943
prev = {'0x91d'}, next = {'0x9df', '0x9e0'}
----------------------------------
Block 0x943
0x945: v945(0x1) = CONST 
0x947: v947(0xa0) = CONST 
0x949: v949(0x2) = CONST 
0x94b: v94b(0x10000000000000000000000000000000000000000) = EXP v949(0x2) v947(0xa0)
0x94c: v94c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v94b(0x10000000000000000000000000000000000000000) v945(0x1)
0x94f: v94f = AND v8e0arg1 v94c(0xffffffffffffffffffffffffffffffffffffffff)
0x950: v950(0x0) = CONST 
0x954: MSTORE v950(0x0) v94f
0x955: v955(0x4) = CONST 
0x957: v957(0x20) = CONST 
0x959: MSTORE v957(0x20) v955(0x4)
0x95a: v95a(0x40) = CONST 
0x95e: v95e = SHA3 v950(0x0) v95a(0x40)
0x960: v960 = SLOAD v95e
0x963: v963 = AND v8e0arg2 v94c(0xffffffffffffffffffffffffffffffffffffffff)
0x966: MSTORE v950(0x0) v963
0x969: v969 = SHA3 v950(0x0) v95a(0x40)
0x96b: v96b = SLOAD v969
0x96e: v96e = SUB v96b v8e0arg0
0x971: SSTORE v969 v96e
0x975: MSTORE v950(0x0) v94f
0x977: v977 = SLOAD v95e
0x979: v979 = ADD v8e0arg0 v977
0x97c: SSTORE v95e v979
0x980: v980 = ADD v960 v96b
0x982: v982(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x9a6: v9a6 = MLOAD v95a(0x40)
0x9a9: MSTORE v9a6 v8e0arg0
0x9aa: v9aa(0x20) = CONST 
0x9ac: v9ac = ADD v9aa(0x20) v9a6
0x9ad: v9ad(0x40) = CONST 
0x9af: v9af = MLOAD v9ad(0x40)
0x9b2: v9b2 = SUB v9ac v9af
0x9b4: LOG3 v9af v9b2 v982(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v963 v94f
0x9b5: v9b5(0x1) = CONST 
0x9b7: v9b7(0xa0) = CONST 
0x9b9: v9b9(0x2) = CONST 
0x9bb: v9bb(0x10000000000000000000000000000000000000000) = EXP v9b9(0x2) v9b7(0xa0)
0x9bc: v9bc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9bb(0x10000000000000000000000000000000000000000) v9b5(0x1)
0x9bf: v9bf = AND v8e0arg1 v9bc(0xffffffffffffffffffffffffffffffffffffffff)
0x9c0: v9c0(0x0) = CONST 
0x9c4: MSTORE v9c0(0x0) v9bf
0x9c5: v9c5(0x4) = CONST 
0x9c7: v9c7(0x20) = CONST 
0x9c9: MSTORE v9c7(0x20) v9c5(0x4)
0x9ca: v9ca(0x40) = CONST 
0x9ce: v9ce = SHA3 v9c0(0x0) v9ca(0x40)
0x9cf: v9cf = SLOAD v9ce
0x9d2: v9d2 = AND v8e0arg2 v9bc(0xffffffffffffffffffffffffffffffffffffffff)
0x9d4: MSTORE v9c0(0x0) v9d2
0x9d6: v9d6 = SHA3 v9c0(0x0) v9ca(0x40)
0x9d7: v9d7 = SLOAD v9d6
0x9d8: v9d8 = ADD v9d7 v9cf
0x9da: v9da = EQ v980 v9d8
0x9db: v9db(0x9e0) = CONST 
0x9de: JUMPI v9db(0x9e0) v9da
----------------------------------

Begin block 0x9df
prev = {'0x943'}, next = {}
----------------------------------
Block 0x9df
0x9df: THROW 
----------------------------------

Begin block 0x9e0
prev = {'0x943'}, next = {'0x9e1'}
----------------------------------
Block 0x9e0
----------------------------------

Begin block 0x9e1
prev = {'0x9e0'}, next = {}
----------------------------------
Block 0x9e1
0x9e6: RETURNPRIVATE v8e0arg3
----------------------------------

Begin block 0xa2b
prev = {'0xb'}, next = {}
----------------------------------
Block 0xa2b
0xa2c: va2c(0xbc) = CONST 
0xa2d: CALLPRIVATE va2c(0xbc)
----------------------------------

Begin block 0xa2e
prev = {'0x3e'}, next = {}
----------------------------------
Block 0xa2e
0xa2f: va2f(0x147) = CONST 
0xa30: CALLPRIVATE va2f(0x147)
----------------------------------

Begin block 0xa31
prev = {'0x49'}, next = {}
----------------------------------
Block 0xa31
0xa32: va32(0x17d) = CONST 
0xa33: CALLPRIVATE va32(0x17d)
----------------------------------

Begin block 0xa34
prev = {'0x54'}, next = {}
----------------------------------
Block 0xa34
0xa35: va35(0x1a2) = CONST 
0xa36: CALLPRIVATE va35(0x1a2)
----------------------------------

Begin block 0xa37
prev = {'0x5f'}, next = {}
----------------------------------
Block 0xa37
0xa38: va38(0x1de) = CONST 
0xa39: CALLPRIVATE va38(0x1de)
----------------------------------

Begin block 0xa3a
prev = {'0x6a'}, next = {}
----------------------------------
Block 0xa3a
0xa3b: va3b(0x207) = CONST 
0xa3c: CALLPRIVATE va3b(0x207)
----------------------------------

Begin block 0xa3d
prev = {'0x75'}, next = {}
----------------------------------
Block 0xa3d
0xa3e: va3e(0x231) = CONST 
0xa3f: CALLPRIVATE va3e(0x231)
----------------------------------

Begin block 0xa40
prev = {'0x80'}, next = {}
----------------------------------
Block 0xa40
0xa41: va41(0x262) = CONST 
0xa42: CALLPRIVATE va41(0x262)
----------------------------------

Begin block 0xa43
prev = {'0x8b'}, next = {}
----------------------------------
Block 0xa43
0xa44: va44(0x298) = CONST 
0xa45: CALLPRIVATE va44(0x298)
----------------------------------

Begin block 0xa46
prev = {'0x96'}, next = {}
----------------------------------
Block 0xa46
0xa47: va47(0x323) = CONST 
0xa48: CALLPRIVATE va47(0x323)
----------------------------------

Begin block 0xa49
prev = {'0xa1'}, next = {}
----------------------------------
Block 0xa49
0xa4a: va4a(0x359) = CONST 
0xa4b: CALLPRIVATE va4a(0x359)
----------------------------------

Begin block 0xa4c
prev = {'0xac'}, next = {}
----------------------------------
Block 0xa4c
0xa4d: va4d(0x3d2) = CONST 
0xa4e: CALLPRIVATE va4d(0x3d2)
----------------------------------
