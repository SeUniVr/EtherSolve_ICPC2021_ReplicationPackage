
Begin block 0x0
prev = {}, next = {'0xfd1', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xfb3: vfb3(0xfd1) = CONST 
0xfb4: JUMPI vfb3(0xfd1) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x41', '0xfd4'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0xfb5: vfb5(0xfd4) = CONST 
0xfb6: JUMPI vfb5(0xfd4) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x4c', '0xfd7'}
----------------------------------
Block 0x41
0x42: v42(0x18160ddd) = CONST 
0x47: v47 = EQ v42(0x18160ddd) v35
0xfb7: vfb7(0xfd7) = CONST 
0xfb8: JUMPI vfb7(0xfd7) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0xfda', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0x207f4f38) = CONST 
0x52: v52 = EQ v4d(0x207f4f38) v35
0xfb9: vfb9(0xfda) = CONST 
0xfba: JUMPI vfb9(0xfda) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0xfdd', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x313ce567) = CONST 
0x5d: v5d = EQ v58(0x313ce567) v35
0xfbb: vfbb(0xfdd) = CONST 
0xfbc: JUMPI vfbb(0xfdd) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0xfe0'}
----------------------------------
Block 0x62
0x63: v63(0x3f686170) = CONST 
0x68: v68 = EQ v63(0x3f686170) v35
0xfbd: vfbd(0xfe0) = CONST 
0xfbe: JUMPI vfbd(0xfe0) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0xfe3', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x70a08231) = CONST 
0x73: v73 = EQ v6e(0x70a08231) v35
0xfbf: vfbf(0xfe3) = CONST 
0xfc0: JUMPI vfbf(0xfe3) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0xfe6', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x76e44ed8) = CONST 
0x7e: v7e = EQ v79(0x76e44ed8) v35
0xfc1: vfc1(0xfe6) = CONST 
0xfc2: JUMPI vfc1(0xfe6) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x8e', '0xfe9'}
----------------------------------
Block 0x83
0x84: v84(0x79ba5097) = CONST 
0x89: v89 = EQ v84(0x79ba5097) v35
0xfc3: vfc3(0xfe9) = CONST 
0xfc4: JUMPI vfc3(0xfe9) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x99', '0xfec'}
----------------------------------
Block 0x8e
0x8f: v8f(0x8da5cb5b) = CONST 
0x94: v94 = EQ v8f(0x8da5cb5b) v35
0xfc5: vfc5(0xfec) = CONST 
0xfc6: JUMPI vfc5(0xfec) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xfef', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x95d89b41) = CONST 
0x9f: v9f = EQ v9a(0x95d89b41) v35
0xfc7: vfc7(0xfef) = CONST 
0xfc8: JUMPI vfc7(0xfef) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xaf', '0xff2'}
----------------------------------
Block 0xa4
0xa5: va5(0xa9059cbb) = CONST 
0xaa: vaa = EQ va5(0xa9059cbb) v35
0xfc9: vfc9(0xff2) = CONST 
0xfca: JUMPI vfc9(0xff2) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0xff5', '0xba'}
----------------------------------
Block 0xaf
0xb0: vb0(0xc8dbb686) = CONST 
0xb5: vb5 = EQ vb0(0xc8dbb686) v35
0xfcb: vfcb(0xff5) = CONST 
0xfcc: JUMPI vfcb(0xff5) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0xff8', '0xc5'}
----------------------------------
Block 0xba
0xbb: vbb(0xe724529c) = CONST 
0xc0: vc0 = EQ vbb(0xe724529c) v35
0xfcd: vfcd(0xff8) = CONST 
0xfce: JUMPI vfcd(0xff8) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0xffb', '0xfd1'}
----------------------------------
Block 0xc5
0xc6: vc6(0xf2fde38b) = CONST 
0xcb: vcb = EQ vc6(0xf2fde38b) v35
0xfcf: vfcf(0xffb) = CONST 
0xfd0: JUMPI vfcf(0xffb) vcb
----------------------------------

Begin block 0xd0
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xd0
0xd1: vd1(0x0) = CONST 
0xd4: REVERT vd1(0x0) vd1(0x0)
----------------------------------

Begin block 0xd5
prev = {}, next = {'0xdd', '0xe1'}
----------------------------------
function name()()
Block 0xd5
0xd6: vd6 = CALLVALUE 
0xd8: vd8 = ISZERO vd6
0xd9: vd9(0xe1) = CONST 
0xdc: JUMPI vd9(0xe1) vd8
----------------------------------

Begin block 0xdd
prev = {'0xd5'}, next = {}
----------------------------------
Block 0xdd
0xdd: vdd(0x0) = CONST 
0xe0: REVERT vdd(0x0) vdd(0x0)
----------------------------------

Begin block 0xe1
prev = {'0xd5'}, next = {'0x4fb'}
----------------------------------
Block 0xe1
0xe3: ve3(0xea) = CONST 
0xe6: ve6(0x4fb) = CONST 
0xe9: JUMP ve6(0x4fb)
----------------------------------

Begin block 0xea
prev = {'0x591'}, next = {'0x10f'}
----------------------------------
Block 0xea
0xeb: veb(0x40) = CONST 
0xed: ved = MLOAD veb(0x40)
0xf0: vf0(0x20) = CONST 
0xf2: vf2 = ADD vf0(0x20) ved
0xf5: vf5 = SUB vf2 ved
0xf7: MSTORE ved vf5
0xfb: vfb = MLOAD v520
0xfd: MSTORE vf2 vfb
0xfe: vfe(0x20) = CONST 
0x100: v100 = ADD vfe(0x20) vf2
0x104: v104 = MLOAD v520
0x106: v106(0x20) = CONST 
0x108: v108 = ADD v106(0x20) v520
0x10d: v10d(0x0) = CONST 
----------------------------------

Begin block 0x10f
prev = {'0x118', '0xea'}, next = {'0x118', '0x12a'}
----------------------------------
Block 0x10f
0x10f_0x0: v10f_0 = PHI v10d(0x0) v123
0x112: v112 = LT v10f_0 v104
0x113: v113 = ISZERO v112
0x114: v114(0x12a) = CONST 
0x117: JUMPI v114(0x12a) v113
----------------------------------

Begin block 0x118
prev = {'0x10f'}, next = {'0x10f'}
----------------------------------
Block 0x118
0x118_0x0: v118_0 = PHI v10d(0x0) v123
0x11a: v11a = ADD v108 v118_0
0x11b: v11b = MLOAD v11a
0x11e: v11e = ADD v100 v118_0
0x11f: MSTORE v11e v11b
0x120: v120(0x20) = CONST 
0x123: v123 = ADD v118_0 v120(0x20)
0x126: v126(0x10f) = CONST 
0x129: JUMP v126(0x10f)
----------------------------------

Begin block 0x12a
prev = {'0x10f'}, next = {'0x13e', '0x157'}
----------------------------------
Block 0x12a
0x133: v133 = ADD v104 v100
0x135: v135(0x1f) = CONST 
0x137: v137 = AND v135(0x1f) v104
0x139: v139 = ISZERO v137
0x13a: v13a(0x157) = CONST 
0x13d: JUMPI v13a(0x157) v139
----------------------------------

Begin block 0x13e
prev = {'0x12a'}, next = {'0x157'}
----------------------------------
Block 0x13e
0x140: v140 = SUB v133 v137
0x142: v142 = MLOAD v140
0x143: v143(0x1) = CONST 
0x146: v146(0x20) = CONST 
0x148: v148 = SUB v146(0x20) v137
0x149: v149(0x100) = CONST 
0x14c: v14c = EXP v149(0x100) v148
0x14d: v14d = SUB v14c v143(0x1)
0x14e: v14e = NOT v14d
0x14f: v14f = AND v14e v142
0x151: MSTORE v140 v14f
0x152: v152(0x20) = CONST 
0x154: v154 = ADD v152(0x20) v140
----------------------------------

Begin block 0x157
prev = {'0x13e', '0x12a'}, next = {}
----------------------------------
Block 0x157
0x157_0x1: v157_1 = PHI v133 v154
0x15d: v15d(0x40) = CONST 
0x15f: v15f = MLOAD v15d(0x40)
0x162: v162 = SUB v157_1 v15f
0x164: RETURN v15f v162
----------------------------------

Begin block 0x165
prev = {}, next = {'0x171', '0x16d'}
----------------------------------
function totalSupply()()
Block 0x165
0x166: v166 = CALLVALUE 
0x168: v168 = ISZERO v166
0x169: v169(0x171) = CONST 
0x16c: JUMPI v169(0x171) v168
----------------------------------

Begin block 0x16d
prev = {'0x165'}, next = {}
----------------------------------
Block 0x16d
0x16d: v16d(0x0) = CONST 
0x170: REVERT v16d(0x0) v16d(0x0)
----------------------------------

Begin block 0x171
prev = {'0x165'}, next = {'0x599'}
----------------------------------
Block 0x171
0x173: v173(0x17a) = CONST 
0x176: v176(0x599) = CONST 
0x179: JUMP v176(0x599)
----------------------------------

Begin block 0x17a
prev = {'0x599'}, next = {}
----------------------------------
Block 0x17a
0x17b: v17b(0x40) = CONST 
0x17d: v17d = MLOAD v17b(0x40)
0x181: MSTORE v17d v59c
0x182: v182(0x20) = CONST 
0x184: v184 = ADD v182(0x20) v17d
0x188: v188(0x40) = CONST 
0x18a: v18a = MLOAD v188(0x40)
0x18d: v18d = SUB v184 v18a
0x18f: RETURN v18a v18d
----------------------------------

Begin block 0x190
prev = {}, next = {'0x198', '0x19c'}
----------------------------------
function contTransfer(address,uint256)()
Block 0x190
0x191: v191 = CALLVALUE 
0x193: v193 = ISZERO v191
0x194: v194(0x19c) = CONST 
0x197: JUMPI v194(0x19c) v193
----------------------------------

Begin block 0x198
prev = {'0x190'}, next = {}
----------------------------------
Block 0x198
0x198: v198(0x0) = CONST 
0x19b: REVERT v198(0x0) v198(0x0)
----------------------------------

Begin block 0x19c
prev = {'0x190'}, next = {'0x59f'}
----------------------------------
Block 0x19c
0x19e: v19e(0x1db) = CONST 
0x1a1: v1a1(0x4) = CONST 
0x1a4: v1a4 = CALLDATASIZE 
0x1a5: v1a5 = SUB v1a4 v1a1(0x4)
0x1a7: v1a7 = ADD v1a1(0x4) v1a5
0x1ab: v1ab = CALLDATALOAD v1a1(0x4)
0x1ac: v1ac(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1c1: v1c1 = AND v1ac(0xffffffffffffffffffffffffffffffffffffffff) v1ab
0x1c3: v1c3(0x20) = CONST 
0x1c5: v1c5(0x24) = ADD v1c3(0x20) v1a1(0x4)
0x1cb: v1cb = CALLDATALOAD v1c5(0x24)
0x1cd: v1cd(0x20) = CONST 
0x1cf: v1cf(0x44) = ADD v1cd(0x20) v1c5(0x24)
0x1d7: v1d7(0x59f) = CONST 
0x1da: JUMP v1d7(0x59f)
----------------------------------

Begin block 0x1db
prev = {'0x606'}, next = {}
----------------------------------
Block 0x1db
0x1dc: STOP 
----------------------------------

Begin block 0x1dd
prev = {}, next = {'0x1e5', '0x1e9'}
----------------------------------
function decimals()()
Block 0x1dd
0x1de: v1de = CALLVALUE 
0x1e0: v1e0 = ISZERO v1de
0x1e1: v1e1(0x1e9) = CONST 
0x1e4: JUMPI v1e1(0x1e9) v1e0
----------------------------------

Begin block 0x1e5
prev = {'0x1dd'}, next = {}
----------------------------------
Block 0x1e5
0x1e5: v1e5(0x0) = CONST 
0x1e8: REVERT v1e5(0x0) v1e5(0x0)
----------------------------------

Begin block 0x1e9
prev = {'0x1dd'}, next = {'0x60a'}
----------------------------------
Block 0x1e9
0x1eb: v1eb(0x1f2) = CONST 
0x1ee: v1ee(0x60a) = CONST 
0x1f1: JUMP v1ee(0x60a)
----------------------------------

Begin block 0x1f2
prev = {'0x60a'}, next = {}
----------------------------------
Block 0x1f2
0x1f3: v1f3(0x40) = CONST 
0x1f5: v1f5 = MLOAD v1f3(0x40)
0x1f8: v1f8(0xff) = CONST 
0x1fa: v1fa = AND v1f8(0xff) v61a
0x1fb: v1fb(0xff) = CONST 
0x1fd: v1fd = AND v1fb(0xff) v1fa
0x1ff: MSTORE v1f5 v1fd
0x200: v200(0x20) = CONST 
0x202: v202 = ADD v200(0x20) v1f5
0x206: v206(0x40) = CONST 
0x208: v208 = MLOAD v206(0x40)
0x20b: v20b = SUB v202 v208
0x20d: RETURN v208 v20b
----------------------------------

Begin block 0x20e
prev = {}, next = {'0x21a', '0x216'}
----------------------------------
function freezeAll(bool)()
Block 0x20e
0x20f: v20f = CALLVALUE 
0x211: v211 = ISZERO v20f
0x212: v212(0x21a) = CONST 
0x215: JUMPI v212(0x21a) v211
----------------------------------

Begin block 0x216
prev = {'0x20e'}, next = {}
----------------------------------
Block 0x216
0x216: v216(0x0) = CONST 
0x219: REVERT v216(0x0) v216(0x0)
----------------------------------

Begin block 0x21a
prev = {'0x20e'}, next = {'0x61d'}
----------------------------------
Block 0x21a
0x21c: v21c(0x23b) = CONST 
0x21f: v21f(0x4) = CONST 
0x222: v222 = CALLDATASIZE 
0x223: v223 = SUB v222 v21f(0x4)
0x225: v225 = ADD v21f(0x4) v223
0x229: v229 = CALLDATALOAD v21f(0x4)
0x22a: v22a = ISZERO v229
0x22b: v22b = ISZERO v22a
0x22d: v22d(0x20) = CONST 
0x22f: v22f(0x24) = ADD v22d(0x20) v21f(0x4)
0x237: v237(0x61d) = CONST 
0x23a: JUMP v237(0x61d)
----------------------------------

Begin block 0x23b
prev = {'0x679'}, next = {}
----------------------------------
Block 0x23b
0x23c: STOP 
----------------------------------

Begin block 0x23d
prev = {}, next = {'0x249', '0x245'}
----------------------------------
function balanceOf(address)()
Block 0x23d
0x23e: v23e = CALLVALUE 
0x240: v240 = ISZERO v23e
0x241: v241(0x249) = CONST 
0x244: JUMPI v241(0x249) v240
----------------------------------

Begin block 0x245
prev = {'0x23d'}, next = {}
----------------------------------
Block 0x245
0x245: v245(0x0) = CONST 
0x248: REVERT v245(0x0) v245(0x0)
----------------------------------

Begin block 0x249
prev = {'0x23d'}, next = {'0x696'}
----------------------------------
Block 0x249
0x24b: v24b(0x27e) = CONST 
0x24e: v24e(0x4) = CONST 
0x251: v251 = CALLDATASIZE 
0x252: v252 = SUB v251 v24e(0x4)
0x254: v254 = ADD v24e(0x4) v252
0x258: v258 = CALLDATALOAD v24e(0x4)
0x259: v259(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x26e: v26e = AND v259(0xffffffffffffffffffffffffffffffffffffffff) v258
0x270: v270(0x20) = CONST 
0x272: v272(0x24) = ADD v270(0x20) v24e(0x4)
0x27a: v27a(0x696) = CONST 
0x27d: JUMP v27a(0x696)
----------------------------------

Begin block 0x27e
prev = {'0x696'}, next = {}
----------------------------------
Block 0x27e
0x27f: v27f(0x40) = CONST 
0x281: v281 = MLOAD v27f(0x40)
0x285: MSTORE v281 v6ab
0x286: v286(0x20) = CONST 
0x288: v288 = ADD v286(0x20) v281
0x28c: v28c(0x40) = CONST 
0x28e: v28e = MLOAD v28c(0x40)
0x291: v291 = SUB v288 v28e
0x293: RETURN v28e v291
----------------------------------

Begin block 0x294
prev = {}, next = {'0x2a0', '0x29c'}
----------------------------------
function lockAll()()
Block 0x294
0x295: v295 = CALLVALUE 
0x297: v297 = ISZERO v295
0x298: v298(0x2a0) = CONST 
0x29b: JUMPI v298(0x2a0) v297
----------------------------------

Begin block 0x29c
prev = {'0x294'}, next = {}
----------------------------------
Block 0x29c
0x29c: v29c(0x0) = CONST 
0x29f: REVERT v29c(0x0) v29c(0x0)
----------------------------------

Begin block 0x2a0
prev = {'0x294'}, next = {'0x6ae'}
----------------------------------
Block 0x2a0
0x2a2: v2a2(0x2a9) = CONST 
0x2a5: v2a5(0x6ae) = CONST 
0x2a8: JUMP v2a5(0x6ae)
----------------------------------

Begin block 0x2a9
prev = {'0x6ae'}, next = {}
----------------------------------
Block 0x2a9
0x2aa: v2aa(0x40) = CONST 
0x2ac: v2ac = MLOAD v2aa(0x40)
0x2af: v2af = ISZERO v6be
0x2b0: v2b0 = ISZERO v2af
0x2b1: v2b1 = ISZERO v2b0
0x2b2: v2b2 = ISZERO v2b1
0x2b4: MSTORE v2ac v2b2
0x2b5: v2b5(0x20) = CONST 
0x2b7: v2b7 = ADD v2b5(0x20) v2ac
0x2bb: v2bb(0x40) = CONST 
0x2bd: v2bd = MLOAD v2bb(0x40)
0x2c0: v2c0 = SUB v2b7 v2bd
0x2c2: RETURN v2bd v2c0
----------------------------------

Begin block 0x2c3
prev = {}, next = {'0x2cb', '0x2cf'}
----------------------------------
function acceptOwnership()()
Block 0x2c3
0x2c4: v2c4 = CALLVALUE 
0x2c6: v2c6 = ISZERO v2c4
0x2c7: v2c7(0x2cf) = CONST 
0x2ca: JUMPI v2c7(0x2cf) v2c6
----------------------------------

Begin block 0x2cb
prev = {'0x2c3'}, next = {}
----------------------------------
Block 0x2cb
0x2cb: v2cb(0x0) = CONST 
0x2ce: REVERT v2cb(0x0) v2cb(0x0)
----------------------------------

Begin block 0x2cf
prev = {'0x2c3'}, next = {'0x6c1'}
----------------------------------
Block 0x2cf
0x2d1: v2d1(0x2d8) = CONST 
0x2d4: v2d4(0x6c1) = CONST 
0x2d7: JUMP v2d4(0x6c1)
----------------------------------

Begin block 0x2d8
prev = {'0x762'}, next = {}
----------------------------------
Block 0x2d8
0x2d9: STOP 
----------------------------------

Begin block 0x2da
prev = {}, next = {'0x2e2', '0x2e6'}
----------------------------------
function owner()()
Block 0x2da
0x2db: v2db = CALLVALUE 
0x2dd: v2dd = ISZERO v2db
0x2de: v2de(0x2e6) = CONST 
0x2e1: JUMPI v2de(0x2e6) v2dd
----------------------------------

Begin block 0x2e2
prev = {'0x2da'}, next = {}
----------------------------------
Block 0x2e2
0x2e2: v2e2(0x0) = CONST 
0x2e5: REVERT v2e2(0x0) v2e2(0x0)
----------------------------------

Begin block 0x2e6
prev = {'0x2da'}, next = {'0x8e4'}
----------------------------------
Block 0x2e6
0x2e8: v2e8(0x2ef) = CONST 
0x2eb: v2eb(0x8e4) = CONST 
0x2ee: JUMP v2eb(0x8e4)
----------------------------------

Begin block 0x2ef
prev = {'0x8e4'}, next = {}
----------------------------------
Block 0x2ef
0x2f0: v2f0(0x40) = CONST 
0x2f2: v2f2 = MLOAD v2f0(0x40)
0x2f5: v2f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x30a: v30a = AND v2f5(0xffffffffffffffffffffffffffffffffffffffff) v907
0x30b: v30b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x320: v320 = AND v30b(0xffffffffffffffffffffffffffffffffffffffff) v30a
0x322: MSTORE v2f2 v320
0x323: v323(0x20) = CONST 
0x325: v325 = ADD v323(0x20) v2f2
0x329: v329(0x40) = CONST 
0x32b: v32b = MLOAD v329(0x40)
0x32e: v32e = SUB v325 v32b
0x330: RETURN v32b v32e
----------------------------------

Begin block 0x331
prev = {}, next = {'0x33d', '0x339'}
----------------------------------
function symbol()()
Block 0x331
0x332: v332 = CALLVALUE 
0x334: v334 = ISZERO v332
0x335: v335(0x33d) = CONST 
0x338: JUMPI v335(0x33d) v334
----------------------------------

Begin block 0x339
prev = {'0x331'}, next = {}
----------------------------------
Block 0x339
0x339: v339(0x0) = CONST 
0x33c: REVERT v339(0x0) v339(0x0)
----------------------------------

Begin block 0x33d
prev = {'0x331'}, next = {'0x90a'}
----------------------------------
Block 0x33d
0x33f: v33f(0x346) = CONST 
0x342: v342(0x90a) = CONST 
0x345: JUMP v342(0x90a)
----------------------------------

Begin block 0x346
prev = {'0x9a0'}, next = {'0x36b'}
----------------------------------
Block 0x346
0x347: v347(0x40) = CONST 
0x349: v349 = MLOAD v347(0x40)
0x34c: v34c(0x20) = CONST 
0x34e: v34e = ADD v34c(0x20) v349
0x351: v351 = SUB v34e v349
0x353: MSTORE v349 v351
0x357: v357 = MLOAD v92f
0x359: MSTORE v34e v357
0x35a: v35a(0x20) = CONST 
0x35c: v35c = ADD v35a(0x20) v34e
0x360: v360 = MLOAD v92f
0x362: v362(0x20) = CONST 
0x364: v364 = ADD v362(0x20) v92f
0x369: v369(0x0) = CONST 
----------------------------------

Begin block 0x36b
prev = {'0x374', '0x346'}, next = {'0x374', '0x386'}
----------------------------------
Block 0x36b
0x36b_0x0: v36b_0 = PHI v369(0x0) v37f
0x36e: v36e = LT v36b_0 v360
0x36f: v36f = ISZERO v36e
0x370: v370(0x386) = CONST 
0x373: JUMPI v370(0x386) v36f
----------------------------------

Begin block 0x374
prev = {'0x36b'}, next = {'0x36b'}
----------------------------------
Block 0x374
0x374_0x0: v374_0 = PHI v369(0x0) v37f
0x376: v376 = ADD v364 v374_0
0x377: v377 = MLOAD v376
0x37a: v37a = ADD v35c v374_0
0x37b: MSTORE v37a v377
0x37c: v37c(0x20) = CONST 
0x37f: v37f = ADD v374_0 v37c(0x20)
0x382: v382(0x36b) = CONST 
0x385: JUMP v382(0x36b)
----------------------------------

Begin block 0x386
prev = {'0x36b'}, next = {'0x3b3', '0x39a'}
----------------------------------
Block 0x386
0x38f: v38f = ADD v360 v35c
0x391: v391(0x1f) = CONST 
0x393: v393 = AND v391(0x1f) v360
0x395: v395 = ISZERO v393
0x396: v396(0x3b3) = CONST 
0x399: JUMPI v396(0x3b3) v395
----------------------------------

Begin block 0x39a
prev = {'0x386'}, next = {'0x3b3'}
----------------------------------
Block 0x39a
0x39c: v39c = SUB v38f v393
0x39e: v39e = MLOAD v39c
0x39f: v39f(0x1) = CONST 
0x3a2: v3a2(0x20) = CONST 
0x3a4: v3a4 = SUB v3a2(0x20) v393
0x3a5: v3a5(0x100) = CONST 
0x3a8: v3a8 = EXP v3a5(0x100) v3a4
0x3a9: v3a9 = SUB v3a8 v39f(0x1)
0x3aa: v3aa = NOT v3a9
0x3ab: v3ab = AND v3aa v39e
0x3ad: MSTORE v39c v3ab
0x3ae: v3ae(0x20) = CONST 
0x3b0: v3b0 = ADD v3ae(0x20) v39c
----------------------------------

Begin block 0x3b3
prev = {'0x39a', '0x386'}, next = {}
----------------------------------
Block 0x3b3
0x3b3_0x1: v3b3_1 = PHI v38f v3b0
0x3b9: v3b9(0x40) = CONST 
0x3bb: v3bb = MLOAD v3b9(0x40)
0x3be: v3be = SUB v3b3_1 v3bb
0x3c0: RETURN v3bb v3be
----------------------------------

Begin block 0x3c1
prev = {}, next = {'0x3c9', '0x3cd'}
----------------------------------
function transfer(address,uint256)()
Block 0x3c1
0x3c2: v3c2 = CALLVALUE 
0x3c4: v3c4 = ISZERO v3c2
0x3c5: v3c5(0x3cd) = CONST 
0x3c8: JUMPI v3c5(0x3cd) v3c4
----------------------------------

Begin block 0x3c9
prev = {'0x3c1'}, next = {}
----------------------------------
Block 0x3c9
0x3c9: v3c9(0x0) = CONST 
0x3cc: REVERT v3c9(0x0) v3c9(0x0)
----------------------------------

Begin block 0x3cd
prev = {'0x3c1'}, next = {'0x9a8'}
----------------------------------
Block 0x3cd
0x3cf: v3cf(0x40c) = CONST 
0x3d2: v3d2(0x4) = CONST 
0x3d5: v3d5 = CALLDATASIZE 
0x3d6: v3d6 = SUB v3d5 v3d2(0x4)
0x3d8: v3d8 = ADD v3d2(0x4) v3d6
0x3dc: v3dc = CALLDATALOAD v3d2(0x4)
0x3dd: v3dd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3f2: v3f2 = AND v3dd(0xffffffffffffffffffffffffffffffffffffffff) v3dc
0x3f4: v3f4(0x20) = CONST 
0x3f6: v3f6(0x24) = ADD v3f4(0x20) v3d2(0x4)
0x3fc: v3fc = CALLDATALOAD v3f6(0x24)
0x3fe: v3fe(0x20) = CONST 
0x400: v400(0x44) = ADD v3fe(0x20) v3f6(0x24)
0x408: v408(0x9a8) = CONST 
0x40b: JUMP v408(0x9a8)
----------------------------------

Begin block 0x40c
prev = {'0x9b3'}, next = {}
----------------------------------
Block 0x40c
0x40d: STOP 
----------------------------------

Begin block 0x40e
prev = {}, next = {'0x41a', '0x416'}
----------------------------------
function frozens(address)()
Block 0x40e
0x40f: v40f = CALLVALUE 
0x411: v411 = ISZERO v40f
0x412: v412(0x41a) = CONST 
0x415: JUMPI v412(0x41a) v411
----------------------------------

Begin block 0x416
prev = {'0x40e'}, next = {}
----------------------------------
Block 0x416
0x416: v416(0x0) = CONST 
0x419: REVERT v416(0x0) v416(0x0)
----------------------------------

Begin block 0x41a
prev = {'0x40e'}, next = {'0x9b7'}
----------------------------------
Block 0x41a
0x41c: v41c(0x44f) = CONST 
0x41f: v41f(0x4) = CONST 
0x422: v422 = CALLDATASIZE 
0x423: v423 = SUB v422 v41f(0x4)
0x425: v425 = ADD v41f(0x4) v423
0x429: v429 = CALLDATALOAD v41f(0x4)
0x42a: v42a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x43f: v43f = AND v42a(0xffffffffffffffffffffffffffffffffffffffff) v429
0x441: v441(0x20) = CONST 
0x443: v443(0x24) = ADD v441(0x20) v41f(0x4)
0x44b: v44b(0x9b7) = CONST 
0x44e: JUMP v44b(0x9b7)
----------------------------------

Begin block 0x44f
prev = {'0x9b7'}, next = {}
----------------------------------
Block 0x44f
0x450: v450(0x40) = CONST 
0x452: v452 = MLOAD v450(0x40)
0x455: v455 = ISZERO v9d4
0x456: v456 = ISZERO v455
0x457: v457 = ISZERO v456
0x458: v458 = ISZERO v457
0x45a: MSTORE v452 v458
0x45b: v45b(0x20) = CONST 
0x45d: v45d = ADD v45b(0x20) v452
0x461: v461(0x40) = CONST 
0x463: v463 = MLOAD v461(0x40)
0x466: v466 = SUB v45d v463
0x468: RETURN v463 v466
----------------------------------

Begin block 0x469
prev = {}, next = {'0x471', '0x475'}
----------------------------------
function freezeAccount(address,bool)()
Block 0x469
0x46a: v46a = CALLVALUE 
0x46c: v46c = ISZERO v46a
0x46d: v46d(0x475) = CONST 
0x470: JUMPI v46d(0x475) v46c
----------------------------------

Begin block 0x471
prev = {'0x469'}, next = {}
----------------------------------
Block 0x471
0x471: v471(0x0) = CONST 
0x474: REVERT v471(0x0) v471(0x0)
----------------------------------

Begin block 0x475
prev = {'0x469'}, next = {'0x9d7'}
----------------------------------
Block 0x475
0x477: v477(0x4b6) = CONST 
0x47a: v47a(0x4) = CONST 
0x47d: v47d = CALLDATASIZE 
0x47e: v47e = SUB v47d v47a(0x4)
0x480: v480 = ADD v47a(0x4) v47e
0x484: v484 = CALLDATALOAD v47a(0x4)
0x485: v485(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x49a: v49a = AND v485(0xffffffffffffffffffffffffffffffffffffffff) v484
0x49c: v49c(0x20) = CONST 
0x49e: v49e(0x24) = ADD v49c(0x20) v47a(0x4)
0x4a4: v4a4 = CALLDATALOAD v49e(0x24)
0x4a5: v4a5 = ISZERO v4a4
0x4a6: v4a6 = ISZERO v4a5
0x4a8: v4a8(0x20) = CONST 
0x4aa: v4aa(0x44) = ADD v4a8(0x20) v49e(0x24)
0x4b2: v4b2(0x9d7) = CONST 
0x4b5: JUMP v4b2(0x9d7)
----------------------------------

Begin block 0x4b6
prev = {'0xa33'}, next = {}
----------------------------------
Block 0x4b6
0x4b7: STOP 
----------------------------------

Begin block 0x4b8
prev = {}, next = {'0x4c4', '0x4c0'}
----------------------------------
function transferOwnership(address)()
Block 0x4b8
0x4b9: v4b9 = CALLVALUE 
0x4bb: v4bb = ISZERO v4b9
0x4bc: v4bc(0x4c4) = CONST 
0x4bf: JUMPI v4bc(0x4c4) v4bb
----------------------------------

Begin block 0x4c0
prev = {'0x4b8'}, next = {}
----------------------------------
Block 0x4c0
0x4c0: v4c0(0x0) = CONST 
0x4c3: REVERT v4c0(0x0) v4c0(0x0)
----------------------------------

Begin block 0x4c4
prev = {'0x4b8'}, next = {'0xafd'}
----------------------------------
Block 0x4c4
0x4c6: v4c6(0x4f9) = CONST 
0x4c9: v4c9(0x4) = CONST 
0x4cc: v4cc = CALLDATASIZE 
0x4cd: v4cd = SUB v4cc v4c9(0x4)
0x4cf: v4cf = ADD v4c9(0x4) v4cd
0x4d3: v4d3 = CALLDATALOAD v4c9(0x4)
0x4d4: v4d4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4e9: v4e9 = AND v4d4(0xffffffffffffffffffffffffffffffffffffffff) v4d3
0x4eb: v4eb(0x20) = CONST 
0x4ed: v4ed(0x24) = ADD v4eb(0x20) v4c9(0x4)
0x4f5: v4f5(0xafd) = CONST 
0x4f8: JUMP v4f5(0xafd)
----------------------------------

Begin block 0x4f9
prev = {'0xbb6'}, next = {}
----------------------------------
Block 0x4f9
0x4fa: STOP 
----------------------------------

Begin block 0x4fb
prev = {'0xe1'}, next = {'0x591', '0x54b'}
----------------------------------
Block 0x4fb
0x4fc: v4fc(0x0) = CONST 
0x4ff: v4ff = SLOAD v4fc(0x0)
0x500: v500(0x1) = CONST 
0x503: v503(0x1) = CONST 
0x505: v505 = AND v503(0x1) v4ff
0x506: v506 = ISZERO v505
0x507: v507(0x100) = CONST 
0x50a: v50a = MUL v507(0x100) v506
0x50b: v50b = SUB v50a v500(0x1)
0x50c: v50c = AND v50b v4ff
0x50d: v50d(0x2) = CONST 
0x510: v510 = DIV v50c v50d(0x2)
0x512: v512(0x1f) = CONST 
0x514: v514 = ADD v512(0x1f) v510
0x515: v515(0x20) = CONST 
0x519: v519 = DIV v514 v515(0x20)
0x51a: v51a = MUL v519 v515(0x20)
0x51b: v51b(0x20) = CONST 
0x51d: v51d = ADD v51b(0x20) v51a
0x51e: v51e(0x40) = CONST 
0x520: v520 = MLOAD v51e(0x40)
0x523: v523 = ADD v520 v51d
0x524: v524(0x40) = CONST 
0x526: MSTORE v524(0x40) v523
0x52d: MSTORE v520 v510
0x52e: v52e(0x20) = CONST 
0x530: v530 = ADD v52e(0x20) v520
0x533: v533 = SLOAD v4fc(0x0)
0x534: v534(0x1) = CONST 
0x537: v537(0x1) = CONST 
0x539: v539 = AND v537(0x1) v533
0x53a: v53a = ISZERO v539
0x53b: v53b(0x100) = CONST 
0x53e: v53e = MUL v53b(0x100) v53a
0x53f: v53f = SUB v53e v534(0x1)
0x540: v540 = AND v53f v533
0x541: v541(0x2) = CONST 
0x544: v544 = DIV v540 v541(0x2)
0x546: v546 = ISZERO v544
0x547: v547(0x591) = CONST 
0x54a: JUMPI v547(0x591) v546
----------------------------------

Begin block 0x54b
prev = {'0x4fb'}, next = {'0x553', '0x566'}
----------------------------------
Block 0x54b
0x54c: v54c(0x1f) = CONST 
0x54e: v54e = LT v54c(0x1f) v544
0x54f: v54f(0x566) = CONST 
0x552: JUMPI v54f(0x566) v54e
----------------------------------

Begin block 0x553
prev = {'0x54b'}, next = {'0x591'}
----------------------------------
Block 0x553
0x553: v553(0x100) = CONST 
0x558: v558 = SLOAD v4fc(0x0)
0x559: v559 = DIV v558 v553(0x100)
0x55a: v55a = MUL v559 v553(0x100)
0x55c: MSTORE v530 v55a
0x55e: v55e(0x20) = CONST 
0x560: v560 = ADD v55e(0x20) v530
0x562: v562(0x591) = CONST 
0x565: JUMP v562(0x591)
----------------------------------

Begin block 0x566
prev = {'0x54b'}, next = {'0x574'}
----------------------------------
Block 0x566
0x568: v568 = ADD v530 v544
0x56b: v56b(0x0) = CONST 
0x56d: MSTORE v56b(0x0) v4fc(0x0)
0x56e: v56e(0x20) = CONST 
0x570: v570(0x0) = CONST 
0x572: v572 = SHA3 v570(0x0) v56e(0x20)
----------------------------------

Begin block 0x574
prev = {'0x566', '0x574'}, next = {'0x588', '0x574'}
----------------------------------
Block 0x574
0x574_0x0: v574_0 = PHI v530 v580
0x574_0x1: v574_1 = PHI v572 v57c
0x576: v576 = SLOAD v574_1
0x578: MSTORE v574_0 v576
0x57a: v57a(0x1) = CONST 
0x57c: v57c = ADD v57a(0x1) v574_1
0x57e: v57e(0x20) = CONST 
0x580: v580 = ADD v57e(0x20) v574_0
0x583: v583 = GT v568 v580
0x584: v584(0x574) = CONST 
0x587: JUMPI v584(0x574) v583
----------------------------------

Begin block 0x588
prev = {'0x574'}, next = {'0x591'}
----------------------------------
Block 0x588
0x58a: v58a = SUB v580 v568
0x58b: v58b(0x1f) = CONST 
0x58d: v58d = AND v58b(0x1f) v58a
0x58f: v58f = ADD v568 v58d
----------------------------------

Begin block 0x591
prev = {'0x4fb', '0x553', '0x588'}, next = {'0xea'}
----------------------------------
Block 0x591
0x598: JUMP ve3(0xea)
----------------------------------

Begin block 0x599
prev = {'0x171'}, next = {'0x17a'}
----------------------------------
Block 0x599
0x59a: v59a(0x3) = CONST 
0x59c: v59c = SLOAD v59a(0x3)
0x59e: JUMP v173(0x17a)
----------------------------------

Begin block 0x59f
prev = {'0x19c'}, next = {'0x5f7', '0x5fb'}
----------------------------------
Block 0x59f
0x5a0: v5a0(0x4) = CONST 
0x5a2: v5a2(0x1) = CONST 
0x5a5: v5a5 = SLOAD v5a0(0x4)
0x5a7: v5a7(0x100) = CONST 
0x5aa: v5aa(0x100) = EXP v5a7(0x100) v5a2(0x1)
0x5ac: v5ac = DIV v5a5 v5aa(0x100)
0x5ad: v5ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5c2: v5c2 = AND v5ad(0xffffffffffffffffffffffffffffffffffffffff) v5ac
0x5c3: v5c3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5d8: v5d8 = AND v5c3(0xffffffffffffffffffffffffffffffffffffffff) v5c2
0x5d9: v5d9 = CALLER 
0x5da: v5da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5ef: v5ef = AND v5da(0xffffffffffffffffffffffffffffffffffffffff) v5d9
0x5f0: v5f0 = EQ v5ef v5d8
0x5f1: v5f1 = ISZERO v5f0
0x5f2: v5f2 = ISZERO v5f1
0x5f3: v5f3(0x5fb) = CONST 
0x5f6: JUMPI v5f3(0x5fb) v5f2
----------------------------------

Begin block 0x5f7
prev = {'0x59f'}, next = {}
----------------------------------
Block 0x5f7
0x5f7: v5f7(0x0) = CONST 
0x5fa: REVERT v5f7(0x0) v5f7(0x0)
----------------------------------

Begin block 0x5fb
prev = {'0x59f'}, next = {'0x606'}
----------------------------------
Block 0x5fb
0x5fc: v5fc(0x606) = CONST 
0x5ff: v5ff = ADDRESS 
0x602: v602(0xbfa) = CONST 
0x605: CALLPRIVATE v602(0xbfa) v1cb v1c1 v5ff v5fc(0x606)
----------------------------------

Begin block 0x606
prev = {'0x5fb'}, next = {'0x1db'}
----------------------------------
Block 0x606
0x609: JUMP v19e(0x1db)
----------------------------------

Begin block 0x60a
prev = {'0x1e9'}, next = {'0x1f2'}
----------------------------------
Block 0x60a
0x60b: v60b(0x2) = CONST 
0x60d: v60d(0x0) = CONST 
0x610: v610 = SLOAD v60b(0x2)
0x612: v612(0x100) = CONST 
0x615: v615(0x1) = EXP v612(0x100) v60d(0x0)
0x617: v617 = DIV v610 v615(0x1)
0x618: v618(0xff) = CONST 
0x61a: v61a = AND v618(0xff) v617
0x61c: JUMP v1eb(0x1f2)
----------------------------------

Begin block 0x61d
prev = {'0x21a'}, next = {'0x675', '0x679'}
----------------------------------
Block 0x61d
0x61e: v61e(0x4) = CONST 
0x620: v620(0x1) = CONST 
0x623: v623 = SLOAD v61e(0x4)
0x625: v625(0x100) = CONST 
0x628: v628(0x100) = EXP v625(0x100) v620(0x1)
0x62a: v62a = DIV v623 v628(0x100)
0x62b: v62b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x640: v640 = AND v62b(0xffffffffffffffffffffffffffffffffffffffff) v62a
0x641: v641(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x656: v656 = AND v641(0xffffffffffffffffffffffffffffffffffffffff) v640
0x657: v657 = CALLER 
0x658: v658(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x66d: v66d = AND v658(0xffffffffffffffffffffffffffffffffffffffff) v657
0x66e: v66e = EQ v66d v656
0x66f: v66f = ISZERO v66e
0x670: v670 = ISZERO v66f
0x671: v671(0x679) = CONST 
0x674: JUMPI v671(0x679) v670
----------------------------------

Begin block 0x675
prev = {'0x61d'}, next = {}
----------------------------------
Block 0x675
0x675: v675(0x0) = CONST 
0x678: REVERT v675(0x0) v675(0x0)
----------------------------------

Begin block 0x679
prev = {'0x61d'}, next = {'0x23b'}
----------------------------------
Block 0x679
0x67b: v67b(0x4) = CONST 
0x67d: v67d(0x0) = CONST 
0x67f: v67f(0x100) = CONST 
0x682: v682(0x1) = EXP v67f(0x100) v67d(0x0)
0x684: v684 = SLOAD v67b(0x4)
0x686: v686(0xff) = CONST 
0x688: v688(0xff) = MUL v686(0xff) v682(0x1)
0x689: v689(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v688(0xff)
0x68a: v68a = AND v689(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v684
0x68d: v68d = ISZERO v22b
0x68e: v68e = ISZERO v68d
0x68f: v68f = MUL v68e v682(0x1)
0x690: v690 = OR v68f v68a
0x692: SSTORE v67b(0x4) v690
0x695: JUMP v21c(0x23b)
----------------------------------

Begin block 0x696
prev = {'0x249'}, next = {'0x27e'}
----------------------------------
Block 0x696
0x697: v697(0x7) = CONST 
0x699: v699(0x20) = CONST 
0x69b: MSTORE v699(0x20) v697(0x7)
0x69d: v69d(0x0) = CONST 
0x69f: MSTORE v69d(0x0) v26e
0x6a0: v6a0(0x40) = CONST 
0x6a2: v6a2(0x0) = CONST 
0x6a4: v6a4 = SHA3 v6a2(0x0) v6a0(0x40)
0x6a5: v6a5(0x0) = CONST 
0x6ab: v6ab = SLOAD v6a4
0x6ad: JUMP v24b(0x27e)
----------------------------------

Begin block 0x6ae
prev = {'0x2a0'}, next = {'0x2a9'}
----------------------------------
Block 0x6ae
0x6af: v6af(0x4) = CONST 
0x6b1: v6b1(0x0) = CONST 
0x6b4: v6b4 = SLOAD v6af(0x4)
0x6b6: v6b6(0x100) = CONST 
0x6b9: v6b9(0x1) = EXP v6b6(0x100) v6b1(0x0)
0x6bb: v6bb = DIV v6b4 v6b9(0x1)
0x6bc: v6bc(0xff) = CONST 
0x6be: v6be = AND v6bc(0xff) v6bb
0x6c0: JUMP v2a2(0x2a9)
----------------------------------

Begin block 0x6c1
prev = {'0x2cf'}, next = {'0x757', '0x719'}
----------------------------------
Block 0x6c1
0x6c2: v6c2(0x5) = CONST 
0x6c4: v6c4(0x0) = CONST 
0x6c7: v6c7 = SLOAD v6c2(0x5)
0x6c9: v6c9(0x100) = CONST 
0x6cc: v6cc(0x1) = EXP v6c9(0x100) v6c4(0x0)
0x6ce: v6ce = DIV v6c7 v6cc(0x1)
0x6cf: v6cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e4: v6e4 = AND v6cf(0xffffffffffffffffffffffffffffffffffffffff) v6ce
0x6e5: v6e5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6fa: v6fa = AND v6e5(0xffffffffffffffffffffffffffffffffffffffff) v6e4
0x6fb: v6fb = CALLER 
0x6fc: v6fc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x711: v711 = AND v6fc(0xffffffffffffffffffffffffffffffffffffffff) v6fb
0x712: v712 = EQ v711 v6fa
0x714: v714 = ISZERO v712
0x715: v715(0x757) = CONST 
0x718: JUMPI v715(0x757) v714
----------------------------------

Begin block 0x719
prev = {'0x6c1'}, next = {'0x757'}
----------------------------------
Block 0x719
0x71a: v71a(0x0) = CONST 
0x71c: v71c(0x5) = CONST 
0x71e: v71e(0x0) = CONST 
0x721: v721 = SLOAD v71c(0x5)
0x723: v723(0x100) = CONST 
0x726: v726(0x1) = EXP v723(0x100) v71e(0x0)
0x728: v728 = DIV v721 v726(0x1)
0x729: v729(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x73e: v73e = AND v729(0xffffffffffffffffffffffffffffffffffffffff) v728
0x73f: v73f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x754: v754 = AND v73f(0xffffffffffffffffffffffffffffffffffffffff) v73e
0x755: v755 = EQ v754 v71a(0x0)
0x756: v756 = ISZERO v755
----------------------------------

Begin block 0x757
prev = {'0x6c1', '0x719'}, next = {'0x75e', '0x762'}
----------------------------------
Block 0x757
0x757_0x0: v757_0 = PHI v712 v756
0x758: v758 = ISZERO v757_0
0x759: v759 = ISZERO v758
0x75a: v75a(0x762) = CONST 
0x75d: JUMPI v75a(0x762) v759
----------------------------------

Begin block 0x75e
prev = {'0x757'}, next = {}
----------------------------------
Block 0x75e
0x75e: v75e(0x0) = CONST 
0x761: REVERT v75e(0x0) v75e(0x0)
----------------------------------

Begin block 0x762
prev = {'0x757'}, next = {'0x2d8'}
----------------------------------
Block 0x762
0x763: v763(0x5) = CONST 
0x765: v765(0x0) = CONST 
0x768: v768 = SLOAD v763(0x5)
0x76a: v76a(0x100) = CONST 
0x76d: v76d(0x1) = EXP v76a(0x100) v765(0x0)
0x76f: v76f = DIV v768 v76d(0x1)
0x770: v770(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x785: v785 = AND v770(0xffffffffffffffffffffffffffffffffffffffff) v76f
0x786: v786(0x4) = CONST 
0x788: v788(0x1) = CONST 
0x78a: v78a(0x100) = CONST 
0x78d: v78d(0x100) = EXP v78a(0x100) v788(0x1)
0x78f: v78f = SLOAD v786(0x4)
0x791: v791(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a6: v7a6(0xffffffffffffffffffffffffffffffffffffffff00) = MUL v791(0xffffffffffffffffffffffffffffffffffffffff) v78d(0x100)
0x7a7: v7a7(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v7a6(0xffffffffffffffffffffffffffffffffffffffff00)
0x7a8: v7a8 = AND v7a7(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) v78f
0x7ab: v7ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c0: v7c0 = AND v7ab(0xffffffffffffffffffffffffffffffffffffffff) v785
0x7c1: v7c1 = MUL v7c0 v78d(0x100)
0x7c2: v7c2 = OR v7c1 v7a8
0x7c4: SSTORE v786(0x4) v7c2
0x7c6: v7c6(0x0) = CONST 
0x7c8: v7c8(0x5) = CONST 
0x7ca: v7ca(0x0) = CONST 
0x7cc: v7cc(0x100) = CONST 
0x7cf: v7cf(0x1) = EXP v7cc(0x100) v7ca(0x0)
0x7d1: v7d1 = SLOAD v7c8(0x5)
0x7d3: v7d3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e8: v7e8(0xffffffffffffffffffffffffffffffffffffffff) = MUL v7d3(0xffffffffffffffffffffffffffffffffffffffff) v7cf(0x1)
0x7e9: v7e9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v7e8(0xffffffffffffffffffffffffffffffffffffffff)
0x7ea: v7ea = AND v7e9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v7d1
0x7ed: v7ed(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x802: v802(0x0) = AND v7ed(0xffffffffffffffffffffffffffffffffffffffff) v7c6(0x0)
0x803: v803(0x0) = MUL v802(0x0) v7cf(0x1)
0x804: v804 = OR v803(0x0) v7ea
0x806: SSTORE v7c8(0x5) v804
0x808: v808(0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a) = CONST 
0x829: v829(0x4) = CONST 
0x82b: v82b(0x1) = CONST 
0x82e: v82e = SLOAD v829(0x4)
0x830: v830(0x100) = CONST 
0x833: v833(0x100) = EXP v830(0x100) v82b(0x1)
0x835: v835 = DIV v82e v833(0x100)
0x836: v836(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x84b: v84b = AND v836(0xffffffffffffffffffffffffffffffffffffffff) v835
0x84c: v84c(0x5) = CONST 
0x84e: v84e(0x0) = CONST 
0x851: v851 = SLOAD v84c(0x5)
0x853: v853(0x100) = CONST 
0x856: v856(0x1) = EXP v853(0x100) v84e(0x0)
0x858: v858 = DIV v851 v856(0x1)
0x859: v859(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86e: v86e = AND v859(0xffffffffffffffffffffffffffffffffffffffff) v858
0x86f: v86f(0x40) = CONST 
0x871: v871 = MLOAD v86f(0x40)
0x874: v874(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x889: v889 = AND v874(0xffffffffffffffffffffffffffffffffffffffff) v84b
0x88a: v88a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x89f: v89f = AND v88a(0xffffffffffffffffffffffffffffffffffffffff) v889
0x8a1: MSTORE v871 v89f
0x8a2: v8a2(0x20) = CONST 
0x8a4: v8a4 = ADD v8a2(0x20) v871
0x8a6: v8a6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8bb: v8bb = AND v8a6(0xffffffffffffffffffffffffffffffffffffffff) v86e
0x8bc: v8bc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8d1: v8d1 = AND v8bc(0xffffffffffffffffffffffffffffffffffffffff) v8bb
0x8d3: MSTORE v8a4 v8d1
0x8d4: v8d4(0x20) = CONST 
0x8d6: v8d6 = ADD v8d4(0x20) v8a4
0x8db: v8db(0x40) = CONST 
0x8dd: v8dd = MLOAD v8db(0x40)
0x8e0: v8e0 = SUB v8d6 v8dd
0x8e2: LOG1 v8dd v8e0 v808(0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a)
0x8e3: JUMP v2d1(0x2d8)
----------------------------------

Begin block 0x8e4
prev = {'0x2e6'}, next = {'0x2ef'}
----------------------------------
Block 0x8e4
0x8e5: v8e5(0x4) = CONST 
0x8e7: v8e7(0x1) = CONST 
0x8ea: v8ea = SLOAD v8e5(0x4)
0x8ec: v8ec(0x100) = CONST 
0x8ef: v8ef(0x100) = EXP v8ec(0x100) v8e7(0x1)
0x8f1: v8f1 = DIV v8ea v8ef(0x100)
0x8f2: v8f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x907: v907 = AND v8f2(0xffffffffffffffffffffffffffffffffffffffff) v8f1
0x909: JUMP v2e8(0x2ef)
----------------------------------

Begin block 0x90a
prev = {'0x33d'}, next = {'0x95a', '0x9a0'}
----------------------------------
Block 0x90a
0x90b: v90b(0x1) = CONST 
0x90e: v90e = SLOAD v90b(0x1)
0x90f: v90f(0x1) = CONST 
0x912: v912(0x1) = CONST 
0x914: v914 = AND v912(0x1) v90e
0x915: v915 = ISZERO v914
0x916: v916(0x100) = CONST 
0x919: v919 = MUL v916(0x100) v915
0x91a: v91a = SUB v919 v90f(0x1)
0x91b: v91b = AND v91a v90e
0x91c: v91c(0x2) = CONST 
0x91f: v91f = DIV v91b v91c(0x2)
0x921: v921(0x1f) = CONST 
0x923: v923 = ADD v921(0x1f) v91f
0x924: v924(0x20) = CONST 
0x928: v928 = DIV v923 v924(0x20)
0x929: v929 = MUL v928 v924(0x20)
0x92a: v92a(0x20) = CONST 
0x92c: v92c = ADD v92a(0x20) v929
0x92d: v92d(0x40) = CONST 
0x92f: v92f = MLOAD v92d(0x40)
0x932: v932 = ADD v92f v92c
0x933: v933(0x40) = CONST 
0x935: MSTORE v933(0x40) v932
0x93c: MSTORE v92f v91f
0x93d: v93d(0x20) = CONST 
0x93f: v93f = ADD v93d(0x20) v92f
0x942: v942 = SLOAD v90b(0x1)
0x943: v943(0x1) = CONST 
0x946: v946(0x1) = CONST 
0x948: v948 = AND v946(0x1) v942
0x949: v949 = ISZERO v948
0x94a: v94a(0x100) = CONST 
0x94d: v94d = MUL v94a(0x100) v949
0x94e: v94e = SUB v94d v943(0x1)
0x94f: v94f = AND v94e v942
0x950: v950(0x2) = CONST 
0x953: v953 = DIV v94f v950(0x2)
0x955: v955 = ISZERO v953
0x956: v956(0x9a0) = CONST 
0x959: JUMPI v956(0x9a0) v955
----------------------------------

Begin block 0x95a
prev = {'0x90a'}, next = {'0x975', '0x962'}
----------------------------------
Block 0x95a
0x95b: v95b(0x1f) = CONST 
0x95d: v95d = LT v95b(0x1f) v953
0x95e: v95e(0x975) = CONST 
0x961: JUMPI v95e(0x975) v95d
----------------------------------

Begin block 0x962
prev = {'0x95a'}, next = {'0x9a0'}
----------------------------------
Block 0x962
0x962: v962(0x100) = CONST 
0x967: v967 = SLOAD v90b(0x1)
0x968: v968 = DIV v967 v962(0x100)
0x969: v969 = MUL v968 v962(0x100)
0x96b: MSTORE v93f v969
0x96d: v96d(0x20) = CONST 
0x96f: v96f = ADD v96d(0x20) v93f
0x971: v971(0x9a0) = CONST 
0x974: JUMP v971(0x9a0)
----------------------------------

Begin block 0x975
prev = {'0x95a'}, next = {'0x983'}
----------------------------------
Block 0x975
0x977: v977 = ADD v93f v953
0x97a: v97a(0x0) = CONST 
0x97c: MSTORE v97a(0x0) v90b(0x1)
0x97d: v97d(0x20) = CONST 
0x97f: v97f(0x0) = CONST 
0x981: v981 = SHA3 v97f(0x0) v97d(0x20)
----------------------------------

Begin block 0x983
prev = {'0x983', '0x975'}, next = {'0x983', '0x997'}
----------------------------------
Block 0x983
0x983_0x0: v983_0 = PHI v93f v98f
0x983_0x1: v983_1 = PHI v981 v98b
0x985: v985 = SLOAD v983_1
0x987: MSTORE v983_0 v985
0x989: v989(0x1) = CONST 
0x98b: v98b = ADD v989(0x1) v983_1
0x98d: v98d(0x20) = CONST 
0x98f: v98f = ADD v98d(0x20) v983_0
0x992: v992 = GT v977 v98f
0x993: v993(0x983) = CONST 
0x996: JUMPI v993(0x983) v992
----------------------------------

Begin block 0x997
prev = {'0x983'}, next = {'0x9a0'}
----------------------------------
Block 0x997
0x999: v999 = SUB v98f v977
0x99a: v99a(0x1f) = CONST 
0x99c: v99c = AND v99a(0x1f) v999
0x99e: v99e = ADD v977 v99c
----------------------------------

Begin block 0x9a0
prev = {'0x90a', '0x997', '0x962'}, next = {'0x346'}
----------------------------------
Block 0x9a0
0x9a7: JUMP v33f(0x346)
----------------------------------

Begin block 0x9a8
prev = {'0x3cd'}, next = {'0x9b3'}
----------------------------------
Block 0x9a8
0x9a9: v9a9(0x9b3) = CONST 
0x9ac: v9ac = CALLER 
0x9af: v9af(0xbfa) = CONST 
0x9b2: CALLPRIVATE v9af(0xbfa) v3fc v3f2 v9ac v9a9(0x9b3)
----------------------------------

Begin block 0x9b3
prev = {'0x9a8'}, next = {'0x40c'}
----------------------------------
Block 0x9b3
0x9b6: JUMP v3cf(0x40c)
----------------------------------

Begin block 0x9b7
prev = {'0x41a'}, next = {'0x44f'}
----------------------------------
Block 0x9b7
0x9b8: v9b8(0x6) = CONST 
0x9ba: v9ba(0x20) = CONST 
0x9bc: MSTORE v9ba(0x20) v9b8(0x6)
0x9be: v9be(0x0) = CONST 
0x9c0: MSTORE v9be(0x0) v43f
0x9c1: v9c1(0x40) = CONST 
0x9c3: v9c3(0x0) = CONST 
0x9c5: v9c5 = SHA3 v9c3(0x0) v9c1(0x40)
0x9c6: v9c6(0x0) = CONST 
0x9ca: v9ca = SLOAD v9c5
0x9cc: v9cc(0x100) = CONST 
0x9cf: v9cf(0x1) = EXP v9cc(0x100) v9c6(0x0)
0x9d1: v9d1 = DIV v9ca v9cf(0x1)
0x9d2: v9d2(0xff) = CONST 
0x9d4: v9d4 = AND v9d2(0xff) v9d1
0x9d6: JUMP v41c(0x44f)
----------------------------------

Begin block 0x9d7
prev = {'0x475'}, next = {'0xa2f', '0xa33'}
----------------------------------
Block 0x9d7
0x9d8: v9d8(0x4) = CONST 
0x9da: v9da(0x1) = CONST 
0x9dd: v9dd = SLOAD v9d8(0x4)
0x9df: v9df(0x100) = CONST 
0x9e2: v9e2(0x100) = EXP v9df(0x100) v9da(0x1)
0x9e4: v9e4 = DIV v9dd v9e2(0x100)
0x9e5: v9e5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9fa: v9fa = AND v9e5(0xffffffffffffffffffffffffffffffffffffffff) v9e4
0x9fb: v9fb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa10: va10 = AND v9fb(0xffffffffffffffffffffffffffffffffffffffff) v9fa
0xa11: va11 = CALLER 
0xa12: va12(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa27: va27 = AND va12(0xffffffffffffffffffffffffffffffffffffffff) va11
0xa28: va28 = EQ va27 va10
0xa29: va29 = ISZERO va28
0xa2a: va2a = ISZERO va29
0xa2b: va2b(0xa33) = CONST 
0xa2e: JUMPI va2b(0xa33) va2a
----------------------------------

Begin block 0xa2f
prev = {'0x9d7'}, next = {}
----------------------------------
Block 0xa2f
0xa2f: va2f(0x0) = CONST 
0xa32: REVERT va2f(0x0) va2f(0x0)
----------------------------------

Begin block 0xa33
prev = {'0x9d7'}, next = {'0x4b6'}
----------------------------------
Block 0xa33
0xa35: va35(0x6) = CONST 
0xa37: va37(0x0) = CONST 
0xa3a: va3a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa4f: va4f = AND va3a(0xffffffffffffffffffffffffffffffffffffffff) v49a
0xa50: va50(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa65: va65 = AND va50(0xffffffffffffffffffffffffffffffffffffffff) va4f
0xa67: MSTORE va37(0x0) va65
0xa68: va68(0x20) = CONST 
0xa6a: va6a(0x20) = ADD va68(0x20) va37(0x0)
0xa6d: MSTORE va6a(0x20) va35(0x6)
0xa6e: va6e(0x20) = CONST 
0xa70: va70(0x40) = ADD va6e(0x20) va6a(0x20)
0xa71: va71(0x0) = CONST 
0xa73: va73 = SHA3 va71(0x0) va70(0x40)
0xa74: va74(0x0) = CONST 
0xa76: va76(0x100) = CONST 
0xa79: va79(0x1) = EXP va76(0x100) va74(0x0)
0xa7b: va7b = SLOAD va73
0xa7d: va7d(0xff) = CONST 
0xa7f: va7f(0xff) = MUL va7d(0xff) va79(0x1)
0xa80: va80(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT va7f(0xff)
0xa81: va81 = AND va80(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) va7b
0xa84: va84 = ISZERO v4a6
0xa85: va85 = ISZERO va84
0xa86: va86 = MUL va85 va79(0x1)
0xa87: va87 = OR va86 va81
0xa89: SSTORE va73 va87
0xa8b: va8b(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5) = CONST 
0xaae: vaae(0x40) = CONST 
0xab0: vab0 = MLOAD vaae(0x40)
0xab3: vab3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xac8: vac8 = AND vab3(0xffffffffffffffffffffffffffffffffffffffff) v49a
0xac9: vac9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xade: vade = AND vac9(0xffffffffffffffffffffffffffffffffffffffff) vac8
0xae0: MSTORE vab0 vade
0xae1: vae1(0x20) = CONST 
0xae3: vae3 = ADD vae1(0x20) vab0
0xae5: vae5 = ISZERO v4a6
0xae6: vae6 = ISZERO vae5
0xae7: vae7 = ISZERO vae6
0xae8: vae8 = ISZERO vae7
0xaea: MSTORE vae3 vae8
0xaeb: vaeb(0x20) = CONST 
0xaed: vaed = ADD vaeb(0x20) vae3
0xaf2: vaf2(0x40) = CONST 
0xaf4: vaf4 = MLOAD vaf2(0x40)
0xaf7: vaf7 = SUB vaed vaf4
0xaf9: LOG1 vaf4 vaf7 va8b(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5)
0xafc: JUMP v477(0x4b6)
----------------------------------

Begin block 0xafd
prev = {'0x4c4'}, next = {'0xb59', '0xb55'}
----------------------------------
Block 0xafd
0xafe: vafe(0x4) = CONST 
0xb00: vb00(0x1) = CONST 
0xb03: vb03 = SLOAD vafe(0x4)
0xb05: vb05(0x100) = CONST 
0xb08: vb08(0x100) = EXP vb05(0x100) vb00(0x1)
0xb0a: vb0a = DIV vb03 vb08(0x100)
0xb0b: vb0b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb20: vb20 = AND vb0b(0xffffffffffffffffffffffffffffffffffffffff) vb0a
0xb21: vb21(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb36: vb36 = AND vb21(0xffffffffffffffffffffffffffffffffffffffff) vb20
0xb37: vb37 = CALLER 
0xb38: vb38(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb4d: vb4d = AND vb38(0xffffffffffffffffffffffffffffffffffffffff) vb37
0xb4e: vb4e = EQ vb4d vb36
0xb4f: vb4f = ISZERO vb4e
0xb50: vb50 = ISZERO vb4f
0xb51: vb51(0xb59) = CONST 
0xb54: JUMPI vb51(0xb59) vb50
----------------------------------

Begin block 0xb55
prev = {'0xafd'}, next = {}
----------------------------------
Block 0xb55
0xb55: vb55(0x0) = CONST 
0xb58: REVERT vb55(0x0) vb55(0x0)
----------------------------------

Begin block 0xb59
prev = {'0xafd'}, next = {'0xbb2', '0xbb6'}
----------------------------------
Block 0xb59
0xb5b: vb5b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb70: vb70 = AND vb5b(0xffffffffffffffffffffffffffffffffffffffff) v4e9
0xb71: vb71(0x4) = CONST 
0xb73: vb73(0x1) = CONST 
0xb76: vb76 = SLOAD vb71(0x4)
0xb78: vb78(0x100) = CONST 
0xb7b: vb7b(0x100) = EXP vb78(0x100) vb73(0x1)
0xb7d: vb7d = DIV vb76 vb7b(0x100)
0xb7e: vb7e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb93: vb93 = AND vb7e(0xffffffffffffffffffffffffffffffffffffffff) vb7d
0xb94: vb94(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xba9: vba9 = AND vb94(0xffffffffffffffffffffffffffffffffffffffff) vb93
0xbaa: vbaa = EQ vba9 vb70
0xbab: vbab = ISZERO vbaa
0xbac: vbac = ISZERO vbab
0xbad: vbad = ISZERO vbac
0xbae: vbae(0xbb6) = CONST 
0xbb1: JUMPI vbae(0xbb6) vbad
----------------------------------

Begin block 0xbb2
prev = {'0xb59'}, next = {}
----------------------------------
Block 0xbb2
0xbb2: vbb2(0x0) = CONST 
0xbb5: REVERT vbb2(0x0) vbb2(0x0)
----------------------------------

Begin block 0xbb6
prev = {'0xb59'}, next = {'0x4f9'}
----------------------------------
Block 0xbb6
0xbb8: vbb8(0x5) = CONST 
0xbba: vbba(0x0) = CONST 
0xbbc: vbbc(0x100) = CONST 
0xbbf: vbbf(0x1) = EXP vbbc(0x100) vbba(0x0)
0xbc1: vbc1 = SLOAD vbb8(0x5)
0xbc3: vbc3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbd8: vbd8(0xffffffffffffffffffffffffffffffffffffffff) = MUL vbc3(0xffffffffffffffffffffffffffffffffffffffff) vbbf(0x1)
0xbd9: vbd9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vbd8(0xffffffffffffffffffffffffffffffffffffffff)
0xbda: vbda = AND vbd9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vbc1
0xbdd: vbdd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf2: vbf2 = AND vbdd(0xffffffffffffffffffffffffffffffffffffffff) v4e9
0xbf3: vbf3 = MUL vbf2 vbbf(0x1)
0xbf4: vbf4 = OR vbf3 vbda
0xbf6: SSTORE vbb8(0x5) vbf4
0xbf9: JUMP v4c6(0x4f9)
----------------------------------

Begin block 0xbfa
prev = {}, next = {'0xc14', '0xc18'}
----------------------------------
function 0xbfa(vbfaarg0, vbfaarg1, vbfaarg2, vbfaarg3)
Block 0xbfa
0xbfb: vbfb(0x0) = CONST 
0xbfd: vbfd(0x4) = CONST 
0xbff: vbff(0x0) = CONST 
0xc02: vc02 = SLOAD vbfd(0x4)
0xc04: vc04(0x100) = CONST 
0xc07: vc07(0x1) = EXP vc04(0x100) vbff(0x0)
0xc09: vc09 = DIV vc02 vc07(0x1)
0xc0a: vc0a(0xff) = CONST 
0xc0c: vc0c = AND vc0a(0xff) vc09
0xc0d: vc0d = ISZERO vc0c
0xc0e: vc0e = ISZERO vc0d
0xc0f: vc0f = ISZERO vc0e
0xc10: vc10(0xc18) = CONST 
0xc13: JUMPI vc10(0xc18) vc0f
----------------------------------

Begin block 0xc14
prev = {'0xbfa'}, next = {}
----------------------------------
Block 0xc14
0xc14: vc14(0x0) = CONST 
0xc17: REVERT vc14(0x0) vc14(0x0)
----------------------------------

Begin block 0xc18
prev = {'0xbfa'}, next = {'0xc3a', '0xc3e'}
----------------------------------
Block 0xc18
0xc19: vc19(0x0) = CONST 
0xc1c: vc1c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc31: vc31 = AND vc1c(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xc32: vc32 = EQ vc31 vc19(0x0)
0xc33: vc33 = ISZERO vc32
0xc34: vc34 = ISZERO vc33
0xc35: vc35 = ISZERO vc34
0xc36: vc36(0xc3e) = CONST 
0xc39: JUMPI vc36(0xc3e) vc35
----------------------------------

Begin block 0xc3a
prev = {'0xc18'}, next = {}
----------------------------------
Block 0xc3a
0xc3a: vc3a(0x0) = CONST 
0xc3d: REVERT vc3a(0x0) vc3a(0x0)
----------------------------------

Begin block 0xc3e
prev = {'0xc18'}, next = {'0xc88', '0xc8c'}
----------------------------------
Block 0xc3e
0xc40: vc40(0x7) = CONST 
0xc42: vc42(0x0) = CONST 
0xc45: vc45(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5a: vc5a = AND vc45(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xc5b: vc5b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc70: vc70 = AND vc5b(0xffffffffffffffffffffffffffffffffffffffff) vc5a
0xc72: MSTORE vc42(0x0) vc70
0xc73: vc73(0x20) = CONST 
0xc75: vc75(0x20) = ADD vc73(0x20) vc42(0x0)
0xc78: MSTORE vc75(0x20) vc40(0x7)
0xc79: vc79(0x20) = CONST 
0xc7b: vc7b(0x40) = ADD vc79(0x20) vc75(0x20)
0xc7c: vc7c(0x0) = CONST 
0xc7e: vc7e = SHA3 vc7c(0x0) vc7b(0x40)
0xc7f: vc7f = SLOAD vc7e
0xc80: vc80 = LT vc7f vbfaarg0
0xc81: vc81 = ISZERO vc80
0xc82: vc82 = ISZERO vc81
0xc83: vc83 = ISZERO vc82
0xc84: vc84(0xc8c) = CONST 
0xc87: JUMPI vc84(0xc8c) vc83
----------------------------------

Begin block 0xc88
prev = {'0xc3e'}, next = {}
----------------------------------
Block 0xc88
0xc88: vc88(0x0) = CONST 
0xc8b: REVERT vc88(0x0) vc88(0x0)
----------------------------------

Begin block 0xc8c
prev = {'0xc3e'}, next = {'0xd17', '0xd1b'}
----------------------------------
Block 0xc8c
0xc8d: vc8d(0x7) = CONST 
0xc8f: vc8f(0x0) = CONST 
0xc92: vc92(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xca7: vca7 = AND vc92(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xca8: vca8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcbd: vcbd = AND vca8(0xffffffffffffffffffffffffffffffffffffffff) vca7
0xcbf: MSTORE vc8f(0x0) vcbd
0xcc0: vcc0(0x20) = CONST 
0xcc2: vcc2(0x20) = ADD vcc0(0x20) vc8f(0x0)
0xcc5: MSTORE vcc2(0x20) vc8d(0x7)
0xcc6: vcc6(0x20) = CONST 
0xcc8: vcc8(0x40) = ADD vcc6(0x20) vcc2(0x20)
0xcc9: vcc9(0x0) = CONST 
0xccb: vccb = SHA3 vcc9(0x0) vcc8(0x40)
0xccc: vccc = SLOAD vccb
0xcce: vcce(0x7) = CONST 
0xcd0: vcd0(0x0) = CONST 
0xcd3: vcd3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xce8: vce8 = AND vcd3(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xce9: vce9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcfe: vcfe = AND vce9(0xffffffffffffffffffffffffffffffffffffffff) vce8
0xd00: MSTORE vcd0(0x0) vcfe
0xd01: vd01(0x20) = CONST 
0xd03: vd03(0x20) = ADD vd01(0x20) vcd0(0x0)
0xd06: MSTORE vd03(0x20) vcce(0x7)
0xd07: vd07(0x20) = CONST 
0xd09: vd09(0x40) = ADD vd07(0x20) vd03(0x20)
0xd0a: vd0a(0x0) = CONST 
0xd0c: vd0c = SHA3 vd0a(0x0) vd09(0x40)
0xd0d: vd0d = SLOAD vd0c
0xd0e: vd0e = ADD vd0d vbfaarg0
0xd0f: vd0f = LT vd0e vccc
0xd10: vd10 = ISZERO vd0f
0xd11: vd11 = ISZERO vd10
0xd12: vd12 = ISZERO vd11
0xd13: vd13(0xd1b) = CONST 
0xd16: JUMPI vd13(0xd1b) vd12
----------------------------------

Begin block 0xd17
prev = {'0xc8c'}, next = {}
----------------------------------
Block 0xd17
0xd17: vd17(0x0) = CONST 
0xd1a: REVERT vd17(0x0) vd17(0x0)
----------------------------------

Begin block 0xd1b
prev = {'0xc8c'}, next = {'0xd70', '0xd74'}
----------------------------------
Block 0xd1b
0xd1c: vd1c(0x6) = CONST 
0xd1e: vd1e(0x0) = CONST 
0xd21: vd21(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd36: vd36 = AND vd21(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xd37: vd37(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4c: vd4c = AND vd37(0xffffffffffffffffffffffffffffffffffffffff) vd36
0xd4e: MSTORE vd1e(0x0) vd4c
0xd4f: vd4f(0x20) = CONST 
0xd51: vd51(0x20) = ADD vd4f(0x20) vd1e(0x0)
0xd54: MSTORE vd51(0x20) vd1c(0x6)
0xd55: vd55(0x20) = CONST 
0xd57: vd57(0x40) = ADD vd55(0x20) vd51(0x20)
0xd58: vd58(0x0) = CONST 
0xd5a: vd5a = SHA3 vd58(0x0) vd57(0x40)
0xd5b: vd5b(0x0) = CONST 
0xd5e: vd5e = SLOAD vd5a
0xd60: vd60(0x100) = CONST 
0xd63: vd63(0x1) = EXP vd60(0x100) vd5b(0x0)
0xd65: vd65 = DIV vd5e vd63(0x1)
0xd66: vd66(0xff) = CONST 
0xd68: vd68 = AND vd66(0xff) vd65
0xd69: vd69 = ISZERO vd68
0xd6a: vd6a = ISZERO vd69
0xd6b: vd6b = ISZERO vd6a
0xd6c: vd6c(0xd74) = CONST 
0xd6f: JUMPI vd6c(0xd74) vd6b
----------------------------------

Begin block 0xd70
prev = {'0xd1b'}, next = {}
----------------------------------
Block 0xd70
0xd70: vd70(0x0) = CONST 
0xd73: REVERT vd70(0x0) vd70(0x0)
----------------------------------

Begin block 0xd74
prev = {'0xd1b'}, next = {'0xf80', '0xf81'}
----------------------------------
Block 0xd74
0xd75: vd75(0x7) = CONST 
0xd77: vd77(0x0) = CONST 
0xd7a: vd7a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd8f: vd8f = AND vd7a(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xd90: vd90(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xda5: vda5 = AND vd90(0xffffffffffffffffffffffffffffffffffffffff) vd8f
0xda7: MSTORE vd77(0x0) vda5
0xda8: vda8(0x20) = CONST 
0xdaa: vdaa(0x20) = ADD vda8(0x20) vd77(0x0)
0xdad: MSTORE vdaa(0x20) vd75(0x7)
0xdae: vdae(0x20) = CONST 
0xdb0: vdb0(0x40) = ADD vdae(0x20) vdaa(0x20)
0xdb1: vdb1(0x0) = CONST 
0xdb3: vdb3 = SHA3 vdb1(0x0) vdb0(0x40)
0xdb4: vdb4 = SLOAD vdb3
0xdb5: vdb5(0x7) = CONST 
0xdb7: vdb7(0x0) = CONST 
0xdba: vdba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdcf: vdcf = AND vdba(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xdd0: vdd0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xde5: vde5 = AND vdd0(0xffffffffffffffffffffffffffffffffffffffff) vdcf
0xde7: MSTORE vdb7(0x0) vde5
0xde8: vde8(0x20) = CONST 
0xdea: vdea(0x20) = ADD vde8(0x20) vdb7(0x0)
0xded: MSTORE vdea(0x20) vdb5(0x7)
0xdee: vdee(0x20) = CONST 
0xdf0: vdf0(0x40) = ADD vdee(0x20) vdea(0x20)
0xdf1: vdf1(0x0) = CONST 
0xdf3: vdf3 = SHA3 vdf1(0x0) vdf0(0x40)
0xdf4: vdf4 = SLOAD vdf3
0xdf5: vdf5 = ADD vdf4 vdb4
0xdf9: vdf9(0x7) = CONST 
0xdfb: vdfb(0x0) = CONST 
0xdfe: vdfe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe13: ve13 = AND vdfe(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xe14: ve14(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe29: ve29 = AND ve14(0xffffffffffffffffffffffffffffffffffffffff) ve13
0xe2b: MSTORE vdfb(0x0) ve29
0xe2c: ve2c(0x20) = CONST 
0xe2e: ve2e(0x20) = ADD ve2c(0x20) vdfb(0x0)
0xe31: MSTORE ve2e(0x20) vdf9(0x7)
0xe32: ve32(0x20) = CONST 
0xe34: ve34(0x40) = ADD ve32(0x20) ve2e(0x20)
0xe35: ve35(0x0) = CONST 
0xe37: ve37 = SHA3 ve35(0x0) ve34(0x40)
0xe38: ve38(0x0) = CONST 
0xe3c: ve3c = SLOAD ve37
0xe3d: ve3d = SUB ve3c vbfaarg0
0xe43: SSTORE ve37 ve3d
0xe46: ve46(0x7) = CONST 
0xe48: ve48(0x0) = CONST 
0xe4b: ve4b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe60: ve60 = AND ve4b(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xe61: ve61(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe76: ve76 = AND ve61(0xffffffffffffffffffffffffffffffffffffffff) ve60
0xe78: MSTORE ve48(0x0) ve76
0xe79: ve79(0x20) = CONST 
0xe7b: ve7b(0x20) = ADD ve79(0x20) ve48(0x0)
0xe7e: MSTORE ve7b(0x20) ve46(0x7)
0xe7f: ve7f(0x20) = CONST 
0xe81: ve81(0x40) = ADD ve7f(0x20) ve7b(0x20)
0xe82: ve82(0x0) = CONST 
0xe84: ve84 = SHA3 ve82(0x0) ve81(0x40)
0xe85: ve85(0x0) = CONST 
0xe89: ve89 = SLOAD ve84
0xe8a: ve8a = ADD ve89 vbfaarg0
0xe90: SSTORE ve84 ve8a
0xe93: ve93(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xea8: vea8 = AND ve93(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xeaa: veaa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xebf: vebf = AND veaa(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xec0: vec0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xee2: vee2(0x40) = CONST 
0xee4: vee4 = MLOAD vee2(0x40)
0xee8: MSTORE vee4 vbfaarg0
0xee9: vee9(0x20) = CONST 
0xeeb: veeb = ADD vee9(0x20) vee4
0xeef: veef(0x40) = CONST 
0xef1: vef1 = MLOAD veef(0x40)
0xef4: vef4 = SUB veeb vef1
0xef6: LOG3 vef1 vef4 vec0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vebf vea8
0xef8: vef8(0x7) = CONST 
0xefa: vefa(0x0) = CONST 
0xefd: vefd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf12: vf12 = AND vefd(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg1
0xf13: vf13(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf28: vf28 = AND vf13(0xffffffffffffffffffffffffffffffffffffffff) vf12
0xf2a: MSTORE vefa(0x0) vf28
0xf2b: vf2b(0x20) = CONST 
0xf2d: vf2d(0x20) = ADD vf2b(0x20) vefa(0x0)
0xf30: MSTORE vf2d(0x20) vef8(0x7)
0xf31: vf31(0x20) = CONST 
0xf33: vf33(0x40) = ADD vf31(0x20) vf2d(0x20)
0xf34: vf34(0x0) = CONST 
0xf36: vf36 = SHA3 vf34(0x0) vf33(0x40)
0xf37: vf37 = SLOAD vf36
0xf38: vf38(0x7) = CONST 
0xf3a: vf3a(0x0) = CONST 
0xf3d: vf3d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf52: vf52 = AND vf3d(0xffffffffffffffffffffffffffffffffffffffff) vbfaarg2
0xf53: vf53(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf68: vf68 = AND vf53(0xffffffffffffffffffffffffffffffffffffffff) vf52
0xf6a: MSTORE vf3a(0x0) vf68
0xf6b: vf6b(0x20) = CONST 
0xf6d: vf6d(0x20) = ADD vf6b(0x20) vf3a(0x0)
0xf70: MSTORE vf6d(0x20) vf38(0x7)
0xf71: vf71(0x20) = CONST 
0xf73: vf73(0x40) = ADD vf71(0x20) vf6d(0x20)
0xf74: vf74(0x0) = CONST 
0xf76: vf76 = SHA3 vf74(0x0) vf73(0x40)
0xf77: vf77 = SLOAD vf76
0xf78: vf78 = ADD vf77 vf37
0xf79: vf79 = EQ vf78 vdf5
0xf7a: vf7a = ISZERO vf79
0xf7b: vf7b = ISZERO vf7a
0xf7c: vf7c(0xf81) = CONST 
0xf7f: JUMPI vf7c(0xf81) vf7b
----------------------------------

Begin block 0xf80
prev = {'0xd74'}, next = {}
----------------------------------
Block 0xf80
0xf80: THROW 
----------------------------------

Begin block 0xf81
prev = {'0xd74'}, next = {}
----------------------------------
Block 0xf81
0xf86: RETURNPRIVATE vbfaarg3
----------------------------------

Begin block 0xfd1
prev = {'0xc5', '0x0'}, next = {}
----------------------------------
Block 0xfd1
0xfd2: vfd2(0xd0) = CONST 
0xfd3: CALLPRIVATE vfd2(0xd0)
----------------------------------

Begin block 0xfd4
prev = {'0xd'}, next = {}
----------------------------------
Block 0xfd4
0xfd5: vfd5(0xd5) = CONST 
0xfd6: CALLPRIVATE vfd5(0xd5)
----------------------------------

Begin block 0xfd7
prev = {'0x41'}, next = {}
----------------------------------
Block 0xfd7
0xfd8: vfd8(0x165) = CONST 
0xfd9: CALLPRIVATE vfd8(0x165)
----------------------------------

Begin block 0xfda
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xfda
0xfdb: vfdb(0x190) = CONST 
0xfdc: CALLPRIVATE vfdb(0x190)
----------------------------------

Begin block 0xfdd
prev = {'0x57'}, next = {}
----------------------------------
Block 0xfdd
0xfde: vfde(0x1dd) = CONST 
0xfdf: CALLPRIVATE vfde(0x1dd)
----------------------------------

Begin block 0xfe0
prev = {'0x62'}, next = {}
----------------------------------
Block 0xfe0
0xfe1: vfe1(0x20e) = CONST 
0xfe2: CALLPRIVATE vfe1(0x20e)
----------------------------------

Begin block 0xfe3
prev = {'0x6d'}, next = {}
----------------------------------
Block 0xfe3
0xfe4: vfe4(0x23d) = CONST 
0xfe5: CALLPRIVATE vfe4(0x23d)
----------------------------------

Begin block 0xfe6
prev = {'0x78'}, next = {}
----------------------------------
Block 0xfe6
0xfe7: vfe7(0x294) = CONST 
0xfe8: CALLPRIVATE vfe7(0x294)
----------------------------------

Begin block 0xfe9
prev = {'0x83'}, next = {}
----------------------------------
Block 0xfe9
0xfea: vfea(0x2c3) = CONST 
0xfeb: CALLPRIVATE vfea(0x2c3)
----------------------------------

Begin block 0xfec
prev = {'0x8e'}, next = {}
----------------------------------
Block 0xfec
0xfed: vfed(0x2da) = CONST 
0xfee: CALLPRIVATE vfed(0x2da)
----------------------------------

Begin block 0xfef
prev = {'0x99'}, next = {}
----------------------------------
Block 0xfef
0xff0: vff0(0x331) = CONST 
0xff1: CALLPRIVATE vff0(0x331)
----------------------------------

Begin block 0xff2
prev = {'0xa4'}, next = {}
----------------------------------
Block 0xff2
0xff3: vff3(0x3c1) = CONST 
0xff4: CALLPRIVATE vff3(0x3c1)
----------------------------------

Begin block 0xff5
prev = {'0xaf'}, next = {}
----------------------------------
Block 0xff5
0xff6: vff6(0x40e) = CONST 
0xff7: CALLPRIVATE vff6(0x40e)
----------------------------------

Begin block 0xff8
prev = {'0xba'}, next = {}
----------------------------------
Block 0xff8
0xff9: vff9(0x469) = CONST 
0xffa: CALLPRIVATE vff9(0x469)
----------------------------------

Begin block 0xffb
prev = {'0xc5'}, next = {}
----------------------------------
Block 0xffb
0xffc: vffc(0x4b8) = CONST 
0xffd: CALLPRIVATE vffc(0x4b8)
----------------------------------
