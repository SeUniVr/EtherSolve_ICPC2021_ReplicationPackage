
Begin block 0x0
prev = {}, next = {'0xb', '0xd9'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0xd9) = CONST 
0xa: JUMPI v7(0xd9) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0x3f', '0x129e'}
----------------------------------
Block 0xb
0xb: vb(0x0) = CONST 
0xd: vd = CALLDATALOAD vb(0x0)
0xe: ve(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2d: v2d = DIV vd ve(0x100000000000000000000000000000000000000000000000000000000)
0x2e: v2e(0xffffffff) = CONST 
0x33: v33 = AND v2e(0xffffffff) v2d
0x35: v35(0x6fdde03) = CONST 
0x3a: v3a = EQ v35(0x6fdde03) v33
0x1280: v1280(0x129e) = CONST 
0x1281: JUMPI v1280(0x129e) v3a
----------------------------------

Begin block 0x3f
prev = {'0xb'}, next = {'0x4a', '0x12a1'}
----------------------------------
Block 0x3f
0x40: v40(0x7da68f5) = CONST 
0x45: v45 = EQ v40(0x7da68f5) v33
0x1282: v1282(0x12a1) = CONST 
0x1283: JUMPI v1282(0x12a1) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x12a4', '0x55'}
----------------------------------
Block 0x4a
0x4b: v4b(0x95ea7b3) = CONST 
0x50: v50 = EQ v4b(0x95ea7b3) v33
0x1284: v1284(0x12a4) = CONST 
0x1285: JUMPI v1284(0x12a4) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x12a7', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0x18160ddd) = CONST 
0x5b: v5b = EQ v56(0x18160ddd) v33
0x1286: v1286(0x12a7) = CONST 
0x1287: JUMPI v1286(0x12a7) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x12aa', '0x6b'}
----------------------------------
Block 0x60
0x61: v61(0x23b872dd) = CONST 
0x66: v66 = EQ v61(0x23b872dd) v33
0x1288: v1288(0x12aa) = CONST 
0x1289: JUMPI v1288(0x12aa) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x12ad', '0x76'}
----------------------------------
Block 0x6b
0x6c: v6c(0x313ce567) = CONST 
0x71: v71 = EQ v6c(0x313ce567) v33
0x128a: v128a(0x12ad) = CONST 
0x128b: JUMPI v128a(0x12ad) v71
----------------------------------

Begin block 0x76
prev = {'0x6b'}, next = {'0x12b0', '0x81'}
----------------------------------
Block 0x76
0x77: v77(0x42966c68) = CONST 
0x7c: v7c = EQ v77(0x42966c68) v33
0x128c: v128c(0x12b0) = CONST 
0x128d: JUMPI v128c(0x12b0) v7c
----------------------------------

Begin block 0x81
prev = {'0x76'}, next = {'0x8c', '0x12b3'}
----------------------------------
Block 0x81
0x82: v82(0x70a08231) = CONST 
0x87: v87 = EQ v82(0x70a08231) v33
0x128e: v128e(0x12b3) = CONST 
0x128f: JUMPI v128e(0x12b3) v87
----------------------------------

Begin block 0x8c
prev = {'0x81'}, next = {'0x97', '0x12b6'}
----------------------------------
Block 0x8c
0x8d: v8d(0x75f12b21) = CONST 
0x92: v92 = EQ v8d(0x75f12b21) v33
0x1290: v1290(0x12b6) = CONST 
0x1291: JUMPI v1290(0x12b6) v92
----------------------------------

Begin block 0x97
prev = {'0x8c'}, next = {'0x12b9', '0xa2'}
----------------------------------
Block 0x97
0x98: v98(0x95d89b41) = CONST 
0x9d: v9d = EQ v98(0x95d89b41) v33
0x1292: v1292(0x12b9) = CONST 
0x1293: JUMPI v1292(0x12b9) v9d
----------------------------------

Begin block 0xa2
prev = {'0x97'}, next = {'0x12bc', '0xad'}
----------------------------------
Block 0xa2
0xa3: va3(0xa9059cbb) = CONST 
0xa8: va8 = EQ va3(0xa9059cbb) v33
0x1294: v1294(0x12bc) = CONST 
0x1295: JUMPI v1294(0x12bc) va8
----------------------------------

Begin block 0xad
prev = {'0xa2'}, next = {'0x12bf', '0xb8'}
----------------------------------
Block 0xad
0xae: vae(0xbe9a6555) = CONST 
0xb3: vb3 = EQ vae(0xbe9a6555) v33
0x1296: v1296(0x12bf) = CONST 
0x1297: JUMPI v1296(0x12bf) vb3
----------------------------------

Begin block 0xb8
prev = {'0xad'}, next = {'0x12c2', '0xc3'}
----------------------------------
Block 0xb8
0xb9: vb9(0xc284d621) = CONST 
0xbe: vbe = EQ vb9(0xc284d621) v33
0x1298: v1298(0x12c2) = CONST 
0x1299: JUMPI v1298(0x12c2) vbe
----------------------------------

Begin block 0xc3
prev = {'0xb8'}, next = {'0x12c5', '0xce'}
----------------------------------
Block 0xc3
0xc4: vc4(0xc47f0027) = CONST 
0xc9: vc9 = EQ vc4(0xc47f0027) v33
0x129a: v129a(0x12c5) = CONST 
0x129b: JUMPI v129a(0x12c5) vc9
----------------------------------

Begin block 0xce
prev = {'0xc3'}, next = {'0x12c8', '0xd9'}
----------------------------------
Block 0xce
0xcf: vcf(0xdd62ed3e) = CONST 
0xd4: vd4 = EQ vcf(0xdd62ed3e) v33
0x129c: v129c(0x12c8) = CONST 
0x129d: JUMPI v129c(0x12c8) vd4
----------------------------------

Begin block 0xd9
prev = {'0x0', '0xce'}, next = {}
----------------------------------
Block 0xd9
0xda: vda(0x0) = CONST 
0xdd: REVERT vda(0x0) vda(0x0)
----------------------------------

Begin block 0xde
prev = {}, next = {'0xe5', '0xe9'}
----------------------------------
function name()()
Block 0xde
0xdf: vdf = CALLVALUE 
0xe0: ve0 = ISZERO vdf
0xe1: ve1(0xe9) = CONST 
0xe4: JUMPI ve1(0xe9) ve0
----------------------------------

Begin block 0xe5
prev = {'0xde'}, next = {}
----------------------------------
Block 0xe5
0xe5: ve5(0x0) = CONST 
0xe8: REVERT ve5(0x0) ve5(0x0)
----------------------------------

Begin block 0xe9
prev = {'0xde'}, next = {'0x54a'}
----------------------------------
Block 0xe9
0xea: vea(0xf1) = CONST 
0xed: ved(0x54a) = CONST 
0xf0: JUMP ved(0x54a)
----------------------------------

Begin block 0xf1
prev = {'0x5e0'}, next = {'0x116'}
----------------------------------
Block 0xf1
0xf2: vf2(0x40) = CONST 
0xf4: vf4 = MLOAD vf2(0x40)
0xf7: vf7(0x20) = CONST 
0xf9: vf9 = ADD vf7(0x20) vf4
0xfc: vfc = SUB vf9 vf4
0xfe: MSTORE vf4 vfc
0x102: v102 = MLOAD v56f
0x104: MSTORE vf9 v102
0x105: v105(0x20) = CONST 
0x107: v107 = ADD v105(0x20) vf9
0x10b: v10b = MLOAD v56f
0x10d: v10d(0x20) = CONST 
0x10f: v10f = ADD v10d(0x20) v56f
0x114: v114(0x0) = CONST 
----------------------------------

Begin block 0x116
prev = {'0x127', '0xf1'}, next = {'0x11f', '0x132'}
----------------------------------
Block 0x116
0x116_0x0: v116_0 = PHI v114(0x0) v12b
0x119: v119 = LT v116_0 v10b
0x11a: v11a = ISZERO v119
0x11b: v11b(0x132) = CONST 
0x11e: JUMPI v11b(0x132) v11a
----------------------------------

Begin block 0x11f
prev = {'0x116'}, next = {'0x127'}
----------------------------------
Block 0x11f
0x11f_0x0: v11f_0 = PHI v114(0x0) v12b
0x121: v121 = ADD v10f v11f_0
0x122: v122 = MLOAD v121
0x125: v125 = ADD v107 v11f_0
0x126: MSTORE v125 v122
----------------------------------

Begin block 0x127
prev = {'0x11f'}, next = {'0x116'}
----------------------------------
Block 0x127
0x127_0x0: v127_0 = PHI v114(0x0) v12b
0x128: v128(0x20) = CONST 
0x12b: v12b = ADD v127_0 v128(0x20)
0x12e: v12e(0x116) = CONST 
0x131: JUMP v12e(0x116)
----------------------------------

Begin block 0x132
prev = {'0x116'}, next = {'0x15f', '0x146'}
----------------------------------
Block 0x132
0x13b: v13b = ADD v10b v107
0x13d: v13d(0x1f) = CONST 
0x13f: v13f = AND v13d(0x1f) v10b
0x141: v141 = ISZERO v13f
0x142: v142(0x15f) = CONST 
0x145: JUMPI v142(0x15f) v141
----------------------------------

Begin block 0x146
prev = {'0x132'}, next = {'0x15f'}
----------------------------------
Block 0x146
0x148: v148 = SUB v13b v13f
0x14a: v14a = MLOAD v148
0x14b: v14b(0x1) = CONST 
0x14e: v14e(0x20) = CONST 
0x150: v150 = SUB v14e(0x20) v13f
0x151: v151(0x100) = CONST 
0x154: v154 = EXP v151(0x100) v150
0x155: v155 = SUB v154 v14b(0x1)
0x156: v156 = NOT v155
0x157: v157 = AND v156 v14a
0x159: MSTORE v148 v157
0x15a: v15a(0x20) = CONST 
0x15c: v15c = ADD v15a(0x20) v148
----------------------------------

Begin block 0x15f
prev = {'0x132', '0x146'}, next = {}
----------------------------------
Block 0x15f
0x15f_0x1: v15f_1 = PHI v13b v15c
0x165: v165(0x40) = CONST 
0x167: v167 = MLOAD v165(0x40)
0x16a: v16a = SUB v15f_1 v167
0x16c: RETURN v167 v16a
----------------------------------

Begin block 0x16d
prev = {}, next = {'0x174', '0x178'}
----------------------------------
function stop()()
Block 0x16d
0x16e: v16e = CALLVALUE 
0x16f: v16f = ISZERO v16e
0x170: v170(0x178) = CONST 
0x173: JUMPI v170(0x178) v16f
----------------------------------

Begin block 0x174
prev = {'0x16d'}, next = {}
----------------------------------
Block 0x174
0x174: v174(0x0) = CONST 
0x177: REVERT v174(0x0) v174(0x0)
----------------------------------

Begin block 0x178
prev = {'0x16d'}, next = {'0x5e8'}
----------------------------------
Block 0x178
0x179: v179(0x180) = CONST 
0x17c: v17c(0x5e8) = CONST 
0x17f: JUMP v17c(0x5e8)
----------------------------------

Begin block 0x180
prev = {'0x65e'}, next = {}
----------------------------------
Block 0x180
0x181: STOP 
----------------------------------

Begin block 0x182
prev = {}, next = {'0x189', '0x18d'}
----------------------------------
function approve(address,uint256)()
Block 0x182
0x183: v183 = CALLVALUE 
0x184: v184 = ISZERO v183
0x185: v185(0x18d) = CONST 
0x188: JUMPI v185(0x18d) v184
----------------------------------

Begin block 0x189
prev = {'0x182'}, next = {}
----------------------------------
Block 0x189
0x189: v189(0x0) = CONST 
0x18c: REVERT v189(0x0) v189(0x0)
----------------------------------

Begin block 0x18d
prev = {'0x182'}, next = {'0x660'}
----------------------------------
Block 0x18d
0x18e: v18e(0x1c2) = CONST 
0x191: v191(0x4) = CONST 
0x195: v195 = CALLDATALOAD v191(0x4)
0x196: v196(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1ab: v1ab = AND v196(0xffffffffffffffffffffffffffffffffffffffff) v195
0x1ad: v1ad(0x20) = CONST 
0x1af: v1af(0x24) = ADD v1ad(0x20) v191(0x4)
0x1b4: v1b4 = CALLDATALOAD v1af(0x24)
0x1b6: v1b6(0x20) = CONST 
0x1b8: v1b8(0x44) = ADD v1b6(0x20) v1af(0x24)
0x1be: v1be(0x660) = CONST 
0x1c1: JUMP v1be(0x660)
----------------------------------

Begin block 0x1c2
prev = {'0x821'}, next = {}
----------------------------------
Block 0x1c2
0x1c3: v1c3(0x40) = CONST 
0x1c5: v1c5 = MLOAD v1c3(0x40)
0x1c8: v1c8 = ISZERO v81b(0x1)
0x1c9: v1c9 = ISZERO v1c8
0x1ca: v1ca = ISZERO v1c9
0x1cb: v1cb = ISZERO v1ca
0x1cd: MSTORE v1c5 v1cb
0x1ce: v1ce(0x20) = CONST 
0x1d0: v1d0 = ADD v1ce(0x20) v1c5
0x1d4: v1d4(0x40) = CONST 
0x1d6: v1d6 = MLOAD v1d4(0x40)
0x1d9: v1d9 = SUB v1d0 v1d6
0x1db: RETURN v1d6 v1d9
----------------------------------

Begin block 0x1dc
prev = {}, next = {'0x1e3', '0x1e7'}
----------------------------------
function totalSupply()()
Block 0x1dc
0x1dd: v1dd = CALLVALUE 
0x1de: v1de = ISZERO v1dd
0x1df: v1df(0x1e7) = CONST 
0x1e2: JUMPI v1df(0x1e7) v1de
----------------------------------

Begin block 0x1e3
prev = {'0x1dc'}, next = {}
----------------------------------
Block 0x1e3
0x1e3: v1e3(0x0) = CONST 
0x1e6: REVERT v1e3(0x0) v1e3(0x0)
----------------------------------

Begin block 0x1e7
prev = {'0x1dc'}, next = {'0x827'}
----------------------------------
Block 0x1e7
0x1e8: v1e8(0x1ef) = CONST 
0x1eb: v1eb(0x827) = CONST 
0x1ee: JUMP v1eb(0x827)
----------------------------------

Begin block 0x1ef
prev = {'0x827'}, next = {}
----------------------------------
Block 0x1ef
0x1f0: v1f0(0x40) = CONST 
0x1f2: v1f2 = MLOAD v1f0(0x40)
0x1f6: MSTORE v1f2 v82a
0x1f7: v1f7(0x20) = CONST 
0x1f9: v1f9 = ADD v1f7(0x20) v1f2
0x1fd: v1fd(0x40) = CONST 
0x1ff: v1ff = MLOAD v1fd(0x40)
0x202: v202 = SUB v1f9 v1ff
0x204: RETURN v1ff v202
----------------------------------

Begin block 0x205
prev = {}, next = {'0x20c', '0x210'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x205
0x206: v206 = CALLVALUE 
0x207: v207 = ISZERO v206
0x208: v208(0x210) = CONST 
0x20b: JUMPI v208(0x210) v207
----------------------------------

Begin block 0x20c
prev = {'0x205'}, next = {}
----------------------------------
Block 0x20c
0x20c: v20c(0x0) = CONST 
0x20f: REVERT v20c(0x0) v20c(0x0)
----------------------------------

Begin block 0x210
prev = {'0x205'}, next = {'0x82d'}
----------------------------------
Block 0x210
0x211: v211(0x264) = CONST 
0x214: v214(0x4) = CONST 
0x218: v218 = CALLDATALOAD v214(0x4)
0x219: v219(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x22e: v22e = AND v219(0xffffffffffffffffffffffffffffffffffffffff) v218
0x230: v230(0x20) = CONST 
0x232: v232(0x24) = ADD v230(0x20) v214(0x4)
0x237: v237 = CALLDATALOAD v232(0x24)
0x238: v238(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x24d: v24d = AND v238(0xffffffffffffffffffffffffffffffffffffffff) v237
0x24f: v24f(0x20) = CONST 
0x251: v251(0x44) = ADD v24f(0x20) v232(0x24)
0x256: v256 = CALLDATALOAD v251(0x44)
0x258: v258(0x20) = CONST 
0x25a: v25a(0x64) = ADD v258(0x20) v251(0x44)
0x260: v260(0x82d) = CONST 
0x263: JUMP v260(0x82d)
----------------------------------

Begin block 0x264
prev = {'0xb63'}, next = {}
----------------------------------
Block 0x264
0x265: v265(0x40) = CONST 
0x267: v267 = MLOAD v265(0x40)
0x26a: v26a = ISZERO vb5d(0x1)
0x26b: v26b = ISZERO v26a
0x26c: v26c = ISZERO v26b
0x26d: v26d = ISZERO v26c
0x26f: MSTORE v267 v26d
0x270: v270(0x20) = CONST 
0x272: v272 = ADD v270(0x20) v267
0x276: v276(0x40) = CONST 
0x278: v278 = MLOAD v276(0x40)
0x27b: v27b = SUB v272 v278
0x27d: RETURN v278 v27b
----------------------------------

Begin block 0x27e
prev = {}, next = {'0x285', '0x289'}
----------------------------------
function decimals()()
Block 0x27e
0x27f: v27f = CALLVALUE 
0x280: v280 = ISZERO v27f
0x281: v281(0x289) = CONST 
0x284: JUMPI v281(0x289) v280
----------------------------------

Begin block 0x285
prev = {'0x27e'}, next = {}
----------------------------------
Block 0x285
0x285: v285(0x0) = CONST 
0x288: REVERT v285(0x0) v285(0x0)
----------------------------------

Begin block 0x289
prev = {'0x27e'}, next = {'0xb6a'}
----------------------------------
Block 0x289
0x28a: v28a(0x291) = CONST 
0x28d: v28d(0xb6a) = CONST 
0x290: JUMP v28d(0xb6a)
----------------------------------

Begin block 0x291
prev = {'0xb6a'}, next = {}
----------------------------------
Block 0x291
0x292: v292(0x40) = CONST 
0x294: v294 = MLOAD v292(0x40)
0x297: v297(0xff) = CONST 
0x299: v299 = AND v297(0xff) vb7a
0x29a: v29a(0xff) = CONST 
0x29c: v29c = AND v29a(0xff) v299
0x29e: MSTORE v294 v29c
0x29f: v29f(0x20) = CONST 
0x2a1: v2a1 = ADD v29f(0x20) v294
0x2a5: v2a5(0x40) = CONST 
0x2a7: v2a7 = MLOAD v2a5(0x40)
0x2aa: v2aa = SUB v2a1 v2a7
0x2ac: RETURN v2a7 v2aa
----------------------------------

Begin block 0x2ad
prev = {}, next = {'0x2b8', '0x2b4'}
----------------------------------
function burn(uint256)()
Block 0x2ad
0x2ae: v2ae = CALLVALUE 
0x2af: v2af = ISZERO v2ae
0x2b0: v2b0(0x2b8) = CONST 
0x2b3: JUMPI v2b0(0x2b8) v2af
----------------------------------

Begin block 0x2b4
prev = {'0x2ad'}, next = {}
----------------------------------
Block 0x2b4
0x2b4: v2b4(0x0) = CONST 
0x2b7: REVERT v2b4(0x0) v2b4(0x0)
----------------------------------

Begin block 0x2b8
prev = {'0x2ad'}, next = {'0xb7d'}
----------------------------------
Block 0x2b8
0x2b9: v2b9(0x2ce) = CONST 
0x2bc: v2bc(0x4) = CONST 
0x2c0: v2c0 = CALLDATALOAD v2bc(0x4)
0x2c2: v2c2(0x20) = CONST 
0x2c4: v2c4(0x24) = ADD v2c2(0x20) v2bc(0x4)
0x2ca: v2ca(0xb7d) = CONST 
0x2cd: JUMP v2ca(0xb7d)
----------------------------------

Begin block 0x2ce
prev = {'0xca0'}, next = {}
----------------------------------
Block 0x2ce
0x2cf: STOP 
----------------------------------

Begin block 0x2d0
prev = {}, next = {'0x2d7', '0x2db'}
----------------------------------
function balanceOf(address)()
Block 0x2d0
0x2d1: v2d1 = CALLVALUE 
0x2d2: v2d2 = ISZERO v2d1
0x2d3: v2d3(0x2db) = CONST 
0x2d6: JUMPI v2d3(0x2db) v2d2
----------------------------------

Begin block 0x2d7
prev = {'0x2d0'}, next = {}
----------------------------------
Block 0x2d7
0x2d7: v2d7(0x0) = CONST 
0x2da: REVERT v2d7(0x0) v2d7(0x0)
----------------------------------

Begin block 0x2db
prev = {'0x2d0'}, next = {'0xca3'}
----------------------------------
Block 0x2db
0x2dc: v2dc(0x307) = CONST 
0x2df: v2df(0x4) = CONST 
0x2e3: v2e3 = CALLDATALOAD v2df(0x4)
0x2e4: v2e4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2f9: v2f9 = AND v2e4(0xffffffffffffffffffffffffffffffffffffffff) v2e3
0x2fb: v2fb(0x20) = CONST 
0x2fd: v2fd(0x24) = ADD v2fb(0x20) v2df(0x4)
0x303: v303(0xca3) = CONST 
0x306: JUMP v303(0xca3)
----------------------------------

Begin block 0x307
prev = {'0xca3'}, next = {}
----------------------------------
Block 0x307
0x308: v308(0x40) = CONST 
0x30a: v30a = MLOAD v308(0x40)
0x30e: MSTORE v30a vcb8
0x30f: v30f(0x20) = CONST 
0x311: v311 = ADD v30f(0x20) v30a
0x315: v315(0x40) = CONST 
0x317: v317 = MLOAD v315(0x40)
0x31a: v31a = SUB v311 v317
0x31c: RETURN v317 v31a
----------------------------------

Begin block 0x31d
prev = {}, next = {'0x328', '0x324'}
----------------------------------
function stopped()()
Block 0x31d
0x31e: v31e = CALLVALUE 
0x31f: v31f = ISZERO v31e
0x320: v320(0x328) = CONST 
0x323: JUMPI v320(0x328) v31f
----------------------------------

Begin block 0x324
prev = {'0x31d'}, next = {}
----------------------------------
Block 0x324
0x324: v324(0x0) = CONST 
0x327: REVERT v324(0x0) v324(0x0)
----------------------------------

Begin block 0x328
prev = {'0x31d'}, next = {'0xcbb'}
----------------------------------
Block 0x328
0x329: v329(0x330) = CONST 
0x32c: v32c(0xcbb) = CONST 
0x32f: JUMP v32c(0xcbb)
----------------------------------

Begin block 0x330
prev = {'0xcbb'}, next = {}
----------------------------------
Block 0x330
0x331: v331(0x40) = CONST 
0x333: v333 = MLOAD v331(0x40)
0x336: v336 = ISZERO vccb
0x337: v337 = ISZERO v336
0x338: v338 = ISZERO v337
0x339: v339 = ISZERO v338
0x33b: MSTORE v333 v339
0x33c: v33c(0x20) = CONST 
0x33e: v33e = ADD v33c(0x20) v333
0x342: v342(0x40) = CONST 
0x344: v344 = MLOAD v342(0x40)
0x347: v347 = SUB v33e v344
0x349: RETURN v344 v347
----------------------------------

Begin block 0x34a
prev = {}, next = {'0x355', '0x351'}
----------------------------------
function symbol()()
Block 0x34a
0x34b: v34b = CALLVALUE 
0x34c: v34c = ISZERO v34b
0x34d: v34d(0x355) = CONST 
0x350: JUMPI v34d(0x355) v34c
----------------------------------

Begin block 0x351
prev = {'0x34a'}, next = {}
----------------------------------
Block 0x351
0x351: v351(0x0) = CONST 
0x354: REVERT v351(0x0) v351(0x0)
----------------------------------

Begin block 0x355
prev = {'0x34a'}, next = {'0xcce'}
----------------------------------
Block 0x355
0x356: v356(0x35d) = CONST 
0x359: v359(0xcce) = CONST 
0x35c: JUMP v359(0xcce)
----------------------------------

Begin block 0x35d
prev = {'0xd64'}, next = {'0x382'}
----------------------------------
Block 0x35d
0x35e: v35e(0x40) = CONST 
0x360: v360 = MLOAD v35e(0x40)
0x363: v363(0x20) = CONST 
0x365: v365 = ADD v363(0x20) v360
0x368: v368 = SUB v365 v360
0x36a: MSTORE v360 v368
0x36e: v36e = MLOAD vcf3
0x370: MSTORE v365 v36e
0x371: v371(0x20) = CONST 
0x373: v373 = ADD v371(0x20) v365
0x377: v377 = MLOAD vcf3
0x379: v379(0x20) = CONST 
0x37b: v37b = ADD v379(0x20) vcf3
0x380: v380(0x0) = CONST 
----------------------------------

Begin block 0x382
prev = {'0x35d', '0x393'}, next = {'0x38b', '0x39e'}
----------------------------------
Block 0x382
0x382_0x0: v382_0 = PHI v380(0x0) v397
0x385: v385 = LT v382_0 v377
0x386: v386 = ISZERO v385
0x387: v387(0x39e) = CONST 
0x38a: JUMPI v387(0x39e) v386
----------------------------------

Begin block 0x38b
prev = {'0x382'}, next = {'0x393'}
----------------------------------
Block 0x38b
0x38b_0x0: v38b_0 = PHI v380(0x0) v397
0x38d: v38d = ADD v37b v38b_0
0x38e: v38e = MLOAD v38d
0x391: v391 = ADD v373 v38b_0
0x392: MSTORE v391 v38e
----------------------------------

Begin block 0x393
prev = {'0x38b'}, next = {'0x382'}
----------------------------------
Block 0x393
0x393_0x0: v393_0 = PHI v380(0x0) v397
0x394: v394(0x20) = CONST 
0x397: v397 = ADD v393_0 v394(0x20)
0x39a: v39a(0x382) = CONST 
0x39d: JUMP v39a(0x382)
----------------------------------

Begin block 0x39e
prev = {'0x382'}, next = {'0x3cb', '0x3b2'}
----------------------------------
Block 0x39e
0x3a7: v3a7 = ADD v377 v373
0x3a9: v3a9(0x1f) = CONST 
0x3ab: v3ab = AND v3a9(0x1f) v377
0x3ad: v3ad = ISZERO v3ab
0x3ae: v3ae(0x3cb) = CONST 
0x3b1: JUMPI v3ae(0x3cb) v3ad
----------------------------------

Begin block 0x3b2
prev = {'0x39e'}, next = {'0x3cb'}
----------------------------------
Block 0x3b2
0x3b4: v3b4 = SUB v3a7 v3ab
0x3b6: v3b6 = MLOAD v3b4
0x3b7: v3b7(0x1) = CONST 
0x3ba: v3ba(0x20) = CONST 
0x3bc: v3bc = SUB v3ba(0x20) v3ab
0x3bd: v3bd(0x100) = CONST 
0x3c0: v3c0 = EXP v3bd(0x100) v3bc
0x3c1: v3c1 = SUB v3c0 v3b7(0x1)
0x3c2: v3c2 = NOT v3c1
0x3c3: v3c3 = AND v3c2 v3b6
0x3c5: MSTORE v3b4 v3c3
0x3c6: v3c6(0x20) = CONST 
0x3c8: v3c8 = ADD v3c6(0x20) v3b4
----------------------------------

Begin block 0x3cb
prev = {'0x39e', '0x3b2'}, next = {}
----------------------------------
Block 0x3cb
0x3cb_0x1: v3cb_1 = PHI v3a7 v3c8
0x3d1: v3d1(0x40) = CONST 
0x3d3: v3d3 = MLOAD v3d1(0x40)
0x3d6: v3d6 = SUB v3cb_1 v3d3
0x3d8: RETURN v3d3 v3d6
----------------------------------

Begin block 0x3d9
prev = {}, next = {'0x3e4', '0x3e0'}
----------------------------------
function transfer(address,uint256)()
Block 0x3d9
0x3da: v3da = CALLVALUE 
0x3db: v3db = ISZERO v3da
0x3dc: v3dc(0x3e4) = CONST 
0x3df: JUMPI v3dc(0x3e4) v3db
----------------------------------

Begin block 0x3e0
prev = {'0x3d9'}, next = {}
----------------------------------
Block 0x3e0
0x3e0: v3e0(0x0) = CONST 
0x3e3: REVERT v3e0(0x0) v3e0(0x0)
----------------------------------

Begin block 0x3e4
prev = {'0x3d9'}, next = {'0xd6c'}
----------------------------------
Block 0x3e4
0x3e5: v3e5(0x419) = CONST 
0x3e8: v3e8(0x4) = CONST 
0x3ec: v3ec = CALLDATALOAD v3e8(0x4)
0x3ed: v3ed(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x402: v402 = AND v3ed(0xffffffffffffffffffffffffffffffffffffffff) v3ec
0x404: v404(0x20) = CONST 
0x406: v406(0x24) = ADD v404(0x20) v3e8(0x4)
0x40b: v40b = CALLDATALOAD v406(0x24)
0x40d: v40d(0x20) = CONST 
0x40f: v40f(0x44) = ADD v40d(0x20) v406(0x24)
0x415: v415(0xd6c) = CONST 
0x418: JUMP v415(0xd6c)
----------------------------------

Begin block 0x419
prev = {'0xf8d'}, next = {}
----------------------------------
Block 0x419
0x41a: v41a(0x40) = CONST 
0x41c: v41c = MLOAD v41a(0x40)
0x41f: v41f = ISZERO vf87(0x1)
0x420: v420 = ISZERO v41f
0x421: v421 = ISZERO v420
0x422: v422 = ISZERO v421
0x424: MSTORE v41c v422
0x425: v425(0x20) = CONST 
0x427: v427 = ADD v425(0x20) v41c
0x42b: v42b(0x40) = CONST 
0x42d: v42d = MLOAD v42b(0x40)
0x430: v430 = SUB v427 v42d
0x432: RETURN v42d v430
----------------------------------

Begin block 0x433
prev = {}, next = {'0x43a', '0x43e'}
----------------------------------
function start()()
Block 0x433
0x434: v434 = CALLVALUE 
0x435: v435 = ISZERO v434
0x436: v436(0x43e) = CONST 
0x439: JUMPI v436(0x43e) v435
----------------------------------

Begin block 0x43a
prev = {'0x433'}, next = {}
----------------------------------
Block 0x43a
0x43a: v43a(0x0) = CONST 
0x43d: REVERT v43a(0x0) v43a(0x0)
----------------------------------

Begin block 0x43e
prev = {'0x433'}, next = {'0xf93'}
----------------------------------
Block 0x43e
0x43f: v43f(0x446) = CONST 
0x442: v442(0xf93) = CONST 
0x445: JUMP v442(0xf93)
----------------------------------

Begin block 0x446
prev = {'0x1009'}, next = {}
----------------------------------
Block 0x446
0x447: STOP 
----------------------------------

Begin block 0x448
prev = {}, next = {'0x44f', '0x453'}
----------------------------------
function LaserProtocol(address)()
Block 0x448
0x449: v449 = CALLVALUE 
0x44a: v44a = ISZERO v449
0x44b: v44b(0x453) = CONST 
0x44e: JUMPI v44b(0x453) v44a
----------------------------------

Begin block 0x44f
prev = {'0x448'}, next = {}
----------------------------------
Block 0x44f
0x44f: v44f(0x0) = CONST 
0x452: REVERT v44f(0x0) v44f(0x0)
----------------------------------

Begin block 0x453
prev = {'0x448'}, next = {'0x100b'}
----------------------------------
Block 0x453
0x454: v454(0x47f) = CONST 
0x457: v457(0x4) = CONST 
0x45b: v45b = CALLDATALOAD v457(0x4)
0x45c: v45c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x471: v471 = AND v45c(0xffffffffffffffffffffffffffffffffffffffff) v45b
0x473: v473(0x20) = CONST 
0x475: v475(0x24) = ADD v473(0x20) v457(0x4)
0x47b: v47b(0x100b) = CONST 
0x47e: JUMP v47b(0x100b)
----------------------------------

Begin block 0x47f
prev = {'0x1112'}, next = {}
----------------------------------
Block 0x47f
0x480: STOP 
----------------------------------

Begin block 0x481
prev = {}, next = {'0x48c', '0x488'}
----------------------------------
function setName(string)()
Block 0x481
0x482: v482 = CALLVALUE 
0x483: v483 = ISZERO v482
0x484: v484(0x48c) = CONST 
0x487: JUMPI v484(0x48c) v483
----------------------------------

Begin block 0x488
prev = {'0x481'}, next = {}
----------------------------------
Block 0x488
0x488: v488(0x0) = CONST 
0x48b: REVERT v488(0x0) v488(0x0)
----------------------------------

Begin block 0x48c
prev = {'0x481'}, next = {'0x1115'}
----------------------------------
Block 0x48c
0x48d: v48d(0x4dc) = CONST 
0x490: v490(0x4) = CONST 
0x494: v494 = CALLDATALOAD v490(0x4)
0x496: v496(0x20) = CONST 
0x498: v498(0x24) = ADD v496(0x20) v490(0x4)
0x49b: v49b = ADD v490(0x4) v494
0x49d: v49d = CALLDATALOAD v49b
0x49f: v49f(0x20) = CONST 
0x4a1: v4a1 = ADD v49f(0x20) v49b
0x4a5: v4a5(0x1f) = CONST 
0x4a7: v4a7 = ADD v4a5(0x1f) v49d
0x4a8: v4a8(0x20) = CONST 
0x4ac: v4ac = DIV v4a7 v4a8(0x20)
0x4ad: v4ad = MUL v4ac v4a8(0x20)
0x4ae: v4ae(0x20) = CONST 
0x4b0: v4b0 = ADD v4ae(0x20) v4ad
0x4b1: v4b1(0x40) = CONST 
0x4b3: v4b3 = MLOAD v4b1(0x40)
0x4b6: v4b6 = ADD v4b3 v4b0
0x4b7: v4b7(0x40) = CONST 
0x4b9: MSTORE v4b7(0x40) v4b6
0x4c1: MSTORE v4b3 v49d
0x4c2: v4c2(0x20) = CONST 
0x4c4: v4c4 = ADD v4c2(0x20) v4b3
0x4ca: CALLDATACOPY v4c4 v4a1 v49d
0x4cc: v4cc = ADD v4c4 v49d
0x4d8: v4d8(0x1115) = CONST 
0x4db: JUMP v4d8(0x1115)
----------------------------------

Begin block 0x4dc
prev = {'0x1187'}, next = {}
----------------------------------
Block 0x4dc
0x4dd: STOP 
----------------------------------

Begin block 0x4de
prev = {}, next = {'0x4e9', '0x4e5'}
----------------------------------
function allowance(address,address)()
Block 0x4de
0x4df: v4df = CALLVALUE 
0x4e0: v4e0 = ISZERO v4df
0x4e1: v4e1(0x4e9) = CONST 
0x4e4: JUMPI v4e1(0x4e9) v4e0
----------------------------------

Begin block 0x4e5
prev = {'0x4de'}, next = {}
----------------------------------
Block 0x4e5
0x4e5: v4e5(0x0) = CONST 
0x4e8: REVERT v4e5(0x0) v4e5(0x0)
----------------------------------

Begin block 0x4e9
prev = {'0x4de'}, next = {'0x118a'}
----------------------------------
Block 0x4e9
0x4ea: v4ea(0x534) = CONST 
0x4ed: v4ed(0x4) = CONST 
0x4f1: v4f1 = CALLDATALOAD v4ed(0x4)
0x4f2: v4f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x507: v507 = AND v4f2(0xffffffffffffffffffffffffffffffffffffffff) v4f1
0x509: v509(0x20) = CONST 
0x50b: v50b(0x24) = ADD v509(0x20) v4ed(0x4)
0x510: v510 = CALLDATALOAD v50b(0x24)
0x511: v511(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x526: v526 = AND v511(0xffffffffffffffffffffffffffffffffffffffff) v510
0x528: v528(0x20) = CONST 
0x52a: v52a(0x44) = ADD v528(0x20) v50b(0x24)
0x530: v530(0x118a) = CONST 
0x533: JUMP v530(0x118a)
----------------------------------

Begin block 0x534
prev = {'0x118a'}, next = {}
----------------------------------
Block 0x534
0x535: v535(0x40) = CONST 
0x537: v537 = MLOAD v535(0x40)
0x53b: MSTORE v537 v11ac
0x53c: v53c(0x20) = CONST 
0x53e: v53e = ADD v53c(0x20) v537
0x542: v542(0x40) = CONST 
0x544: v544 = MLOAD v542(0x40)
0x547: v547 = SUB v53e v544
0x549: RETURN v544 v547
----------------------------------

Begin block 0x54a
prev = {'0xe9'}, next = {'0x59a', '0x5e0'}
----------------------------------
Block 0x54a
0x54b: v54b(0x0) = CONST 
0x54e: v54e = SLOAD v54b(0x0)
0x54f: v54f(0x1) = CONST 
0x552: v552(0x1) = CONST 
0x554: v554 = AND v552(0x1) v54e
0x555: v555 = ISZERO v554
0x556: v556(0x100) = CONST 
0x559: v559 = MUL v556(0x100) v555
0x55a: v55a = SUB v559 v54f(0x1)
0x55b: v55b = AND v55a v54e
0x55c: v55c(0x2) = CONST 
0x55f: v55f = DIV v55b v55c(0x2)
0x561: v561(0x1f) = CONST 
0x563: v563 = ADD v561(0x1f) v55f
0x564: v564(0x20) = CONST 
0x568: v568 = DIV v563 v564(0x20)
0x569: v569 = MUL v568 v564(0x20)
0x56a: v56a(0x20) = CONST 
0x56c: v56c = ADD v56a(0x20) v569
0x56d: v56d(0x40) = CONST 
0x56f: v56f = MLOAD v56d(0x40)
0x572: v572 = ADD v56f v56c
0x573: v573(0x40) = CONST 
0x575: MSTORE v573(0x40) v572
0x57c: MSTORE v56f v55f
0x57d: v57d(0x20) = CONST 
0x57f: v57f = ADD v57d(0x20) v56f
0x582: v582 = SLOAD v54b(0x0)
0x583: v583(0x1) = CONST 
0x586: v586(0x1) = CONST 
0x588: v588 = AND v586(0x1) v582
0x589: v589 = ISZERO v588
0x58a: v58a(0x100) = CONST 
0x58d: v58d = MUL v58a(0x100) v589
0x58e: v58e = SUB v58d v583(0x1)
0x58f: v58f = AND v58e v582
0x590: v590(0x2) = CONST 
0x593: v593 = DIV v58f v590(0x2)
0x595: v595 = ISZERO v593
0x596: v596(0x5e0) = CONST 
0x599: JUMPI v596(0x5e0) v595
----------------------------------

Begin block 0x59a
prev = {'0x54a'}, next = {'0x5b5', '0x5a2'}
----------------------------------
Block 0x59a
0x59b: v59b(0x1f) = CONST 
0x59d: v59d = LT v59b(0x1f) v593
0x59e: v59e(0x5b5) = CONST 
0x5a1: JUMPI v59e(0x5b5) v59d
----------------------------------

Begin block 0x5a2
prev = {'0x59a'}, next = {'0x5e0'}
----------------------------------
Block 0x5a2
0x5a2: v5a2(0x100) = CONST 
0x5a7: v5a7 = SLOAD v54b(0x0)
0x5a8: v5a8 = DIV v5a7 v5a2(0x100)
0x5a9: v5a9 = MUL v5a8 v5a2(0x100)
0x5ab: MSTORE v57f v5a9
0x5ad: v5ad(0x20) = CONST 
0x5af: v5af = ADD v5ad(0x20) v57f
0x5b1: v5b1(0x5e0) = CONST 
0x5b4: JUMP v5b1(0x5e0)
----------------------------------

Begin block 0x5b5
prev = {'0x59a'}, next = {'0x5c3'}
----------------------------------
Block 0x5b5
0x5b7: v5b7 = ADD v57f v593
0x5ba: v5ba(0x0) = CONST 
0x5bc: MSTORE v5ba(0x0) v54b(0x0)
0x5bd: v5bd(0x20) = CONST 
0x5bf: v5bf(0x0) = CONST 
0x5c1: v5c1 = SHA3 v5bf(0x0) v5bd(0x20)
----------------------------------

Begin block 0x5c3
prev = {'0x5b5', '0x5c3'}, next = {'0x5c3', '0x5d7'}
----------------------------------
Block 0x5c3
0x5c3_0x0: v5c3_0 = PHI v57f v5cf
0x5c3_0x1: v5c3_1 = PHI v5c1 v5cb
0x5c5: v5c5 = SLOAD v5c3_1
0x5c7: MSTORE v5c3_0 v5c5
0x5c9: v5c9(0x1) = CONST 
0x5cb: v5cb = ADD v5c9(0x1) v5c3_1
0x5cd: v5cd(0x20) = CONST 
0x5cf: v5cf = ADD v5cd(0x20) v5c3_0
0x5d2: v5d2 = GT v5b7 v5cf
0x5d3: v5d3(0x5c3) = CONST 
0x5d6: JUMPI v5d3(0x5c3) v5d2
----------------------------------

Begin block 0x5d7
prev = {'0x5c3'}, next = {'0x5e0'}
----------------------------------
Block 0x5d7
0x5d9: v5d9 = SUB v5cf v5b7
0x5da: v5da(0x1f) = CONST 
0x5dc: v5dc = AND v5da(0x1f) v5d9
0x5de: v5de = ADD v5b7 v5dc
----------------------------------

Begin block 0x5e0
prev = {'0x5a2', '0x54a', '0x5d7'}, next = {'0xf1'}
----------------------------------
Block 0x5e0
0x5e7: JUMP vea(0xf1)
----------------------------------

Begin block 0x5e8
prev = {'0x178'}, next = {'0x640', '0x641'}
----------------------------------
Block 0x5e8
0x5e9: v5e9 = CALLER 
0x5ea: v5ea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5ff: v5ff = AND v5ea(0xffffffffffffffffffffffffffffffffffffffff) v5e9
0x600: v600(0x6) = CONST 
0x602: v602(0x1) = CONST 
0x605: v605 = SLOAD v600(0x6)
0x607: v607(0x100) = CONST 
0x60a: v60a(0x100) = EXP v607(0x100) v602(0x1)
0x60c: v60c = DIV v605 v60a(0x100)
0x60d: v60d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x622: v622 = AND v60d(0xffffffffffffffffffffffffffffffffffffffff) v60c
0x623: v623(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x638: v638 = AND v623(0xffffffffffffffffffffffffffffffffffffffff) v622
0x639: v639 = EQ v638 v5ff
0x63a: v63a = ISZERO v639
0x63b: v63b = ISZERO v63a
0x63c: v63c(0x641) = CONST 
0x63f: JUMPI v63c(0x641) v63b
----------------------------------

Begin block 0x640
prev = {'0x5e8'}, next = {}
----------------------------------
Block 0x640
0x640: THROW 
----------------------------------

Begin block 0x641
prev = {'0x5e8'}, next = {'0x65d'}
----------------------------------
Block 0x641
0x642: v642(0x1) = CONST 
0x644: v644(0x6) = CONST 
0x646: v646(0x0) = CONST 
0x648: v648(0x100) = CONST 
0x64b: v64b(0x1) = EXP v648(0x100) v646(0x0)
0x64d: v64d = SLOAD v644(0x6)
0x64f: v64f(0xff) = CONST 
0x651: v651(0xff) = MUL v64f(0xff) v64b(0x1)
0x652: v652(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v651(0xff)
0x653: v653 = AND v652(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v64d
0x656: v656(0x0) = ISZERO v642(0x1)
0x657: v657(0x1) = ISZERO v656(0x0)
0x658: v658(0x1) = MUL v657(0x1) v64b(0x1)
0x659: v659 = OR v658(0x1) v653
0x65b: SSTORE v644(0x6) v659
----------------------------------

Begin block 0x65d
prev = {'0x641'}, next = {'0x65e'}
----------------------------------
Block 0x65d
----------------------------------

Begin block 0x65e
prev = {'0x65d'}, next = {'0x180'}
----------------------------------
Block 0x65e
0x65f: JUMP v179(0x180)
----------------------------------

Begin block 0x660
prev = {'0x18d'}, next = {'0x67a', '0x67b'}
----------------------------------
Block 0x660
0x661: v661(0x0) = CONST 
0x663: v663(0x6) = CONST 
0x665: v665(0x0) = CONST 
0x668: v668 = SLOAD v663(0x6)
0x66a: v66a(0x100) = CONST 
0x66d: v66d(0x1) = EXP v66a(0x100) v665(0x0)
0x66f: v66f = DIV v668 v66d(0x1)
0x670: v670(0xff) = CONST 
0x672: v672 = AND v670(0xff) v66f
0x673: v673 = ISZERO v672
0x674: v674 = ISZERO v673
0x675: v675 = ISZERO v674
0x676: v676(0x67b) = CONST 
0x679: JUMPI v676(0x67b) v675
----------------------------------

Begin block 0x67a
prev = {'0x660'}, next = {}
----------------------------------
Block 0x67a
0x67a: THROW 
----------------------------------

Begin block 0x67b
prev = {'0x660'}, next = {'0x69d', '0x69e'}
----------------------------------
Block 0x67b
0x67c: v67c = CALLER 
0x67d: v67d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x692: v692 = AND v67d(0xffffffffffffffffffffffffffffffffffffffff) v67c
0x693: v693(0x0) = CONST 
0x695: v695 = EQ v693(0x0) v692
0x696: v696 = ISZERO v695
0x697: v697 = ISZERO v696
0x698: v698 = ISZERO v697
0x699: v699(0x69e) = CONST 
0x69c: JUMPI v699(0x69e) v698
----------------------------------

Begin block 0x69d
prev = {'0x67b'}, next = {}
----------------------------------
Block 0x69d
0x69d: THROW 
----------------------------------

Begin block 0x69e
prev = {'0x67b'}, next = {'0x6a8', '0x729'}
----------------------------------
Block 0x69e
0x69f: v69f(0x0) = CONST 
0x6a2: v6a2 = EQ v1b4 v69f(0x0)
0x6a4: v6a4(0x729) = CONST 
0x6a7: JUMPI v6a4(0x729) v6a2
----------------------------------

Begin block 0x6a8
prev = {'0x69e'}, next = {'0x729'}
----------------------------------
Block 0x6a8
0x6a9: v6a9(0x0) = CONST 
0x6ab: v6ab(0x4) = CONST 
0x6ad: v6ad(0x0) = CONST 
0x6af: v6af = CALLER 
0x6b0: v6b0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c5: v6c5 = AND v6b0(0xffffffffffffffffffffffffffffffffffffffff) v6af
0x6c6: v6c6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6db: v6db = AND v6c6(0xffffffffffffffffffffffffffffffffffffffff) v6c5
0x6dd: MSTORE v6ad(0x0) v6db
0x6de: v6de(0x20) = CONST 
0x6e0: v6e0(0x20) = ADD v6de(0x20) v6ad(0x0)
0x6e3: MSTORE v6e0(0x20) v6ab(0x4)
0x6e4: v6e4(0x20) = CONST 
0x6e6: v6e6(0x40) = ADD v6e4(0x20) v6e0(0x20)
0x6e7: v6e7(0x0) = CONST 
0x6e9: v6e9 = SHA3 v6e7(0x0) v6e6(0x40)
0x6ea: v6ea(0x0) = CONST 
0x6ed: v6ed(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x702: v702 = AND v6ed(0xffffffffffffffffffffffffffffffffffffffff) v1ab
0x703: v703(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x718: v718 = AND v703(0xffffffffffffffffffffffffffffffffffffffff) v702
0x71a: MSTORE v6ea(0x0) v718
0x71b: v71b(0x20) = CONST 
0x71d: v71d(0x20) = ADD v71b(0x20) v6ea(0x0)
0x720: MSTORE v71d(0x20) v6e9
0x721: v721(0x20) = CONST 
0x723: v723(0x40) = ADD v721(0x20) v71d(0x20)
0x724: v724(0x0) = CONST 
0x726: v726 = SHA3 v724(0x0) v723(0x40)
0x727: v727 = SLOAD v726
0x728: v728 = EQ v727 v6a9(0x0)
----------------------------------

Begin block 0x729
prev = {'0x6a8', '0x69e'}, next = {'0x734', '0x730'}
----------------------------------
Block 0x729
0x729_0x0: v729_0 = PHI v6a2 v728
0x72a: v72a = ISZERO v729_0
0x72b: v72b = ISZERO v72a
0x72c: v72c(0x734) = CONST 
0x72f: JUMPI v72c(0x734) v72b
----------------------------------

Begin block 0x730
prev = {'0x729'}, next = {}
----------------------------------
Block 0x730
0x730: v730(0x0) = CONST 
0x733: REVERT v730(0x0) v730(0x0)
----------------------------------

Begin block 0x734
prev = {'0x729'}, next = {'0x81f'}
----------------------------------
Block 0x734
0x736: v736(0x4) = CONST 
0x738: v738(0x0) = CONST 
0x73a: v73a = CALLER 
0x73b: v73b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x750: v750 = AND v73b(0xffffffffffffffffffffffffffffffffffffffff) v73a
0x751: v751(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x766: v766 = AND v751(0xffffffffffffffffffffffffffffffffffffffff) v750
0x768: MSTORE v738(0x0) v766
0x769: v769(0x20) = CONST 
0x76b: v76b(0x20) = ADD v769(0x20) v738(0x0)
0x76e: MSTORE v76b(0x20) v736(0x4)
0x76f: v76f(0x20) = CONST 
0x771: v771(0x40) = ADD v76f(0x20) v76b(0x20)
0x772: v772(0x0) = CONST 
0x774: v774 = SHA3 v772(0x0) v771(0x40)
0x775: v775(0x0) = CONST 
0x778: v778(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78d: v78d = AND v778(0xffffffffffffffffffffffffffffffffffffffff) v1ab
0x78e: v78e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a3: v7a3 = AND v78e(0xffffffffffffffffffffffffffffffffffffffff) v78d
0x7a5: MSTORE v775(0x0) v7a3
0x7a6: v7a6(0x20) = CONST 
0x7a8: v7a8(0x20) = ADD v7a6(0x20) v775(0x0)
0x7ab: MSTORE v7a8(0x20) v774
0x7ac: v7ac(0x20) = CONST 
0x7ae: v7ae(0x40) = ADD v7ac(0x20) v7a8(0x20)
0x7af: v7af(0x0) = CONST 
0x7b1: v7b1 = SHA3 v7af(0x0) v7ae(0x40)
0x7b4: SSTORE v7b1 v1b4
0x7b7: v7b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7cc: v7cc = AND v7b7(0xffffffffffffffffffffffffffffffffffffffff) v1ab
0x7cd: v7cd = CALLER 
0x7ce: v7ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e3: v7e3 = AND v7ce(0xffffffffffffffffffffffffffffffffffffffff) v7cd
0x7e4: v7e4(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x806: v806(0x40) = CONST 
0x808: v808 = MLOAD v806(0x40)
0x80c: MSTORE v808 v1b4
0x80d: v80d(0x20) = CONST 
0x80f: v80f = ADD v80d(0x20) v808
0x813: v813(0x40) = CONST 
0x815: v815 = MLOAD v813(0x40)
0x818: v818 = SUB v80f v815
0x81a: LOG3 v815 v818 v7e4(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v7e3 v7cc
0x81b: v81b(0x1) = CONST 
----------------------------------

Begin block 0x81f
prev = {'0x734'}, next = {'0x820'}
----------------------------------
Block 0x81f
----------------------------------

Begin block 0x820
prev = {'0x81f'}, next = {'0x821'}
----------------------------------
Block 0x820
----------------------------------

Begin block 0x821
prev = {'0x820'}, next = {'0x1c2'}
----------------------------------
Block 0x821
0x826: JUMP v18e(0x1c2)
----------------------------------

Begin block 0x827
prev = {'0x1e7'}, next = {'0x1ef'}
----------------------------------
Block 0x827
0x828: v828(0x5) = CONST 
0x82a: v82a = SLOAD v828(0x5)
0x82c: JUMP v1e8(0x1ef)
----------------------------------

Begin block 0x82d
prev = {'0x210'}, next = {'0x848', '0x847'}
----------------------------------
Block 0x82d
0x82e: v82e(0x0) = CONST 
0x830: v830(0x6) = CONST 
0x832: v832(0x0) = CONST 
0x835: v835 = SLOAD v830(0x6)
0x837: v837(0x100) = CONST 
0x83a: v83a(0x1) = EXP v837(0x100) v832(0x0)
0x83c: v83c = DIV v835 v83a(0x1)
0x83d: v83d(0xff) = CONST 
0x83f: v83f = AND v83d(0xff) v83c
0x840: v840 = ISZERO v83f
0x841: v841 = ISZERO v840
0x842: v842 = ISZERO v841
0x843: v843(0x848) = CONST 
0x846: JUMPI v843(0x848) v842
----------------------------------

Begin block 0x847
prev = {'0x82d'}, next = {}
----------------------------------
Block 0x847
0x847: THROW 
----------------------------------

Begin block 0x848
prev = {'0x82d'}, next = {'0x86b', '0x86a'}
----------------------------------
Block 0x848
0x849: v849 = CALLER 
0x84a: v84a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x85f: v85f = AND v84a(0xffffffffffffffffffffffffffffffffffffffff) v849
0x860: v860(0x0) = CONST 
0x862: v862 = EQ v860(0x0) v85f
0x863: v863 = ISZERO v862
0x864: v864 = ISZERO v863
0x865: v865 = ISZERO v864
0x866: v866(0x86b) = CONST 
0x869: JUMPI v866(0x86b) v865
----------------------------------

Begin block 0x86a
prev = {'0x848'}, next = {}
----------------------------------
Block 0x86a
0x86a: THROW 
----------------------------------

Begin block 0x86b
prev = {'0x848'}, next = {'0x8b9', '0x8b5'}
----------------------------------
Block 0x86b
0x86d: v86d(0x3) = CONST 
0x86f: v86f(0x0) = CONST 
0x872: v872(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x887: v887 = AND v872(0xffffffffffffffffffffffffffffffffffffffff) v22e
0x888: v888(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x89d: v89d = AND v888(0xffffffffffffffffffffffffffffffffffffffff) v887
0x89f: MSTORE v86f(0x0) v89d
0x8a0: v8a0(0x20) = CONST 
0x8a2: v8a2(0x20) = ADD v8a0(0x20) v86f(0x0)
0x8a5: MSTORE v8a2(0x20) v86d(0x3)
0x8a6: v8a6(0x20) = CONST 
0x8a8: v8a8(0x40) = ADD v8a6(0x20) v8a2(0x20)
0x8a9: v8a9(0x0) = CONST 
0x8ab: v8ab = SHA3 v8a9(0x0) v8a8(0x40)
0x8ac: v8ac = SLOAD v8ab
0x8ad: v8ad = LT v8ac v256
0x8ae: v8ae = ISZERO v8ad
0x8af: v8af = ISZERO v8ae
0x8b0: v8b0 = ISZERO v8af
0x8b1: v8b1(0x8b9) = CONST 
0x8b4: JUMPI v8b1(0x8b9) v8b0
----------------------------------

Begin block 0x8b5
prev = {'0x86b'}, next = {}
----------------------------------
Block 0x8b5
0x8b5: v8b5(0x0) = CONST 
0x8b8: REVERT v8b5(0x0) v8b5(0x0)
----------------------------------

Begin block 0x8b9
prev = {'0x86b'}, next = {'0x948', '0x944'}
----------------------------------
Block 0x8b9
0x8ba: v8ba(0x3) = CONST 
0x8bc: v8bc(0x0) = CONST 
0x8bf: v8bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8d4: v8d4 = AND v8bf(0xffffffffffffffffffffffffffffffffffffffff) v24d
0x8d5: v8d5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8ea: v8ea = AND v8d5(0xffffffffffffffffffffffffffffffffffffffff) v8d4
0x8ec: MSTORE v8bc(0x0) v8ea
0x8ed: v8ed(0x20) = CONST 
0x8ef: v8ef(0x20) = ADD v8ed(0x20) v8bc(0x0)
0x8f2: MSTORE v8ef(0x20) v8ba(0x3)
0x8f3: v8f3(0x20) = CONST 
0x8f5: v8f5(0x40) = ADD v8f3(0x20) v8ef(0x20)
0x8f6: v8f6(0x0) = CONST 
0x8f8: v8f8 = SHA3 v8f6(0x0) v8f5(0x40)
0x8f9: v8f9 = SLOAD v8f8
0x8fb: v8fb(0x3) = CONST 
0x8fd: v8fd(0x0) = CONST 
0x900: v900(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x915: v915 = AND v900(0xffffffffffffffffffffffffffffffffffffffff) v24d
0x916: v916(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x92b: v92b = AND v916(0xffffffffffffffffffffffffffffffffffffffff) v915
0x92d: MSTORE v8fd(0x0) v92b
0x92e: v92e(0x20) = CONST 
0x930: v930(0x20) = ADD v92e(0x20) v8fd(0x0)
0x933: MSTORE v930(0x20) v8fb(0x3)
0x934: v934(0x20) = CONST 
0x936: v936(0x40) = ADD v934(0x20) v930(0x20)
0x937: v937(0x0) = CONST 
0x939: v939 = SHA3 v937(0x0) v936(0x40)
0x93a: v93a = SLOAD v939
0x93b: v93b = ADD v93a v256
0x93c: v93c = LT v93b v8f9
0x93d: v93d = ISZERO v93c
0x93e: v93e = ISZERO v93d
0x93f: v93f = ISZERO v93e
0x940: v940(0x948) = CONST 
0x943: JUMPI v940(0x948) v93f
----------------------------------

Begin block 0x944
prev = {'0x8b9'}, next = {}
----------------------------------
Block 0x944
0x944: v944(0x0) = CONST 
0x947: REVERT v944(0x0) v944(0x0)
----------------------------------

Begin block 0x948
prev = {'0x8b9'}, next = {'0x9cf', '0x9d3'}
----------------------------------
Block 0x948
0x94a: v94a(0x4) = CONST 
0x94c: v94c(0x0) = CONST 
0x94f: v94f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x964: v964 = AND v94f(0xffffffffffffffffffffffffffffffffffffffff) v22e
0x965: v965(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x97a: v97a = AND v965(0xffffffffffffffffffffffffffffffffffffffff) v964
0x97c: MSTORE v94c(0x0) v97a
0x97d: v97d(0x20) = CONST 
0x97f: v97f(0x20) = ADD v97d(0x20) v94c(0x0)
0x982: MSTORE v97f(0x20) v94a(0x4)
0x983: v983(0x20) = CONST 
0x985: v985(0x40) = ADD v983(0x20) v97f(0x20)
0x986: v986(0x0) = CONST 
0x988: v988 = SHA3 v986(0x0) v985(0x40)
0x989: v989(0x0) = CONST 
0x98b: v98b = CALLER 
0x98c: v98c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9a1: v9a1 = AND v98c(0xffffffffffffffffffffffffffffffffffffffff) v98b
0x9a2: v9a2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9b7: v9b7 = AND v9a2(0xffffffffffffffffffffffffffffffffffffffff) v9a1
0x9b9: MSTORE v989(0x0) v9b7
0x9ba: v9ba(0x20) = CONST 
0x9bc: v9bc(0x20) = ADD v9ba(0x20) v989(0x0)
0x9bf: MSTORE v9bc(0x20) v988
0x9c0: v9c0(0x20) = CONST 
0x9c2: v9c2(0x40) = ADD v9c0(0x20) v9bc(0x20)
0x9c3: v9c3(0x0) = CONST 
0x9c5: v9c5 = SHA3 v9c3(0x0) v9c2(0x40)
0x9c6: v9c6 = SLOAD v9c5
0x9c7: v9c7 = LT v9c6 v256
0x9c8: v9c8 = ISZERO v9c7
0x9c9: v9c9 = ISZERO v9c8
0x9ca: v9ca = ISZERO v9c9
0x9cb: v9cb(0x9d3) = CONST 
0x9ce: JUMPI v9cb(0x9d3) v9ca
----------------------------------

Begin block 0x9cf
prev = {'0x948'}, next = {}
----------------------------------
Block 0x9cf
0x9cf: v9cf(0x0) = CONST 
0x9d2: REVERT v9cf(0x0) v9cf(0x0)
----------------------------------

Begin block 0x9d3
prev = {'0x948'}, next = {'0xb61'}
----------------------------------
Block 0x9d3
0x9d5: v9d5(0x3) = CONST 
0x9d7: v9d7(0x0) = CONST 
0x9da: v9da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ef: v9ef = AND v9da(0xffffffffffffffffffffffffffffffffffffffff) v24d
0x9f0: v9f0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa05: va05 = AND v9f0(0xffffffffffffffffffffffffffffffffffffffff) v9ef
0xa07: MSTORE v9d7(0x0) va05
0xa08: va08(0x20) = CONST 
0xa0a: va0a(0x20) = ADD va08(0x20) v9d7(0x0)
0xa0d: MSTORE va0a(0x20) v9d5(0x3)
0xa0e: va0e(0x20) = CONST 
0xa10: va10(0x40) = ADD va0e(0x20) va0a(0x20)
0xa11: va11(0x0) = CONST 
0xa13: va13 = SHA3 va11(0x0) va10(0x40)
0xa14: va14(0x0) = CONST 
0xa18: va18 = SLOAD va13
0xa19: va19 = ADD va18 v256
0xa1f: SSTORE va13 va19
0xa22: va22(0x3) = CONST 
0xa24: va24(0x0) = CONST 
0xa27: va27(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa3c: va3c = AND va27(0xffffffffffffffffffffffffffffffffffffffff) v22e
0xa3d: va3d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa52: va52 = AND va3d(0xffffffffffffffffffffffffffffffffffffffff) va3c
0xa54: MSTORE va24(0x0) va52
0xa55: va55(0x20) = CONST 
0xa57: va57(0x20) = ADD va55(0x20) va24(0x0)
0xa5a: MSTORE va57(0x20) va22(0x3)
0xa5b: va5b(0x20) = CONST 
0xa5d: va5d(0x40) = ADD va5b(0x20) va57(0x20)
0xa5e: va5e(0x0) = CONST 
0xa60: va60 = SHA3 va5e(0x0) va5d(0x40)
0xa61: va61(0x0) = CONST 
0xa65: va65 = SLOAD va60
0xa66: va66 = SUB va65 v256
0xa6c: SSTORE va60 va66
0xa6f: va6f(0x4) = CONST 
0xa71: va71(0x0) = CONST 
0xa74: va74(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa89: va89 = AND va74(0xffffffffffffffffffffffffffffffffffffffff) v22e
0xa8a: va8a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa9f: va9f = AND va8a(0xffffffffffffffffffffffffffffffffffffffff) va89
0xaa1: MSTORE va71(0x0) va9f
0xaa2: vaa2(0x20) = CONST 
0xaa4: vaa4(0x20) = ADD vaa2(0x20) va71(0x0)
0xaa7: MSTORE vaa4(0x20) va6f(0x4)
0xaa8: vaa8(0x20) = CONST 
0xaaa: vaaa(0x40) = ADD vaa8(0x20) vaa4(0x20)
0xaab: vaab(0x0) = CONST 
0xaad: vaad = SHA3 vaab(0x0) vaaa(0x40)
0xaae: vaae(0x0) = CONST 
0xab0: vab0 = CALLER 
0xab1: vab1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xac6: vac6 = AND vab1(0xffffffffffffffffffffffffffffffffffffffff) vab0
0xac7: vac7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xadc: vadc = AND vac7(0xffffffffffffffffffffffffffffffffffffffff) vac6
0xade: MSTORE vaae(0x0) vadc
0xadf: vadf(0x20) = CONST 
0xae1: vae1(0x20) = ADD vadf(0x20) vaae(0x0)
0xae4: MSTORE vae1(0x20) vaad
0xae5: vae5(0x20) = CONST 
0xae7: vae7(0x40) = ADD vae5(0x20) vae1(0x20)
0xae8: vae8(0x0) = CONST 
0xaea: vaea = SHA3 vae8(0x0) vae7(0x40)
0xaeb: vaeb(0x0) = CONST 
0xaef: vaef = SLOAD vaea
0xaf0: vaf0 = SUB vaef v256
0xaf6: SSTORE vaea vaf0
0xaf9: vaf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb0e: vb0e = AND vaf9(0xffffffffffffffffffffffffffffffffffffffff) v24d
0xb10: vb10(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb25: vb25 = AND vb10(0xffffffffffffffffffffffffffffffffffffffff) v22e
0xb26: vb26(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xb48: vb48(0x40) = CONST 
0xb4a: vb4a = MLOAD vb48(0x40)
0xb4e: MSTORE vb4a v256
0xb4f: vb4f(0x20) = CONST 
0xb51: vb51 = ADD vb4f(0x20) vb4a
0xb55: vb55(0x40) = CONST 
0xb57: vb57 = MLOAD vb55(0x40)
0xb5a: vb5a = SUB vb51 vb57
0xb5c: LOG3 vb57 vb5a vb26(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vb25 vb0e
0xb5d: vb5d(0x1) = CONST 
----------------------------------

Begin block 0xb61
prev = {'0x9d3'}, next = {'0xb62'}
----------------------------------
Block 0xb61
----------------------------------

Begin block 0xb62
prev = {'0xb61'}, next = {'0xb63'}
----------------------------------
Block 0xb62
----------------------------------

Begin block 0xb63
prev = {'0xb62'}, next = {'0x264'}
----------------------------------
Block 0xb63
0xb69: JUMP v211(0x264)
----------------------------------

Begin block 0xb6a
prev = {'0x289'}, next = {'0x291'}
----------------------------------
Block 0xb6a
0xb6b: vb6b(0x2) = CONST 
0xb6d: vb6d(0x0) = CONST 
0xb70: vb70 = SLOAD vb6b(0x2)
0xb72: vb72(0x100) = CONST 
0xb75: vb75(0x1) = EXP vb72(0x100) vb6d(0x0)
0xb77: vb77 = DIV vb70 vb75(0x1)
0xb78: vb78(0xff) = CONST 
0xb7a: vb7a = AND vb78(0xff) vb77
0xb7c: JUMP v28a(0x291)
----------------------------------

Begin block 0xb7d
prev = {'0x2b8'}, next = {'0xbcb', '0xbc7'}
----------------------------------
Block 0xb7d
0xb7f: vb7f(0x3) = CONST 
0xb81: vb81(0x0) = CONST 
0xb83: vb83 = CALLER 
0xb84: vb84(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb99: vb99 = AND vb84(0xffffffffffffffffffffffffffffffffffffffff) vb83
0xb9a: vb9a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbaf: vbaf = AND vb9a(0xffffffffffffffffffffffffffffffffffffffff) vb99
0xbb1: MSTORE vb81(0x0) vbaf
0xbb2: vbb2(0x20) = CONST 
0xbb4: vbb4(0x20) = ADD vbb2(0x20) vb81(0x0)
0xbb7: MSTORE vbb4(0x20) vb7f(0x3)
0xbb8: vbb8(0x20) = CONST 
0xbba: vbba(0x40) = ADD vbb8(0x20) vbb4(0x20)
0xbbb: vbbb(0x0) = CONST 
0xbbd: vbbd = SHA3 vbbb(0x0) vbba(0x40)
0xbbe: vbbe = SLOAD vbbd
0xbbf: vbbf = LT vbbe v2c0
0xbc0: vbc0 = ISZERO vbbf
0xbc1: vbc1 = ISZERO vbc0
0xbc2: vbc2 = ISZERO vbc1
0xbc3: vbc3(0xbcb) = CONST 
0xbc6: JUMPI vbc3(0xbcb) vbc2
----------------------------------

Begin block 0xbc7
prev = {'0xb7d'}, next = {}
----------------------------------
Block 0xbc7
0xbc7: vbc7(0x0) = CONST 
0xbca: REVERT vbc7(0x0) vbc7(0x0)
----------------------------------

Begin block 0xbcb
prev = {'0xb7d'}, next = {'0xca0'}
----------------------------------
Block 0xbcb
0xbcd: vbcd(0x3) = CONST 
0xbcf: vbcf(0x0) = CONST 
0xbd1: vbd1 = CALLER 
0xbd2: vbd2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe7: vbe7 = AND vbd2(0xffffffffffffffffffffffffffffffffffffffff) vbd1
0xbe8: vbe8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbfd: vbfd = AND vbe8(0xffffffffffffffffffffffffffffffffffffffff) vbe7
0xbff: MSTORE vbcf(0x0) vbfd
0xc00: vc00(0x20) = CONST 
0xc02: vc02(0x20) = ADD vc00(0x20) vbcf(0x0)
0xc05: MSTORE vc02(0x20) vbcd(0x3)
0xc06: vc06(0x20) = CONST 
0xc08: vc08(0x40) = ADD vc06(0x20) vc02(0x20)
0xc09: vc09(0x0) = CONST 
0xc0b: vc0b = SHA3 vc09(0x0) vc08(0x40)
0xc0c: vc0c(0x0) = CONST 
0xc10: vc10 = SLOAD vc0b
0xc11: vc11 = SUB vc10 v2c0
0xc17: SSTORE vc0b vc11
0xc1a: vc1a(0x3) = CONST 
0xc1c: vc1c(0x0) = CONST 
0xc1f: vc1f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc34: vc34(0x0) = AND vc1f(0xffffffffffffffffffffffffffffffffffffffff) vc1c(0x0)
0xc36: MSTORE vc1c(0x0) vc34(0x0)
0xc37: vc37(0x20) = CONST 
0xc39: vc39(0x20) = ADD vc37(0x20) vc1c(0x0)
0xc3c: MSTORE vc39(0x20) vc1a(0x3)
0xc3d: vc3d(0x20) = CONST 
0xc3f: vc3f(0x40) = ADD vc3d(0x20) vc39(0x20)
0xc40: vc40(0x0) = CONST 
0xc42: vc42 = SHA3 vc40(0x0) vc3f(0x40)
0xc43: vc43(0x0) = CONST 
0xc47: vc47 = SLOAD vc42
0xc48: vc48 = ADD vc47 v2c0
0xc4e: SSTORE vc42 vc48
0xc50: vc50(0x0) = CONST 
0xc52: vc52 = CALLER 
0xc53: vc53(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc68: vc68 = AND vc53(0xffffffffffffffffffffffffffffffffffffffff) vc52
0xc69: vc69(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xc8b: vc8b(0x40) = CONST 
0xc8d: vc8d = MLOAD vc8b(0x40)
0xc91: MSTORE vc8d v2c0
0xc92: vc92(0x20) = CONST 
0xc94: vc94 = ADD vc92(0x20) vc8d
0xc98: vc98(0x40) = CONST 
0xc9a: vc9a = MLOAD vc98(0x40)
0xc9d: vc9d = SUB vc94 vc9a
0xc9f: LOG3 vc9a vc9d vc69(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vc68 vc50(0x0)
----------------------------------

Begin block 0xca0
prev = {'0xbcb'}, next = {'0x2ce'}
----------------------------------
Block 0xca0
0xca2: JUMP v2b9(0x2ce)
----------------------------------

Begin block 0xca3
prev = {'0x2db'}, next = {'0x307'}
----------------------------------
Block 0xca3
0xca4: vca4(0x3) = CONST 
0xca6: vca6(0x20) = CONST 
0xca8: MSTORE vca6(0x20) vca4(0x3)
0xcaa: vcaa(0x0) = CONST 
0xcac: MSTORE vcaa(0x0) v2f9
0xcad: vcad(0x40) = CONST 
0xcaf: vcaf(0x0) = CONST 
0xcb1: vcb1 = SHA3 vcaf(0x0) vcad(0x40)
0xcb2: vcb2(0x0) = CONST 
0xcb8: vcb8 = SLOAD vcb1
0xcba: JUMP v2dc(0x307)
----------------------------------

Begin block 0xcbb
prev = {'0x328'}, next = {'0x330'}
----------------------------------
Block 0xcbb
0xcbc: vcbc(0x6) = CONST 
0xcbe: vcbe(0x0) = CONST 
0xcc1: vcc1 = SLOAD vcbc(0x6)
0xcc3: vcc3(0x100) = CONST 
0xcc6: vcc6(0x1) = EXP vcc3(0x100) vcbe(0x0)
0xcc8: vcc8 = DIV vcc1 vcc6(0x1)
0xcc9: vcc9(0xff) = CONST 
0xccb: vccb = AND vcc9(0xff) vcc8
0xccd: JUMP v329(0x330)
----------------------------------

Begin block 0xcce
prev = {'0x355'}, next = {'0xd1e', '0xd64'}
----------------------------------
Block 0xcce
0xccf: vccf(0x1) = CONST 
0xcd2: vcd2 = SLOAD vccf(0x1)
0xcd3: vcd3(0x1) = CONST 
0xcd6: vcd6(0x1) = CONST 
0xcd8: vcd8 = AND vcd6(0x1) vcd2
0xcd9: vcd9 = ISZERO vcd8
0xcda: vcda(0x100) = CONST 
0xcdd: vcdd = MUL vcda(0x100) vcd9
0xcde: vcde = SUB vcdd vcd3(0x1)
0xcdf: vcdf = AND vcde vcd2
0xce0: vce0(0x2) = CONST 
0xce3: vce3 = DIV vcdf vce0(0x2)
0xce5: vce5(0x1f) = CONST 
0xce7: vce7 = ADD vce5(0x1f) vce3
0xce8: vce8(0x20) = CONST 
0xcec: vcec = DIV vce7 vce8(0x20)
0xced: vced = MUL vcec vce8(0x20)
0xcee: vcee(0x20) = CONST 
0xcf0: vcf0 = ADD vcee(0x20) vced
0xcf1: vcf1(0x40) = CONST 
0xcf3: vcf3 = MLOAD vcf1(0x40)
0xcf6: vcf6 = ADD vcf3 vcf0
0xcf7: vcf7(0x40) = CONST 
0xcf9: MSTORE vcf7(0x40) vcf6
0xd00: MSTORE vcf3 vce3
0xd01: vd01(0x20) = CONST 
0xd03: vd03 = ADD vd01(0x20) vcf3
0xd06: vd06 = SLOAD vccf(0x1)
0xd07: vd07(0x1) = CONST 
0xd0a: vd0a(0x1) = CONST 
0xd0c: vd0c = AND vd0a(0x1) vd06
0xd0d: vd0d = ISZERO vd0c
0xd0e: vd0e(0x100) = CONST 
0xd11: vd11 = MUL vd0e(0x100) vd0d
0xd12: vd12 = SUB vd11 vd07(0x1)
0xd13: vd13 = AND vd12 vd06
0xd14: vd14(0x2) = CONST 
0xd17: vd17 = DIV vd13 vd14(0x2)
0xd19: vd19 = ISZERO vd17
0xd1a: vd1a(0xd64) = CONST 
0xd1d: JUMPI vd1a(0xd64) vd19
----------------------------------

Begin block 0xd1e
prev = {'0xcce'}, next = {'0xd26', '0xd39'}
----------------------------------
Block 0xd1e
0xd1f: vd1f(0x1f) = CONST 
0xd21: vd21 = LT vd1f(0x1f) vd17
0xd22: vd22(0xd39) = CONST 
0xd25: JUMPI vd22(0xd39) vd21
----------------------------------

Begin block 0xd26
prev = {'0xd1e'}, next = {'0xd64'}
----------------------------------
Block 0xd26
0xd26: vd26(0x100) = CONST 
0xd2b: vd2b = SLOAD vccf(0x1)
0xd2c: vd2c = DIV vd2b vd26(0x100)
0xd2d: vd2d = MUL vd2c vd26(0x100)
0xd2f: MSTORE vd03 vd2d
0xd31: vd31(0x20) = CONST 
0xd33: vd33 = ADD vd31(0x20) vd03
0xd35: vd35(0xd64) = CONST 
0xd38: JUMP vd35(0xd64)
----------------------------------

Begin block 0xd39
prev = {'0xd1e'}, next = {'0xd47'}
----------------------------------
Block 0xd39
0xd3b: vd3b = ADD vd03 vd17
0xd3e: vd3e(0x0) = CONST 
0xd40: MSTORE vd3e(0x0) vccf(0x1)
0xd41: vd41(0x20) = CONST 
0xd43: vd43(0x0) = CONST 
0xd45: vd45 = SHA3 vd43(0x0) vd41(0x20)
----------------------------------

Begin block 0xd47
prev = {'0xd39', '0xd47'}, next = {'0xd47', '0xd5b'}
----------------------------------
Block 0xd47
0xd47_0x0: vd47_0 = PHI vd03 vd53
0xd47_0x1: vd47_1 = PHI vd45 vd4f
0xd49: vd49 = SLOAD vd47_1
0xd4b: MSTORE vd47_0 vd49
0xd4d: vd4d(0x1) = CONST 
0xd4f: vd4f = ADD vd4d(0x1) vd47_1
0xd51: vd51(0x20) = CONST 
0xd53: vd53 = ADD vd51(0x20) vd47_0
0xd56: vd56 = GT vd3b vd53
0xd57: vd57(0xd47) = CONST 
0xd5a: JUMPI vd57(0xd47) vd56
----------------------------------

Begin block 0xd5b
prev = {'0xd47'}, next = {'0xd64'}
----------------------------------
Block 0xd5b
0xd5d: vd5d = SUB vd53 vd3b
0xd5e: vd5e(0x1f) = CONST 
0xd60: vd60 = AND vd5e(0x1f) vd5d
0xd62: vd62 = ADD vd3b vd60
----------------------------------

Begin block 0xd64
prev = {'0xd26', '0xcce', '0xd5b'}, next = {'0x35d'}
----------------------------------
Block 0xd64
0xd6b: JUMP v356(0x35d)
----------------------------------

Begin block 0xd6c
prev = {'0x3e4'}, next = {'0xd87', '0xd86'}
----------------------------------
Block 0xd6c
0xd6d: vd6d(0x0) = CONST 
0xd6f: vd6f(0x6) = CONST 
0xd71: vd71(0x0) = CONST 
0xd74: vd74 = SLOAD vd6f(0x6)
0xd76: vd76(0x100) = CONST 
0xd79: vd79(0x1) = EXP vd76(0x100) vd71(0x0)
0xd7b: vd7b = DIV vd74 vd79(0x1)
0xd7c: vd7c(0xff) = CONST 
0xd7e: vd7e = AND vd7c(0xff) vd7b
0xd7f: vd7f = ISZERO vd7e
0xd80: vd80 = ISZERO vd7f
0xd81: vd81 = ISZERO vd80
0xd82: vd82(0xd87) = CONST 
0xd85: JUMPI vd82(0xd87) vd81
----------------------------------

Begin block 0xd86
prev = {'0xd6c'}, next = {}
----------------------------------
Block 0xd86
0xd86: THROW 
----------------------------------

Begin block 0xd87
prev = {'0xd6c'}, next = {'0xdaa', '0xda9'}
----------------------------------
Block 0xd87
0xd88: vd88 = CALLER 
0xd89: vd89(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd9e: vd9e = AND vd89(0xffffffffffffffffffffffffffffffffffffffff) vd88
0xd9f: vd9f(0x0) = CONST 
0xda1: vda1 = EQ vd9f(0x0) vd9e
0xda2: vda2 = ISZERO vda1
0xda3: vda3 = ISZERO vda2
0xda4: vda4 = ISZERO vda3
0xda5: vda5(0xdaa) = CONST 
0xda8: JUMPI vda5(0xdaa) vda4
----------------------------------

Begin block 0xda9
prev = {'0xd87'}, next = {}
----------------------------------
Block 0xda9
0xda9: THROW 
----------------------------------

Begin block 0xdaa
prev = {'0xd87'}, next = {'0xdf4', '0xdf8'}
----------------------------------
Block 0xdaa
0xdac: vdac(0x3) = CONST 
0xdae: vdae(0x0) = CONST 
0xdb0: vdb0 = CALLER 
0xdb1: vdb1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc6: vdc6 = AND vdb1(0xffffffffffffffffffffffffffffffffffffffff) vdb0
0xdc7: vdc7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xddc: vddc = AND vdc7(0xffffffffffffffffffffffffffffffffffffffff) vdc6
0xdde: MSTORE vdae(0x0) vddc
0xddf: vddf(0x20) = CONST 
0xde1: vde1(0x20) = ADD vddf(0x20) vdae(0x0)
0xde4: MSTORE vde1(0x20) vdac(0x3)
0xde5: vde5(0x20) = CONST 
0xde7: vde7(0x40) = ADD vde5(0x20) vde1(0x20)
0xde8: vde8(0x0) = CONST 
0xdea: vdea = SHA3 vde8(0x0) vde7(0x40)
0xdeb: vdeb = SLOAD vdea
0xdec: vdec = LT vdeb v40b
0xded: vded = ISZERO vdec
0xdee: vdee = ISZERO vded
0xdef: vdef = ISZERO vdee
0xdf0: vdf0(0xdf8) = CONST 
0xdf3: JUMPI vdf0(0xdf8) vdef
----------------------------------

Begin block 0xdf4
prev = {'0xdaa'}, next = {}
----------------------------------
Block 0xdf4
0xdf4: vdf4(0x0) = CONST 
0xdf7: REVERT vdf4(0x0) vdf4(0x0)
----------------------------------

Begin block 0xdf8
prev = {'0xdaa'}, next = {'0xe83', '0xe87'}
----------------------------------
Block 0xdf8
0xdf9: vdf9(0x3) = CONST 
0xdfb: vdfb(0x0) = CONST 
0xdfe: vdfe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe13: ve13 = AND vdfe(0xffffffffffffffffffffffffffffffffffffffff) v402
0xe14: ve14(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe29: ve29 = AND ve14(0xffffffffffffffffffffffffffffffffffffffff) ve13
0xe2b: MSTORE vdfb(0x0) ve29
0xe2c: ve2c(0x20) = CONST 
0xe2e: ve2e(0x20) = ADD ve2c(0x20) vdfb(0x0)
0xe31: MSTORE ve2e(0x20) vdf9(0x3)
0xe32: ve32(0x20) = CONST 
0xe34: ve34(0x40) = ADD ve32(0x20) ve2e(0x20)
0xe35: ve35(0x0) = CONST 
0xe37: ve37 = SHA3 ve35(0x0) ve34(0x40)
0xe38: ve38 = SLOAD ve37
0xe3a: ve3a(0x3) = CONST 
0xe3c: ve3c(0x0) = CONST 
0xe3f: ve3f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe54: ve54 = AND ve3f(0xffffffffffffffffffffffffffffffffffffffff) v402
0xe55: ve55(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe6a: ve6a = AND ve55(0xffffffffffffffffffffffffffffffffffffffff) ve54
0xe6c: MSTORE ve3c(0x0) ve6a
0xe6d: ve6d(0x20) = CONST 
0xe6f: ve6f(0x20) = ADD ve6d(0x20) ve3c(0x0)
0xe72: MSTORE ve6f(0x20) ve3a(0x3)
0xe73: ve73(0x20) = CONST 
0xe75: ve75(0x40) = ADD ve73(0x20) ve6f(0x20)
0xe76: ve76(0x0) = CONST 
0xe78: ve78 = SHA3 ve76(0x0) ve75(0x40)
0xe79: ve79 = SLOAD ve78
0xe7a: ve7a = ADD ve79 v40b
0xe7b: ve7b = LT ve7a ve38
0xe7c: ve7c = ISZERO ve7b
0xe7d: ve7d = ISZERO ve7c
0xe7e: ve7e = ISZERO ve7d
0xe7f: ve7f(0xe87) = CONST 
0xe82: JUMPI ve7f(0xe87) ve7e
----------------------------------

Begin block 0xe83
prev = {'0xdf8'}, next = {}
----------------------------------
Block 0xe83
0xe83: ve83(0x0) = CONST 
0xe86: REVERT ve83(0x0) ve83(0x0)
----------------------------------

Begin block 0xe87
prev = {'0xdf8'}, next = {'0xf8b'}
----------------------------------
Block 0xe87
0xe89: ve89(0x3) = CONST 
0xe8b: ve8b(0x0) = CONST 
0xe8d: ve8d = CALLER 
0xe8e: ve8e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xea3: vea3 = AND ve8e(0xffffffffffffffffffffffffffffffffffffffff) ve8d
0xea4: vea4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeb9: veb9 = AND vea4(0xffffffffffffffffffffffffffffffffffffffff) vea3
0xebb: MSTORE ve8b(0x0) veb9
0xebc: vebc(0x20) = CONST 
0xebe: vebe(0x20) = ADD vebc(0x20) ve8b(0x0)
0xec1: MSTORE vebe(0x20) ve89(0x3)
0xec2: vec2(0x20) = CONST 
0xec4: vec4(0x40) = ADD vec2(0x20) vebe(0x20)
0xec5: vec5(0x0) = CONST 
0xec7: vec7 = SHA3 vec5(0x0) vec4(0x40)
0xec8: vec8(0x0) = CONST 
0xecc: vecc = SLOAD vec7
0xecd: vecd = SUB vecc v40b
0xed3: SSTORE vec7 vecd
0xed6: ved6(0x3) = CONST 
0xed8: ved8(0x0) = CONST 
0xedb: vedb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xef0: vef0 = AND vedb(0xffffffffffffffffffffffffffffffffffffffff) v402
0xef1: vef1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf06: vf06 = AND vef1(0xffffffffffffffffffffffffffffffffffffffff) vef0
0xf08: MSTORE ved8(0x0) vf06
0xf09: vf09(0x20) = CONST 
0xf0b: vf0b(0x20) = ADD vf09(0x20) ved8(0x0)
0xf0e: MSTORE vf0b(0x20) ved6(0x3)
0xf0f: vf0f(0x20) = CONST 
0xf11: vf11(0x40) = ADD vf0f(0x20) vf0b(0x20)
0xf12: vf12(0x0) = CONST 
0xf14: vf14 = SHA3 vf12(0x0) vf11(0x40)
0xf15: vf15(0x0) = CONST 
0xf19: vf19 = SLOAD vf14
0xf1a: vf1a = ADD vf19 v40b
0xf20: SSTORE vf14 vf1a
0xf23: vf23(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf38: vf38 = AND vf23(0xffffffffffffffffffffffffffffffffffffffff) v402
0xf39: vf39 = CALLER 
0xf3a: vf3a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf4f: vf4f = AND vf3a(0xffffffffffffffffffffffffffffffffffffffff) vf39
0xf50: vf50(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xf72: vf72(0x40) = CONST 
0xf74: vf74 = MLOAD vf72(0x40)
0xf78: MSTORE vf74 v40b
0xf79: vf79(0x20) = CONST 
0xf7b: vf7b = ADD vf79(0x20) vf74
0xf7f: vf7f(0x40) = CONST 
0xf81: vf81 = MLOAD vf7f(0x40)
0xf84: vf84 = SUB vf7b vf81
0xf86: LOG3 vf81 vf84 vf50(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vf4f vf38
0xf87: vf87(0x1) = CONST 
----------------------------------

Begin block 0xf8b
prev = {'0xe87'}, next = {'0xf8c'}
----------------------------------
Block 0xf8b
----------------------------------

Begin block 0xf8c
prev = {'0xf8b'}, next = {'0xf8d'}
----------------------------------
Block 0xf8c
----------------------------------

Begin block 0xf8d
prev = {'0xf8c'}, next = {'0x419'}
----------------------------------
Block 0xf8d
0xf92: JUMP v3e5(0x419)
----------------------------------

Begin block 0xf93
prev = {'0x43e'}, next = {'0xfeb', '0xfec'}
----------------------------------
Block 0xf93
0xf94: vf94 = CALLER 
0xf95: vf95(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfaa: vfaa = AND vf95(0xffffffffffffffffffffffffffffffffffffffff) vf94
0xfab: vfab(0x6) = CONST 
0xfad: vfad(0x1) = CONST 
0xfb0: vfb0 = SLOAD vfab(0x6)
0xfb2: vfb2(0x100) = CONST 
0xfb5: vfb5(0x100) = EXP vfb2(0x100) vfad(0x1)
0xfb7: vfb7 = DIV vfb0 vfb5(0x100)
0xfb8: vfb8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfcd: vfcd = AND vfb8(0xffffffffffffffffffffffffffffffffffffffff) vfb7
0xfce: vfce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfe3: vfe3 = AND vfce(0xffffffffffffffffffffffffffffffffffffffff) vfcd
0xfe4: vfe4 = EQ vfe3 vfaa
0xfe5: vfe5 = ISZERO vfe4
0xfe6: vfe6 = ISZERO vfe5
0xfe7: vfe7(0xfec) = CONST 
0xfea: JUMPI vfe7(0xfec) vfe6
----------------------------------

Begin block 0xfeb
prev = {'0xf93'}, next = {}
----------------------------------
Block 0xfeb
0xfeb: THROW 
----------------------------------

Begin block 0xfec
prev = {'0xf93'}, next = {'0x1008'}
----------------------------------
Block 0xfec
0xfed: vfed(0x0) = CONST 
0xfef: vfef(0x6) = CONST 
0xff1: vff1(0x0) = CONST 
0xff3: vff3(0x100) = CONST 
0xff6: vff6(0x1) = EXP vff3(0x100) vff1(0x0)
0xff8: vff8 = SLOAD vfef(0x6)
0xffa: vffa(0xff) = CONST 
0xffc: vffc(0xff) = MUL vffa(0xff) vff6(0x1)
0xffd: vffd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vffc(0xff)
0xffe: vffe = AND vffd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vff8
0x1001: v1001(0x1) = ISZERO vfed(0x0)
0x1002: v1002(0x0) = ISZERO v1001(0x1)
0x1003: v1003(0x0) = MUL v1002(0x0) vff6(0x1)
0x1004: v1004 = OR v1003(0x0) vffe
0x1006: SSTORE vfef(0x6) v1004
----------------------------------

Begin block 0x1008
prev = {'0xfec'}, next = {'0x1009'}
----------------------------------
Block 0x1008
----------------------------------

Begin block 0x1009
prev = {'0x1008'}, next = {'0x446'}
----------------------------------
Block 0x1009
0x100a: JUMP v43f(0x446)
----------------------------------

Begin block 0x100b
prev = {'0x453'}, next = {'0x1112'}
----------------------------------
Block 0x100b
0x100c: v100c = CALLER 
0x100d: v100d(0x6) = CONST 
0x100f: v100f(0x1) = CONST 
0x1011: v1011(0x100) = CONST 
0x1014: v1014(0x100) = EXP v1011(0x100) v100f(0x1)
0x1016: v1016 = SLOAD v100d(0x6)
0x1018: v1018(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x102d: v102d(0xffffffffffffffffffffffffffffffffffffffff00) = MUL v1018(0xffffffffffffffffffffffffffffffffffffffff) v1014(0x100)
0x102e: v102e(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v102d(0xffffffffffffffffffffffffffffffffffffffff00)
0x102f: v102f = AND v102e(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) v1016
0x1032: v1032(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1047: v1047 = AND v1032(0xffffffffffffffffffffffffffffffffffffffff) v100c
0x1048: v1048 = MUL v1047 v1014(0x100)
0x1049: v1049 = OR v1048 v102f
0x104b: SSTORE v100d(0x6) v1049
0x104d: v104d(0x314dc6448d9338c15b0a00000000) = CONST 
0x105c: v105c(0x5) = CONST 
0x1060: SSTORE v105c(0x5) v104d(0x314dc6448d9338c15b0a00000000)
0x1062: v1062(0x314dc6448d9338c15b0a00000000) = CONST 
0x1071: v1071(0x3) = CONST 
0x1073: v1073(0x0) = CONST 
0x1076: v1076(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108b: v108b = AND v1076(0xffffffffffffffffffffffffffffffffffffffff) v471
0x108c: v108c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10a1: v10a1 = AND v108c(0xffffffffffffffffffffffffffffffffffffffff) v108b
0x10a3: MSTORE v1073(0x0) v10a1
0x10a4: v10a4(0x20) = CONST 
0x10a6: v10a6(0x20) = ADD v10a4(0x20) v1073(0x0)
0x10a9: MSTORE v10a6(0x20) v1071(0x3)
0x10aa: v10aa(0x20) = CONST 
0x10ac: v10ac(0x40) = ADD v10aa(0x20) v10a6(0x20)
0x10ad: v10ad(0x0) = CONST 
0x10af: v10af = SHA3 v10ad(0x0) v10ac(0x40)
0x10b2: SSTORE v10af v1062(0x314dc6448d9338c15b0a00000000)
0x10b5: v10b5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10ca: v10ca = AND v10b5(0xffffffffffffffffffffffffffffffffffffffff) v471
0x10cb: v10cb(0x0) = CONST 
0x10cd: v10cd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x10ee: v10ee(0x314dc6448d9338c15b0a00000000) = CONST 
0x10fd: v10fd(0x40) = CONST 
0x10ff: v10ff = MLOAD v10fd(0x40)
0x1103: MSTORE v10ff v10ee(0x314dc6448d9338c15b0a00000000)
0x1104: v1104(0x20) = CONST 
0x1106: v1106 = ADD v1104(0x20) v10ff
0x110a: v110a(0x40) = CONST 
0x110c: v110c = MLOAD v110a(0x40)
0x110f: v110f = SUB v1106 v110c
0x1111: LOG3 v110c v110f v10cd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v10cb(0x0) v10ca
----------------------------------

Begin block 0x1112
prev = {'0x100b'}, next = {'0x47f'}
----------------------------------
Block 0x1112
0x1114: JUMP v454(0x47f)
----------------------------------

Begin block 0x1115
prev = {'0x48c'}, next = {'0x116d', '0x116e'}
----------------------------------
Block 0x1115
0x1116: v1116 = CALLER 
0x1117: v1117(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x112c: v112c = AND v1117(0xffffffffffffffffffffffffffffffffffffffff) v1116
0x112d: v112d(0x6) = CONST 
0x112f: v112f(0x1) = CONST 
0x1132: v1132 = SLOAD v112d(0x6)
0x1134: v1134(0x100) = CONST 
0x1137: v1137(0x100) = EXP v1134(0x100) v112f(0x1)
0x1139: v1139 = DIV v1132 v1137(0x100)
0x113a: v113a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x114f: v114f = AND v113a(0xffffffffffffffffffffffffffffffffffffffff) v1139
0x1150: v1150(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1165: v1165 = AND v1150(0xffffffffffffffffffffffffffffffffffffffff) v114f
0x1166: v1166 = EQ v1165 v112c
0x1167: v1167 = ISZERO v1166
0x1168: v1168 = ISZERO v1167
0x1169: v1169(0x116e) = CONST 
0x116c: JUMPI v1169(0x116e) v1168
----------------------------------

Begin block 0x116d
prev = {'0x1115'}, next = {}
----------------------------------
Block 0x116d
0x116d: THROW 
----------------------------------

Begin block 0x116e
prev = {'0x1115'}, next = {'0x11af'}
----------------------------------
Block 0x116e
0x1170: v1170(0x0) = CONST 
0x1174: v1174 = MLOAD v4b3
0x1176: v1176(0x20) = CONST 
0x1178: v1178 = ADD v1176(0x20) v4b3
0x117a: v117a(0x1184) = CONST 
0x1180: v1180(0x11af) = CONST 
0x1183: JUMP v1180(0x11af)
----------------------------------

Begin block 0x1184
prev = {'0x122b'}, next = {'0x1186'}
----------------------------------
Block 0x1184
----------------------------------

Begin block 0x1186
prev = {'0x1184'}, next = {'0x1187'}
----------------------------------
Block 0x1186
----------------------------------

Begin block 0x1187
prev = {'0x1186'}, next = {'0x4dc'}
----------------------------------
Block 0x1187
0x1189: JUMP v48d(0x4dc)
----------------------------------

Begin block 0x118a
prev = {'0x4e9'}, next = {'0x534'}
----------------------------------
Block 0x118a
0x118b: v118b(0x4) = CONST 
0x118d: v118d(0x20) = CONST 
0x118f: MSTORE v118d(0x20) v118b(0x4)
0x1191: v1191(0x0) = CONST 
0x1193: MSTORE v1191(0x0) v507
0x1194: v1194(0x40) = CONST 
0x1196: v1196(0x0) = CONST 
0x1198: v1198 = SHA3 v1196(0x0) v1194(0x40)
0x1199: v1199(0x20) = CONST 
0x119b: MSTORE v1199(0x20) v1198
0x119d: v119d(0x0) = CONST 
0x119f: MSTORE v119d(0x0) v526
0x11a0: v11a0(0x40) = CONST 
0x11a2: v11a2(0x0) = CONST 
0x11a4: v11a4 = SHA3 v11a2(0x0) v11a0(0x40)
0x11a5: v11a5(0x0) = CONST 
0x11ac: v11ac = SLOAD v11a4
0x11ae: JUMP v4ea(0x534)
----------------------------------

Begin block 0x11af
prev = {'0x116e'}, next = {'0x11e0', '0x11f0'}
----------------------------------
Block 0x11af
0x11b2: v11b2 = SLOAD v1170(0x0)
0x11b3: v11b3(0x1) = CONST 
0x11b6: v11b6(0x1) = CONST 
0x11b8: v11b8 = AND v11b6(0x1) v11b2
0x11b9: v11b9 = ISZERO v11b8
0x11ba: v11ba(0x100) = CONST 
0x11bd: v11bd = MUL v11ba(0x100) v11b9
0x11be: v11be = SUB v11bd v11b3(0x1)
0x11bf: v11bf = AND v11be v11b2
0x11c0: v11c0(0x2) = CONST 
0x11c3: v11c3 = DIV v11bf v11c0(0x2)
0x11c5: v11c5(0x0) = CONST 
0x11c7: MSTORE v11c5(0x0) v1170(0x0)
0x11c8: v11c8(0x20) = CONST 
0x11ca: v11ca(0x0) = CONST 
0x11cc: v11cc = SHA3 v11ca(0x0) v11c8(0x20)
0x11ce: v11ce(0x1f) = CONST 
0x11d0: v11d0 = ADD v11ce(0x1f) v11c3
0x11d1: v11d1(0x20) = CONST 
0x11d4: v11d4 = DIV v11d0 v11d1(0x20)
0x11d6: v11d6 = ADD v11cc v11d4
0x11d9: v11d9(0x1f) = CONST 
0x11db: v11db = LT v11d9(0x1f) v1174
0x11dc: v11dc(0x11f0) = CONST 
0x11df: JUMPI v11dc(0x11f0) v11db
----------------------------------

Begin block 0x11e0
prev = {'0x11af'}, next = {'0x121e'}
----------------------------------
Block 0x11e0
0x11e1: v11e1 = MLOAD v1178
0x11e2: v11e2(0xff) = CONST 
0x11e4: v11e4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v11e2(0xff)
0x11e5: v11e5 = AND v11e4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v11e1
0x11e8: v11e8 = ADD v1174 v1174
0x11e9: v11e9 = OR v11e8 v11e5
0x11eb: SSTORE v1170(0x0) v11e9
0x11ec: v11ec(0x121e) = CONST 
0x11ef: JUMP v11ec(0x121e)
----------------------------------

Begin block 0x11f0
prev = {'0x11af'}, next = {'0x11ff', '0x121e'}
----------------------------------
Block 0x11f0
0x11f3: v11f3 = ADD v1174 v1174
0x11f4: v11f4(0x1) = CONST 
0x11f6: v11f6 = ADD v11f4(0x1) v11f3
0x11f8: SSTORE v1170(0x0) v11f6
0x11fa: v11fa = ISZERO v1174
0x11fb: v11fb(0x121e) = CONST 
0x11fe: JUMPI v11fb(0x121e) v11fa
----------------------------------

Begin block 0x11ff
prev = {'0x11f0'}, next = {'0x1202'}
----------------------------------
Block 0x11ff
0x1201: v1201 = ADD v1178 v1174
----------------------------------

Begin block 0x1202
prev = {'0x11ff', '0x120b'}, next = {'0x120b', '0x121d'}
----------------------------------
Block 0x1202
0x1202_0x2: v1202_2 = PHI v1178 v1212
0x1205: v1205 = GT v1201 v1202_2
0x1206: v1206 = ISZERO v1205
0x1207: v1207(0x121d) = CONST 
0x120a: JUMPI v1207(0x121d) v1206
----------------------------------

Begin block 0x120b
prev = {'0x1202'}, next = {'0x1202'}
----------------------------------
Block 0x120b
0x120b_0x1: v120b_1 = PHI v11cc v1217
0x120b_0x2: v120b_2 = PHI v1178 v1212
0x120c: v120c = MLOAD v120b_2
0x120e: SSTORE v120b_1 v120c
0x1210: v1210(0x20) = CONST 
0x1212: v1212 = ADD v1210(0x20) v120b_2
0x1215: v1215(0x1) = CONST 
0x1217: v1217 = ADD v1215(0x1) v120b_1
0x1219: v1219(0x1202) = CONST 
0x121c: JUMP v1219(0x1202)
----------------------------------

Begin block 0x121d
prev = {'0x1202'}, next = {'0x121e'}
----------------------------------
Block 0x121d
----------------------------------

Begin block 0x121e
prev = {'0x11e0', '0x121d', '0x11f0'}, next = {'0x122f'}
----------------------------------
Block 0x121e
0x1222: v1222(0x122b) = CONST 
0x1227: v1227(0x122f) = CONST 
0x122a: JUMP v1227(0x122f)
----------------------------------

Begin block 0x122b
prev = {'0x1251'}, next = {'0x1184'}
----------------------------------
Block 0x122b
0x122e: JUMP v117a(0x1184)
----------------------------------

Begin block 0x122f
prev = {'0x121e'}, next = {'0x1235'}
----------------------------------
Block 0x122f
0x1230: v1230(0x1251) = CONST 
----------------------------------

Begin block 0x1235
prev = {'0x123e', '0x122f'}, next = {'0x123e', '0x124d'}
----------------------------------
Block 0x1235
0x1235_0x0: v1235_0 = PHI v11cc v1217 v1248
0x1238: v1238 = GT v11d6 v1235_0
0x1239: v1239 = ISZERO v1238
0x123a: v123a(0x124d) = CONST 
0x123d: JUMPI v123a(0x124d) v1239
----------------------------------

Begin block 0x123e
prev = {'0x1235'}, next = {'0x1235'}
----------------------------------
Block 0x123e
0x123e_0x0: v123e_0 = PHI v11cc v1217 v1248
0x123e: v123e(0x0) = CONST 
0x1241: v1241(0x0) = CONST 
0x1244: SSTORE v123e_0 v1241(0x0)
0x1246: v1246(0x1) = CONST 
0x1248: v1248 = ADD v1246(0x1) v123e_0
0x1249: v1249(0x1235) = CONST 
0x124c: JUMP v1249(0x1235)
----------------------------------

Begin block 0x124d
prev = {'0x1235'}, next = {'0x1251'}
----------------------------------
Block 0x124d
0x1250: JUMP v1230(0x1251)
----------------------------------

Begin block 0x1251
prev = {'0x124d'}, next = {'0x122b'}
----------------------------------
Block 0x1251
0x1253: JUMP v1222(0x122b)
----------------------------------

Begin block 0x129e
prev = {'0xb'}, next = {}
----------------------------------
Block 0x129e
0x129f: v129f(0xde) = CONST 
0x12a0: CALLPRIVATE v129f(0xde)
----------------------------------

Begin block 0x12a1
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x12a1
0x12a2: v12a2(0x16d) = CONST 
0x12a3: CALLPRIVATE v12a2(0x16d)
----------------------------------

Begin block 0x12a4
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x12a4
0x12a5: v12a5(0x182) = CONST 
0x12a6: CALLPRIVATE v12a5(0x182)
----------------------------------

Begin block 0x12a7
prev = {'0x55'}, next = {}
----------------------------------
Block 0x12a7
0x12a8: v12a8(0x1dc) = CONST 
0x12a9: CALLPRIVATE v12a8(0x1dc)
----------------------------------

Begin block 0x12aa
prev = {'0x60'}, next = {}
----------------------------------
Block 0x12aa
0x12ab: v12ab(0x205) = CONST 
0x12ac: CALLPRIVATE v12ab(0x205)
----------------------------------

Begin block 0x12ad
prev = {'0x6b'}, next = {}
----------------------------------
Block 0x12ad
0x12ae: v12ae(0x27e) = CONST 
0x12af: CALLPRIVATE v12ae(0x27e)
----------------------------------

Begin block 0x12b0
prev = {'0x76'}, next = {}
----------------------------------
Block 0x12b0
0x12b1: v12b1(0x2ad) = CONST 
0x12b2: CALLPRIVATE v12b1(0x2ad)
----------------------------------

Begin block 0x12b3
prev = {'0x81'}, next = {}
----------------------------------
Block 0x12b3
0x12b4: v12b4(0x2d0) = CONST 
0x12b5: CALLPRIVATE v12b4(0x2d0)
----------------------------------

Begin block 0x12b6
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x12b6
0x12b7: v12b7(0x31d) = CONST 
0x12b8: CALLPRIVATE v12b7(0x31d)
----------------------------------

Begin block 0x12b9
prev = {'0x97'}, next = {}
----------------------------------
Block 0x12b9
0x12ba: v12ba(0x34a) = CONST 
0x12bb: CALLPRIVATE v12ba(0x34a)
----------------------------------

Begin block 0x12bc
prev = {'0xa2'}, next = {}
----------------------------------
Block 0x12bc
0x12bd: v12bd(0x3d9) = CONST 
0x12be: CALLPRIVATE v12bd(0x3d9)
----------------------------------

Begin block 0x12bf
prev = {'0xad'}, next = {}
----------------------------------
Block 0x12bf
0x12c0: v12c0(0x433) = CONST 
0x12c1: CALLPRIVATE v12c0(0x433)
----------------------------------

Begin block 0x12c2
prev = {'0xb8'}, next = {}
----------------------------------
Block 0x12c2
0x12c3: v12c3(0x448) = CONST 
0x12c4: CALLPRIVATE v12c3(0x448)
----------------------------------

Begin block 0x12c5
prev = {'0xc3'}, next = {}
----------------------------------
Block 0x12c5
0x12c6: v12c6(0x481) = CONST 
0x12c7: CALLPRIVATE v12c6(0x481)
----------------------------------

Begin block 0x12c8
prev = {'0xce'}, next = {}
----------------------------------
Block 0x12c8
0x12c9: v12c9(0x4de) = CONST 
0x12ca: CALLPRIVATE v12c9(0x4de)
----------------------------------
