
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1a', '0xd64'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0xd4c: vd4c(0xd64) = CONST 
0xd4d: JUMPI vd4c(0xd64) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x9e', '0x48'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x3c: v3c = DIV v1c v1d(0x100000000000000000000000000000000000000000000000000000000)
0x3e: v3e(0xa6f9dae1) = CONST 
0x43: v43 = GT v3e(0xa6f9dae1) v3c
0x44: v44(0x9e) = CONST 
0x47: JUMPI v44(0x9e) v43
----------------------------------

Begin block 0x48
prev = {'0x1a'}, next = {'0x53', '0x78'}
----------------------------------
Block 0x48
0x49: v49(0xc99d3a06) = CONST 
0x4e: v4e = GT v49(0xc99d3a06) v3c
0x4f: v4f(0x78) = CONST 
0x52: JUMPI v4f(0x78) v4e
----------------------------------

Begin block 0x53
prev = {'0x48'}, next = {'0xd7f', '0x5e'}
----------------------------------
Block 0x53
0x54: v54(0xc99d3a06) = CONST 
0x59: v59 = EQ v54(0xc99d3a06) v3c
0xd4e: vd4e(0xd7f) = CONST 
0xd4f: JUMPI vd4e(0xd7f) v59
----------------------------------

Begin block 0x5e
prev = {'0x53'}, next = {'0xd82', '0x69'}
----------------------------------
Block 0x5e
0x5f: v5f(0xeeb97d3b) = CONST 
0x64: v64 = EQ v5f(0xeeb97d3b) v3c
0xd50: vd50(0xd82) = CONST 
0xd51: JUMPI vd50(0xd82) v64
----------------------------------

Begin block 0x69
prev = {'0x5e'}, next = {'0x74', '0xd85'}
----------------------------------
Block 0x69
0x6a: v6a(0xf0d2d5a8) = CONST 
0x6f: v6f = EQ v6a(0xf0d2d5a8) v3c
0xd52: vd52(0xd85) = CONST 
0xd53: JUMPI vd52(0xd85) v6f
----------------------------------

Begin block 0x74
prev = {'0x69'}, next = {'0xe60x0'}
----------------------------------
Block 0x74
0x74: v74(0xe6) = CONST 
0x77: JUMP v74(0xe6)
----------------------------------

Begin block 0x78
prev = {'0x48'}, next = {'0x84', '0xd76'}
----------------------------------
Block 0x78
0x7a: v7a(0xa6f9dae1) = CONST 
0x7f: v7f = EQ v7a(0xa6f9dae1) v3c
0xd54: vd54(0xd76) = CONST 
0xd55: JUMPI vd54(0xd76) v7f
----------------------------------

Begin block 0x84
prev = {'0x78'}, next = {'0x8f', '0xd79'}
----------------------------------
Block 0x84
0x85: v85(0xad8731b0) = CONST 
0x8a: v8a = EQ v85(0xad8731b0) v3c
0xd56: vd56(0xd79) = CONST 
0xd57: JUMPI vd56(0xd79) v8a
----------------------------------

Begin block 0x8f
prev = {'0x84'}, next = {'0x9a', '0xd7c'}
----------------------------------
Block 0x8f
0x90: v90(0xb58eb63f) = CONST 
0x95: v95 = EQ v90(0xb58eb63f) v3c
0xd58: vd58(0xd7c) = CONST 
0xd59: JUMPI vd58(0xd7c) v95
----------------------------------

Begin block 0x9a
prev = {'0x8f'}, next = {'0xe60x0'}
----------------------------------
Block 0x9a
0x9a: v9a(0xe6) = CONST 
0x9d: JUMP v9a(0xe6)
----------------------------------

Begin block 0x9e
prev = {'0x1a'}, next = {'0xaa', '0xcf'}
----------------------------------
Block 0x9e
0xa0: va0(0x4f64b2be) = CONST 
0xa5: va5 = GT va0(0x4f64b2be) v3c
0xa6: va6(0xcf) = CONST 
0xa9: JUMPI va6(0xcf) va5
----------------------------------

Begin block 0xaa
prev = {'0x9e'}, next = {'0xb5', '0xd6d'}
----------------------------------
Block 0xaa
0xab: vab(0x4f64b2be) = CONST 
0xb0: vb0 = EQ vab(0x4f64b2be) v3c
0xd5a: vd5a(0xd6d) = CONST 
0xd5b: JUMPI vd5a(0xd6d) vb0
----------------------------------

Begin block 0xb5
prev = {'0xaa'}, next = {'0xd70', '0xc0'}
----------------------------------
Block 0xb5
0xb6: vb6(0x8da5cb5b) = CONST 
0xbb: vbb = EQ vb6(0x8da5cb5b) v3c
0xd5c: vd5c(0xd70) = CONST 
0xd5d: JUMPI vd5c(0xd70) vbb
----------------------------------

Begin block 0xc0
prev = {'0xb5'}, next = {'0xcb', '0xd73'}
----------------------------------
Block 0xc0
0xc1: vc1(0xa6434e7f) = CONST 
0xc6: vc6 = EQ vc1(0xa6434e7f) v3c
0xd5e: vd5e(0xd73) = CONST 
0xd5f: JUMPI vd5e(0xd73) vc6
----------------------------------

Begin block 0xcb
prev = {'0xc0'}, next = {'0xe60x0'}
----------------------------------
Block 0xcb
0xcb: vcb(0xe6) = CONST 
0xce: JUMP vcb(0xe6)
----------------------------------

Begin block 0xcf
prev = {'0x9e'}, next = {'0xd67', '0xdb'}
----------------------------------
Block 0xcf
0xd1: vd1(0x2a6aa595) = CONST 
0xd6: vd6 = EQ vd1(0x2a6aa595) v3c
0xd60: vd60(0xd67) = CONST 
0xd61: JUMPI vd60(0xd67) vd6
----------------------------------

Begin block 0xdb
prev = {'0xcf'}, next = {'0xd64', '0xd6a'}
----------------------------------
Block 0xdb
0xdc: vdc(0x36569e77) = CONST 
0xe1: ve1 = EQ vdc(0x36569e77) v3c
0xd62: vd62(0xd6a) = CONST 
0xd63: JUMPI vd62(0xd6a) ve1
----------------------------------

Begin block 0xe6
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xe6
0xe7: ve7(0x0) = CONST 
0xea: REVERT ve7(0x0) ve7(0x0)
----------------------------------

Begin block 0xe60x0
prev = {'0xd64', '0x74', '0xcb', '0x9a'}, next = {}
----------------------------------
Block 0xe60x0
0xe70x0: v0e7(0x0) = CONST 
0xea0x0: REVERT v0e7(0x0) v0e7(0x0)
----------------------------------

Begin block 0xeb
prev = {}, next = {'0xfd', '0x101'}
----------------------------------
function 0x2a6aa595()
Block 0xeb
0xec: vec(0x108) = CONST 
0xef: vef(0x4) = CONST 
0xf2: vf2 = CALLDATASIZE 
0xf3: vf3 = SUB vf2 vef(0x4)
0xf4: vf4(0x20) = CONST 
0xf7: vf7 = LT vf3 vf4(0x20)
0xf8: vf8 = ISZERO vf7
0xf9: vf9(0x101) = CONST 
0xfc: JUMPI vf9(0x101) vf8
----------------------------------

Begin block 0xfd
prev = {'0xeb'}, next = {}
----------------------------------
Block 0xfd
0xfd: vfd(0x0) = CONST 
0x100: REVERT vfd(0x0) vfd(0x0)
----------------------------------

Begin block 0x101
prev = {'0xeb'}, next = {'0x2ff'}
----------------------------------
Block 0x101
0x103: v103 = CALLDATALOAD vef(0x4)
0x104: v104(0x2ff) = CONST 
0x107: JUMP v104(0x2ff)
----------------------------------

Begin block 0x108
prev = {'0x2ff'}, next = {}
----------------------------------
Block 0x108
0x109: v109(0x40) = CONST 
0x10c: v10c = MLOAD v109(0x40)
0x10d: v10d(0x1) = CONST 
0x10f: v10f(0xa0) = CONST 
0x111: v111(0x2) = CONST 
0x113: v113(0x10000000000000000000000000000000000000000) = EXP v111(0x2) v10f(0xa0)
0x114: v114(0xffffffffffffffffffffffffffffffffffffffff) = SUB v113(0x10000000000000000000000000000000000000000) v10d(0x1)
0x117: v117 = AND v114(0xffffffffffffffffffffffffffffffffffffffff) v32d
0x119: MSTORE v10c v117
0x11d: v11d = AND v114(0xffffffffffffffffffffffffffffffffffffffff) v31c
0x11e: v11e(0x20) = CONST 
0x121: v121 = ADD v10c v11e(0x20)
0x122: MSTORE v121 v11d
0x124: v124 = MLOAD v109(0x40)
0x128: v128 = SUB v10c v124
0x12b: v12b = ADD v109(0x40) v128
0x12d: RETURN v124 v12b
----------------------------------

Begin block 0x12e
prev = {}, next = {'0x330'}
----------------------------------
function vat()()
Block 0x12e
0x12f: v12f(0x136) = CONST 
0x132: v132(0x330) = CONST 
0x135: JUMP v132(0x330)
----------------------------------

Begin block 0x1360x12e
prev = {'0x330'}, next = {}
----------------------------------
Block 0x1360x12e
0x1370x12e: v12e137(0x40) = CONST 
0x13a0x12e: v12e13a = MLOAD v12e137(0x40)
0x13b0x12e: v12e13b(0x1) = CONST 
0x13d0x12e: v12e13d(0xa0) = CONST 
0x13f0x12e: v12e13f(0x2) = CONST 
0x1410x12e: v12e141(0x10000000000000000000000000000000000000000) = EXP v12e13f(0x2) v12e13d(0xa0)
0x1420x12e: v12e142(0xffffffffffffffffffffffffffffffffffffffff) = SUB v12e141(0x10000000000000000000000000000000000000000) v12e13b(0x1)
0x1450x12e: v12e145 = AND v33c v12e142(0xffffffffffffffffffffffffffffffffffffffff)
0x1470x12e: MSTORE v12e13a v12e145
0x1480x12e: v12e148 = MLOAD v12e137(0x40)
0x14c0x12e: v12e14c = SUB v12e13a v12e148
0x14d0x12e: v12e14d(0x20) = CONST 
0x14f0x12e: v12e14f = ADD v12e14d(0x20) v12e14c
0x1510x12e: RETURN v12e148 v12e14f
----------------------------------

Begin block 0x1360x152
prev = {'0x34d'}, next = {}
----------------------------------
Block 0x1360x152
0x1370x152: v152137(0x40) = CONST 
0x13a0x152: v15213a = MLOAD v152137(0x40)
0x13b0x152: v15213b(0x1) = CONST 
0x13d0x152: v15213d(0xa0) = CONST 
0x13f0x152: v15213f(0x2) = CONST 
0x1410x152: v152141(0x10000000000000000000000000000000000000000) = EXP v15213f(0x2) v15213d(0xa0)
0x1420x152: v152142(0xffffffffffffffffffffffffffffffffffffffff) = SUB v152141(0x10000000000000000000000000000000000000000) v15213b(0x1)
0x1450x152: v152145 = AND v362 v152142(0xffffffffffffffffffffffffffffffffffffffff)
0x1470x152: MSTORE v15213a v152145
0x1480x152: v152148 = MLOAD v152137(0x40)
0x14c0x152: v15214c = SUB v15213a v152148
0x14d0x152: v15214d(0x20) = CONST 
0x14f0x152: v15214f = ADD v15214d(0x20) v15214c
0x1510x152: RETURN v152148 v15214f
----------------------------------

Begin block 0x1360x16f
prev = {'0x367'}, next = {}
----------------------------------
Block 0x1360x16f
0x1370x16f: v16f137(0x40) = CONST 
0x13a0x16f: v16f13a = MLOAD v16f137(0x40)
0x13b0x16f: v16f13b(0x1) = CONST 
0x13d0x16f: v16f13d(0xa0) = CONST 
0x13f0x16f: v16f13f(0x2) = CONST 
0x1410x16f: v16f141(0x10000000000000000000000000000000000000000) = EXP v16f13f(0x2) v16f13d(0xa0)
0x1420x16f: v16f142(0xffffffffffffffffffffffffffffffffffffffff) = SUB v16f141(0x10000000000000000000000000000000000000000) v16f13b(0x1)
0x1450x16f: v16f145 = AND v373 v16f142(0xffffffffffffffffffffffffffffffffffffffff)
0x1470x16f: MSTORE v16f13a v16f145
0x1480x16f: v16f148 = MLOAD v16f137(0x40)
0x14c0x16f: v16f14c = SUB v16f13a v16f148
0x14d0x16f: v16f14d(0x20) = CONST 
0x14f0x16f: v16f14f = ADD v16f14d(0x20) v16f14c
0x1510x16f: RETURN v16f148 v16f14f
----------------------------------

Begin block 0x1360x177
prev = {'0x376'}, next = {}
----------------------------------
Block 0x1360x177
0x1370x177: v177137(0x40) = CONST 
0x13a0x177: v17713a = MLOAD v177137(0x40)
0x13b0x177: v17713b(0x1) = CONST 
0x13d0x177: v17713d(0xa0) = CONST 
0x13f0x177: v17713f(0x2) = CONST 
0x1410x177: v177141(0x10000000000000000000000000000000000000000) = EXP v17713f(0x2) v17713d(0xa0)
0x1420x177: v177142(0xffffffffffffffffffffffffffffffffffffffff) = SUB v177141(0x10000000000000000000000000000000000000000) v17713b(0x1)
0x1450x177: v177145 = AND v38e v177142(0xffffffffffffffffffffffffffffffffffffffff)
0x1470x177: MSTORE v17713a v177145
0x1480x177: v177148 = MLOAD v177137(0x40)
0x14c0x177: v17714c = SUB v17713a v177148
0x14d0x177: v17714d(0x20) = CONST 
0x14f0x177: v17714f = ADD v17714d(0x20) v17714c
0x1510x177: RETURN v177148 v17714f
----------------------------------

Begin block 0x152
prev = {}, next = {'0x168', '0x164'}
----------------------------------
function tokens(uint256)()
Block 0x152
0x153: v153(0x136) = CONST 
0x156: v156(0x4) = CONST 
0x159: v159 = CALLDATASIZE 
0x15a: v15a = SUB v159 v156(0x4)
0x15b: v15b(0x20) = CONST 
0x15e: v15e = LT v15a v15b(0x20)
0x15f: v15f = ISZERO v15e
0x160: v160(0x168) = CONST 
0x163: JUMPI v160(0x168) v15f
----------------------------------

Begin block 0x164
prev = {'0x152'}, next = {}
----------------------------------
Block 0x164
0x164: v164(0x0) = CONST 
0x167: REVERT v164(0x0) v164(0x0)
----------------------------------

Begin block 0x168
prev = {'0x152'}, next = {'0x33f'}
----------------------------------
Block 0x168
0x16a: v16a = CALLDATALOAD v156(0x4)
0x16b: v16b(0x33f) = CONST 
0x16e: JUMP v16b(0x33f)
----------------------------------

Begin block 0x16f
prev = {}, next = {'0x367'}
----------------------------------
function owner()()
Block 0x16f
0x170: v170(0x136) = CONST 
0x173: v173(0x367) = CONST 
0x176: JUMP v173(0x367)
----------------------------------

Begin block 0x177
prev = {}, next = {'0x18d', '0x189'}
----------------------------------
function 0xa6434e7f()
Block 0x177
0x178: v178(0x136) = CONST 
0x17b: v17b(0x4) = CONST 
0x17e: v17e = CALLDATASIZE 
0x17f: v17f = SUB v17e v17b(0x4)
0x180: v180(0x20) = CONST 
0x183: v183 = LT v17f v180(0x20)
0x184: v184 = ISZERO v183
0x185: v185(0x18d) = CONST 
0x188: JUMPI v185(0x18d) v184
----------------------------------

Begin block 0x189
prev = {'0x177'}, next = {}
----------------------------------
Block 0x189
0x189: v189(0x0) = CONST 
0x18c: REVERT v189(0x0) v189(0x0)
----------------------------------

Begin block 0x18d
prev = {'0x177'}, next = {'0x376'}
----------------------------------
Block 0x18d
0x18f: v18f = CALLDATALOAD v17b(0x4)
0x190: v190(0x376) = CONST 
0x193: JUMP v190(0x376)
----------------------------------

Begin block 0x194
prev = {}, next = {'0x1aa', '0x1a6'}
----------------------------------
function changeOwner(address)()
Block 0x194
0x195: v195(0x1ba) = CONST 
0x198: v198(0x4) = CONST 
0x19b: v19b = CALLDATASIZE 
0x19c: v19c = SUB v19b v198(0x4)
0x19d: v19d(0x20) = CONST 
0x1a0: v1a0 = LT v19c v19d(0x20)
0x1a1: v1a1 = ISZERO v1a0
0x1a2: v1a2(0x1aa) = CONST 
0x1a5: JUMPI v1a2(0x1aa) v1a1
----------------------------------

Begin block 0x1a6
prev = {'0x194'}, next = {}
----------------------------------
Block 0x1a6
0x1a6: v1a6(0x0) = CONST 
0x1a9: REVERT v1a6(0x0) v1a6(0x0)
----------------------------------

Begin block 0x1aa
prev = {'0x194'}, next = {'0x391'}
----------------------------------
Block 0x1aa
0x1ac: v1ac = CALLDATALOAD v198(0x4)
0x1ad: v1ad(0x1) = CONST 
0x1af: v1af(0xa0) = CONST 
0x1b1: v1b1(0x2) = CONST 
0x1b3: v1b3(0x10000000000000000000000000000000000000000) = EXP v1b1(0x2) v1af(0xa0)
0x1b4: v1b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b3(0x10000000000000000000000000000000000000000) v1ad(0x1)
0x1b5: v1b5 = AND v1b4(0xffffffffffffffffffffffffffffffffffffffff) v1ac
0x1b6: v1b6(0x391) = CONST 
0x1b9: JUMP v1b6(0x391)
----------------------------------

Begin block 0x1ba0x194
prev = {'0x481'}, next = {}
----------------------------------
Block 0x1ba0x194
0x1bb0x194: STOP 
----------------------------------

Begin block 0x1ba0x24c
prev = {'0x7d3'}, next = {}
----------------------------------
Block 0x1ba0x24c
0x1bb0x24c: STOP 
----------------------------------

Begin block 0x1ba0x2d9
prev = {'0xc45'}, next = {}
----------------------------------
Block 0x1ba0x2d9
0x1bb0x2d9: STOP 
----------------------------------

Begin block 0x1bc
prev = {}, next = {'0x1d2', '0x1ce'}
----------------------------------
function 0xad8731b0()
Block 0x1bc
0x1bd: v1bd(0x1e2) = CONST 
0x1c0: v1c0(0x4) = CONST 
0x1c3: v1c3 = CALLDATASIZE 
0x1c4: v1c4 = SUB v1c3 v1c0(0x4)
0x1c5: v1c5(0x20) = CONST 
0x1c8: v1c8 = LT v1c4 v1c5(0x20)
0x1c9: v1c9 = ISZERO v1c8
0x1ca: v1ca(0x1d2) = CONST 
0x1cd: JUMPI v1ca(0x1d2) v1c9
----------------------------------

Begin block 0x1ce
prev = {'0x1bc'}, next = {}
----------------------------------
Block 0x1ce
0x1ce: v1ce(0x0) = CONST 
0x1d1: REVERT v1ce(0x0) v1ce(0x0)
----------------------------------

Begin block 0x1d2
prev = {'0x1bc'}, next = {'0x4d6'}
----------------------------------
Block 0x1d2
0x1d4: v1d4 = CALLDATALOAD v1c0(0x4)
0x1d5: v1d5(0x1) = CONST 
0x1d7: v1d7(0xa0) = CONST 
0x1d9: v1d9(0x2) = CONST 
0x1db: v1db(0x10000000000000000000000000000000000000000) = EXP v1d9(0x2) v1d7(0xa0)
0x1dc: v1dc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1db(0x10000000000000000000000000000000000000000) v1d5(0x1)
0x1dd: v1dd = AND v1dc(0xffffffffffffffffffffffffffffffffffffffff) v1d4
0x1de: v1de(0x4d6) = CONST 
0x1e1: JUMP v1de(0x4d6)
----------------------------------

Begin block 0x1e2
prev = {'0x4d6'}, next = {}
----------------------------------
Block 0x1e2
0x1e3: v1e3(0x40) = CONST 
0x1e6: v1e6 = MLOAD v1e3(0x40)
0x1e9: MSTORE v1e6 v4f1
0x1ea: v1ea = MLOAD v1e3(0x40)
0x1ee: v1ee = SUB v1e6 v1ea
0x1ef: v1ef(0x20) = CONST 
0x1f1: v1f1 = ADD v1ef(0x20) v1ee
0x1f3: RETURN v1ea v1f1
----------------------------------

Begin block 0x1f4
prev = {}, next = {'0x1fc'}
----------------------------------
function 0xb58eb63f()
Block 0x1f4
0x1f5: v1f5(0x1fc) = CONST 
0x1f8: v1f8(0x4f4) = CONST 
0x1fb: v1fb_0 = CALLPRIVATE v1f8(0x4f4) v1f5(0x1fc)
----------------------------------

Begin block 0x1fc
prev = {'0x1f4'}, next = {'0x220'}
----------------------------------
Block 0x1fc
0x1fd: v1fd(0x40) = CONST 
0x200: v200 = MLOAD v1fd(0x40)
0x201: v201(0x20) = CONST 
0x205: MSTORE v200 v201(0x20)
0x207: v207 = MLOAD v1fb_0
0x20a: v20a = ADD v200 v201(0x20)
0x20b: MSTORE v20a v207
0x20d: v20d = MLOAD v1fb_0
0x214: v214 = ADD v200 v1fd(0x40)
0x218: v218 = ADD v201(0x20) v1fb_0
0x21a: v21a = MUL v20d v201(0x20)
0x21e: v21e(0x0) = CONST 
----------------------------------

Begin block 0x220
prev = {'0x229', '0x1fc'}, next = {'0x229', '0x238'}
----------------------------------
Block 0x220
0x220_0x0: v220_0 = PHI v21e(0x0) v233
0x223: v223 = LT v220_0 v21a
0x224: v224 = ISZERO v223
0x225: v225(0x238) = CONST 
0x228: JUMPI v225(0x238) v224
----------------------------------

Begin block 0x229
prev = {'0x220'}, next = {'0x220'}
----------------------------------
Block 0x229
0x229_0x0: v229_0 = PHI v21e(0x0) v233
0x22b: v22b = ADD v229_0 v218
0x22c: v22c = MLOAD v22b
0x22f: v22f = ADD v229_0 v214
0x230: MSTORE v22f v22c
0x231: v231(0x20) = CONST 
0x233: v233 = ADD v231(0x20) v229_0
0x234: v234(0x220) = CONST 
0x237: JUMP v234(0x220)
----------------------------------

Begin block 0x238
prev = {'0x220'}, next = {}
----------------------------------
Block 0x238
0x23f: v23f = ADD v21a v214
0x244: v244(0x40) = CONST 
0x246: v246 = MLOAD v244(0x40)
0x249: v249 = SUB v23f v246
0x24b: RETURN v246 v249
----------------------------------

Begin block 0x24c
prev = {}, next = {'0x262', '0x25e'}
----------------------------------
function 0xc99d3a06()
Block 0x24c
0x24d: v24d(0x1ba) = CONST 
0x250: v250(0x4) = CONST 
0x253: v253 = CALLDATASIZE 
0x254: v254 = SUB v253 v250(0x4)
0x255: v255(0x20) = CONST 
0x258: v258 = LT v254 v255(0x20)
0x259: v259 = ISZERO v258
0x25a: v25a(0x262) = CONST 
0x25d: JUMPI v25a(0x262) v259
----------------------------------

Begin block 0x25e
prev = {'0x24c'}, next = {}
----------------------------------
Block 0x25e
0x25e: v25e(0x0) = CONST 
0x261: REVERT v25e(0x0) v25e(0x0)
----------------------------------

Begin block 0x262
prev = {'0x24c'}, next = {'0x58a'}
----------------------------------
Block 0x262
0x264: v264 = CALLDATALOAD v250(0x4)
0x265: v265(0x1) = CONST 
0x267: v267(0xa0) = CONST 
0x269: v269(0x2) = CONST 
0x26b: v26b(0x10000000000000000000000000000000000000000) = EXP v269(0x2) v267(0xa0)
0x26c: v26c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26b(0x10000000000000000000000000000000000000000) v265(0x1)
0x26d: v26d = AND v26c(0xffffffffffffffffffffffffffffffffffffffff) v264
0x26e: v26e(0x58a) = CONST 
0x271: JUMP v26e(0x58a)
----------------------------------

Begin block 0x272
prev = {}, next = {'0x288', '0x284'}
----------------------------------
function collaterals(address)()
Block 0x272
0x273: v273(0x298) = CONST 
0x276: v276(0x4) = CONST 
0x279: v279 = CALLDATASIZE 
0x27a: v27a = SUB v279 v276(0x4)
0x27b: v27b(0x20) = CONST 
0x27e: v27e = LT v27a v27b(0x20)
0x27f: v27f = ISZERO v27e
0x280: v280(0x288) = CONST 
0x283: JUMPI v280(0x288) v27f
----------------------------------

Begin block 0x284
prev = {'0x272'}, next = {}
----------------------------------
Block 0x284
0x284: v284(0x0) = CONST 
0x287: REVERT v284(0x0) v284(0x0)
----------------------------------

Begin block 0x288
prev = {'0x272'}, next = {'0x861'}
----------------------------------
Block 0x288
0x28a: v28a = CALLDATALOAD v276(0x4)
0x28b: v28b(0x1) = CONST 
0x28d: v28d(0xa0) = CONST 
0x28f: v28f(0x2) = CONST 
0x291: v291(0x10000000000000000000000000000000000000000) = EXP v28f(0x2) v28d(0xa0)
0x292: v292(0xffffffffffffffffffffffffffffffffffffffff) = SUB v291(0x10000000000000000000000000000000000000000) v28b(0x1)
0x293: v293 = AND v292(0xffffffffffffffffffffffffffffffffffffffff) v28a
0x294: v294(0x861) = CONST 
0x297: JUMP v294(0x861)
----------------------------------

Begin block 0x298
prev = {'0x861'}, next = {}
----------------------------------
Block 0x298
0x299: v299(0x40) = CONST 
0x29c: v29c = MLOAD v299(0x40)
0x29e: v29e = ISZERO v880
0x29f: v29f = ISZERO v29e
0x2a1: MSTORE v29c v29f
0x2a2: v2a2(0xffffffffffffffffffffffffffffffff) = CONST 
0x2b5: v2b5 = AND v899 v2a2(0xffffffffffffffffffffffffffffffff)
0x2b6: v2b6(0x20) = CONST 
0x2b9: v2b9 = ADD v29c v2b6(0x20)
0x2ba: MSTORE v2b9 v2b5
0x2bb: v2bb(0x1) = CONST 
0x2bd: v2bd(0xa0) = CONST 
0x2bf: v2bf(0x2) = CONST 
0x2c1: v2c1(0x10000000000000000000000000000000000000000) = EXP v2bf(0x2) v2bd(0xa0)
0x2c2: v2c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c1(0x10000000000000000000000000000000000000000) v2bb(0x1)
0x2c5: v2c5 = AND v8a3 v2c2(0xffffffffffffffffffffffffffffffffffffffff)
0x2c8: v2c8 = ADD v299(0x40) v29c
0x2c9: MSTORE v2c8 v2c5
0x2ca: v2ca(0x60) = CONST 
0x2cd: v2cd = ADD v29c v2ca(0x60)
0x2ce: MSTORE v2cd v87c
0x2cf: v2cf = MLOAD v299(0x40)
0x2d3: v2d3 = SUB v29c v2cf
0x2d4: v2d4(0x80) = CONST 
0x2d6: v2d6 = ADD v2d4(0x80) v2d3
0x2d8: RETURN v2cf v2d6
----------------------------------

Begin block 0x2d9
prev = {}, next = {'0x2eb', '0x2ef'}
----------------------------------
function 0xf0d2d5a8()
Block 0x2d9
0x2da: v2da(0x1ba) = CONST 
0x2dd: v2dd(0x4) = CONST 
0x2e0: v2e0 = CALLDATASIZE 
0x2e1: v2e1 = SUB v2e0 v2dd(0x4)
0x2e2: v2e2(0x20) = CONST 
0x2e5: v2e5 = LT v2e1 v2e2(0x20)
0x2e6: v2e6 = ISZERO v2e5
0x2e7: v2e7(0x2ef) = CONST 
0x2ea: JUMPI v2e7(0x2ef) v2e6
----------------------------------

Begin block 0x2eb
prev = {'0x2d9'}, next = {}
----------------------------------
Block 0x2eb
0x2eb: v2eb(0x0) = CONST 
0x2ee: REVERT v2eb(0x0) v2eb(0x0)
----------------------------------

Begin block 0x2ef
prev = {'0x2d9'}, next = {'0x8a7'}
----------------------------------
Block 0x2ef
0x2f1: v2f1 = CALLDATALOAD v2dd(0x4)
0x2f2: v2f2(0x1) = CONST 
0x2f4: v2f4(0xa0) = CONST 
0x2f6: v2f6(0x2) = CONST 
0x2f8: v2f8(0x10000000000000000000000000000000000000000) = EXP v2f6(0x2) v2f4(0xa0)
0x2f9: v2f9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2f8(0x10000000000000000000000000000000000000000) v2f2(0x1)
0x2fa: v2fa = AND v2f9(0xffffffffffffffffffffffffffffffffffffffff) v2f1
0x2fb: v2fb(0x8a7) = CONST 
0x2fe: JUMP v2fb(0x8a7)
----------------------------------

Begin block 0x2ff
prev = {'0x101'}, next = {'0x108'}
----------------------------------
Block 0x2ff
0x300: v300(0x0) = CONST 
0x304: MSTORE v300(0x0) v103
0x305: v305(0x4) = CONST 
0x307: v307(0x20) = CONST 
0x30b: MSTORE v307(0x20) v305(0x4)
0x30c: v30c(0x40) = CONST 
0x310: v310 = SHA3 v300(0x0) v30c(0x40)
0x311: v311 = SLOAD v310
0x312: v312(0x1) = CONST 
0x314: v314(0xa0) = CONST 
0x316: v316(0x2) = CONST 
0x318: v318(0x10000000000000000000000000000000000000000) = EXP v316(0x2) v314(0xa0)
0x319: v319(0xffffffffffffffffffffffffffffffffffffffff) = SUB v318(0x10000000000000000000000000000000000000000) v312(0x1)
0x31c: v31c = AND v319(0xffffffffffffffffffffffffffffffffffffffff) v311
0x31f: MSTORE v300(0x0) v31c
0x320: v320(0x3) = CONST 
0x324: MSTORE v307(0x20) v320(0x3)
0x326: v326 = SHA3 v300(0x0) v30c(0x40)
0x327: v327(0x1) = CONST 
0x329: v329 = ADD v327(0x1) v326
0x32a: v32a = SLOAD v329
0x32d: v32d = AND v319(0xffffffffffffffffffffffffffffffffffffffff) v32a
0x32f: JUMP vec(0x108)
----------------------------------

Begin block 0x330
prev = {'0x12e'}, next = {'0x1360x12e'}
----------------------------------
Block 0x330
0x331: v331(0x1) = CONST 
0x333: v333 = SLOAD v331(0x1)
0x334: v334(0x1) = CONST 
0x336: v336(0xa0) = CONST 
0x338: v338(0x2) = CONST 
0x33a: v33a(0x10000000000000000000000000000000000000000) = EXP v338(0x2) v336(0xa0)
0x33b: v33b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33a(0x10000000000000000000000000000000000000000) v334(0x1)
0x33c: v33c = AND v33b(0xffffffffffffffffffffffffffffffffffffffff) v333
0x33e: JUMP v12f(0x136)
----------------------------------

Begin block 0x33f
prev = {'0x168'}, next = {'0x34d', '0x34c'}
----------------------------------
Block 0x33f
0x340: v340(0x2) = CONST 
0x343: v343 = SLOAD v340(0x2)
0x347: v347 = LT v16a v343
0x348: v348(0x34d) = CONST 
0x34b: JUMPI v348(0x34d) v347
----------------------------------

Begin block 0x34c
prev = {'0x33f'}, next = {}
----------------------------------
Block 0x34c
0x34c: THROW 
----------------------------------

Begin block 0x34d
prev = {'0x33f'}, next = {'0x1360x152'}
----------------------------------
Block 0x34d
0x34e: v34e(0x0) = CONST 
0x352: MSTORE v34e(0x0) v340(0x2)
0x353: v353(0x20) = CONST 
0x357: v357 = SHA3 v34e(0x0) v353(0x20)
0x358: v358 = ADD v357 v16a
0x359: v359 = SLOAD v358
0x35a: v35a(0x1) = CONST 
0x35c: v35c(0xa0) = CONST 
0x35e: v35e(0x2) = CONST 
0x360: v360(0x10000000000000000000000000000000000000000) = EXP v35e(0x2) v35c(0xa0)
0x361: v361(0xffffffffffffffffffffffffffffffffffffffff) = SUB v360(0x10000000000000000000000000000000000000000) v35a(0x1)
0x362: v362 = AND v361(0xffffffffffffffffffffffffffffffffffffffff) v359
0x366: JUMP v153(0x136)
----------------------------------

Begin block 0x367
prev = {'0x16f'}, next = {'0x1360x16f'}
----------------------------------
Block 0x367
0x368: v368(0x0) = CONST 
0x36a: v36a = SLOAD v368(0x0)
0x36b: v36b(0x1) = CONST 
0x36d: v36d(0xa0) = CONST 
0x36f: v36f(0x2) = CONST 
0x371: v371(0x10000000000000000000000000000000000000000) = EXP v36f(0x2) v36d(0xa0)
0x372: v372(0xffffffffffffffffffffffffffffffffffffffff) = SUB v371(0x10000000000000000000000000000000000000000) v36b(0x1)
0x373: v373 = AND v372(0xffffffffffffffffffffffffffffffffffffffff) v36a
0x375: JUMP v170(0x136)
----------------------------------

Begin block 0x376
prev = {'0x18d'}, next = {'0x1360x177'}
----------------------------------
Block 0x376
0x377: v377(0x4) = CONST 
0x379: v379(0x20) = CONST 
0x37b: MSTORE v379(0x20) v377(0x4)
0x37c: v37c(0x0) = CONST 
0x380: MSTORE v37c(0x0) v18f
0x381: v381(0x40) = CONST 
0x384: v384 = SHA3 v37c(0x0) v381(0x40)
0x385: v385 = SLOAD v384
0x386: v386(0x1) = CONST 
0x388: v388(0xa0) = CONST 
0x38a: v38a(0x2) = CONST 
0x38c: v38c(0x10000000000000000000000000000000000000000) = EXP v38a(0x2) v388(0xa0)
0x38d: v38d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v38c(0x10000000000000000000000000000000000000000) v386(0x1)
0x38e: v38e = AND v38d(0xffffffffffffffffffffffffffffffffffffffff) v385
0x390: JUMP v178(0x136)
----------------------------------

Begin block 0x391
prev = {'0x1aa'}, next = {'0x3a4', '0x40a'}
----------------------------------
Block 0x391
0x392: v392(0x0) = CONST 
0x394: v394 = SLOAD v392(0x0)
0x395: v395(0x1) = CONST 
0x397: v397(0xa0) = CONST 
0x399: v399(0x2) = CONST 
0x39b: v39b(0x10000000000000000000000000000000000000000) = EXP v399(0x2) v397(0xa0)
0x39c: v39c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v39b(0x10000000000000000000000000000000000000000) v395(0x1)
0x39d: v39d = AND v39c(0xffffffffffffffffffffffffffffffffffffffff) v394
0x39e: v39e = CALLER 
0x39f: v39f = EQ v39e v39d
0x3a0: v3a0(0x40a) = CONST 
0x3a3: JUMPI v3a0(0x40a) v39f
----------------------------------

Begin block 0x3a4
prev = {'0x391'}, next = {}
----------------------------------
Block 0x3a4
0x3a4: v3a4(0x40) = CONST 
0x3a7: v3a7 = MLOAD v3a4(0x40)
0x3a8: v3a8(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x3ca: MSTORE v3a7 v3a8(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x3cb: v3cb(0x20) = CONST 
0x3cd: v3cd(0x4) = CONST 
0x3d0: v3d0 = ADD v3a7 v3cd(0x4)
0x3d1: MSTORE v3d0 v3cb(0x20)
0x3d2: v3d2(0xd) = CONST 
0x3d4: v3d4(0x24) = CONST 
0x3d7: v3d7 = ADD v3a7 v3d4(0x24)
0x3d8: MSTORE v3d7 v3d2(0xd)
0x3d9: v3d9(0x4d757374206265206f776e657200000000000000000000000000000000000000) = CONST 
0x3fa: v3fa(0x44) = CONST 
0x3fd: v3fd = ADD v3a7 v3fa(0x44)
0x3fe: MSTORE v3fd v3d9(0x4d757374206265206f776e657200000000000000000000000000000000000000)
0x400: v400 = MLOAD v3a4(0x40)
0x404: v404 = SUB v3a7 v400
0x405: v405(0x64) = CONST 
0x407: v407 = ADD v405(0x64) v404
0x409: REVERT v400 v407
----------------------------------

Begin block 0x40a
prev = {'0x391'}, next = {'0x41b', '0x481'}
----------------------------------
Block 0x40a
0x40b: v40b(0x1) = CONST 
0x40d: v40d(0xa0) = CONST 
0x40f: v40f(0x2) = CONST 
0x411: v411(0x10000000000000000000000000000000000000000) = EXP v40f(0x2) v40d(0xa0)
0x412: v412(0xffffffffffffffffffffffffffffffffffffffff) = SUB v411(0x10000000000000000000000000000000000000000) v40b(0x1)
0x414: v414 = AND v1b5 v412(0xffffffffffffffffffffffffffffffffffffffff)
0x415: v415 = ISZERO v414
0x416: v416 = ISZERO v415
0x417: v417(0x481) = CONST 
0x41a: JUMPI v417(0x481) v416
----------------------------------

Begin block 0x41b
prev = {'0x40a'}, next = {}
----------------------------------
Block 0x41b
0x41b: v41b(0x40) = CONST 
0x41e: v41e = MLOAD v41b(0x40)
0x41f: v41f(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x441: MSTORE v41e v41f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x442: v442(0x20) = CONST 
0x444: v444(0x4) = CONST 
0x447: v447 = ADD v41e v444(0x4)
0x448: MSTORE v447 v442(0x20)
0x449: v449(0x18) = CONST 
0x44b: v44b(0x24) = CONST 
0x44e: v44e = ADD v41e v44b(0x24)
0x44f: MSTORE v44e v449(0x18)
0x450: v450(0x41646472657373206d757374206e6f74206265206e756c6c0000000000000000) = CONST 
0x471: v471(0x44) = CONST 
0x474: v474 = ADD v41e v471(0x44)
0x475: MSTORE v474 v450(0x41646472657373206d757374206e6f74206265206e756c6c0000000000000000)
0x477: v477 = MLOAD v41b(0x40)
0x47b: v47b = SUB v41e v477
0x47c: v47c(0x64) = CONST 
0x47e: v47e = ADD v47c(0x64) v47b
0x480: REVERT v477 v47e
----------------------------------

Begin block 0x481
prev = {'0x40a'}, next = {'0x1ba0x194'}
----------------------------------
Block 0x481
0x482: v482(0x0) = CONST 
0x485: v485 = SLOAD v482(0x0)
0x486: v486(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x49b: v49b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v486(0xffffffffffffffffffffffffffffffffffffffff)
0x49c: v49c = AND v49b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v485
0x49d: v49d(0x1) = CONST 
0x49f: v49f(0xa0) = CONST 
0x4a1: v4a1(0x2) = CONST 
0x4a3: v4a3(0x10000000000000000000000000000000000000000) = EXP v4a1(0x2) v49f(0xa0)
0x4a4: v4a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4a3(0x10000000000000000000000000000000000000000) v49d(0x1)
0x4a6: v4a6 = AND v1b5 v4a4(0xffffffffffffffffffffffffffffffffffffffff)
0x4a9: v4a9 = OR v4a6 v49c
0x4ab: SSTORE v482(0x0) v4a9
0x4ac: v4ac(0x40) = CONST 
0x4ae: v4ae = MLOAD v4ac(0x40)
0x4b1: v4b1(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36) = CONST 
0x4d3: LOG2 v4ae v482(0x0) v4b1(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36) v4a6
0x4d5: JUMP v195(0x1ba)
----------------------------------

Begin block 0x4d6
prev = {'0x1d2'}, next = {'0x1e2'}
----------------------------------
Block 0x4d6
0x4d7: v4d7(0x1) = CONST 
0x4d9: v4d9(0xa0) = CONST 
0x4db: v4db(0x2) = CONST 
0x4dd: v4dd(0x10000000000000000000000000000000000000000) = EXP v4db(0x2) v4d9(0xa0)
0x4de: v4de(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4dd(0x10000000000000000000000000000000000000000) v4d7(0x1)
0x4df: v4df = AND v4de(0xffffffffffffffffffffffffffffffffffffffff) v1dd
0x4e0: v4e0(0x0) = CONST 
0x4e4: MSTORE v4e0(0x0) v4df
0x4e5: v4e5(0x3) = CONST 
0x4e7: v4e7(0x20) = CONST 
0x4e9: MSTORE v4e7(0x20) v4e5(0x3)
0x4ea: v4ea(0x40) = CONST 
0x4ed: v4ed = SHA3 v4e0(0x0) v4ea(0x40)
0x4ee: v4ee(0x2) = CONST 
0x4f0: v4f0 = ADD v4ee(0x2) v4ed
0x4f1: v4f1 = SLOAD v4f0
0x4f3: JUMP v1bd(0x1e2)
----------------------------------

Begin block 0x4f4
prev = {}, next = {'0x522', '0x513'}
----------------------------------
function 0x4f4(v4f4arg0)
Block 0x4f4
0x4f5: v4f5(0x2) = CONST 
0x4f7: v4f7 = SLOAD v4f5(0x2)
0x4f8: v4f8(0x40) = CONST 
0x4fb: v4fb = MLOAD v4f8(0x40)
0x4fe: MSTORE v4fb v4f7
0x4ff: v4ff(0x20) = CONST 
0x503: v503 = MUL v4f7 v4ff(0x20)
0x505: v505 = ADD v4fb v503
0x506: v506 = ADD v505 v4ff(0x20)
0x509: MSTORE v4f8(0x40) v506
0x50a: v50a(0x60) = CONST 
0x50e: v50e = ISZERO v4f7
0x50f: v50f(0x522) = CONST 
0x512: JUMPI v50f(0x522) v50e
----------------------------------

Begin block 0x513
prev = {'0x4f4'}, next = {'0x522'}
----------------------------------
Block 0x513
0x514: v514(0x20) = CONST 
0x516: v516 = ADD v514(0x20) v4fb
0x517: v517(0x20) = CONST 
0x51a: v51a = MUL v4f7 v517(0x20)
0x51c: v51c = CODESIZE 
0x51e: CODECOPY v516 v51c v51a
0x51f: v51f = ADD v51a v516
----------------------------------

Begin block 0x522
prev = {'0x4f4', '0x513'}, next = {'0x528'}
----------------------------------
Block 0x522
0x526: v526(0x0) = CONST 
----------------------------------

Begin block 0x528
prev = {'0x522', '0x566'}, next = {'0x5850x4f4', '0x533'}
----------------------------------
Block 0x528
0x528_0x0: v528_0 = PHI v526(0x0) v580
0x529: v529(0x2) = CONST 
0x52b: v52b = SLOAD v529(0x2)
0x52d: v52d = LT v528_0 v52b
0x52e: v52e = ISZERO v52d
0x52f: v52f(0x585) = CONST 
0x532: JUMPI v52f(0x585) v52e
----------------------------------

Begin block 0x533
prev = {'0x528'}, next = {'0x540', '0x53f'}
----------------------------------
Block 0x533
0x533_0x0: v533_0 = PHI v526(0x0) v580
0x533: v533(0x2) = CONST 
0x536: v536 = SLOAD v533(0x2)
0x53a: v53a = LT v533_0 v536
0x53b: v53b(0x540) = CONST 
0x53e: JUMPI v53b(0x540) v53a
----------------------------------

Begin block 0x53f
prev = {'0x533'}, next = {}
----------------------------------
Block 0x53f
0x53f: THROW 
----------------------------------

Begin block 0x540
prev = {'0x533'}, next = {'0x565', '0x566'}
----------------------------------
Block 0x540
0x540_0x0: v540_0 = PHI v526(0x0) v580
0x540_0x2: v540_2 = PHI v526(0x0) v580
0x541: v541(0x0) = CONST 
0x545: MSTORE v541(0x0) v533(0x2)
0x546: v546(0x20) = CONST 
0x54a: v54a = SHA3 v541(0x0) v546(0x20)
0x54b: v54b = ADD v54a v540_0
0x54c: v54c = SLOAD v54b
0x54e: v54e = MLOAD v4fb
0x54f: v54f(0x1) = CONST 
0x551: v551(0xa0) = CONST 
0x553: v553(0x2) = CONST 
0x555: v555(0x10000000000000000000000000000000000000000) = EXP v553(0x2) v551(0xa0)
0x556: v556(0xffffffffffffffffffffffffffffffffffffffff) = SUB v555(0x10000000000000000000000000000000000000000) v54f(0x1)
0x559: v559 = AND v54c v556(0xffffffffffffffffffffffffffffffffffffffff)
0x560: v560 = LT v540_2 v54e
0x561: v561(0x566) = CONST 
0x564: JUMPI v561(0x566) v560
----------------------------------

Begin block 0x565
prev = {'0x540'}, next = {}
----------------------------------
Block 0x565
0x565: THROW 
----------------------------------

Begin block 0x566
prev = {'0x540'}, next = {'0x528'}
----------------------------------
Block 0x566
0x566_0x0: v566_0 = PHI v526(0x0) v580
0x566_0x3: v566_3 = PHI v526(0x0) v580
0x567: v567(0x1) = CONST 
0x569: v569(0xa0) = CONST 
0x56b: v56b(0x2) = CONST 
0x56d: v56d(0x10000000000000000000000000000000000000000) = EXP v56b(0x2) v569(0xa0)
0x56e: v56e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v56d(0x10000000000000000000000000000000000000000) v567(0x1)
0x571: v571 = AND v559 v56e(0xffffffffffffffffffffffffffffffffffffffff)
0x572: v572(0x20) = CONST 
0x576: v576 = MUL v572(0x20) v566_0
0x579: v579 = ADD v4fb v576
0x57c: v57c = ADD v572(0x20) v579
0x57d: MSTORE v57c v571
0x57e: v57e(0x1) = CONST 
0x580: v580 = ADD v57e(0x1) v566_3
0x581: v581(0x528) = CONST 
0x584: JUMP v581(0x528)
----------------------------------

Begin block 0x5850x4f4
prev = {'0x528'}, next = {'0x5870x4f4'}
----------------------------------
Block 0x5850x4f4
----------------------------------

Begin block 0x5850xce8
prev = {'0xcee'}, next = {'0x5870xce8'}
----------------------------------
Block 0x5850xce8
----------------------------------

Begin block 0x5870x4f4
prev = {'0x5850x4f4'}, next = {}
----------------------------------
Block 0x5870x4f4
0x5890x4f4: RETURNPRIVATE v4f4arg0 v4fb
----------------------------------

Begin block 0x5870xce8
prev = {'0x5850xce8'}, next = {}
----------------------------------
Block 0x5870xce8
0x5890xce8: RETURNPRIVATE vce9(0x587) vce8arg1
----------------------------------

Begin block 0x58a
prev = {'0x262'}, next = {'0x603', '0x59d'}
----------------------------------
Block 0x58a
0x58b: v58b(0x0) = CONST 
0x58d: v58d = SLOAD v58b(0x0)
0x58e: v58e(0x1) = CONST 
0x590: v590(0xa0) = CONST 
0x592: v592(0x2) = CONST 
0x594: v594(0x10000000000000000000000000000000000000000) = EXP v592(0x2) v590(0xa0)
0x595: v595(0xffffffffffffffffffffffffffffffffffffffff) = SUB v594(0x10000000000000000000000000000000000000000) v58e(0x1)
0x596: v596 = AND v595(0xffffffffffffffffffffffffffffffffffffffff) v58d
0x597: v597 = CALLER 
0x598: v598 = EQ v597 v596
0x599: v599(0x603) = CONST 
0x59c: JUMPI v599(0x603) v598
----------------------------------

Begin block 0x59d
prev = {'0x58a'}, next = {}
----------------------------------
Block 0x59d
0x59d: v59d(0x40) = CONST 
0x5a0: v5a0 = MLOAD v59d(0x40)
0x5a1: v5a1(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x5c3: MSTORE v5a0 v5a1(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x5c4: v5c4(0x20) = CONST 
0x5c6: v5c6(0x4) = CONST 
0x5c9: v5c9 = ADD v5a0 v5c6(0x4)
0x5ca: MSTORE v5c9 v5c4(0x20)
0x5cb: v5cb(0xd) = CONST 
0x5cd: v5cd(0x24) = CONST 
0x5d0: v5d0 = ADD v5a0 v5cd(0x24)
0x5d1: MSTORE v5d0 v5cb(0xd)
0x5d2: v5d2(0x4d757374206265206f776e657200000000000000000000000000000000000000) = CONST 
0x5f3: v5f3(0x44) = CONST 
0x5f6: v5f6 = ADD v5a0 v5f3(0x44)
0x5f7: MSTORE v5f6 v5d2(0x4d757374206265206f776e657200000000000000000000000000000000000000)
0x5f9: v5f9 = MLOAD v59d(0x40)
0x5fd: v5fd = SUB v5a0 v5f9
0x5fe: v5fe(0x64) = CONST 
0x600: v600 = ADD v5fe(0x64) v5fd
0x602: REVERT v5f9 v600
----------------------------------

Begin block 0x603
prev = {'0x58a'}, next = {'0x68c', '0x626'}
----------------------------------
Block 0x603
0x604: v604(0x1) = CONST 
0x606: v606(0xa0) = CONST 
0x608: v608(0x2) = CONST 
0x60a: v60a(0x10000000000000000000000000000000000000000) = EXP v608(0x2) v606(0xa0)
0x60b: v60b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v60a(0x10000000000000000000000000000000000000000) v604(0x1)
0x60d: v60d = AND v26d v60b(0xffffffffffffffffffffffffffffffffffffffff)
0x60e: v60e(0x0) = CONST 
0x612: MSTORE v60e(0x0) v60d
0x613: v613(0x3) = CONST 
0x615: v615(0x20) = CONST 
0x617: MSTORE v615(0x20) v613(0x3)
0x618: v618(0x40) = CONST 
0x61b: v61b = SHA3 v60e(0x0) v618(0x40)
0x61c: v61c = SLOAD v61b
0x61d: v61d(0xff) = CONST 
0x61f: v61f = AND v61d(0xff) v61c
0x620: v620 = ISZERO v61f
0x621: v621 = ISZERO v620
0x622: v622(0x68c) = CONST 
0x625: JUMPI v622(0x68c) v621
----------------------------------

Begin block 0x626
prev = {'0x603'}, next = {}
----------------------------------
Block 0x626
0x626: v626(0x40) = CONST 
0x629: v629 = MLOAD v626(0x40)
0x62a: v62a(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x64c: MSTORE v629 v62a(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x64d: v64d(0x20) = CONST 
0x64f: v64f(0x4) = CONST 
0x652: v652 = ADD v629 v64f(0x4)
0x653: MSTORE v652 v64d(0x20)
0x654: v654(0x1d) = CONST 
0x656: v656(0x24) = CONST 
0x659: v659 = ADD v629 v656(0x24)
0x65a: MSTORE v659 v654(0x1d)
0x65b: v65b(0x4d523a20636f6c6c61746572616c20646f6573206e6f74206578697374000000) = CONST 
0x67c: v67c(0x44) = CONST 
0x67f: v67f = ADD v629 v67c(0x44)
0x680: MSTORE v67f v65b(0x4d523a20636f6c6c61746572616c20646f6573206e6f74206578697374000000)
0x682: v682 = MLOAD v626(0x40)
0x686: v686 = SUB v629 v682
0x687: v687(0x64) = CONST 
0x689: v689 = ADD v687(0x64) v686
0x68b: REVERT v682 v689
----------------------------------

Begin block 0x68c
prev = {'0x603'}, next = {'0x6e1', '0x6e0'}
----------------------------------
Block 0x68c
0x68d: v68d(0x1) = CONST 
0x68f: v68f(0xa0) = CONST 
0x691: v691(0x2) = CONST 
0x693: v693(0x10000000000000000000000000000000000000000) = EXP v691(0x2) v68f(0xa0)
0x694: v694(0xffffffffffffffffffffffffffffffffffffffff) = SUB v693(0x10000000000000000000000000000000000000000) v68d(0x1)
0x696: v696 = AND v26d v694(0xffffffffffffffffffffffffffffffffffffffff)
0x697: v697(0x0) = CONST 
0x69b: MSTORE v697(0x0) v696
0x69c: v69c(0x3) = CONST 
0x69e: v69e(0x20) = CONST 
0x6a2: MSTORE v69e(0x20) v69c(0x3)
0x6a3: v6a3(0x40) = CONST 
0x6a7: v6a7 = SHA3 v697(0x0) v6a3(0x40)
0x6a8: v6a8(0x2) = CONST 
0x6ac: v6ac = ADD v6a8(0x2) v6a7
0x6ad: v6ad = SLOAD v6ac
0x6af: MSTORE v697(0x0) v6ad
0x6b0: v6b0(0x4) = CONST 
0x6b4: MSTORE v69e(0x20) v6b0(0x4)
0x6b6: v6b6 = SHA3 v697(0x0) v6a3(0x40)
0x6b8: v6b8 = SLOAD v6b6
0x6b9: v6b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ce: v6ce(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6b9(0xffffffffffffffffffffffffffffffffffffffff)
0x6cf: v6cf = AND v6ce(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v6b8
0x6d1: SSTORE v6b6 v6cf
0x6d3: v6d3 = SLOAD v6a8(0x2)
0x6d4: v6d4(0x0) = CONST 
0x6d6: v6d6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v6d4(0x0)
0x6d8: v6d8 = ADD v6d3 v6d6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x6db: v6db = LT v6d8 v6d3
0x6dc: v6dc(0x6e1) = CONST 
0x6df: JUMPI v6dc(0x6e1) v6db
----------------------------------

Begin block 0x6e0
prev = {'0x68c'}, next = {}
----------------------------------
Block 0x6e0
0x6e0: THROW 
----------------------------------

Begin block 0x6e1
prev = {'0x68c'}, next = {'0x703', '0x7c0'}
----------------------------------
Block 0x6e1
0x6e2: v6e2(0x0) = CONST 
0x6e6: MSTORE v6e2(0x0) v6a8(0x2)
0x6e7: v6e7(0x20) = CONST 
0x6eb: v6eb = SHA3 v6e2(0x0) v6e7(0x20)
0x6ec: v6ec = ADD v6eb v6d8
0x6ed: v6ed = SLOAD v6ec
0x6ee: v6ee(0x1) = CONST 
0x6f0: v6f0(0xa0) = CONST 
0x6f2: v6f2(0x2) = CONST 
0x6f4: v6f4(0x10000000000000000000000000000000000000000) = EXP v6f2(0x2) v6f0(0xa0)
0x6f5: v6f5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6f4(0x10000000000000000000000000000000000000000) v6ee(0x1)
0x6f8: v6f8 = AND v6f5(0xffffffffffffffffffffffffffffffffffffffff) v6ed
0x6fc: v6fc = AND v26d v6f5(0xffffffffffffffffffffffffffffffffffffffff)
0x6fe: v6fe = EQ v6f8 v6fc
0x6ff: v6ff(0x7c0) = CONST 
0x702: JUMPI v6ff(0x7c0) v6fe
----------------------------------

Begin block 0x703
prev = {'0x6e1'}, next = {'0x745', '0x744'}
----------------------------------
Block 0x703
0x703: v703(0x1) = CONST 
0x705: v705(0xa0) = CONST 
0x707: v707(0x2) = CONST 
0x709: v709(0x10000000000000000000000000000000000000000) = EXP v707(0x2) v705(0xa0)
0x70a: v70a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v709(0x10000000000000000000000000000000000000000) v703(0x1)
0x70c: v70c = AND v26d v70a(0xffffffffffffffffffffffffffffffffffffffff)
0x70d: v70d(0x0) = CONST 
0x711: MSTORE v70d(0x0) v70c
0x712: v712(0x3) = CONST 
0x714: v714(0x20) = CONST 
0x716: MSTORE v714(0x20) v712(0x3)
0x717: v717(0x40) = CONST 
0x71a: v71a = SHA3 v70d(0x0) v717(0x40)
0x71b: v71b = SLOAD v71a
0x71c: v71c(0x2) = CONST 
0x71f: v71f = SLOAD v71c(0x2)
0x720: v720(0x100) = CONST 
0x725: v725 = DIV v71b v720(0x100)
0x726: v726(0xffffffffffffffffffffffffffffffff) = CONST 
0x737: v737 = AND v726(0xffffffffffffffffffffffffffffffff) v725
0x73f: v73f = LT v737 v71f
0x740: v740(0x745) = CONST 
0x743: JUMPI v740(0x745) v73f
----------------------------------

Begin block 0x744
prev = {'0x703'}, next = {}
----------------------------------
Block 0x744
0x744: THROW 
----------------------------------

Begin block 0x745
prev = {'0x703'}, next = {'0x7c0'}
----------------------------------
Block 0x745
0x746: v746(0x0) = CONST 
0x74a: MSTORE v746(0x0) v71c(0x2)
0x74b: v74b(0x20) = CONST 
0x74f: v74f = SHA3 v746(0x0) v74b(0x20)
0x752: v752 = ADD v737 v74f
0x754: v754 = SLOAD v752
0x755: v755(0x1) = CONST 
0x757: v757(0xa0) = CONST 
0x759: v759(0x2) = CONST 
0x75b: v75b(0x10000000000000000000000000000000000000000) = EXP v759(0x2) v757(0xa0)
0x75c: v75c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v75b(0x10000000000000000000000000000000000000000) v755(0x1)
0x75f: v75f = AND v75c(0xffffffffffffffffffffffffffffffffffffffff) v6f8
0x760: v760(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x775: v775(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v760(0xffffffffffffffffffffffffffffffffffffffff)
0x778: v778 = AND v754 v775(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)
0x779: v779 = OR v778 v75f
0x77b: SSTORE v752 v779
0x77e: v77e = AND v6f8 v75c(0xffffffffffffffffffffffffffffffffffffffff)
0x780: MSTORE v746(0x0) v77e
0x781: v781(0x3) = CONST 
0x785: MSTORE v74b(0x20) v781(0x3)
0x786: v786(0x40) = CONST 
0x789: v789 = SHA3 v746(0x0) v786(0x40)
0x78b: v78b = SLOAD v789
0x78c: v78c(0xffffffffffffffffffffffffffffffff) = CONST 
0x79f: v79f = AND v737 v78c(0xffffffffffffffffffffffffffffffff)
0x7a0: v7a0(0x100) = CONST 
0x7a3: v7a3 = MUL v7a0(0x100) v79f
0x7a4: v7a4(0xffffffffffffffffffffffffffffffff00) = CONST 
0x7b6: v7b6(0xffffffffffffffffffffffffffffff00000000000000000000000000000000ff) = NOT v7a4(0xffffffffffffffffffffffffffffffff00)
0x7b9: v7b9 = AND v78b v7b6(0xffffffffffffffffffffffffffffff00000000000000000000000000000000ff)
0x7bd: v7bd = OR v7b9 v7a3
0x7bf: SSTORE v789 v7bd
----------------------------------

Begin block 0x7c0
prev = {'0x745', '0x6e1'}, next = {'0xcbf'}
----------------------------------
Block 0x7c0
0x7c1: v7c1(0x2) = CONST 
0x7c4: v7c4 = SLOAD v7c1(0x2)
0x7c6: v7c6(0x7d3) = CONST 
0x7ca: v7ca(0x0) = CONST 
0x7cc: v7cc(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v7ca(0x0)
0x7ce: v7ce = ADD v7c4 v7cc(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x7cf: v7cf(0xcbf) = CONST 
0x7d2: JUMP v7cf(0xcbf)
----------------------------------

Begin block 0x7d3
prev = {'0xce3'}, next = {'0x1ba0x24c'}
----------------------------------
Block 0x7d3
0x7d3_0x2: v7d3_2 = PHI v26d v6f8
0x7d3_0x3: v7d3_3 = PHI v24d(0x1ba) v26d
0x7d5: v7d5(0x1) = CONST 
0x7d7: v7d7(0xa0) = CONST 
0x7d9: v7d9(0x2) = CONST 
0x7db: v7db(0x10000000000000000000000000000000000000000) = EXP v7d9(0x2) v7d7(0xa0)
0x7dc: v7dc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7db(0x10000000000000000000000000000000000000000) v7d5(0x1)
0x7de: v7de = AND v7d3_2 v7dc(0xffffffffffffffffffffffffffffffffffffffff)
0x7df: v7df(0x0) = CONST 
0x7e3: MSTORE v7df(0x0) v7de
0x7e4: v7e4(0x3) = CONST 
0x7e6: v7e6(0x20) = CONST 
0x7e8: MSTORE v7e6(0x20) v7e4(0x3)
0x7e9: v7e9(0x40) = CONST 
0x7ed: v7ed = SHA3 v7df(0x0) v7e9(0x40)
0x7ef: v7ef = SLOAD v7ed
0x7f0: v7f0(0xffffffffffffffffffffffffffffff0000000000000000000000000000000000) = CONST 
0x811: v811 = AND v7f0(0xffffffffffffffffffffffffffffff0000000000000000000000000000000000) v7ef
0x813: SSTORE v7ed v811
0x814: v814(0x1) = CONST 
0x817: v817 = ADD v7ed v814(0x1)
0x819: v819 = SLOAD v817
0x81a: v81a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82f: v82f(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v81a(0xffffffffffffffffffffffffffffffffffffffff)
0x830: v830 = AND v82f(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v819
0x832: SSTORE v817 v830
0x833: v833(0x2) = CONST 
0x835: v835 = ADD v833(0x2) v7ed
0x838: SSTORE v835 v7df(0x0)
0x839: v839 = MLOAD v7e9(0x40)
0x83a: v83a(0xd89d2ee68ab04dca0193f48a4aff55e20fa5ec0429a8a8c1c51b8dad6178a593) = CONST 
0x85d: LOG2 v839 v7df(0x0) v83a(0xd89d2ee68ab04dca0193f48a4aff55e20fa5ec0429a8a8c1c51b8dad6178a593) v7de
0x860: JUMP v7d3_3
----------------------------------

Begin block 0x861
prev = {'0x288'}, next = {'0x298'}
----------------------------------
Block 0x861
0x862: v862(0x3) = CONST 
0x864: v864(0x20) = CONST 
0x866: MSTORE v864(0x20) v862(0x3)
0x867: v867(0x0) = CONST 
0x86b: MSTORE v867(0x0) v293
0x86c: v86c(0x40) = CONST 
0x86f: v86f = SHA3 v867(0x0) v86c(0x40)
0x871: v871 = SLOAD v86f
0x872: v872(0x1) = CONST 
0x875: v875 = ADD v86f v872(0x1)
0x876: v876 = SLOAD v875
0x877: v877(0x2) = CONST 
0x87b: v87b = ADD v86f v877(0x2)
0x87c: v87c = SLOAD v87b
0x87d: v87d(0xff) = CONST 
0x880: v880 = AND v871 v87d(0xff)
0x882: v882(0x100) = CONST 
0x887: v887 = DIV v871 v882(0x100)
0x888: v888(0xffffffffffffffffffffffffffffffff) = CONST 
0x899: v899 = AND v888(0xffffffffffffffffffffffffffffffff) v887
0x89b: v89b(0x1) = CONST 
0x89d: v89d(0xa0) = CONST 
0x89f: v89f(0x2) = CONST 
0x8a1: v8a1(0x10000000000000000000000000000000000000000) = EXP v89f(0x2) v89d(0xa0)
0x8a2: v8a2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8a1(0x10000000000000000000000000000000000000000) v89b(0x1)
0x8a3: v8a3 = AND v8a2(0xffffffffffffffffffffffffffffffffffffffff) v876
0x8a6: JUMP v273(0x298)
----------------------------------

Begin block 0x8a7
prev = {'0x2ef'}, next = {'0x8ba', '0x920'}
----------------------------------
Block 0x8a7
0x8a8: v8a8(0x0) = CONST 
0x8aa: v8aa = SLOAD v8a8(0x0)
0x8ab: v8ab(0x1) = CONST 
0x8ad: v8ad(0xa0) = CONST 
0x8af: v8af(0x2) = CONST 
0x8b1: v8b1(0x10000000000000000000000000000000000000000) = EXP v8af(0x2) v8ad(0xa0)
0x8b2: v8b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b1(0x10000000000000000000000000000000000000000) v8ab(0x1)
0x8b3: v8b3 = AND v8b2(0xffffffffffffffffffffffffffffffffffffffff) v8aa
0x8b4: v8b4 = CALLER 
0x8b5: v8b5 = EQ v8b4 v8b3
0x8b6: v8b6(0x920) = CONST 
0x8b9: JUMPI v8b6(0x920) v8b5
----------------------------------

Begin block 0x8ba
prev = {'0x8a7'}, next = {}
----------------------------------
Block 0x8ba
0x8ba: v8ba(0x40) = CONST 
0x8bd: v8bd = MLOAD v8ba(0x40)
0x8be: v8be(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x8e0: MSTORE v8bd v8be(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x8e1: v8e1(0x20) = CONST 
0x8e3: v8e3(0x4) = CONST 
0x8e6: v8e6 = ADD v8bd v8e3(0x4)
0x8e7: MSTORE v8e6 v8e1(0x20)
0x8e8: v8e8(0xd) = CONST 
0x8ea: v8ea(0x24) = CONST 
0x8ed: v8ed = ADD v8bd v8ea(0x24)
0x8ee: MSTORE v8ed v8e8(0xd)
0x8ef: v8ef(0x4d757374206265206f776e657200000000000000000000000000000000000000) = CONST 
0x910: v910(0x44) = CONST 
0x913: v913 = ADD v8bd v910(0x44)
0x914: MSTORE v913 v8ef(0x4d757374206265206f776e657200000000000000000000000000000000000000)
0x916: v916 = MLOAD v8ba(0x40)
0x91a: v91a = SUB v8bd v916
0x91b: v91b(0x64) = CONST 
0x91d: v91d = ADD v91b(0x64) v91a
0x91f: REVERT v916 v91d
----------------------------------

Begin block 0x920
prev = {'0x8a7'}, next = {'0x986', '0x982'}
----------------------------------
Block 0x920
0x921: v921(0x1) = CONST 
0x923: v923 = SLOAD v921(0x1)
0x924: v924(0x40) = CONST 
0x927: v927 = MLOAD v924(0x40)
0x928: v928(0xbf353dbb00000000000000000000000000000000000000000000000000000000) = CONST 
0x94a: MSTORE v927 v928(0xbf353dbb00000000000000000000000000000000000000000000000000000000)
0x94b: v94b(0x1) = CONST 
0x94d: v94d(0xa0) = CONST 
0x94f: v94f(0x2) = CONST 
0x951: v951(0x10000000000000000000000000000000000000000) = EXP v94f(0x2) v94d(0xa0)
0x952: v952(0xffffffffffffffffffffffffffffffffffffffff) = SUB v951(0x10000000000000000000000000000000000000000) v94b(0x1)
0x955: v955 = AND v952(0xffffffffffffffffffffffffffffffffffffffff) v2fa
0x956: v956(0x4) = CONST 
0x959: v959 = ADD v927 v956(0x4)
0x95a: MSTORE v959 v955
0x95c: v95c = MLOAD v924(0x40)
0x960: v960 = AND v923 v952(0xffffffffffffffffffffffffffffffffffffffff)
0x962: v962(0xbf353dbb) = CONST 
0x968: v968(0x24) = CONST 
0x96c: v96c = ADD v927 v968(0x24)
0x96e: v96e(0x20) = CONST 
0x975: v975 = SUB v927 v95c
0x976: v976 = ADD v975 v968(0x24)
0x97a: v97a = EXTCODESIZE v960
0x97b: v97b = ISZERO v97a
0x97d: v97d = ISZERO v97b
0x97e: v97e(0x986) = CONST 
0x981: JUMPI v97e(0x986) v97d
----------------------------------

Begin block 0x982
prev = {'0x920'}, next = {}
----------------------------------
Block 0x982
0x982: v982(0x0) = CONST 
0x985: REVERT v982(0x0) v982(0x0)
----------------------------------

Begin block 0x986
prev = {'0x920'}, next = {'0x991', '0x99a'}
----------------------------------
Block 0x986
0x988: v988 = GAS 
0x989: v989 = STATICCALL v988 v960 v95c v976 v95c v96e(0x20)
0x98a: v98a = ISZERO v989
0x98c: v98c = ISZERO v98a
0x98d: v98d(0x99a) = CONST 
0x990: JUMPI v98d(0x99a) v98c
----------------------------------

Begin block 0x991
prev = {'0x986'}, next = {}
----------------------------------
Block 0x991
0x991: v991 = RETURNDATASIZE 
0x992: v992(0x0) = CONST 
0x995: RETURNDATACOPY v992(0x0) v992(0x0) v991
0x996: v996 = RETURNDATASIZE 
0x997: v997(0x0) = CONST 
0x999: REVERT v997(0x0) v996
----------------------------------

Begin block 0x99a
prev = {'0x986'}, next = {'0x9ac', '0x9b0'}
----------------------------------
Block 0x99a
0x99f: v99f(0x40) = CONST 
0x9a1: v9a1 = MLOAD v99f(0x40)
0x9a2: v9a2 = RETURNDATASIZE 
0x9a3: v9a3(0x20) = CONST 
0x9a6: v9a6 = LT v9a2 v9a3(0x20)
0x9a7: v9a7 = ISZERO v9a6
0x9a8: v9a8(0x9b0) = CONST 
0x9ab: JUMPI v9a8(0x9b0) v9a7
----------------------------------

Begin block 0x9ac
prev = {'0x99a'}, next = {}
----------------------------------
Block 0x9ac
0x9ac: v9ac(0x0) = CONST 
0x9af: REVERT v9ac(0x0) v9ac(0x0)
----------------------------------

Begin block 0x9b0
prev = {'0x99a'}, next = {'0xa0a', '0x9ba'}
----------------------------------
Block 0x9b0
0x9b2: v9b2 = MLOAD v9a1
0x9b3: v9b3(0x1) = CONST 
0x9b5: v9b5 = EQ v9b3(0x1) v9b2
0x9b6: v9b6(0xa0a) = CONST 
0x9b9: JUMPI v9b6(0xa0a) v9b5
----------------------------------

Begin block 0x9ba
prev = {'0x9b0'}, next = {}
----------------------------------
Block 0x9ba
0x9ba: v9ba(0x40) = CONST 
0x9bc: v9bc = MLOAD v9ba(0x40)
0x9bd: v9bd(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x9df: MSTORE v9bc v9bd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x9e0: v9e0(0x4) = CONST 
0x9e2: v9e2 = ADD v9e0(0x4) v9bc
0x9e5: v9e5(0x20) = CONST 
0x9e7: v9e7 = ADD v9e5(0x20) v9e2
0x9ea: v9ea = SUB v9e7 v9e2
0x9ec: MSTORE v9e2 v9ea
0x9ed: v9ed(0x26) = CONST 
0x9f0: MSTORE v9e7 v9ed(0x26)
0x9f1: v9f1(0x20) = CONST 
0x9f3: v9f3 = ADD v9f1(0x20) v9e7
0x9f5: v9f5(0xd03) = CONST 
0x9f8: v9f8(0x26) = CONST 
0x9fb: CODECOPY v9f3 v9f5(0xd03) v9f8(0x26)
0x9fc: v9fc(0x40) = CONST 
0x9fe: v9fe = ADD v9fc(0x40) v9f3
0xa02: va02(0x40) = CONST 
0xa04: va04 = MLOAD va02(0x40)
0xa07: va07 = SUB v9fe va04
0xa09: REVERT va04 va07
----------------------------------

Begin block 0xa0a
prev = {'0x9b0'}, next = {'0xa5d', '0xa61'}
----------------------------------
Block 0xa0a
0xa0b: va0b(0x0) = CONST 
0xa0e: va0e(0x1) = CONST 
0xa10: va10(0xa0) = CONST 
0xa12: va12(0x2) = CONST 
0xa14: va14(0x10000000000000000000000000000000000000000) = EXP va12(0x2) va10(0xa0)
0xa15: va15(0xffffffffffffffffffffffffffffffffffffffff) = SUB va14(0x10000000000000000000000000000000000000000) va0e(0x1)
0xa16: va16 = AND va15(0xffffffffffffffffffffffffffffffffffffffff) v2fa
0xa17: va17(0x7bd2bea7) = CONST 
0xa1c: va1c(0x40) = CONST 
0xa1e: va1e = MLOAD va1c(0x40)
0xa20: va20(0xffffffff) = CONST 
0xa25: va25(0x7bd2bea7) = AND va20(0xffffffff) va17(0x7bd2bea7)
0xa26: va26(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xa44: va44(0x7bd2bea700000000000000000000000000000000000000000000000000000000) = MUL va26(0x100000000000000000000000000000000000000000000000000000000) va25(0x7bd2bea7)
0xa46: MSTORE va1e va44(0x7bd2bea700000000000000000000000000000000000000000000000000000000)
0xa47: va47(0x4) = CONST 
0xa49: va49 = ADD va47(0x4) va1e
0xa4a: va4a(0x20) = CONST 
0xa4c: va4c(0x40) = CONST 
0xa4e: va4e = MLOAD va4c(0x40)
0xa51: va51 = SUB va49 va4e
0xa55: va55 = EXTCODESIZE va16
0xa56: va56 = ISZERO va55
0xa58: va58 = ISZERO va56
0xa59: va59(0xa61) = CONST 
0xa5c: JUMPI va59(0xa61) va58
----------------------------------

Begin block 0xa5d
prev = {'0xa0a'}, next = {}
----------------------------------
Block 0xa5d
0xa5d: va5d(0x0) = CONST 
0xa60: REVERT va5d(0x0) va5d(0x0)
----------------------------------

Begin block 0xa61
prev = {'0xa0a'}, next = {'0xa6c', '0xa75'}
----------------------------------
Block 0xa61
0xa63: va63 = GAS 
0xa64: va64 = STATICCALL va63 va16 va4e va51 va4e va4a(0x20)
0xa65: va65 = ISZERO va64
0xa67: va67 = ISZERO va65
0xa68: va68(0xa75) = CONST 
0xa6b: JUMPI va68(0xa75) va67
----------------------------------

Begin block 0xa6c
prev = {'0xa61'}, next = {}
----------------------------------
Block 0xa6c
0xa6c: va6c = RETURNDATASIZE 
0xa6d: va6d(0x0) = CONST 
0xa70: RETURNDATACOPY va6d(0x0) va6d(0x0) va6c
0xa71: va71 = RETURNDATASIZE 
0xa72: va72(0x0) = CONST 
0xa74: REVERT va72(0x0) va71
----------------------------------

Begin block 0xa75
prev = {'0xa61'}, next = {'0xa8b', '0xa87'}
----------------------------------
Block 0xa75
0xa7a: va7a(0x40) = CONST 
0xa7c: va7c = MLOAD va7a(0x40)
0xa7d: va7d = RETURNDATASIZE 
0xa7e: va7e(0x20) = CONST 
0xa81: va81 = LT va7d va7e(0x20)
0xa82: va82 = ISZERO va81
0xa83: va83(0xa8b) = CONST 
0xa86: JUMPI va83(0xa8b) va82
----------------------------------

Begin block 0xa87
prev = {'0xa75'}, next = {}
----------------------------------
Block 0xa87
0xa87: va87(0x0) = CONST 
0xa8a: REVERT va87(0x0) va87(0x0)
----------------------------------

Begin block 0xa8b
prev = {'0xa75'}, next = {'0xab2', '0xb18'}
----------------------------------
Block 0xa8b
0xa8d: va8d = MLOAD va7c
0xa8e: va8e(0x1) = CONST 
0xa90: va90(0xa0) = CONST 
0xa92: va92(0x2) = CONST 
0xa94: va94(0x10000000000000000000000000000000000000000) = EXP va92(0x2) va90(0xa0)
0xa95: va95(0xffffffffffffffffffffffffffffffffffffffff) = SUB va94(0x10000000000000000000000000000000000000000) va8e(0x1)
0xa97: va97 = AND va8d va95(0xffffffffffffffffffffffffffffffffffffffff)
0xa98: va98(0x0) = CONST 
0xa9c: MSTORE va98(0x0) va97
0xa9d: va9d(0x3) = CONST 
0xa9f: va9f(0x20) = CONST 
0xaa1: MSTORE va9f(0x20) va9d(0x3)
0xaa2: vaa2(0x40) = CONST 
0xaa5: vaa5 = SHA3 va98(0x0) vaa2(0x40)
0xaa6: vaa6 = SLOAD vaa5
0xaaa: vaaa(0xff) = CONST 
0xaac: vaac = AND vaaa(0xff) vaa6
0xaad: vaad = ISZERO vaac
0xaae: vaae(0xb18) = CONST 
0xab1: JUMPI vaae(0xb18) vaad
----------------------------------

Begin block 0xab2
prev = {'0xa8b'}, next = {}
----------------------------------
Block 0xab2
0xab2: vab2(0x40) = CONST 
0xab5: vab5 = MLOAD vab2(0x40)
0xab6: vab6(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xad8: MSTORE vab5 vab6(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xad9: vad9(0x20) = CONST 
0xadb: vadb(0x4) = CONST 
0xade: vade = ADD vab5 vadb(0x4)
0xadf: MSTORE vade vad9(0x20)
0xae0: vae0(0x1c) = CONST 
0xae2: vae2(0x24) = CONST 
0xae5: vae5 = ADD vab5 vae2(0x24)
0xae6: MSTORE vae5 vae0(0x1c)
0xae7: vae7(0x4d523a20636f6c6c61746572616c20616c726561647920616464656400000000) = CONST 
0xb08: vb08(0x44) = CONST 
0xb0b: vb0b = ADD vab5 vb08(0x44)
0xb0c: MSTORE vb0b vae7(0x4d523a20636f6c6c61746572616c20616c726561647920616464656400000000)
0xb0e: vb0e = MLOAD vab2(0x40)
0xb12: vb12 = SUB vab5 vb0e
0xb13: vb13(0x64) = CONST 
0xb15: vb15 = ADD vb13(0x64) vb12
0xb17: REVERT vb0e vb15
----------------------------------

Begin block 0xb18
prev = {'0xa8b'}, next = {'0xc17', '0xc1b'}
----------------------------------
Block 0xb18
0xb19: vb19(0x1) = CONST 
0xb1b: vb1b(0xa0) = CONST 
0xb1d: vb1d(0x2) = CONST 
0xb1f: vb1f(0x10000000000000000000000000000000000000000) = EXP vb1d(0x2) vb1b(0xa0)
0xb20: vb20(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb1f(0x10000000000000000000000000000000000000000) vb19(0x1)
0xb23: vb23 = AND vb20(0xffffffffffffffffffffffffffffffffffffffff) va8d
0xb24: vb24(0x0) = CONST 
0xb28: MSTORE vb24(0x0) vb23
0xb29: vb29(0x3) = CONST 
0xb2b: vb2b(0x20) = CONST 
0xb2f: MSTORE vb2b(0x20) vb29(0x3)
0xb30: vb30(0x40) = CONST 
0xb34: vb34 = SHA3 vb24(0x0) vb30(0x40)
0xb36: vb36 = SLOAD vb34
0xb37: vb37(0xff) = CONST 
0xb39: vb39(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vb37(0xff)
0xb3a: vb3a = AND vb39(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vb36
0xb3b: vb3b(0x1) = CONST 
0xb3f: vb3f = OR vb3b(0x1) vb3a
0xb41: SSTORE vb34 vb3f
0xb42: vb42(0x2) = CONST 
0xb45: vb45 = SLOAD vb42(0x2)
0xb48: vb48 = ADD vb3b(0x1) vb45
0xb4b: SSTORE vb42(0x2) vb48
0xb4c: vb4c(0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace) = CONST 
0xb6e: vb6e = ADD vb45 vb4c(0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace)
0xb70: vb70 = SLOAD vb6e
0xb71: vb71(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb86: vb86(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vb71(0xffffffffffffffffffffffffffffffffffffffff)
0xb89: vb89 = AND vb86(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vb70
0xb8c: vb8c = OR vb23 vb89
0xb8e: SSTORE vb6e vb8c
0xb90: vb90 = SLOAD vb34
0xb91: vb91(0xffffffffffffffffffffffffffffffff) = CONST 
0xba4: vba4 = AND vb45 vb91(0xffffffffffffffffffffffffffffffff)
0xba5: vba5(0x100) = CONST 
0xba8: vba8 = MUL vba5(0x100) vba4
0xba9: vba9(0xffffffffffffffffffffffffffffffff00) = CONST 
0xbbb: vbbb(0xffffffffffffffffffffffffffffff00000000000000000000000000000000ff) = NOT vba9(0xffffffffffffffffffffffffffffffff00)
0xbbe: vbbe = AND vb90 vbbb(0xffffffffffffffffffffffffffffff00000000000000000000000000000000ff)
0xbbf: vbbf = OR vbbe vba8
0xbc1: SSTORE vb34 vbbf
0xbc2: vbc2 = ADD vb3b(0x1) vb34
0xbc4: vbc4 = SLOAD vbc2
0xbc7: vbc7 = AND v2fa vb20(0xffffffffffffffffffffffffffffffffffffffff)
0xbcb: vbcb = AND vb86(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vbc4
0xbcd: vbcd = OR vbc7 vbcb
0xbd0: SSTORE vbc2 vbcd
0xbd2: vbd2 = MLOAD vb30(0x40)
0xbd3: vbd3(0xc5ce281e00000000000000000000000000000000000000000000000000000000) = CONST 
0xbf5: MSTORE vbd2 vbd3(0xc5ce281e00000000000000000000000000000000000000000000000000000000)
0xbf7: vbf7 = MLOAD vb30(0x40)
0xbfb: vbfb(0xc5ce281e) = CONST 
0xc01: vc01(0x4) = CONST 
0xc05: vc05 = ADD vbd2 vc01(0x4)
0xc0a: vc0a = SUB vbd2 vbf7
0xc0b: vc0b = ADD vc0a vc01(0x4)
0xc0f: vc0f = EXTCODESIZE vbc7
0xc10: vc10 = ISZERO vc0f
0xc12: vc12 = ISZERO vc10
0xc13: vc13(0xc1b) = CONST 
0xc16: JUMPI vc13(0xc1b) vc12
----------------------------------

Begin block 0xc17
prev = {'0xb18'}, next = {}
----------------------------------
Block 0xc17
0xc17: vc17(0x0) = CONST 
0xc1a: REVERT vc17(0x0) vc17(0x0)
----------------------------------

Begin block 0xc1b
prev = {'0xb18'}, next = {'0xc2f', '0xc26'}
----------------------------------
Block 0xc1b
0xc1d: vc1d = GAS 
0xc1e: vc1e = STATICCALL vc1d vbc7 vbf7 vc0b vbf7 vb2b(0x20)
0xc1f: vc1f = ISZERO vc1e
0xc21: vc21 = ISZERO vc1f
0xc22: vc22(0xc2f) = CONST 
0xc25: JUMPI vc22(0xc2f) vc21
----------------------------------

Begin block 0xc26
prev = {'0xc1b'}, next = {}
----------------------------------
Block 0xc26
0xc26: vc26 = RETURNDATASIZE 
0xc27: vc27(0x0) = CONST 
0xc2a: RETURNDATACOPY vc27(0x0) vc27(0x0) vc26
0xc2b: vc2b = RETURNDATASIZE 
0xc2c: vc2c(0x0) = CONST 
0xc2e: REVERT vc2c(0x0) vc2b
----------------------------------

Begin block 0xc2f
prev = {'0xc1b'}, next = {'0xc45', '0xc41'}
----------------------------------
Block 0xc2f
0xc34: vc34(0x40) = CONST 
0xc36: vc36 = MLOAD vc34(0x40)
0xc37: vc37 = RETURNDATASIZE 
0xc38: vc38(0x20) = CONST 
0xc3b: vc3b = LT vc37 vc38(0x20)
0xc3c: vc3c = ISZERO vc3b
0xc3d: vc3d(0xc45) = CONST 
0xc40: JUMPI vc3d(0xc45) vc3c
----------------------------------

Begin block 0xc41
prev = {'0xc2f'}, next = {}
----------------------------------
Block 0xc41
0xc41: vc41(0x0) = CONST 
0xc44: REVERT vc41(0x0) vc41(0x0)
----------------------------------

Begin block 0xc45
prev = {'0xc2f'}, next = {'0x1ba0x2d9'}
----------------------------------
Block 0xc45
0xc47: vc47 = MLOAD vc36
0xc48: vc48(0x1) = CONST 
0xc4a: vc4a(0xa0) = CONST 
0xc4c: vc4c(0x2) = CONST 
0xc4e: vc4e(0x10000000000000000000000000000000000000000) = EXP vc4c(0x2) vc4a(0xa0)
0xc4f: vc4f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc4e(0x10000000000000000000000000000000000000000) vc48(0x1)
0xc51: vc51 = AND va8d vc4f(0xffffffffffffffffffffffffffffffffffffffff)
0xc52: vc52(0x0) = CONST 
0xc56: MSTORE vc52(0x0) vc51
0xc57: vc57(0x3) = CONST 
0xc59: vc59(0x20) = CONST 
0xc5d: MSTORE vc59(0x20) vc57(0x3)
0xc5e: vc5e(0x40) = CONST 
0xc62: vc62 = SHA3 vc52(0x0) vc5e(0x40)
0xc63: vc63(0x2) = CONST 
0xc65: vc65 = ADD vc63(0x2) vc62
0xc68: SSTORE vc65 vc47
0xc6b: MSTORE vc52(0x0) vc47
0xc6c: vc6c(0x4) = CONST 
0xc70: MSTORE vc59(0x20) vc6c(0x4)
0xc73: vc73 = SHA3 vc52(0x0) vc5e(0x40)
0xc75: vc75 = SLOAD vc73
0xc76: vc76(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc8b: vc8b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vc76(0xffffffffffffffffffffffffffffffffffffffff)
0xc8c: vc8c = AND vc8b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vc75
0xc8e: vc8e = OR vc51 vc8c
0xc90: SSTORE vc73 vc8e
0xc91: vc91 = MLOAD vc5e(0x40)
0xc97: vc97(0x7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f) = CONST 
0xcba: LOG2 vc91 vc52(0x0) vc97(0x7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f) vc51
0xcbe: JUMP v2da(0x1ba)
----------------------------------

Begin block 0xcbf
prev = {'0x7c0'}, next = {'0xce3', '0xccd'}
----------------------------------
Block 0xcbf
0xcc1: vcc1 = SLOAD v7c1(0x2)
0xcc4: SSTORE v7c1(0x2) v7ce
0xcc7: vcc7 = GT vcc1 v7ce
0xcc8: vcc8 = ISZERO vcc7
0xcc9: vcc9(0xce3) = CONST 
0xccc: JUMPI vcc9(0xce3) vcc8
----------------------------------

Begin block 0xccd
prev = {'0xcbf'}, next = {'0xce3'}
----------------------------------
Block 0xccd
0xccd: vccd(0x0) = CONST 
0xcd1: MSTORE vccd(0x0) v7c1(0x2)
0xcd2: vcd2(0x20) = CONST 
0xcd5: vcd5 = SHA3 vccd(0x0) vcd2(0x20)
0xcd6: vcd6(0xce3) = CONST 
0xcdb: vcdb = ADD vcd5 vcc1
0xcde: vcde = ADD v7ce vcd5
0xcdf: vcdf(0xce8) = CONST 
0xce2: vce2_0 = CALLPRIVATE vcdf(0xce8) vcde vcdb
----------------------------------

Begin block 0xce3
prev = {'0xcbf', '0xccd'}, next = {'0x7d3'}
----------------------------------
Block 0xce3
0xce3_0x3: vce3_3 = PHI v7c1(0x2) v7c6(0x7d3)
0xce7: JUMP vce3_3
----------------------------------

Begin block 0xce8
prev = {}, next = {'0xcee'}
----------------------------------
function 0xce8(vce8arg0, vce8arg1)
Block 0xce8
0xce9: vce9(0x587) = CONST 
----------------------------------

Begin block 0xcee
prev = {'0xcf7', '0xce8'}, next = {'0xcf7', '0x5850xce8'}
----------------------------------
Block 0xcee
0xcee_0x0: vcee_0 = PHI vcfd vce8arg0
0xcf1: vcf1 = GT vce8arg1 vcee_0
0xcf2: vcf2 = ISZERO vcf1
0xcf3: vcf3(0x585) = CONST 
0xcf6: JUMPI vcf3(0x585) vcf2
----------------------------------

Begin block 0xcf7
prev = {'0xcee'}, next = {'0xcee'}
----------------------------------
Block 0xcf7
0xcf7_0x0: vcf7_0 = PHI vcfd vce8arg0
0xcf7: vcf7(0x0) = CONST 
0xcfa: SSTORE vcf7_0 vcf7(0x0)
0xcfb: vcfb(0x1) = CONST 
0xcfd: vcfd = ADD vcfb(0x1) vcf7_0
0xcfe: vcfe(0xcee) = CONST 
0xd01: JUMP vcfe(0xcee)
----------------------------------

Begin block 0xd64
prev = {'0x10', '0xdb'}, next = {'0xe60x0'}
----------------------------------
Block 0xd64
0xd65: vd65(0xe6) = CONST 
0xd66: CALLPRIVATE vd65(0xe6)
----------------------------------

Begin block 0xd67
prev = {'0xcf'}, next = {}
----------------------------------
Block 0xd67
0xd68: vd68(0xeb) = CONST 
0xd69: CALLPRIVATE vd68(0xeb)
----------------------------------

Begin block 0xd6a
prev = {'0xdb'}, next = {}
----------------------------------
Block 0xd6a
0xd6b: vd6b(0x12e) = CONST 
0xd6c: CALLPRIVATE vd6b(0x12e)
----------------------------------

Begin block 0xd6d
prev = {'0xaa'}, next = {}
----------------------------------
Block 0xd6d
0xd6e: vd6e(0x152) = CONST 
0xd6f: CALLPRIVATE vd6e(0x152)
----------------------------------

Begin block 0xd70
prev = {'0xb5'}, next = {}
----------------------------------
Block 0xd70
0xd71: vd71(0x16f) = CONST 
0xd72: CALLPRIVATE vd71(0x16f)
----------------------------------

Begin block 0xd73
prev = {'0xc0'}, next = {}
----------------------------------
Block 0xd73
0xd74: vd74(0x177) = CONST 
0xd75: CALLPRIVATE vd74(0x177)
----------------------------------

Begin block 0xd76
prev = {'0x78'}, next = {}
----------------------------------
Block 0xd76
0xd77: vd77(0x194) = CONST 
0xd78: CALLPRIVATE vd77(0x194)
----------------------------------

Begin block 0xd79
prev = {'0x84'}, next = {}
----------------------------------
Block 0xd79
0xd7a: vd7a(0x1bc) = CONST 
0xd7b: CALLPRIVATE vd7a(0x1bc)
----------------------------------

Begin block 0xd7c
prev = {'0x8f'}, next = {}
----------------------------------
Block 0xd7c
0xd7d: vd7d(0x1f4) = CONST 
0xd7e: CALLPRIVATE vd7d(0x1f4)
----------------------------------

Begin block 0xd7f
prev = {'0x53'}, next = {}
----------------------------------
Block 0xd7f
0xd80: vd80(0x24c) = CONST 
0xd81: CALLPRIVATE vd80(0x24c)
----------------------------------

Begin block 0xd82
prev = {'0x5e'}, next = {}
----------------------------------
Block 0xd82
0xd83: vd83(0x272) = CONST 
0xd84: CALLPRIVATE vd83(0x272)
----------------------------------

Begin block 0xd85
prev = {'0x69'}, next = {}
----------------------------------
Block 0xd85
0xd86: vd86(0x2d9) = CONST 
0xd87: CALLPRIVATE vd86(0x2d9)
----------------------------------
