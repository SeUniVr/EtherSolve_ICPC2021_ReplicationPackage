
Begin block 0x0
prev = {}, next = {'0xacd', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xabf: vabf(0xacd) = CONST 
0xac0: JUMPI vabf(0xacd) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xad0', '0x1e'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0x24c33e4f) = CONST 
0x19: v19 = EQ v14(0x24c33e4f) v12
0xac1: vac1(0xad0) = CONST 
0xac2: JUMPI vac1(0xad0) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0xad3', '0x29'}
----------------------------------
Block 0x1e
0x1f: v1f(0x277206dd) = CONST 
0x24: v24 = EQ v1f(0x277206dd) v12
0xac3: vac3(0xad3) = CONST 
0xac4: JUMPI vac3(0xad3) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0xad6'}
----------------------------------
Block 0x29
0x2a: v2a(0x422f16da) = CONST 
0x2f: v2f = EQ v2a(0x422f16da) v12
0xac5: vac5(0xad6) = CONST 
0xac6: JUMPI vac5(0xad6) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0x3f', '0xad9'}
----------------------------------
Block 0x34
0x35: v35(0x67969383) = CONST 
0x3a: v3a = EQ v35(0x67969383) v12
0xac7: vac7(0xad9) = CONST 
0xac8: JUMPI vac7(0xad9) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x4a', '0xadc'}
----------------------------------
Block 0x3f
0x40: v40(0xabff0110) = CONST 
0x45: v45 = EQ v40(0xabff0110) v12
0xac9: vac9(0xadc) = CONST 
0xaca: JUMPI vac9(0xadc) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0xadf', '0xacd'}
----------------------------------
Block 0x4a
0x4b: v4b(0xd77366a4) = CONST 
0x50: v50 = EQ v4b(0xd77366a4) v12
0xacb: vacb(0xadf) = CONST 
0xacc: JUMPI vacb(0xadf) v50
----------------------------------

Begin block 0x55
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x55
0x56: v56(0x0) = CONST 
0x59: REVERT v56(0x0) v56(0x0)
----------------------------------

Begin block 0x5a
prev = {}, next = {'0x62', '0x66'}
----------------------------------
function tokenReceiver(address[],uint256[],address[])()
Block 0x5a
0x5b: v5b = CALLVALUE 
0x5d: v5d = ISZERO v5b
0x5e: v5e(0x66) = CONST 
0x61: JUMPI v5e(0x66) v5d
----------------------------------

Begin block 0x62
prev = {'0x5a'}, next = {}
----------------------------------
Block 0x62
0x62: v62(0x0) = CONST 
0x65: REVERT v62(0x0) v62(0x0)
----------------------------------

Begin block 0x66
prev = {'0x5a'}, next = {'0x7d', '0x79'}
----------------------------------
Block 0x66
0x68: v68(0x20c) = CONST 
0x6b: v6b(0x4) = CONST 
0x6e: v6e = CALLDATASIZE 
0x6f: v6f = SUB v6e v6b(0x4)
0x70: v70(0x60) = CONST 
0x73: v73 = LT v6f v70(0x60)
0x74: v74 = ISZERO v73
0x75: v75(0x7d) = CONST 
0x78: JUMPI v75(0x7d) v74
----------------------------------

Begin block 0x79
prev = {'0x66'}, next = {}
----------------------------------
Block 0x79
0x79: v79(0x0) = CONST 
0x7c: REVERT v79(0x0) v79(0x0)
----------------------------------

Begin block 0x7d
prev = {'0x66'}, next = {'0x97', '0x93'}
----------------------------------
Block 0x7d
0x7f: v7f = ADD v6b(0x4) v6f
0x81: v81(0x20) = CONST 
0x84: v84 = ADD v6b(0x4) v81(0x20)
0x86: v86 = CALLDATALOAD v6b(0x4)
0x87: v87(0x1) = CONST 
0x89: v89(0x20) = CONST 
0x8b: v8b(0x100000000) = SHL v89(0x20) v87(0x1)
0x8d: v8d = GT v86 v8b(0x100000000)
0x8e: v8e = ISZERO v8d
0x8f: v8f(0x97) = CONST 
0x92: JUMPI v8f(0x97) v8e
----------------------------------

Begin block 0x93
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x93
0x93: v93(0x0) = CONST 
0x96: REVERT v93(0x0) v93(0x0)
----------------------------------

Begin block 0x97
prev = {'0x7d'}, next = {'0xa5', '0xa9'}
----------------------------------
Block 0x97
0x99: v99 = ADD v6b(0x4) v86
0x9b: v9b(0x20) = CONST 
0x9e: v9e = ADD v99 v9b(0x20)
0x9f: v9f = GT v9e v7f
0xa0: va0 = ISZERO v9f
0xa1: va1(0xa9) = CONST 
0xa4: JUMPI va1(0xa9) va0
----------------------------------

Begin block 0xa5
prev = {'0x97'}, next = {}
----------------------------------
Block 0xa5
0xa5: va5(0x0) = CONST 
0xa8: REVERT va5(0x0) va5(0x0)
----------------------------------

Begin block 0xa9
prev = {'0x97'}, next = {'0xca', '0xc6'}
----------------------------------
Block 0xa9
0xab: vab = CALLDATALOAD v99
0xad: vad(0x20) = CONST 
0xaf: vaf = ADD vad(0x20) v99
0xb2: vb2(0x20) = CONST 
0xb5: vb5 = MUL vab vb2(0x20)
0xb7: vb7 = ADD vaf vb5
0xb8: vb8 = GT vb7 v7f
0xb9: vb9(0x1) = CONST 
0xbb: vbb(0x20) = CONST 
0xbd: vbd(0x100000000) = SHL vbb(0x20) vb9(0x1)
0xbf: vbf = GT vab vbd(0x100000000)
0xc0: vc0 = OR vbf vb8
0xc1: vc1 = ISZERO vc0
0xc2: vc2(0xca) = CONST 
0xc5: JUMPI vc2(0xca) vc1
----------------------------------

Begin block 0xc6
prev = {'0xa9'}, next = {}
----------------------------------
Block 0xc6
0xc6: vc6(0x0) = CONST 
0xc9: REVERT vc6(0x0) vc6(0x0)
----------------------------------

Begin block 0xca
prev = {'0xa9'}, next = {'0x119', '0x115'}
----------------------------------
Block 0xca
0xcf: vcf(0x20) = CONST 
0xd1: vd1 = MUL vcf(0x20) vab
0xd2: vd2(0x20) = CONST 
0xd4: vd4 = ADD vd2(0x20) vd1
0xd5: vd5(0x40) = CONST 
0xd7: vd7 = MLOAD vd5(0x40)
0xda: vda = ADD vd7 vd4
0xdb: vdb(0x40) = CONST 
0xdd: MSTORE vdb(0x40) vda
0xe5: MSTORE vd7 vab
0xe6: ve6(0x20) = CONST 
0xe8: ve8 = ADD ve6(0x20) vd7
0xeb: veb(0x20) = CONST 
0xed: ved = MUL veb(0x20) vab
0xf1: CALLDATACOPY ve8 vaf ved
0xf2: vf2(0x0) = CONST 
0xf5: vf5 = ADD ve8 ved
0xf9: MSTORE vf5 vf2(0x0)
0xff: vff(0x20) = CONST 
0x102: v102 = ADD v84 vff(0x20)
0x105: v105 = CALLDATALOAD v84
0x109: v109(0x1) = CONST 
0x10b: v10b(0x20) = CONST 
0x10d: v10d(0x100000000) = SHL v10b(0x20) v109(0x1)
0x10f: v10f = GT v105 v10d(0x100000000)
0x110: v110 = ISZERO v10f
0x111: v111(0x119) = CONST 
0x114: JUMPI v111(0x119) v110
----------------------------------

Begin block 0x115
prev = {'0xca'}, next = {}
----------------------------------
Block 0x115
0x115: v115(0x0) = CONST 
0x118: REVERT v115(0x0) v115(0x0)
----------------------------------

Begin block 0x119
prev = {'0xca'}, next = {'0x127', '0x12b'}
----------------------------------
Block 0x119
0x11b: v11b = ADD v6b(0x4) v105
0x11d: v11d(0x20) = CONST 
0x120: v120 = ADD v11b v11d(0x20)
0x121: v121 = GT v120 v7f
0x122: v122 = ISZERO v121
0x123: v123(0x12b) = CONST 
0x126: JUMPI v123(0x12b) v122
----------------------------------

Begin block 0x127
prev = {'0x119'}, next = {}
----------------------------------
Block 0x127
0x127: v127(0x0) = CONST 
0x12a: REVERT v127(0x0) v127(0x0)
----------------------------------

Begin block 0x12b
prev = {'0x119'}, next = {'0x148', '0x14c'}
----------------------------------
Block 0x12b
0x12d: v12d = CALLDATALOAD v11b
0x12f: v12f(0x20) = CONST 
0x131: v131 = ADD v12f(0x20) v11b
0x134: v134(0x20) = CONST 
0x137: v137 = MUL v12d v134(0x20)
0x139: v139 = ADD v131 v137
0x13a: v13a = GT v139 v7f
0x13b: v13b(0x1) = CONST 
0x13d: v13d(0x20) = CONST 
0x13f: v13f(0x100000000) = SHL v13d(0x20) v13b(0x1)
0x141: v141 = GT v12d v13f(0x100000000)
0x142: v142 = OR v141 v13a
0x143: v143 = ISZERO v142
0x144: v144(0x14c) = CONST 
0x147: JUMPI v144(0x14c) v143
----------------------------------

Begin block 0x148
prev = {'0x12b'}, next = {}
----------------------------------
Block 0x148
0x148: v148(0x0) = CONST 
0x14b: REVERT v148(0x0) v148(0x0)
----------------------------------

Begin block 0x14c
prev = {'0x12b'}, next = {'0x197', '0x19b'}
----------------------------------
Block 0x14c
0x151: v151(0x20) = CONST 
0x153: v153 = MUL v151(0x20) v12d
0x154: v154(0x20) = CONST 
0x156: v156 = ADD v154(0x20) v153
0x157: v157(0x40) = CONST 
0x159: v159 = MLOAD v157(0x40)
0x15c: v15c = ADD v159 v156
0x15d: v15d(0x40) = CONST 
0x15f: MSTORE v15d(0x40) v15c
0x167: MSTORE v159 v12d
0x168: v168(0x20) = CONST 
0x16a: v16a = ADD v168(0x20) v159
0x16d: v16d(0x20) = CONST 
0x16f: v16f = MUL v16d(0x20) v12d
0x173: CALLDATACOPY v16a v131 v16f
0x174: v174(0x0) = CONST 
0x177: v177 = ADD v16a v16f
0x17b: MSTORE v177 v174(0x0)
0x181: v181(0x20) = CONST 
0x184: v184 = ADD v102 v181(0x20)
0x187: v187 = CALLDATALOAD v102
0x18b: v18b(0x1) = CONST 
0x18d: v18d(0x20) = CONST 
0x18f: v18f(0x100000000) = SHL v18d(0x20) v18b(0x1)
0x191: v191 = GT v187 v18f(0x100000000)
0x192: v192 = ISZERO v191
0x193: v193(0x19b) = CONST 
0x196: JUMPI v193(0x19b) v192
----------------------------------

Begin block 0x197
prev = {'0x14c'}, next = {}
----------------------------------
Block 0x197
0x197: v197(0x0) = CONST 
0x19a: REVERT v197(0x0) v197(0x0)
----------------------------------

Begin block 0x19b
prev = {'0x14c'}, next = {'0x1a9', '0x1ad'}
----------------------------------
Block 0x19b
0x19d: v19d = ADD v6b(0x4) v187
0x19f: v19f(0x20) = CONST 
0x1a2: v1a2 = ADD v19d v19f(0x20)
0x1a3: v1a3 = GT v1a2 v7f
0x1a4: v1a4 = ISZERO v1a3
0x1a5: v1a5(0x1ad) = CONST 
0x1a8: JUMPI v1a5(0x1ad) v1a4
----------------------------------

Begin block 0x1a9
prev = {'0x19b'}, next = {}
----------------------------------
Block 0x1a9
0x1a9: v1a9(0x0) = CONST 
0x1ac: REVERT v1a9(0x0) v1a9(0x0)
----------------------------------

Begin block 0x1ad
prev = {'0x19b'}, next = {'0x1ca', '0x1ce'}
----------------------------------
Block 0x1ad
0x1af: v1af = CALLDATALOAD v19d
0x1b1: v1b1(0x20) = CONST 
0x1b3: v1b3 = ADD v1b1(0x20) v19d
0x1b6: v1b6(0x20) = CONST 
0x1b9: v1b9 = MUL v1af v1b6(0x20)
0x1bb: v1bb = ADD v1b3 v1b9
0x1bc: v1bc = GT v1bb v7f
0x1bd: v1bd(0x1) = CONST 
0x1bf: v1bf(0x20) = CONST 
0x1c1: v1c1(0x100000000) = SHL v1bf(0x20) v1bd(0x1)
0x1c3: v1c3 = GT v1af v1c1(0x100000000)
0x1c4: v1c4 = OR v1c3 v1bc
0x1c5: v1c5 = ISZERO v1c4
0x1c6: v1c6(0x1ce) = CONST 
0x1c9: JUMPI v1c6(0x1ce) v1c5
----------------------------------

Begin block 0x1ca
prev = {'0x1ad'}, next = {}
----------------------------------
Block 0x1ca
0x1ca: v1ca(0x0) = CONST 
0x1cd: REVERT v1ca(0x0) v1ca(0x0)
----------------------------------

Begin block 0x1ce
prev = {'0x1ad'}, next = {'0x46a'}
----------------------------------
Block 0x1ce
0x1d3: v1d3(0x20) = CONST 
0x1d5: v1d5 = MUL v1d3(0x20) v1af
0x1d6: v1d6(0x20) = CONST 
0x1d8: v1d8 = ADD v1d6(0x20) v1d5
0x1d9: v1d9(0x40) = CONST 
0x1db: v1db = MLOAD v1d9(0x40)
0x1de: v1de = ADD v1db v1d8
0x1df: v1df(0x40) = CONST 
0x1e1: MSTORE v1df(0x40) v1de
0x1e9: MSTORE v1db v1af
0x1ea: v1ea(0x20) = CONST 
0x1ec: v1ec = ADD v1ea(0x20) v1db
0x1ef: v1ef(0x20) = CONST 
0x1f1: v1f1 = MUL v1ef(0x20) v1af
0x1f5: CALLDATACOPY v1ec v1b3 v1f1
0x1f6: v1f6(0x0) = CONST 
0x1f9: v1f9 = ADD v1ec v1f1
0x1fd: MSTORE v1f9 v1f6(0x0)
0x202: v202(0x46a) = CONST 
0x20b: JUMP v202(0x46a)
----------------------------------

Begin block 0x20c0x5a
prev = {'0x46a'}, next = {}
----------------------------------
Block 0x20c0x5a
0x20d0x5a: v5a20d(0x40) = CONST 
0x2100x5a: v5a210 = MLOAD v5a20d(0x40)
0x2110x5a: v5a211(0x1) = CONST 
0x2130x5a: v5a213(0x1) = CONST 
0x2150x5a: v5a215(0xa0) = CONST 
0x2170x5a: v5a217(0x10000000000000000000000000000000000000000) = SHL v5a215(0xa0) v5a213(0x1)
0x2180x5a: v5a218(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5a217(0x10000000000000000000000000000000000000000) v5a211(0x1)
0x21b0x5a: v5a21b = AND v46b v5a218(0xffffffffffffffffffffffffffffffffffffffff)
0x21d0x5a: MSTORE v5a210 v5a21b
0x21e0x5a: v5a21e = MLOAD v5a20d(0x40)
0x2220x5a: v5a222 = SUB v5a210 v5a21e
0x2230x5a: v5a223(0x20) = CONST 
0x2250x5a: v5a225 = ADD v5a223(0x20) v5a222
0x2270x5a: RETURN v5a21e v5a225
----------------------------------

Begin block 0x20c0x440
prev = {'0xa6c'}, next = {}
----------------------------------
Block 0x20c0x440
0x20d0x440: v44020d(0x40) = CONST 
0x2100x440: v440210 = MLOAD v44020d(0x40)
0x2110x440: v440211(0x1) = CONST 
0x2130x440: v440213(0x1) = CONST 
0x2150x440: v440215(0xa0) = CONST 
0x2170x440: v440217(0x10000000000000000000000000000000000000000) = SHL v440215(0xa0) v440213(0x1)
0x2180x440: v440218(0xffffffffffffffffffffffffffffffffffffffff) = SUB v440217(0x10000000000000000000000000000000000000000) v440211(0x1)
0x21b0x440: v44021b = AND va78 v440218(0xffffffffffffffffffffffffffffffffffffffff)
0x21d0x440: MSTORE v440210 v44021b
0x21e0x440: v44021e = MLOAD v44020d(0x40)
0x2220x440: v440222 = SUB v440210 v44021e
0x2230x440: v440223(0x20) = CONST 
0x2250x440: v440225 = ADD v440223(0x20) v440222
0x2270x440: RETURN v44021e v440225
----------------------------------

Begin block 0x20c0x455
prev = {'0xa7b'}, next = {}
----------------------------------
Block 0x20c0x455
0x20d0x455: v45520d(0x40) = CONST 
0x2100x455: v455210 = MLOAD v45520d(0x40)
0x2110x455: v455211(0x1) = CONST 
0x2130x455: v455213(0x1) = CONST 
0x2150x455: v455215(0xa0) = CONST 
0x2170x455: v455217(0x10000000000000000000000000000000000000000) = SHL v455215(0xa0) v455213(0x1)
0x2180x455: v455218(0xffffffffffffffffffffffffffffffffffffffff) = SUB v455217(0x10000000000000000000000000000000000000000) v455211(0x1)
0x21b0x455: v45521b = AND va87 v455218(0xffffffffffffffffffffffffffffffffffffffff)
0x21d0x455: MSTORE v455210 v45521b
0x21e0x455: v45521e = MLOAD v45520d(0x40)
0x2220x455: v455222 = SUB v455210 v45521e
0x2230x455: v455223(0x20) = CONST 
0x2250x455: v455225 = ADD v455223(0x20) v455222
0x2270x455: RETURN v45521e v455225
----------------------------------

Begin block 0x228
prev = {}, next = {'0x230', '0x234'}
----------------------------------
function setKyberNetworkProxy(address)()
Block 0x228
0x229: v229 = CALLVALUE 
0x22b: v22b = ISZERO v229
0x22c: v22c(0x234) = CONST 
0x22f: JUMPI v22c(0x234) v22b
----------------------------------

Begin block 0x230
prev = {'0x228'}, next = {}
----------------------------------
Block 0x230
0x230: v230(0x0) = CONST 
0x233: REVERT v230(0x0) v230(0x0)
----------------------------------

Begin block 0x234
prev = {'0x228'}, next = {'0x247', '0x24b'}
----------------------------------
Block 0x234
0x236: v236(0x25b) = CONST 
0x239: v239(0x4) = CONST 
0x23c: v23c = CALLDATASIZE 
0x23d: v23d = SUB v23c v239(0x4)
0x23e: v23e(0x20) = CONST 
0x241: v241 = LT v23d v23e(0x20)
0x242: v242 = ISZERO v241
0x243: v243(0x24b) = CONST 
0x246: JUMPI v243(0x24b) v242
----------------------------------

Begin block 0x247
prev = {'0x234'}, next = {}
----------------------------------
Block 0x247
0x247: v247(0x0) = CONST 
0x24a: REVERT v247(0x0) v247(0x0)
----------------------------------

Begin block 0x24b
prev = {'0x234'}, next = {'0x472'}
----------------------------------
Block 0x24b
0x24d: v24d = CALLDATALOAD v239(0x4)
0x24e: v24e(0x1) = CONST 
0x250: v250(0x1) = CONST 
0x252: v252(0xa0) = CONST 
0x254: v254(0x10000000000000000000000000000000000000000) = SHL v252(0xa0) v250(0x1)
0x255: v255(0xffffffffffffffffffffffffffffffffffffffff) = SUB v254(0x10000000000000000000000000000000000000000) v24e(0x1)
0x256: v256 = AND v255(0xffffffffffffffffffffffffffffffffffffffff) v24d
0x257: v257(0x472) = CONST 
0x25a: JUMP v257(0x472)
----------------------------------

Begin block 0x25b0x228
prev = {'0x534'}, next = {}
----------------------------------
Block 0x25b0x228
0x25c0x228: STOP 
----------------------------------

Begin block 0x25b0x25d
prev = {'0x99c'}, next = {}
----------------------------------
Block 0x25b0x25d
0x25c0x25d: STOP 
----------------------------------

Begin block 0x25b0x40d
prev = {'0xa4a'}, next = {}
----------------------------------
Block 0x25b0x40d
0x25c0x40d: STOP 
----------------------------------

Begin block 0x25d
prev = {}, next = {'0x26f', '0x273'}
----------------------------------
function trade(address[],uint256[],address[],address)()
Block 0x25d
0x25e: v25e(0x25b) = CONST 
0x261: v261(0x4) = CONST 
0x264: v264 = CALLDATASIZE 
0x265: v265 = SUB v264 v261(0x4)
0x266: v266(0x80) = CONST 
0x269: v269 = LT v265 v266(0x80)
0x26a: v26a = ISZERO v269
0x26b: v26b(0x273) = CONST 
0x26e: JUMPI v26b(0x273) v26a
----------------------------------

Begin block 0x26f
prev = {'0x25d'}, next = {}
----------------------------------
Block 0x26f
0x26f: v26f(0x0) = CONST 
0x272: REVERT v26f(0x0) v26f(0x0)
----------------------------------

Begin block 0x273
prev = {'0x25d'}, next = {'0x289', '0x28d'}
----------------------------------
Block 0x273
0x275: v275 = ADD v261(0x4) v265
0x277: v277(0x20) = CONST 
0x27a: v27a = ADD v261(0x4) v277(0x20)
0x27c: v27c = CALLDATALOAD v261(0x4)
0x27d: v27d(0x1) = CONST 
0x27f: v27f(0x20) = CONST 
0x281: v281(0x100000000) = SHL v27f(0x20) v27d(0x1)
0x283: v283 = GT v27c v281(0x100000000)
0x284: v284 = ISZERO v283
0x285: v285(0x28d) = CONST 
0x288: JUMPI v285(0x28d) v284
----------------------------------

Begin block 0x289
prev = {'0x273'}, next = {}
----------------------------------
Block 0x289
0x289: v289(0x0) = CONST 
0x28c: REVERT v289(0x0) v289(0x0)
----------------------------------

Begin block 0x28d
prev = {'0x273'}, next = {'0x29b', '0x29f'}
----------------------------------
Block 0x28d
0x28f: v28f = ADD v261(0x4) v27c
0x291: v291(0x20) = CONST 
0x294: v294 = ADD v28f v291(0x20)
0x295: v295 = GT v294 v275
0x296: v296 = ISZERO v295
0x297: v297(0x29f) = CONST 
0x29a: JUMPI v297(0x29f) v296
----------------------------------

Begin block 0x29b
prev = {'0x28d'}, next = {}
----------------------------------
Block 0x29b
0x29b: v29b(0x0) = CONST 
0x29e: REVERT v29b(0x0) v29b(0x0)
----------------------------------

Begin block 0x29f
prev = {'0x28d'}, next = {'0x2c0', '0x2bc'}
----------------------------------
Block 0x29f
0x2a1: v2a1 = CALLDATALOAD v28f
0x2a3: v2a3(0x20) = CONST 
0x2a5: v2a5 = ADD v2a3(0x20) v28f
0x2a8: v2a8(0x20) = CONST 
0x2ab: v2ab = MUL v2a1 v2a8(0x20)
0x2ad: v2ad = ADD v2a5 v2ab
0x2ae: v2ae = GT v2ad v275
0x2af: v2af(0x1) = CONST 
0x2b1: v2b1(0x20) = CONST 
0x2b3: v2b3(0x100000000) = SHL v2b1(0x20) v2af(0x1)
0x2b5: v2b5 = GT v2a1 v2b3(0x100000000)
0x2b6: v2b6 = OR v2b5 v2ae
0x2b7: v2b7 = ISZERO v2b6
0x2b8: v2b8(0x2c0) = CONST 
0x2bb: JUMPI v2b8(0x2c0) v2b7
----------------------------------

Begin block 0x2bc
prev = {'0x29f'}, next = {}
----------------------------------
Block 0x2bc
0x2bc: v2bc(0x0) = CONST 
0x2bf: REVERT v2bc(0x0) v2bc(0x0)
----------------------------------

Begin block 0x2c0
prev = {'0x29f'}, next = {'0x30f', '0x30b'}
----------------------------------
Block 0x2c0
0x2c5: v2c5(0x20) = CONST 
0x2c7: v2c7 = MUL v2c5(0x20) v2a1
0x2c8: v2c8(0x20) = CONST 
0x2ca: v2ca = ADD v2c8(0x20) v2c7
0x2cb: v2cb(0x40) = CONST 
0x2cd: v2cd = MLOAD v2cb(0x40)
0x2d0: v2d0 = ADD v2cd v2ca
0x2d1: v2d1(0x40) = CONST 
0x2d3: MSTORE v2d1(0x40) v2d0
0x2db: MSTORE v2cd v2a1
0x2dc: v2dc(0x20) = CONST 
0x2de: v2de = ADD v2dc(0x20) v2cd
0x2e1: v2e1(0x20) = CONST 
0x2e3: v2e3 = MUL v2e1(0x20) v2a1
0x2e7: CALLDATACOPY v2de v2a5 v2e3
0x2e8: v2e8(0x0) = CONST 
0x2eb: v2eb = ADD v2de v2e3
0x2ef: MSTORE v2eb v2e8(0x0)
0x2f5: v2f5(0x20) = CONST 
0x2f8: v2f8 = ADD v27a v2f5(0x20)
0x2fb: v2fb = CALLDATALOAD v27a
0x2ff: v2ff(0x1) = CONST 
0x301: v301(0x20) = CONST 
0x303: v303(0x100000000) = SHL v301(0x20) v2ff(0x1)
0x305: v305 = GT v2fb v303(0x100000000)
0x306: v306 = ISZERO v305
0x307: v307(0x30f) = CONST 
0x30a: JUMPI v307(0x30f) v306
----------------------------------

Begin block 0x30b
prev = {'0x2c0'}, next = {}
----------------------------------
Block 0x30b
0x30b: v30b(0x0) = CONST 
0x30e: REVERT v30b(0x0) v30b(0x0)
----------------------------------

Begin block 0x30f
prev = {'0x2c0'}, next = {'0x321', '0x31d'}
----------------------------------
Block 0x30f
0x311: v311 = ADD v261(0x4) v2fb
0x313: v313(0x20) = CONST 
0x316: v316 = ADD v311 v313(0x20)
0x317: v317 = GT v316 v275
0x318: v318 = ISZERO v317
0x319: v319(0x321) = CONST 
0x31c: JUMPI v319(0x321) v318
----------------------------------

Begin block 0x31d
prev = {'0x30f'}, next = {}
----------------------------------
Block 0x31d
0x31d: v31d(0x0) = CONST 
0x320: REVERT v31d(0x0) v31d(0x0)
----------------------------------

Begin block 0x321
prev = {'0x30f'}, next = {'0x33e', '0x342'}
----------------------------------
Block 0x321
0x323: v323 = CALLDATALOAD v311
0x325: v325(0x20) = CONST 
0x327: v327 = ADD v325(0x20) v311
0x32a: v32a(0x20) = CONST 
0x32d: v32d = MUL v323 v32a(0x20)
0x32f: v32f = ADD v327 v32d
0x330: v330 = GT v32f v275
0x331: v331(0x1) = CONST 
0x333: v333(0x20) = CONST 
0x335: v335(0x100000000) = SHL v333(0x20) v331(0x1)
0x337: v337 = GT v323 v335(0x100000000)
0x338: v338 = OR v337 v330
0x339: v339 = ISZERO v338
0x33a: v33a(0x342) = CONST 
0x33d: JUMPI v33a(0x342) v339
----------------------------------

Begin block 0x33e
prev = {'0x321'}, next = {}
----------------------------------
Block 0x33e
0x33e: v33e(0x0) = CONST 
0x341: REVERT v33e(0x0) v33e(0x0)
----------------------------------

Begin block 0x342
prev = {'0x321'}, next = {'0x38d', '0x391'}
----------------------------------
Block 0x342
0x347: v347(0x20) = CONST 
0x349: v349 = MUL v347(0x20) v323
0x34a: v34a(0x20) = CONST 
0x34c: v34c = ADD v34a(0x20) v349
0x34d: v34d(0x40) = CONST 
0x34f: v34f = MLOAD v34d(0x40)
0x352: v352 = ADD v34f v34c
0x353: v353(0x40) = CONST 
0x355: MSTORE v353(0x40) v352
0x35d: MSTORE v34f v323
0x35e: v35e(0x20) = CONST 
0x360: v360 = ADD v35e(0x20) v34f
0x363: v363(0x20) = CONST 
0x365: v365 = MUL v363(0x20) v323
0x369: CALLDATACOPY v360 v327 v365
0x36a: v36a(0x0) = CONST 
0x36d: v36d = ADD v360 v365
0x371: MSTORE v36d v36a(0x0)
0x377: v377(0x20) = CONST 
0x37a: v37a = ADD v2f8 v377(0x20)
0x37d: v37d = CALLDATALOAD v2f8
0x381: v381(0x1) = CONST 
0x383: v383(0x20) = CONST 
0x385: v385(0x100000000) = SHL v383(0x20) v381(0x1)
0x387: v387 = GT v37d v385(0x100000000)
0x388: v388 = ISZERO v387
0x389: v389(0x391) = CONST 
0x38c: JUMPI v389(0x391) v388
----------------------------------

Begin block 0x38d
prev = {'0x342'}, next = {}
----------------------------------
Block 0x38d
0x38d: v38d(0x0) = CONST 
0x390: REVERT v38d(0x0) v38d(0x0)
----------------------------------

Begin block 0x391
prev = {'0x342'}, next = {'0x3a3', '0x39f'}
----------------------------------
Block 0x391
0x393: v393 = ADD v261(0x4) v37d
0x395: v395(0x20) = CONST 
0x398: v398 = ADD v393 v395(0x20)
0x399: v399 = GT v398 v275
0x39a: v39a = ISZERO v399
0x39b: v39b(0x3a3) = CONST 
0x39e: JUMPI v39b(0x3a3) v39a
----------------------------------

Begin block 0x39f
prev = {'0x391'}, next = {}
----------------------------------
Block 0x39f
0x39f: v39f(0x0) = CONST 
0x3a2: REVERT v39f(0x0) v39f(0x0)
----------------------------------

Begin block 0x3a3
prev = {'0x391'}, next = {'0x3c0', '0x3c4'}
----------------------------------
Block 0x3a3
0x3a5: v3a5 = CALLDATALOAD v393
0x3a7: v3a7(0x20) = CONST 
0x3a9: v3a9 = ADD v3a7(0x20) v393
0x3ac: v3ac(0x20) = CONST 
0x3af: v3af = MUL v3a5 v3ac(0x20)
0x3b1: v3b1 = ADD v3a9 v3af
0x3b2: v3b2 = GT v3b1 v275
0x3b3: v3b3(0x1) = CONST 
0x3b5: v3b5(0x20) = CONST 
0x3b7: v3b7(0x100000000) = SHL v3b5(0x20) v3b3(0x1)
0x3b9: v3b9 = GT v3a5 v3b7(0x100000000)
0x3ba: v3ba = OR v3b9 v3b2
0x3bb: v3bb = ISZERO v3ba
0x3bc: v3bc(0x3c4) = CONST 
0x3bf: JUMPI v3bc(0x3c4) v3bb
----------------------------------

Begin block 0x3c0
prev = {'0x3a3'}, next = {}
----------------------------------
Block 0x3c0
0x3c0: v3c0(0x0) = CONST 
0x3c3: REVERT v3c0(0x0) v3c0(0x0)
----------------------------------

Begin block 0x3c4
prev = {'0x3a3'}, next = {'0x55e'}
----------------------------------
Block 0x3c4
0x3c9: v3c9(0x20) = CONST 
0x3cb: v3cb = MUL v3c9(0x20) v3a5
0x3cc: v3cc(0x20) = CONST 
0x3ce: v3ce = ADD v3cc(0x20) v3cb
0x3cf: v3cf(0x40) = CONST 
0x3d1: v3d1 = MLOAD v3cf(0x40)
0x3d4: v3d4 = ADD v3d1 v3ce
0x3d5: v3d5(0x40) = CONST 
0x3d7: MSTORE v3d5(0x40) v3d4
0x3df: MSTORE v3d1 v3a5
0x3e0: v3e0(0x20) = CONST 
0x3e2: v3e2 = ADD v3e0(0x20) v3d1
0x3e5: v3e5(0x20) = CONST 
0x3e7: v3e7 = MUL v3e5(0x20) v3a5
0x3eb: CALLDATACOPY v3e2 v3a9 v3e7
0x3ec: v3ec(0x0) = CONST 
0x3ef: v3ef = ADD v3e2 v3e7
0x3f3: MSTORE v3ef v3ec(0x0)
0x3fb: v3fb = CALLDATALOAD v37a
0x3fc: v3fc(0x1) = CONST 
0x3fe: v3fe(0x1) = CONST 
0x400: v400(0xa0) = CONST 
0x402: v402(0x10000000000000000000000000000000000000000) = SHL v400(0xa0) v3fe(0x1)
0x403: v403(0xffffffffffffffffffffffffffffffffffffffff) = SUB v402(0x10000000000000000000000000000000000000000) v3fc(0x1)
0x404: v404 = AND v403(0xffffffffffffffffffffffffffffffffffffffff) v3fb
0x407: v407(0x55e) = CONST 
0x40c: JUMP v407(0x55e)
----------------------------------

Begin block 0x40d
prev = {}, next = {'0x419', '0x415'}
----------------------------------
function initializeBroker(address)()
Block 0x40d
0x40e: v40e = CALLVALUE 
0x410: v410 = ISZERO v40e
0x411: v411(0x419) = CONST 
0x414: JUMPI v411(0x419) v410
----------------------------------

Begin block 0x415
prev = {'0x40d'}, next = {}
----------------------------------
Block 0x415
0x415: v415(0x0) = CONST 
0x418: REVERT v415(0x0) v415(0x0)
----------------------------------

Begin block 0x419
prev = {'0x40d'}, next = {'0x430', '0x42c'}
----------------------------------
Block 0x419
0x41b: v41b(0x25b) = CONST 
0x41e: v41e(0x4) = CONST 
0x421: v421 = CALLDATASIZE 
0x422: v422 = SUB v421 v41e(0x4)
0x423: v423(0x20) = CONST 
0x426: v426 = LT v422 v423(0x20)
0x427: v427 = ISZERO v426
0x428: v428(0x430) = CONST 
0x42b: JUMPI v428(0x430) v427
----------------------------------

Begin block 0x42c
prev = {'0x419'}, next = {}
----------------------------------
Block 0x42c
0x42c: v42c(0x0) = CONST 
0x42f: REVERT v42c(0x0) v42c(0x0)
----------------------------------

Begin block 0x430
prev = {'0x419'}, next = {'0x9a3'}
----------------------------------
Block 0x430
0x432: v432 = CALLDATALOAD v41e(0x4)
0x433: v433(0x1) = CONST 
0x435: v435(0x1) = CONST 
0x437: v437(0xa0) = CONST 
0x439: v439(0x10000000000000000000000000000000000000000) = SHL v437(0xa0) v435(0x1)
0x43a: v43a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v439(0x10000000000000000000000000000000000000000) v433(0x1)
0x43b: v43b = AND v43a(0xffffffffffffffffffffffffffffffffffffffff) v432
0x43c: v43c(0x9a3) = CONST 
0x43f: JUMP v43c(0x9a3)
----------------------------------

Begin block 0x440
prev = {}, next = {'0x448', '0x44c'}
----------------------------------
function broker()()
Block 0x440
0x441: v441 = CALLVALUE 
0x443: v443 = ISZERO v441
0x444: v444(0x44c) = CONST 
0x447: JUMPI v444(0x44c) v443
----------------------------------

Begin block 0x448
prev = {'0x440'}, next = {}
----------------------------------
Block 0x448
0x448: v448(0x0) = CONST 
0x44b: REVERT v448(0x0) v448(0x0)
----------------------------------

Begin block 0x44c
prev = {'0x440'}, next = {'0xa6c'}
----------------------------------
Block 0x44c
0x44e: v44e(0x20c) = CONST 
0x451: v451(0xa6c) = CONST 
0x454: JUMP v451(0xa6c)
----------------------------------

Begin block 0x455
prev = {}, next = {'0x461', '0x45d'}
----------------------------------
function kyberNetworkProxy()()
Block 0x455
0x456: v456 = CALLVALUE 
0x458: v458 = ISZERO v456
0x459: v459(0x461) = CONST 
0x45c: JUMPI v459(0x461) v458
----------------------------------

Begin block 0x45d
prev = {'0x455'}, next = {}
----------------------------------
Block 0x45d
0x45d: v45d(0x0) = CONST 
0x460: REVERT v45d(0x0) v45d(0x0)
----------------------------------

Begin block 0x461
prev = {'0x455'}, next = {'0xa7b'}
----------------------------------
Block 0x461
0x463: v463(0x20c) = CONST 
0x466: v466(0xa7b) = CONST 
0x469: JUMP v466(0xa7b)
----------------------------------

Begin block 0x46a
prev = {'0x1ce'}, next = {'0x20c0x5a'}
----------------------------------
Block 0x46a
0x46b: v46b = ADDRESS 
0x471: JUMP v68(0x20c)
----------------------------------

Begin block 0x472
prev = {'0x24b'}, next = {'0x4b4', '0x4b8'}
----------------------------------
Block 0x472
0x473: v473(0x1) = CONST 
0x475: v475 = SLOAD v473(0x1)
0x476: v476(0x40) = CONST 
0x479: v479 = MLOAD v476(0x40)
0x47a: v47a(0x8da5cb5b) = CONST 
0x47f: v47f(0xe0) = CONST 
0x481: v481(0x8da5cb5b00000000000000000000000000000000000000000000000000000000) = SHL v47f(0xe0) v47a(0x8da5cb5b)
0x483: MSTORE v479 v481(0x8da5cb5b00000000000000000000000000000000000000000000000000000000)
0x485: v485 = MLOAD v476(0x40)
0x486: v486 = CALLER 
0x488: v488(0x1) = CONST 
0x48a: v48a(0x1) = CONST 
0x48c: v48c(0xa0) = CONST 
0x48e: v48e(0x10000000000000000000000000000000000000000) = SHL v48c(0xa0) v48a(0x1)
0x48f: v48f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v48e(0x10000000000000000000000000000000000000000) v488(0x1)
0x490: v490 = AND v48f(0xffffffffffffffffffffffffffffffffffffffff) v475
0x492: v492(0x8da5cb5b) = CONST 
0x498: v498(0x4) = CONST 
0x49c: v49c = ADD v479 v498(0x4)
0x49e: v49e(0x20) = CONST 
0x4a5: v4a5 = SUB v479 v485
0x4a6: v4a6 = ADD v4a5 v498(0x4)
0x4a8: v4a8(0x0) = CONST 
0x4ac: v4ac = EXTCODESIZE v490
0x4ad: v4ad = ISZERO v4ac
0x4af: v4af = ISZERO v4ad
0x4b0: v4b0(0x4b8) = CONST 
0x4b3: JUMPI v4b0(0x4b8) v4af
----------------------------------

Begin block 0x4b4
prev = {'0x472'}, next = {}
----------------------------------
Block 0x4b4
0x4b4: v4b4(0x0) = CONST 
0x4b7: REVERT v4b4(0x0) v4b4(0x0)
----------------------------------

Begin block 0x4b8
prev = {'0x472'}, next = {'0x4c3', '0x4cc'}
----------------------------------
Block 0x4b8
0x4ba: v4ba = GAS 
0x4bb: v4bb = CALL v4ba v490 v4a8(0x0) v485 v4a6 v485 v49e(0x20)
0x4bc: v4bc = ISZERO v4bb
0x4be: v4be = ISZERO v4bc
0x4bf: v4bf(0x4cc) = CONST 
0x4c2: JUMPI v4bf(0x4cc) v4be
----------------------------------

Begin block 0x4c3
prev = {'0x4b8'}, next = {}
----------------------------------
Block 0x4c3
0x4c3: v4c3 = RETURNDATASIZE 
0x4c4: v4c4(0x0) = CONST 
0x4c7: RETURNDATACOPY v4c4(0x0) v4c4(0x0) v4c3
0x4c8: v4c8 = RETURNDATASIZE 
0x4c9: v4c9(0x0) = CONST 
0x4cb: REVERT v4c9(0x0) v4c8
----------------------------------

Begin block 0x4cc
prev = {'0x4b8'}, next = {'0x4de', '0x4e2'}
----------------------------------
Block 0x4cc
0x4d1: v4d1(0x40) = CONST 
0x4d3: v4d3 = MLOAD v4d1(0x40)
0x4d4: v4d4 = RETURNDATASIZE 
0x4d5: v4d5(0x20) = CONST 
0x4d8: v4d8 = LT v4d4 v4d5(0x20)
0x4d9: v4d9 = ISZERO v4d8
0x4da: v4da(0x4e2) = CONST 
0x4dd: JUMPI v4da(0x4e2) v4d9
----------------------------------

Begin block 0x4de
prev = {'0x4cc'}, next = {}
----------------------------------
Block 0x4de
0x4de: v4de(0x0) = CONST 
0x4e1: REVERT v4de(0x0) v4de(0x0)
----------------------------------

Begin block 0x4e2
prev = {'0x4cc'}, next = {'0x534', '0x4f3'}
----------------------------------
Block 0x4e2
0x4e4: v4e4 = MLOAD v4d3
0x4e5: v4e5(0x1) = CONST 
0x4e7: v4e7(0x1) = CONST 
0x4e9: v4e9(0xa0) = CONST 
0x4eb: v4eb(0x10000000000000000000000000000000000000000) = SHL v4e9(0xa0) v4e7(0x1)
0x4ec: v4ec(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4eb(0x10000000000000000000000000000000000000000) v4e5(0x1)
0x4ed: v4ed = AND v4ec(0xffffffffffffffffffffffffffffffffffffffff) v4e4
0x4ee: v4ee = EQ v4ed v486
0x4ef: v4ef(0x534) = CONST 
0x4f2: JUMPI v4ef(0x534) v4ee
----------------------------------

Begin block 0x4f3
prev = {'0x4e2'}, next = {}
----------------------------------
Block 0x4f3
0x4f3: v4f3(0x40) = CONST 
0x4f6: v4f6 = MLOAD v4f3(0x40)
0x4f7: v4f7(0x461bcd) = CONST 
0x4fb: v4fb(0xe5) = CONST 
0x4fd: v4fd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v4fb(0xe5) v4f7(0x461bcd)
0x4ff: MSTORE v4f6 v4fd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x500: v500(0x20) = CONST 
0x502: v502(0x4) = CONST 
0x505: v505 = ADD v4f6 v502(0x4)
0x506: MSTORE v505 v500(0x20)
0x507: v507(0x12) = CONST 
0x509: v509(0x24) = CONST 
0x50c: v50c = ADD v4f6 v509(0x24)
0x50d: MSTORE v50c v507(0x12)
0x50e: v50e(0x24b73b30b634b21036b9b39739b2b73232b9) = CONST 
0x521: v521(0x71) = CONST 
0x523: v523(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000) = SHL v521(0x71) v50e(0x24b73b30b634b21036b9b39739b2b73232b9)
0x524: v524(0x44) = CONST 
0x527: v527 = ADD v4f6 v524(0x44)
0x528: MSTORE v527 v523(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000)
0x52a: v52a = MLOAD v4f3(0x40)
0x52e: v52e = SUB v4f6 v52a
0x52f: v52f(0x64) = CONST 
0x531: v531 = ADD v52f(0x64) v52e
0x533: REVERT v52a v531
----------------------------------

Begin block 0x534
prev = {'0x4e2'}, next = {'0x25b0x228'}
----------------------------------
Block 0x534
0x535: v535(0x0) = CONST 
0x538: v538 = SLOAD v535(0x0)
0x539: v539(0x1) = CONST 
0x53b: v53b = ADD v539(0x1) v538
0x53f: SSTORE v535(0x0) v53b
0x540: v540(0x2) = CONST 
0x543: v543 = SLOAD v540(0x2)
0x544: v544(0x1) = CONST 
0x546: v546(0x1) = CONST 
0x548: v548(0xa0) = CONST 
0x54a: v54a(0x10000000000000000000000000000000000000000) = SHL v548(0xa0) v546(0x1)
0x54b: v54b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v54a(0x10000000000000000000000000000000000000000) v544(0x1)
0x54c: v54c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v54b(0xffffffffffffffffffffffffffffffffffffffff)
0x54d: v54d = AND v54c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v543
0x54e: v54e(0x1) = CONST 
0x550: v550(0x1) = CONST 
0x552: v552(0xa0) = CONST 
0x554: v554(0x10000000000000000000000000000000000000000) = SHL v552(0xa0) v550(0x1)
0x555: v555(0xffffffffffffffffffffffffffffffffffffffff) = SUB v554(0x10000000000000000000000000000000000000000) v54e(0x1)
0x557: v557 = AND v256 v555(0xffffffffffffffffffffffffffffffffffffffff)
0x558: v558 = OR v557 v54d
0x55a: SSTORE v540(0x2) v558
0x55d: JUMP v236(0x25b)
----------------------------------

Begin block 0x55e
prev = {'0x3c4'}, next = {'0x579', '0x578'}
----------------------------------
Block 0x55e
0x55f: v55f(0x0) = CONST 
0x562: v562 = SLOAD v55f(0x0)
0x563: v563(0x1) = CONST 
0x565: v565 = ADD v563(0x1) v562
0x568: SSTORE v55f(0x0) v565
0x56a: v56a = MLOAD v2cd
0x574: v574(0x579) = CONST 
0x577: JUMPI v574(0x579) v56a
----------------------------------

Begin block 0x578
prev = {'0x55e'}, next = {}
----------------------------------
Block 0x578
0x578: THROW 
----------------------------------

Begin block 0x579
prev = {'0x55e'}, next = {'0x74b', '0x590'}
----------------------------------
Block 0x579
0x57a: v57a(0x20) = CONST 
0x57c: v57c = MUL v57a(0x20) v55f(0x0)
0x57d: v57d(0x20) = CONST 
0x57f: v57f = ADD v57d(0x20) v57c
0x580: v580 = ADD v57f v2cd
0x581: v581 = MLOAD v580
0x582: v582(0x1) = CONST 
0x584: v584(0x1) = CONST 
0x586: v586(0xa0) = CONST 
0x588: v588(0x10000000000000000000000000000000000000000) = SHL v586(0xa0) v584(0x1)
0x589: v589(0xffffffffffffffffffffffffffffffffffffffff) = SUB v588(0x10000000000000000000000000000000000000000) v582(0x1)
0x58a: v58a = AND v589(0xffffffffffffffffffffffffffffffffffffffff) v581
0x58b: v58b = EQ v58a v55f(0x0)
0x58c: v58c(0x74b) = CONST 
0x58f: JUMPI v58c(0x74b) v58b
----------------------------------

Begin block 0x590
prev = {'0x579'}, next = {'0x5b7', '0x5b6'}
----------------------------------
Block 0x590
0x590: v590(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7) = CONST 
0x5a5: v5a5(0xac1ecbfc) = CONST 
0x5aa: v5aa = CALLER 
0x5ac: v5ac(0x0) = CONST 
0x5af: v5af = MLOAD v2cd
0x5b1: v5b1 = LT v5ac(0x0) v5af
0x5b2: v5b2(0x5b7) = CONST 
0x5b5: JUMPI v5b2(0x5b7) v5b1
----------------------------------

Begin block 0x5b6
prev = {'0x590'}, next = {}
----------------------------------
Block 0x5b6
0x5b6: THROW 
----------------------------------

Begin block 0x5b7
prev = {'0x590'}, next = {'0x5cb', '0x5cc'}
----------------------------------
Block 0x5b7
0x5b8: v5b8(0x20) = CONST 
0x5ba: v5ba = MUL v5b8(0x20) v5ac(0x0)
0x5bb: v5bb(0x20) = CONST 
0x5bd: v5bd = ADD v5bb(0x20) v5ba
0x5be: v5be = ADD v5bd v2cd
0x5bf: v5bf = MLOAD v5be
0x5c1: v5c1(0x0) = CONST 
0x5c4: v5c4 = MLOAD v34f
0x5c6: v5c6 = LT v5c1(0x0) v5c4
0x5c7: v5c7(0x5cc) = CONST 
0x5ca: JUMPI v5c7(0x5cc) v5c6
----------------------------------

Begin block 0x5cb
prev = {'0x5b7'}, next = {}
----------------------------------
Block 0x5cb
0x5cb: THROW 
----------------------------------

Begin block 0x5cc
prev = {'0x5b7'}, next = {'0x5e1', '0x5e0'}
----------------------------------
Block 0x5cc
0x5cd: v5cd(0x20) = CONST 
0x5cf: v5cf = MUL v5cd(0x20) v5c1(0x0)
0x5d0: v5d0(0x20) = CONST 
0x5d2: v5d2 = ADD v5d0(0x20) v5cf
0x5d3: v5d3 = ADD v5d2 v34f
0x5d4: v5d4 = MLOAD v5d3
0x5d6: v5d6(0x0) = CONST 
0x5d9: v5d9 = MLOAD v34f
0x5db: v5db = LT v5d6(0x0) v5d9
0x5dc: v5dc(0x5e1) = CONST 
0x5df: JUMPI v5dc(0x5e1) v5db
----------------------------------

Begin block 0x5e0
prev = {'0x5cc'}, next = {}
----------------------------------
Block 0x5e0
0x5e0: THROW 
----------------------------------

Begin block 0x5e1
prev = {'0x5cc'}, next = {'0x652', '0x656'}
----------------------------------
Block 0x5e1
0x5e2: v5e2(0x20) = CONST 
0x5e4: v5e4 = MUL v5e2(0x20) v5d6(0x0)
0x5e5: v5e5(0x20) = CONST 
0x5e7: v5e7 = ADD v5e5(0x20) v5e4
0x5e8: v5e8 = ADD v5e7 v34f
0x5e9: v5e9 = MLOAD v5e8
0x5ea: v5ea(0x40) = CONST 
0x5ec: v5ec = MLOAD v5ea(0x40)
0x5ee: v5ee(0xffffffff) = CONST 
0x5f3: v5f3 = AND v5ee(0xffffffff) v5a5(0xac1ecbfc)
0x5f4: v5f4(0xe0) = CONST 
0x5f6: v5f6 = SHL v5f4(0xe0) v5f3
0x5f8: MSTORE v5ec v5f6
0x5f9: v5f9(0x4) = CONST 
0x5fb: v5fb = ADD v5f9(0x4) v5ec
0x5fe: v5fe(0x1) = CONST 
0x600: v600(0x1) = CONST 
0x602: v602(0xa0) = CONST 
0x604: v604(0x10000000000000000000000000000000000000000) = SHL v602(0xa0) v600(0x1)
0x605: v605(0xffffffffffffffffffffffffffffffffffffffff) = SUB v604(0x10000000000000000000000000000000000000000) v5fe(0x1)
0x606: v606 = AND v605(0xffffffffffffffffffffffffffffffffffffffff) v5aa
0x607: v607(0x1) = CONST 
0x609: v609(0x1) = CONST 
0x60b: v60b(0xa0) = CONST 
0x60d: v60d(0x10000000000000000000000000000000000000000) = SHL v60b(0xa0) v609(0x1)
0x60e: v60e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v60d(0x10000000000000000000000000000000000000000) v607(0x1)
0x60f: v60f = AND v60e(0xffffffffffffffffffffffffffffffffffffffff) v606
0x611: MSTORE v5fb v60f
0x612: v612(0x20) = CONST 
0x614: v614 = ADD v612(0x20) v5fb
0x616: v616(0x1) = CONST 
0x618: v618(0x1) = CONST 
0x61a: v61a(0xa0) = CONST 
0x61c: v61c(0x10000000000000000000000000000000000000000) = SHL v61a(0xa0) v618(0x1)
0x61d: v61d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v61c(0x10000000000000000000000000000000000000000) v616(0x1)
0x61e: v61e = AND v61d(0xffffffffffffffffffffffffffffffffffffffff) v5bf
0x61f: v61f(0x1) = CONST 
0x621: v621(0x1) = CONST 
0x623: v623(0xa0) = CONST 
0x625: v625(0x10000000000000000000000000000000000000000) = SHL v623(0xa0) v621(0x1)
0x626: v626(0xffffffffffffffffffffffffffffffffffffffff) = SUB v625(0x10000000000000000000000000000000000000000) v61f(0x1)
0x627: v627 = AND v626(0xffffffffffffffffffffffffffffffffffffffff) v61e
0x629: MSTORE v614 v627
0x62a: v62a(0x20) = CONST 
0x62c: v62c = ADD v62a(0x20) v614
0x62f: MSTORE v62c v5d4
0x630: v630(0x20) = CONST 
0x632: v632 = ADD v630(0x20) v62c
0x635: MSTORE v632 v5e9
0x636: v636(0x20) = CONST 
0x638: v638 = ADD v636(0x20) v632
0x63f: v63f(0x0) = CONST 
0x641: v641(0x40) = CONST 
0x643: v643 = MLOAD v641(0x40)
0x646: v646 = SUB v638 v643
0x64a: v64a = EXTCODESIZE v590(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7)
0x64b: v64b = ISZERO v64a
0x64d: v64d = ISZERO v64b
0x64e: v64e(0x656) = CONST 
0x651: JUMPI v64e(0x656) v64d
----------------------------------

Begin block 0x652
prev = {'0x5e1'}, next = {}
----------------------------------
Block 0x652
0x652: v652(0x0) = CONST 
0x655: REVERT v652(0x0) v652(0x0)
----------------------------------

Begin block 0x656
prev = {'0x5e1'}, next = {'0x661', '0x66a'}
----------------------------------
Block 0x656
0x658: v658 = GAS 
0x659: v659 = DELEGATECALL v658 v590(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7) v643 v646 v643 v63f(0x0)
0x65a: v65a = ISZERO v659
0x65c: v65c = ISZERO v65a
0x65d: v65d(0x66a) = CONST 
0x660: JUMPI v65d(0x66a) v65c
----------------------------------

Begin block 0x661
prev = {'0x656'}, next = {}
----------------------------------
Block 0x661
0x661: v661 = RETURNDATASIZE 
0x662: v662(0x0) = CONST 
0x665: RETURNDATACOPY v662(0x0) v662(0x0) v661
0x666: v666 = RETURNDATASIZE 
0x667: v667(0x0) = CONST 
0x669: REVERT v667(0x0) v666
----------------------------------

Begin block 0x66a
prev = {'0x656'}, next = {'0x694', '0x695'}
----------------------------------
Block 0x66a
0x66f: v66f(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7) = CONST 
0x684: v684(0x52a23bbb) = CONST 
0x68a: v68a(0x0) = CONST 
0x68d: v68d = MLOAD v2cd
0x68f: v68f = LT v68a(0x0) v68d
0x690: v690(0x695) = CONST 
0x693: JUMPI v690(0x695) v68f
----------------------------------

Begin block 0x694
prev = {'0x66a'}, next = {}
----------------------------------
Block 0x694
0x694: THROW 
----------------------------------

Begin block 0x695
prev = {'0x66a'}, next = {'0x6bf', '0x6c0'}
----------------------------------
Block 0x695
0x696: v696(0x20) = CONST 
0x698: v698 = MUL v696(0x20) v68a(0x0)
0x699: v699(0x20) = CONST 
0x69b: v69b = ADD v699(0x20) v698
0x69c: v69c = ADD v69b v2cd
0x69d: v69d = MLOAD v69c
0x69e: v69e(0x2) = CONST 
0x6a0: v6a0(0x0) = CONST 
0x6a3: v6a3 = SLOAD v69e(0x2)
0x6a5: v6a5(0x100) = CONST 
0x6a8: v6a8(0x1) = EXP v6a5(0x100) v6a0(0x0)
0x6aa: v6aa = DIV v6a3 v6a8(0x1)
0x6ab: v6ab(0x1) = CONST 
0x6ad: v6ad(0x1) = CONST 
0x6af: v6af(0xa0) = CONST 
0x6b1: v6b1(0x10000000000000000000000000000000000000000) = SHL v6af(0xa0) v6ad(0x1)
0x6b2: v6b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6b1(0x10000000000000000000000000000000000000000) v6ab(0x1)
0x6b3: v6b3 = AND v6b2(0xffffffffffffffffffffffffffffffffffffffff) v6aa
0x6b5: v6b5(0x0) = CONST 
0x6b8: v6b8 = MLOAD v34f
0x6ba: v6ba = LT v6b5(0x0) v6b8
0x6bb: v6bb(0x6c0) = CONST 
0x6be: JUMPI v6bb(0x6c0) v6ba
----------------------------------

Begin block 0x6bf
prev = {'0x695'}, next = {}
----------------------------------
Block 0x6bf
0x6bf: THROW 
----------------------------------

Begin block 0x6c0
prev = {'0x695'}, next = {'0x72e', '0x72a'}
----------------------------------
Block 0x6c0
0x6c1: v6c1(0x20) = CONST 
0x6c3: v6c3 = MUL v6c1(0x20) v6b5(0x0)
0x6c4: v6c4(0x20) = CONST 
0x6c6: v6c6 = ADD v6c4(0x20) v6c3
0x6c7: v6c7 = ADD v6c6 v34f
0x6c8: v6c8 = MLOAD v6c7
0x6c9: v6c9(0x40) = CONST 
0x6cb: v6cb = MLOAD v6c9(0x40)
0x6cd: v6cd(0xffffffff) = CONST 
0x6d2: v6d2 = AND v6cd(0xffffffff) v684(0x52a23bbb)
0x6d3: v6d3(0xe0) = CONST 
0x6d5: v6d5 = SHL v6d3(0xe0) v6d2
0x6d7: MSTORE v6cb v6d5
0x6d8: v6d8(0x4) = CONST 
0x6da: v6da = ADD v6d8(0x4) v6cb
0x6dd: v6dd(0x1) = CONST 
0x6df: v6df(0x1) = CONST 
0x6e1: v6e1(0xa0) = CONST 
0x6e3: v6e3(0x10000000000000000000000000000000000000000) = SHL v6e1(0xa0) v6df(0x1)
0x6e4: v6e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6e3(0x10000000000000000000000000000000000000000) v6dd(0x1)
0x6e5: v6e5 = AND v6e4(0xffffffffffffffffffffffffffffffffffffffff) v69d
0x6e6: v6e6(0x1) = CONST 
0x6e8: v6e8(0x1) = CONST 
0x6ea: v6ea(0xa0) = CONST 
0x6ec: v6ec(0x10000000000000000000000000000000000000000) = SHL v6ea(0xa0) v6e8(0x1)
0x6ed: v6ed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6ec(0x10000000000000000000000000000000000000000) v6e6(0x1)
0x6ee: v6ee = AND v6ed(0xffffffffffffffffffffffffffffffffffffffff) v6e5
0x6f0: MSTORE v6da v6ee
0x6f1: v6f1(0x20) = CONST 
0x6f3: v6f3 = ADD v6f1(0x20) v6da
0x6f5: v6f5(0x1) = CONST 
0x6f7: v6f7(0x1) = CONST 
0x6f9: v6f9(0xa0) = CONST 
0x6fb: v6fb(0x10000000000000000000000000000000000000000) = SHL v6f9(0xa0) v6f7(0x1)
0x6fc: v6fc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6fb(0x10000000000000000000000000000000000000000) v6f5(0x1)
0x6fd: v6fd = AND v6fc(0xffffffffffffffffffffffffffffffffffffffff) v6b3
0x6fe: v6fe(0x1) = CONST 
0x700: v700(0x1) = CONST 
0x702: v702(0xa0) = CONST 
0x704: v704(0x10000000000000000000000000000000000000000) = SHL v702(0xa0) v700(0x1)
0x705: v705(0xffffffffffffffffffffffffffffffffffffffff) = SUB v704(0x10000000000000000000000000000000000000000) v6fe(0x1)
0x706: v706 = AND v705(0xffffffffffffffffffffffffffffffffffffffff) v6fd
0x708: MSTORE v6f3 v706
0x709: v709(0x20) = CONST 
0x70b: v70b = ADD v709(0x20) v6f3
0x70e: MSTORE v70b v6c8
0x70f: v70f(0x20) = CONST 
0x711: v711 = ADD v70f(0x20) v70b
0x717: v717(0x0) = CONST 
0x719: v719(0x40) = CONST 
0x71b: v71b = MLOAD v719(0x40)
0x71e: v71e = SUB v711 v71b
0x722: v722 = EXTCODESIZE v66f(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7)
0x723: v723 = ISZERO v722
0x725: v725 = ISZERO v723
0x726: v726(0x72e) = CONST 
0x729: JUMPI v726(0x72e) v725
----------------------------------

Begin block 0x72a
prev = {'0x6c0'}, next = {}
----------------------------------
Block 0x72a
0x72a: v72a(0x0) = CONST 
0x72d: REVERT v72a(0x0) v72a(0x0)
----------------------------------

Begin block 0x72e
prev = {'0x6c0'}, next = {'0x739', '0x742'}
----------------------------------
Block 0x72e
0x730: v730 = GAS 
0x731: v731 = DELEGATECALL v730 v66f(0xd6e266d0221a2e7909fb7f9fd45a84d217e909e7) v71b v71e v71b v717(0x0)
0x732: v732 = ISZERO v731
0x734: v734 = ISZERO v732
0x735: v735(0x742) = CONST 
0x738: JUMPI v735(0x742) v734
----------------------------------

Begin block 0x739
prev = {'0x72e'}, next = {}
----------------------------------
Block 0x739
0x739: v739 = RETURNDATASIZE 
0x73a: v73a(0x0) = CONST 
0x73d: RETURNDATACOPY v73a(0x0) v73a(0x0) v739
0x73e: v73e = RETURNDATASIZE 
0x73f: v73f(0x0) = CONST 
0x741: REVERT v73f(0x0) v73e
----------------------------------

Begin block 0x742
prev = {'0x72e'}, next = {'0x763'}
----------------------------------
Block 0x742
0x747: v747(0x763) = CONST 
0x74a: JUMP v747(0x763)
----------------------------------

Begin block 0x74b
prev = {'0x579'}, next = {'0x758', '0x757'}
----------------------------------
Block 0x74b
0x74d: v74d(0x0) = CONST 
0x750: v750 = MLOAD v34f
0x752: v752 = LT v74d(0x0) v750
0x753: v753(0x758) = CONST 
0x756: JUMPI v753(0x758) v752
----------------------------------

Begin block 0x757
prev = {'0x74b'}, next = {}
----------------------------------
Block 0x757
0x757: THROW 
----------------------------------

Begin block 0x758
prev = {'0x74b'}, next = {'0x763'}
----------------------------------
Block 0x758
0x759: v759(0x20) = CONST 
0x75b: v75b = MUL v759(0x20) v74d(0x0)
0x75c: v75c(0x20) = CONST 
0x75e: v75e = ADD v75c(0x20) v75b
0x75f: v75f = ADD v75e v34f
0x760: v760 = MLOAD v75f
----------------------------------

Begin block 0x763
prev = {'0x742', '0x758'}, next = {'0x77b', '0x77c'}
----------------------------------
Block 0x763
0x764: v764(0x0) = CONST 
0x767: v767(0x1) = CONST 
0x769: v769(0x1) = CONST 
0x76b: v76b(0xa0) = CONST 
0x76d: v76d(0x10000000000000000000000000000000000000000) = SHL v76b(0xa0) v769(0x1)
0x76e: v76e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v76d(0x10000000000000000000000000000000000000000) v767(0x1)
0x76f: v76f(0x0) = AND v76e(0xffffffffffffffffffffffffffffffffffffffff) v764(0x0)
0x771: v771(0x0) = CONST 
0x774: v774 = MLOAD v2cd
0x776: v776 = LT v771(0x0) v774
0x777: v777(0x77c) = CONST 
0x77a: JUMPI v777(0x77c) v776
----------------------------------

Begin block 0x77b
prev = {'0x763'}, next = {}
----------------------------------
Block 0x77b
0x77b: THROW 
----------------------------------

Begin block 0x77c
prev = {'0x763'}, next = {'0x793', '0x7ac'}
----------------------------------
Block 0x77c
0x77d: v77d(0x20) = CONST 
0x77f: v77f = MUL v77d(0x20) v771(0x0)
0x780: v780(0x20) = CONST 
0x782: v782 = ADD v780(0x20) v77f
0x783: v783 = ADD v782 v2cd
0x784: v784 = MLOAD v783
0x785: v785(0x1) = CONST 
0x787: v787(0x1) = CONST 
0x789: v789(0xa0) = CONST 
0x78b: v78b(0x10000000000000000000000000000000000000000) = SHL v789(0xa0) v787(0x1)
0x78c: v78c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v78b(0x10000000000000000000000000000000000000000) v785(0x1)
0x78d: v78d = AND v78c(0xffffffffffffffffffffffffffffffffffffffff) v784
0x78e: v78e = EQ v78d v76f(0x0)
0x78f: v78f(0x7ac) = CONST 
0x792: JUMPI v78f(0x7ac) v78e
----------------------------------

Begin block 0x793
prev = {'0x77c'}, next = {'0x79f', '0x79e'}
----------------------------------
Block 0x793
0x794: v794(0x0) = CONST 
0x797: v797 = MLOAD v2cd
0x799: v799 = LT v794(0x0) v797
0x79a: v79a(0x79f) = CONST 
0x79d: JUMPI v79a(0x79f) v799
----------------------------------

Begin block 0x79e
prev = {'0x793'}, next = {}
----------------------------------
Block 0x79e
0x79e: THROW 
----------------------------------

Begin block 0x79f
prev = {'0x793'}, next = {'0x7c2'}
----------------------------------
Block 0x79f
0x7a0: v7a0(0x20) = CONST 
0x7a2: v7a2 = MUL v7a0(0x20) v794(0x0)
0x7a3: v7a3(0x20) = CONST 
0x7a5: v7a5 = ADD v7a3(0x20) v7a2
0x7a6: v7a6 = ADD v7a5 v2cd
0x7a7: v7a7 = MLOAD v7a6
0x7a8: v7a8(0x7c2) = CONST 
0x7ab: JUMP v7a8(0x7c2)
----------------------------------

Begin block 0x7ac
prev = {'0x77c'}, next = {'0x7c2'}
----------------------------------
Block 0x7ac
0x7ad: v7ad(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) = CONST 
----------------------------------

Begin block 0x7c2
prev = {'0x79f', '0x7ac'}, next = {'0x7dd', '0x7dc'}
----------------------------------
Block 0x7c2
0x7c5: v7c5(0x0) = CONST 
0x7c8: v7c8(0x1) = CONST 
0x7ca: v7ca(0x1) = CONST 
0x7cc: v7cc(0xa0) = CONST 
0x7ce: v7ce(0x10000000000000000000000000000000000000000) = SHL v7cc(0xa0) v7ca(0x1)
0x7cf: v7cf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ce(0x10000000000000000000000000000000000000000) v7c8(0x1)
0x7d0: v7d0(0x0) = AND v7cf(0xffffffffffffffffffffffffffffffffffffffff) v7c5(0x0)
0x7d2: v7d2(0x1) = CONST 
0x7d5: v7d5 = MLOAD v2cd
0x7d7: v7d7 = LT v7d2(0x1) v7d5
0x7d8: v7d8(0x7dd) = CONST 
0x7db: JUMPI v7d8(0x7dd) v7d7
----------------------------------

Begin block 0x7dc
prev = {'0x7c2'}, next = {}
----------------------------------
Block 0x7dc
0x7dc: THROW 
----------------------------------

Begin block 0x7dd
prev = {'0x7c2'}, next = {'0x7f4', '0x80d'}
----------------------------------
Block 0x7dd
0x7de: v7de(0x20) = CONST 
0x7e0: v7e0 = MUL v7de(0x20) v7d2(0x1)
0x7e1: v7e1(0x20) = CONST 
0x7e3: v7e3 = ADD v7e1(0x20) v7e0
0x7e4: v7e4 = ADD v7e3 v2cd
0x7e5: v7e5 = MLOAD v7e4
0x7e6: v7e6(0x1) = CONST 
0x7e8: v7e8(0x1) = CONST 
0x7ea: v7ea(0xa0) = CONST 
0x7ec: v7ec(0x10000000000000000000000000000000000000000) = SHL v7ea(0xa0) v7e8(0x1)
0x7ed: v7ed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ec(0x10000000000000000000000000000000000000000) v7e6(0x1)
0x7ee: v7ee = AND v7ed(0xffffffffffffffffffffffffffffffffffffffff) v7e5
0x7ef: v7ef = EQ v7ee v7d0(0x0)
0x7f0: v7f0(0x80d) = CONST 
0x7f3: JUMPI v7f0(0x80d) v7ef
----------------------------------

Begin block 0x7f4
prev = {'0x7dd'}, next = {'0x800', '0x7ff'}
----------------------------------
Block 0x7f4
0x7f5: v7f5(0x1) = CONST 
0x7f8: v7f8 = MLOAD v2cd
0x7fa: v7fa = LT v7f5(0x1) v7f8
0x7fb: v7fb(0x800) = CONST 
0x7fe: JUMPI v7fb(0x800) v7fa
----------------------------------

Begin block 0x7ff
prev = {'0x7f4'}, next = {}
----------------------------------
Block 0x7ff
0x7ff: THROW 
----------------------------------

Begin block 0x800
prev = {'0x7f4'}, next = {'0x823'}
----------------------------------
Block 0x800
0x801: v801(0x20) = CONST 
0x803: v803 = MUL v801(0x20) v7f5(0x1)
0x804: v804(0x20) = CONST 
0x806: v806 = ADD v804(0x20) v803
0x807: v807 = ADD v806 v2cd
0x808: v808 = MLOAD v807
0x809: v809(0x823) = CONST 
0x80c: JUMP v809(0x823)
----------------------------------

Begin block 0x80d
prev = {'0x7dd'}, next = {'0x823'}
----------------------------------
Block 0x80d
0x80e: v80e(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) = CONST 
----------------------------------

Begin block 0x823
prev = {'0x80d', '0x800'}, next = {'0x83d', '0x83e'}
----------------------------------
Block 0x823
0x826: v826(0x0) = CONST 
0x828: v828(0x18) = CONST 
0x82a: v82a(0x20) = CONST 
0x82c: v82c(0x0) = CONST 
0x82e: v82e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v82c(0x0)
0x830: v830(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000) = SHL v82a(0x20) v82e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x831: v831(0xffffffff) = NOT v830(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000)
0x833: v833(0x2) = CONST 
0x836: v836 = MLOAD v34f
0x838: v838 = LT v833(0x2) v836
0x839: v839(0x83e) = CONST 
0x83c: JUMPI v839(0x83e) v838
----------------------------------

Begin block 0x83d
prev = {'0x823'}, next = {}
----------------------------------
Block 0x83d
0x83d: THROW 
----------------------------------

Begin block 0x83e
prev = {'0x823'}, next = {'0x87d', '0x87e'}
----------------------------------
Block 0x83e
0x83f: v83f(0x20) = CONST 
0x841: v841 = MUL v83f(0x20) v833(0x2)
0x842: v842(0x20) = CONST 
0x844: v844 = ADD v842(0x20) v841
0x845: v845 = ADD v844 v34f
0x846: v846 = MLOAD v845
0x847: v847 = AND v846 v831(0xffffffff)
0x849: v849 = SHR v828(0x18) v847
0x84c: v84c(0x2) = CONST 
0x84e: v84e(0x0) = CONST 
0x851: v851 = SLOAD v84c(0x2)
0x853: v853(0x100) = CONST 
0x856: v856(0x1) = EXP v853(0x100) v84e(0x0)
0x858: v858 = DIV v851 v856(0x1)
0x859: v859(0x1) = CONST 
0x85b: v85b(0x1) = CONST 
0x85d: v85d(0xa0) = CONST 
0x85f: v85f(0x10000000000000000000000000000000000000000) = SHL v85d(0xa0) v85b(0x1)
0x860: v860(0xffffffffffffffffffffffffffffffffffffffff) = SUB v85f(0x10000000000000000000000000000000000000000) v859(0x1)
0x861: v861 = AND v860(0xffffffffffffffffffffffffffffffffffffffff) v858
0x862: v862(0x1) = CONST 
0x864: v864(0x1) = CONST 
0x866: v866(0xa0) = CONST 
0x868: v868(0x10000000000000000000000000000000000000000) = SHL v866(0xa0) v864(0x1)
0x869: v869(0xffffffffffffffffffffffffffffffffffffffff) = SUB v868(0x10000000000000000000000000000000000000000) v862(0x1)
0x86a: v86a = AND v869(0xffffffffffffffffffffffffffffffffffffffff) v861
0x86b: v86b(0xcb3c28c7) = CONST 
0x873: v873(0x0) = CONST 
0x876: v876 = MLOAD v34f
0x878: v878 = LT v873(0x0) v876
0x879: v879(0x87e) = CONST 
0x87c: JUMPI v879(0x87e) v878
----------------------------------

Begin block 0x87d
prev = {'0x83e'}, next = {}
----------------------------------
Block 0x87d
0x87d: THROW 
----------------------------------

Begin block 0x87e
prev = {'0x83e'}, next = {'0x898', '0x899'}
----------------------------------
Block 0x87e
0x87f: v87f(0x20) = CONST 
0x881: v881 = MUL v87f(0x20) v873(0x0)
0x882: v882(0x20) = CONST 
0x884: v884 = ADD v882(0x20) v881
0x885: v885 = ADD v884 v34f
0x886: v886 = MLOAD v885
0x889: v889(0x0) = CONST 
0x88b: v88b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v889(0x0)
0x88c: v88c(0x0) = CONST 
0x891: v891 = MLOAD v3d1
0x893: v893 = LT v849 v891
0x894: v894(0x899) = CONST 
0x897: JUMPI v894(0x899) v893
----------------------------------

Begin block 0x898
prev = {'0x87e'}, next = {}
----------------------------------
Block 0x898
0x898: THROW 
----------------------------------

Begin block 0x899
prev = {'0x87e'}, next = {'0x90f', '0x913'}
----------------------------------
Block 0x899
0x899_0x5: v899_5 = PHI v808 v80e(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
0x899_0x7: v899_7 = PHI v7a7 v7ad(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
0x89a: v89a(0x20) = CONST 
0x89e: v89e = MUL v89a(0x20) v849
0x8a2: v8a2 = ADD v89e v3d1
0x8a4: v8a4 = ADD v89a(0x20) v8a2
0x8a5: v8a5 = MLOAD v8a4
0x8a6: v8a6(0x40) = CONST 
0x8a9: v8a9 = MLOAD v8a6(0x40)
0x8aa: v8aa(0x1) = CONST 
0x8ac: v8ac(0x1) = CONST 
0x8ae: v8ae(0xe0) = CONST 
0x8b0: v8b0(0x100000000000000000000000000000000000000000000000000000000) = SHL v8ae(0xe0) v8ac(0x1)
0x8b1: v8b1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v8b0(0x100000000000000000000000000000000000000000000000000000000) v8aa(0x1)
0x8b2: v8b2(0xffffffff00000000000000000000000000000000000000000000000000000000) = NOT v8b1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x8b3: v8b3(0xe0) = CONST 
0x8b7: v8b7 = SHL v8b3(0xe0) v86b(0xcb3c28c7)
0x8b8: v8b8 = AND v8b7 v8b2(0xffffffff00000000000000000000000000000000000000000000000000000000)
0x8ba: MSTORE v8a9 v8b8
0x8bb: v8bb(0x1) = CONST 
0x8bd: v8bd(0x1) = CONST 
0x8bf: v8bf(0xa0) = CONST 
0x8c1: v8c1(0x10000000000000000000000000000000000000000) = SHL v8bf(0xa0) v8bd(0x1)
0x8c2: v8c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8c1(0x10000000000000000000000000000000000000000) v8bb(0x1)
0x8c5: v8c5 = AND v8c2(0xffffffffffffffffffffffffffffffffffffffff) v899_7
0x8c6: v8c6(0x4) = CONST 
0x8c9: v8c9 = ADD v8a9 v8c6(0x4)
0x8ca: MSTORE v8c9 v8c5
0x8cb: v8cb(0x24) = CONST 
0x8ce: v8ce = ADD v8a9 v8cb(0x24)
0x8d2: MSTORE v8ce v886
0x8d5: v8d5 = AND v8c2(0xffffffffffffffffffffffffffffffffffffffff) v899_5
0x8d6: v8d6(0x44) = CONST 
0x8d9: v8d9 = ADD v8a9 v8d6(0x44)
0x8da: MSTORE v8d9 v8d5
0x8dd: v8dd = AND v8c2(0xffffffffffffffffffffffffffffffffffffffff) v404
0x8de: v8de(0x64) = CONST 
0x8e1: v8e1 = ADD v8a9 v8de(0x64)
0x8e2: MSTORE v8e1 v8dd
0x8e3: v8e3(0x84) = CONST 
0x8e6: v8e6 = ADD v8a9 v8e3(0x84)
0x8ea: MSTORE v8e6 v88b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x8eb: v8eb(0xa4) = CONST 
0x8ee: v8ee = ADD v8a9 v8eb(0xa4)
0x8ef: MSTORE v8ee v88c(0x0)
0x8f1: v8f1 = AND v8c2(0xffffffffffffffffffffffffffffffffffffffff) v8a5
0x8f2: v8f2(0xc4) = CONST 
0x8f5: v8f5 = ADD v8a9 v8f2(0xc4)
0x8f6: MSTORE v8f5 v8f1
0x8f7: v8f7 = MLOAD v8a6(0x40)
0x8f8: v8f8(0xe4) = CONST 
0x8fc: v8fc = ADD v8a9 v8f8(0xe4)
0x901: v901 = SUB v8a9 v8f7
0x902: v902 = ADD v901 v8f8(0xe4)
0x907: v907 = EXTCODESIZE v86a
0x908: v908 = ISZERO v907
0x90a: v90a = ISZERO v908
0x90b: v90b(0x913) = CONST 
0x90e: JUMPI v90b(0x913) v90a
----------------------------------

Begin block 0x90f
prev = {'0x899'}, next = {}
----------------------------------
Block 0x90f
0x90f: v90f(0x0) = CONST 
0x912: REVERT v90f(0x0) v90f(0x0)
----------------------------------

Begin block 0x913
prev = {'0x899'}, next = {'0x91e', '0x927'}
----------------------------------
Block 0x913
0x913_0x2: v913_2 = PHI v55f(0x0) v760
0x915: v915 = GAS 
0x916: v916 = CALL v915 v86a v913_2 v8f7 v902 v8f7 v89a(0x20)
0x917: v917 = ISZERO v916
0x919: v919 = ISZERO v917
0x91a: v91a(0x927) = CONST 
0x91d: JUMPI v91a(0x927) v919
----------------------------------

Begin block 0x91e
prev = {'0x913'}, next = {}
----------------------------------
Block 0x91e
0x91e: v91e = RETURNDATASIZE 
0x91f: v91f(0x0) = CONST 
0x922: RETURNDATACOPY v91f(0x0) v91f(0x0) v91e
0x923: v923 = RETURNDATASIZE 
0x924: v924(0x0) = CONST 
0x926: REVERT v924(0x0) v923
----------------------------------

Begin block 0x927
prev = {'0x913'}, next = {'0x93a', '0x93e'}
----------------------------------
Block 0x927
0x92d: v92d(0x40) = CONST 
0x92f: v92f = MLOAD v92d(0x40)
0x930: v930 = RETURNDATASIZE 
0x931: v931(0x20) = CONST 
0x934: v934 = LT v930 v931(0x20)
0x935: v935 = ISZERO v934
0x936: v936(0x93e) = CONST 
0x939: JUMPI v936(0x93e) v935
----------------------------------

Begin block 0x93a
prev = {'0x927'}, next = {}
----------------------------------
Block 0x93a
0x93a: v93a(0x0) = CONST 
0x93d: REVERT v93a(0x0) v93a(0x0)
----------------------------------

Begin block 0x93e
prev = {'0x927'}, next = {'0x99c', '0x950'}
----------------------------------
Block 0x93e
0x941: v941(0x0) = CONST 
0x943: v943 = SLOAD v941(0x0)
0x945: v945 = EQ v565 v943
0x948: v948(0x99c) = CONST 
0x94f: JUMPI v948(0x99c) v945
----------------------------------

Begin block 0x950
prev = {'0x93e'}, next = {}
----------------------------------
Block 0x950
0x950: v950(0x40) = CONST 
0x953: v953 = MLOAD v950(0x40)
0x954: v954(0x461bcd) = CONST 
0x958: v958(0xe5) = CONST 
0x95a: v95a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v958(0xe5) v954(0x461bcd)
0x95c: MSTORE v953 v95a(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x95d: v95d(0x20) = CONST 
0x95f: v95f(0x4) = CONST 
0x962: v962 = ADD v953 v95f(0x4)
0x963: MSTORE v962 v95d(0x20)
0x964: v964(0x1f) = CONST 
0x966: v966(0x24) = CONST 
0x969: v969 = ADD v953 v966(0x24)
0x96a: MSTORE v969 v964(0x1f)
0x96b: v96b(0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00) = CONST 
0x98c: v98c(0x44) = CONST 
0x98f: v98f = ADD v953 v98c(0x44)
0x990: MSTORE v98f v96b(0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00)
0x992: v992 = MLOAD v950(0x40)
0x996: v996 = SUB v953 v992
0x997: v997(0x64) = CONST 
0x999: v999 = ADD v997(0x64) v996
0x99b: REVERT v992 v999
----------------------------------

Begin block 0x99c
prev = {'0x93e'}, next = {'0x25b0x25d'}
----------------------------------
Block 0x99c
0x9a2: JUMP v25e(0x25b)
----------------------------------

Begin block 0x9a3
prev = {'0x430'}, next = {'0x9f7', '0x9b2'}
----------------------------------
Block 0x9a3
0x9a4: v9a4(0x1) = CONST 
0x9a6: v9a6(0x1) = CONST 
0x9a8: v9a8(0xa0) = CONST 
0x9aa: v9aa(0x10000000000000000000000000000000000000000) = SHL v9a8(0xa0) v9a6(0x1)
0x9ab: v9ab(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9aa(0x10000000000000000000000000000000000000000) v9a4(0x1)
0x9ad: v9ad = AND v43b v9ab(0xffffffffffffffffffffffffffffffffffffffff)
0x9ae: v9ae(0x9f7) = CONST 
0x9b1: JUMPI v9ae(0x9f7) v9ad
----------------------------------

Begin block 0x9b2
prev = {'0x9a3'}, next = {}
----------------------------------
Block 0x9b2
0x9b2: v9b2(0x40) = CONST 
0x9b5: v9b5 = MLOAD v9b2(0x40)
0x9b6: v9b6(0x461bcd) = CONST 
0x9ba: v9ba(0xe5) = CONST 
0x9bc: v9bc(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9ba(0xe5) v9b6(0x461bcd)
0x9be: MSTORE v9b5 v9bc(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x9bf: v9bf(0x20) = CONST 
0x9c1: v9c1(0x4) = CONST 
0x9c4: v9c4 = ADD v9b5 v9c1(0x4)
0x9c5: MSTORE v9c4 v9bf(0x20)
0x9c6: v9c6(0x16) = CONST 
0x9c8: v9c8(0x24) = CONST 
0x9cb: v9cb = ADD v9b5 v9c8(0x24)
0x9cc: MSTORE v9cb v9c6(0x16)
0x9cd: v9cd(0x496e76616c6964205f62726f6b657241646472657373) = CONST 
0x9e4: v9e4(0x50) = CONST 
0x9e6: v9e6(0x496e76616c6964205f62726f6b65724164647265737300000000000000000000) = SHL v9e4(0x50) v9cd(0x496e76616c6964205f62726f6b657241646472657373)
0x9e7: v9e7(0x44) = CONST 
0x9ea: v9ea = ADD v9b5 v9e7(0x44)
0x9eb: MSTORE v9ea v9e6(0x496e76616c6964205f62726f6b65724164647265737300000000000000000000)
0x9ed: v9ed = MLOAD v9b2(0x40)
0x9f1: v9f1 = SUB v9b5 v9ed
0x9f2: v9f2(0x64) = CONST 
0x9f4: v9f4 = ADD v9f2(0x64) v9f1
0x9f6: REVERT v9ed v9f4
----------------------------------

Begin block 0x9f7
prev = {'0x9a3'}, next = {'0xa4a', '0xa09'}
----------------------------------
Block 0x9f7
0x9f8: v9f8(0x1) = CONST 
0x9fa: v9fa = SLOAD v9f8(0x1)
0x9fb: v9fb(0x1) = CONST 
0x9fd: v9fd(0x1) = CONST 
0x9ff: v9ff(0xa0) = CONST 
0xa01: va01(0x10000000000000000000000000000000000000000) = SHL v9ff(0xa0) v9fd(0x1)
0xa02: va02(0xffffffffffffffffffffffffffffffffffffffff) = SUB va01(0x10000000000000000000000000000000000000000) v9fb(0x1)
0xa03: va03 = AND va02(0xffffffffffffffffffffffffffffffffffffffff) v9fa
0xa04: va04 = ISZERO va03
0xa05: va05(0xa4a) = CONST 
0xa08: JUMPI va05(0xa4a) va04
----------------------------------

Begin block 0xa09
prev = {'0x9f7'}, next = {}
----------------------------------
Block 0xa09
0xa09: va09(0x40) = CONST 
0xa0c: va0c = MLOAD va09(0x40)
0xa0d: va0d(0x461bcd) = CONST 
0xa11: va11(0xe5) = CONST 
0xa13: va13(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va11(0xe5) va0d(0x461bcd)
0xa15: MSTORE va0c va13(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xa16: va16(0x20) = CONST 
0xa18: va18(0x4) = CONST 
0xa1b: va1b = ADD va0c va18(0x4)
0xa1c: MSTORE va1b va16(0x20)
0xa1d: va1d(0x12) = CONST 
0xa1f: va1f(0x24) = CONST 
0xa22: va22 = ADD va0c va1f(0x24)
0xa23: MSTORE va22 va1d(0x12)
0xa24: va24(0x109c9bdad95c88185b1c9958591e481cd95d) = CONST 
0xa37: va37(0x72) = CONST 
0xa39: va39(0x42726f6b657220616c7265616479207365740000000000000000000000000000) = SHL va37(0x72) va24(0x109c9bdad95c88185b1c9958591e481cd95d)
0xa3a: va3a(0x44) = CONST 
0xa3d: va3d = ADD va0c va3a(0x44)
0xa3e: MSTORE va3d va39(0x42726f6b657220616c7265616479207365740000000000000000000000000000)
0xa40: va40 = MLOAD va09(0x40)
0xa44: va44 = SUB va0c va40
0xa45: va45(0x64) = CONST 
0xa47: va47 = ADD va45(0x64) va44
0xa49: REVERT va40 va47
----------------------------------

Begin block 0xa4a
prev = {'0x9f7'}, next = {'0x25b0x40d'}
----------------------------------
Block 0xa4a
0xa4b: va4b(0x1) = CONST 
0xa4e: va4e = SLOAD va4b(0x1)
0xa4f: va4f(0x1) = CONST 
0xa51: va51(0x1) = CONST 
0xa53: va53(0xa0) = CONST 
0xa55: va55(0x10000000000000000000000000000000000000000) = SHL va53(0xa0) va51(0x1)
0xa56: va56(0xffffffffffffffffffffffffffffffffffffffff) = SUB va55(0x10000000000000000000000000000000000000000) va4f(0x1)
0xa57: va57(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT va56(0xffffffffffffffffffffffffffffffffffffffff)
0xa58: va58 = AND va57(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) va4e
0xa59: va59(0x1) = CONST 
0xa5b: va5b(0x1) = CONST 
0xa5d: va5d(0xa0) = CONST 
0xa5f: va5f(0x10000000000000000000000000000000000000000) = SHL va5d(0xa0) va5b(0x1)
0xa60: va60(0xffffffffffffffffffffffffffffffffffffffff) = SUB va5f(0x10000000000000000000000000000000000000000) va59(0x1)
0xa64: va64 = AND va60(0xffffffffffffffffffffffffffffffffffffffff) v43b
0xa68: va68 = OR va64 va58
0xa6a: SSTORE va4b(0x1) va68
0xa6b: JUMP v41b(0x25b)
----------------------------------

Begin block 0xa6c
prev = {'0x44c'}, next = {'0x20c0x440'}
----------------------------------
Block 0xa6c
0xa6d: va6d(0x1) = CONST 
0xa6f: va6f = SLOAD va6d(0x1)
0xa70: va70(0x1) = CONST 
0xa72: va72(0x1) = CONST 
0xa74: va74(0xa0) = CONST 
0xa76: va76(0x10000000000000000000000000000000000000000) = SHL va74(0xa0) va72(0x1)
0xa77: va77(0xffffffffffffffffffffffffffffffffffffffff) = SUB va76(0x10000000000000000000000000000000000000000) va70(0x1)
0xa78: va78 = AND va77(0xffffffffffffffffffffffffffffffffffffffff) va6f
0xa7a: JUMP v44e(0x20c)
----------------------------------

Begin block 0xa7b
prev = {'0x461'}, next = {'0x20c0x455'}
----------------------------------
Block 0xa7b
0xa7c: va7c(0x2) = CONST 
0xa7e: va7e = SLOAD va7c(0x2)
0xa7f: va7f(0x1) = CONST 
0xa81: va81(0x1) = CONST 
0xa83: va83(0xa0) = CONST 
0xa85: va85(0x10000000000000000000000000000000000000000) = SHL va83(0xa0) va81(0x1)
0xa86: va86(0xffffffffffffffffffffffffffffffffffffffff) = SUB va85(0x10000000000000000000000000000000000000000) va7f(0x1)
0xa87: va87 = AND va86(0xffffffffffffffffffffffffffffffffffffffff) va7e
0xa89: JUMP v463(0x20c)
----------------------------------

Begin block 0xacd
prev = {'0x4a', '0x0'}, next = {}
----------------------------------
Block 0xacd
0xace: vace(0x55) = CONST 
0xacf: CALLPRIVATE vace(0x55)
----------------------------------

Begin block 0xad0
prev = {'0xd'}, next = {}
----------------------------------
Block 0xad0
0xad1: vad1(0x5a) = CONST 
0xad2: CALLPRIVATE vad1(0x5a)
----------------------------------

Begin block 0xad3
prev = {'0x1e'}, next = {}
----------------------------------
Block 0xad3
0xad4: vad4(0x228) = CONST 
0xad5: CALLPRIVATE vad4(0x228)
----------------------------------

Begin block 0xad6
prev = {'0x29'}, next = {}
----------------------------------
Block 0xad6
0xad7: vad7(0x25d) = CONST 
0xad8: CALLPRIVATE vad7(0x25d)
----------------------------------

Begin block 0xad9
prev = {'0x34'}, next = {}
----------------------------------
Block 0xad9
0xada: vada(0x40d) = CONST 
0xadb: CALLPRIVATE vada(0x40d)
----------------------------------

Begin block 0xadc
prev = {'0x3f'}, next = {}
----------------------------------
Block 0xadc
0xadd: vadd(0x440) = CONST 
0xade: CALLPRIVATE vadd(0x440)
----------------------------------

Begin block 0xadf
prev = {'0x4a'}, next = {}
----------------------------------
Block 0xadf
0xae0: vae0(0x455) = CONST 
0xae1: CALLPRIVATE vae0(0x455)
----------------------------------
