
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x12ae', '0x1a'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0x1292: v1292(0x12ae) = CONST 
0x1293: JUMPI v1292(0x12ae) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x8c', '0x2b'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x70a08231) = CONST 
0x26: v26 = GT v21(0x70a08231) v1f
0x27: v27(0x8c) = CONST 
0x2a: JUMPI v27(0x8c) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0x66', '0x36'}
----------------------------------
Block 0x2b
0x2c: v2c(0xa035b1fe) = CONST 
0x31: v31 = GT v2c(0xa035b1fe) v1f
0x32: v32(0x66) = CONST 
0x35: JUMPI v32(0x66) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x12cc', '0x41'}
----------------------------------
Block 0x36
0x37: v37(0xa035b1fe) = CONST 
0x3c: v3c = EQ v37(0xa035b1fe) v1f
0x1294: v1294(0x12cc) = CONST 
0x1295: JUMPI v1294(0x12cc) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0x4c', '0x12cf'}
----------------------------------
Block 0x41
0x42: v42(0xa457c2d7) = CONST 
0x47: v47 = EQ v42(0xa457c2d7) v1f
0x1296: v1296(0x12cf) = CONST 
0x1297: JUMPI v1296(0x12cf) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x12d2', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0xa9059cbb) = CONST 
0x52: v52 = EQ v4d(0xa9059cbb) v1f
0x1298: v1298(0x12d2) = CONST 
0x1299: JUMPI v1298(0x12d2) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x12d5', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0xdd62ed3e) = CONST 
0x5d: v5d = EQ v58(0xdd62ed3e) v1f
0x129a: v129a(0x12d5) = CONST 
0x129b: JUMPI v129a(0x12d5) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0xcf0x0'}
----------------------------------
Block 0x62
0x62: v62(0xcf) = CONST 
0x65: JUMP v62(0xcf)
----------------------------------

Begin block 0x66
prev = {'0x2b'}, next = {'0x72', '0x12c3'}
----------------------------------
Block 0x66
0x68: v68(0x70a08231) = CONST 
0x6d: v6d = EQ v68(0x70a08231) v1f
0x129c: v129c(0x12c3) = CONST 
0x129d: JUMPI v129c(0x12c3) v6d
----------------------------------

Begin block 0x72
prev = {'0x66'}, next = {'0x7d', '0x12c6'}
----------------------------------
Block 0x72
0x73: v73(0x91b7f5ed) = CONST 
0x78: v78 = EQ v73(0x91b7f5ed) v1f
0x129e: v129e(0x12c6) = CONST 
0x129f: JUMPI v129e(0x12c6) v78
----------------------------------

Begin block 0x7d
prev = {'0x72'}, next = {'0x12c9', '0x88'}
----------------------------------
Block 0x7d
0x7e: v7e(0x95d89b41) = CONST 
0x83: v83 = EQ v7e(0x95d89b41) v1f
0x12a0: v12a0(0x12c9) = CONST 
0x12a1: JUMPI v12a0(0x12c9) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0xcf0x0'}
----------------------------------
Block 0x88
0x88: v88(0xcf) = CONST 
0x8b: JUMP v88(0xcf)
----------------------------------

Begin block 0x8c
prev = {'0x1a'}, next = {'0x98', '0x12b1'}
----------------------------------
Block 0x8c
0x8e: v8e(0x6fdde03) = CONST 
0x93: v93 = EQ v8e(0x6fdde03) v1f
0x12a2: v12a2(0x12b1) = CONST 
0x12a3: JUMPI v12a2(0x12b1) v93
----------------------------------

Begin block 0x98
prev = {'0x8c'}, next = {'0x12b4', '0xa3'}
----------------------------------
Block 0x98
0x99: v99(0x95ea7b3) = CONST 
0x9e: v9e = EQ v99(0x95ea7b3) v1f
0x12a4: v12a4(0x12b4) = CONST 
0x12a5: JUMPI v12a4(0x12b4) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0x12b7', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0x18160ddd) = CONST 
0xa9: va9 = EQ va4(0x18160ddd) v1f
0x12a6: v12a6(0x12b7) = CONST 
0x12a7: JUMPI v12a6(0x12b7) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0x12ba'}
----------------------------------
Block 0xae
0xaf: vaf(0x23b872dd) = CONST 
0xb4: vb4 = EQ vaf(0x23b872dd) v1f
0x12a8: v12a8(0x12ba) = CONST 
0x12a9: JUMPI v12a8(0x12ba) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0x12bd'}
----------------------------------
Block 0xb9
0xba: vba(0x313ce567) = CONST 
0xbf: vbf = EQ vba(0x313ce567) v1f
0x12aa: v12aa(0x12bd) = CONST 
0x12ab: JUMPI v12aa(0x12bd) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0x12c0', '0x12ae'}
----------------------------------
Block 0xc4
0xc5: vc5(0x39509351) = CONST 
0xca: vca = EQ vc5(0x39509351) v1f
0x12ac: v12ac(0x12c0) = CONST 
0x12ad: JUMPI v12ac(0x12c0) vca
----------------------------------

Begin block 0xcf
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xcf
0xd0: vd0(0x0) = CONST 
0xd3: REVERT vd0(0x0) vd0(0x0)
----------------------------------

Begin block 0xcf0x0
prev = {'0x12ae', '0x88', '0x62'}, next = {}
----------------------------------
Block 0xcf0x0
0xd00x0: v0d0(0x0) = CONST 
0xd30x0: REVERT v0d0(0x0) v0d0(0x0)
----------------------------------

Begin block 0xd4
prev = {}, next = {'0x56e'}
----------------------------------
function name()()
Block 0xd4
0xd5: vd5(0xdc) = CONST 
0xd8: vd8(0x56e) = CONST 
0xdb: JUMP vd8(0x56e)
----------------------------------

Begin block 0xdc
prev = {'0x606'}, next = {'0x101'}
----------------------------------
Block 0xdc
0xdd: vdd(0x40) = CONST 
0xdf: vdf = MLOAD vdd(0x40)
0xe2: ve2(0x20) = CONST 
0xe4: ve4 = ADD ve2(0x20) vdf
0xe7: ve7 = SUB ve4 vdf
0xe9: MSTORE vdf ve7
0xed: ved = MLOAD v595
0xef: MSTORE ve4 ved
0xf0: vf0(0x20) = CONST 
0xf2: vf2 = ADD vf0(0x20) ve4
0xf6: vf6 = MLOAD v595
0xf8: vf8(0x20) = CONST 
0xfa: vfa = ADD vf8(0x20) v595
0xff: vff(0x0) = CONST 
----------------------------------

Begin block 0x101
prev = {'0x10a', '0xdc'}, next = {'0x10a', '0x11c'}
----------------------------------
Block 0x101
0x101_0x0: v101_0 = PHI vff(0x0) v115
0x104: v104 = LT v101_0 vf6
0x105: v105 = ISZERO v104
0x106: v106(0x11c) = CONST 
0x109: JUMPI v106(0x11c) v105
----------------------------------

Begin block 0x10a
prev = {'0x101'}, next = {'0x101'}
----------------------------------
Block 0x10a
0x10a_0x0: v10a_0 = PHI vff(0x0) v115
0x10c: v10c = ADD vfa v10a_0
0x10d: v10d = MLOAD v10c
0x110: v110 = ADD vf2 v10a_0
0x111: MSTORE v110 v10d
0x112: v112(0x20) = CONST 
0x115: v115 = ADD v10a_0 v112(0x20)
0x118: v118(0x101) = CONST 
0x11b: JUMP v118(0x101)
----------------------------------

Begin block 0x11c
prev = {'0x101'}, next = {'0x130', '0x149'}
----------------------------------
Block 0x11c
0x125: v125 = ADD vf6 vf2
0x127: v127(0x1f) = CONST 
0x129: v129 = AND v127(0x1f) vf6
0x12b: v12b = ISZERO v129
0x12c: v12c(0x149) = CONST 
0x12f: JUMPI v12c(0x149) v12b
----------------------------------

Begin block 0x130
prev = {'0x11c'}, next = {'0x149'}
----------------------------------
Block 0x130
0x132: v132 = SUB v125 v129
0x134: v134 = MLOAD v132
0x135: v135(0x1) = CONST 
0x138: v138(0x20) = CONST 
0x13a: v13a = SUB v138(0x20) v129
0x13b: v13b(0x100) = CONST 
0x13e: v13e = EXP v13b(0x100) v13a
0x13f: v13f = SUB v13e v135(0x1)
0x140: v140 = NOT v13f
0x141: v141 = AND v140 v134
0x143: MSTORE v132 v141
0x144: v144(0x20) = CONST 
0x146: v146 = ADD v144(0x20) v132
----------------------------------

Begin block 0x149
prev = {'0x130', '0x11c'}, next = {}
----------------------------------
Block 0x149
0x149_0x1: v149_1 = PHI v125 v146
0x14f: v14f(0x40) = CONST 
0x151: v151 = MLOAD v14f(0x40)
0x154: v154 = SUB v149_1 v151
0x156: RETURN v151 v154
----------------------------------

Begin block 0x157
prev = {}, next = {'0x16d', '0x169'}
----------------------------------
function approve(address,uint256)()
Block 0x157
0x158: v158(0x1a3) = CONST 
0x15b: v15b(0x4) = CONST 
0x15e: v15e = CALLDATASIZE 
0x15f: v15f = SUB v15e v15b(0x4)
0x160: v160(0x40) = CONST 
0x163: v163 = LT v15f v160(0x40)
0x164: v164 = ISZERO v163
0x165: v165(0x16d) = CONST 
0x168: JUMPI v165(0x16d) v164
----------------------------------

Begin block 0x169
prev = {'0x157'}, next = {}
----------------------------------
Block 0x169
0x169: v169(0x0) = CONST 
0x16c: REVERT v169(0x0) v169(0x0)
----------------------------------

Begin block 0x16d
prev = {'0x157'}, next = {'0x610'}
----------------------------------
Block 0x16d
0x16f: v16f = ADD v15b(0x4) v15f
0x173: v173 = CALLDATALOAD v15b(0x4)
0x174: v174(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x189: v189 = AND v174(0xffffffffffffffffffffffffffffffffffffffff) v173
0x18b: v18b(0x20) = CONST 
0x18d: v18d = ADD v18b(0x20) v15b(0x4)
0x193: v193 = CALLDATALOAD v18d
0x195: v195(0x20) = CONST 
0x197: v197 = ADD v195(0x20) v18d
0x19f: v19f(0x610) = CONST 
0x1a2: JUMP v19f(0x610)
----------------------------------

Begin block 0x1a3
prev = {'0x624'}, next = {}
----------------------------------
Block 0x1a3
0x1a4: v1a4(0x40) = CONST 
0x1a6: v1a6 = MLOAD v1a4(0x40)
0x1a9: v1a9 = ISZERO v625(0x1)
0x1aa: v1aa = ISZERO v1a9
0x1ab: v1ab = ISZERO v1aa
0x1ac: v1ac = ISZERO v1ab
0x1ae: MSTORE v1a6 v1ac
0x1af: v1af(0x20) = CONST 
0x1b1: v1b1 = ADD v1af(0x20) v1a6
0x1b5: v1b5(0x40) = CONST 
0x1b7: v1b7 = MLOAD v1b5(0x40)
0x1ba: v1ba = SUB v1b1 v1b7
0x1bc: RETURN v1b7 v1ba
----------------------------------

Begin block 0x1bd
prev = {}, next = {'0x62e'}
----------------------------------
function totalSupply()()
Block 0x1bd
0x1be: v1be(0x1c5) = CONST 
0x1c1: v1c1(0x62e) = CONST 
0x1c4: JUMP v1c1(0x62e)
----------------------------------

Begin block 0x1c5
prev = {'0x62e'}, next = {}
----------------------------------
Block 0x1c5
0x1c6: v1c6(0x40) = CONST 
0x1c8: v1c8 = MLOAD v1c6(0x40)
0x1cc: MSTORE v1c8 v633
0x1cd: v1cd(0x20) = CONST 
0x1cf: v1cf = ADD v1cd(0x20) v1c8
0x1d3: v1d3(0x40) = CONST 
0x1d5: v1d5 = MLOAD v1d3(0x40)
0x1d8: v1d8 = SUB v1cf v1d5
0x1da: RETURN v1d5 v1d8
----------------------------------

Begin block 0x1db
prev = {}, next = {'0x1ed', '0x1f1'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1db
0x1dc: v1dc(0x247) = CONST 
0x1df: v1df(0x4) = CONST 
0x1e2: v1e2 = CALLDATASIZE 
0x1e3: v1e3 = SUB v1e2 v1df(0x4)
0x1e4: v1e4(0x60) = CONST 
0x1e7: v1e7 = LT v1e3 v1e4(0x60)
0x1e8: v1e8 = ISZERO v1e7
0x1e9: v1e9(0x1f1) = CONST 
0x1ec: JUMPI v1e9(0x1f1) v1e8
----------------------------------

Begin block 0x1ed
prev = {'0x1db'}, next = {}
----------------------------------
Block 0x1ed
0x1ed: v1ed(0x0) = CONST 
0x1f0: REVERT v1ed(0x0) v1ed(0x0)
----------------------------------

Begin block 0x1f1
prev = {'0x1db'}, next = {'0x638'}
----------------------------------
Block 0x1f1
0x1f3: v1f3 = ADD v1df(0x4) v1e3
0x1f7: v1f7 = CALLDATALOAD v1df(0x4)
0x1f8: v1f8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x20d: v20d = AND v1f8(0xffffffffffffffffffffffffffffffffffffffff) v1f7
0x20f: v20f(0x20) = CONST 
0x211: v211 = ADD v20f(0x20) v1df(0x4)
0x217: v217 = CALLDATALOAD v211
0x218: v218(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x22d: v22d = AND v218(0xffffffffffffffffffffffffffffffffffffffff) v217
0x22f: v22f(0x20) = CONST 
0x231: v231 = ADD v22f(0x20) v211
0x237: v237 = CALLDATALOAD v231
0x239: v239(0x20) = CONST 
0x23b: v23b = ADD v239(0x20) v231
0x243: v243(0x638) = CONST 
0x246: JUMP v243(0x638)
----------------------------------

Begin block 0x247
prev = {'0x706'}, next = {}
----------------------------------
Block 0x247
0x248: v248(0x40) = CONST 
0x24a: v24a = MLOAD v248(0x40)
0x24d: v24d = ISZERO v707(0x1)
0x24e: v24e = ISZERO v24d
0x24f: v24f = ISZERO v24e
0x250: v250 = ISZERO v24f
0x252: MSTORE v24a v250
0x253: v253(0x20) = CONST 
0x255: v255 = ADD v253(0x20) v24a
0x259: v259(0x40) = CONST 
0x25b: v25b = MLOAD v259(0x40)
0x25e: v25e = SUB v255 v25b
0x260: RETURN v25b v25e
----------------------------------

Begin block 0x261
prev = {}, next = {'0x711'}
----------------------------------
function decimals()()
Block 0x261
0x262: v262(0x269) = CONST 
0x265: v265(0x711) = CONST 
0x268: JUMP v265(0x711)
----------------------------------

Begin block 0x269
prev = {'0x711'}, next = {}
----------------------------------
Block 0x269
0x26a: v26a(0x40) = CONST 
0x26c: v26c = MLOAD v26a(0x40)
0x26f: v26f(0xff) = CONST 
0x271: v271 = AND v26f(0xff) v723
0x272: v272(0xff) = CONST 
0x274: v274 = AND v272(0xff) v271
0x276: MSTORE v26c v274
0x277: v277(0x20) = CONST 
0x279: v279 = ADD v277(0x20) v26c
0x27d: v27d(0x40) = CONST 
0x27f: v27f = MLOAD v27d(0x40)
0x282: v282 = SUB v279 v27f
0x284: RETURN v27f v282
----------------------------------

Begin block 0x285
prev = {}, next = {'0x29b', '0x297'}
----------------------------------
function increaseAllowance(address,uint256)()
Block 0x285
0x286: v286(0x2d1) = CONST 
0x289: v289(0x4) = CONST 
0x28c: v28c = CALLDATASIZE 
0x28d: v28d = SUB v28c v289(0x4)
0x28e: v28e(0x40) = CONST 
0x291: v291 = LT v28d v28e(0x40)
0x292: v292 = ISZERO v291
0x293: v293(0x29b) = CONST 
0x296: JUMPI v293(0x29b) v292
----------------------------------

Begin block 0x297
prev = {'0x285'}, next = {}
----------------------------------
Block 0x297
0x297: v297(0x0) = CONST 
0x29a: REVERT v297(0x0) v297(0x0)
----------------------------------

Begin block 0x29b
prev = {'0x285'}, next = {'0x728'}
----------------------------------
Block 0x29b
0x29d: v29d = ADD v289(0x4) v28d
0x2a1: v2a1 = CALLDATALOAD v289(0x4)
0x2a2: v2a2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2b7: v2b7 = AND v2a2(0xffffffffffffffffffffffffffffffffffffffff) v2a1
0x2b9: v2b9(0x20) = CONST 
0x2bb: v2bb = ADD v2b9(0x20) v289(0x4)
0x2c1: v2c1 = CALLDATALOAD v2bb
0x2c3: v2c3(0x20) = CONST 
0x2c5: v2c5 = ADD v2c3(0x20) v2bb
0x2cd: v2cd(0x728) = CONST 
0x2d0: JUMP v2cd(0x728)
----------------------------------

Begin block 0x2d1
prev = {'0x7d1'}, next = {}
----------------------------------
Block 0x2d1
0x2d2: v2d2(0x40) = CONST 
0x2d4: v2d4 = MLOAD v2d2(0x40)
0x2d7: v2d7 = ISZERO v7d2(0x1)
0x2d8: v2d8 = ISZERO v2d7
0x2d9: v2d9 = ISZERO v2d8
0x2da: v2da = ISZERO v2d9
0x2dc: MSTORE v2d4 v2da
0x2dd: v2dd(0x20) = CONST 
0x2df: v2df = ADD v2dd(0x20) v2d4
0x2e3: v2e3(0x40) = CONST 
0x2e5: v2e5 = MLOAD v2e3(0x40)
0x2e8: v2e8 = SUB v2df v2e5
0x2ea: RETURN v2e5 v2e8
----------------------------------

Begin block 0x2eb
prev = {}, next = {'0x2fd', '0x301'}
----------------------------------
function balanceOf(address)()
Block 0x2eb
0x2ec: v2ec(0x32d) = CONST 
0x2ef: v2ef(0x4) = CONST 
0x2f2: v2f2 = CALLDATASIZE 
0x2f3: v2f3 = SUB v2f2 v2ef(0x4)
0x2f4: v2f4(0x20) = CONST 
0x2f7: v2f7 = LT v2f3 v2f4(0x20)
0x2f8: v2f8 = ISZERO v2f7
0x2f9: v2f9(0x301) = CONST 
0x2fc: JUMPI v2f9(0x301) v2f8
----------------------------------

Begin block 0x2fd
prev = {'0x2eb'}, next = {}
----------------------------------
Block 0x2fd
0x2fd: v2fd(0x0) = CONST 
0x300: REVERT v2fd(0x0) v2fd(0x0)
----------------------------------

Begin block 0x301
prev = {'0x2eb'}, next = {'0x7db'}
----------------------------------
Block 0x301
0x303: v303 = ADD v2ef(0x4) v2f3
0x307: v307 = CALLDATALOAD v2ef(0x4)
0x308: v308(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x31d: v31d = AND v308(0xffffffffffffffffffffffffffffffffffffffff) v307
0x31f: v31f(0x20) = CONST 
0x321: v321 = ADD v31f(0x20) v2ef(0x4)
0x329: v329(0x7db) = CONST 
0x32c: JUMP v329(0x7db)
----------------------------------

Begin block 0x32d
prev = {'0x7db'}, next = {}
----------------------------------
Block 0x32d
0x32e: v32e(0x40) = CONST 
0x330: v330 = MLOAD v32e(0x40)
0x334: MSTORE v330 v81c
0x335: v335(0x20) = CONST 
0x337: v337 = ADD v335(0x20) v330
0x33b: v33b(0x40) = CONST 
0x33d: v33d = MLOAD v33b(0x40)
0x340: v340 = SUB v337 v33d
0x342: RETURN v33d v340
----------------------------------

Begin block 0x343
prev = {}, next = {'0x355', '0x359'}
----------------------------------
function setPrice(uint256)()
Block 0x343
0x344: v344(0x36f) = CONST 
0x347: v347(0x4) = CONST 
0x34a: v34a = CALLDATASIZE 
0x34b: v34b = SUB v34a v347(0x4)
0x34c: v34c(0x20) = CONST 
0x34f: v34f = LT v34b v34c(0x20)
0x350: v350 = ISZERO v34f
0x351: v351(0x359) = CONST 
0x354: JUMPI v351(0x359) v350
----------------------------------

Begin block 0x355
prev = {'0x343'}, next = {}
----------------------------------
Block 0x355
0x355: v355(0x0) = CONST 
0x358: REVERT v355(0x0) v355(0x0)
----------------------------------

Begin block 0x359
prev = {'0x343'}, next = {'0x823'}
----------------------------------
Block 0x359
0x35b: v35b = ADD v347(0x4) v34b
0x35f: v35f = CALLDATALOAD v347(0x4)
0x361: v361(0x20) = CONST 
0x363: v363 = ADD v361(0x20) v347(0x4)
0x36b: v36b(0x823) = CONST 
0x36e: JUMP v36b(0x823)
----------------------------------

Begin block 0x36f
prev = {'0x921'}, next = {}
----------------------------------
Block 0x36f
0x370: v370(0x40) = CONST 
0x372: v372 = MLOAD v370(0x40)
0x375: v375 = ISZERO v928(0x1)
0x376: v376 = ISZERO v375
0x377: v377 = ISZERO v376
0x378: v378 = ISZERO v377
0x37a: MSTORE v372 v378
0x37b: v37b(0x20) = CONST 
0x37d: v37d = ADD v37b(0x20) v372
0x381: v381(0x40) = CONST 
0x383: v383 = MLOAD v381(0x40)
0x386: v386 = SUB v37d v383
0x388: RETURN v383 v386
----------------------------------

Begin block 0x389
prev = {}, next = {'0x930'}
----------------------------------
function symbol()()
Block 0x389
0x38a: v38a(0x391) = CONST 
0x38d: v38d(0x930) = CONST 
0x390: JUMP v38d(0x930)
----------------------------------

Begin block 0x391
prev = {'0x9c8'}, next = {'0x3b6'}
----------------------------------
Block 0x391
0x392: v392(0x40) = CONST 
0x394: v394 = MLOAD v392(0x40)
0x397: v397(0x20) = CONST 
0x399: v399 = ADD v397(0x20) v394
0x39c: v39c = SUB v399 v394
0x39e: MSTORE v394 v39c
0x3a2: v3a2 = MLOAD v957
0x3a4: MSTORE v399 v3a2
0x3a5: v3a5(0x20) = CONST 
0x3a7: v3a7 = ADD v3a5(0x20) v399
0x3ab: v3ab = MLOAD v957
0x3ad: v3ad(0x20) = CONST 
0x3af: v3af = ADD v3ad(0x20) v957
0x3b4: v3b4(0x0) = CONST 
----------------------------------

Begin block 0x3b6
prev = {'0x391', '0x3bf'}, next = {'0x3d1', '0x3bf'}
----------------------------------
Block 0x3b6
0x3b6_0x0: v3b6_0 = PHI v3b4(0x0) v3ca
0x3b9: v3b9 = LT v3b6_0 v3ab
0x3ba: v3ba = ISZERO v3b9
0x3bb: v3bb(0x3d1) = CONST 
0x3be: JUMPI v3bb(0x3d1) v3ba
----------------------------------

Begin block 0x3bf
prev = {'0x3b6'}, next = {'0x3b6'}
----------------------------------
Block 0x3bf
0x3bf_0x0: v3bf_0 = PHI v3b4(0x0) v3ca
0x3c1: v3c1 = ADD v3af v3bf_0
0x3c2: v3c2 = MLOAD v3c1
0x3c5: v3c5 = ADD v3a7 v3bf_0
0x3c6: MSTORE v3c5 v3c2
0x3c7: v3c7(0x20) = CONST 
0x3ca: v3ca = ADD v3bf_0 v3c7(0x20)
0x3cd: v3cd(0x3b6) = CONST 
0x3d0: JUMP v3cd(0x3b6)
----------------------------------

Begin block 0x3d1
prev = {'0x3b6'}, next = {'0x3fe', '0x3e5'}
----------------------------------
Block 0x3d1
0x3da: v3da = ADD v3ab v3a7
0x3dc: v3dc(0x1f) = CONST 
0x3de: v3de = AND v3dc(0x1f) v3ab
0x3e0: v3e0 = ISZERO v3de
0x3e1: v3e1(0x3fe) = CONST 
0x3e4: JUMPI v3e1(0x3fe) v3e0
----------------------------------

Begin block 0x3e5
prev = {'0x3d1'}, next = {'0x3fe'}
----------------------------------
Block 0x3e5
0x3e7: v3e7 = SUB v3da v3de
0x3e9: v3e9 = MLOAD v3e7
0x3ea: v3ea(0x1) = CONST 
0x3ed: v3ed(0x20) = CONST 
0x3ef: v3ef = SUB v3ed(0x20) v3de
0x3f0: v3f0(0x100) = CONST 
0x3f3: v3f3 = EXP v3f0(0x100) v3ef
0x3f4: v3f4 = SUB v3f3 v3ea(0x1)
0x3f5: v3f5 = NOT v3f4
0x3f6: v3f6 = AND v3f5 v3e9
0x3f8: MSTORE v3e7 v3f6
0x3f9: v3f9(0x20) = CONST 
0x3fb: v3fb = ADD v3f9(0x20) v3e7
----------------------------------

Begin block 0x3fe
prev = {'0x3e5', '0x3d1'}, next = {}
----------------------------------
Block 0x3fe
0x3fe_0x1: v3fe_1 = PHI v3da v3fb
0x404: v404(0x40) = CONST 
0x406: v406 = MLOAD v404(0x40)
0x409: v409 = SUB v3fe_1 v406
0x40b: RETURN v406 v409
----------------------------------

Begin block 0x40c
prev = {}, next = {'0x9d2'}
----------------------------------
function price()()
Block 0x40c
0x40d: v40d(0x414) = CONST 
0x410: v410(0x9d2) = CONST 
0x413: JUMP v410(0x9d2)
----------------------------------

Begin block 0x414
prev = {'0x9d2'}, next = {}
----------------------------------
Block 0x414
0x415: v415(0x40) = CONST 
0x417: v417 = MLOAD v415(0x40)
0x41b: MSTORE v417 v9d7
0x41c: v41c(0x20) = CONST 
0x41e: v41e = ADD v41c(0x20) v417
0x422: v422(0x40) = CONST 
0x424: v424 = MLOAD v422(0x40)
0x427: v427 = SUB v41e v424
0x429: RETURN v424 v427
----------------------------------

Begin block 0x42a
prev = {}, next = {'0x43c', '0x440'}
----------------------------------
function decreaseAllowance(address,uint256)()
Block 0x42a
0x42b: v42b(0x476) = CONST 
0x42e: v42e(0x4) = CONST 
0x431: v431 = CALLDATASIZE 
0x432: v432 = SUB v431 v42e(0x4)
0x433: v433(0x40) = CONST 
0x436: v436 = LT v432 v433(0x40)
0x437: v437 = ISZERO v436
0x438: v438(0x440) = CONST 
0x43b: JUMPI v438(0x440) v437
----------------------------------

Begin block 0x43c
prev = {'0x42a'}, next = {}
----------------------------------
Block 0x43c
0x43c: v43c(0x0) = CONST 
0x43f: REVERT v43c(0x0) v43c(0x0)
----------------------------------

Begin block 0x440
prev = {'0x42a'}, next = {'0x9dc'}
----------------------------------
Block 0x440
0x442: v442 = ADD v42e(0x4) v432
0x446: v446 = CALLDATALOAD v42e(0x4)
0x447: v447(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x45c: v45c = AND v447(0xffffffffffffffffffffffffffffffffffffffff) v446
0x45e: v45e(0x20) = CONST 
0x460: v460 = ADD v45e(0x20) v42e(0x4)
0x466: v466 = CALLDATALOAD v460
0x468: v468(0x20) = CONST 
0x46a: v46a = ADD v468(0x20) v460
0x472: v472(0x9dc) = CONST 
0x475: JUMP v472(0x9dc)
----------------------------------

Begin block 0x476
prev = {'0xa9f'}, next = {}
----------------------------------
Block 0x476
0x477: v477(0x40) = CONST 
0x479: v479 = MLOAD v477(0x40)
0x47c: v47c = ISZERO vaa0(0x1)
0x47d: v47d = ISZERO v47c
0x47e: v47e = ISZERO v47d
0x47f: v47f = ISZERO v47e
0x481: MSTORE v479 v47f
0x482: v482(0x20) = CONST 
0x484: v484 = ADD v482(0x20) v479
0x488: v488(0x40) = CONST 
0x48a: v48a = MLOAD v488(0x40)
0x48d: v48d = SUB v484 v48a
0x48f: RETURN v48a v48d
----------------------------------

Begin block 0x490
prev = {}, next = {'0x4a6', '0x4a2'}
----------------------------------
function transfer(address,uint256)()
Block 0x490
0x491: v491(0x4dc) = CONST 
0x494: v494(0x4) = CONST 
0x497: v497 = CALLDATASIZE 
0x498: v498 = SUB v497 v494(0x4)
0x499: v499(0x40) = CONST 
0x49c: v49c = LT v498 v499(0x40)
0x49d: v49d = ISZERO v49c
0x49e: v49e(0x4a6) = CONST 
0x4a1: JUMPI v49e(0x4a6) v49d
----------------------------------

Begin block 0x4a2
prev = {'0x490'}, next = {}
----------------------------------
Block 0x4a2
0x4a2: v4a2(0x0) = CONST 
0x4a5: REVERT v4a2(0x0) v4a2(0x0)
----------------------------------

Begin block 0x4a6
prev = {'0x490'}, next = {'0xaa9'}
----------------------------------
Block 0x4a6
0x4a8: v4a8 = ADD v494(0x4) v498
0x4ac: v4ac = CALLDATALOAD v494(0x4)
0x4ad: v4ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4c2: v4c2 = AND v4ad(0xffffffffffffffffffffffffffffffffffffffff) v4ac
0x4c4: v4c4(0x20) = CONST 
0x4c6: v4c6 = ADD v4c4(0x20) v494(0x4)
0x4cc: v4cc = CALLDATALOAD v4c6
0x4ce: v4ce(0x20) = CONST 
0x4d0: v4d0 = ADD v4ce(0x20) v4c6
0x4d8: v4d8(0xaa9) = CONST 
0x4db: JUMP v4d8(0xaa9)
----------------------------------

Begin block 0x4dc
prev = {'0xabd'}, next = {}
----------------------------------
Block 0x4dc
0x4dd: v4dd(0x40) = CONST 
0x4df: v4df = MLOAD v4dd(0x40)
0x4e2: v4e2 = ISZERO vabe(0x1)
0x4e3: v4e3 = ISZERO v4e2
0x4e4: v4e4 = ISZERO v4e3
0x4e5: v4e5 = ISZERO v4e4
0x4e7: MSTORE v4df v4e5
0x4e8: v4e8(0x20) = CONST 
0x4ea: v4ea = ADD v4e8(0x20) v4df
0x4ee: v4ee(0x40) = CONST 
0x4f0: v4f0 = MLOAD v4ee(0x40)
0x4f3: v4f3 = SUB v4ea v4f0
0x4f5: RETURN v4f0 v4f3
----------------------------------

Begin block 0x4f6
prev = {}, next = {'0x50c', '0x508'}
----------------------------------
function allowance(address,address)()
Block 0x4f6
0x4f7: v4f7(0x558) = CONST 
0x4fa: v4fa(0x4) = CONST 
0x4fd: v4fd = CALLDATASIZE 
0x4fe: v4fe = SUB v4fd v4fa(0x4)
0x4ff: v4ff(0x40) = CONST 
0x502: v502 = LT v4fe v4ff(0x40)
0x503: v503 = ISZERO v502
0x504: v504(0x50c) = CONST 
0x507: JUMPI v504(0x50c) v503
----------------------------------

Begin block 0x508
prev = {'0x4f6'}, next = {}
----------------------------------
Block 0x508
0x508: v508(0x0) = CONST 
0x50b: REVERT v508(0x0) v508(0x0)
----------------------------------

Begin block 0x50c
prev = {'0x4f6'}, next = {'0xac7'}
----------------------------------
Block 0x50c
0x50e: v50e = ADD v4fa(0x4) v4fe
0x512: v512 = CALLDATALOAD v4fa(0x4)
0x513: v513(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x528: v528 = AND v513(0xffffffffffffffffffffffffffffffffffffffff) v512
0x52a: v52a(0x20) = CONST 
0x52c: v52c = ADD v52a(0x20) v4fa(0x4)
0x532: v532 = CALLDATALOAD v52c
0x533: v533(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x548: v548 = AND v533(0xffffffffffffffffffffffffffffffffffffffff) v532
0x54a: v54a(0x20) = CONST 
0x54c: v54c = ADD v54a(0x20) v52c
0x554: v554(0xac7) = CONST 
0x557: JUMP v554(0xac7)
----------------------------------

Begin block 0x558
prev = {'0xac7'}, next = {}
----------------------------------
Block 0x558
0x559: v559(0x40) = CONST 
0x55b: v55b = MLOAD v559(0x40)
0x55f: MSTORE v55b vb46
0x560: v560(0x20) = CONST 
0x562: v562 = ADD v560(0x20) v55b
0x566: v566(0x40) = CONST 
0x568: v568 = MLOAD v566(0x40)
0x56b: v56b = SUB v562 v568
0x56d: RETURN v568 v56b
----------------------------------

Begin block 0x56e
prev = {'0xd4'}, next = {'0x606', '0x5c0'}
----------------------------------
Block 0x56e
0x56f: v56f(0x60) = CONST 
0x571: v571(0x4) = CONST 
0x574: v574 = SLOAD v571(0x4)
0x575: v575(0x1) = CONST 
0x578: v578(0x1) = CONST 
0x57a: v57a = AND v578(0x1) v574
0x57b: v57b = ISZERO v57a
0x57c: v57c(0x100) = CONST 
0x57f: v57f = MUL v57c(0x100) v57b
0x580: v580 = SUB v57f v575(0x1)
0x581: v581 = AND v580 v574
0x582: v582(0x2) = CONST 
0x585: v585 = DIV v581 v582(0x2)
0x587: v587(0x1f) = CONST 
0x589: v589 = ADD v587(0x1f) v585
0x58a: v58a(0x20) = CONST 
0x58e: v58e = DIV v589 v58a(0x20)
0x58f: v58f = MUL v58e v58a(0x20)
0x590: v590(0x20) = CONST 
0x592: v592 = ADD v590(0x20) v58f
0x593: v593(0x40) = CONST 
0x595: v595 = MLOAD v593(0x40)
0x598: v598 = ADD v595 v592
0x599: v599(0x40) = CONST 
0x59b: MSTORE v599(0x40) v598
0x5a2: MSTORE v595 v585
0x5a3: v5a3(0x20) = CONST 
0x5a5: v5a5 = ADD v5a3(0x20) v595
0x5a8: v5a8 = SLOAD v571(0x4)
0x5a9: v5a9(0x1) = CONST 
0x5ac: v5ac(0x1) = CONST 
0x5ae: v5ae = AND v5ac(0x1) v5a8
0x5af: v5af = ISZERO v5ae
0x5b0: v5b0(0x100) = CONST 
0x5b3: v5b3 = MUL v5b0(0x100) v5af
0x5b4: v5b4 = SUB v5b3 v5a9(0x1)
0x5b5: v5b5 = AND v5b4 v5a8
0x5b6: v5b6(0x2) = CONST 
0x5b9: v5b9 = DIV v5b5 v5b6(0x2)
0x5bb: v5bb = ISZERO v5b9
0x5bc: v5bc(0x606) = CONST 
0x5bf: JUMPI v5bc(0x606) v5bb
----------------------------------

Begin block 0x5c0
prev = {'0x56e'}, next = {'0x5db', '0x5c8'}
----------------------------------
Block 0x5c0
0x5c1: v5c1(0x1f) = CONST 
0x5c3: v5c3 = LT v5c1(0x1f) v5b9
0x5c4: v5c4(0x5db) = CONST 
0x5c7: JUMPI v5c4(0x5db) v5c3
----------------------------------

Begin block 0x5c8
prev = {'0x5c0'}, next = {'0x606'}
----------------------------------
Block 0x5c8
0x5c8: v5c8(0x100) = CONST 
0x5cd: v5cd = SLOAD v571(0x4)
0x5ce: v5ce = DIV v5cd v5c8(0x100)
0x5cf: v5cf = MUL v5ce v5c8(0x100)
0x5d1: MSTORE v5a5 v5cf
0x5d3: v5d3(0x20) = CONST 
0x5d5: v5d5 = ADD v5d3(0x20) v5a5
0x5d7: v5d7(0x606) = CONST 
0x5da: JUMP v5d7(0x606)
----------------------------------

Begin block 0x5db
prev = {'0x5c0'}, next = {'0x5e9'}
----------------------------------
Block 0x5db
0x5dd: v5dd = ADD v5a5 v5b9
0x5e0: v5e0(0x0) = CONST 
0x5e2: MSTORE v5e0(0x0) v571(0x4)
0x5e3: v5e3(0x20) = CONST 
0x5e5: v5e5(0x0) = CONST 
0x5e7: v5e7 = SHA3 v5e5(0x0) v5e3(0x20)
----------------------------------

Begin block 0x5e9
prev = {'0x5db', '0x5e9'}, next = {'0x5fd', '0x5e9'}
----------------------------------
Block 0x5e9
0x5e9_0x0: v5e9_0 = PHI v5a5 v5f5
0x5e9_0x1: v5e9_1 = PHI v5e7 v5f1
0x5eb: v5eb = SLOAD v5e9_1
0x5ed: MSTORE v5e9_0 v5eb
0x5ef: v5ef(0x1) = CONST 
0x5f1: v5f1 = ADD v5ef(0x1) v5e9_1
0x5f3: v5f3(0x20) = CONST 
0x5f5: v5f5 = ADD v5f3(0x20) v5e9_0
0x5f8: v5f8 = GT v5dd v5f5
0x5f9: v5f9(0x5e9) = CONST 
0x5fc: JUMPI v5f9(0x5e9) v5f8
----------------------------------

Begin block 0x5fd
prev = {'0x5e9'}, next = {'0x606'}
----------------------------------
Block 0x5fd
0x5ff: v5ff = SUB v5f5 v5dd
0x600: v600(0x1f) = CONST 
0x602: v602 = AND v600(0x1f) v5ff
0x604: v604 = ADD v5dd v602
----------------------------------

Begin block 0x606
prev = {'0x5fd', '0x5c8', '0x56e'}, next = {'0xdc'}
----------------------------------
Block 0x606
0x60f: JUMP vd5(0xdc)
----------------------------------

Begin block 0x610
prev = {'0x16d'}, next = {'0x61d'}
----------------------------------
Block 0x610
0x611: v611(0x0) = CONST 
0x613: v613(0x624) = CONST 
0x616: v616(0x61d) = CONST 
0x619: v619(0xb4e) = CONST 
0x61c: v61c_0 = CALLPRIVATE v619(0xb4e) v616(0x61d)
----------------------------------

Begin block 0x61d
prev = {'0x610'}, next = {'0x624'}
----------------------------------
Block 0x61d
0x620: v620(0xb56) = CONST 
0x623: CALLPRIVATE v620(0xb56) v193 v189 v61c_0 v613(0x624)
----------------------------------

Begin block 0x624
prev = {'0x61d'}, next = {'0x1a3'}
----------------------------------
Block 0x624
0x625: v625(0x1) = CONST 
0x62d: JUMP v158(0x1a3)
----------------------------------

Begin block 0x62e
prev = {'0x1bd'}, next = {'0x1c5'}
----------------------------------
Block 0x62e
0x62f: v62f(0x0) = CONST 
0x631: v631(0x3) = CONST 
0x633: v633 = SLOAD v631(0x3)
0x637: JUMP v1be(0x1c5)
----------------------------------

Begin block 0x638
prev = {'0x1f1'}, next = {'0x645'}
----------------------------------
Block 0x638
0x639: v639(0x0) = CONST 
0x63b: v63b(0x645) = CONST 
0x641: v641(0xd4d) = CONST 
0x644: CALLPRIVATE v641(0xd4d) v237 v22d v20d v63b(0x645)
----------------------------------

Begin block 0x645
prev = {'0x638'}, next = {'0x651'}
----------------------------------
Block 0x645
0x646: v646(0x706) = CONST 
0x64a: v64a(0x651) = CONST 
0x64d: v64d(0xb4e) = CONST 
0x650: v650_0 = CALLPRIVATE v64d(0xb4e) v64a(0x651)
----------------------------------

Begin block 0x651
prev = {'0x645'}, next = {'0x6b7'}
----------------------------------
Block 0x651
0x652: v652(0x701) = CONST 
0x656: v656(0x40) = CONST 
0x658: v658 = MLOAD v656(0x40)
0x65a: v65a(0x60) = CONST 
0x65c: v65c = ADD v65a(0x60) v658
0x65d: v65d(0x40) = CONST 
0x65f: MSTORE v65d(0x40) v65c
0x661: v661(0x28) = CONST 
0x664: MSTORE v658 v661(0x28)
0x665: v665(0x20) = CONST 
0x667: v667 = ADD v665(0x20) v658
0x668: v668(0x11c7) = CONST 
0x66b: v66b(0x28) = CONST 
0x66e: CODECOPY v667 v668(0x11c7) v66b(0x28)
0x66f: v66f(0x2) = CONST 
0x671: v671(0x0) = CONST 
0x674: v674(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x689: v689 = AND v674(0xffffffffffffffffffffffffffffffffffffffff) v20d
0x68a: v68a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x69f: v69f = AND v68a(0xffffffffffffffffffffffffffffffffffffffff) v689
0x6a1: MSTORE v671(0x0) v69f
0x6a2: v6a2(0x20) = CONST 
0x6a4: v6a4(0x20) = ADD v6a2(0x20) v671(0x0)
0x6a7: MSTORE v6a4(0x20) v66f(0x2)
0x6a8: v6a8(0x20) = CONST 
0x6aa: v6aa(0x40) = ADD v6a8(0x20) v6a4(0x20)
0x6ab: v6ab(0x0) = CONST 
0x6ad: v6ad = SHA3 v6ab(0x0) v6aa(0x40)
0x6ae: v6ae(0x0) = CONST 
0x6b0: v6b0(0x6b7) = CONST 
0x6b3: v6b3(0xb4e) = CONST 
0x6b6: v6b6_0 = CALLPRIVATE v6b3(0xb4e) v6b0(0x6b7)
----------------------------------

Begin block 0x6b7
prev = {'0x651'}, next = {'0x701'}
----------------------------------
Block 0x6b7
0x6b8: v6b8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6cd: v6cd = AND v6b8(0xffffffffffffffffffffffffffffffffffffffff) v6b6_0
0x6ce: v6ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e3: v6e3 = AND v6ce(0xffffffffffffffffffffffffffffffffffffffff) v6cd
0x6e5: MSTORE v6ae(0x0) v6e3
0x6e6: v6e6(0x20) = CONST 
0x6e8: v6e8 = ADD v6e6(0x20) v6ae(0x0)
0x6eb: MSTORE v6e8 v6ad
0x6ec: v6ec(0x20) = CONST 
0x6ee: v6ee = ADD v6ec(0x20) v6e8
0x6ef: v6ef(0x0) = CONST 
0x6f1: v6f1 = SHA3 v6ef(0x0) v6ee
0x6f2: v6f2 = SLOAD v6f1
0x6f3: v6f3(0x100e) = CONST 
0x6fa: v6fa(0xffffffff) = CONST 
0x6ff: v6ff(0x100e) = AND v6fa(0xffffffff) v6f3(0x100e)
0x700: v700_0 = CALLPRIVATE v6ff(0x100e) v658 v237 v6f2 v652(0x701)
----------------------------------

Begin block 0x701
prev = {'0x6b7'}, next = {'0x706'}
----------------------------------
Block 0x701
0x702: v702(0xb56) = CONST 
0x705: CALLPRIVATE v702(0xb56) v700_0 v650_0 v20d v646(0x706)
----------------------------------

Begin block 0x706
prev = {'0x701'}, next = {'0x247'}
----------------------------------
Block 0x706
0x707: v707(0x1) = CONST 
0x710: JUMP v1dc(0x247)
----------------------------------

Begin block 0x711
prev = {'0x261'}, next = {'0x269'}
----------------------------------
Block 0x711
0x712: v712(0x0) = CONST 
0x714: v714(0x6) = CONST 
0x716: v716(0x0) = CONST 
0x719: v719 = SLOAD v714(0x6)
0x71b: v71b(0x100) = CONST 
0x71e: v71e(0x1) = EXP v71b(0x100) v716(0x0)
0x720: v720 = DIV v719 v71e(0x1)
0x721: v721(0xff) = CONST 
0x723: v723 = AND v721(0xff) v720
0x727: JUMP v262(0x269)
----------------------------------

Begin block 0x728
prev = {'0x29b'}, next = {'0x735'}
----------------------------------
Block 0x728
0x729: v729(0x0) = CONST 
0x72b: v72b(0x7d1) = CONST 
0x72e: v72e(0x735) = CONST 
0x731: v731(0xb4e) = CONST 
0x734: v734_0 = CALLPRIVATE v731(0xb4e) v72e(0x735)
----------------------------------

Begin block 0x735
prev = {'0x728'}, next = {'0x746'}
----------------------------------
Block 0x735
0x737: v737(0x7cc) = CONST 
0x73b: v73b(0x2) = CONST 
0x73d: v73d(0x0) = CONST 
0x73f: v73f(0x746) = CONST 
0x742: v742(0xb4e) = CONST 
0x745: v745_0 = CALLPRIVATE v742(0xb4e) v73f(0x746)
----------------------------------

Begin block 0x746
prev = {'0x735'}, next = {'0x7cc'}
----------------------------------
Block 0x746
0x747: v747(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75c: v75c = AND v747(0xffffffffffffffffffffffffffffffffffffffff) v745_0
0x75d: v75d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x772: v772 = AND v75d(0xffffffffffffffffffffffffffffffffffffffff) v75c
0x774: MSTORE v73d(0x0) v772
0x775: v775(0x20) = CONST 
0x777: v777 = ADD v775(0x20) v73d(0x0)
0x77a: MSTORE v777 v73b(0x2)
0x77b: v77b(0x20) = CONST 
0x77d: v77d = ADD v77b(0x20) v777
0x77e: v77e(0x0) = CONST 
0x780: v780 = SHA3 v77e(0x0) v77d
0x781: v781(0x0) = CONST 
0x784: v784(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x799: v799 = AND v784(0xffffffffffffffffffffffffffffffffffffffff) v2b7
0x79a: v79a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7af: v7af = AND v79a(0xffffffffffffffffffffffffffffffffffffffff) v799
0x7b1: MSTORE v781(0x0) v7af
0x7b2: v7b2(0x20) = CONST 
0x7b4: v7b4(0x20) = ADD v7b2(0x20) v781(0x0)
0x7b7: MSTORE v7b4(0x20) v780
0x7b8: v7b8(0x20) = CONST 
0x7ba: v7ba(0x40) = ADD v7b8(0x20) v7b4(0x20)
0x7bb: v7bb(0x0) = CONST 
0x7bd: v7bd = SHA3 v7bb(0x0) v7ba(0x40)
0x7be: v7be = SLOAD v7bd
0x7bf: v7bf(0x10ce) = CONST 
0x7c5: v7c5(0xffffffff) = CONST 
0x7ca: v7ca(0x10ce) = AND v7c5(0xffffffff) v7bf(0x10ce)
0x7cb: v7cb_0 = CALLPRIVATE v7ca(0x10ce) v2c1 v7be v737(0x7cc)
----------------------------------

Begin block 0x7cc
prev = {'0x746'}, next = {'0x7d1'}
----------------------------------
Block 0x7cc
0x7cd: v7cd(0xb56) = CONST 
0x7d0: CALLPRIVATE v7cd(0xb56) v7cb_0 v2b7 v734_0 v72b(0x7d1)
----------------------------------

Begin block 0x7d1
prev = {'0x7cc'}, next = {'0x2d1'}
----------------------------------
Block 0x7d1
0x7d2: v7d2(0x1) = CONST 
0x7da: JUMP v286(0x2d1)
----------------------------------

Begin block 0x7db
prev = {'0x301'}, next = {'0x32d'}
----------------------------------
Block 0x7db
0x7dc: v7dc(0x0) = CONST 
0x7df: v7df(0x0) = CONST 
0x7e2: v7e2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7f7: v7f7 = AND v7e2(0xffffffffffffffffffffffffffffffffffffffff) v31d
0x7f8: v7f8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80d: v80d = AND v7f8(0xffffffffffffffffffffffffffffffffffffffff) v7f7
0x80f: MSTORE v7df(0x0) v80d
0x810: v810(0x20) = CONST 
0x812: v812(0x20) = ADD v810(0x20) v7df(0x0)
0x815: MSTORE v812(0x20) v7dc(0x0)
0x816: v816(0x20) = CONST 
0x818: v818(0x40) = ADD v816(0x20) v812(0x20)
0x819: v819(0x0) = CONST 
0x81b: v81b = SHA3 v819(0x0) v818(0x40)
0x81c: v81c = SLOAD v81b
0x822: JUMP v2ec(0x32d)
----------------------------------

Begin block 0x823
prev = {'0x359'}, next = {'0x866'}
----------------------------------
Block 0x823
0x824: v824(0x0) = CONST 
0x826: v826(0x1) = CONST 
0x828: v828(0x0) = CONST 
0x82b: v82b = SLOAD v826(0x1)
0x82d: v82d(0x100) = CONST 
0x830: v830(0x1) = EXP v82d(0x100) v828(0x0)
0x832: v832 = DIV v82b v830(0x1)
0x833: v833(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x848: v848 = AND v833(0xffffffffffffffffffffffffffffffffffffffff) v832
0x849: v849(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x85e: v85e = AND v849(0xffffffffffffffffffffffffffffffffffffffff) v848
0x85f: v85f(0x866) = CONST 
0x862: v862(0xb4e) = CONST 
0x865: v865_0 = CALLPRIVATE v862(0xb4e) v85f(0x866)
----------------------------------

Begin block 0x866
prev = {'0x823'}, next = {'0x882', '0x886'}
----------------------------------
Block 0x866
0x867: v867(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x87c: v87c = AND v867(0xffffffffffffffffffffffffffffffffffffffff) v865_0
0x87d: v87d = EQ v87c v85e
0x87e: v87e(0x886) = CONST 
0x881: JUMPI v87e(0x886) v87d
----------------------------------

Begin block 0x882
prev = {'0x866'}, next = {}
----------------------------------
Block 0x882
0x882: v882(0x0) = CONST 
0x885: REVERT v882(0x0) v882(0x0)
----------------------------------

Begin block 0x886
prev = {'0x866'}, next = {'0x891', '0x8fe'}
----------------------------------
Block 0x886
0x887: v887(0x7) = CONST 
0x889: v889 = SLOAD v887(0x7)
0x88b: v88b = EQ v35f v889
0x88c: v88c = ISZERO v88b
0x88d: v88d(0x8fe) = CONST 
0x890: JUMPI v88d(0x8fe) v88c
----------------------------------

Begin block 0x891
prev = {'0x886'}, next = {}
----------------------------------
Block 0x891
0x891: v891(0x40) = CONST 
0x893: v893 = MLOAD v891(0x40)
0x894: v894(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x8b6: MSTORE v893 v894(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x8b7: v8b7(0x4) = CONST 
0x8b9: v8b9 = ADD v8b7(0x4) v893
0x8bc: v8bc(0x20) = CONST 
0x8be: v8be = ADD v8bc(0x20) v8b9
0x8c1: v8c1 = SUB v8be v8b9
0x8c3: MSTORE v8b9 v8c1
0x8c4: v8c4(0xb) = CONST 
0x8c7: MSTORE v8be v8c4(0xb)
0x8c8: v8c8(0x20) = CONST 
0x8ca: v8ca = ADD v8c8(0x20) v8be
0x8cc: v8cc(0x7072696365206572726f72000000000000000000000000000000000000000000) = CONST 
0x8ee: MSTORE v8ca v8cc(0x7072696365206572726f72000000000000000000000000000000000000000000)
0x8f0: v8f0(0x20) = CONST 
0x8f2: v8f2 = ADD v8f0(0x20) v8ca
0x8f6: v8f6(0x40) = CONST 
0x8f8: v8f8 = MLOAD v8f6(0x40)
0x8fb: v8fb = SUB v8f2 v8f8
0x8fd: REVERT v8f8 v8fb
----------------------------------

Begin block 0x8fe
prev = {'0x886'}, next = {'0x90c', '0x908'}
----------------------------------
Block 0x8fe
0x8ff: v8ff(0x0) = CONST 
0x902: v902 = EQ v35f v8ff(0x0)
0x903: v903 = ISZERO v902
0x904: v904(0x90c) = CONST 
0x907: JUMPI v904(0x90c) v903
----------------------------------

Begin block 0x908
prev = {'0x8fe'}, next = {}
----------------------------------
Block 0x908
0x908: v908(0x0) = CONST 
0x90b: REVERT v908(0x0) v908(0x0)
----------------------------------

Begin block 0x90c
prev = {'0x8fe'}, next = {'0x921'}
----------------------------------
Block 0x90c
0x90d: v90d(0x921) = CONST 
0x911: v911(0x7) = CONST 
0x913: v913 = SLOAD v911(0x7)
0x914: v914(0x10ce) = CONST 
0x91a: v91a(0xffffffff) = CONST 
0x91f: v91f(0x10ce) = AND v91a(0xffffffff) v914(0x10ce)
0x920: v920_0 = CALLPRIVATE v91f(0x10ce) v35f v913 v90d(0x921)
----------------------------------

Begin block 0x921
prev = {'0x90c'}, next = {'0x36f'}
----------------------------------
Block 0x921
0x922: v922(0x7) = CONST 
0x926: SSTORE v922(0x7) v920_0
0x928: v928(0x1) = CONST 
0x92f: JUMP v344(0x36f)
----------------------------------

Begin block 0x930
prev = {'0x389'}, next = {'0x982', '0x9c8'}
----------------------------------
Block 0x930
0x931: v931(0x60) = CONST 
0x933: v933(0x5) = CONST 
0x936: v936 = SLOAD v933(0x5)
0x937: v937(0x1) = CONST 
0x93a: v93a(0x1) = CONST 
0x93c: v93c = AND v93a(0x1) v936
0x93d: v93d = ISZERO v93c
0x93e: v93e(0x100) = CONST 
0x941: v941 = MUL v93e(0x100) v93d
0x942: v942 = SUB v941 v937(0x1)
0x943: v943 = AND v942 v936
0x944: v944(0x2) = CONST 
0x947: v947 = DIV v943 v944(0x2)
0x949: v949(0x1f) = CONST 
0x94b: v94b = ADD v949(0x1f) v947
0x94c: v94c(0x20) = CONST 
0x950: v950 = DIV v94b v94c(0x20)
0x951: v951 = MUL v950 v94c(0x20)
0x952: v952(0x20) = CONST 
0x954: v954 = ADD v952(0x20) v951
0x955: v955(0x40) = CONST 
0x957: v957 = MLOAD v955(0x40)
0x95a: v95a = ADD v957 v954
0x95b: v95b(0x40) = CONST 
0x95d: MSTORE v95b(0x40) v95a
0x964: MSTORE v957 v947
0x965: v965(0x20) = CONST 
0x967: v967 = ADD v965(0x20) v957
0x96a: v96a = SLOAD v933(0x5)
0x96b: v96b(0x1) = CONST 
0x96e: v96e(0x1) = CONST 
0x970: v970 = AND v96e(0x1) v96a
0x971: v971 = ISZERO v970
0x972: v972(0x100) = CONST 
0x975: v975 = MUL v972(0x100) v971
0x976: v976 = SUB v975 v96b(0x1)
0x977: v977 = AND v976 v96a
0x978: v978(0x2) = CONST 
0x97b: v97b = DIV v977 v978(0x2)
0x97d: v97d = ISZERO v97b
0x97e: v97e(0x9c8) = CONST 
0x981: JUMPI v97e(0x9c8) v97d
----------------------------------

Begin block 0x982
prev = {'0x930'}, next = {'0x98a', '0x99d'}
----------------------------------
Block 0x982
0x983: v983(0x1f) = CONST 
0x985: v985 = LT v983(0x1f) v97b
0x986: v986(0x99d) = CONST 
0x989: JUMPI v986(0x99d) v985
----------------------------------

Begin block 0x98a
prev = {'0x982'}, next = {'0x9c8'}
----------------------------------
Block 0x98a
0x98a: v98a(0x100) = CONST 
0x98f: v98f = SLOAD v933(0x5)
0x990: v990 = DIV v98f v98a(0x100)
0x991: v991 = MUL v990 v98a(0x100)
0x993: MSTORE v967 v991
0x995: v995(0x20) = CONST 
0x997: v997 = ADD v995(0x20) v967
0x999: v999(0x9c8) = CONST 
0x99c: JUMP v999(0x9c8)
----------------------------------

Begin block 0x99d
prev = {'0x982'}, next = {'0x9ab'}
----------------------------------
Block 0x99d
0x99f: v99f = ADD v967 v97b
0x9a2: v9a2(0x0) = CONST 
0x9a4: MSTORE v9a2(0x0) v933(0x5)
0x9a5: v9a5(0x20) = CONST 
0x9a7: v9a7(0x0) = CONST 
0x9a9: v9a9 = SHA3 v9a7(0x0) v9a5(0x20)
----------------------------------

Begin block 0x9ab
prev = {'0x9ab', '0x99d'}, next = {'0x9ab', '0x9bf'}
----------------------------------
Block 0x9ab
0x9ab_0x0: v9ab_0 = PHI v967 v9b7
0x9ab_0x1: v9ab_1 = PHI v9a9 v9b3
0x9ad: v9ad = SLOAD v9ab_1
0x9af: MSTORE v9ab_0 v9ad
0x9b1: v9b1(0x1) = CONST 
0x9b3: v9b3 = ADD v9b1(0x1) v9ab_1
0x9b5: v9b5(0x20) = CONST 
0x9b7: v9b7 = ADD v9b5(0x20) v9ab_0
0x9ba: v9ba = GT v99f v9b7
0x9bb: v9bb(0x9ab) = CONST 
0x9be: JUMPI v9bb(0x9ab) v9ba
----------------------------------

Begin block 0x9bf
prev = {'0x9ab'}, next = {'0x9c8'}
----------------------------------
Block 0x9bf
0x9c1: v9c1 = SUB v9b7 v99f
0x9c2: v9c2(0x1f) = CONST 
0x9c4: v9c4 = AND v9c2(0x1f) v9c1
0x9c6: v9c6 = ADD v99f v9c4
----------------------------------

Begin block 0x9c8
prev = {'0x930', '0x98a', '0x9bf'}, next = {'0x391'}
----------------------------------
Block 0x9c8
0x9d1: JUMP v38a(0x391)
----------------------------------

Begin block 0x9d2
prev = {'0x40c'}, next = {'0x414'}
----------------------------------
Block 0x9d2
0x9d3: v9d3(0x0) = CONST 
0x9d5: v9d5(0x7) = CONST 
0x9d7: v9d7 = SLOAD v9d5(0x7)
0x9db: JUMP v40d(0x414)
----------------------------------

Begin block 0x9dc
prev = {'0x440'}, next = {'0x9e9'}
----------------------------------
Block 0x9dc
0x9dd: v9dd(0x0) = CONST 
0x9df: v9df(0xa9f) = CONST 
0x9e2: v9e2(0x9e9) = CONST 
0x9e5: v9e5(0xb4e) = CONST 
0x9e8: v9e8_0 = CALLPRIVATE v9e5(0xb4e) v9e2(0x9e9)
----------------------------------

Begin block 0x9e9
prev = {'0x9dc'}, next = {'0xa13'}
----------------------------------
Block 0x9e9
0x9eb: v9eb(0xa9a) = CONST 
0x9ef: v9ef(0x40) = CONST 
0x9f1: v9f1 = MLOAD v9ef(0x40)
0x9f3: v9f3(0x60) = CONST 
0x9f5: v9f5 = ADD v9f3(0x60) v9f1
0x9f6: v9f6(0x40) = CONST 
0x9f8: MSTORE v9f6(0x40) v9f5
0x9fa: v9fa(0x25) = CONST 
0x9fd: MSTORE v9f1 v9fa(0x25)
0x9fe: v9fe(0x20) = CONST 
0xa00: va00 = ADD v9fe(0x20) v9f1
0xa01: va01(0x1238) = CONST 
0xa04: va04(0x25) = CONST 
0xa07: CODECOPY va00 va01(0x1238) va04(0x25)
0xa08: va08(0x2) = CONST 
0xa0a: va0a(0x0) = CONST 
0xa0c: va0c(0xa13) = CONST 
0xa0f: va0f(0xb4e) = CONST 
0xa12: va12_0 = CALLPRIVATE va0f(0xb4e) va0c(0xa13)
----------------------------------

Begin block 0xa13
prev = {'0x9e9'}, next = {'0xa9a'}
----------------------------------
Block 0xa13
0xa14: va14(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa29: va29 = AND va14(0xffffffffffffffffffffffffffffffffffffffff) va12_0
0xa2a: va2a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa3f: va3f = AND va2a(0xffffffffffffffffffffffffffffffffffffffff) va29
0xa41: MSTORE va0a(0x0) va3f
0xa42: va42(0x20) = CONST 
0xa44: va44 = ADD va42(0x20) va0a(0x0)
0xa47: MSTORE va44 va08(0x2)
0xa48: va48(0x20) = CONST 
0xa4a: va4a = ADD va48(0x20) va44
0xa4b: va4b(0x0) = CONST 
0xa4d: va4d = SHA3 va4b(0x0) va4a
0xa4e: va4e(0x0) = CONST 
0xa51: va51(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa66: va66 = AND va51(0xffffffffffffffffffffffffffffffffffffffff) v45c
0xa67: va67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7c: va7c = AND va67(0xffffffffffffffffffffffffffffffffffffffff) va66
0xa7e: MSTORE va4e(0x0) va7c
0xa7f: va7f(0x20) = CONST 
0xa81: va81(0x20) = ADD va7f(0x20) va4e(0x0)
0xa84: MSTORE va81(0x20) va4d
0xa85: va85(0x20) = CONST 
0xa87: va87(0x40) = ADD va85(0x20) va81(0x20)
0xa88: va88(0x0) = CONST 
0xa8a: va8a = SHA3 va88(0x0) va87(0x40)
0xa8b: va8b = SLOAD va8a
0xa8c: va8c(0x100e) = CONST 
0xa93: va93(0xffffffff) = CONST 
0xa98: va98(0x100e) = AND va93(0xffffffff) va8c(0x100e)
0xa99: va99_0 = CALLPRIVATE va98(0x100e) v9f1 v466 va8b v9eb(0xa9a)
----------------------------------

Begin block 0xa9a
prev = {'0xa13'}, next = {'0xa9f'}
----------------------------------
Block 0xa9a
0xa9b: va9b(0xb56) = CONST 
0xa9e: CALLPRIVATE va9b(0xb56) va99_0 v45c v9e8_0 v9df(0xa9f)
----------------------------------

Begin block 0xa9f
prev = {'0xa9a'}, next = {'0x476'}
----------------------------------
Block 0xa9f
0xaa0: vaa0(0x1) = CONST 
0xaa8: JUMP v42b(0x476)
----------------------------------

Begin block 0xaa9
prev = {'0x4a6'}, next = {'0xab6'}
----------------------------------
Block 0xaa9
0xaaa: vaaa(0x0) = CONST 
0xaac: vaac(0xabd) = CONST 
0xaaf: vaaf(0xab6) = CONST 
0xab2: vab2(0xb4e) = CONST 
0xab5: vab5_0 = CALLPRIVATE vab2(0xb4e) vaaf(0xab6)
----------------------------------

Begin block 0xab6
prev = {'0xaa9'}, next = {'0xabd'}
----------------------------------
Block 0xab6
0xab9: vab9(0xd4d) = CONST 
0xabc: CALLPRIVATE vab9(0xd4d) v4cc v4c2 vab5_0 vaac(0xabd)
----------------------------------

Begin block 0xabd
prev = {'0xab6'}, next = {'0x4dc'}
----------------------------------
Block 0xabd
0xabe: vabe(0x1) = CONST 
0xac6: JUMP v491(0x4dc)
----------------------------------

Begin block 0xac7
prev = {'0x50c'}, next = {'0x558'}
----------------------------------
Block 0xac7
0xac8: vac8(0x0) = CONST 
0xaca: vaca(0x2) = CONST 
0xacc: vacc(0x0) = CONST 
0xacf: vacf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xae4: vae4 = AND vacf(0xffffffffffffffffffffffffffffffffffffffff) v528
0xae5: vae5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xafa: vafa = AND vae5(0xffffffffffffffffffffffffffffffffffffffff) vae4
0xafc: MSTORE vacc(0x0) vafa
0xafd: vafd(0x20) = CONST 
0xaff: vaff(0x20) = ADD vafd(0x20) vacc(0x0)
0xb02: MSTORE vaff(0x20) vaca(0x2)
0xb03: vb03(0x20) = CONST 
0xb05: vb05(0x40) = ADD vb03(0x20) vaff(0x20)
0xb06: vb06(0x0) = CONST 
0xb08: vb08 = SHA3 vb06(0x0) vb05(0x40)
0xb09: vb09(0x0) = CONST 
0xb0c: vb0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb21: vb21 = AND vb0c(0xffffffffffffffffffffffffffffffffffffffff) v548
0xb22: vb22(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb37: vb37 = AND vb22(0xffffffffffffffffffffffffffffffffffffffff) vb21
0xb39: MSTORE vb09(0x0) vb37
0xb3a: vb3a(0x20) = CONST 
0xb3c: vb3c(0x20) = ADD vb3a(0x20) vb09(0x0)
0xb3f: MSTORE vb3c(0x20) vb08
0xb40: vb40(0x20) = CONST 
0xb42: vb42(0x40) = ADD vb40(0x20) vb3c(0x20)
0xb43: vb43(0x0) = CONST 
0xb45: vb45 = SHA3 vb43(0x0) vb42(0x40)
0xb46: vb46 = SLOAD vb45
0xb4d: JUMP v4f7(0x558)
----------------------------------

Begin block 0xb4e
prev = {}, next = {}
----------------------------------
function 0xb4e(vb4earg0)
Block 0xb4e
0xb4f: vb4f(0x0) = CONST 
0xb51: vb51 = CALLER 
0xb55: RETURNPRIVATE vb4earg0 vb51
----------------------------------

Begin block 0xb56
prev = {}, next = {'0xb8c', '0xbdc'}
----------------------------------
function 0xb56(vb56arg0, vb56arg1, vb56arg2, vb56arg3)
Block 0xb56
0xb57: vb57(0x0) = CONST 
0xb59: vb59(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb6e: vb6e(0x0) = AND vb59(0xffffffffffffffffffffffffffffffffffffffff) vb57(0x0)
0xb70: vb70(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb85: vb85 = AND vb70(0xffffffffffffffffffffffffffffffffffffffff) vb56arg2
0xb86: vb86 = EQ vb85 vb6e(0x0)
0xb87: vb87 = ISZERO vb86
0xb88: vb88(0xbdc) = CONST 
0xb8b: JUMPI vb88(0xbdc) vb87
----------------------------------

Begin block 0xb8c
prev = {'0xb56'}, next = {}
----------------------------------
Block 0xb8c
0xb8c: vb8c(0x40) = CONST 
0xb8e: vb8e = MLOAD vb8c(0x40)
0xb8f: vb8f(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xbb1: MSTORE vb8e vb8f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xbb2: vbb2(0x4) = CONST 
0xbb4: vbb4 = ADD vbb2(0x4) vb8e
0xbb7: vbb7(0x20) = CONST 
0xbb9: vbb9 = ADD vbb7(0x20) vbb4
0xbbc: vbbc = SUB vbb9 vbb4
0xbbe: MSTORE vbb4 vbbc
0xbbf: vbbf(0x24) = CONST 
0xbc2: MSTORE vbb9 vbbf(0x24)
0xbc3: vbc3(0x20) = CONST 
0xbc5: vbc5 = ADD vbc3(0x20) vbb9
0xbc7: vbc7(0x1214) = CONST 
0xbca: vbca(0x24) = CONST 
0xbcd: CODECOPY vbc5 vbc7(0x1214) vbca(0x24)
0xbce: vbce(0x40) = CONST 
0xbd0: vbd0 = ADD vbce(0x40) vbc5
0xbd4: vbd4(0x40) = CONST 
0xbd6: vbd6 = MLOAD vbd4(0x40)
0xbd9: vbd9 = SUB vbd0 vbd6
0xbdb: REVERT vbd6 vbd9
----------------------------------

Begin block 0xbdc
prev = {'0xb56'}, next = {'0xc12', '0xc62'}
----------------------------------
Block 0xbdc
0xbdd: vbdd(0x0) = CONST 
0xbdf: vbdf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf4: vbf4(0x0) = AND vbdf(0xffffffffffffffffffffffffffffffffffffffff) vbdd(0x0)
0xbf6: vbf6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0b: vc0b = AND vbf6(0xffffffffffffffffffffffffffffffffffffffff) vb56arg1
0xc0c: vc0c = EQ vc0b vbf4(0x0)
0xc0d: vc0d = ISZERO vc0c
0xc0e: vc0e(0xc62) = CONST 
0xc11: JUMPI vc0e(0xc62) vc0d
----------------------------------

Begin block 0xc12
prev = {'0xbdc'}, next = {}
----------------------------------
Block 0xc12
0xc12: vc12(0x40) = CONST 
0xc14: vc14 = MLOAD vc12(0x40)
0xc15: vc15(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xc37: MSTORE vc14 vc15(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xc38: vc38(0x4) = CONST 
0xc3a: vc3a = ADD vc38(0x4) vc14
0xc3d: vc3d(0x20) = CONST 
0xc3f: vc3f = ADD vc3d(0x20) vc3a
0xc42: vc42 = SUB vc3f vc3a
0xc44: MSTORE vc3a vc42
0xc45: vc45(0x22) = CONST 
0xc48: MSTORE vc3f vc45(0x22)
0xc49: vc49(0x20) = CONST 
0xc4b: vc4b = ADD vc49(0x20) vc3f
0xc4d: vc4d(0x117f) = CONST 
0xc50: vc50(0x22) = CONST 
0xc53: CODECOPY vc4b vc4d(0x117f) vc50(0x22)
0xc54: vc54(0x40) = CONST 
0xc56: vc56 = ADD vc54(0x40) vc4b
0xc5a: vc5a(0x40) = CONST 
0xc5c: vc5c = MLOAD vc5a(0x40)
0xc5f: vc5f = SUB vc56 vc5c
0xc61: REVERT vc5c vc5f
----------------------------------

Begin block 0xc62
prev = {'0xbdc'}, next = {}
----------------------------------
Block 0xc62
0xc64: vc64(0x2) = CONST 
0xc66: vc66(0x0) = CONST 
0xc69: vc69(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc7e: vc7e = AND vc69(0xffffffffffffffffffffffffffffffffffffffff) vb56arg2
0xc7f: vc7f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc94: vc94 = AND vc7f(0xffffffffffffffffffffffffffffffffffffffff) vc7e
0xc96: MSTORE vc66(0x0) vc94
0xc97: vc97(0x20) = CONST 
0xc99: vc99(0x20) = ADD vc97(0x20) vc66(0x0)
0xc9c: MSTORE vc99(0x20) vc64(0x2)
0xc9d: vc9d(0x20) = CONST 
0xc9f: vc9f(0x40) = ADD vc9d(0x20) vc99(0x20)
0xca0: vca0(0x0) = CONST 
0xca2: vca2 = SHA3 vca0(0x0) vc9f(0x40)
0xca3: vca3(0x0) = CONST 
0xca6: vca6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcbb: vcbb = AND vca6(0xffffffffffffffffffffffffffffffffffffffff) vb56arg1
0xcbc: vcbc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcd1: vcd1 = AND vcbc(0xffffffffffffffffffffffffffffffffffffffff) vcbb
0xcd3: MSTORE vca3(0x0) vcd1
0xcd4: vcd4(0x20) = CONST 
0xcd6: vcd6(0x20) = ADD vcd4(0x20) vca3(0x0)
0xcd9: MSTORE vcd6(0x20) vca2
0xcda: vcda(0x20) = CONST 
0xcdc: vcdc(0x40) = ADD vcda(0x20) vcd6(0x20)
0xcdd: vcdd(0x0) = CONST 
0xcdf: vcdf = SHA3 vcdd(0x0) vcdc(0x40)
0xce2: SSTORE vcdf vb56arg0
0xce5: vce5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcfa: vcfa = AND vce5(0xffffffffffffffffffffffffffffffffffffffff) vb56arg1
0xcfc: vcfc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd11: vd11 = AND vcfc(0xffffffffffffffffffffffffffffffffffffffff) vb56arg2
0xd12: vd12(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xd34: vd34(0x40) = CONST 
0xd36: vd36 = MLOAD vd34(0x40)
0xd3a: MSTORE vd36 vb56arg0
0xd3b: vd3b(0x20) = CONST 
0xd3d: vd3d = ADD vd3b(0x20) vd36
0xd41: vd41(0x40) = CONST 
0xd43: vd43 = MLOAD vd41(0x40)
0xd46: vd46 = SUB vd3d vd43
0xd48: LOG3 vd43 vd46 vd12(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) vd11 vcfa
0xd4c: RETURNPRIVATE vb56arg3
----------------------------------

Begin block 0xd4d
prev = {}, next = {'0xd83', '0xdd3'}
----------------------------------
function 0xd4d(vd4darg0, vd4darg1, vd4darg2, vd4darg3)
Block 0xd4d
0xd4e: vd4e(0x0) = CONST 
0xd50: vd50(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd65: vd65(0x0) = AND vd50(0xffffffffffffffffffffffffffffffffffffffff) vd4e(0x0)
0xd67: vd67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd7c: vd7c = AND vd67(0xffffffffffffffffffffffffffffffffffffffff) vd4darg2
0xd7d: vd7d = EQ vd7c vd65(0x0)
0xd7e: vd7e = ISZERO vd7d
0xd7f: vd7f(0xdd3) = CONST 
0xd82: JUMPI vd7f(0xdd3) vd7e
----------------------------------

Begin block 0xd83
prev = {'0xd4d'}, next = {}
----------------------------------
Block 0xd83
0xd83: vd83(0x40) = CONST 
0xd85: vd85 = MLOAD vd83(0x40)
0xd86: vd86(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xda8: MSTORE vd85 vd86(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xda9: vda9(0x4) = CONST 
0xdab: vdab = ADD vda9(0x4) vd85
0xdae: vdae(0x20) = CONST 
0xdb0: vdb0 = ADD vdae(0x20) vdab
0xdb3: vdb3 = SUB vdb0 vdab
0xdb5: MSTORE vdab vdb3
0xdb6: vdb6(0x25) = CONST 
0xdb9: MSTORE vdb0 vdb6(0x25)
0xdba: vdba(0x20) = CONST 
0xdbc: vdbc = ADD vdba(0x20) vdb0
0xdbe: vdbe(0x11ef) = CONST 
0xdc1: vdc1(0x25) = CONST 
0xdc4: CODECOPY vdbc vdbe(0x11ef) vdc1(0x25)
0xdc5: vdc5(0x40) = CONST 
0xdc7: vdc7 = ADD vdc5(0x40) vdbc
0xdcb: vdcb(0x40) = CONST 
0xdcd: vdcd = MLOAD vdcb(0x40)
0xdd0: vdd0 = SUB vdc7 vdcd
0xdd2: REVERT vdcd vdd0
----------------------------------

Begin block 0xdd3
prev = {'0xd4d'}, next = {'0xe59', '0xe09'}
----------------------------------
Block 0xdd3
0xdd4: vdd4(0x0) = CONST 
0xdd6: vdd6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdeb: vdeb(0x0) = AND vdd6(0xffffffffffffffffffffffffffffffffffffffff) vdd4(0x0)
0xded: vded(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe02: ve02 = AND vded(0xffffffffffffffffffffffffffffffffffffffff) vd4darg1
0xe03: ve03 = EQ ve02 vdeb(0x0)
0xe04: ve04 = ISZERO ve03
0xe05: ve05(0xe59) = CONST 
0xe08: JUMPI ve05(0xe59) ve04
----------------------------------

Begin block 0xe09
prev = {'0xdd3'}, next = {}
----------------------------------
Block 0xe09
0xe09: ve09(0x40) = CONST 
0xe0b: ve0b = MLOAD ve09(0x40)
0xe0c: ve0c(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xe2e: MSTORE ve0b ve0c(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe2f: ve2f(0x4) = CONST 
0xe31: ve31 = ADD ve2f(0x4) ve0b
0xe34: ve34(0x20) = CONST 
0xe36: ve36 = ADD ve34(0x20) ve31
0xe39: ve39 = SUB ve36 ve31
0xe3b: MSTORE ve31 ve39
0xe3c: ve3c(0x23) = CONST 
0xe3f: MSTORE ve36 ve3c(0x23)
0xe40: ve40(0x20) = CONST 
0xe42: ve42 = ADD ve40(0x20) ve36
0xe44: ve44(0x115c) = CONST 
0xe47: ve47(0x23) = CONST 
0xe4a: CODECOPY ve42 ve44(0x115c) ve47(0x23)
0xe4b: ve4b(0x40) = CONST 
0xe4d: ve4d = ADD ve4b(0x40) ve42
0xe51: ve51(0x40) = CONST 
0xe53: ve53 = MLOAD ve51(0x40)
0xe56: ve56 = SUB ve4d ve53
0xe58: REVERT ve53 ve56
----------------------------------

Begin block 0xe59
prev = {'0xdd3'}, next = {'0x1156'}
----------------------------------
Block 0xe59
0xe5a: ve5a(0xe64) = CONST 
0xe60: ve60(0x1156) = CONST 
0xe63: JUMP ve60(0x1156)
----------------------------------

Begin block 0xe64
prev = {'0x1156'}, next = {'0xecf'}
----------------------------------
Block 0xe64
0xe65: ve65(0xecf) = CONST 
0xe69: ve69(0x40) = CONST 
0xe6b: ve6b = MLOAD ve69(0x40)
0xe6d: ve6d(0x60) = CONST 
0xe6f: ve6f = ADD ve6d(0x60) ve6b
0xe70: ve70(0x40) = CONST 
0xe72: MSTORE ve70(0x40) ve6f
0xe74: ve74(0x26) = CONST 
0xe77: MSTORE ve6b ve74(0x26)
0xe78: ve78(0x20) = CONST 
0xe7a: ve7a = ADD ve78(0x20) ve6b
0xe7b: ve7b(0x11a1) = CONST 
0xe7e: ve7e(0x26) = CONST 
0xe81: CODECOPY ve7a ve7b(0x11a1) ve7e(0x26)
0xe82: ve82(0x0) = CONST 
0xe86: ve86(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe9b: ve9b = AND ve86(0xffffffffffffffffffffffffffffffffffffffff) vd4darg2
0xe9c: ve9c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeb1: veb1 = AND ve9c(0xffffffffffffffffffffffffffffffffffffffff) ve9b
0xeb3: MSTORE ve82(0x0) veb1
0xeb4: veb4(0x20) = CONST 
0xeb6: veb6(0x20) = ADD veb4(0x20) ve82(0x0)
0xeb9: MSTORE veb6(0x20) ve82(0x0)
0xeba: veba(0x20) = CONST 
0xebc: vebc(0x40) = ADD veba(0x20) veb6(0x20)
0xebd: vebd(0x0) = CONST 
0xebf: vebf = SHA3 vebd(0x0) vebc(0x40)
0xec0: vec0 = SLOAD vebf
0xec1: vec1(0x100e) = CONST 
0xec8: vec8(0xffffffff) = CONST 
0xecd: vecd(0x100e) = AND vec8(0xffffffff) vec1(0x100e)
0xece: vece_0 = CALLPRIVATE vecd(0x100e) ve6b vd4darg0 vec0 ve65(0xecf)
----------------------------------

Begin block 0xecf
prev = {'0xe64'}, next = {'0xf62'}
----------------------------------
Block 0xecf
0xed0: ved0(0x0) = CONST 
0xed4: ved4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xee9: vee9 = AND ved4(0xffffffffffffffffffffffffffffffffffffffff) vd4darg2
0xeea: veea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeff: veff = AND veea(0xffffffffffffffffffffffffffffffffffffffff) vee9
0xf01: MSTORE ved0(0x0) veff
0xf02: vf02(0x20) = CONST 
0xf04: vf04(0x20) = ADD vf02(0x20) ved0(0x0)
0xf07: MSTORE vf04(0x20) ved0(0x0)
0xf08: vf08(0x20) = CONST 
0xf0a: vf0a(0x40) = ADD vf08(0x20) vf04(0x20)
0xf0b: vf0b(0x0) = CONST 
0xf0d: vf0d = SHA3 vf0b(0x0) vf0a(0x40)
0xf10: SSTORE vf0d vece_0
0xf12: vf12(0xf62) = CONST 
0xf16: vf16(0x0) = CONST 
0xf1a: vf1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2f: vf2f = AND vf1a(0xffffffffffffffffffffffffffffffffffffffff) vd4darg1
0xf30: vf30(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf45: vf45 = AND vf30(0xffffffffffffffffffffffffffffffffffffffff) vf2f
0xf47: MSTORE vf16(0x0) vf45
0xf48: vf48(0x20) = CONST 
0xf4a: vf4a(0x20) = ADD vf48(0x20) vf16(0x0)
0xf4d: MSTORE vf4a(0x20) vf16(0x0)
0xf4e: vf4e(0x20) = CONST 
0xf50: vf50(0x40) = ADD vf4e(0x20) vf4a(0x20)
0xf51: vf51(0x0) = CONST 
0xf53: vf53 = SHA3 vf51(0x0) vf50(0x40)
0xf54: vf54 = SLOAD vf53
0xf55: vf55(0x10ce) = CONST 
0xf5b: vf5b(0xffffffff) = CONST 
0xf60: vf60(0x10ce) = AND vf5b(0xffffffff) vf55(0x10ce)
0xf61: vf61_0 = CALLPRIVATE vf60(0x10ce) vd4darg0 vf54 vf12(0xf62)
----------------------------------

Begin block 0xf62
prev = {'0xecf'}, next = {}
----------------------------------
Block 0xf62
0xf63: vf63(0x0) = CONST 
0xf67: vf67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf7c: vf7c = AND vf67(0xffffffffffffffffffffffffffffffffffffffff) vd4darg1
0xf7d: vf7d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf92: vf92 = AND vf7d(0xffffffffffffffffffffffffffffffffffffffff) vf7c
0xf94: MSTORE vf63(0x0) vf92
0xf95: vf95(0x20) = CONST 
0xf97: vf97(0x20) = ADD vf95(0x20) vf63(0x0)
0xf9a: MSTORE vf97(0x20) vf63(0x0)
0xf9b: vf9b(0x20) = CONST 
0xf9d: vf9d(0x40) = ADD vf9b(0x20) vf97(0x20)
0xf9e: vf9e(0x0) = CONST 
0xfa0: vfa0 = SHA3 vf9e(0x0) vf9d(0x40)
0xfa3: SSTORE vfa0 vf61_0
0xfa6: vfa6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfbb: vfbb = AND vfa6(0xffffffffffffffffffffffffffffffffffffffff) vd4darg1
0xfbd: vfbd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfd2: vfd2 = AND vfbd(0xffffffffffffffffffffffffffffffffffffffff) vd4darg2
0xfd3: vfd3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xff5: vff5(0x40) = CONST 
0xff7: vff7 = MLOAD vff5(0x40)
0xffb: MSTORE vff7 vd4darg0
0xffc: vffc(0x20) = CONST 
0xffe: vffe = ADD vffc(0x20) vff7
0x1002: v1002(0x40) = CONST 
0x1004: v1004 = MLOAD v1002(0x40)
0x1007: v1007 = SUB vffe v1004
0x1009: LOG3 v1004 v1007 vfd3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vfd2 vfbb
0x100d: RETURNPRIVATE vd4darg3
----------------------------------

Begin block 0x100e
prev = {}, next = {'0x101b', '0x10bb'}
----------------------------------
function 0x100e(v100earg0, v100earg1, v100earg2, v100earg3)
Block 0x100e
0x100f: v100f(0x0) = CONST 
0x1013: v1013 = GT v100earg1 v100earg2
0x1014: v1014 = ISZERO v1013
0x1017: v1017(0x10bb) = CONST 
0x101a: JUMPI v1017(0x10bb) v1014
----------------------------------

Begin block 0x101b
prev = {'0x100e'}, next = {'0x1065'}
----------------------------------
Block 0x101b
0x101b: v101b(0x40) = CONST 
0x101d: v101d = MLOAD v101b(0x40)
0x101e: v101e(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x1040: MSTORE v101d v101e(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1041: v1041(0x4) = CONST 
0x1043: v1043 = ADD v1041(0x4) v101d
0x1046: v1046(0x20) = CONST 
0x1048: v1048 = ADD v1046(0x20) v1043
0x104b: v104b = SUB v1048 v1043
0x104d: MSTORE v1043 v104b
0x1051: v1051 = MLOAD v100earg0
0x1053: MSTORE v1048 v1051
0x1054: v1054(0x20) = CONST 
0x1056: v1056 = ADD v1054(0x20) v1048
0x105a: v105a = MLOAD v100earg0
0x105c: v105c(0x20) = CONST 
0x105e: v105e = ADD v105c(0x20) v100earg0
0x1063: v1063(0x0) = CONST 
----------------------------------

Begin block 0x1065
prev = {'0x101b', '0x106e'}, next = {'0x1080', '0x106e'}
----------------------------------
Block 0x1065
0x1065_0x0: v1065_0 = PHI v1063(0x0) v1079
0x1068: v1068 = LT v1065_0 v105a
0x1069: v1069 = ISZERO v1068
0x106a: v106a(0x1080) = CONST 
0x106d: JUMPI v106a(0x1080) v1069
----------------------------------

Begin block 0x106e
prev = {'0x1065'}, next = {'0x1065'}
----------------------------------
Block 0x106e
0x106e_0x0: v106e_0 = PHI v1063(0x0) v1079
0x1070: v1070 = ADD v105e v106e_0
0x1071: v1071 = MLOAD v1070
0x1074: v1074 = ADD v1056 v106e_0
0x1075: MSTORE v1074 v1071
0x1076: v1076(0x20) = CONST 
0x1079: v1079 = ADD v106e_0 v1076(0x20)
0x107c: v107c(0x1065) = CONST 
0x107f: JUMP v107c(0x1065)
----------------------------------

Begin block 0x1080
prev = {'0x1065'}, next = {'0x1094', '0x10ad'}
----------------------------------
Block 0x1080
0x1089: v1089 = ADD v105a v1056
0x108b: v108b(0x1f) = CONST 
0x108d: v108d = AND v108b(0x1f) v105a
0x108f: v108f = ISZERO v108d
0x1090: v1090(0x10ad) = CONST 
0x1093: JUMPI v1090(0x10ad) v108f
----------------------------------

Begin block 0x1094
prev = {'0x1080'}, next = {'0x10ad'}
----------------------------------
Block 0x1094
0x1096: v1096 = SUB v1089 v108d
0x1098: v1098 = MLOAD v1096
0x1099: v1099(0x1) = CONST 
0x109c: v109c(0x20) = CONST 
0x109e: v109e = SUB v109c(0x20) v108d
0x109f: v109f(0x100) = CONST 
0x10a2: v10a2 = EXP v109f(0x100) v109e
0x10a3: v10a3 = SUB v10a2 v1099(0x1)
0x10a4: v10a4 = NOT v10a3
0x10a5: v10a5 = AND v10a4 v1098
0x10a7: MSTORE v1096 v10a5
0x10a8: v10a8(0x20) = CONST 
0x10aa: v10aa = ADD v10a8(0x20) v1096
----------------------------------

Begin block 0x10ad
prev = {'0x1080', '0x1094'}, next = {}
----------------------------------
Block 0x10ad
0x10ad_0x1: v10ad_1 = PHI v1089 v10aa
0x10b3: v10b3(0x40) = CONST 
0x10b5: v10b5 = MLOAD v10b3(0x40)
0x10b8: v10b8 = SUB v10ad_1 v10b5
0x10ba: REVERT v10b5 v10b8
----------------------------------

Begin block 0x10bb
prev = {'0x100e'}, next = {}
----------------------------------
Block 0x10bb
0x10bd: v10bd(0x0) = CONST 
0x10c1: v10c1 = SUB v100earg2 v100earg1
0x10cd: RETURNPRIVATE v100earg3 v10c1
----------------------------------

Begin block 0x10ce
prev = {}, next = {'0x114c', '0x10df'}
----------------------------------
function 0x10ce(v10cearg0, v10cearg1, v10cearg2)
Block 0x10ce
0x10cf: v10cf(0x0) = CONST 
0x10d4: v10d4 = ADD v10cearg1 v10cearg0
0x10d9: v10d9 = LT v10d4 v10cearg1
0x10da: v10da = ISZERO v10d9
0x10db: v10db(0x114c) = CONST 
0x10de: JUMPI v10db(0x114c) v10da
----------------------------------

Begin block 0x10df
prev = {'0x10ce'}, next = {}
----------------------------------
Block 0x10df
0x10df: v10df(0x40) = CONST 
0x10e1: v10e1 = MLOAD v10df(0x40)
0x10e2: v10e2(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x1104: MSTORE v10e1 v10e2(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1105: v1105(0x4) = CONST 
0x1107: v1107 = ADD v1105(0x4) v10e1
0x110a: v110a(0x20) = CONST 
0x110c: v110c = ADD v110a(0x20) v1107
0x110f: v110f = SUB v110c v1107
0x1111: MSTORE v1107 v110f
0x1112: v1112(0x1b) = CONST 
0x1115: MSTORE v110c v1112(0x1b)
0x1116: v1116(0x20) = CONST 
0x1118: v1118 = ADD v1116(0x20) v110c
0x111a: v111a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
0x113c: MSTORE v1118 v111a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
0x113e: v113e(0x20) = CONST 
0x1140: v1140 = ADD v113e(0x20) v1118
0x1144: v1144(0x40) = CONST 
0x1146: v1146 = MLOAD v1144(0x40)
0x1149: v1149 = SUB v1140 v1146
0x114b: REVERT v1146 v1149
----------------------------------

Begin block 0x114c
prev = {'0x10ce'}, next = {}
----------------------------------
Block 0x114c
0x1155: RETURNPRIVATE v10cearg2 v10d4
----------------------------------

Begin block 0x1156
prev = {'0xe59'}, next = {'0xe64'}
----------------------------------
Block 0x1156
0x115a: JUMP ve5a(0xe64)
----------------------------------

Begin block 0x12ae
prev = {'0xc4', '0x10'}, next = {'0xcf0x0'}
----------------------------------
Block 0x12ae
0x12af: v12af(0xcf) = CONST 
0x12b0: CALLPRIVATE v12af(0xcf)
----------------------------------

Begin block 0x12b1
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x12b1
0x12b2: v12b2(0xd4) = CONST 
0x12b3: CALLPRIVATE v12b2(0xd4)
----------------------------------

Begin block 0x12b4
prev = {'0x98'}, next = {}
----------------------------------
Block 0x12b4
0x12b5: v12b5(0x157) = CONST 
0x12b6: CALLPRIVATE v12b5(0x157)
----------------------------------

Begin block 0x12b7
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x12b7
0x12b8: v12b8(0x1bd) = CONST 
0x12b9: CALLPRIVATE v12b8(0x1bd)
----------------------------------

Begin block 0x12ba
prev = {'0xae'}, next = {}
----------------------------------
Block 0x12ba
0x12bb: v12bb(0x1db) = CONST 
0x12bc: CALLPRIVATE v12bb(0x1db)
----------------------------------

Begin block 0x12bd
prev = {'0xb9'}, next = {}
----------------------------------
Block 0x12bd
0x12be: v12be(0x261) = CONST 
0x12bf: CALLPRIVATE v12be(0x261)
----------------------------------

Begin block 0x12c0
prev = {'0xc4'}, next = {}
----------------------------------
Block 0x12c0
0x12c1: v12c1(0x285) = CONST 
0x12c2: CALLPRIVATE v12c1(0x285)
----------------------------------

Begin block 0x12c3
prev = {'0x66'}, next = {}
----------------------------------
Block 0x12c3
0x12c4: v12c4(0x2eb) = CONST 
0x12c5: CALLPRIVATE v12c4(0x2eb)
----------------------------------

Begin block 0x12c6
prev = {'0x72'}, next = {}
----------------------------------
Block 0x12c6
0x12c7: v12c7(0x343) = CONST 
0x12c8: CALLPRIVATE v12c7(0x343)
----------------------------------

Begin block 0x12c9
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x12c9
0x12ca: v12ca(0x389) = CONST 
0x12cb: CALLPRIVATE v12ca(0x389)
----------------------------------

Begin block 0x12cc
prev = {'0x36'}, next = {}
----------------------------------
Block 0x12cc
0x12cd: v12cd(0x40c) = CONST 
0x12ce: CALLPRIVATE v12cd(0x40c)
----------------------------------

Begin block 0x12cf
prev = {'0x41'}, next = {}
----------------------------------
Block 0x12cf
0x12d0: v12d0(0x42a) = CONST 
0x12d1: CALLPRIVATE v12d0(0x42a)
----------------------------------

Begin block 0x12d2
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x12d2
0x12d3: v12d3(0x490) = CONST 
0x12d4: CALLPRIVATE v12d3(0x490)
----------------------------------

Begin block 0x12d5
prev = {'0x57'}, next = {}
----------------------------------
Block 0x12d5
0x12d6: v12d6(0x4f6) = CONST 
0x12d7: CALLPRIVATE v12d6(0x4f6)
----------------------------------
