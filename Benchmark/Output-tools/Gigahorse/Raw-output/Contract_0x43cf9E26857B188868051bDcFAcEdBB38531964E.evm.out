
Begin block 0x0
prev = {}, next = {'0x10', '0xc'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1a', '0x3227'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0x321d: v321d(0x3227) = CONST 
0x321e: JUMPI v321d(0x3227) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x2b', '0x322a'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x319b84b7) = CONST 
0x26: v26 = EQ v21(0x319b84b7) v1f
0x321f: v321f(0x322a) = CONST 
0x3220: JUMPI v321f(0x322a) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0x36', '0x322d'}
----------------------------------
Block 0x2b
0x2c: v2c(0x8f4ffcb1) = CONST 
0x31: v31 = EQ v2c(0x8f4ffcb1) v1f
0x3221: v3221(0x322d) = CONST 
0x3222: JUMPI v3221(0x322d) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x41', '0x3230'}
----------------------------------
Block 0x36
0x37: v37(0xd92db09f) = CONST 
0x3c: v3c = EQ v37(0xd92db09f) v1f
0x3223: v3223(0x3230) = CONST 
0x3224: JUMPI v3223(0x3230) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0x3233', '0x3227'}
----------------------------------
Block 0x41
0x42: v42(0xfc0c546a) = CONST 
0x47: v47 = EQ v42(0xfc0c546a) v1f
0x3225: v3225(0x3233) = CONST 
0x3226: JUMPI v3225(0x3233) v47
----------------------------------

Begin block 0x4c
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x4c
0x4d: v4d(0x0) = CONST 
0x50: REVERT v4d(0x0) v4d(0x0)
----------------------------------

Begin block 0x51
prev = {}, next = {'0x67', '0x63'}
----------------------------------
function 0x319b84b7()
Block 0x51
0x52: v52(0xe7) = CONST 
0x55: v55(0x4) = CONST 
0x58: v58 = CALLDATASIZE 
0x59: v59 = SUB v58 v55(0x4)
0x5a: v5a(0xe0) = CONST 
0x5d: v5d = LT v59 v5a(0xe0)
0x5e: v5e = ISZERO v5d
0x5f: v5f(0x67) = CONST 
0x62: JUMPI v5f(0x67) v5e
----------------------------------

Begin block 0x63
prev = {'0x51'}, next = {}
----------------------------------
Block 0x63
0x63: v63(0x0) = CONST 
0x66: REVERT v63(0x0) v63(0x0)
----------------------------------

Begin block 0x67
prev = {'0x51'}, next = {'0x2c2'}
----------------------------------
Block 0x67
0x69: v69 = ADD v55(0x4) v59
0x6d: v6d = CALLDATALOAD v55(0x4)
0x6e: v6e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x83: v83 = AND v6e(0xffffffffffffffffffffffffffffffffffffffff) v6d
0x85: v85(0x20) = CONST 
0x87: v87 = ADD v85(0x20) v55(0x4)
0x8d: v8d = CALLDATALOAD v87
0x8f: v8f(0x20) = CONST 
0x91: v91 = ADD v8f(0x20) v87
0x97: v97 = CALLDATALOAD v91
0x99: v99(0x20) = CONST 
0x9b: v9b = ADD v99(0x20) v91
0xa1: va1 = CALLDATALOAD v9b
0xa3: va3(0x20) = CONST 
0xa5: va5 = ADD va3(0x20) v9b
0xab: vab = CALLDATALOAD va5
0xad: vad(0x20) = CONST 
0xaf: vaf = ADD vad(0x20) va5
0xb5: vb5 = CALLDATALOAD vaf
0xb6: vb6 = ISZERO vb5
0xb7: vb7 = ISZERO vb6
0xb9: vb9(0x20) = CONST 
0xbb: vbb = ADD vb9(0x20) vaf
0xc1: vc1 = CALLDATALOAD vbb
0xc2: vc2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd7: vd7 = AND vc2(0xffffffffffffffffffffffffffffffffffffffff) vc1
0xd9: vd9(0x20) = CONST 
0xdb: vdb = ADD vd9(0x20) vbb
0xe3: ve3(0x2c2) = CONST 
0xe6: JUMP ve3(0x2c2)
----------------------------------

Begin block 0xe7
prev = {'0x355'}, next = {}
----------------------------------
Block 0xe7
0xe8: ve8(0x40) = CONST 
0xea: vea = MLOAD ve8(0x40)
0xed: ved(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x102: v102 = AND ved(0xffffffffffffffffffffffffffffffffffffffff) v354_0
0x103: v103(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x118: v118 = AND v103(0xffffffffffffffffffffffffffffffffffffffff) v102
0x11a: MSTORE vea v118
0x11b: v11b(0x20) = CONST 
0x11d: v11d = ADD v11b(0x20) vea
0x121: v121(0x40) = CONST 
0x123: v123 = MLOAD v121(0x40)
0x126: v126 = SUB v11d v123
0x128: RETURN v123 v126
----------------------------------

Begin block 0x129
prev = {}, next = {'0x13b', '0x13f'}
----------------------------------
function receiveApproval(address,uint256,address,bytes)()
Block 0x129
0x12a: v12a(0x22c) = CONST 
0x12d: v12d(0x4) = CONST 
0x130: v130 = CALLDATASIZE 
0x131: v131 = SUB v130 v12d(0x4)
0x132: v132(0x80) = CONST 
0x135: v135 = LT v131 v132(0x80)
0x136: v136 = ISZERO v135
0x137: v137(0x13f) = CONST 
0x13a: JUMPI v137(0x13f) v136
----------------------------------

Begin block 0x13b
prev = {'0x129'}, next = {}
----------------------------------
Block 0x13b
0x13b: v13b(0x0) = CONST 
0x13e: REVERT v13b(0x0) v13b(0x0)
----------------------------------

Begin block 0x13f
prev = {'0x129'}, next = {'0x1a6', '0x1a2'}
----------------------------------
Block 0x13f
0x141: v141 = ADD v12d(0x4) v131
0x145: v145 = CALLDATALOAD v12d(0x4)
0x146: v146(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15b: v15b = AND v146(0xffffffffffffffffffffffffffffffffffffffff) v145
0x15d: v15d(0x20) = CONST 
0x15f: v15f = ADD v15d(0x20) v12d(0x4)
0x165: v165 = CALLDATALOAD v15f
0x167: v167(0x20) = CONST 
0x169: v169 = ADD v167(0x20) v15f
0x16f: v16f = CALLDATALOAD v169
0x170: v170(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x185: v185 = AND v170(0xffffffffffffffffffffffffffffffffffffffff) v16f
0x187: v187(0x20) = CONST 
0x189: v189 = ADD v187(0x20) v169
0x18f: v18f = CALLDATALOAD v189
0x191: v191(0x20) = CONST 
0x193: v193 = ADD v191(0x20) v189
0x195: v195(0x100000000) = CONST 
0x19c: v19c = GT v18f v195(0x100000000)
0x19d: v19d = ISZERO v19c
0x19e: v19e(0x1a6) = CONST 
0x1a1: JUMPI v19e(0x1a6) v19d
----------------------------------

Begin block 0x1a2
prev = {'0x13f'}, next = {}
----------------------------------
Block 0x1a2
0x1a2: v1a2(0x0) = CONST 
0x1a5: REVERT v1a2(0x0) v1a2(0x0)
----------------------------------

Begin block 0x1a6
prev = {'0x13f'}, next = {'0x1b8', '0x1b4'}
----------------------------------
Block 0x1a6
0x1a8: v1a8 = ADD v12d(0x4) v18f
0x1aa: v1aa(0x20) = CONST 
0x1ad: v1ad = ADD v1a8 v1aa(0x20)
0x1ae: v1ae = GT v1ad v141
0x1af: v1af = ISZERO v1ae
0x1b0: v1b0(0x1b8) = CONST 
0x1b3: JUMPI v1b0(0x1b8) v1af
----------------------------------

Begin block 0x1b4
prev = {'0x1a6'}, next = {}
----------------------------------
Block 0x1b4
0x1b4: v1b4(0x0) = CONST 
0x1b7: REVERT v1b4(0x0) v1b4(0x0)
----------------------------------

Begin block 0x1b8
prev = {'0x1a6'}, next = {'0x1da', '0x1d6'}
----------------------------------
Block 0x1b8
0x1ba: v1ba = CALLDATALOAD v1a8
0x1bc: v1bc(0x20) = CONST 
0x1be: v1be = ADD v1bc(0x20) v1a8
0x1c1: v1c1(0x1) = CONST 
0x1c4: v1c4 = MUL v1ba v1c1(0x1)
0x1c6: v1c6 = ADD v1be v1c4
0x1c7: v1c7 = GT v1c6 v141
0x1c8: v1c8(0x100000000) = CONST 
0x1cf: v1cf = GT v1ba v1c8(0x100000000)
0x1d0: v1d0 = OR v1cf v1c7
0x1d1: v1d1 = ISZERO v1d0
0x1d2: v1d2(0x1da) = CONST 
0x1d5: JUMPI v1d2(0x1da) v1d1
----------------------------------

Begin block 0x1d6
prev = {'0x1b8'}, next = {}
----------------------------------
Block 0x1d6
0x1d6: v1d6(0x0) = CONST 
0x1d9: REVERT v1d6(0x0) v1d6(0x0)
----------------------------------

Begin block 0x1da
prev = {'0x1b8'}, next = {'0x363'}
----------------------------------
Block 0x1da
0x1df: v1df(0x1f) = CONST 
0x1e1: v1e1 = ADD v1df(0x1f) v1ba
0x1e2: v1e2(0x20) = CONST 
0x1e6: v1e6 = DIV v1e1 v1e2(0x20)
0x1e7: v1e7 = MUL v1e6 v1e2(0x20)
0x1e8: v1e8(0x20) = CONST 
0x1ea: v1ea = ADD v1e8(0x20) v1e7
0x1eb: v1eb(0x40) = CONST 
0x1ed: v1ed = MLOAD v1eb(0x40)
0x1f0: v1f0 = ADD v1ed v1ea
0x1f1: v1f1(0x40) = CONST 
0x1f3: MSTORE v1f1(0x40) v1f0
0x1fb: MSTORE v1ed v1ba
0x1fc: v1fc(0x20) = CONST 
0x1fe: v1fe = ADD v1fc(0x20) v1ed
0x204: CALLDATACOPY v1fe v1be v1ba
0x205: v205(0x0) = CONST 
0x209: v209 = ADD v1fe v1ba
0x20a: MSTORE v209 v205(0x0)
0x20b: v20b(0x1f) = CONST 
0x20d: v20d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v20b(0x1f)
0x20e: v20e(0x1f) = CONST 
0x211: v211 = ADD v1ba v20e(0x1f)
0x212: v212 = AND v211 v20d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0x217: v217 = ADD v1fe v212
0x228: v228(0x363) = CONST 
0x22b: JUMP v228(0x363)
----------------------------------

Begin block 0x22c
prev = {'0x523'}, next = {}
----------------------------------
Block 0x22c
0x22d: STOP 
----------------------------------

Begin block 0x22e
prev = {}, next = {'0x531'}
----------------------------------
function 0xd92db09f()
Block 0x22e
0x22f: v22f(0x236) = CONST 
0x232: v232(0x531) = CONST 
0x235: JUMP v232(0x531)
----------------------------------

Begin block 0x236
prev = {'0x531'}, next = {}
----------------------------------
Block 0x236
0x237: v237(0x40) = CONST 
0x239: v239 = MLOAD v237(0x40)
0x23c: v23c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x251: v251 = AND v23c(0xffffffffffffffffffffffffffffffffffffffff) v554
0x252: v252(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x267: v267 = AND v252(0xffffffffffffffffffffffffffffffffffffffff) v251
0x269: MSTORE v239 v267
0x26a: v26a(0x20) = CONST 
0x26c: v26c = ADD v26a(0x20) v239
0x270: v270(0x40) = CONST 
0x272: v272 = MLOAD v270(0x40)
0x275: v275 = SUB v26c v272
0x277: RETURN v272 v275
----------------------------------

Begin block 0x278
prev = {}, next = {'0x557'}
----------------------------------
function token()()
Block 0x278
0x279: v279(0x280) = CONST 
0x27c: v27c(0x557) = CONST 
0x27f: JUMP v27c(0x557)
----------------------------------

Begin block 0x280
prev = {'0x557'}, next = {}
----------------------------------
Block 0x280
0x281: v281(0x40) = CONST 
0x283: v283 = MLOAD v281(0x40)
0x286: v286(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x29b: v29b = AND v286(0xffffffffffffffffffffffffffffffffffffffff) v579
0x29c: v29c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2b1: v2b1 = AND v29c(0xffffffffffffffffffffffffffffffffffffffff) v29b
0x2b3: MSTORE v283 v2b1
0x2b4: v2b4(0x20) = CONST 
0x2b6: v2b6 = ADD v2b4(0x20) v283
0x2ba: v2ba(0x40) = CONST 
0x2bc: v2bc = MLOAD v2ba(0x40)
0x2bf: v2bf = SUB v2b6 v2bc
0x2c1: RETURN v2bc v2bf
----------------------------------

Begin block 0x2c2
prev = {'0x67'}, next = {'0x2cc'}
----------------------------------
Block 0x2c2
0x2c3: v2c3(0x0) = CONST 
0x2c5: v2c5(0x2cc) = CONST 
0x2c8: v2c8(0xf68) = CONST 
0x2cb: v2cb_0 = CALLPRIVATE v2c8(0xf68) v2c5(0x2cc)
----------------------------------

Begin block 0x2cc
prev = {'0x2c2'}, next = {'0x355'}
----------------------------------
Block 0x2cc
0x2cd: v2cd(0x40) = CONST 
0x2cf: v2cf = MLOAD v2cd(0x40)
0x2d1: v2d1(0x100) = CONST 
0x2d4: v2d4 = ADD v2d1(0x100) v2cf
0x2d5: v2d5(0x40) = CONST 
0x2d7: MSTORE v2d5(0x40) v2d4
0x2d9: v2d9 = CALLER 
0x2da: v2da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2ef: v2ef = AND v2da(0xffffffffffffffffffffffffffffffffffffffff) v2d9
0x2f1: MSTORE v2cf v2ef
0x2f2: v2f2(0x20) = CONST 
0x2f4: v2f4 = ADD v2f2(0x20) v2cf
0x2f6: v2f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x30b: v30b = AND v2f6(0xffffffffffffffffffffffffffffffffffffffff) v83
0x30d: MSTORE v2f4 v30b
0x30e: v30e(0x20) = CONST 
0x310: v310 = ADD v30e(0x20) v2f4
0x313: MSTORE v310 v8d
0x314: v314(0x20) = CONST 
0x316: v316 = ADD v314(0x20) v310
0x319: MSTORE v316 v97
0x31a: v31a(0x20) = CONST 
0x31c: v31c = ADD v31a(0x20) v316
0x31f: MSTORE v31c va1
0x320: v320(0x20) = CONST 
0x322: v322 = ADD v320(0x20) v31c
0x325: MSTORE v322 vab
0x326: v326(0x20) = CONST 
0x328: v328 = ADD v326(0x20) v322
0x32a: v32a = ISZERO vb7
0x32b: v32b = ISZERO v32a
0x32d: MSTORE v328 v32b
0x32e: v32e(0x20) = CONST 
0x330: v330 = ADD v32e(0x20) v328
0x332: v332(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x347: v347 = AND v332(0xffffffffffffffffffffffffffffffffffffffff) vd7
0x349: MSTORE v330 v347
0x34d: v34d(0x355) = CONST 
0x351: v351(0x57c) = CONST 
0x354: v354_0 = CALLPRIVATE v351(0x57c) v2cf v34d(0x355)
----------------------------------

Begin block 0x355
prev = {'0x2cc'}, next = {'0xe7'}
----------------------------------
Block 0x355
0x362: JUMP v52(0xe7)
----------------------------------

Begin block 0x363
prev = {'0x1da'}, next = {'0x425', '0x3b8'}
----------------------------------
Block 0x363
0x364: v364(0x0) = CONST 
0x368: v368 = SLOAD v364(0x0)
0x36a: v36a(0x100) = CONST 
0x36d: v36d(0x1) = EXP v36a(0x100) v364(0x0)
0x36f: v36f = DIV v368 v36d(0x1)
0x370: v370(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x385: v385 = AND v370(0xffffffffffffffffffffffffffffffffffffffff) v36f
0x386: v386(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x39b: v39b = AND v386(0xffffffffffffffffffffffffffffffffffffffff) v385
0x39d: v39d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3b2: v3b2 = AND v39d(0xffffffffffffffffffffffffffffffffffffffff) v185
0x3b3: v3b3 = EQ v3b2 v39b
0x3b4: v3b4(0x425) = CONST 
0x3b7: JUMPI v3b4(0x425) v3b3
----------------------------------

Begin block 0x3b8
prev = {'0x363'}, next = {}
----------------------------------
Block 0x3b8
0x3b8: v3b8(0x40) = CONST 
0x3ba: v3ba = MLOAD v3b8(0x40)
0x3bb: v3bb(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x3dd: MSTORE v3ba v3bb(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x3de: v3de(0x4) = CONST 
0x3e0: v3e0 = ADD v3de(0x4) v3ba
0x3e3: v3e3(0x20) = CONST 
0x3e5: v3e5 = ADD v3e3(0x20) v3e0
0x3e8: v3e8 = SUB v3e5 v3e0
0x3ea: MSTORE v3e0 v3e8
0x3eb: v3eb(0x16) = CONST 
0x3ee: MSTORE v3e5 v3eb(0x16)
0x3ef: v3ef(0x20) = CONST 
0x3f1: v3f1 = ADD v3ef(0x20) v3e5
0x3f3: v3f3(0x496e76616c696420746f6b656e20636f6e747261637400000000000000000000) = CONST 
0x415: MSTORE v3f1 v3f3(0x496e76616c696420746f6b656e20636f6e747261637400000000000000000000)
0x417: v417(0x20) = CONST 
0x419: v419 = ADD v417(0x20) v3f1
0x41d: v41d(0x40) = CONST 
0x41f: v41f = MLOAD v41d(0x40)
0x422: v422 = SUB v419 v41f
0x424: REVERT v41f v422
----------------------------------

Begin block 0x425
prev = {'0x363'}, next = {'0x43f', '0x443'}
----------------------------------
Block 0x425
0x426: v426(0x0) = CONST 
0x429: v429(0x0) = CONST 
0x42c: v42c(0x0) = CONST 
0x431: v431(0x20) = CONST 
0x433: v433 = ADD v431(0x20) v1ed
0x435: v435 = MLOAD v1ed
0x436: v436(0xc0) = CONST 
0x439: v439 = LT v435 v436(0xc0)
0x43a: v43a = ISZERO v439
0x43b: v43b(0x443) = CONST 
0x43e: JUMPI v43b(0x443) v43a
----------------------------------

Begin block 0x43f
prev = {'0x425'}, next = {}
----------------------------------
Block 0x43f
0x43f: v43f(0x0) = CONST 
0x442: REVERT v43f(0x0) v43f(0x0)
----------------------------------

Begin block 0x443
prev = {'0x425'}, next = {'0x49a'}
----------------------------------
Block 0x443
0x445: v445 = ADD v433 v435
0x449: v449 = MLOAD v433
0x44b: v44b(0x20) = CONST 
0x44d: v44d = ADD v44b(0x20) v433
0x453: v453 = MLOAD v44d
0x455: v455(0x20) = CONST 
0x457: v457 = ADD v455(0x20) v44d
0x45d: v45d = MLOAD v457
0x45f: v45f(0x20) = CONST 
0x461: v461 = ADD v45f(0x20) v457
0x467: v467 = MLOAD v461
0x469: v469(0x20) = CONST 
0x46b: v46b = ADD v469(0x20) v461
0x471: v471 = MLOAD v46b
0x473: v473(0x20) = CONST 
0x475: v475 = ADD v473(0x20) v46b
0x47b: v47b = MLOAD v475
0x47d: v47d(0x20) = CONST 
0x47f: v47f = ADD v47d(0x20) v475
0x493: v493(0x49a) = CONST 
0x496: v496(0xf68) = CONST 
0x499: v499_0 = CALLPRIVATE v496(0xf68) v493(0x49a)
----------------------------------

Begin block 0x49a
prev = {'0x443'}, next = {'0x523'}
----------------------------------
Block 0x49a
0x49b: v49b(0x40) = CONST 
0x49d: v49d = MLOAD v49b(0x40)
0x49f: v49f(0x100) = CONST 
0x4a2: v4a2 = ADD v49f(0x100) v49d
0x4a3: v4a3(0x40) = CONST 
0x4a5: MSTORE v4a3(0x40) v4a2
0x4a8: v4a8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4bd: v4bd = AND v4a8(0xffffffffffffffffffffffffffffffffffffffff) v15b
0x4bf: MSTORE v49d v4bd
0x4c0: v4c0(0x20) = CONST 
0x4c2: v4c2 = ADD v4c0(0x20) v49d
0x4c4: v4c4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4d9: v4d9 = AND v4c4(0xffffffffffffffffffffffffffffffffffffffff) v449
0x4db: MSTORE v4c2 v4d9
0x4dc: v4dc(0x20) = CONST 
0x4de: v4de = ADD v4dc(0x20) v4c2
0x4e1: MSTORE v4de v165
0x4e2: v4e2(0x20) = CONST 
0x4e4: v4e4 = ADD v4e2(0x20) v4de
0x4e7: MSTORE v4e4 v453
0x4e8: v4e8(0x20) = CONST 
0x4ea: v4ea = ADD v4e8(0x20) v4e4
0x4ed: MSTORE v4ea v45d
0x4ee: v4ee(0x20) = CONST 
0x4f0: v4f0 = ADD v4ee(0x20) v4ea
0x4f3: MSTORE v4f0 v467
0x4f4: v4f4(0x20) = CONST 
0x4f6: v4f6 = ADD v4f4(0x20) v4f0
0x4f8: v4f8 = ISZERO v471
0x4f9: v4f9 = ISZERO v4f8
0x4fb: MSTORE v4f6 v4f9
0x4fc: v4fc(0x20) = CONST 
0x4fe: v4fe = ADD v4fc(0x20) v4f6
0x500: v500(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x515: v515 = AND v500(0xffffffffffffffffffffffffffffffffffffffff) v47b
0x517: MSTORE v4fe v515
0x51b: v51b(0x523) = CONST 
0x51f: v51f(0x57c) = CONST 
0x522: v522_0 = CALLPRIVATE v51f(0x57c) v49d v51b(0x523)
----------------------------------

Begin block 0x523
prev = {'0x49a'}, next = {'0x22c'}
----------------------------------
Block 0x523
0x530: JUMP v12a(0x22c)
----------------------------------

Begin block 0x531
prev = {'0x22e'}, next = {'0x236'}
----------------------------------
Block 0x531
0x532: v532(0x1) = CONST 
0x534: v534(0x0) = CONST 
0x537: v537 = SLOAD v532(0x1)
0x539: v539(0x100) = CONST 
0x53c: v53c(0x1) = EXP v539(0x100) v534(0x0)
0x53e: v53e = DIV v537 v53c(0x1)
0x53f: v53f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x554: v554 = AND v53f(0xffffffffffffffffffffffffffffffffffffffff) v53e
0x556: JUMP v22f(0x236)
----------------------------------

Begin block 0x557
prev = {'0x278'}, next = {'0x280'}
----------------------------------
Block 0x557
0x558: v558(0x0) = CONST 
0x55c: v55c = SLOAD v558(0x0)
0x55e: v55e(0x100) = CONST 
0x561: v561(0x1) = EXP v55e(0x100) v558(0x0)
0x563: v563 = DIV v55c v561(0x1)
0x564: v564(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x579: v579 = AND v564(0xffffffffffffffffffffffffffffffffffffffff) v563
0x57b: JUMP v279(0x280)
----------------------------------

Begin block 0x57c
prev = {}, next = {'0x5b7', '0x624'}
----------------------------------
function 0x57c(v57carg0, v57carg1)
Block 0x57c
0x57d: v57d(0x0) = CONST 
0x580: v580(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x595: v595(0x0) = AND v580(0xffffffffffffffffffffffffffffffffffffffff) v57d(0x0)
0x597: v597(0x20) = CONST 
0x599: v599 = ADD v597(0x20) v57carg0
0x59a: v59a = MLOAD v599
0x59b: v59b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5b0: v5b0 = AND v59b(0xffffffffffffffffffffffffffffffffffffffff) v59a
0x5b1: v5b1 = EQ v5b0 v595(0x0)
0x5b2: v5b2 = ISZERO v5b1
0x5b3: v5b3(0x624) = CONST 
0x5b6: JUMPI v5b3(0x624) v5b2
----------------------------------

Begin block 0x5b7
prev = {'0x57c'}, next = {}
----------------------------------
Block 0x5b7
0x5b7: v5b7(0x40) = CONST 
0x5b9: v5b9 = MLOAD v5b7(0x40)
0x5ba: v5ba(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x5dc: MSTORE v5b9 v5ba(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x5dd: v5dd(0x4) = CONST 
0x5df: v5df = ADD v5dd(0x4) v5b9
0x5e2: v5e2(0x20) = CONST 
0x5e4: v5e4 = ADD v5e2(0x20) v5df
0x5e7: v5e7 = SUB v5e4 v5df
0x5e9: MSTORE v5df v5e7
0x5ea: v5ea(0x1e) = CONST 
0x5ed: MSTORE v5e4 v5ea(0x1e)
0x5ee: v5ee(0x20) = CONST 
0x5f0: v5f0 = ADD v5ee(0x20) v5e4
0x5f2: v5f2(0x4772616e74656520616464726573732063616e2774206265207a65726f2e0000) = CONST 
0x614: MSTORE v5f0 v5f2(0x4772616e74656520616464726573732063616e2774206265207a65726f2e0000)
0x616: v616(0x20) = CONST 
0x618: v618 = ADD v616(0x20) v5f0
0x61c: v61c(0x40) = CONST 
0x61e: v61e = MLOAD v61c(0x40)
0x621: v621 = SUB v618 v61e
0x623: REVERT v61e v621
----------------------------------

Begin block 0x624
prev = {'0x57c'}, next = {'0x635', '0x685'}
----------------------------------
Block 0x624
0x626: v626(0x60) = CONST 
0x628: v628 = ADD v626(0x60) v57carg0
0x629: v629 = MLOAD v628
0x62b: v62b(0xa0) = CONST 
0x62d: v62d = ADD v62b(0xa0) v57carg0
0x62e: v62e = MLOAD v62d
0x62f: v62f = GT v62e v629
0x630: v630 = ISZERO v62f
0x631: v631(0x685) = CONST 
0x634: JUMPI v631(0x685) v630
----------------------------------

Begin block 0x635
prev = {'0x624'}, next = {}
----------------------------------
Block 0x635
0x635: v635(0x40) = CONST 
0x637: v637 = MLOAD v635(0x40)
0x638: v638(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x65a: MSTORE v637 v638(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x65b: v65b(0x4) = CONST 
0x65d: v65d = ADD v65b(0x4) v637
0x660: v660(0x20) = CONST 
0x662: v662 = ADD v660(0x20) v65d
0x665: v665 = SUB v662 v65d
0x667: MSTORE v65d v665
0x668: v668(0x48) = CONST 
0x66b: MSTORE v662 v668(0x48)
0x66c: v66c(0x20) = CONST 
0x66e: v66e = ADD v66c(0x20) v662
0x670: v670(0x31b9) = CONST 
0x673: v673(0x48) = CONST 
0x676: CODECOPY v66e v670(0x31b9) v673(0x48)
0x677: v677(0x60) = CONST 
0x679: v679 = ADD v677(0x60) v66e
0x67d: v67d(0x40) = CONST 
0x67f: v67f = MLOAD v67d(0x40)
0x682: v682 = SUB v679 v67f
0x684: REVERT v67f v682
----------------------------------

Begin block 0x685
prev = {'0x624'}, next = {'0xbcc'}
----------------------------------
Block 0x685
0x686: v686(0x6db) = CONST 
0x68a: v68a(0x0) = CONST 
0x68c: v68c = ADD v68a(0x0) v57carg0
0x68d: v68d = MLOAD v68c
0x68e: v68e = ADDRESS 
0x690: v690(0x40) = CONST 
0x692: v692 = ADD v690(0x40) v57carg0
0x693: v693 = MLOAD v692
0x694: v694(0x0) = CONST 
0x698: v698 = SLOAD v694(0x0)
0x69a: v69a(0x100) = CONST 
0x69d: v69d(0x1) = EXP v69a(0x100) v694(0x0)
0x69f: v69f = DIV v698 v69d(0x1)
0x6a0: v6a0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6b5: v6b5 = AND v6a0(0xffffffffffffffffffffffffffffffffffffffff) v69f
0x6b6: v6b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6cb: v6cb = AND v6b6(0xffffffffffffffffffffffffffffffffffffffff) v6b5
0x6cc: v6cc(0xbcc) = CONST 
0x6d4: v6d4(0xffffffff) = CONST 
0x6d9: v6d9(0xbcc) = AND v6d4(0xffffffff) v6cc(0xbcc)
0x6da: JUMP v6d9(0xbcc)
----------------------------------

Begin block 0x6db
prev = {'0xccc'}, next = {'0x745', '0x741'}
----------------------------------
Block 0x6db
0x6dc: v6dc(0x0) = CONST 
0x6de: v6de(0x1) = CONST 
0x6e0: v6e0(0x0) = CONST 
0x6e3: v6e3 = SLOAD v6de(0x1)
0x6e5: v6e5(0x100) = CONST 
0x6e8: v6e8(0x1) = EXP v6e5(0x100) v6e0(0x0)
0x6ea: v6ea = DIV v6e3 v6e8(0x1)
0x6eb: v6eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x700: v700 = AND v6eb(0xffffffffffffffffffffffffffffffffffffffff) v6ea
0x701: v701(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x716: v716 = AND v701(0xffffffffffffffffffffffffffffffffffffffff) v700
0x717: v717(0xf81a6463) = CONST 
0x71c: v71c(0x40) = CONST 
0x71e: v71e = MLOAD v71c(0x40)
0x720: v720(0xffffffff) = CONST 
0x725: v725(0xf81a6463) = AND v720(0xffffffff) v717(0xf81a6463)
0x726: v726(0xe0) = CONST 
0x728: v728(0xf81a646300000000000000000000000000000000000000000000000000000000) = SHL v726(0xe0) v725(0xf81a6463)
0x72a: MSTORE v71e v728(0xf81a646300000000000000000000000000000000000000000000000000000000)
0x72b: v72b(0x4) = CONST 
0x72d: v72d = ADD v72b(0x4) v71e
0x72e: v72e(0x20) = CONST 
0x730: v730(0x40) = CONST 
0x732: v732 = MLOAD v730(0x40)
0x735: v735 = SUB v72d v732
0x739: v739 = EXTCODESIZE v716
0x73a: v73a = ISZERO v739
0x73c: v73c = ISZERO v73a
0x73d: v73d(0x745) = CONST 
0x740: JUMPI v73d(0x745) v73c
----------------------------------

Begin block 0x741
prev = {'0x6db'}, next = {}
----------------------------------
Block 0x741
0x741: v741(0x0) = CONST 
0x744: REVERT v741(0x0) v741(0x0)
----------------------------------

Begin block 0x745
prev = {'0x6db'}, next = {'0x759', '0x750'}
----------------------------------
Block 0x745
0x747: v747 = GAS 
0x748: v748 = STATICCALL v747 v716 v732 v735 v732 v72e(0x20)
0x749: v749 = ISZERO v748
0x74b: v74b = ISZERO v749
0x74c: v74c(0x759) = CONST 
0x74f: JUMPI v74c(0x759) v74b
----------------------------------

Begin block 0x750
prev = {'0x745'}, next = {}
----------------------------------
Block 0x750
0x750: v750 = RETURNDATASIZE 
0x751: v751(0x0) = CONST 
0x754: RETURNDATACOPY v751(0x0) v751(0x0) v750
0x755: v755 = RETURNDATASIZE 
0x756: v756(0x0) = CONST 
0x758: REVERT v756(0x0) v755
----------------------------------

Begin block 0x759
prev = {'0x745'}, next = {'0x76b', '0x76f'}
----------------------------------
Block 0x759
0x75e: v75e(0x40) = CONST 
0x760: v760 = MLOAD v75e(0x40)
0x761: v761 = RETURNDATASIZE 
0x762: v762(0x20) = CONST 
0x765: v765 = LT v761 v762(0x20)
0x766: v766 = ISZERO v765
0x767: v767(0x76f) = CONST 
0x76a: JUMPI v767(0x76f) v766
----------------------------------

Begin block 0x76b
prev = {'0x759'}, next = {}
----------------------------------
Block 0x76b
0x76b: v76b(0x0) = CONST 
0x76e: REVERT v76b(0x0) v76b(0x0)
----------------------------------

Begin block 0x76f
prev = {'0x759'}, next = {'0xff1'}
----------------------------------
Block 0x76f
0x771: v771 = ADD v760 v761
0x775: v775 = MLOAD v760
0x777: v777(0x20) = CONST 
0x779: v779 = ADD v777(0x20) v760
0x783: v783(0x0) = CONST 
0x786: v786(0x0) = CONST 
0x789: v789 = SLOAD v783(0x0)
0x78b: v78b(0x100) = CONST 
0x78e: v78e(0x1) = EXP v78b(0x100) v786(0x0)
0x790: v790 = DIV v789 v78e(0x1)
0x791: v791(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a6: v7a6 = AND v791(0xffffffffffffffffffffffffffffffffffffffff) v790
0x7a7: v7a7(0x1) = CONST 
0x7a9: v7a9(0x0) = CONST 
0x7ac: v7ac = SLOAD v7a7(0x1)
0x7ae: v7ae(0x100) = CONST 
0x7b1: v7b1(0x1) = EXP v7ae(0x100) v7a9(0x0)
0x7b3: v7b3 = DIV v7ac v7b1(0x1)
0x7b4: v7b4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c9: v7c9 = AND v7b4(0xffffffffffffffffffffffffffffffffffffffff) v7b3
0x7cb: v7cb(0x0) = CONST 
0x7cd: v7cd = ADD v7cb(0x0) v57carg0
0x7ce: v7ce = MLOAD v7cd
0x7d1: v7d1(0x20) = CONST 
0x7d3: v7d3 = ADD v7d1(0x20) v57carg0
0x7d4: v7d4 = MLOAD v7d3
0x7d5: v7d5(0x40) = CONST 
0x7d7: v7d7 = MLOAD v7d5(0x40)
0x7d8: v7d8(0x7e0) = CONST 
0x7dc: v7dc(0xff1) = CONST 
0x7df: JUMP v7dc(0xff1)
----------------------------------

Begin block 0x7e0
prev = {'0xff1'}, next = {'0x8d2', '0x8c9'}
----------------------------------
Block 0x7e0
0x7e3: v7e3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7f8: v7f8 = AND v7e3(0xffffffffffffffffffffffffffffffffffffffff) v7a6
0x7f9: v7f9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80e: v80e = AND v7f9(0xffffffffffffffffffffffffffffffffffffffff) v7f8
0x810: MSTORE vffb v80e
0x811: v811(0x20) = CONST 
0x813: v813 = ADD v811(0x20) vffb
0x815: v815(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82a: v82a = AND v815(0xffffffffffffffffffffffffffffffffffffffff) v7c9
0x82b: v82b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x840: v840 = AND v82b(0xffffffffffffffffffffffffffffffffffffffff) v82a
0x842: MSTORE v813 v840
0x843: v843(0x20) = CONST 
0x845: v845 = ADD v843(0x20) v813
0x847: v847(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x85c: v85c = AND v847(0xffffffffffffffffffffffffffffffffffffffff) v7ce
0x85d: v85d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x872: v872 = AND v85d(0xffffffffffffffffffffffffffffffffffffffff) v85c
0x874: MSTORE v845 v872
0x875: v875(0x20) = CONST 
0x877: v877 = ADD v875(0x20) v845
0x87a: MSTORE v877 v775
0x87b: v87b(0x20) = CONST 
0x87d: v87d = ADD v87b(0x20) v877
0x87f: v87f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x894: v894 = AND v87f(0xffffffffffffffffffffffffffffffffffffffff) v7d4
0x895: v895(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8aa: v8aa = AND v895(0xffffffffffffffffffffffffffffffffffffffff) v894
0x8ac: MSTORE v87d v8aa
0x8ad: v8ad(0x20) = CONST 
0x8af: v8af = ADD v8ad(0x20) v87d
0x8b7: v8b7(0x40) = CONST 
0x8b9: v8b9 = MLOAD v8b7(0x40)
0x8bc: v8bc = SUB v8af v8b9
0x8be: v8be(0x0) = CONST 
0x8c0: v8c0 = CREATE v8be(0x0) v8b9 v8bc
0x8c2: v8c2 = ISZERO v8c0
0x8c4: v8c4 = ISZERO v8c2
0x8c5: v8c5(0x8d2) = CONST 
0x8c8: JUMPI v8c5(0x8d2) v8c4
----------------------------------

Begin block 0x8c9
prev = {'0x7e0'}, next = {}
----------------------------------
Block 0x8c9
0x8c9: v8c9 = RETURNDATASIZE 
0x8ca: v8ca(0x0) = CONST 
0x8cd: RETURNDATACOPY v8ca(0x0) v8ca(0x0) v8c9
0x8ce: v8ce = RETURNDATASIZE 
0x8cf: v8cf(0x0) = CONST 
0x8d1: REVERT v8cf(0x0) v8ce
----------------------------------

Begin block 0x8d2
prev = {'0x7e0'}, next = {'0xa9e'}
----------------------------------
Block 0x8d2
0x8d9: v8d9(0x60) = CONST 
0x8dc: v8dc(0x0) = CONST 
0x8de: v8de = ADD v8dc(0x0) v57carg0
0x8df: v8df = MLOAD v8de
0x8e2: v8e2(0x60) = CONST 
0x8e4: v8e4 = ADD v8e2(0x60) v57carg0
0x8e5: v8e5 = MLOAD v8e4
0x8e7: v8e7(0x80) = CONST 
0x8e9: v8e9 = ADD v8e7(0x80) v57carg0
0x8ea: v8ea = MLOAD v8e9
0x8ec: v8ec(0xa0) = CONST 
0x8ee: v8ee = ADD v8ec(0xa0) v57carg0
0x8ef: v8ef = MLOAD v8ee
0x8f1: v8f1(0xc0) = CONST 
0x8f3: v8f3 = ADD v8f1(0xc0) v57carg0
0x8f4: v8f4 = MLOAD v8f3
0x8f6: v8f6(0xe0) = CONST 
0x8f8: v8f8 = ADD v8f6(0xe0) v57carg0
0x8f9: v8f9 = MLOAD v8f8
0x8fa: v8fa(0x40) = CONST 
0x8fc: v8fc = MLOAD v8fa(0x40)
0x8fd: v8fd(0x20) = CONST 
0x8ff: v8ff = ADD v8fd(0x20) v8fc
0x902: v902(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x917: v917 = AND v902(0xffffffffffffffffffffffffffffffffffffffff) v8df
0x918: v918(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x92d: v92d = AND v918(0xffffffffffffffffffffffffffffffffffffffff) v917
0x92f: MSTORE v8ff v92d
0x930: v930(0x20) = CONST 
0x932: v932 = ADD v930(0x20) v8ff
0x934: v934(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x949: v949 = AND v934(0xffffffffffffffffffffffffffffffffffffffff) v8c0
0x94a: v94a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x95f: v95f = AND v94a(0xffffffffffffffffffffffffffffffffffffffff) v949
0x961: MSTORE v932 v95f
0x962: v962(0x20) = CONST 
0x964: v964 = ADD v962(0x20) v932
0x967: MSTORE v964 v8e5
0x968: v968(0x20) = CONST 
0x96a: v96a = ADD v968(0x20) v964
0x96d: MSTORE v96a v8ea
0x96e: v96e(0x20) = CONST 
0x970: v970 = ADD v96e(0x20) v96a
0x973: MSTORE v970 v8ef
0x974: v974(0x20) = CONST 
0x976: v976 = ADD v974(0x20) v970
0x978: v978 = ISZERO v8f4
0x979: v979 = ISZERO v978
0x97a: v97a = ISZERO v979
0x97b: v97b = ISZERO v97a
0x97d: MSTORE v976 v97b
0x97e: v97e(0x20) = CONST 
0x980: v980 = ADD v97e(0x20) v976
0x982: v982(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x997: v997 = AND v982(0xffffffffffffffffffffffffffffffffffffffff) v8f9
0x998: v998(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ad: v9ad = AND v998(0xffffffffffffffffffffffffffffffffffffffff) v997
0x9af: MSTORE v980 v9ad
0x9b0: v9b0(0x20) = CONST 
0x9b2: v9b2 = ADD v9b0(0x20) v980
0x9bc: v9bc(0x40) = CONST 
0x9be: v9be = MLOAD v9bc(0x40)
0x9bf: v9bf(0x20) = CONST 
0x9c3: v9c3 = SUB v9b2 v9be
0x9c4: v9c4 = SUB v9c3 v9bf(0x20)
0x9c6: MSTORE v9be v9c4
0x9c8: v9c8(0x40) = CONST 
0x9ca: MSTORE v9c8(0x40) v9b2
0x9cd: v9cd(0x0) = CONST 
0x9d1: v9d1 = SLOAD v9cd(0x0)
0x9d3: v9d3(0x100) = CONST 
0x9d6: v9d6(0x1) = EXP v9d3(0x100) v9cd(0x0)
0x9d8: v9d8 = DIV v9d1 v9d6(0x1)
0x9d9: v9d9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ee: v9ee = AND v9d9(0xffffffffffffffffffffffffffffffffffffffff) v9d8
0x9ef: v9ef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa04: va04 = AND v9ef(0xffffffffffffffffffffffffffffffffffffffff) v9ee
0xa05: va05(0xcae9ca51) = CONST 
0xa0a: va0a(0x1) = CONST 
0xa0c: va0c(0x0) = CONST 
0xa0f: va0f = SLOAD va0a(0x1)
0xa11: va11(0x100) = CONST 
0xa14: va14(0x1) = EXP va11(0x100) va0c(0x0)
0xa16: va16 = DIV va0f va14(0x1)
0xa17: va17(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa2c: va2c = AND va17(0xffffffffffffffffffffffffffffffffffffffff) va16
0xa2e: va2e(0x40) = CONST 
0xa30: va30 = ADD va2e(0x40) v57carg0
0xa31: va31 = MLOAD va30
0xa33: va33(0x40) = CONST 
0xa35: va35 = MLOAD va33(0x40)
0xa37: va37(0xffffffff) = CONST 
0xa3c: va3c(0xcae9ca51) = AND va37(0xffffffff) va05(0xcae9ca51)
0xa3d: va3d(0xe0) = CONST 
0xa3f: va3f(0xcae9ca5100000000000000000000000000000000000000000000000000000000) = SHL va3d(0xe0) va3c(0xcae9ca51)
0xa41: MSTORE va35 va3f(0xcae9ca5100000000000000000000000000000000000000000000000000000000)
0xa42: va42(0x4) = CONST 
0xa44: va44 = ADD va42(0x4) va35
0xa47: va47(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa5c: va5c = AND va47(0xffffffffffffffffffffffffffffffffffffffff) va2c
0xa5d: va5d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa72: va72 = AND va5d(0xffffffffffffffffffffffffffffffffffffffff) va5c
0xa74: MSTORE va44 va72
0xa75: va75(0x20) = CONST 
0xa77: va77 = ADD va75(0x20) va44
0xa7a: MSTORE va77 va31
0xa7b: va7b(0x20) = CONST 
0xa7d: va7d = ADD va7b(0x20) va77
0xa7f: va7f(0x20) = CONST 
0xa81: va81 = ADD va7f(0x20) va7d
0xa84: va84 = SUB va81 va44
0xa86: MSTORE va7d va84
0xa8a: va8a = MLOAD v9be
0xa8c: MSTORE va81 va8a
0xa8d: va8d(0x20) = CONST 
0xa8f: va8f = ADD va8d(0x20) va81
0xa93: va93 = MLOAD v9be
0xa95: va95(0x20) = CONST 
0xa97: va97 = ADD va95(0x20) v9be
0xa9c: va9c(0x0) = CONST 
----------------------------------

Begin block 0xa9e
prev = {'0xaa7', '0x8d2'}, next = {'0xaa7', '0xab9'}
----------------------------------
Block 0xa9e
0xa9e_0x0: va9e_0 = PHI va9c(0x0) vab2
0xaa1: vaa1 = LT va9e_0 va93
0xaa2: vaa2 = ISZERO vaa1
0xaa3: vaa3(0xab9) = CONST 
0xaa6: JUMPI vaa3(0xab9) vaa2
----------------------------------

Begin block 0xaa7
prev = {'0xa9e'}, next = {'0xa9e'}
----------------------------------
Block 0xaa7
0xaa7_0x0: vaa7_0 = PHI va9c(0x0) vab2
0xaa9: vaa9 = ADD va97 vaa7_0
0xaaa: vaaa = MLOAD vaa9
0xaad: vaad = ADD va8f vaa7_0
0xaae: MSTORE vaad vaaa
0xaaf: vaaf(0x20) = CONST 
0xab2: vab2 = ADD vaa7_0 vaaf(0x20)
0xab5: vab5(0xa9e) = CONST 
0xab8: JUMP vab5(0xa9e)
----------------------------------

Begin block 0xab9
prev = {'0xa9e'}, next = {'0xacd', '0xae6'}
----------------------------------
Block 0xab9
0xac2: vac2 = ADD va93 va8f
0xac4: vac4(0x1f) = CONST 
0xac6: vac6 = AND vac4(0x1f) va93
0xac8: vac8 = ISZERO vac6
0xac9: vac9(0xae6) = CONST 
0xacc: JUMPI vac9(0xae6) vac8
----------------------------------

Begin block 0xacd
prev = {'0xab9'}, next = {'0xae6'}
----------------------------------
Block 0xacd
0xacf: vacf = SUB vac2 vac6
0xad1: vad1 = MLOAD vacf
0xad2: vad2(0x1) = CONST 
0xad5: vad5(0x20) = CONST 
0xad7: vad7 = SUB vad5(0x20) vac6
0xad8: vad8(0x100) = CONST 
0xadb: vadb = EXP vad8(0x100) vad7
0xadc: vadc = SUB vadb vad2(0x1)
0xadd: vadd = NOT vadc
0xade: vade = AND vadd vad1
0xae0: MSTORE vacf vade
0xae1: vae1(0x20) = CONST 
0xae3: vae3 = ADD vae1(0x20) vacf
----------------------------------

Begin block 0xae6
prev = {'0xab9', '0xacd'}, next = {'0xb07', '0xb03'}
----------------------------------
Block 0xae6
0xae6_0x1: vae6_1 = PHI vac2 vae3
0xaee: vaee(0x20) = CONST 
0xaf0: vaf0(0x40) = CONST 
0xaf2: vaf2 = MLOAD vaf0(0x40)
0xaf5: vaf5 = SUB vae6_1 vaf2
0xaf7: vaf7(0x0) = CONST 
0xafb: vafb = EXTCODESIZE va04
0xafc: vafc = ISZERO vafb
0xafe: vafe = ISZERO vafc
0xaff: vaff(0xb07) = CONST 
0xb02: JUMPI vaff(0xb07) vafe
----------------------------------

Begin block 0xb03
prev = {'0xae6'}, next = {}
----------------------------------
Block 0xb03
0xb03: vb03(0x0) = CONST 
0xb06: REVERT vb03(0x0) vb03(0x0)
----------------------------------

Begin block 0xb07
prev = {'0xae6'}, next = {'0xb12', '0xb1b'}
----------------------------------
Block 0xb07
0xb09: vb09 = GAS 
0xb0a: vb0a = CALL vb09 va04 vaf7(0x0) vaf2 vaf5 vaf2 vaee(0x20)
0xb0b: vb0b = ISZERO vb0a
0xb0d: vb0d = ISZERO vb0b
0xb0e: vb0e(0xb1b) = CONST 
0xb11: JUMPI vb0e(0xb1b) vb0d
----------------------------------

Begin block 0xb12
prev = {'0xb07'}, next = {}
----------------------------------
Block 0xb12
0xb12: vb12 = RETURNDATASIZE 
0xb13: vb13(0x0) = CONST 
0xb16: RETURNDATACOPY vb13(0x0) vb13(0x0) vb12
0xb17: vb17 = RETURNDATASIZE 
0xb18: vb18(0x0) = CONST 
0xb1a: REVERT vb18(0x0) vb17
----------------------------------

Begin block 0xb1b
prev = {'0xb07'}, next = {'0xb2d', '0xb31'}
----------------------------------
Block 0xb1b
0xb20: vb20(0x40) = CONST 
0xb22: vb22 = MLOAD vb20(0x40)
0xb23: vb23 = RETURNDATASIZE 
0xb24: vb24(0x20) = CONST 
0xb27: vb27 = LT vb23 vb24(0x20)
0xb28: vb28 = ISZERO vb27
0xb29: vb29(0xb31) = CONST 
0xb2c: JUMPI vb29(0xb31) vb28
----------------------------------

Begin block 0xb2d
prev = {'0xb1b'}, next = {}
----------------------------------
Block 0xb2d
0xb2d: vb2d(0x0) = CONST 
0xb30: REVERT vb2d(0x0) vb2d(0x0)
----------------------------------

Begin block 0xb31
prev = {'0xb1b'}, next = {}
----------------------------------
Block 0xb31
0xb33: vb33 = ADD vb22 vb23
0xb37: vb37 = MLOAD vb22
0xb39: vb39(0x20) = CONST 
0xb3b: vb3b = ADD vb39(0x20) vb22
0xb45: vb45(0x20) = CONST 
0xb47: vb47 = ADD vb45(0x20) v57carg0
0xb48: vb48 = MLOAD vb47
0xb49: vb49(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb5e: vb5e = AND vb49(0xffffffffffffffffffffffffffffffffffffffff) vb48
0xb5f: vb5f(0xd670b8855e91e4ed32e465e934368080baed18d1aba14c28902bc9b934f3368a) = CONST 
0xb81: vb81(0x40) = CONST 
0xb83: vb83 = MLOAD vb81(0x40)
0xb86: vb86(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9b: vb9b = AND vb86(0xffffffffffffffffffffffffffffffffffffffff) v8c0
0xb9c: vb9c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbb1: vbb1 = AND vb9c(0xffffffffffffffffffffffffffffffffffffffff) vb9b
0xbb3: MSTORE vb83 vbb1
0xbb4: vbb4(0x20) = CONST 
0xbb6: vbb6 = ADD vbb4(0x20) vb83
0xbba: vbba(0x40) = CONST 
0xbbc: vbbc = MLOAD vbba(0x40)
0xbbf: vbbf = SUB vbb6 vbbc
0xbc1: LOG2 vbbc vbbf vb5f(0xd670b8855e91e4ed32e465e934368080baed18d1aba14c28902bc9b934f3368a) vb5e
0xbcb: RETURNPRIVATE v57carg1 v8c0
----------------------------------

Begin block 0xbcc
prev = {'0x685'}, next = {'0xcd2'}
----------------------------------
Block 0xbcc
0xbcd: vbcd(0xccc) = CONST 
0xbd2: vbd2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe7: vbe7 = AND vbd2(0xffffffffffffffffffffffffffffffffffffffff) v6cb
0xbe8: vbe8(0x23b872dd) = CONST 
0xbef: vbef(0xe0) = CONST 
0xbf1: vbf1(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL vbef(0xe0) vbe8(0x23b872dd)
0xbf5: vbf5(0x40) = CONST 
0xbf7: vbf7 = MLOAD vbf5(0x40)
0xbf8: vbf8(0x24) = CONST 
0xbfa: vbfa = ADD vbf8(0x24) vbf7
0xbfd: vbfd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc12: vc12 = AND vbfd(0xffffffffffffffffffffffffffffffffffffffff) v68d
0xc13: vc13(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc28: vc28 = AND vc13(0xffffffffffffffffffffffffffffffffffffffff) vc12
0xc2a: MSTORE vbfa vc28
0xc2b: vc2b(0x20) = CONST 
0xc2d: vc2d = ADD vc2b(0x20) vbfa
0xc2f: vc2f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc44: vc44 = AND vc2f(0xffffffffffffffffffffffffffffffffffffffff) v68e
0xc45: vc45(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5a: vc5a = AND vc45(0xffffffffffffffffffffffffffffffffffffffff) vc44
0xc5c: MSTORE vc2d vc5a
0xc5d: vc5d(0x20) = CONST 
0xc5f: vc5f = ADD vc5d(0x20) vc2d
0xc62: MSTORE vc5f v693
0xc63: vc63(0x20) = CONST 
0xc65: vc65 = ADD vc63(0x20) vc5f
0xc6b: vc6b(0x40) = CONST 
0xc6d: vc6d = MLOAD vc6b(0x40)
0xc6e: vc6e(0x20) = CONST 
0xc72: vc72 = SUB vc65 vc6d
0xc73: vc73 = SUB vc72 vc6e(0x20)
0xc75: MSTORE vc6d vc73
0xc77: vc77(0x40) = CONST 
0xc79: MSTORE vc77(0x40) vc65
0xc7b: vc7b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc98: vc98(0xffffffff00000000000000000000000000000000000000000000000000000000) = NOT vc7b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0xc99: vc99(0x23b872dd00000000000000000000000000000000000000000000000000000000) = AND vc98(0xffffffff00000000000000000000000000000000000000000000000000000000) vbf1(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0xc9a: vc9a(0x20) = CONST 
0xc9d: vc9d = ADD vc6d vc9a(0x20)
0xc9f: vc9f = MLOAD vc9d
0xca0: vca0(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcc0: vcc0 = AND vc9f vca0(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0xcc1: vcc1 = OR vcc0 vc99(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0xcc3: MSTORE vc9d vcc1
0xcc8: vcc8(0xcd2) = CONST 
0xccb: JUMP vcc8(0xcd2)
----------------------------------

Begin block 0xccc
prev = {'0xf17'}, next = {'0x6db'}
----------------------------------
Block 0xccc
0xcd1: JUMP v686(0x6db)
----------------------------------

Begin block 0xcd2
prev = {'0xbcc'}, next = {'0xf1d'}
----------------------------------
Block 0xcd2
0xcd3: vcd3(0xcf1) = CONST 
0xcd7: vcd7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcec: vcec = AND vcd7(0xffffffffffffffffffffffffffffffffffffffff) v6cb
0xced: vced(0xf1d) = CONST 
0xcf0: JUMP vced(0xf1d)
----------------------------------

Begin block 0xcf1
prev = {'0xf5f'}, next = {'0xcf6', '0xd63'}
----------------------------------
Block 0xcf1
0xcf1_0x0: vcf1_0 = PHI vf53 vf5e
0xcf2: vcf2(0xd63) = CONST 
0xcf5: JUMPI vcf2(0xd63) vcf1_0
----------------------------------

Begin block 0xcf6
prev = {'0xcf1'}, next = {}
----------------------------------
Block 0xcf6
0xcf6: vcf6(0x40) = CONST 
0xcf8: vcf8 = MLOAD vcf6(0x40)
0xcf9: vcf9(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xd1b: MSTORE vcf8 vcf9(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xd1c: vd1c(0x4) = CONST 
0xd1e: vd1e = ADD vd1c(0x4) vcf8
0xd21: vd21(0x20) = CONST 
0xd23: vd23 = ADD vd21(0x20) vd1e
0xd26: vd26 = SUB vd23 vd1e
0xd28: MSTORE vd1e vd26
0xd29: vd29(0x1f) = CONST 
0xd2c: MSTORE vd23 vd29(0x1f)
0xd2d: vd2d(0x20) = CONST 
0xd2f: vd2f = ADD vd2d(0x20) vd23
0xd31: vd31(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400) = CONST 
0xd53: MSTORE vd2f vd31(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400)
0xd55: vd55(0x20) = CONST 
0xd57: vd57 = ADD vd55(0x20) vd2f
0xd5b: vd5b(0x40) = CONST 
0xd5d: vd5d = MLOAD vd5b(0x40)
0xd60: vd60 = SUB vd57 vd5d
0xd62: REVERT vd5d vd60
----------------------------------

Begin block 0xd63
prev = {'0xcf1'}, next = {'0xd8f'}
----------------------------------
Block 0xd63
0xd64: vd64(0x0) = CONST 
0xd66: vd66(0x60) = CONST 
0xd69: vd69(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd7e: vd7e = AND vd69(0xffffffffffffffffffffffffffffffffffffffff) v6cb
0xd80: vd80(0x40) = CONST 
0xd82: vd82 = MLOAD vd80(0x40)
0xd86: vd86 = MLOAD vc6d
0xd88: vd88(0x20) = CONST 
0xd8a: vd8a = ADD vd88(0x20) vc6d
----------------------------------

Begin block 0xd8f
prev = {'0xd98', '0xd63'}, next = {'0xd98', '0xdb2'}
----------------------------------
Block 0xd8f
0xd8f_0x2: vd8f_2 = PHI vd86 vdab
0xd90: vd90(0x20) = CONST 
0xd93: vd93 = LT vd8f_2 vd90(0x20)
0xd94: vd94(0xdb2) = CONST 
0xd97: JUMPI vd94(0xdb2) vd93
----------------------------------

Begin block 0xd98
prev = {'0xd8f'}, next = {'0xd8f'}
----------------------------------
Block 0xd98
0xd98_0x0: vd98_0 = PHI vd8a vda5
0xd98_0x1: vd98_1 = PHI vd82 vd9f
0xd98_0x2: vd98_2 = PHI vd86 vdab
0xd99: vd99 = MLOAD vd98_0
0xd9b: MSTORE vd98_1 vd99
0xd9c: vd9c(0x20) = CONST 
0xd9f: vd9f = ADD vd98_1 vd9c(0x20)
0xda2: vda2(0x20) = CONST 
0xda5: vda5 = ADD vd98_0 vda2(0x20)
0xda8: vda8(0x20) = CONST 
0xdab: vdab = SUB vd98_2 vda8(0x20)
0xdae: vdae(0xd8f) = CONST 
0xdb1: JUMP vdae(0xd8f)
----------------------------------

Begin block 0xdb2
prev = {'0xd8f'}, next = {'0xe14', '0xdf3'}
----------------------------------
Block 0xdb2
0xdb2_0x0: vdb2_0 = PHI vd8a vda5
0xdb2_0x1: vdb2_1 = PHI vd82 vd9f
0xdb2_0x2: vdb2_2 = PHI vd86 vdab
0xdb3: vdb3(0x1) = CONST 
0xdb6: vdb6(0x20) = CONST 
0xdb8: vdb8 = SUB vdb6(0x20) vdb2_2
0xdb9: vdb9(0x100) = CONST 
0xdbc: vdbc = EXP vdb9(0x100) vdb8
0xdbd: vdbd = SUB vdbc vdb3(0x1)
0xdbf: vdbf = NOT vdbd
0xdc1: vdc1 = MLOAD vdb2_0
0xdc2: vdc2 = AND vdc1 vdbf
0xdc5: vdc5 = MLOAD vdb2_1
0xdc6: vdc6 = AND vdc5 vdbd
0xdc9: vdc9 = OR vdc2 vdc6
0xdcb: MSTORE vdb2_1 vdc9
0xdd4: vdd4 = ADD vd86 vd82
0xdd8: vdd8(0x0) = CONST 
0xdda: vdda(0x40) = CONST 
0xddc: vddc = MLOAD vdda(0x40)
0xddf: vddf = SUB vdd4 vddc
0xde1: vde1(0x0) = CONST 
0xde4: vde4 = GAS 
0xde5: vde5 = CALL vde4 vd7e vde1(0x0) vddc vddf vddc vdd8(0x0)
0xde9: vde9 = RETURNDATASIZE 
0xdeb: vdeb(0x0) = CONST 
0xdee: vdee = EQ vde9 vdeb(0x0)
0xdef: vdef(0xe14) = CONST 
0xdf2: JUMPI vdef(0xe14) vdee
----------------------------------

Begin block 0xdf3
prev = {'0xdb2'}, next = {'0xe19'}
----------------------------------
Block 0xdf3
0xdf3: vdf3(0x40) = CONST 
0xdf5: vdf5 = MLOAD vdf3(0x40)
0xdf8: vdf8(0x1f) = CONST 
0xdfa: vdfa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT vdf8(0x1f)
0xdfb: vdfb(0x3f) = CONST 
0xdfd: vdfd = RETURNDATASIZE 
0xdfe: vdfe = ADD vdfd vdfb(0x3f)
0xdff: vdff = AND vdfe vdfa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0xe01: ve01 = ADD vdf5 vdff
0xe02: ve02(0x40) = CONST 
0xe04: MSTORE ve02(0x40) ve01
0xe05: ve05 = RETURNDATASIZE 
0xe07: MSTORE vdf5 ve05
0xe08: ve08 = RETURNDATASIZE 
0xe09: ve09(0x0) = CONST 
0xe0b: ve0b(0x20) = CONST 
0xe0e: ve0e = ADD vdf5 ve0b(0x20)
0xe0f: RETURNDATACOPY ve0e ve09(0x0) ve08
0xe10: ve10(0xe19) = CONST 
0xe13: JUMP ve10(0xe19)
----------------------------------

Begin block 0xe14
prev = {'0xdb2'}, next = {'0xe19'}
----------------------------------
Block 0xe14
0xe15: ve15(0x60) = CONST 
----------------------------------

Begin block 0xe19
prev = {'0xe14', '0xdf3'}, next = {'0xe24', '0xe91'}
----------------------------------
Block 0xe19
0xe20: ve20(0xe91) = CONST 
0xe23: JUMPI ve20(0xe91) vde5
----------------------------------

Begin block 0xe24
prev = {'0xe19'}, next = {}
----------------------------------
Block 0xe24
0xe24: ve24(0x40) = CONST 
0xe26: ve26 = MLOAD ve24(0x40)
0xe27: ve27(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xe49: MSTORE ve26 ve27(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe4a: ve4a(0x4) = CONST 
0xe4c: ve4c = ADD ve4a(0x4) ve26
0xe4f: ve4f(0x20) = CONST 
0xe51: ve51 = ADD ve4f(0x20) ve4c
0xe54: ve54 = SUB ve51 ve4c
0xe56: MSTORE ve4c ve54
0xe57: ve57(0x20) = CONST 
0xe5a: MSTORE ve51 ve57(0x20)
0xe5b: ve5b(0x20) = CONST 
0xe5d: ve5d = ADD ve5b(0x20) ve51
0xe5f: ve5f(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564) = CONST 
0xe81: MSTORE ve5d ve5f(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564)
0xe83: ve83(0x20) = CONST 
0xe85: ve85 = ADD ve83(0x20) ve5d
0xe89: ve89(0x40) = CONST 
0xe8b: ve8b = MLOAD ve89(0x40)
0xe8e: ve8e = SUB ve85 ve8b
0xe90: REVERT ve8b ve8e
----------------------------------

Begin block 0xe91
prev = {'0xe19'}, next = {'0xf17', '0xe9c'}
----------------------------------
Block 0xe91
0xe91_0x0: ve91_0 = PHI vdf5 ve15(0x60)
0xe92: ve92(0x0) = CONST 
0xe95: ve95 = MLOAD ve91_0
0xe96: ve96 = GT ve95 ve92(0x0)
0xe97: ve97 = ISZERO ve96
0xe98: ve98(0xf17) = CONST 
0xe9b: JUMPI ve98(0xf17) ve97
----------------------------------

Begin block 0xe9c
prev = {'0xe91'}, next = {'0xeac', '0xeb0'}
----------------------------------
Block 0xe9c
0xe9c_0x0: ve9c_0 = PHI vdf5 ve15(0x60)
0xe9e: ve9e(0x20) = CONST 
0xea0: vea0 = ADD ve9e(0x20) ve9c_0
0xea2: vea2 = MLOAD ve9c_0
0xea3: vea3(0x20) = CONST 
0xea6: vea6 = LT vea2 vea3(0x20)
0xea7: vea7 = ISZERO vea6
0xea8: vea8(0xeb0) = CONST 
0xeab: JUMPI vea8(0xeb0) vea7
----------------------------------

Begin block 0xeac
prev = {'0xe9c'}, next = {}
----------------------------------
Block 0xeac
0xeac: veac(0x0) = CONST 
0xeaf: REVERT veac(0x0) veac(0x0)
----------------------------------

Begin block 0xeb0
prev = {'0xe9c'}, next = {'0xec6', '0xf16'}
----------------------------------
Block 0xeb0
0xeb2: veb2 = ADD vea0 vea2
0xeb6: veb6 = MLOAD vea0
0xeb8: veb8(0x20) = CONST 
0xeba: veba = ADD veb8(0x20) vea0
0xec2: vec2(0xf16) = CONST 
0xec5: JUMPI vec2(0xf16) veb6
----------------------------------

Begin block 0xec6
prev = {'0xeb0'}, next = {}
----------------------------------
Block 0xec6
0xec6: vec6(0x40) = CONST 
0xec8: vec8 = MLOAD vec6(0x40)
0xec9: vec9(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xeeb: MSTORE vec8 vec9(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xeec: veec(0x4) = CONST 
0xeee: veee = ADD veec(0x4) vec8
0xef1: vef1(0x20) = CONST 
0xef3: vef3 = ADD vef1(0x20) veee
0xef6: vef6 = SUB vef3 veee
0xef8: MSTORE veee vef6
0xef9: vef9(0x2a) = CONST 
0xefc: MSTORE vef3 vef9(0x2a)
0xefd: vefd(0x20) = CONST 
0xeff: veff = ADD vefd(0x20) vef3
0xf01: vf01(0x318f) = CONST 
0xf04: vf04(0x2a) = CONST 
0xf07: CODECOPY veff vf01(0x318f) vf04(0x2a)
0xf08: vf08(0x40) = CONST 
0xf0a: vf0a = ADD vf08(0x40) veff
0xf0e: vf0e(0x40) = CONST 
0xf10: vf10 = MLOAD vf0e(0x40)
0xf13: vf13 = SUB vf0a vf10
0xf15: REVERT vf10 vf13
----------------------------------

Begin block 0xf16
prev = {'0xeb0'}, next = {'0xf17'}
----------------------------------
Block 0xf16
----------------------------------

Begin block 0xf17
prev = {'0xf16', '0xe91'}, next = {'0xccc'}
----------------------------------
Block 0xf17
0xf1c: JUMP vbcd(0xccc)
----------------------------------

Begin block 0xf1d
prev = {'0xcd2'}, next = {'0xf5a', '0xf5f'}
----------------------------------
Block 0xf1d
0xf1e: vf1e(0x0) = CONST 
0xf21: vf21(0x0) = CONST 
0xf23: vf23(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) = CONST 
0xf44: vf44(0x0) = CONST 
0xf46: vf46(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) = SHL vf44(0x0) vf23(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470)
0xf4a: vf4a = EXTCODEHASH vcec
0xf4d: vf4d(0x0) = CONST 
0xf50: vf50(0x0) = SHL vf4d(0x0) vf4d(0x0)
0xf52: vf52 = EQ vf4a vf50(0x0)
0xf53: vf53 = ISZERO vf52
0xf55: vf55 = ISZERO vf53
0xf56: vf56(0xf5f) = CONST 
0xf59: JUMPI vf56(0xf5f) vf55
----------------------------------

Begin block 0xf5a
prev = {'0xf1d'}, next = {'0xf5f'}
----------------------------------
Block 0xf5a
0xf5d: vf5d = EQ vf4a vf46(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470)
0xf5e: vf5e = ISZERO vf5d
----------------------------------

Begin block 0xf5f
prev = {'0xf5a', '0xf1d'}, next = {'0xcf1'}
----------------------------------
Block 0xf5f
0xf67: JUMP vcd3(0xcf1)
----------------------------------

Begin block 0xf68
prev = {}, next = {}
----------------------------------
function 0xf68(vf68arg0)
Block 0xf68
0xf69: vf69(0x40) = CONST 
0xf6b: vf6b = MLOAD vf69(0x40)
0xf6d: vf6d(0x100) = CONST 
0xf70: vf70 = ADD vf6d(0x100) vf6b
0xf71: vf71(0x40) = CONST 
0xf73: MSTORE vf71(0x40) vf70
0xf75: vf75(0x0) = CONST 
0xf77: vf77(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf8c: vf8c(0x0) = AND vf77(0xffffffffffffffffffffffffffffffffffffffff) vf75(0x0)
0xf8e: MSTORE vf6b vf8c(0x0)
0xf8f: vf8f(0x20) = CONST 
0xf91: vf91 = ADD vf8f(0x20) vf6b
0xf92: vf92(0x0) = CONST 
0xf94: vf94(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa9: vfa9(0x0) = AND vf94(0xffffffffffffffffffffffffffffffffffffffff) vf92(0x0)
0xfab: MSTORE vf91 vfa9(0x0)
0xfac: vfac(0x20) = CONST 
0xfae: vfae = ADD vfac(0x20) vf91
0xfaf: vfaf(0x0) = CONST 
0xfb2: MSTORE vfae vfaf(0x0)
0xfb3: vfb3(0x20) = CONST 
0xfb5: vfb5 = ADD vfb3(0x20) vfae
0xfb6: vfb6(0x0) = CONST 
0xfb9: MSTORE vfb5 vfb6(0x0)
0xfba: vfba(0x20) = CONST 
0xfbc: vfbc = ADD vfba(0x20) vfb5
0xfbd: vfbd(0x0) = CONST 
0xfc0: MSTORE vfbc vfbd(0x0)
0xfc1: vfc1(0x20) = CONST 
0xfc3: vfc3 = ADD vfc1(0x20) vfbc
0xfc4: vfc4(0x0) = CONST 
0xfc7: MSTORE vfc3 vfc4(0x0)
0xfc8: vfc8(0x20) = CONST 
0xfca: vfca = ADD vfc8(0x20) vfc3
0xfcb: vfcb(0x0) = CONST 
0xfcd: vfcd(0x1) = ISZERO vfcb(0x0)
0xfce: vfce(0x0) = ISZERO vfcd(0x1)
0xfd0: MSTORE vfca vfce(0x0)
0xfd1: vfd1(0x20) = CONST 
0xfd3: vfd3 = ADD vfd1(0x20) vfca
0xfd4: vfd4(0x0) = CONST 
0xfd6: vfd6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfeb: vfeb(0x0) = AND vfd6(0xffffffffffffffffffffffffffffffffffffffff) vfd4(0x0)
0xfed: MSTORE vfd3 vfeb(0x0)
0xff0: RETURNPRIVATE vf68arg0 vf6b
----------------------------------

Begin block 0xff1
prev = {'0x76f'}, next = {'0x7e0'}
----------------------------------
Block 0xff1
0xff2: vff2(0x2190) = CONST 
0xff6: vff6(0xfff) = CONST 
0xffa: CODECOPY v7d7 vff6(0xfff) vff2(0x2190)
0xffb: vffb = ADD vff2(0x2190) v7d7
0xffd: JUMP v7d8(0x7e0)
----------------------------------

Begin block 0x3227
prev = {'0x10', '0x41'}, next = {}
----------------------------------
Block 0x3227
0x3228: v3228(0x4c) = CONST 
0x3229: CALLPRIVATE v3228(0x4c)
----------------------------------

Begin block 0x322a
prev = {'0x1a'}, next = {}
----------------------------------
Block 0x322a
0x322b: v322b(0x51) = CONST 
0x322c: CALLPRIVATE v322b(0x51)
----------------------------------

Begin block 0x322d
prev = {'0x2b'}, next = {}
----------------------------------
Block 0x322d
0x322e: v322e(0x129) = CONST 
0x322f: CALLPRIVATE v322e(0x129)
----------------------------------

Begin block 0x3230
prev = {'0x36'}, next = {}
----------------------------------
Block 0x3230
0x3231: v3231(0x22e) = CONST 
0x3232: CALLPRIVATE v3231(0x22e)
----------------------------------

Begin block 0x3233
prev = {'0x41'}, next = {}
----------------------------------
Block 0x3233
0x3234: v3234(0x278) = CONST 
0x3235: CALLPRIVATE v3234(0x278)
----------------------------------
