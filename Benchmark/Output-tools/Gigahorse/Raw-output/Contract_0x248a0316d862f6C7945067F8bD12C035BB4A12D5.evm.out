
Begin block 0x0
prev = {}, next = {'0x17ae', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x1784: v1784(0x17ae) = CONST 
0x1785: JUMPI v1784(0x17ae) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x41', '0x17b1'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x1786: v1786(0x17b1) = CONST 
0x1787: JUMPI v1786(0x17b1) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x4c', '0x17b4'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x1788: v1788(0x17b4) = CONST 
0x1789: JUMPI v1788(0x17b4) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x17b7'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x178a: v178a(0x17b7) = CONST 
0x178b: JUMPI v178a(0x17b7) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x17ba', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0x178c: v178c(0x17ba) = CONST 
0x178d: JUMPI v178c(0x17ba) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x17bd', '0x6d'}
----------------------------------
Block 0x62
0x63: v63(0x313ce567) = CONST 
0x68: v68 = EQ v63(0x313ce567) v35
0x178e: v178e(0x17bd) = CONST 
0x178f: JUMPI v178e(0x17bd) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x17c0', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x3eaaf86b) = CONST 
0x73: v73 = EQ v6e(0x3eaaf86b) v35
0x1790: v1790(0x17c0) = CONST 
0x1791: JUMPI v1790(0x17c0) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x83', '0x17c3'}
----------------------------------
Block 0x78
0x79: v79(0x70a08231) = CONST 
0x7e: v7e = EQ v79(0x70a08231) v35
0x1792: v1792(0x17c3) = CONST 
0x1793: JUMPI v1792(0x17c3) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x8e', '0x17c6'}
----------------------------------
Block 0x83
0x84: v84(0x79ba5097) = CONST 
0x89: v89 = EQ v84(0x79ba5097) v35
0x1794: v1794(0x17c6) = CONST 
0x1795: JUMPI v1794(0x17c6) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x17c9', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x8da5cb5b) = CONST 
0x94: v94 = EQ v8f(0x8da5cb5b) v35
0x1796: v1796(0x17c9) = CONST 
0x1797: JUMPI v1796(0x17c9) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xa4', '0x17cc'}
----------------------------------
Block 0x99
0x9a: v9a(0x95d89b41) = CONST 
0x9f: v9f = EQ v9a(0x95d89b41) v35
0x1798: v1798(0x17cc) = CONST 
0x1799: JUMPI v1798(0x17cc) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0x17cf', '0xaf'}
----------------------------------
Block 0xa4
0xa5: va5(0xa293d1e8) = CONST 
0xaa: vaa = EQ va5(0xa293d1e8) v35
0x179a: v179a(0x17cf) = CONST 
0x179b: JUMPI v179a(0x17cf) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0xba', '0x17d2'}
----------------------------------
Block 0xaf
0xb0: vb0(0xa9059cbb) = CONST 
0xb5: vb5 = EQ vb0(0xa9059cbb) v35
0x179c: v179c(0x17d2) = CONST 
0x179d: JUMPI v179c(0x17d2) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0xc5', '0x17d5'}
----------------------------------
Block 0xba
0xbb: vbb(0xb5931f7c) = CONST 
0xc0: vc0 = EQ vbb(0xb5931f7c) v35
0x179e: v179e(0x17d5) = CONST 
0x179f: JUMPI v179e(0x17d5) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0xd0', '0x17d8'}
----------------------------------
Block 0xc5
0xc6: vc6(0xcae9ca51) = CONST 
0xcb: vcb = EQ vc6(0xcae9ca51) v35
0x17a0: v17a0(0x17d8) = CONST 
0x17a1: JUMPI v17a0(0x17d8) vcb
----------------------------------

Begin block 0xd0
prev = {'0xc5'}, next = {'0xdb', '0x17db'}
----------------------------------
Block 0xd0
0xd1: vd1(0xd05c78da) = CONST 
0xd6: vd6 = EQ vd1(0xd05c78da) v35
0x17a2: v17a2(0x17db) = CONST 
0x17a3: JUMPI v17a2(0x17db) vd6
----------------------------------

Begin block 0xdb
prev = {'0xd0'}, next = {'0x17de', '0xe6'}
----------------------------------
Block 0xdb
0xdc: vdc(0xd4ee1d90) = CONST 
0xe1: ve1 = EQ vdc(0xd4ee1d90) v35
0x17a4: v17a4(0x17de) = CONST 
0x17a5: JUMPI v17a4(0x17de) ve1
----------------------------------

Begin block 0xe6
prev = {'0xdb'}, next = {'0x17e1', '0xf1'}
----------------------------------
Block 0xe6
0xe7: ve7(0xdc39d06d) = CONST 
0xec: vec = EQ ve7(0xdc39d06d) v35
0x17a6: v17a6(0x17e1) = CONST 
0x17a7: JUMPI v17a6(0x17e1) vec
----------------------------------

Begin block 0xf1
prev = {'0xe6'}, next = {'0x17e4', '0xfc'}
----------------------------------
Block 0xf1
0xf2: vf2(0xdd62ed3e) = CONST 
0xf7: vf7 = EQ vf2(0xdd62ed3e) v35
0x17a8: v17a8(0x17e4) = CONST 
0x17a9: JUMPI v17a8(0x17e4) vf7
----------------------------------

Begin block 0xfc
prev = {'0xf1'}, next = {'0x17e7', '0x107'}
----------------------------------
Block 0xfc
0xfd: vfd(0xe6cb9013) = CONST 
0x102: v102 = EQ vfd(0xe6cb9013) v35
0x17aa: v17aa(0x17e7) = CONST 
0x17ab: JUMPI v17aa(0x17e7) v102
----------------------------------

Begin block 0x107
prev = {'0xfc'}, next = {'0x17ae', '0x17ea'}
----------------------------------
Block 0x107
0x108: v108(0xf2fde38b) = CONST 
0x10d: v10d = EQ v108(0xf2fde38b) v35
0x17ac: v17ac(0x17ea) = CONST 
0x17ad: JUMPI v17ac(0x17ea) v10d
----------------------------------

Begin block 0x112
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x112
0x113: v113(0x0) = CONST 
0x116: REVERT v113(0x0) v113(0x0)
----------------------------------

Begin block 0x117
prev = {}, next = {'0x123', '0x11f'}
----------------------------------
function name()()
Block 0x117
0x118: v118 = CALLVALUE 
0x11a: v11a = ISZERO v118
0x11b: v11b(0x123) = CONST 
0x11e: JUMPI v11b(0x123) v11a
----------------------------------

Begin block 0x11f
prev = {'0x117'}, next = {}
----------------------------------
Block 0x11f
0x11f: v11f(0x0) = CONST 
0x122: REVERT v11f(0x0) v11f(0x0)
----------------------------------

Begin block 0x123
prev = {'0x117'}, next = {'0x918'}
----------------------------------
Block 0x123
0x125: v125(0x12c) = CONST 
0x128: v128(0x918) = CONST 
0x12b: JUMP v128(0x918)
----------------------------------

Begin block 0x12c
prev = {'0x9ae'}, next = {'0x151'}
----------------------------------
Block 0x12c
0x12d: v12d(0x40) = CONST 
0x12f: v12f = MLOAD v12d(0x40)
0x132: v132(0x20) = CONST 
0x134: v134 = ADD v132(0x20) v12f
0x137: v137 = SUB v134 v12f
0x139: MSTORE v12f v137
0x13d: v13d = MLOAD v93d
0x13f: MSTORE v134 v13d
0x140: v140(0x20) = CONST 
0x142: v142 = ADD v140(0x20) v134
0x146: v146 = MLOAD v93d
0x148: v148(0x20) = CONST 
0x14a: v14a = ADD v148(0x20) v93d
0x14f: v14f(0x0) = CONST 
----------------------------------

Begin block 0x151
prev = {'0x15a', '0x12c'}, next = {'0x16c', '0x15a'}
----------------------------------
Block 0x151
0x151_0x0: v151_0 = PHI v14f(0x0) v165
0x154: v154 = LT v151_0 v146
0x155: v155 = ISZERO v154
0x156: v156(0x16c) = CONST 
0x159: JUMPI v156(0x16c) v155
----------------------------------

Begin block 0x15a
prev = {'0x151'}, next = {'0x151'}
----------------------------------
Block 0x15a
0x15a_0x0: v15a_0 = PHI v14f(0x0) v165
0x15c: v15c = ADD v14a v15a_0
0x15d: v15d = MLOAD v15c
0x160: v160 = ADD v142 v15a_0
0x161: MSTORE v160 v15d
0x162: v162(0x20) = CONST 
0x165: v165 = ADD v15a_0 v162(0x20)
0x168: v168(0x151) = CONST 
0x16b: JUMP v168(0x151)
----------------------------------

Begin block 0x16c
prev = {'0x151'}, next = {'0x180', '0x199'}
----------------------------------
Block 0x16c
0x175: v175 = ADD v146 v142
0x177: v177(0x1f) = CONST 
0x179: v179 = AND v177(0x1f) v146
0x17b: v17b = ISZERO v179
0x17c: v17c(0x199) = CONST 
0x17f: JUMPI v17c(0x199) v17b
----------------------------------

Begin block 0x180
prev = {'0x16c'}, next = {'0x199'}
----------------------------------
Block 0x180
0x182: v182 = SUB v175 v179
0x184: v184 = MLOAD v182
0x185: v185(0x1) = CONST 
0x188: v188(0x20) = CONST 
0x18a: v18a = SUB v188(0x20) v179
0x18b: v18b(0x100) = CONST 
0x18e: v18e = EXP v18b(0x100) v18a
0x18f: v18f = SUB v18e v185(0x1)
0x190: v190 = NOT v18f
0x191: v191 = AND v190 v184
0x193: MSTORE v182 v191
0x194: v194(0x20) = CONST 
0x196: v196 = ADD v194(0x20) v182
----------------------------------

Begin block 0x199
prev = {'0x16c', '0x180'}, next = {}
----------------------------------
Block 0x199
0x199_0x1: v199_1 = PHI v175 v196
0x19f: v19f(0x40) = CONST 
0x1a1: v1a1 = MLOAD v19f(0x40)
0x1a4: v1a4 = SUB v199_1 v1a1
0x1a6: RETURN v1a1 v1a4
----------------------------------

Begin block 0x1a7
prev = {}, next = {'0x1af', '0x1b3'}
----------------------------------
function approve(address,uint256)()
Block 0x1a7
0x1a8: v1a8 = CALLVALUE 
0x1aa: v1aa = ISZERO v1a8
0x1ab: v1ab(0x1b3) = CONST 
0x1ae: JUMPI v1ab(0x1b3) v1aa
----------------------------------

Begin block 0x1af
prev = {'0x1a7'}, next = {}
----------------------------------
Block 0x1af
0x1af: v1af(0x0) = CONST 
0x1b2: REVERT v1af(0x0) v1af(0x0)
----------------------------------

Begin block 0x1b3
prev = {'0x1a7'}, next = {'0x1ca', '0x1c6'}
----------------------------------
Block 0x1b3
0x1b5: v1b5(0x200) = CONST 
0x1b8: v1b8(0x4) = CONST 
0x1bb: v1bb = CALLDATASIZE 
0x1bc: v1bc = SUB v1bb v1b8(0x4)
0x1bd: v1bd(0x40) = CONST 
0x1c0: v1c0 = LT v1bc v1bd(0x40)
0x1c1: v1c1 = ISZERO v1c0
0x1c2: v1c2(0x1ca) = CONST 
0x1c5: JUMPI v1c2(0x1ca) v1c1
----------------------------------

Begin block 0x1c6
prev = {'0x1b3'}, next = {}
----------------------------------
Block 0x1c6
0x1c6: v1c6(0x0) = CONST 
0x1c9: REVERT v1c6(0x0) v1c6(0x0)
----------------------------------

Begin block 0x1ca
prev = {'0x1b3'}, next = {'0x9b6'}
----------------------------------
Block 0x1ca
0x1cc: v1cc = ADD v1b8(0x4) v1bc
0x1d0: v1d0 = CALLDATALOAD v1b8(0x4)
0x1d1: v1d1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1e6: v1e6 = AND v1d1(0xffffffffffffffffffffffffffffffffffffffff) v1d0
0x1e8: v1e8(0x20) = CONST 
0x1ea: v1ea = ADD v1e8(0x20) v1b8(0x4)
0x1f0: v1f0 = CALLDATALOAD v1ea
0x1f2: v1f2(0x20) = CONST 
0x1f4: v1f4 = ADD v1f2(0x20) v1ea
0x1fc: v1fc(0x9b6) = CONST 
0x1ff: JUMP v1fc(0x9b6)
----------------------------------

Begin block 0x200
prev = {'0x9b6'}, next = {}
----------------------------------
Block 0x200
0x201: v201(0x40) = CONST 
0x203: v203 = MLOAD v201(0x40)
0x206: v206 = ISZERO va9f(0x1)
0x207: v207 = ISZERO v206
0x208: v208 = ISZERO v207
0x209: v209 = ISZERO v208
0x20b: MSTORE v203 v209
0x20c: v20c(0x20) = CONST 
0x20e: v20e = ADD v20c(0x20) v203
0x212: v212(0x40) = CONST 
0x214: v214 = MLOAD v212(0x40)
0x217: v217 = SUB v20e v214
0x219: RETURN v214 v217
----------------------------------

Begin block 0x21a
prev = {}, next = {'0x222', '0x226'}
----------------------------------
function totalSupply()()
Block 0x21a
0x21b: v21b = CALLVALUE 
0x21d: v21d = ISZERO v21b
0x21e: v21e(0x226) = CONST 
0x221: JUMPI v21e(0x226) v21d
----------------------------------

Begin block 0x222
prev = {'0x21a'}, next = {}
----------------------------------
Block 0x222
0x222: v222(0x0) = CONST 
0x225: REVERT v222(0x0) v222(0x0)
----------------------------------

Begin block 0x226
prev = {'0x21a'}, next = {'0xaa8'}
----------------------------------
Block 0x226
0x228: v228(0x22f) = CONST 
0x22b: v22b(0xaa8) = CONST 
0x22e: JUMP v22b(0xaa8)
----------------------------------

Begin block 0x22f
prev = {'0xaa8'}, next = {}
----------------------------------
Block 0x22f
0x230: v230(0x40) = CONST 
0x232: v232 = MLOAD v230(0x40)
0x236: MSTORE v232 vaee
0x237: v237(0x20) = CONST 
0x239: v239 = ADD v237(0x20) v232
0x23d: v23d(0x40) = CONST 
0x23f: v23f = MLOAD v23d(0x40)
0x242: v242 = SUB v239 v23f
0x244: RETURN v23f v242
----------------------------------

Begin block 0x245
prev = {}, next = {'0x24d', '0x251'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x245
0x246: v246 = CALLVALUE 
0x248: v248 = ISZERO v246
0x249: v249(0x251) = CONST 
0x24c: JUMPI v249(0x251) v248
----------------------------------

Begin block 0x24d
prev = {'0x245'}, next = {}
----------------------------------
Block 0x24d
0x24d: v24d(0x0) = CONST 
0x250: REVERT v24d(0x0) v24d(0x0)
----------------------------------

Begin block 0x251
prev = {'0x245'}, next = {'0x264', '0x268'}
----------------------------------
Block 0x251
0x253: v253(0x2be) = CONST 
0x256: v256(0x4) = CONST 
0x259: v259 = CALLDATASIZE 
0x25a: v25a = SUB v259 v256(0x4)
0x25b: v25b(0x60) = CONST 
0x25e: v25e = LT v25a v25b(0x60)
0x25f: v25f = ISZERO v25e
0x260: v260(0x268) = CONST 
0x263: JUMPI v260(0x268) v25f
----------------------------------

Begin block 0x264
prev = {'0x251'}, next = {}
----------------------------------
Block 0x264
0x264: v264(0x0) = CONST 
0x267: REVERT v264(0x0) v264(0x0)
----------------------------------

Begin block 0x268
prev = {'0x251'}, next = {'0xaf3'}
----------------------------------
Block 0x268
0x26a: v26a = ADD v256(0x4) v25a
0x26e: v26e = CALLDATALOAD v256(0x4)
0x26f: v26f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x284: v284 = AND v26f(0xffffffffffffffffffffffffffffffffffffffff) v26e
0x286: v286(0x20) = CONST 
0x288: v288 = ADD v286(0x20) v256(0x4)
0x28e: v28e = CALLDATALOAD v288
0x28f: v28f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2a4: v2a4 = AND v28f(0xffffffffffffffffffffffffffffffffffffffff) v28e
0x2a6: v2a6(0x20) = CONST 
0x2a8: v2a8 = ADD v2a6(0x20) v288
0x2ae: v2ae = CALLDATALOAD v2a8
0x2b0: v2b0(0x20) = CONST 
0x2b2: v2b2 = ADD v2b0(0x20) v2a8
0x2ba: v2ba(0xaf3) = CONST 
0x2bd: JUMP v2ba(0xaf3)
----------------------------------

Begin block 0x2be
prev = {'0xcd0'}, next = {}
----------------------------------
Block 0x2be
0x2bf: v2bf(0x40) = CONST 
0x2c1: v2c1 = MLOAD v2bf(0x40)
0x2c4: v2c4 = ISZERO vd79(0x1)
0x2c5: v2c5 = ISZERO v2c4
0x2c6: v2c6 = ISZERO v2c5
0x2c7: v2c7 = ISZERO v2c6
0x2c9: MSTORE v2c1 v2c7
0x2ca: v2ca(0x20) = CONST 
0x2cc: v2cc = ADD v2ca(0x20) v2c1
0x2d0: v2d0(0x40) = CONST 
0x2d2: v2d2 = MLOAD v2d0(0x40)
0x2d5: v2d5 = SUB v2cc v2d2
0x2d7: RETURN v2d2 v2d5
----------------------------------

Begin block 0x2d8
prev = {}, next = {'0x2e4', '0x2e0'}
----------------------------------
function decimals()()
Block 0x2d8
0x2d9: v2d9 = CALLVALUE 
0x2db: v2db = ISZERO v2d9
0x2dc: v2dc(0x2e4) = CONST 
0x2df: JUMPI v2dc(0x2e4) v2db
----------------------------------

Begin block 0x2e0
prev = {'0x2d8'}, next = {}
----------------------------------
Block 0x2e0
0x2e0: v2e0(0x0) = CONST 
0x2e3: REVERT v2e0(0x0) v2e0(0x0)
----------------------------------

Begin block 0x2e4
prev = {'0x2d8'}, next = {'0xd83'}
----------------------------------
Block 0x2e4
0x2e6: v2e6(0x2ed) = CONST 
0x2e9: v2e9(0xd83) = CONST 
0x2ec: JUMP v2e9(0xd83)
----------------------------------

Begin block 0x2ed
prev = {'0xd83'}, next = {}
----------------------------------
Block 0x2ed
0x2ee: v2ee(0x40) = CONST 
0x2f0: v2f0 = MLOAD v2ee(0x40)
0x2f3: v2f3(0xff) = CONST 
0x2f5: v2f5 = AND v2f3(0xff) vd93
0x2f6: v2f6(0xff) = CONST 
0x2f8: v2f8 = AND v2f6(0xff) v2f5
0x2fa: MSTORE v2f0 v2f8
0x2fb: v2fb(0x20) = CONST 
0x2fd: v2fd = ADD v2fb(0x20) v2f0
0x301: v301(0x40) = CONST 
0x303: v303 = MLOAD v301(0x40)
0x306: v306 = SUB v2fd v303
0x308: RETURN v303 v306
----------------------------------

Begin block 0x309
prev = {}, next = {'0x315', '0x311'}
----------------------------------
function _totalSupply()()
Block 0x309
0x30a: v30a = CALLVALUE 
0x30c: v30c = ISZERO v30a
0x30d: v30d(0x315) = CONST 
0x310: JUMPI v30d(0x315) v30c
----------------------------------

Begin block 0x311
prev = {'0x309'}, next = {}
----------------------------------
Block 0x311
0x311: v311(0x0) = CONST 
0x314: REVERT v311(0x0) v311(0x0)
----------------------------------

Begin block 0x315
prev = {'0x309'}, next = {'0xd96'}
----------------------------------
Block 0x315
0x317: v317(0x31e) = CONST 
0x31a: v31a(0xd96) = CONST 
0x31d: JUMP v31a(0xd96)
----------------------------------

Begin block 0x31e
prev = {'0xd96'}, next = {}
----------------------------------
Block 0x31e
0x31f: v31f(0x40) = CONST 
0x321: v321 = MLOAD v31f(0x40)
0x325: MSTORE v321 vd99
0x326: v326(0x20) = CONST 
0x328: v328 = ADD v326(0x20) v321
0x32c: v32c(0x40) = CONST 
0x32e: v32e = MLOAD v32c(0x40)
0x331: v331 = SUB v328 v32e
0x333: RETURN v32e v331
----------------------------------

Begin block 0x334
prev = {}, next = {'0x33c', '0x340'}
----------------------------------
function balanceOf(address)()
Block 0x334
0x335: v335 = CALLVALUE 
0x337: v337 = ISZERO v335
0x338: v338(0x340) = CONST 
0x33b: JUMPI v338(0x340) v337
----------------------------------

Begin block 0x33c
prev = {'0x334'}, next = {}
----------------------------------
Block 0x33c
0x33c: v33c(0x0) = CONST 
0x33f: REVERT v33c(0x0) v33c(0x0)
----------------------------------

Begin block 0x340
prev = {'0x334'}, next = {'0x353', '0x357'}
----------------------------------
Block 0x340
0x342: v342(0x383) = CONST 
0x345: v345(0x4) = CONST 
0x348: v348 = CALLDATASIZE 
0x349: v349 = SUB v348 v345(0x4)
0x34a: v34a(0x20) = CONST 
0x34d: v34d = LT v349 v34a(0x20)
0x34e: v34e = ISZERO v34d
0x34f: v34f(0x357) = CONST 
0x352: JUMPI v34f(0x357) v34e
----------------------------------

Begin block 0x353
prev = {'0x340'}, next = {}
----------------------------------
Block 0x353
0x353: v353(0x0) = CONST 
0x356: REVERT v353(0x0) v353(0x0)
----------------------------------

Begin block 0x357
prev = {'0x340'}, next = {'0xd9c'}
----------------------------------
Block 0x357
0x359: v359 = ADD v345(0x4) v349
0x35d: v35d = CALLDATALOAD v345(0x4)
0x35e: v35e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x373: v373 = AND v35e(0xffffffffffffffffffffffffffffffffffffffff) v35d
0x375: v375(0x20) = CONST 
0x377: v377 = ADD v375(0x20) v345(0x4)
0x37f: v37f(0xd9c) = CONST 
0x382: JUMP v37f(0xd9c)
----------------------------------

Begin block 0x383
prev = {'0xd9c'}, next = {}
----------------------------------
Block 0x383
0x384: v384(0x40) = CONST 
0x386: v386 = MLOAD v384(0x40)
0x38a: MSTORE v386 vdde
0x38b: v38b(0x20) = CONST 
0x38d: v38d = ADD v38b(0x20) v386
0x391: v391(0x40) = CONST 
0x393: v393 = MLOAD v391(0x40)
0x396: v396 = SUB v38d v393
0x398: RETURN v393 v396
----------------------------------

Begin block 0x399
prev = {}, next = {'0x3a5', '0x3a1'}
----------------------------------
function acceptOwnership()()
Block 0x399
0x39a: v39a = CALLVALUE 
0x39c: v39c = ISZERO v39a
0x39d: v39d(0x3a5) = CONST 
0x3a0: JUMPI v39d(0x3a5) v39c
----------------------------------

Begin block 0x3a1
prev = {'0x399'}, next = {}
----------------------------------
Block 0x3a1
0x3a1: v3a1(0x0) = CONST 
0x3a4: REVERT v3a1(0x0) v3a1(0x0)
----------------------------------

Begin block 0x3a5
prev = {'0x399'}, next = {'0xde5'}
----------------------------------
Block 0x3a5
0x3a7: v3a7(0x3ae) = CONST 
0x3aa: v3aa(0xde5) = CONST 
0x3ad: JUMP v3aa(0xde5)
----------------------------------

Begin block 0x3ae
prev = {'0xe41'}, next = {}
----------------------------------
Block 0x3ae
0x3af: STOP 
----------------------------------

Begin block 0x3b0
prev = {}, next = {'0x3bc', '0x3b8'}
----------------------------------
function owner()()
Block 0x3b0
0x3b1: v3b1 = CALLVALUE 
0x3b3: v3b3 = ISZERO v3b1
0x3b4: v3b4(0x3bc) = CONST 
0x3b7: JUMPI v3b4(0x3bc) v3b3
----------------------------------

Begin block 0x3b8
prev = {'0x3b0'}, next = {}
----------------------------------
Block 0x3b8
0x3b8: v3b8(0x0) = CONST 
0x3bb: REVERT v3b8(0x0) v3b8(0x0)
----------------------------------

Begin block 0x3bc
prev = {'0x3b0'}, next = {'0xf84'}
----------------------------------
Block 0x3bc
0x3be: v3be(0x3c5) = CONST 
0x3c1: v3c1(0xf84) = CONST 
0x3c4: JUMP v3c1(0xf84)
----------------------------------

Begin block 0x3c5
prev = {'0xf84'}, next = {}
----------------------------------
Block 0x3c5
0x3c6: v3c6(0x40) = CONST 
0x3c8: v3c8 = MLOAD v3c6(0x40)
0x3cb: v3cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3e0: v3e0 = AND v3cb(0xffffffffffffffffffffffffffffffffffffffff) vfa6
0x3e1: v3e1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3f6: v3f6 = AND v3e1(0xffffffffffffffffffffffffffffffffffffffff) v3e0
0x3f8: MSTORE v3c8 v3f6
0x3f9: v3f9(0x20) = CONST 
0x3fb: v3fb = ADD v3f9(0x20) v3c8
0x3ff: v3ff(0x40) = CONST 
0x401: v401 = MLOAD v3ff(0x40)
0x404: v404 = SUB v3fb v401
0x406: RETURN v401 v404
----------------------------------

Begin block 0x407
prev = {}, next = {'0x40f', '0x413'}
----------------------------------
function symbol()()
Block 0x407
0x408: v408 = CALLVALUE 
0x40a: v40a = ISZERO v408
0x40b: v40b(0x413) = CONST 
0x40e: JUMPI v40b(0x413) v40a
----------------------------------

Begin block 0x40f
prev = {'0x407'}, next = {}
----------------------------------
Block 0x40f
0x40f: v40f(0x0) = CONST 
0x412: REVERT v40f(0x0) v40f(0x0)
----------------------------------

Begin block 0x413
prev = {'0x407'}, next = {'0xfa9'}
----------------------------------
Block 0x413
0x415: v415(0x41c) = CONST 
0x418: v418(0xfa9) = CONST 
0x41b: JUMP v418(0xfa9)
----------------------------------

Begin block 0x41c
prev = {'0x103f'}, next = {'0x441'}
----------------------------------
Block 0x41c
0x41d: v41d(0x40) = CONST 
0x41f: v41f = MLOAD v41d(0x40)
0x422: v422(0x20) = CONST 
0x424: v424 = ADD v422(0x20) v41f
0x427: v427 = SUB v424 v41f
0x429: MSTORE v41f v427
0x42d: v42d = MLOAD vfce
0x42f: MSTORE v424 v42d
0x430: v430(0x20) = CONST 
0x432: v432 = ADD v430(0x20) v424
0x436: v436 = MLOAD vfce
0x438: v438(0x20) = CONST 
0x43a: v43a = ADD v438(0x20) vfce
0x43f: v43f(0x0) = CONST 
----------------------------------

Begin block 0x441
prev = {'0x41c', '0x44a'}, next = {'0x45c', '0x44a'}
----------------------------------
Block 0x441
0x441_0x0: v441_0 = PHI v43f(0x0) v455
0x444: v444 = LT v441_0 v436
0x445: v445 = ISZERO v444
0x446: v446(0x45c) = CONST 
0x449: JUMPI v446(0x45c) v445
----------------------------------

Begin block 0x44a
prev = {'0x441'}, next = {'0x441'}
----------------------------------
Block 0x44a
0x44a_0x0: v44a_0 = PHI v43f(0x0) v455
0x44c: v44c = ADD v43a v44a_0
0x44d: v44d = MLOAD v44c
0x450: v450 = ADD v432 v44a_0
0x451: MSTORE v450 v44d
0x452: v452(0x20) = CONST 
0x455: v455 = ADD v44a_0 v452(0x20)
0x458: v458(0x441) = CONST 
0x45b: JUMP v458(0x441)
----------------------------------

Begin block 0x45c
prev = {'0x441'}, next = {'0x489', '0x470'}
----------------------------------
Block 0x45c
0x465: v465 = ADD v436 v432
0x467: v467(0x1f) = CONST 
0x469: v469 = AND v467(0x1f) v436
0x46b: v46b = ISZERO v469
0x46c: v46c(0x489) = CONST 
0x46f: JUMPI v46c(0x489) v46b
----------------------------------

Begin block 0x470
prev = {'0x45c'}, next = {'0x489'}
----------------------------------
Block 0x470
0x472: v472 = SUB v465 v469
0x474: v474 = MLOAD v472
0x475: v475(0x1) = CONST 
0x478: v478(0x20) = CONST 
0x47a: v47a = SUB v478(0x20) v469
0x47b: v47b(0x100) = CONST 
0x47e: v47e = EXP v47b(0x100) v47a
0x47f: v47f = SUB v47e v475(0x1)
0x480: v480 = NOT v47f
0x481: v481 = AND v480 v474
0x483: MSTORE v472 v481
0x484: v484(0x20) = CONST 
0x486: v486 = ADD v484(0x20) v472
----------------------------------

Begin block 0x489
prev = {'0x45c', '0x470'}, next = {}
----------------------------------
Block 0x489
0x489_0x1: v489_1 = PHI v465 v486
0x48f: v48f(0x40) = CONST 
0x491: v491 = MLOAD v48f(0x40)
0x494: v494 = SUB v489_1 v491
0x496: RETURN v491 v494
----------------------------------

Begin block 0x497
prev = {}, next = {'0x4a3', '0x49f'}
----------------------------------
function safeSub(uint256,uint256)()
Block 0x497
0x498: v498 = CALLVALUE 
0x49a: v49a = ISZERO v498
0x49b: v49b(0x4a3) = CONST 
0x49e: JUMPI v49b(0x4a3) v49a
----------------------------------

Begin block 0x49f
prev = {'0x497'}, next = {}
----------------------------------
Block 0x49f
0x49f: v49f(0x0) = CONST 
0x4a2: REVERT v49f(0x0) v49f(0x0)
----------------------------------

Begin block 0x4a3
prev = {'0x497'}, next = {'0x4b6', '0x4ba'}
----------------------------------
Block 0x4a3
0x4a5: v4a5(0x4da) = CONST 
0x4a8: v4a8(0x4) = CONST 
0x4ab: v4ab = CALLDATASIZE 
0x4ac: v4ac = SUB v4ab v4a8(0x4)
0x4ad: v4ad(0x40) = CONST 
0x4b0: v4b0 = LT v4ac v4ad(0x40)
0x4b1: v4b1 = ISZERO v4b0
0x4b2: v4b2(0x4ba) = CONST 
0x4b5: JUMPI v4b2(0x4ba) v4b1
----------------------------------

Begin block 0x4b6
prev = {'0x4a3'}, next = {}
----------------------------------
Block 0x4b6
0x4b6: v4b6(0x0) = CONST 
0x4b9: REVERT v4b6(0x0) v4b6(0x0)
----------------------------------

Begin block 0x4ba
prev = {'0x4a3'}, next = {'0x10470x497'}
----------------------------------
Block 0x4ba
0x4bc: v4bc = ADD v4a8(0x4) v4ac
0x4c0: v4c0 = CALLDATALOAD v4a8(0x4)
0x4c2: v4c2(0x20) = CONST 
0x4c4: v4c4 = ADD v4c2(0x20) v4a8(0x4)
0x4ca: v4ca = CALLDATALOAD v4c4
0x4cc: v4cc(0x20) = CONST 
0x4ce: v4ce = ADD v4cc(0x20) v4c4
0x4d6: v4d6(0x1047) = CONST 
0x4d9: JUMP v4d6(0x1047)
----------------------------------

Begin block 0x4da
prev = {'0x10580x497'}, next = {}
----------------------------------
Block 0x4da
0x4db: v4db(0x40) = CONST 
0x4dd: v4dd = MLOAD v4db(0x40)
0x4e1: MSTORE v4dd v497105b
0x4e2: v4e2(0x20) = CONST 
0x4e4: v4e4 = ADD v4e2(0x20) v4dd
0x4e8: v4e8(0x40) = CONST 
0x4ea: v4ea = MLOAD v4e8(0x40)
0x4ed: v4ed = SUB v4e4 v4ea
0x4ef: RETURN v4ea v4ed
----------------------------------

Begin block 0x4f0
prev = {}, next = {'0x4fc', '0x4f8'}
----------------------------------
function transfer(address,uint256)()
Block 0x4f0
0x4f1: v4f1 = CALLVALUE 
0x4f3: v4f3 = ISZERO v4f1
0x4f4: v4f4(0x4fc) = CONST 
0x4f7: JUMPI v4f4(0x4fc) v4f3
----------------------------------

Begin block 0x4f8
prev = {'0x4f0'}, next = {}
----------------------------------
Block 0x4f8
0x4f8: v4f8(0x0) = CONST 
0x4fb: REVERT v4f8(0x0) v4f8(0x0)
----------------------------------

Begin block 0x4fc
prev = {'0x4f0'}, next = {'0x513', '0x50f'}
----------------------------------
Block 0x4fc
0x4fe: v4fe(0x549) = CONST 
0x501: v501(0x4) = CONST 
0x504: v504 = CALLDATASIZE 
0x505: v505 = SUB v504 v501(0x4)
0x506: v506(0x40) = CONST 
0x509: v509 = LT v505 v506(0x40)
0x50a: v50a = ISZERO v509
0x50b: v50b(0x513) = CONST 
0x50e: JUMPI v50b(0x513) v50a
----------------------------------

Begin block 0x50f
prev = {'0x4fc'}, next = {}
----------------------------------
Block 0x50f
0x50f: v50f(0x0) = CONST 
0x512: REVERT v50f(0x0) v50f(0x0)
----------------------------------

Begin block 0x513
prev = {'0x4fc'}, next = {'0x1063'}
----------------------------------
Block 0x513
0x515: v515 = ADD v501(0x4) v505
0x519: v519 = CALLDATALOAD v501(0x4)
0x51a: v51a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x52f: v52f = AND v51a(0xffffffffffffffffffffffffffffffffffffffff) v519
0x531: v531(0x20) = CONST 
0x533: v533 = ADD v531(0x20) v501(0x4)
0x539: v539 = CALLDATALOAD v533
0x53b: v53b(0x20) = CONST 
0x53d: v53d = ADD v53b(0x20) v533
0x545: v545(0x1063) = CONST 
0x548: JUMP v545(0x1063)
----------------------------------

Begin block 0x549
prev = {'0x113a'}, next = {}
----------------------------------
Block 0x549
0x54a: v54a(0x40) = CONST 
0x54c: v54c = MLOAD v54a(0x40)
0x54f: v54f = ISZERO v11e3(0x1)
0x550: v550 = ISZERO v54f
0x551: v551 = ISZERO v550
0x552: v552 = ISZERO v551
0x554: MSTORE v54c v552
0x555: v555(0x20) = CONST 
0x557: v557 = ADD v555(0x20) v54c
0x55b: v55b(0x40) = CONST 
0x55d: v55d = MLOAD v55b(0x40)
0x560: v560 = SUB v557 v55d
0x562: RETURN v55d v560
----------------------------------

Begin block 0x563
prev = {}, next = {'0x56f', '0x56b'}
----------------------------------
function safeDiv(uint256,uint256)()
Block 0x563
0x564: v564 = CALLVALUE 
0x566: v566 = ISZERO v564
0x567: v567(0x56f) = CONST 
0x56a: JUMPI v567(0x56f) v566
----------------------------------

Begin block 0x56b
prev = {'0x563'}, next = {}
----------------------------------
Block 0x56b
0x56b: v56b(0x0) = CONST 
0x56e: REVERT v56b(0x0) v56b(0x0)
----------------------------------

Begin block 0x56f
prev = {'0x563'}, next = {'0x582', '0x586'}
----------------------------------
Block 0x56f
0x571: v571(0x5a6) = CONST 
0x574: v574(0x4) = CONST 
0x577: v577 = CALLDATASIZE 
0x578: v578 = SUB v577 v574(0x4)
0x579: v579(0x40) = CONST 
0x57c: v57c = LT v578 v579(0x40)
0x57d: v57d = ISZERO v57c
0x57e: v57e(0x586) = CONST 
0x581: JUMPI v57e(0x586) v57d
----------------------------------

Begin block 0x582
prev = {'0x56f'}, next = {}
----------------------------------
Block 0x582
0x582: v582(0x0) = CONST 
0x585: REVERT v582(0x0) v582(0x0)
----------------------------------

Begin block 0x586
prev = {'0x56f'}, next = {'0x11ec'}
----------------------------------
Block 0x586
0x588: v588 = ADD v574(0x4) v578
0x58c: v58c = CALLDATALOAD v574(0x4)
0x58e: v58e(0x20) = CONST 
0x590: v590 = ADD v58e(0x20) v574(0x4)
0x596: v596 = CALLDATALOAD v590
0x598: v598(0x20) = CONST 
0x59a: v59a = ADD v598(0x20) v590
0x5a2: v5a2(0x11ec) = CONST 
0x5a5: JUMP v5a2(0x11ec)
----------------------------------

Begin block 0x5a6
prev = {'0x1207'}, next = {}
----------------------------------
Block 0x5a6
0x5a7: v5a7(0x40) = CONST 
0x5a9: v5a9 = MLOAD v5a7(0x40)
0x5ad: MSTORE v5a9 v1208
0x5ae: v5ae(0x20) = CONST 
0x5b0: v5b0 = ADD v5ae(0x20) v5a9
0x5b4: v5b4(0x40) = CONST 
0x5b6: v5b6 = MLOAD v5b4(0x40)
0x5b9: v5b9 = SUB v5b0 v5b6
0x5bb: RETURN v5b6 v5b9
----------------------------------

Begin block 0x5bc
prev = {}, next = {'0x5c8', '0x5c4'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x5bc
0x5bd: v5bd = CALLVALUE 
0x5bf: v5bf = ISZERO v5bd
0x5c0: v5c0(0x5c8) = CONST 
0x5c3: JUMPI v5c0(0x5c8) v5bf
----------------------------------

Begin block 0x5c4
prev = {'0x5bc'}, next = {}
----------------------------------
Block 0x5c4
0x5c4: v5c4(0x0) = CONST 
0x5c7: REVERT v5c4(0x0) v5c4(0x0)
----------------------------------

Begin block 0x5c8
prev = {'0x5bc'}, next = {'0x5df', '0x5db'}
----------------------------------
Block 0x5c8
0x5ca: v5ca(0x6ac) = CONST 
0x5cd: v5cd(0x4) = CONST 
0x5d0: v5d0 = CALLDATASIZE 
0x5d1: v5d1 = SUB v5d0 v5cd(0x4)
0x5d2: v5d2(0x60) = CONST 
0x5d5: v5d5 = LT v5d1 v5d2(0x60)
0x5d6: v5d6 = ISZERO v5d5
0x5d7: v5d7(0x5df) = CONST 
0x5da: JUMPI v5d7(0x5df) v5d6
----------------------------------

Begin block 0x5db
prev = {'0x5c8'}, next = {}
----------------------------------
Block 0x5db
0x5db: v5db(0x0) = CONST 
0x5de: REVERT v5db(0x0) v5db(0x0)
----------------------------------

Begin block 0x5df
prev = {'0x5c8'}, next = {'0x622', '0x626'}
----------------------------------
Block 0x5df
0x5e1: v5e1 = ADD v5cd(0x4) v5d1
0x5e5: v5e5 = CALLDATALOAD v5cd(0x4)
0x5e6: v5e6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5fb: v5fb = AND v5e6(0xffffffffffffffffffffffffffffffffffffffff) v5e5
0x5fd: v5fd(0x20) = CONST 
0x5ff: v5ff = ADD v5fd(0x20) v5cd(0x4)
0x605: v605 = CALLDATALOAD v5ff
0x607: v607(0x20) = CONST 
0x609: v609 = ADD v607(0x20) v5ff
0x60f: v60f = CALLDATALOAD v609
0x611: v611(0x20) = CONST 
0x613: v613 = ADD v611(0x20) v609
0x615: v615(0x100000000) = CONST 
0x61c: v61c = GT v60f v615(0x100000000)
0x61d: v61d = ISZERO v61c
0x61e: v61e(0x626) = CONST 
0x621: JUMPI v61e(0x626) v61d
----------------------------------

Begin block 0x622
prev = {'0x5df'}, next = {}
----------------------------------
Block 0x622
0x622: v622(0x0) = CONST 
0x625: REVERT v622(0x0) v622(0x0)
----------------------------------

Begin block 0x626
prev = {'0x5df'}, next = {'0x634', '0x638'}
----------------------------------
Block 0x626
0x628: v628 = ADD v5cd(0x4) v60f
0x62a: v62a(0x20) = CONST 
0x62d: v62d = ADD v628 v62a(0x20)
0x62e: v62e = GT v62d v5e1
0x62f: v62f = ISZERO v62e
0x630: v630(0x638) = CONST 
0x633: JUMPI v630(0x638) v62f
----------------------------------

Begin block 0x634
prev = {'0x626'}, next = {}
----------------------------------
Block 0x634
0x634: v634(0x0) = CONST 
0x637: REVERT v634(0x0) v634(0x0)
----------------------------------

Begin block 0x638
prev = {'0x626'}, next = {'0x656', '0x65a'}
----------------------------------
Block 0x638
0x63a: v63a = CALLDATALOAD v628
0x63c: v63c(0x20) = CONST 
0x63e: v63e = ADD v63c(0x20) v628
0x641: v641(0x1) = CONST 
0x644: v644 = MUL v63a v641(0x1)
0x646: v646 = ADD v63e v644
0x647: v647 = GT v646 v5e1
0x648: v648(0x100000000) = CONST 
0x64f: v64f = GT v63a v648(0x100000000)
0x650: v650 = OR v64f v647
0x651: v651 = ISZERO v650
0x652: v652(0x65a) = CONST 
0x655: JUMPI v652(0x65a) v651
----------------------------------

Begin block 0x656
prev = {'0x638'}, next = {}
----------------------------------
Block 0x656
0x656: v656(0x0) = CONST 
0x659: REVERT v656(0x0) v656(0x0)
----------------------------------

Begin block 0x65a
prev = {'0x638'}, next = {'0x1210'}
----------------------------------
Block 0x65a
0x65f: v65f(0x1f) = CONST 
0x661: v661 = ADD v65f(0x1f) v63a
0x662: v662(0x20) = CONST 
0x666: v666 = DIV v661 v662(0x20)
0x667: v667 = MUL v666 v662(0x20)
0x668: v668(0x20) = CONST 
0x66a: v66a = ADD v668(0x20) v667
0x66b: v66b(0x40) = CONST 
0x66d: v66d = MLOAD v66b(0x40)
0x670: v670 = ADD v66d v66a
0x671: v671(0x40) = CONST 
0x673: MSTORE v671(0x40) v670
0x67b: MSTORE v66d v63a
0x67c: v67c(0x20) = CONST 
0x67e: v67e = ADD v67c(0x20) v66d
0x684: CALLDATACOPY v67e v63e v63a
0x685: v685(0x0) = CONST 
0x689: v689 = ADD v67e v63a
0x68a: MSTORE v689 v685(0x0)
0x68b: v68b(0x1f) = CONST 
0x68d: v68d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v68b(0x1f)
0x68e: v68e(0x1f) = CONST 
0x691: v691 = ADD v63a v68e(0x1f)
0x692: v692 = AND v691 v68d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0x697: v697 = ADD v67e v692
0x6a8: v6a8(0x1210) = CONST 
0x6ab: JUMP v6a8(0x1210)
----------------------------------

Begin block 0x6ac
prev = {'0x1450'}, next = {}
----------------------------------
Block 0x6ac
0x6ad: v6ad(0x40) = CONST 
0x6af: v6af = MLOAD v6ad(0x40)
0x6b2: v6b2 = ISZERO v1455(0x1)
0x6b3: v6b3 = ISZERO v6b2
0x6b4: v6b4 = ISZERO v6b3
0x6b5: v6b5 = ISZERO v6b4
0x6b7: MSTORE v6af v6b5
0x6b8: v6b8(0x20) = CONST 
0x6ba: v6ba = ADD v6b8(0x20) v6af
0x6be: v6be(0x40) = CONST 
0x6c0: v6c0 = MLOAD v6be(0x40)
0x6c3: v6c3 = SUB v6ba v6c0
0x6c5: RETURN v6c0 v6c3
----------------------------------

Begin block 0x6c6
prev = {}, next = {'0x6d2', '0x6ce'}
----------------------------------
function safeMul(uint256,uint256)()
Block 0x6c6
0x6c7: v6c7 = CALLVALUE 
0x6c9: v6c9 = ISZERO v6c7
0x6ca: v6ca(0x6d2) = CONST 
0x6cd: JUMPI v6ca(0x6d2) v6c9
----------------------------------

Begin block 0x6ce
prev = {'0x6c6'}, next = {}
----------------------------------
Block 0x6ce
0x6ce: v6ce(0x0) = CONST 
0x6d1: REVERT v6ce(0x0) v6ce(0x0)
----------------------------------

Begin block 0x6d2
prev = {'0x6c6'}, next = {'0x6e9', '0x6e5'}
----------------------------------
Block 0x6d2
0x6d4: v6d4(0x709) = CONST 
0x6d7: v6d7(0x4) = CONST 
0x6da: v6da = CALLDATASIZE 
0x6db: v6db = SUB v6da v6d7(0x4)
0x6dc: v6dc(0x40) = CONST 
0x6df: v6df = LT v6db v6dc(0x40)
0x6e0: v6e0 = ISZERO v6df
0x6e1: v6e1(0x6e9) = CONST 
0x6e4: JUMPI v6e1(0x6e9) v6e0
----------------------------------

Begin block 0x6e5
prev = {'0x6d2'}, next = {}
----------------------------------
Block 0x6e5
0x6e5: v6e5(0x0) = CONST 
0x6e8: REVERT v6e5(0x0) v6e5(0x0)
----------------------------------

Begin block 0x6e9
prev = {'0x6d2'}, next = {'0x145f'}
----------------------------------
Block 0x6e9
0x6eb: v6eb = ADD v6d7(0x4) v6db
0x6ef: v6ef = CALLDATALOAD v6d7(0x4)
0x6f1: v6f1(0x20) = CONST 
0x6f3: v6f3 = ADD v6f1(0x20) v6d7(0x4)
0x6f9: v6f9 = CALLDATALOAD v6f3
0x6fb: v6fb(0x20) = CONST 
0x6fd: v6fd = ADD v6fb(0x20) v6f3
0x705: v705(0x145f) = CONST 
0x708: JUMP v705(0x145f)
----------------------------------

Begin block 0x709
prev = {'0x148a'}, next = {}
----------------------------------
Block 0x709
0x70a: v70a(0x40) = CONST 
0x70c: v70c = MLOAD v70a(0x40)
0x710: MSTORE v70c v1464
0x711: v711(0x20) = CONST 
0x713: v713 = ADD v711(0x20) v70c
0x717: v717(0x40) = CONST 
0x719: v719 = MLOAD v717(0x40)
0x71c: v71c = SUB v713 v719
0x71e: RETURN v719 v71c
----------------------------------

Begin block 0x71f
prev = {}, next = {'0x72b', '0x727'}
----------------------------------
function newOwner()()
Block 0x71f
0x720: v720 = CALLVALUE 
0x722: v722 = ISZERO v720
0x723: v723(0x72b) = CONST 
0x726: JUMPI v723(0x72b) v722
----------------------------------

Begin block 0x727
prev = {'0x71f'}, next = {}
----------------------------------
Block 0x727
0x727: v727(0x0) = CONST 
0x72a: REVERT v727(0x0) v727(0x0)
----------------------------------

Begin block 0x72b
prev = {'0x71f'}, next = {'0x1490'}
----------------------------------
Block 0x72b
0x72d: v72d(0x734) = CONST 
0x730: v730(0x1490) = CONST 
0x733: JUMP v730(0x1490)
----------------------------------

Begin block 0x734
prev = {'0x1490'}, next = {}
----------------------------------
Block 0x734
0x735: v735(0x40) = CONST 
0x737: v737 = MLOAD v735(0x40)
0x73a: v73a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x74f: v74f = AND v73a(0xffffffffffffffffffffffffffffffffffffffff) v14b3
0x750: v750(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x765: v765 = AND v750(0xffffffffffffffffffffffffffffffffffffffff) v74f
0x767: MSTORE v737 v765
0x768: v768(0x20) = CONST 
0x76a: v76a = ADD v768(0x20) v737
0x76e: v76e(0x40) = CONST 
0x770: v770 = MLOAD v76e(0x40)
0x773: v773 = SUB v76a v770
0x775: RETURN v770 v773
----------------------------------

Begin block 0x776
prev = {}, next = {'0x77e', '0x782'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x776
0x777: v777 = CALLVALUE 
0x779: v779 = ISZERO v777
0x77a: v77a(0x782) = CONST 
0x77d: JUMPI v77a(0x782) v779
----------------------------------

Begin block 0x77e
prev = {'0x776'}, next = {}
----------------------------------
Block 0x77e
0x77e: v77e(0x0) = CONST 
0x781: REVERT v77e(0x0) v77e(0x0)
----------------------------------

Begin block 0x782
prev = {'0x776'}, next = {'0x795', '0x799'}
----------------------------------
Block 0x782
0x784: v784(0x7cf) = CONST 
0x787: v787(0x4) = CONST 
0x78a: v78a = CALLDATASIZE 
0x78b: v78b = SUB v78a v787(0x4)
0x78c: v78c(0x40) = CONST 
0x78f: v78f = LT v78b v78c(0x40)
0x790: v790 = ISZERO v78f
0x791: v791(0x799) = CONST 
0x794: JUMPI v791(0x799) v790
----------------------------------

Begin block 0x795
prev = {'0x782'}, next = {}
----------------------------------
Block 0x795
0x795: v795(0x0) = CONST 
0x798: REVERT v795(0x0) v795(0x0)
----------------------------------

Begin block 0x799
prev = {'0x782'}, next = {'0x14b6'}
----------------------------------
Block 0x799
0x79b: v79b = ADD v787(0x4) v78b
0x79f: v79f = CALLDATALOAD v787(0x4)
0x7a0: v7a0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7b5: v7b5 = AND v7a0(0xffffffffffffffffffffffffffffffffffffffff) v79f
0x7b7: v7b7(0x20) = CONST 
0x7b9: v7b9 = ADD v7b7(0x20) v787(0x4)
0x7bf: v7bf = CALLDATALOAD v7b9
0x7c1: v7c1(0x20) = CONST 
0x7c3: v7c3 = ADD v7c1(0x20) v7b9
0x7cb: v7cb(0x14b6) = CONST 
0x7ce: JUMP v7cb(0x14b6)
----------------------------------

Begin block 0x7cf
prev = {'0x1601'}, next = {}
----------------------------------
Block 0x7cf
0x7d0: v7d0(0x40) = CONST 
0x7d2: v7d2 = MLOAD v7d0(0x40)
0x7d5: v7d5 = ISZERO v1607
0x7d6: v7d6 = ISZERO v7d5
0x7d7: v7d7 = ISZERO v7d6
0x7d8: v7d8 = ISZERO v7d7
0x7da: MSTORE v7d2 v7d8
0x7db: v7db(0x20) = CONST 
0x7dd: v7dd = ADD v7db(0x20) v7d2
0x7e1: v7e1(0x40) = CONST 
0x7e3: v7e3 = MLOAD v7e1(0x40)
0x7e6: v7e6 = SUB v7dd v7e3
0x7e8: RETURN v7e3 v7e6
----------------------------------

Begin block 0x7e9
prev = {}, next = {'0x7f5', '0x7f1'}
----------------------------------
function allowance(address,address)()
Block 0x7e9
0x7ea: v7ea = CALLVALUE 
0x7ec: v7ec = ISZERO v7ea
0x7ed: v7ed(0x7f5) = CONST 
0x7f0: JUMPI v7ed(0x7f5) v7ec
----------------------------------

Begin block 0x7f1
prev = {'0x7e9'}, next = {}
----------------------------------
Block 0x7f1
0x7f1: v7f1(0x0) = CONST 
0x7f4: REVERT v7f1(0x0) v7f1(0x0)
----------------------------------

Begin block 0x7f5
prev = {'0x7e9'}, next = {'0x808', '0x80c'}
----------------------------------
Block 0x7f5
0x7f7: v7f7(0x858) = CONST 
0x7fa: v7fa(0x4) = CONST 
0x7fd: v7fd = CALLDATASIZE 
0x7fe: v7fe = SUB v7fd v7fa(0x4)
0x7ff: v7ff(0x40) = CONST 
0x802: v802 = LT v7fe v7ff(0x40)
0x803: v803 = ISZERO v802
0x804: v804(0x80c) = CONST 
0x807: JUMPI v804(0x80c) v803
----------------------------------

Begin block 0x808
prev = {'0x7f5'}, next = {}
----------------------------------
Block 0x808
0x808: v808(0x0) = CONST 
0x80b: REVERT v808(0x0) v808(0x0)
----------------------------------

Begin block 0x80c
prev = {'0x7f5'}, next = {'0x161a'}
----------------------------------
Block 0x80c
0x80e: v80e = ADD v7fa(0x4) v7fe
0x812: v812 = CALLDATALOAD v7fa(0x4)
0x813: v813(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x828: v828 = AND v813(0xffffffffffffffffffffffffffffffffffffffff) v812
0x82a: v82a(0x20) = CONST 
0x82c: v82c = ADD v82a(0x20) v7fa(0x4)
0x832: v832 = CALLDATALOAD v82c
0x833: v833(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x848: v848 = AND v833(0xffffffffffffffffffffffffffffffffffffffff) v832
0x84a: v84a(0x20) = CONST 
0x84c: v84c = ADD v84a(0x20) v82c
0x854: v854(0x161a) = CONST 
0x857: JUMP v854(0x161a)
----------------------------------

Begin block 0x858
prev = {'0x161a'}, next = {}
----------------------------------
Block 0x858
0x859: v859(0x40) = CONST 
0x85b: v85b = MLOAD v859(0x40)
0x85f: MSTORE v85b v1699
0x860: v860(0x20) = CONST 
0x862: v862 = ADD v860(0x20) v85b
0x866: v866(0x40) = CONST 
0x868: v868 = MLOAD v866(0x40)
0x86b: v86b = SUB v862 v868
0x86d: RETURN v868 v86b
----------------------------------

Begin block 0x86e
prev = {}, next = {'0x876', '0x87a'}
----------------------------------
function safeAdd(uint256,uint256)()
Block 0x86e
0x86f: v86f = CALLVALUE 
0x871: v871 = ISZERO v86f
0x872: v872(0x87a) = CONST 
0x875: JUMPI v872(0x87a) v871
----------------------------------

Begin block 0x876
prev = {'0x86e'}, next = {}
----------------------------------
Block 0x876
0x876: v876(0x0) = CONST 
0x879: REVERT v876(0x0) v876(0x0)
----------------------------------

Begin block 0x87a
prev = {'0x86e'}, next = {'0x891', '0x88d'}
----------------------------------
Block 0x87a
0x87c: v87c(0x8b1) = CONST 
0x87f: v87f(0x4) = CONST 
0x882: v882 = CALLDATASIZE 
0x883: v883 = SUB v882 v87f(0x4)
0x884: v884(0x40) = CONST 
0x887: v887 = LT v883 v884(0x40)
0x888: v888 = ISZERO v887
0x889: v889(0x891) = CONST 
0x88c: JUMPI v889(0x891) v888
----------------------------------

Begin block 0x88d
prev = {'0x87a'}, next = {}
----------------------------------
Block 0x88d
0x88d: v88d(0x0) = CONST 
0x890: REVERT v88d(0x0) v88d(0x0)
----------------------------------

Begin block 0x891
prev = {'0x87a'}, next = {'0x16a10x86e'}
----------------------------------
Block 0x891
0x893: v893 = ADD v87f(0x4) v883
0x897: v897 = CALLDATALOAD v87f(0x4)
0x899: v899(0x20) = CONST 
0x89b: v89b = ADD v899(0x20) v87f(0x4)
0x8a1: v8a1 = CALLDATALOAD v89b
0x8a3: v8a3(0x20) = CONST 
0x8a5: v8a5 = ADD v8a3(0x20) v89b
0x8ad: v8ad(0x16a1) = CONST 
0x8b0: JUMP v8ad(0x16a1)
----------------------------------

Begin block 0x8b1
prev = {'0x16b70x86e'}, next = {}
----------------------------------
Block 0x8b1
0x8b2: v8b2(0x40) = CONST 
0x8b4: v8b4 = MLOAD v8b2(0x40)
0x8b8: MSTORE v8b4 v86e16a6
0x8b9: v8b9(0x20) = CONST 
0x8bb: v8bb = ADD v8b9(0x20) v8b4
0x8bf: v8bf(0x40) = CONST 
0x8c1: v8c1 = MLOAD v8bf(0x40)
0x8c4: v8c4 = SUB v8bb v8c1
0x8c6: RETURN v8c1 v8c4
----------------------------------

Begin block 0x8c7
prev = {}, next = {'0x8d3', '0x8cf'}
----------------------------------
function transferOwnership(address)()
Block 0x8c7
0x8c8: v8c8 = CALLVALUE 
0x8ca: v8ca = ISZERO v8c8
0x8cb: v8cb(0x8d3) = CONST 
0x8ce: JUMPI v8cb(0x8d3) v8ca
----------------------------------

Begin block 0x8cf
prev = {'0x8c7'}, next = {}
----------------------------------
Block 0x8cf
0x8cf: v8cf(0x0) = CONST 
0x8d2: REVERT v8cf(0x0) v8cf(0x0)
----------------------------------

Begin block 0x8d3
prev = {'0x8c7'}, next = {'0x8e6', '0x8ea'}
----------------------------------
Block 0x8d3
0x8d5: v8d5(0x916) = CONST 
0x8d8: v8d8(0x4) = CONST 
0x8db: v8db = CALLDATASIZE 
0x8dc: v8dc = SUB v8db v8d8(0x4)
0x8dd: v8dd(0x20) = CONST 
0x8e0: v8e0 = LT v8dc v8dd(0x20)
0x8e1: v8e1 = ISZERO v8e0
0x8e2: v8e2(0x8ea) = CONST 
0x8e5: JUMPI v8e2(0x8ea) v8e1
----------------------------------

Begin block 0x8e6
prev = {'0x8d3'}, next = {}
----------------------------------
Block 0x8e6
0x8e6: v8e6(0x0) = CONST 
0x8e9: REVERT v8e6(0x0) v8e6(0x0)
----------------------------------

Begin block 0x8ea
prev = {'0x8d3'}, next = {'0x16bd'}
----------------------------------
Block 0x8ea
0x8ec: v8ec = ADD v8d8(0x4) v8dc
0x8f0: v8f0 = CALLDATALOAD v8d8(0x4)
0x8f1: v8f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x906: v906 = AND v8f1(0xffffffffffffffffffffffffffffffffffffffff) v8f0
0x908: v908(0x20) = CONST 
0x90a: v90a = ADD v908(0x20) v8d8(0x4)
0x912: v912(0x16bd) = CONST 
0x915: JUMP v912(0x16bd)
----------------------------------

Begin block 0x916
prev = {'0x1718'}, next = {}
----------------------------------
Block 0x916
0x917: STOP 
----------------------------------

Begin block 0x918
prev = {'0x123'}, next = {'0x9ae', '0x968'}
----------------------------------
Block 0x918
0x919: v919(0x3) = CONST 
0x91c: v91c = SLOAD v919(0x3)
0x91d: v91d(0x1) = CONST 
0x920: v920(0x1) = CONST 
0x922: v922 = AND v920(0x1) v91c
0x923: v923 = ISZERO v922
0x924: v924(0x100) = CONST 
0x927: v927 = MUL v924(0x100) v923
0x928: v928 = SUB v927 v91d(0x1)
0x929: v929 = AND v928 v91c
0x92a: v92a(0x2) = CONST 
0x92d: v92d = DIV v929 v92a(0x2)
0x92f: v92f(0x1f) = CONST 
0x931: v931 = ADD v92f(0x1f) v92d
0x932: v932(0x20) = CONST 
0x936: v936 = DIV v931 v932(0x20)
0x937: v937 = MUL v936 v932(0x20)
0x938: v938(0x20) = CONST 
0x93a: v93a = ADD v938(0x20) v937
0x93b: v93b(0x40) = CONST 
0x93d: v93d = MLOAD v93b(0x40)
0x940: v940 = ADD v93d v93a
0x941: v941(0x40) = CONST 
0x943: MSTORE v941(0x40) v940
0x94a: MSTORE v93d v92d
0x94b: v94b(0x20) = CONST 
0x94d: v94d = ADD v94b(0x20) v93d
0x950: v950 = SLOAD v919(0x3)
0x951: v951(0x1) = CONST 
0x954: v954(0x1) = CONST 
0x956: v956 = AND v954(0x1) v950
0x957: v957 = ISZERO v956
0x958: v958(0x100) = CONST 
0x95b: v95b = MUL v958(0x100) v957
0x95c: v95c = SUB v95b v951(0x1)
0x95d: v95d = AND v95c v950
0x95e: v95e(0x2) = CONST 
0x961: v961 = DIV v95d v95e(0x2)
0x963: v963 = ISZERO v961
0x964: v964(0x9ae) = CONST 
0x967: JUMPI v964(0x9ae) v963
----------------------------------

Begin block 0x968
prev = {'0x918'}, next = {'0x983', '0x970'}
----------------------------------
Block 0x968
0x969: v969(0x1f) = CONST 
0x96b: v96b = LT v969(0x1f) v961
0x96c: v96c(0x983) = CONST 
0x96f: JUMPI v96c(0x983) v96b
----------------------------------

Begin block 0x970
prev = {'0x968'}, next = {'0x9ae'}
----------------------------------
Block 0x970
0x970: v970(0x100) = CONST 
0x975: v975 = SLOAD v919(0x3)
0x976: v976 = DIV v975 v970(0x100)
0x977: v977 = MUL v976 v970(0x100)
0x979: MSTORE v94d v977
0x97b: v97b(0x20) = CONST 
0x97d: v97d = ADD v97b(0x20) v94d
0x97f: v97f(0x9ae) = CONST 
0x982: JUMP v97f(0x9ae)
----------------------------------

Begin block 0x983
prev = {'0x968'}, next = {'0x991'}
----------------------------------
Block 0x983
0x985: v985 = ADD v94d v961
0x988: v988(0x0) = CONST 
0x98a: MSTORE v988(0x0) v919(0x3)
0x98b: v98b(0x20) = CONST 
0x98d: v98d(0x0) = CONST 
0x98f: v98f = SHA3 v98d(0x0) v98b(0x20)
----------------------------------

Begin block 0x991
prev = {'0x983', '0x991'}, next = {'0x9a5', '0x991'}
----------------------------------
Block 0x991
0x991_0x0: v991_0 = PHI v94d v99d
0x991_0x1: v991_1 = PHI v98f v999
0x993: v993 = SLOAD v991_1
0x995: MSTORE v991_0 v993
0x997: v997(0x1) = CONST 
0x999: v999 = ADD v997(0x1) v991_1
0x99b: v99b(0x20) = CONST 
0x99d: v99d = ADD v99b(0x20) v991_0
0x9a0: v9a0 = GT v985 v99d
0x9a1: v9a1(0x991) = CONST 
0x9a4: JUMPI v9a1(0x991) v9a0
----------------------------------

Begin block 0x9a5
prev = {'0x991'}, next = {'0x9ae'}
----------------------------------
Block 0x9a5
0x9a7: v9a7 = SUB v99d v985
0x9a8: v9a8(0x1f) = CONST 
0x9aa: v9aa = AND v9a8(0x1f) v9a7
0x9ac: v9ac = ADD v985 v9aa
----------------------------------

Begin block 0x9ae
prev = {'0x918', '0x9a5', '0x970'}, next = {'0x12c'}
----------------------------------
Block 0x9ae
0x9b5: JUMP v125(0x12c)
----------------------------------

Begin block 0x9b6
prev = {'0x1ca'}, next = {'0x200'}
----------------------------------
Block 0x9b6
0x9b7: v9b7(0x0) = CONST 
0x9ba: v9ba(0x7) = CONST 
0x9bc: v9bc(0x0) = CONST 
0x9be: v9be = CALLER 
0x9bf: v9bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d4: v9d4 = AND v9bf(0xffffffffffffffffffffffffffffffffffffffff) v9be
0x9d5: v9d5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ea: v9ea = AND v9d5(0xffffffffffffffffffffffffffffffffffffffff) v9d4
0x9ec: MSTORE v9bc(0x0) v9ea
0x9ed: v9ed(0x20) = CONST 
0x9ef: v9ef(0x20) = ADD v9ed(0x20) v9bc(0x0)
0x9f2: MSTORE v9ef(0x20) v9ba(0x7)
0x9f3: v9f3(0x20) = CONST 
0x9f5: v9f5(0x40) = ADD v9f3(0x20) v9ef(0x20)
0x9f6: v9f6(0x0) = CONST 
0x9f8: v9f8 = SHA3 v9f6(0x0) v9f5(0x40)
0x9f9: v9f9(0x0) = CONST 
0x9fc: v9fc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa11: va11 = AND v9fc(0xffffffffffffffffffffffffffffffffffffffff) v1e6
0xa12: va12(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa27: va27 = AND va12(0xffffffffffffffffffffffffffffffffffffffff) va11
0xa29: MSTORE v9f9(0x0) va27
0xa2a: va2a(0x20) = CONST 
0xa2c: va2c(0x20) = ADD va2a(0x20) v9f9(0x0)
0xa2f: MSTORE va2c(0x20) v9f8
0xa30: va30(0x20) = CONST 
0xa32: va32(0x40) = ADD va30(0x20) va2c(0x20)
0xa33: va33(0x0) = CONST 
0xa35: va35 = SHA3 va33(0x0) va32(0x40)
0xa38: SSTORE va35 v1f0
0xa3b: va3b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa50: va50 = AND va3b(0xffffffffffffffffffffffffffffffffffffffff) v1e6
0xa51: va51 = CALLER 
0xa52: va52(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa67: va67 = AND va52(0xffffffffffffffffffffffffffffffffffffffff) va51
0xa68: va68(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa8a: va8a(0x40) = CONST 
0xa8c: va8c = MLOAD va8a(0x40)
0xa90: MSTORE va8c v1f0
0xa91: va91(0x20) = CONST 
0xa93: va93 = ADD va91(0x20) va8c
0xa97: va97(0x40) = CONST 
0xa99: va99 = MLOAD va97(0x40)
0xa9c: va9c = SUB va93 va99
0xa9e: LOG3 va99 va9c va68(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va67 va50
0xa9f: va9f(0x1) = CONST 
0xaa7: JUMP v1b5(0x200)
----------------------------------

Begin block 0xaa8
prev = {'0x226'}, next = {'0x22f'}
----------------------------------
Block 0xaa8
0xaa9: vaa9(0x0) = CONST 
0xaab: vaab(0x6) = CONST 
0xaad: vaad(0x0) = CONST 
0xab0: vab0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xac5: vac5(0x0) = AND vab0(0xffffffffffffffffffffffffffffffffffffffff) vaad(0x0)
0xac6: vac6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xadb: vadb(0x0) = AND vac6(0xffffffffffffffffffffffffffffffffffffffff) vac5(0x0)
0xadd: MSTORE vaad(0x0) vadb(0x0)
0xade: vade(0x20) = CONST 
0xae0: vae0(0x20) = ADD vade(0x20) vaad(0x0)
0xae3: MSTORE vae0(0x20) vaab(0x6)
0xae4: vae4(0x20) = CONST 
0xae6: vae6(0x40) = ADD vae4(0x20) vae0(0x20)
0xae7: vae7(0x0) = CONST 
0xae9: vae9 = SHA3 vae7(0x0) vae6(0x40)
0xaea: vaea = SLOAD vae9
0xaeb: vaeb(0x5) = CONST 
0xaed: vaed = SLOAD vaeb(0x5)
0xaee: vaee = SUB vaed vaea
0xaf2: JUMP v228(0x22f)
----------------------------------

Begin block 0xaf3
prev = {'0x268'}, next = {'0xb3e'}
----------------------------------
Block 0xaf3
0xaf4: vaf4(0x0) = CONST 
0xaf6: vaf6(0xb3e) = CONST 
0xaf9: vaf9(0x6) = CONST 
0xafb: vafb(0x0) = CONST 
0xafe: vafe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb13: vb13 = AND vafe(0xffffffffffffffffffffffffffffffffffffffff) v284
0xb14: vb14(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb29: vb29 = AND vb14(0xffffffffffffffffffffffffffffffffffffffff) vb13
0xb2b: MSTORE vafb(0x0) vb29
0xb2c: vb2c(0x20) = CONST 
0xb2e: vb2e(0x20) = ADD vb2c(0x20) vafb(0x0)
0xb31: MSTORE vb2e(0x20) vaf9(0x6)
0xb32: vb32(0x20) = CONST 
0xb34: vb34(0x40) = ADD vb32(0x20) vb2e(0x20)
0xb35: vb35(0x0) = CONST 
0xb37: vb37 = SHA3 vb35(0x0) vb34(0x40)
0xb38: vb38 = SLOAD vb37
0xb3a: vb3a(0x1047) = CONST 
0xb3d: vb3d_0 = CALLPRIVATE vb3a(0x1047) v2ae vb38 vaf6(0xb3e)
----------------------------------

Begin block 0xb3e
prev = {'0xaf3'}, next = {'0xc07'}
----------------------------------
Block 0xb3e
0xb3f: vb3f(0x6) = CONST 
0xb41: vb41(0x0) = CONST 
0xb44: vb44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb59: vb59 = AND vb44(0xffffffffffffffffffffffffffffffffffffffff) v284
0xb5a: vb5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb6f: vb6f = AND vb5a(0xffffffffffffffffffffffffffffffffffffffff) vb59
0xb71: MSTORE vb41(0x0) vb6f
0xb72: vb72(0x20) = CONST 
0xb74: vb74(0x20) = ADD vb72(0x20) vb41(0x0)
0xb77: MSTORE vb74(0x20) vb3f(0x6)
0xb78: vb78(0x20) = CONST 
0xb7a: vb7a(0x40) = ADD vb78(0x20) vb74(0x20)
0xb7b: vb7b(0x0) = CONST 
0xb7d: vb7d = SHA3 vb7b(0x0) vb7a(0x40)
0xb80: SSTORE vb7d vb3d_0
0xb82: vb82(0xc07) = CONST 
0xb85: vb85(0x7) = CONST 
0xb87: vb87(0x0) = CONST 
0xb8a: vb8a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9f: vb9f = AND vb8a(0xffffffffffffffffffffffffffffffffffffffff) v284
0xba0: vba0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbb5: vbb5 = AND vba0(0xffffffffffffffffffffffffffffffffffffffff) vb9f
0xbb7: MSTORE vb87(0x0) vbb5
0xbb8: vbb8(0x20) = CONST 
0xbba: vbba(0x20) = ADD vbb8(0x20) vb87(0x0)
0xbbd: MSTORE vbba(0x20) vb85(0x7)
0xbbe: vbbe(0x20) = CONST 
0xbc0: vbc0(0x40) = ADD vbbe(0x20) vbba(0x20)
0xbc1: vbc1(0x0) = CONST 
0xbc3: vbc3 = SHA3 vbc1(0x0) vbc0(0x40)
0xbc4: vbc4(0x0) = CONST 
0xbc6: vbc6 = CALLER 
0xbc7: vbc7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbdc: vbdc = AND vbc7(0xffffffffffffffffffffffffffffffffffffffff) vbc6
0xbdd: vbdd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf2: vbf2 = AND vbdd(0xffffffffffffffffffffffffffffffffffffffff) vbdc
0xbf4: MSTORE vbc4(0x0) vbf2
0xbf5: vbf5(0x20) = CONST 
0xbf7: vbf7(0x20) = ADD vbf5(0x20) vbc4(0x0)
0xbfa: MSTORE vbf7(0x20) vbc3
0xbfb: vbfb(0x20) = CONST 
0xbfd: vbfd(0x40) = ADD vbfb(0x20) vbf7(0x20)
0xbfe: vbfe(0x0) = CONST 
0xc00: vc00 = SHA3 vbfe(0x0) vbfd(0x40)
0xc01: vc01 = SLOAD vc00
0xc03: vc03(0x1047) = CONST 
0xc06: vc06_0 = CALLPRIVATE vc03(0x1047) v2ae vc01 vb82(0xc07)
----------------------------------

Begin block 0xc07
prev = {'0xb3e'}, next = {'0xcd0'}
----------------------------------
Block 0xc07
0xc08: vc08(0x7) = CONST 
0xc0a: vc0a(0x0) = CONST 
0xc0d: vc0d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc22: vc22 = AND vc0d(0xffffffffffffffffffffffffffffffffffffffff) v284
0xc23: vc23(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc38: vc38 = AND vc23(0xffffffffffffffffffffffffffffffffffffffff) vc22
0xc3a: MSTORE vc0a(0x0) vc38
0xc3b: vc3b(0x20) = CONST 
0xc3d: vc3d(0x20) = ADD vc3b(0x20) vc0a(0x0)
0xc40: MSTORE vc3d(0x20) vc08(0x7)
0xc41: vc41(0x20) = CONST 
0xc43: vc43(0x40) = ADD vc41(0x20) vc3d(0x20)
0xc44: vc44(0x0) = CONST 
0xc46: vc46 = SHA3 vc44(0x0) vc43(0x40)
0xc47: vc47(0x0) = CONST 
0xc49: vc49 = CALLER 
0xc4a: vc4a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5f: vc5f = AND vc4a(0xffffffffffffffffffffffffffffffffffffffff) vc49
0xc60: vc60(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc75: vc75 = AND vc60(0xffffffffffffffffffffffffffffffffffffffff) vc5f
0xc77: MSTORE vc47(0x0) vc75
0xc78: vc78(0x20) = CONST 
0xc7a: vc7a(0x20) = ADD vc78(0x20) vc47(0x0)
0xc7d: MSTORE vc7a(0x20) vc46
0xc7e: vc7e(0x20) = CONST 
0xc80: vc80(0x40) = ADD vc7e(0x20) vc7a(0x20)
0xc81: vc81(0x0) = CONST 
0xc83: vc83 = SHA3 vc81(0x0) vc80(0x40)
0xc86: SSTORE vc83 vc06_0
0xc88: vc88(0xcd0) = CONST 
0xc8b: vc8b(0x6) = CONST 
0xc8d: vc8d(0x0) = CONST 
0xc90: vc90(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xca5: vca5 = AND vc90(0xffffffffffffffffffffffffffffffffffffffff) v2a4
0xca6: vca6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcbb: vcbb = AND vca6(0xffffffffffffffffffffffffffffffffffffffff) vca5
0xcbd: MSTORE vc8d(0x0) vcbb
0xcbe: vcbe(0x20) = CONST 
0xcc0: vcc0(0x20) = ADD vcbe(0x20) vc8d(0x0)
0xcc3: MSTORE vcc0(0x20) vc8b(0x6)
0xcc4: vcc4(0x20) = CONST 
0xcc6: vcc6(0x40) = ADD vcc4(0x20) vcc0(0x20)
0xcc7: vcc7(0x0) = CONST 
0xcc9: vcc9 = SHA3 vcc7(0x0) vcc6(0x40)
0xcca: vcca = SLOAD vcc9
0xccc: vccc(0x16a1) = CONST 
0xccf: vccf_0 = CALLPRIVATE vccc(0x16a1) v2ae vcca vc88(0xcd0)
----------------------------------

Begin block 0xcd0
prev = {'0xc07'}, next = {'0x2be'}
----------------------------------
Block 0xcd0
0xcd1: vcd1(0x6) = CONST 
0xcd3: vcd3(0x0) = CONST 
0xcd6: vcd6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xceb: vceb = AND vcd6(0xffffffffffffffffffffffffffffffffffffffff) v2a4
0xcec: vcec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd01: vd01 = AND vcec(0xffffffffffffffffffffffffffffffffffffffff) vceb
0xd03: MSTORE vcd3(0x0) vd01
0xd04: vd04(0x20) = CONST 
0xd06: vd06(0x20) = ADD vd04(0x20) vcd3(0x0)
0xd09: MSTORE vd06(0x20) vcd1(0x6)
0xd0a: vd0a(0x20) = CONST 
0xd0c: vd0c(0x40) = ADD vd0a(0x20) vd06(0x20)
0xd0d: vd0d(0x0) = CONST 
0xd0f: vd0f = SHA3 vd0d(0x0) vd0c(0x40)
0xd12: SSTORE vd0f vccf_0
0xd15: vd15(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd2a: vd2a = AND vd15(0xffffffffffffffffffffffffffffffffffffffff) v2a4
0xd2c: vd2c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd41: vd41 = AND vd2c(0xffffffffffffffffffffffffffffffffffffffff) v284
0xd42: vd42(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd64: vd64(0x40) = CONST 
0xd66: vd66 = MLOAD vd64(0x40)
0xd6a: MSTORE vd66 v2ae
0xd6b: vd6b(0x20) = CONST 
0xd6d: vd6d = ADD vd6b(0x20) vd66
0xd71: vd71(0x40) = CONST 
0xd73: vd73 = MLOAD vd71(0x40)
0xd76: vd76 = SUB vd6d vd73
0xd78: LOG3 vd73 vd76 vd42(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vd41 vd2a
0xd79: vd79(0x1) = CONST 
0xd82: JUMP v253(0x2be)
----------------------------------

Begin block 0xd83
prev = {'0x2e4'}, next = {'0x2ed'}
----------------------------------
Block 0xd83
0xd84: vd84(0x4) = CONST 
0xd86: vd86(0x0) = CONST 
0xd89: vd89 = SLOAD vd84(0x4)
0xd8b: vd8b(0x100) = CONST 
0xd8e: vd8e(0x1) = EXP vd8b(0x100) vd86(0x0)
0xd90: vd90 = DIV vd89 vd8e(0x1)
0xd91: vd91(0xff) = CONST 
0xd93: vd93 = AND vd91(0xff) vd90
0xd95: JUMP v2e6(0x2ed)
----------------------------------

Begin block 0xd96
prev = {'0x315'}, next = {'0x31e'}
----------------------------------
Block 0xd96
0xd97: vd97(0x5) = CONST 
0xd99: vd99 = SLOAD vd97(0x5)
0xd9b: JUMP v317(0x31e)
----------------------------------

Begin block 0xd9c
prev = {'0x357'}, next = {'0x383'}
----------------------------------
Block 0xd9c
0xd9d: vd9d(0x0) = CONST 
0xd9f: vd9f(0x6) = CONST 
0xda1: vda1(0x0) = CONST 
0xda4: vda4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdb9: vdb9 = AND vda4(0xffffffffffffffffffffffffffffffffffffffff) v373
0xdba: vdba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdcf: vdcf = AND vdba(0xffffffffffffffffffffffffffffffffffffffff) vdb9
0xdd1: MSTORE vda1(0x0) vdcf
0xdd2: vdd2(0x20) = CONST 
0xdd4: vdd4(0x20) = ADD vdd2(0x20) vda1(0x0)
0xdd7: MSTORE vdd4(0x20) vd9f(0x6)
0xdd8: vdd8(0x20) = CONST 
0xdda: vdda(0x40) = ADD vdd8(0x20) vdd4(0x20)
0xddb: vddb(0x0) = CONST 
0xddd: vddd = SHA3 vddb(0x0) vdda(0x40)
0xdde: vdde = SLOAD vddd
0xde4: JUMP v342(0x383)
----------------------------------

Begin block 0xde5
prev = {'0x3a5'}, next = {'0xe3d', '0xe41'}
----------------------------------
Block 0xde5
0xde6: vde6(0x1) = CONST 
0xde8: vde8(0x0) = CONST 
0xdeb: vdeb = SLOAD vde6(0x1)
0xded: vded(0x100) = CONST 
0xdf0: vdf0(0x1) = EXP vded(0x100) vde8(0x0)
0xdf2: vdf2 = DIV vdeb vdf0(0x1)
0xdf3: vdf3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe08: ve08 = AND vdf3(0xffffffffffffffffffffffffffffffffffffffff) vdf2
0xe09: ve09(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe1e: ve1e = AND ve09(0xffffffffffffffffffffffffffffffffffffffff) ve08
0xe1f: ve1f = CALLER 
0xe20: ve20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe35: ve35 = AND ve20(0xffffffffffffffffffffffffffffffffffffffff) ve1f
0xe36: ve36 = EQ ve35 ve1e
0xe37: ve37 = ISZERO ve36
0xe38: ve38 = ISZERO ve37
0xe39: ve39(0xe41) = CONST 
0xe3c: JUMPI ve39(0xe41) ve38
----------------------------------

Begin block 0xe3d
prev = {'0xde5'}, next = {}
----------------------------------
Block 0xe3d
0xe3d: ve3d(0x0) = CONST 
0xe40: REVERT ve3d(0x0) ve3d(0x0)
----------------------------------

Begin block 0xe41
prev = {'0xde5'}, next = {'0x3ae'}
----------------------------------
Block 0xe41
0xe42: ve42(0x1) = CONST 
0xe44: ve44(0x0) = CONST 
0xe47: ve47 = SLOAD ve42(0x1)
0xe49: ve49(0x100) = CONST 
0xe4c: ve4c(0x1) = EXP ve49(0x100) ve44(0x0)
0xe4e: ve4e = DIV ve47 ve4c(0x1)
0xe4f: ve4f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe64: ve64 = AND ve4f(0xffffffffffffffffffffffffffffffffffffffff) ve4e
0xe65: ve65(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe7a: ve7a = AND ve65(0xffffffffffffffffffffffffffffffffffffffff) ve64
0xe7b: ve7b(0x0) = CONST 
0xe7f: ve7f = SLOAD ve7b(0x0)
0xe81: ve81(0x100) = CONST 
0xe84: ve84(0x1) = EXP ve81(0x100) ve7b(0x0)
0xe86: ve86 = DIV ve7f ve84(0x1)
0xe87: ve87(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe9c: ve9c = AND ve87(0xffffffffffffffffffffffffffffffffffffffff) ve86
0xe9d: ve9d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeb2: veb2 = AND ve9d(0xffffffffffffffffffffffffffffffffffffffff) ve9c
0xeb3: veb3(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xed4: ved4(0x40) = CONST 
0xed6: ved6 = MLOAD ved4(0x40)
0xed7: ved7(0x40) = CONST 
0xed9: ved9 = MLOAD ved7(0x40)
0xedc: vedc = SUB ved6 ved9
0xede: LOG3 ved9 vedc veb3(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) veb2 ve7a
0xedf: vedf(0x1) = CONST 
0xee1: vee1(0x0) = CONST 
0xee4: vee4 = SLOAD vedf(0x1)
0xee6: vee6(0x100) = CONST 
0xee9: vee9(0x1) = EXP vee6(0x100) vee1(0x0)
0xeeb: veeb = DIV vee4 vee9(0x1)
0xeec: veec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf01: vf01 = AND veec(0xffffffffffffffffffffffffffffffffffffffff) veeb
0xf02: vf02(0x0) = CONST 
0xf05: vf05(0x100) = CONST 
0xf08: vf08(0x1) = EXP vf05(0x100) vf02(0x0)
0xf0a: vf0a = SLOAD vf02(0x0)
0xf0c: vf0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf21: vf21(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf0c(0xffffffffffffffffffffffffffffffffffffffff) vf08(0x1)
0xf22: vf22(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf21(0xffffffffffffffffffffffffffffffffffffffff)
0xf23: vf23 = AND vf22(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf0a
0xf26: vf26(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf3b: vf3b = AND vf26(0xffffffffffffffffffffffffffffffffffffffff) vf01
0xf3c: vf3c = MUL vf3b vf08(0x1)
0xf3d: vf3d = OR vf3c vf23
0xf3f: SSTORE vf02(0x0) vf3d
0xf41: vf41(0x0) = CONST 
0xf43: vf43(0x1) = CONST 
0xf45: vf45(0x0) = CONST 
0xf47: vf47(0x100) = CONST 
0xf4a: vf4a(0x1) = EXP vf47(0x100) vf45(0x0)
0xf4c: vf4c = SLOAD vf43(0x1)
0xf4e: vf4e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf63: vf63(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf4e(0xffffffffffffffffffffffffffffffffffffffff) vf4a(0x1)
0xf64: vf64(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf63(0xffffffffffffffffffffffffffffffffffffffff)
0xf65: vf65 = AND vf64(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf4c
0xf68: vf68(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf7d: vf7d(0x0) = AND vf68(0xffffffffffffffffffffffffffffffffffffffff) vf41(0x0)
0xf7e: vf7e(0x0) = MUL vf7d(0x0) vf4a(0x1)
0xf7f: vf7f = OR vf7e(0x0) vf65
0xf81: SSTORE vf43(0x1) vf7f
0xf83: JUMP v3a7(0x3ae)
----------------------------------

Begin block 0xf84
prev = {'0x3bc'}, next = {'0x3c5'}
----------------------------------
Block 0xf84
0xf85: vf85(0x0) = CONST 
0xf89: vf89 = SLOAD vf85(0x0)
0xf8b: vf8b(0x100) = CONST 
0xf8e: vf8e(0x1) = EXP vf8b(0x100) vf85(0x0)
0xf90: vf90 = DIV vf89 vf8e(0x1)
0xf91: vf91(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa6: vfa6 = AND vf91(0xffffffffffffffffffffffffffffffffffffffff) vf90
0xfa8: JUMP v3be(0x3c5)
----------------------------------

Begin block 0xfa9
prev = {'0x413'}, next = {'0xff9', '0x103f'}
----------------------------------
Block 0xfa9
0xfaa: vfaa(0x2) = CONST 
0xfad: vfad = SLOAD vfaa(0x2)
0xfae: vfae(0x1) = CONST 
0xfb1: vfb1(0x1) = CONST 
0xfb3: vfb3 = AND vfb1(0x1) vfad
0xfb4: vfb4 = ISZERO vfb3
0xfb5: vfb5(0x100) = CONST 
0xfb8: vfb8 = MUL vfb5(0x100) vfb4
0xfb9: vfb9 = SUB vfb8 vfae(0x1)
0xfba: vfba = AND vfb9 vfad
0xfbb: vfbb(0x2) = CONST 
0xfbe: vfbe = DIV vfba vfbb(0x2)
0xfc0: vfc0(0x1f) = CONST 
0xfc2: vfc2 = ADD vfc0(0x1f) vfbe
0xfc3: vfc3(0x20) = CONST 
0xfc7: vfc7 = DIV vfc2 vfc3(0x20)
0xfc8: vfc8 = MUL vfc7 vfc3(0x20)
0xfc9: vfc9(0x20) = CONST 
0xfcb: vfcb = ADD vfc9(0x20) vfc8
0xfcc: vfcc(0x40) = CONST 
0xfce: vfce = MLOAD vfcc(0x40)
0xfd1: vfd1 = ADD vfce vfcb
0xfd2: vfd2(0x40) = CONST 
0xfd4: MSTORE vfd2(0x40) vfd1
0xfdb: MSTORE vfce vfbe
0xfdc: vfdc(0x20) = CONST 
0xfde: vfde = ADD vfdc(0x20) vfce
0xfe1: vfe1 = SLOAD vfaa(0x2)
0xfe2: vfe2(0x1) = CONST 
0xfe5: vfe5(0x1) = CONST 
0xfe7: vfe7 = AND vfe5(0x1) vfe1
0xfe8: vfe8 = ISZERO vfe7
0xfe9: vfe9(0x100) = CONST 
0xfec: vfec = MUL vfe9(0x100) vfe8
0xfed: vfed = SUB vfec vfe2(0x1)
0xfee: vfee = AND vfed vfe1
0xfef: vfef(0x2) = CONST 
0xff2: vff2 = DIV vfee vfef(0x2)
0xff4: vff4 = ISZERO vff2
0xff5: vff5(0x103f) = CONST 
0xff8: JUMPI vff5(0x103f) vff4
----------------------------------

Begin block 0xff9
prev = {'0xfa9'}, next = {'0x1001', '0x1014'}
----------------------------------
Block 0xff9
0xffa: vffa(0x1f) = CONST 
0xffc: vffc = LT vffa(0x1f) vff2
0xffd: vffd(0x1014) = CONST 
0x1000: JUMPI vffd(0x1014) vffc
----------------------------------

Begin block 0x1001
prev = {'0xff9'}, next = {'0x103f'}
----------------------------------
Block 0x1001
0x1001: v1001(0x100) = CONST 
0x1006: v1006 = SLOAD vfaa(0x2)
0x1007: v1007 = DIV v1006 v1001(0x100)
0x1008: v1008 = MUL v1007 v1001(0x100)
0x100a: MSTORE vfde v1008
0x100c: v100c(0x20) = CONST 
0x100e: v100e = ADD v100c(0x20) vfde
0x1010: v1010(0x103f) = CONST 
0x1013: JUMP v1010(0x103f)
----------------------------------

Begin block 0x1014
prev = {'0xff9'}, next = {'0x1022'}
----------------------------------
Block 0x1014
0x1016: v1016 = ADD vfde vff2
0x1019: v1019(0x0) = CONST 
0x101b: MSTORE v1019(0x0) vfaa(0x2)
0x101c: v101c(0x20) = CONST 
0x101e: v101e(0x0) = CONST 
0x1020: v1020 = SHA3 v101e(0x0) v101c(0x20)
----------------------------------

Begin block 0x1022
prev = {'0x1022', '0x1014'}, next = {'0x1036', '0x1022'}
----------------------------------
Block 0x1022
0x1022_0x0: v1022_0 = PHI vfde v102e
0x1022_0x1: v1022_1 = PHI v1020 v102a
0x1024: v1024 = SLOAD v1022_1
0x1026: MSTORE v1022_0 v1024
0x1028: v1028(0x1) = CONST 
0x102a: v102a = ADD v1028(0x1) v1022_1
0x102c: v102c(0x20) = CONST 
0x102e: v102e = ADD v102c(0x20) v1022_0
0x1031: v1031 = GT v1016 v102e
0x1032: v1032(0x1022) = CONST 
0x1035: JUMPI v1032(0x1022) v1031
----------------------------------

Begin block 0x1036
prev = {'0x1022'}, next = {'0x103f'}
----------------------------------
Block 0x1036
0x1038: v1038 = SUB v102e v1016
0x1039: v1039(0x1f) = CONST 
0x103b: v103b = AND v1039(0x1f) v1038
0x103d: v103d = ADD v1016 v103b
----------------------------------

Begin block 0x103f
prev = {'0x1036', '0x1001', '0xfa9'}, next = {'0x41c'}
----------------------------------
Block 0x103f
0x1046: JUMP v415(0x41c)
----------------------------------

Begin block 0x1047
prev = {}, next = {'0x10580x1047', '0x10540x1047'}
----------------------------------
function 0x1047(v1047arg0, v1047arg1, v1047arg2)
Block 0x1047
0x1048: v1048(0x0) = CONST 
0x104c: v104c = GT v1047arg0 v1047arg1
0x104d: v104d = ISZERO v104c
0x104e: v104e = ISZERO v104d
0x104f: v104f = ISZERO v104e
0x1050: v1050(0x1058) = CONST 
0x1053: JUMPI v1050(0x1058) v104f
----------------------------------

Begin block 0x10470x497
prev = {'0x4ba'}, next = {'0x10580x497', '0x10540x497'}
----------------------------------
Block 0x10470x497
0x10480x497: v4971048(0x0) = CONST 
0x104c0x497: v497104c = GT v4ca v4c0
0x104d0x497: v497104d = ISZERO v497104c
0x104e0x497: v497104e = ISZERO v497104d
0x104f0x497: v497104f = ISZERO v497104e
0x10500x497: v4971050(0x1058) = CONST 
0x10530x497: JUMPI v4971050(0x1058) v497104f
----------------------------------

Begin block 0x10540x497
prev = {'0x10470x497'}, next = {}
----------------------------------
Block 0x10540x497
0x10540x497: v4971054(0x0) = CONST 
0x10570x497: REVERT v4971054(0x0) v4971054(0x0)
----------------------------------

Begin block 0x10540x1047
prev = {'0x1047'}, next = {}
----------------------------------
Block 0x10540x1047
0x10540x1047: v10471054(0x0) = CONST 
0x10570x1047: REVERT v10471054(0x0) v10471054(0x0)
----------------------------------

Begin block 0x10580x497
prev = {'0x10470x497'}, next = {'0x4da'}
----------------------------------
Block 0x10580x497
0x105b0x497: v497105b = SUB v4c0 v4ca
0x10620x497: JUMP v4a5(0x4da)
----------------------------------

Begin block 0x10580x1047
prev = {'0x1047'}, next = {}
----------------------------------
Block 0x10580x1047
0x105b0x1047: v1047105b = SUB v1047arg1 v1047arg0
0x10620x1047: RETURNPRIVATE v1047arg2 v1047105b
----------------------------------

Begin block 0x1063
prev = {'0x513'}, next = {'0x10ae'}
----------------------------------
Block 0x1063
0x1064: v1064(0x0) = CONST 
0x1066: v1066(0x10ae) = CONST 
0x1069: v1069(0x6) = CONST 
0x106b: v106b(0x0) = CONST 
0x106d: v106d = CALLER 
0x106e: v106e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1083: v1083 = AND v106e(0xffffffffffffffffffffffffffffffffffffffff) v106d
0x1084: v1084(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1099: v1099 = AND v1084(0xffffffffffffffffffffffffffffffffffffffff) v1083
0x109b: MSTORE v106b(0x0) v1099
0x109c: v109c(0x20) = CONST 
0x109e: v109e(0x20) = ADD v109c(0x20) v106b(0x0)
0x10a1: MSTORE v109e(0x20) v1069(0x6)
0x10a2: v10a2(0x20) = CONST 
0x10a4: v10a4(0x40) = ADD v10a2(0x20) v109e(0x20)
0x10a5: v10a5(0x0) = CONST 
0x10a7: v10a7 = SHA3 v10a5(0x0) v10a4(0x40)
0x10a8: v10a8 = SLOAD v10a7
0x10aa: v10aa(0x1047) = CONST 
0x10ad: v10ad_0 = CALLPRIVATE v10aa(0x1047) v539 v10a8 v1066(0x10ae)
----------------------------------

Begin block 0x10ae
prev = {'0x1063'}, next = {'0x113a'}
----------------------------------
Block 0x10ae
0x10af: v10af(0x6) = CONST 
0x10b1: v10b1(0x0) = CONST 
0x10b3: v10b3 = CALLER 
0x10b4: v10b4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c9: v10c9 = AND v10b4(0xffffffffffffffffffffffffffffffffffffffff) v10b3
0x10ca: v10ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10df: v10df = AND v10ca(0xffffffffffffffffffffffffffffffffffffffff) v10c9
0x10e1: MSTORE v10b1(0x0) v10df
0x10e2: v10e2(0x20) = CONST 
0x10e4: v10e4(0x20) = ADD v10e2(0x20) v10b1(0x0)
0x10e7: MSTORE v10e4(0x20) v10af(0x6)
0x10e8: v10e8(0x20) = CONST 
0x10ea: v10ea(0x40) = ADD v10e8(0x20) v10e4(0x20)
0x10eb: v10eb(0x0) = CONST 
0x10ed: v10ed = SHA3 v10eb(0x0) v10ea(0x40)
0x10f0: SSTORE v10ed v10ad_0
0x10f2: v10f2(0x113a) = CONST 
0x10f5: v10f5(0x6) = CONST 
0x10f7: v10f7(0x0) = CONST 
0x10fa: v10fa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x110f: v110f = AND v10fa(0xffffffffffffffffffffffffffffffffffffffff) v52f
0x1110: v1110(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1125: v1125 = AND v1110(0xffffffffffffffffffffffffffffffffffffffff) v110f
0x1127: MSTORE v10f7(0x0) v1125
0x1128: v1128(0x20) = CONST 
0x112a: v112a(0x20) = ADD v1128(0x20) v10f7(0x0)
0x112d: MSTORE v112a(0x20) v10f5(0x6)
0x112e: v112e(0x20) = CONST 
0x1130: v1130(0x40) = ADD v112e(0x20) v112a(0x20)
0x1131: v1131(0x0) = CONST 
0x1133: v1133 = SHA3 v1131(0x0) v1130(0x40)
0x1134: v1134 = SLOAD v1133
0x1136: v1136(0x16a1) = CONST 
0x1139: v1139_0 = CALLPRIVATE v1136(0x16a1) v539 v1134 v10f2(0x113a)
----------------------------------

Begin block 0x113a
prev = {'0x10ae'}, next = {'0x549'}
----------------------------------
Block 0x113a
0x113b: v113b(0x6) = CONST 
0x113d: v113d(0x0) = CONST 
0x1140: v1140(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1155: v1155 = AND v1140(0xffffffffffffffffffffffffffffffffffffffff) v52f
0x1156: v1156(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x116b: v116b = AND v1156(0xffffffffffffffffffffffffffffffffffffffff) v1155
0x116d: MSTORE v113d(0x0) v116b
0x116e: v116e(0x20) = CONST 
0x1170: v1170(0x20) = ADD v116e(0x20) v113d(0x0)
0x1173: MSTORE v1170(0x20) v113b(0x6)
0x1174: v1174(0x20) = CONST 
0x1176: v1176(0x40) = ADD v1174(0x20) v1170(0x20)
0x1177: v1177(0x0) = CONST 
0x1179: v1179 = SHA3 v1177(0x0) v1176(0x40)
0x117c: SSTORE v1179 v1139_0
0x117f: v117f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1194: v1194 = AND v117f(0xffffffffffffffffffffffffffffffffffffffff) v52f
0x1195: v1195 = CALLER 
0x1196: v1196(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11ab: v11ab = AND v1196(0xffffffffffffffffffffffffffffffffffffffff) v1195
0x11ac: v11ac(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x11ce: v11ce(0x40) = CONST 
0x11d0: v11d0 = MLOAD v11ce(0x40)
0x11d4: MSTORE v11d0 v539
0x11d5: v11d5(0x20) = CONST 
0x11d7: v11d7 = ADD v11d5(0x20) v11d0
0x11db: v11db(0x40) = CONST 
0x11dd: v11dd = MLOAD v11db(0x40)
0x11e0: v11e0 = SUB v11d7 v11dd
0x11e2: LOG3 v11dd v11e0 v11ac(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v11ab v1194
0x11e3: v11e3(0x1) = CONST 
0x11eb: JUMP v4fe(0x549)
----------------------------------

Begin block 0x11ec
prev = {'0x586'}, next = {'0x11fc', '0x11f8'}
----------------------------------
Block 0x11ec
0x11ed: v11ed(0x0) = CONST 
0x11f1: v11f1 = GT v596 v11ed(0x0)
0x11f2: v11f2 = ISZERO v11f1
0x11f3: v11f3 = ISZERO v11f2
0x11f4: v11f4(0x11fc) = CONST 
0x11f7: JUMPI v11f4(0x11fc) v11f3
----------------------------------

Begin block 0x11f8
prev = {'0x11ec'}, next = {}
----------------------------------
Block 0x11f8
0x11f8: v11f8(0x0) = CONST 
0x11fb: REVERT v11f8(0x0) v11f8(0x0)
----------------------------------

Begin block 0x11fc
prev = {'0x11ec'}, next = {'0x1206', '0x1207'}
----------------------------------
Block 0x11fc
0x1200: v1200 = ISZERO v596
0x1201: v1201 = ISZERO v1200
0x1202: v1202(0x1207) = CONST 
0x1205: JUMPI v1202(0x1207) v1201
----------------------------------

Begin block 0x1206
prev = {'0x11fc'}, next = {}
----------------------------------
Block 0x1206
0x1206: THROW 
----------------------------------

Begin block 0x1207
prev = {'0x11fc'}, next = {'0x5a6'}
----------------------------------
Block 0x1207
0x1208: v1208 = DIV v58c v596
0x120f: JUMP v571(0x5a6)
----------------------------------

Begin block 0x1210
prev = {'0x65a'}, next = {'0x13d2'}
----------------------------------
Block 0x1210
0x1211: v1211(0x0) = CONST 
0x1214: v1214(0x7) = CONST 
0x1216: v1216(0x0) = CONST 
0x1218: v1218 = CALLER 
0x1219: v1219(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x122e: v122e = AND v1219(0xffffffffffffffffffffffffffffffffffffffff) v1218
0x122f: v122f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1244: v1244 = AND v122f(0xffffffffffffffffffffffffffffffffffffffff) v122e
0x1246: MSTORE v1216(0x0) v1244
0x1247: v1247(0x20) = CONST 
0x1249: v1249(0x20) = ADD v1247(0x20) v1216(0x0)
0x124c: MSTORE v1249(0x20) v1214(0x7)
0x124d: v124d(0x20) = CONST 
0x124f: v124f(0x40) = ADD v124d(0x20) v1249(0x20)
0x1250: v1250(0x0) = CONST 
0x1252: v1252 = SHA3 v1250(0x0) v124f(0x40)
0x1253: v1253(0x0) = CONST 
0x1256: v1256(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x126b: v126b = AND v1256(0xffffffffffffffffffffffffffffffffffffffff) v5fb
0x126c: v126c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1281: v1281 = AND v126c(0xffffffffffffffffffffffffffffffffffffffff) v126b
0x1283: MSTORE v1253(0x0) v1281
0x1284: v1284(0x20) = CONST 
0x1286: v1286(0x20) = ADD v1284(0x20) v1253(0x0)
0x1289: MSTORE v1286(0x20) v1252
0x128a: v128a(0x20) = CONST 
0x128c: v128c(0x40) = ADD v128a(0x20) v1286(0x20)
0x128d: v128d(0x0) = CONST 
0x128f: v128f = SHA3 v128d(0x0) v128c(0x40)
0x1292: SSTORE v128f v605
0x1295: v1295(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12aa: v12aa = AND v1295(0xffffffffffffffffffffffffffffffffffffffff) v5fb
0x12ab: v12ab = CALLER 
0x12ac: v12ac(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12c1: v12c1 = AND v12ac(0xffffffffffffffffffffffffffffffffffffffff) v12ab
0x12c2: v12c2(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x12e4: v12e4(0x40) = CONST 
0x12e6: v12e6 = MLOAD v12e4(0x40)
0x12ea: MSTORE v12e6 v605
0x12eb: v12eb(0x20) = CONST 
0x12ed: v12ed = ADD v12eb(0x20) v12e6
0x12f1: v12f1(0x40) = CONST 
0x12f3: v12f3 = MLOAD v12f1(0x40)
0x12f6: v12f6 = SUB v12ed v12f3
0x12f8: LOG3 v12f3 v12f6 v12c2(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v12c1 v12aa
0x12fa: v12fa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x130f: v130f = AND v12fa(0xffffffffffffffffffffffffffffffffffffffff) v5fb
0x1310: v1310(0x8f4ffcb1) = CONST 
0x1315: v1315 = CALLER 
0x1317: v1317 = ADDRESS 
0x1319: v1319(0x40) = CONST 
0x131b: v131b = MLOAD v1319(0x40)
0x131d: v131d(0xffffffff) = CONST 
0x1322: v1322(0x8f4ffcb1) = AND v131d(0xffffffff) v1310(0x8f4ffcb1)
0x1323: v1323(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x1341: v1341(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v1323(0x100000000000000000000000000000000000000000000000000000000) v1322(0x8f4ffcb1)
0x1343: MSTORE v131b v1341(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x1344: v1344(0x4) = CONST 
0x1346: v1346 = ADD v1344(0x4) v131b
0x1349: v1349(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x135e: v135e = AND v1349(0xffffffffffffffffffffffffffffffffffffffff) v1315
0x135f: v135f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1374: v1374 = AND v135f(0xffffffffffffffffffffffffffffffffffffffff) v135e
0x1376: MSTORE v1346 v1374
0x1377: v1377(0x20) = CONST 
0x1379: v1379 = ADD v1377(0x20) v1346
0x137c: MSTORE v1379 v605
0x137d: v137d(0x20) = CONST 
0x137f: v137f = ADD v137d(0x20) v1379
0x1381: v1381(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1396: v1396 = AND v1381(0xffffffffffffffffffffffffffffffffffffffff) v1317
0x1397: v1397(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13ac: v13ac = AND v1397(0xffffffffffffffffffffffffffffffffffffffff) v1396
0x13ae: MSTORE v137f v13ac
0x13af: v13af(0x20) = CONST 
0x13b1: v13b1 = ADD v13af(0x20) v137f
0x13b3: v13b3(0x20) = CONST 
0x13b5: v13b5 = ADD v13b3(0x20) v13b1
0x13b8: v13b8 = SUB v13b5 v1346
0x13ba: MSTORE v13b1 v13b8
0x13be: v13be = MLOAD v66d
0x13c0: MSTORE v13b5 v13be
0x13c1: v13c1(0x20) = CONST 
0x13c3: v13c3 = ADD v13c1(0x20) v13b5
0x13c7: v13c7 = MLOAD v66d
0x13c9: v13c9(0x20) = CONST 
0x13cb: v13cb = ADD v13c9(0x20) v66d
0x13d0: v13d0(0x0) = CONST 
----------------------------------

Begin block 0x13d2
prev = {'0x1210', '0x13db'}, next = {'0x13ed', '0x13db'}
----------------------------------
Block 0x13d2
0x13d2_0x0: v13d2_0 = PHI v13d0(0x0) v13e6
0x13d5: v13d5 = LT v13d2_0 v13c7
0x13d6: v13d6 = ISZERO v13d5
0x13d7: v13d7(0x13ed) = CONST 
0x13da: JUMPI v13d7(0x13ed) v13d6
----------------------------------

Begin block 0x13db
prev = {'0x13d2'}, next = {'0x13d2'}
----------------------------------
Block 0x13db
0x13db_0x0: v13db_0 = PHI v13d0(0x0) v13e6
0x13dd: v13dd = ADD v13cb v13db_0
0x13de: v13de = MLOAD v13dd
0x13e1: v13e1 = ADD v13c3 v13db_0
0x13e2: MSTORE v13e1 v13de
0x13e3: v13e3(0x20) = CONST 
0x13e6: v13e6 = ADD v13db_0 v13e3(0x20)
0x13e9: v13e9(0x13d2) = CONST 
0x13ec: JUMP v13e9(0x13d2)
----------------------------------

Begin block 0x13ed
prev = {'0x13d2'}, next = {'0x141a', '0x1401'}
----------------------------------
Block 0x13ed
0x13f6: v13f6 = ADD v13c7 v13c3
0x13f8: v13f8(0x1f) = CONST 
0x13fa: v13fa = AND v13f8(0x1f) v13c7
0x13fc: v13fc = ISZERO v13fa
0x13fd: v13fd(0x141a) = CONST 
0x1400: JUMPI v13fd(0x141a) v13fc
----------------------------------

Begin block 0x1401
prev = {'0x13ed'}, next = {'0x141a'}
----------------------------------
Block 0x1401
0x1403: v1403 = SUB v13f6 v13fa
0x1405: v1405 = MLOAD v1403
0x1406: v1406(0x1) = CONST 
0x1409: v1409(0x20) = CONST 
0x140b: v140b = SUB v1409(0x20) v13fa
0x140c: v140c(0x100) = CONST 
0x140f: v140f = EXP v140c(0x100) v140b
0x1410: v1410 = SUB v140f v1406(0x1)
0x1411: v1411 = NOT v1410
0x1412: v1412 = AND v1411 v1405
0x1414: MSTORE v1403 v1412
0x1415: v1415(0x20) = CONST 
0x1417: v1417 = ADD v1415(0x20) v1403
----------------------------------

Begin block 0x141a
prev = {'0x13ed', '0x1401'}, next = {'0x143c', '0x1438'}
----------------------------------
Block 0x141a
0x141a_0x1: v141a_1 = PHI v13f6 v1417
0x1423: v1423(0x0) = CONST 
0x1425: v1425(0x40) = CONST 
0x1427: v1427 = MLOAD v1425(0x40)
0x142a: v142a = SUB v141a_1 v1427
0x142c: v142c(0x0) = CONST 
0x1430: v1430 = EXTCODESIZE v130f
0x1431: v1431 = ISZERO v1430
0x1433: v1433 = ISZERO v1431
0x1434: v1434(0x143c) = CONST 
0x1437: JUMPI v1434(0x143c) v1433
----------------------------------

Begin block 0x1438
prev = {'0x141a'}, next = {}
----------------------------------
Block 0x1438
0x1438: v1438(0x0) = CONST 
0x143b: REVERT v1438(0x0) v1438(0x0)
----------------------------------

Begin block 0x143c
prev = {'0x141a'}, next = {'0x1450', '0x1447'}
----------------------------------
Block 0x143c
0x143e: v143e = GAS 
0x143f: v143f = CALL v143e v130f v142c(0x0) v1427 v142a v1427 v1423(0x0)
0x1440: v1440 = ISZERO v143f
0x1442: v1442 = ISZERO v1440
0x1443: v1443(0x1450) = CONST 
0x1446: JUMPI v1443(0x1450) v1442
----------------------------------

Begin block 0x1447
prev = {'0x143c'}, next = {}
----------------------------------
Block 0x1447
0x1447: v1447 = RETURNDATASIZE 
0x1448: v1448(0x0) = CONST 
0x144b: RETURNDATACOPY v1448(0x0) v1448(0x0) v1447
0x144c: v144c = RETURNDATASIZE 
0x144d: v144d(0x0) = CONST 
0x144f: REVERT v144d(0x0) v144c
----------------------------------

Begin block 0x1450
prev = {'0x143c'}, next = {'0x6ac'}
----------------------------------
Block 0x1450
0x1455: v1455(0x1) = CONST 
0x145e: JUMP v5ca(0x6ac)
----------------------------------

Begin block 0x145f
prev = {'0x6e9'}, next = {'0x1470', '0x147f'}
----------------------------------
Block 0x145f
0x1460: v1460(0x0) = CONST 
0x1464: v1464 = MUL v6ef v6f9
0x1467: v1467(0x0) = CONST 
0x146a: v146a = EQ v6ef v1467(0x0)
0x146c: v146c(0x147f) = CONST 
0x146f: JUMPI v146c(0x147f) v146a
----------------------------------

Begin block 0x1470
prev = {'0x145f'}, next = {'0x147b', '0x147c'}
----------------------------------
Block 0x1470
0x1475: v1475 = ISZERO v6ef
0x1476: v1476 = ISZERO v1475
0x1477: v1477(0x147c) = CONST 
0x147a: JUMPI v1477(0x147c) v1476
----------------------------------

Begin block 0x147b
prev = {'0x1470'}, next = {}
----------------------------------
Block 0x147b
0x147b: THROW 
----------------------------------

Begin block 0x147c
prev = {'0x1470'}, next = {'0x147f'}
----------------------------------
Block 0x147c
0x147d: v147d = DIV v1464 v6ef
0x147e: v147e = EQ v147d v6f9
----------------------------------

Begin block 0x147f
prev = {'0x145f', '0x147c'}, next = {'0x148a', '0x1486'}
----------------------------------
Block 0x147f
0x147f_0x0: v147f_0 = PHI v146a v147e
0x1480: v1480 = ISZERO v147f_0
0x1481: v1481 = ISZERO v1480
0x1482: v1482(0x148a) = CONST 
0x1485: JUMPI v1482(0x148a) v1481
----------------------------------

Begin block 0x1486
prev = {'0x147f'}, next = {}
----------------------------------
Block 0x1486
0x1486: v1486(0x0) = CONST 
0x1489: REVERT v1486(0x0) v1486(0x0)
----------------------------------

Begin block 0x148a
prev = {'0x147f'}, next = {'0x709'}
----------------------------------
Block 0x148a
0x148f: JUMP v6d4(0x709)
----------------------------------

Begin block 0x1490
prev = {'0x72b'}, next = {'0x734'}
----------------------------------
Block 0x1490
0x1491: v1491(0x1) = CONST 
0x1493: v1493(0x0) = CONST 
0x1496: v1496 = SLOAD v1491(0x1)
0x1498: v1498(0x100) = CONST 
0x149b: v149b(0x1) = EXP v1498(0x100) v1493(0x0)
0x149d: v149d = DIV v1496 v149b(0x1)
0x149e: v149e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14b3: v14b3 = AND v149e(0xffffffffffffffffffffffffffffffffffffffff) v149d
0x14b5: JUMP v72d(0x734)
----------------------------------

Begin block 0x14b6
prev = {'0x799'}, next = {'0x1513', '0x150f'}
----------------------------------
Block 0x14b6
0x14b7: v14b7(0x0) = CONST 
0x14ba: v14ba(0x0) = CONST 
0x14bd: v14bd = SLOAD v14b7(0x0)
0x14bf: v14bf(0x100) = CONST 
0x14c2: v14c2(0x1) = EXP v14bf(0x100) v14ba(0x0)
0x14c4: v14c4 = DIV v14bd v14c2(0x1)
0x14c5: v14c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14da: v14da = AND v14c5(0xffffffffffffffffffffffffffffffffffffffff) v14c4
0x14db: v14db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14f0: v14f0 = AND v14db(0xffffffffffffffffffffffffffffffffffffffff) v14da
0x14f1: v14f1 = CALLER 
0x14f2: v14f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1507: v1507 = AND v14f2(0xffffffffffffffffffffffffffffffffffffffff) v14f1
0x1508: v1508 = EQ v1507 v14f0
0x1509: v1509 = ISZERO v1508
0x150a: v150a = ISZERO v1509
0x150b: v150b(0x1513) = CONST 
0x150e: JUMPI v150b(0x1513) v150a
----------------------------------

Begin block 0x150f
prev = {'0x14b6'}, next = {}
----------------------------------
Block 0x150f
0x150f: v150f(0x0) = CONST 
0x1512: REVERT v150f(0x0) v150f(0x0)
----------------------------------

Begin block 0x1513
prev = {'0x14b6'}, next = {'0x15d7', '0x15d3'}
----------------------------------
Block 0x1513
0x1515: v1515(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x152a: v152a = AND v1515(0xffffffffffffffffffffffffffffffffffffffff) v7b5
0x152b: v152b(0xa9059cbb) = CONST 
0x1530: v1530(0x0) = CONST 
0x1534: v1534 = SLOAD v1530(0x0)
0x1536: v1536(0x100) = CONST 
0x1539: v1539(0x1) = EXP v1536(0x100) v1530(0x0)
0x153b: v153b = DIV v1534 v1539(0x1)
0x153c: v153c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1551: v1551 = AND v153c(0xffffffffffffffffffffffffffffffffffffffff) v153b
0x1553: v1553(0x40) = CONST 
0x1555: v1555 = MLOAD v1553(0x40)
0x1557: v1557(0xffffffff) = CONST 
0x155c: v155c(0xa9059cbb) = AND v1557(0xffffffff) v152b(0xa9059cbb)
0x155d: v155d(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x157b: v157b(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = MUL v155d(0x100000000000000000000000000000000000000000000000000000000) v155c(0xa9059cbb)
0x157d: MSTORE v1555 v157b(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x157e: v157e(0x4) = CONST 
0x1580: v1580 = ADD v157e(0x4) v1555
0x1583: v1583(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1598: v1598 = AND v1583(0xffffffffffffffffffffffffffffffffffffffff) v1551
0x1599: v1599(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15ae: v15ae = AND v1599(0xffffffffffffffffffffffffffffffffffffffff) v1598
0x15b0: MSTORE v1580 v15ae
0x15b1: v15b1(0x20) = CONST 
0x15b3: v15b3 = ADD v15b1(0x20) v1580
0x15b6: MSTORE v15b3 v7bf
0x15b7: v15b7(0x20) = CONST 
0x15b9: v15b9 = ADD v15b7(0x20) v15b3
0x15be: v15be(0x20) = CONST 
0x15c0: v15c0(0x40) = CONST 
0x15c2: v15c2 = MLOAD v15c0(0x40)
0x15c5: v15c5 = SUB v15b9 v15c2
0x15c7: v15c7(0x0) = CONST 
0x15cb: v15cb = EXTCODESIZE v152a
0x15cc: v15cc = ISZERO v15cb
0x15ce: v15ce = ISZERO v15cc
0x15cf: v15cf(0x15d7) = CONST 
0x15d2: JUMPI v15cf(0x15d7) v15ce
----------------------------------

Begin block 0x15d3
prev = {'0x1513'}, next = {}
----------------------------------
Block 0x15d3
0x15d3: v15d3(0x0) = CONST 
0x15d6: REVERT v15d3(0x0) v15d3(0x0)
----------------------------------

Begin block 0x15d7
prev = {'0x1513'}, next = {'0x15eb', '0x15e2'}
----------------------------------
Block 0x15d7
0x15d9: v15d9 = GAS 
0x15da: v15da = CALL v15d9 v152a v15c7(0x0) v15c2 v15c5 v15c2 v15be(0x20)
0x15db: v15db = ISZERO v15da
0x15dd: v15dd = ISZERO v15db
0x15de: v15de(0x15eb) = CONST 
0x15e1: JUMPI v15de(0x15eb) v15dd
----------------------------------

Begin block 0x15e2
prev = {'0x15d7'}, next = {}
----------------------------------
Block 0x15e2
0x15e2: v15e2 = RETURNDATASIZE 
0x15e3: v15e3(0x0) = CONST 
0x15e6: RETURNDATACOPY v15e3(0x0) v15e3(0x0) v15e2
0x15e7: v15e7 = RETURNDATASIZE 
0x15e8: v15e8(0x0) = CONST 
0x15ea: REVERT v15e8(0x0) v15e7
----------------------------------

Begin block 0x15eb
prev = {'0x15d7'}, next = {'0x1601', '0x15fd'}
----------------------------------
Block 0x15eb
0x15f0: v15f0(0x40) = CONST 
0x15f2: v15f2 = MLOAD v15f0(0x40)
0x15f3: v15f3 = RETURNDATASIZE 
0x15f4: v15f4(0x20) = CONST 
0x15f7: v15f7 = LT v15f3 v15f4(0x20)
0x15f8: v15f8 = ISZERO v15f7
0x15f9: v15f9(0x1601) = CONST 
0x15fc: JUMPI v15f9(0x1601) v15f8
----------------------------------

Begin block 0x15fd
prev = {'0x15eb'}, next = {}
----------------------------------
Block 0x15fd
0x15fd: v15fd(0x0) = CONST 
0x1600: REVERT v15fd(0x0) v15fd(0x0)
----------------------------------

Begin block 0x1601
prev = {'0x15eb'}, next = {'0x7cf'}
----------------------------------
Block 0x1601
0x1603: v1603 = ADD v15f2 v15f3
0x1607: v1607 = MLOAD v15f2
0x1609: v1609(0x20) = CONST 
0x160b: v160b = ADD v1609(0x20) v15f2
0x1619: JUMP v784(0x7cf)
----------------------------------

Begin block 0x161a
prev = {'0x80c'}, next = {'0x858'}
----------------------------------
Block 0x161a
0x161b: v161b(0x0) = CONST 
0x161d: v161d(0x7) = CONST 
0x161f: v161f(0x0) = CONST 
0x1622: v1622(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1637: v1637 = AND v1622(0xffffffffffffffffffffffffffffffffffffffff) v828
0x1638: v1638(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x164d: v164d = AND v1638(0xffffffffffffffffffffffffffffffffffffffff) v1637
0x164f: MSTORE v161f(0x0) v164d
0x1650: v1650(0x20) = CONST 
0x1652: v1652(0x20) = ADD v1650(0x20) v161f(0x0)
0x1655: MSTORE v1652(0x20) v161d(0x7)
0x1656: v1656(0x20) = CONST 
0x1658: v1658(0x40) = ADD v1656(0x20) v1652(0x20)
0x1659: v1659(0x0) = CONST 
0x165b: v165b = SHA3 v1659(0x0) v1658(0x40)
0x165c: v165c(0x0) = CONST 
0x165f: v165f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1674: v1674 = AND v165f(0xffffffffffffffffffffffffffffffffffffffff) v848
0x1675: v1675(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x168a: v168a = AND v1675(0xffffffffffffffffffffffffffffffffffffffff) v1674
0x168c: MSTORE v165c(0x0) v168a
0x168d: v168d(0x20) = CONST 
0x168f: v168f(0x20) = ADD v168d(0x20) v165c(0x0)
0x1692: MSTORE v168f(0x20) v165b
0x1693: v1693(0x20) = CONST 
0x1695: v1695(0x40) = ADD v1693(0x20) v168f(0x20)
0x1696: v1696(0x0) = CONST 
0x1698: v1698 = SHA3 v1696(0x0) v1695(0x40)
0x1699: v1699 = SLOAD v1698
0x16a0: JUMP v7f7(0x858)
----------------------------------

Begin block 0x16a1
prev = {}, next = {'0x16b30x16a1', '0x16b70x16a1'}
----------------------------------
function 0x16a1(v16a1arg0, v16a1arg1, v16a1arg2)
Block 0x16a1
0x16a2: v16a2(0x0) = CONST 
0x16a6: v16a6 = ADD v16a1arg1 v16a1arg0
0x16ab: v16ab = LT v16a6 v16a1arg1
0x16ac: v16ac = ISZERO v16ab
0x16ad: v16ad = ISZERO v16ac
0x16ae: v16ae = ISZERO v16ad
0x16af: v16af(0x16b7) = CONST 
0x16b2: JUMPI v16af(0x16b7) v16ae
----------------------------------

Begin block 0x16a10x86e
prev = {'0x891'}, next = {'0x16b30x86e', '0x16b70x86e'}
----------------------------------
Block 0x16a10x86e
0x16a20x86e: v86e16a2(0x0) = CONST 
0x16a60x86e: v86e16a6 = ADD v897 v8a1
0x16ab0x86e: v86e16ab = LT v86e16a6 v897
0x16ac0x86e: v86e16ac = ISZERO v86e16ab
0x16ad0x86e: v86e16ad = ISZERO v86e16ac
0x16ae0x86e: v86e16ae = ISZERO v86e16ad
0x16af0x86e: v86e16af(0x16b7) = CONST 
0x16b20x86e: JUMPI v86e16af(0x16b7) v86e16ae
----------------------------------

Begin block 0x16b30x86e
prev = {'0x16a10x86e'}, next = {}
----------------------------------
Block 0x16b30x86e
0x16b30x86e: v86e16b3(0x0) = CONST 
0x16b60x86e: REVERT v86e16b3(0x0) v86e16b3(0x0)
----------------------------------

Begin block 0x16b30x16a1
prev = {'0x16a1'}, next = {}
----------------------------------
Block 0x16b30x16a1
0x16b30x16a1: v16a116b3(0x0) = CONST 
0x16b60x16a1: REVERT v16a116b3(0x0) v16a116b3(0x0)
----------------------------------

Begin block 0x16b70x86e
prev = {'0x16a10x86e'}, next = {'0x8b1'}
----------------------------------
Block 0x16b70x86e
0x16bc0x86e: JUMP v87c(0x8b1)
----------------------------------

Begin block 0x16b70x16a1
prev = {'0x16a1'}, next = {}
----------------------------------
Block 0x16b70x16a1
0x16bc0x16a1: RETURNPRIVATE v16a1arg2 v16a6
----------------------------------

Begin block 0x16bd
prev = {'0x8ea'}, next = {'0x1718', '0x1714'}
----------------------------------
Block 0x16bd
0x16be: v16be(0x0) = CONST 
0x16c2: v16c2 = SLOAD v16be(0x0)
0x16c4: v16c4(0x100) = CONST 
0x16c7: v16c7(0x1) = EXP v16c4(0x100) v16be(0x0)
0x16c9: v16c9 = DIV v16c2 v16c7(0x1)
0x16ca: v16ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16df: v16df = AND v16ca(0xffffffffffffffffffffffffffffffffffffffff) v16c9
0x16e0: v16e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16f5: v16f5 = AND v16e0(0xffffffffffffffffffffffffffffffffffffffff) v16df
0x16f6: v16f6 = CALLER 
0x16f7: v16f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x170c: v170c = AND v16f7(0xffffffffffffffffffffffffffffffffffffffff) v16f6
0x170d: v170d = EQ v170c v16f5
0x170e: v170e = ISZERO v170d
0x170f: v170f = ISZERO v170e
0x1710: v1710(0x1718) = CONST 
0x1713: JUMPI v1710(0x1718) v170f
----------------------------------

Begin block 0x1714
prev = {'0x16bd'}, next = {}
----------------------------------
Block 0x1714
0x1714: v1714(0x0) = CONST 
0x1717: REVERT v1714(0x0) v1714(0x0)
----------------------------------

Begin block 0x1718
prev = {'0x16bd'}, next = {'0x916'}
----------------------------------
Block 0x1718
0x171a: v171a(0x1) = CONST 
0x171c: v171c(0x0) = CONST 
0x171e: v171e(0x100) = CONST 
0x1721: v1721(0x1) = EXP v171e(0x100) v171c(0x0)
0x1723: v1723 = SLOAD v171a(0x1)
0x1725: v1725(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x173a: v173a(0xffffffffffffffffffffffffffffffffffffffff) = MUL v1725(0xffffffffffffffffffffffffffffffffffffffff) v1721(0x1)
0x173b: v173b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v173a(0xffffffffffffffffffffffffffffffffffffffff)
0x173c: v173c = AND v173b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v1723
0x173f: v173f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1754: v1754 = AND v173f(0xffffffffffffffffffffffffffffffffffffffff) v906
0x1755: v1755 = MUL v1754 v1721(0x1)
0x1756: v1756 = OR v1755 v173c
0x1758: SSTORE v171a(0x1) v1756
0x175b: JUMP v8d5(0x916)
----------------------------------

Begin block 0x17ae
prev = {'0x0', '0x107'}, next = {}
----------------------------------
Block 0x17ae
0x17af: v17af(0x112) = CONST 
0x17b0: CALLPRIVATE v17af(0x112)
----------------------------------

Begin block 0x17b1
prev = {'0xd'}, next = {}
----------------------------------
Block 0x17b1
0x17b2: v17b2(0x117) = CONST 
0x17b3: CALLPRIVATE v17b2(0x117)
----------------------------------

Begin block 0x17b4
prev = {'0x41'}, next = {}
----------------------------------
Block 0x17b4
0x17b5: v17b5(0x1a7) = CONST 
0x17b6: CALLPRIVATE v17b5(0x1a7)
----------------------------------

Begin block 0x17b7
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x17b7
0x17b8: v17b8(0x21a) = CONST 
0x17b9: CALLPRIVATE v17b8(0x21a)
----------------------------------

Begin block 0x17ba
prev = {'0x57'}, next = {}
----------------------------------
Block 0x17ba
0x17bb: v17bb(0x245) = CONST 
0x17bc: CALLPRIVATE v17bb(0x245)
----------------------------------

Begin block 0x17bd
prev = {'0x62'}, next = {}
----------------------------------
Block 0x17bd
0x17be: v17be(0x2d8) = CONST 
0x17bf: CALLPRIVATE v17be(0x2d8)
----------------------------------

Begin block 0x17c0
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x17c0
0x17c1: v17c1(0x309) = CONST 
0x17c2: CALLPRIVATE v17c1(0x309)
----------------------------------

Begin block 0x17c3
prev = {'0x78'}, next = {}
----------------------------------
Block 0x17c3
0x17c4: v17c4(0x334) = CONST 
0x17c5: CALLPRIVATE v17c4(0x334)
----------------------------------

Begin block 0x17c6
prev = {'0x83'}, next = {}
----------------------------------
Block 0x17c6
0x17c7: v17c7(0x399) = CONST 
0x17c8: CALLPRIVATE v17c7(0x399)
----------------------------------

Begin block 0x17c9
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x17c9
0x17ca: v17ca(0x3b0) = CONST 
0x17cb: CALLPRIVATE v17ca(0x3b0)
----------------------------------

Begin block 0x17cc
prev = {'0x99'}, next = {}
----------------------------------
Block 0x17cc
0x17cd: v17cd(0x407) = CONST 
0x17ce: CALLPRIVATE v17cd(0x407)
----------------------------------

Begin block 0x17cf
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x17cf
0x17d0: v17d0(0x497) = CONST 
0x17d1: CALLPRIVATE v17d0(0x497)
----------------------------------

Begin block 0x17d2
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x17d2
0x17d3: v17d3(0x4f0) = CONST 
0x17d4: CALLPRIVATE v17d3(0x4f0)
----------------------------------

Begin block 0x17d5
prev = {'0xba'}, next = {}
----------------------------------
Block 0x17d5
0x17d6: v17d6(0x563) = CONST 
0x17d7: CALLPRIVATE v17d6(0x563)
----------------------------------

Begin block 0x17d8
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x17d8
0x17d9: v17d9(0x5bc) = CONST 
0x17da: CALLPRIVATE v17d9(0x5bc)
----------------------------------

Begin block 0x17db
prev = {'0xd0'}, next = {}
----------------------------------
Block 0x17db
0x17dc: v17dc(0x6c6) = CONST 
0x17dd: CALLPRIVATE v17dc(0x6c6)
----------------------------------

Begin block 0x17de
prev = {'0xdb'}, next = {}
----------------------------------
Block 0x17de
0x17df: v17df(0x71f) = CONST 
0x17e0: CALLPRIVATE v17df(0x71f)
----------------------------------

Begin block 0x17e1
prev = {'0xe6'}, next = {}
----------------------------------
Block 0x17e1
0x17e2: v17e2(0x776) = CONST 
0x17e3: CALLPRIVATE v17e2(0x776)
----------------------------------

Begin block 0x17e4
prev = {'0xf1'}, next = {}
----------------------------------
Block 0x17e4
0x17e5: v17e5(0x7e9) = CONST 
0x17e6: CALLPRIVATE v17e5(0x7e9)
----------------------------------

Begin block 0x17e7
prev = {'0xfc'}, next = {}
----------------------------------
Block 0x17e7
0x17e8: v17e8(0x86e) = CONST 
0x17e9: CALLPRIVATE v17e8(0x86e)
----------------------------------

Begin block 0x17ea
prev = {'0x107'}, next = {}
----------------------------------
Block 0x17ea
0x17eb: v17eb(0x8c7) = CONST 
0x17ec: CALLPRIVATE v17eb(0x8c7)
----------------------------------
