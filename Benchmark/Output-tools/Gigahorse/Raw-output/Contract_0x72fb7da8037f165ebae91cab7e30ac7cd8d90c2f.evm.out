
Begin block 0x0
prev = {}, next = {'0xd', '0x1765'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x173b: v173b(0x1765) = CONST 
0x173c: JUMPI v173b(0x1765) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1e', '0xa0'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0xa293d1e8) = CONST 
0x19: v19 = GT v14(0xa293d1e8) v12
0x1a: v1a(0xa0) = CONST 
0x1d: JUMPI v1a(0xa0) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0x29', '0x64'}
----------------------------------
Block 0x1e
0x1f: v1f(0xd4ee1d90) = CONST 
0x24: v24 = GT v1f(0xd4ee1d90) v12
0x25: v25(0x64) = CONST 
0x28: JUMPI v25(0x64) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0x1795'}
----------------------------------
Block 0x29
0x2a: v2a(0xd4ee1d90) = CONST 
0x2f: v2f = EQ v2a(0xd4ee1d90) v12
0x173d: v173d(0x1795) = CONST 
0x173e: JUMPI v173d(0x1795) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0x1798', '0x3f'}
----------------------------------
Block 0x34
0x35: v35(0xdc39d06d) = CONST 
0x3a: v3a = EQ v35(0xdc39d06d) v12
0x173f: v173f(0x1798) = CONST 
0x1740: JUMPI v173f(0x1798) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x4a', '0x179b'}
----------------------------------
Block 0x3f
0x40: v40(0xdd62ed3e) = CONST 
0x45: v45 = EQ v40(0xdd62ed3e) v12
0x1741: v1741(0x179b) = CONST 
0x1742: JUMPI v1741(0x179b) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x55', '0x179e'}
----------------------------------
Block 0x4a
0x4b: v4b(0xe6cb9013) = CONST 
0x50: v50 = EQ v4b(0xe6cb9013) v12
0x1743: v1743(0x179e) = CONST 
0x1744: JUMPI v1743(0x179e) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x17a1', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0xf2fde38b) = CONST 
0x5b: v5b = EQ v56(0xf2fde38b) v12
0x1745: v1745(0x17a1) = CONST 
0x1746: JUMPI v1745(0x17a1) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x11f0x0'}
----------------------------------
Block 0x60
0x60: v60(0x11f) = CONST 
0x63: JUMP v60(0x11f)
----------------------------------

Begin block 0x64
prev = {'0x1e'}, next = {'0x1786', '0x70'}
----------------------------------
Block 0x64
0x66: v66(0xa293d1e8) = CONST 
0x6b: v6b = EQ v66(0xa293d1e8) v12
0x1747: v1747(0x1786) = CONST 
0x1748: JUMPI v1747(0x1786) v6b
----------------------------------

Begin block 0x70
prev = {'0x64'}, next = {'0x1789', '0x7b'}
----------------------------------
Block 0x70
0x71: v71(0xa9059cbb) = CONST 
0x76: v76 = EQ v71(0xa9059cbb) v12
0x1749: v1749(0x1789) = CONST 
0x174a: JUMPI v1749(0x1789) v76
----------------------------------

Begin block 0x7b
prev = {'0x70'}, next = {'0x178c', '0x86'}
----------------------------------
Block 0x7b
0x7c: v7c(0xb5931f7c) = CONST 
0x81: v81 = EQ v7c(0xb5931f7c) v12
0x174b: v174b(0x178c) = CONST 
0x174c: JUMPI v174b(0x178c) v81
----------------------------------

Begin block 0x86
prev = {'0x7b'}, next = {'0x178f', '0x91'}
----------------------------------
Block 0x86
0x87: v87(0xcae9ca51) = CONST 
0x8c: v8c = EQ v87(0xcae9ca51) v12
0x174d: v174d(0x178f) = CONST 
0x174e: JUMPI v174d(0x178f) v8c
----------------------------------

Begin block 0x91
prev = {'0x86'}, next = {'0x9c', '0x1792'}
----------------------------------
Block 0x91
0x92: v92(0xd05c78da) = CONST 
0x97: v97 = EQ v92(0xd05c78da) v12
0x174f: v174f(0x1792) = CONST 
0x1750: JUMPI v174f(0x1792) v97
----------------------------------

Begin block 0x9c
prev = {'0x91'}, next = {'0x11f0x0'}
----------------------------------
Block 0x9c
0x9c: v9c(0x11f) = CONST 
0x9f: JUMP v9c(0x11f)
----------------------------------

Begin block 0xa0
prev = {'0xd'}, next = {'0xac', '0xe7'}
----------------------------------
Block 0xa0
0xa2: va2(0x3eaaf86b) = CONST 
0xa7: va7 = GT va2(0x3eaaf86b) v12
0xa8: va8(0xe7) = CONST 
0xab: JUMPI va8(0xe7) va7
----------------------------------

Begin block 0xac
prev = {'0xa0'}, next = {'0xb7', '0x1777'}
----------------------------------
Block 0xac
0xad: vad(0x3eaaf86b) = CONST 
0xb2: vb2 = EQ vad(0x3eaaf86b) v12
0x1751: v1751(0x1777) = CONST 
0x1752: JUMPI v1751(0x1777) vb2
----------------------------------

Begin block 0xb7
prev = {'0xac'}, next = {'0x177a', '0xc2'}
----------------------------------
Block 0xb7
0xb8: vb8(0x70a08231) = CONST 
0xbd: vbd = EQ vb8(0x70a08231) v12
0x1753: v1753(0x177a) = CONST 
0x1754: JUMPI v1753(0x177a) vbd
----------------------------------

Begin block 0xc2
prev = {'0xb7'}, next = {'0x177d', '0xcd'}
----------------------------------
Block 0xc2
0xc3: vc3(0x79ba5097) = CONST 
0xc8: vc8 = EQ vc3(0x79ba5097) v12
0x1755: v1755(0x177d) = CONST 
0x1756: JUMPI v1755(0x177d) vc8
----------------------------------

Begin block 0xcd
prev = {'0xc2'}, next = {'0x1780', '0xd8'}
----------------------------------
Block 0xcd
0xce: vce(0x8da5cb5b) = CONST 
0xd3: vd3 = EQ vce(0x8da5cb5b) v12
0x1757: v1757(0x1780) = CONST 
0x1758: JUMPI v1757(0x1780) vd3
----------------------------------

Begin block 0xd8
prev = {'0xcd'}, next = {'0x1783', '0xe3'}
----------------------------------
Block 0xd8
0xd9: vd9(0x95d89b41) = CONST 
0xde: vde = EQ vd9(0x95d89b41) v12
0x1759: v1759(0x1783) = CONST 
0x175a: JUMPI v1759(0x1783) vde
----------------------------------

Begin block 0xe3
prev = {'0xd8'}, next = {'0x11f0x0'}
----------------------------------
Block 0xe3
0xe3: ve3(0x11f) = CONST 
0xe6: JUMP ve3(0x11f)
----------------------------------

Begin block 0xe7
prev = {'0xa0'}, next = {'0x1768', '0xf3'}
----------------------------------
Block 0xe7
0xe9: ve9(0x6fdde03) = CONST 
0xee: vee = EQ ve9(0x6fdde03) v12
0x175b: v175b(0x1768) = CONST 
0x175c: JUMPI v175b(0x1768) vee
----------------------------------

Begin block 0xf3
prev = {'0xe7'}, next = {'0x176b', '0xfe'}
----------------------------------
Block 0xf3
0xf4: vf4(0x95ea7b3) = CONST 
0xf9: vf9 = EQ vf4(0x95ea7b3) v12
0x175d: v175d(0x176b) = CONST 
0x175e: JUMPI v175d(0x176b) vf9
----------------------------------

Begin block 0xfe
prev = {'0xf3'}, next = {'0x176e', '0x109'}
----------------------------------
Block 0xfe
0xff: vff(0x18160ddd) = CONST 
0x104: v104 = EQ vff(0x18160ddd) v12
0x175f: v175f(0x176e) = CONST 
0x1760: JUMPI v175f(0x176e) v104
----------------------------------

Begin block 0x109
prev = {'0xfe'}, next = {'0x114', '0x1771'}
----------------------------------
Block 0x109
0x10a: v10a(0x23b872dd) = CONST 
0x10f: v10f = EQ v10a(0x23b872dd) v12
0x1761: v1761(0x1771) = CONST 
0x1762: JUMPI v1761(0x1771) v10f
----------------------------------

Begin block 0x114
prev = {'0x109'}, next = {'0x1774', '0x1765'}
----------------------------------
Block 0x114
0x115: v115(0x313ce567) = CONST 
0x11a: v11a = EQ v115(0x313ce567) v12
0x1763: v1763(0x1774) = CONST 
0x1764: JUMPI v1763(0x1774) v11a
----------------------------------

Begin block 0x11f
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x11f
0x120: v120(0x0) = CONST 
0x123: REVERT v120(0x0) v120(0x0)
----------------------------------

Begin block 0x11f0x0
prev = {'0x9c', '0x60', '0xe3', '0x1765'}, next = {}
----------------------------------
Block 0x11f0x0
0x1200x0: v0120(0x0) = CONST 
0x1230x0: REVERT v0120(0x0) v0120(0x0)
----------------------------------

Begin block 0x124
prev = {}, next = {'0x12c', '0x130'}
----------------------------------
function name()()
Block 0x124
0x125: v125 = CALLVALUE 
0x127: v127 = ISZERO v125
0x128: v128(0x130) = CONST 
0x12b: JUMPI v128(0x130) v127
----------------------------------

Begin block 0x12c
prev = {'0x124'}, next = {}
----------------------------------
Block 0x12c
0x12c: v12c(0x0) = CONST 
0x12f: REVERT v12c(0x0) v12c(0x0)
----------------------------------

Begin block 0x130
prev = {'0x124'}, next = {'0x925'}
----------------------------------
Block 0x130
0x132: v132(0x139) = CONST 
0x135: v135(0x925) = CONST 
0x138: JUMP v135(0x925)
----------------------------------

Begin block 0x139
prev = {'0x9bb'}, next = {'0x15e'}
----------------------------------
Block 0x139
0x13a: v13a(0x40) = CONST 
0x13c: v13c = MLOAD v13a(0x40)
0x13f: v13f(0x20) = CONST 
0x141: v141 = ADD v13f(0x20) v13c
0x144: v144 = SUB v141 v13c
0x146: MSTORE v13c v144
0x14a: v14a = MLOAD v94a
0x14c: MSTORE v141 v14a
0x14d: v14d(0x20) = CONST 
0x14f: v14f = ADD v14d(0x20) v141
0x153: v153 = MLOAD v94a
0x155: v155(0x20) = CONST 
0x157: v157 = ADD v155(0x20) v94a
0x15c: v15c(0x0) = CONST 
----------------------------------

Begin block 0x15e
prev = {'0x167', '0x139'}, next = {'0x167', '0x179'}
----------------------------------
Block 0x15e
0x15e_0x0: v15e_0 = PHI v15c(0x0) v172
0x161: v161 = LT v15e_0 v153
0x162: v162 = ISZERO v161
0x163: v163(0x179) = CONST 
0x166: JUMPI v163(0x179) v162
----------------------------------

Begin block 0x167
prev = {'0x15e'}, next = {'0x15e'}
----------------------------------
Block 0x167
0x167_0x0: v167_0 = PHI v15c(0x0) v172
0x169: v169 = ADD v157 v167_0
0x16a: v16a = MLOAD v169
0x16d: v16d = ADD v14f v167_0
0x16e: MSTORE v16d v16a
0x16f: v16f(0x20) = CONST 
0x172: v172 = ADD v167_0 v16f(0x20)
0x175: v175(0x15e) = CONST 
0x178: JUMP v175(0x15e)
----------------------------------

Begin block 0x179
prev = {'0x15e'}, next = {'0x1a6', '0x18d'}
----------------------------------
Block 0x179
0x182: v182 = ADD v153 v14f
0x184: v184(0x1f) = CONST 
0x186: v186 = AND v184(0x1f) v153
0x188: v188 = ISZERO v186
0x189: v189(0x1a6) = CONST 
0x18c: JUMPI v189(0x1a6) v188
----------------------------------

Begin block 0x18d
prev = {'0x179'}, next = {'0x1a6'}
----------------------------------
Block 0x18d
0x18f: v18f = SUB v182 v186
0x191: v191 = MLOAD v18f
0x192: v192(0x1) = CONST 
0x195: v195(0x20) = CONST 
0x197: v197 = SUB v195(0x20) v186
0x198: v198(0x100) = CONST 
0x19b: v19b = EXP v198(0x100) v197
0x19c: v19c = SUB v19b v192(0x1)
0x19d: v19d = NOT v19c
0x19e: v19e = AND v19d v191
0x1a0: MSTORE v18f v19e
0x1a1: v1a1(0x20) = CONST 
0x1a3: v1a3 = ADD v1a1(0x20) v18f
----------------------------------

Begin block 0x1a6
prev = {'0x179', '0x18d'}, next = {}
----------------------------------
Block 0x1a6
0x1a6_0x1: v1a6_1 = PHI v182 v1a3
0x1ac: v1ac(0x40) = CONST 
0x1ae: v1ae = MLOAD v1ac(0x40)
0x1b1: v1b1 = SUB v1a6_1 v1ae
0x1b3: RETURN v1ae v1b1
----------------------------------

Begin block 0x1b4
prev = {}, next = {'0x1c0', '0x1bc'}
----------------------------------
function approve(address,uint256)()
Block 0x1b4
0x1b5: v1b5 = CALLVALUE 
0x1b7: v1b7 = ISZERO v1b5
0x1b8: v1b8(0x1c0) = CONST 
0x1bb: JUMPI v1b8(0x1c0) v1b7
----------------------------------

Begin block 0x1bc
prev = {'0x1b4'}, next = {}
----------------------------------
Block 0x1bc
0x1bc: v1bc(0x0) = CONST 
0x1bf: REVERT v1bc(0x0) v1bc(0x0)
----------------------------------

Begin block 0x1c0
prev = {'0x1b4'}, next = {'0x1d3', '0x1d7'}
----------------------------------
Block 0x1c0
0x1c2: v1c2(0x20d) = CONST 
0x1c5: v1c5(0x4) = CONST 
0x1c8: v1c8 = CALLDATASIZE 
0x1c9: v1c9 = SUB v1c8 v1c5(0x4)
0x1ca: v1ca(0x40) = CONST 
0x1cd: v1cd = LT v1c9 v1ca(0x40)
0x1ce: v1ce = ISZERO v1cd
0x1cf: v1cf(0x1d7) = CONST 
0x1d2: JUMPI v1cf(0x1d7) v1ce
----------------------------------

Begin block 0x1d3
prev = {'0x1c0'}, next = {}
----------------------------------
Block 0x1d3
0x1d3: v1d3(0x0) = CONST 
0x1d6: REVERT v1d3(0x0) v1d3(0x0)
----------------------------------

Begin block 0x1d7
prev = {'0x1c0'}, next = {'0x9c3'}
----------------------------------
Block 0x1d7
0x1d9: v1d9 = ADD v1c5(0x4) v1c9
0x1dd: v1dd = CALLDATALOAD v1c5(0x4)
0x1de: v1de(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f3: v1f3 = AND v1de(0xffffffffffffffffffffffffffffffffffffffff) v1dd
0x1f5: v1f5(0x20) = CONST 
0x1f7: v1f7 = ADD v1f5(0x20) v1c5(0x4)
0x1fd: v1fd = CALLDATALOAD v1f7
0x1ff: v1ff(0x20) = CONST 
0x201: v201 = ADD v1ff(0x20) v1f7
0x209: v209(0x9c3) = CONST 
0x20c: JUMP v209(0x9c3)
----------------------------------

Begin block 0x20d
prev = {'0x9c3'}, next = {}
----------------------------------
Block 0x20d
0x20e: v20e(0x40) = CONST 
0x210: v210 = MLOAD v20e(0x40)
0x213: v213 = ISZERO vaac(0x1)
0x214: v214 = ISZERO v213
0x215: v215 = ISZERO v214
0x216: v216 = ISZERO v215
0x218: MSTORE v210 v216
0x219: v219(0x20) = CONST 
0x21b: v21b = ADD v219(0x20) v210
0x21f: v21f(0x40) = CONST 
0x221: v221 = MLOAD v21f(0x40)
0x224: v224 = SUB v21b v221
0x226: RETURN v221 v224
----------------------------------

Begin block 0x227
prev = {}, next = {'0x22f', '0x233'}
----------------------------------
function totalSupply()()
Block 0x227
0x228: v228 = CALLVALUE 
0x22a: v22a = ISZERO v228
0x22b: v22b(0x233) = CONST 
0x22e: JUMPI v22b(0x233) v22a
----------------------------------

Begin block 0x22f
prev = {'0x227'}, next = {}
----------------------------------
Block 0x22f
0x22f: v22f(0x0) = CONST 
0x232: REVERT v22f(0x0) v22f(0x0)
----------------------------------

Begin block 0x233
prev = {'0x227'}, next = {'0xab5'}
----------------------------------
Block 0x233
0x235: v235(0x23c) = CONST 
0x238: v238(0xab5) = CONST 
0x23b: JUMP v238(0xab5)
----------------------------------

Begin block 0x23c
prev = {'0xab5'}, next = {}
----------------------------------
Block 0x23c
0x23d: v23d(0x40) = CONST 
0x23f: v23f = MLOAD v23d(0x40)
0x243: MSTORE v23f vafb
0x244: v244(0x20) = CONST 
0x246: v246 = ADD v244(0x20) v23f
0x24a: v24a(0x40) = CONST 
0x24c: v24c = MLOAD v24a(0x40)
0x24f: v24f = SUB v246 v24c
0x251: RETURN v24c v24f
----------------------------------

Begin block 0x252
prev = {}, next = {'0x25a', '0x25e'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x252
0x253: v253 = CALLVALUE 
0x255: v255 = ISZERO v253
0x256: v256(0x25e) = CONST 
0x259: JUMPI v256(0x25e) v255
----------------------------------

Begin block 0x25a
prev = {'0x252'}, next = {}
----------------------------------
Block 0x25a
0x25a: v25a(0x0) = CONST 
0x25d: REVERT v25a(0x0) v25a(0x0)
----------------------------------

Begin block 0x25e
prev = {'0x252'}, next = {'0x275', '0x271'}
----------------------------------
Block 0x25e
0x260: v260(0x2cb) = CONST 
0x263: v263(0x4) = CONST 
0x266: v266 = CALLDATASIZE 
0x267: v267 = SUB v266 v263(0x4)
0x268: v268(0x60) = CONST 
0x26b: v26b = LT v267 v268(0x60)
0x26c: v26c = ISZERO v26b
0x26d: v26d(0x275) = CONST 
0x270: JUMPI v26d(0x275) v26c
----------------------------------

Begin block 0x271
prev = {'0x25e'}, next = {}
----------------------------------
Block 0x271
0x271: v271(0x0) = CONST 
0x274: REVERT v271(0x0) v271(0x0)
----------------------------------

Begin block 0x275
prev = {'0x25e'}, next = {'0xb00'}
----------------------------------
Block 0x275
0x277: v277 = ADD v263(0x4) v267
0x27b: v27b = CALLDATALOAD v263(0x4)
0x27c: v27c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x291: v291 = AND v27c(0xffffffffffffffffffffffffffffffffffffffff) v27b
0x293: v293(0x20) = CONST 
0x295: v295 = ADD v293(0x20) v263(0x4)
0x29b: v29b = CALLDATALOAD v295
0x29c: v29c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2b1: v2b1 = AND v29c(0xffffffffffffffffffffffffffffffffffffffff) v29b
0x2b3: v2b3(0x20) = CONST 
0x2b5: v2b5 = ADD v2b3(0x20) v295
0x2bb: v2bb = CALLDATALOAD v2b5
0x2bd: v2bd(0x20) = CONST 
0x2bf: v2bf = ADD v2bd(0x20) v2b5
0x2c7: v2c7(0xb00) = CONST 
0x2ca: JUMP v2c7(0xb00)
----------------------------------

Begin block 0x2cb
prev = {'0xcdd'}, next = {}
----------------------------------
Block 0x2cb
0x2cc: v2cc(0x40) = CONST 
0x2ce: v2ce = MLOAD v2cc(0x40)
0x2d1: v2d1 = ISZERO vd86(0x1)
0x2d2: v2d2 = ISZERO v2d1
0x2d3: v2d3 = ISZERO v2d2
0x2d4: v2d4 = ISZERO v2d3
0x2d6: MSTORE v2ce v2d4
0x2d7: v2d7(0x20) = CONST 
0x2d9: v2d9 = ADD v2d7(0x20) v2ce
0x2dd: v2dd(0x40) = CONST 
0x2df: v2df = MLOAD v2dd(0x40)
0x2e2: v2e2 = SUB v2d9 v2df
0x2e4: RETURN v2df v2e2
----------------------------------

Begin block 0x2e5
prev = {}, next = {'0x2ed', '0x2f1'}
----------------------------------
function decimals()()
Block 0x2e5
0x2e6: v2e6 = CALLVALUE 
0x2e8: v2e8 = ISZERO v2e6
0x2e9: v2e9(0x2f1) = CONST 
0x2ec: JUMPI v2e9(0x2f1) v2e8
----------------------------------

Begin block 0x2ed
prev = {'0x2e5'}, next = {}
----------------------------------
Block 0x2ed
0x2ed: v2ed(0x0) = CONST 
0x2f0: REVERT v2ed(0x0) v2ed(0x0)
----------------------------------

Begin block 0x2f1
prev = {'0x2e5'}, next = {'0xd90'}
----------------------------------
Block 0x2f1
0x2f3: v2f3(0x2fa) = CONST 
0x2f6: v2f6(0xd90) = CONST 
0x2f9: JUMP v2f6(0xd90)
----------------------------------

Begin block 0x2fa
prev = {'0xd90'}, next = {}
----------------------------------
Block 0x2fa
0x2fb: v2fb(0x40) = CONST 
0x2fd: v2fd = MLOAD v2fb(0x40)
0x300: v300(0xff) = CONST 
0x302: v302 = AND v300(0xff) vda0
0x303: v303(0xff) = CONST 
0x305: v305 = AND v303(0xff) v302
0x307: MSTORE v2fd v305
0x308: v308(0x20) = CONST 
0x30a: v30a = ADD v308(0x20) v2fd
0x30e: v30e(0x40) = CONST 
0x310: v310 = MLOAD v30e(0x40)
0x313: v313 = SUB v30a v310
0x315: RETURN v310 v313
----------------------------------

Begin block 0x316
prev = {}, next = {'0x31e', '0x322'}
----------------------------------
function _totalSupply()()
Block 0x316
0x317: v317 = CALLVALUE 
0x319: v319 = ISZERO v317
0x31a: v31a(0x322) = CONST 
0x31d: JUMPI v31a(0x322) v319
----------------------------------

Begin block 0x31e
prev = {'0x316'}, next = {}
----------------------------------
Block 0x31e
0x31e: v31e(0x0) = CONST 
0x321: REVERT v31e(0x0) v31e(0x0)
----------------------------------

Begin block 0x322
prev = {'0x316'}, next = {'0xda3'}
----------------------------------
Block 0x322
0x324: v324(0x32b) = CONST 
0x327: v327(0xda3) = CONST 
0x32a: JUMP v327(0xda3)
----------------------------------

Begin block 0x32b
prev = {'0xda3'}, next = {}
----------------------------------
Block 0x32b
0x32c: v32c(0x40) = CONST 
0x32e: v32e = MLOAD v32c(0x40)
0x332: MSTORE v32e vda6
0x333: v333(0x20) = CONST 
0x335: v335 = ADD v333(0x20) v32e
0x339: v339(0x40) = CONST 
0x33b: v33b = MLOAD v339(0x40)
0x33e: v33e = SUB v335 v33b
0x340: RETURN v33b v33e
----------------------------------

Begin block 0x341
prev = {}, next = {'0x349', '0x34d'}
----------------------------------
function balanceOf(address)()
Block 0x341
0x342: v342 = CALLVALUE 
0x344: v344 = ISZERO v342
0x345: v345(0x34d) = CONST 
0x348: JUMPI v345(0x34d) v344
----------------------------------

Begin block 0x349
prev = {'0x341'}, next = {}
----------------------------------
Block 0x349
0x349: v349(0x0) = CONST 
0x34c: REVERT v349(0x0) v349(0x0)
----------------------------------

Begin block 0x34d
prev = {'0x341'}, next = {'0x364', '0x360'}
----------------------------------
Block 0x34d
0x34f: v34f(0x390) = CONST 
0x352: v352(0x4) = CONST 
0x355: v355 = CALLDATASIZE 
0x356: v356 = SUB v355 v352(0x4)
0x357: v357(0x20) = CONST 
0x35a: v35a = LT v356 v357(0x20)
0x35b: v35b = ISZERO v35a
0x35c: v35c(0x364) = CONST 
0x35f: JUMPI v35c(0x364) v35b
----------------------------------

Begin block 0x360
prev = {'0x34d'}, next = {}
----------------------------------
Block 0x360
0x360: v360(0x0) = CONST 
0x363: REVERT v360(0x0) v360(0x0)
----------------------------------

Begin block 0x364
prev = {'0x34d'}, next = {'0xda9'}
----------------------------------
Block 0x364
0x366: v366 = ADD v352(0x4) v356
0x36a: v36a = CALLDATALOAD v352(0x4)
0x36b: v36b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x380: v380 = AND v36b(0xffffffffffffffffffffffffffffffffffffffff) v36a
0x382: v382(0x20) = CONST 
0x384: v384 = ADD v382(0x20) v352(0x4)
0x38c: v38c(0xda9) = CONST 
0x38f: JUMP v38c(0xda9)
----------------------------------

Begin block 0x390
prev = {'0xda9'}, next = {}
----------------------------------
Block 0x390
0x391: v391(0x40) = CONST 
0x393: v393 = MLOAD v391(0x40)
0x397: MSTORE v393 vdeb
0x398: v398(0x20) = CONST 
0x39a: v39a = ADD v398(0x20) v393
0x39e: v39e(0x40) = CONST 
0x3a0: v3a0 = MLOAD v39e(0x40)
0x3a3: v3a3 = SUB v39a v3a0
0x3a5: RETURN v3a0 v3a3
----------------------------------

Begin block 0x3a6
prev = {}, next = {'0x3b2', '0x3ae'}
----------------------------------
function acceptOwnership()()
Block 0x3a6
0x3a7: v3a7 = CALLVALUE 
0x3a9: v3a9 = ISZERO v3a7
0x3aa: v3aa(0x3b2) = CONST 
0x3ad: JUMPI v3aa(0x3b2) v3a9
----------------------------------

Begin block 0x3ae
prev = {'0x3a6'}, next = {}
----------------------------------
Block 0x3ae
0x3ae: v3ae(0x0) = CONST 
0x3b1: REVERT v3ae(0x0) v3ae(0x0)
----------------------------------

Begin block 0x3b2
prev = {'0x3a6'}, next = {'0xdf2'}
----------------------------------
Block 0x3b2
0x3b4: v3b4(0x3bb) = CONST 
0x3b7: v3b7(0xdf2) = CONST 
0x3ba: JUMP v3b7(0xdf2)
----------------------------------

Begin block 0x3bb
prev = {'0xe4c'}, next = {}
----------------------------------
Block 0x3bb
0x3bc: STOP 
----------------------------------

Begin block 0x3bd
prev = {}, next = {'0x3c9', '0x3c5'}
----------------------------------
function owner()()
Block 0x3bd
0x3be: v3be = CALLVALUE 
0x3c0: v3c0 = ISZERO v3be
0x3c1: v3c1(0x3c9) = CONST 
0x3c4: JUMPI v3c1(0x3c9) v3c0
----------------------------------

Begin block 0x3c5
prev = {'0x3bd'}, next = {}
----------------------------------
Block 0x3c5
0x3c5: v3c5(0x0) = CONST 
0x3c8: REVERT v3c5(0x0) v3c5(0x0)
----------------------------------

Begin block 0x3c9
prev = {'0x3bd'}, next = {'0xf8f'}
----------------------------------
Block 0x3c9
0x3cb: v3cb(0x3d2) = CONST 
0x3ce: v3ce(0xf8f) = CONST 
0x3d1: JUMP v3ce(0xf8f)
----------------------------------

Begin block 0x3d2
prev = {'0xf8f'}, next = {}
----------------------------------
Block 0x3d2
0x3d3: v3d3(0x40) = CONST 
0x3d5: v3d5 = MLOAD v3d3(0x40)
0x3d8: v3d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3ed: v3ed = AND v3d8(0xffffffffffffffffffffffffffffffffffffffff) vfb1
0x3ee: v3ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x403: v403 = AND v3ee(0xffffffffffffffffffffffffffffffffffffffff) v3ed
0x405: MSTORE v3d5 v403
0x406: v406(0x20) = CONST 
0x408: v408 = ADD v406(0x20) v3d5
0x40c: v40c(0x40) = CONST 
0x40e: v40e = MLOAD v40c(0x40)
0x411: v411 = SUB v408 v40e
0x413: RETURN v40e v411
----------------------------------

Begin block 0x414
prev = {}, next = {'0x41c', '0x420'}
----------------------------------
function symbol()()
Block 0x414
0x415: v415 = CALLVALUE 
0x417: v417 = ISZERO v415
0x418: v418(0x420) = CONST 
0x41b: JUMPI v418(0x420) v417
----------------------------------

Begin block 0x41c
prev = {'0x414'}, next = {}
----------------------------------
Block 0x41c
0x41c: v41c(0x0) = CONST 
0x41f: REVERT v41c(0x0) v41c(0x0)
----------------------------------

Begin block 0x420
prev = {'0x414'}, next = {'0xfb4'}
----------------------------------
Block 0x420
0x422: v422(0x429) = CONST 
0x425: v425(0xfb4) = CONST 
0x428: JUMP v425(0xfb4)
----------------------------------

Begin block 0x429
prev = {'0x104a'}, next = {'0x44e'}
----------------------------------
Block 0x429
0x42a: v42a(0x40) = CONST 
0x42c: v42c = MLOAD v42a(0x40)
0x42f: v42f(0x20) = CONST 
0x431: v431 = ADD v42f(0x20) v42c
0x434: v434 = SUB v431 v42c
0x436: MSTORE v42c v434
0x43a: v43a = MLOAD vfd9
0x43c: MSTORE v431 v43a
0x43d: v43d(0x20) = CONST 
0x43f: v43f = ADD v43d(0x20) v431
0x443: v443 = MLOAD vfd9
0x445: v445(0x20) = CONST 
0x447: v447 = ADD v445(0x20) vfd9
0x44c: v44c(0x0) = CONST 
----------------------------------

Begin block 0x44e
prev = {'0x457', '0x429'}, next = {'0x469', '0x457'}
----------------------------------
Block 0x44e
0x44e_0x0: v44e_0 = PHI v44c(0x0) v462
0x451: v451 = LT v44e_0 v443
0x452: v452 = ISZERO v451
0x453: v453(0x469) = CONST 
0x456: JUMPI v453(0x469) v452
----------------------------------

Begin block 0x457
prev = {'0x44e'}, next = {'0x44e'}
----------------------------------
Block 0x457
0x457_0x0: v457_0 = PHI v44c(0x0) v462
0x459: v459 = ADD v447 v457_0
0x45a: v45a = MLOAD v459
0x45d: v45d = ADD v43f v457_0
0x45e: MSTORE v45d v45a
0x45f: v45f(0x20) = CONST 
0x462: v462 = ADD v457_0 v45f(0x20)
0x465: v465(0x44e) = CONST 
0x468: JUMP v465(0x44e)
----------------------------------

Begin block 0x469
prev = {'0x44e'}, next = {'0x47d', '0x496'}
----------------------------------
Block 0x469
0x472: v472 = ADD v443 v43f
0x474: v474(0x1f) = CONST 
0x476: v476 = AND v474(0x1f) v443
0x478: v478 = ISZERO v476
0x479: v479(0x496) = CONST 
0x47c: JUMPI v479(0x496) v478
----------------------------------

Begin block 0x47d
prev = {'0x469'}, next = {'0x496'}
----------------------------------
Block 0x47d
0x47f: v47f = SUB v472 v476
0x481: v481 = MLOAD v47f
0x482: v482(0x1) = CONST 
0x485: v485(0x20) = CONST 
0x487: v487 = SUB v485(0x20) v476
0x488: v488(0x100) = CONST 
0x48b: v48b = EXP v488(0x100) v487
0x48c: v48c = SUB v48b v482(0x1)
0x48d: v48d = NOT v48c
0x48e: v48e = AND v48d v481
0x490: MSTORE v47f v48e
0x491: v491(0x20) = CONST 
0x493: v493 = ADD v491(0x20) v47f
----------------------------------

Begin block 0x496
prev = {'0x469', '0x47d'}, next = {}
----------------------------------
Block 0x496
0x496_0x1: v496_1 = PHI v472 v493
0x49c: v49c(0x40) = CONST 
0x49e: v49e = MLOAD v49c(0x40)
0x4a1: v4a1 = SUB v496_1 v49e
0x4a3: RETURN v49e v4a1
----------------------------------

Begin block 0x4a4
prev = {}, next = {'0x4ac', '0x4b0'}
----------------------------------
function safeSub(uint256,uint256)()
Block 0x4a4
0x4a5: v4a5 = CALLVALUE 
0x4a7: v4a7 = ISZERO v4a5
0x4a8: v4a8(0x4b0) = CONST 
0x4ab: JUMPI v4a8(0x4b0) v4a7
----------------------------------

Begin block 0x4ac
prev = {'0x4a4'}, next = {}
----------------------------------
Block 0x4ac
0x4ac: v4ac(0x0) = CONST 
0x4af: REVERT v4ac(0x0) v4ac(0x0)
----------------------------------

Begin block 0x4b0
prev = {'0x4a4'}, next = {'0x4c3', '0x4c7'}
----------------------------------
Block 0x4b0
0x4b2: v4b2(0x4e7) = CONST 
0x4b5: v4b5(0x4) = CONST 
0x4b8: v4b8 = CALLDATASIZE 
0x4b9: v4b9 = SUB v4b8 v4b5(0x4)
0x4ba: v4ba(0x40) = CONST 
0x4bd: v4bd = LT v4b9 v4ba(0x40)
0x4be: v4be = ISZERO v4bd
0x4bf: v4bf(0x4c7) = CONST 
0x4c2: JUMPI v4bf(0x4c7) v4be
----------------------------------

Begin block 0x4c3
prev = {'0x4b0'}, next = {}
----------------------------------
Block 0x4c3
0x4c3: v4c3(0x0) = CONST 
0x4c6: REVERT v4c3(0x0) v4c3(0x0)
----------------------------------

Begin block 0x4c7
prev = {'0x4b0'}, next = {'0x10520x4a4'}
----------------------------------
Block 0x4c7
0x4c9: v4c9 = ADD v4b5(0x4) v4b9
0x4cd: v4cd = CALLDATALOAD v4b5(0x4)
0x4cf: v4cf(0x20) = CONST 
0x4d1: v4d1 = ADD v4cf(0x20) v4b5(0x4)
0x4d7: v4d7 = CALLDATALOAD v4d1
0x4d9: v4d9(0x20) = CONST 
0x4db: v4db = ADD v4d9(0x20) v4d1
0x4e3: v4e3(0x1052) = CONST 
0x4e6: JUMP v4e3(0x1052)
----------------------------------

Begin block 0x4e7
prev = {'0x10610x4a4'}, next = {}
----------------------------------
Block 0x4e7
0x4e8: v4e8(0x40) = CONST 
0x4ea: v4ea = MLOAD v4e8(0x40)
0x4ee: MSTORE v4ea v4a41064
0x4ef: v4ef(0x20) = CONST 
0x4f1: v4f1 = ADD v4ef(0x20) v4ea
0x4f5: v4f5(0x40) = CONST 
0x4f7: v4f7 = MLOAD v4f5(0x40)
0x4fa: v4fa = SUB v4f1 v4f7
0x4fc: RETURN v4f7 v4fa
----------------------------------

Begin block 0x4fd
prev = {}, next = {'0x505', '0x509'}
----------------------------------
function transfer(address,uint256)()
Block 0x4fd
0x4fe: v4fe = CALLVALUE 
0x500: v500 = ISZERO v4fe
0x501: v501(0x509) = CONST 
0x504: JUMPI v501(0x509) v500
----------------------------------

Begin block 0x505
prev = {'0x4fd'}, next = {}
----------------------------------
Block 0x505
0x505: v505(0x0) = CONST 
0x508: REVERT v505(0x0) v505(0x0)
----------------------------------

Begin block 0x509
prev = {'0x4fd'}, next = {'0x520', '0x51c'}
----------------------------------
Block 0x509
0x50b: v50b(0x556) = CONST 
0x50e: v50e(0x4) = CONST 
0x511: v511 = CALLDATASIZE 
0x512: v512 = SUB v511 v50e(0x4)
0x513: v513(0x40) = CONST 
0x516: v516 = LT v512 v513(0x40)
0x517: v517 = ISZERO v516
0x518: v518(0x520) = CONST 
0x51b: JUMPI v518(0x520) v517
----------------------------------

Begin block 0x51c
prev = {'0x509'}, next = {}
----------------------------------
Block 0x51c
0x51c: v51c(0x0) = CONST 
0x51f: REVERT v51c(0x0) v51c(0x0)
----------------------------------

Begin block 0x520
prev = {'0x509'}, next = {'0x106c'}
----------------------------------
Block 0x520
0x522: v522 = ADD v50e(0x4) v512
0x526: v526 = CALLDATALOAD v50e(0x4)
0x527: v527(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x53c: v53c = AND v527(0xffffffffffffffffffffffffffffffffffffffff) v526
0x53e: v53e(0x20) = CONST 
0x540: v540 = ADD v53e(0x20) v50e(0x4)
0x546: v546 = CALLDATALOAD v540
0x548: v548(0x20) = CONST 
0x54a: v54a = ADD v548(0x20) v540
0x552: v552(0x106c) = CONST 
0x555: JUMP v552(0x106c)
----------------------------------

Begin block 0x556
prev = {'0x1143'}, next = {}
----------------------------------
Block 0x556
0x557: v557(0x40) = CONST 
0x559: v559 = MLOAD v557(0x40)
0x55c: v55c = ISZERO v11ec(0x1)
0x55d: v55d = ISZERO v55c
0x55e: v55e = ISZERO v55d
0x55f: v55f = ISZERO v55e
0x561: MSTORE v559 v55f
0x562: v562(0x20) = CONST 
0x564: v564 = ADD v562(0x20) v559
0x568: v568(0x40) = CONST 
0x56a: v56a = MLOAD v568(0x40)
0x56d: v56d = SUB v564 v56a
0x56f: RETURN v56a v56d
----------------------------------

Begin block 0x570
prev = {}, next = {'0x578', '0x57c'}
----------------------------------
function safeDiv(uint256,uint256)()
Block 0x570
0x571: v571 = CALLVALUE 
0x573: v573 = ISZERO v571
0x574: v574(0x57c) = CONST 
0x577: JUMPI v574(0x57c) v573
----------------------------------

Begin block 0x578
prev = {'0x570'}, next = {}
----------------------------------
Block 0x578
0x578: v578(0x0) = CONST 
0x57b: REVERT v578(0x0) v578(0x0)
----------------------------------

Begin block 0x57c
prev = {'0x570'}, next = {'0x593', '0x58f'}
----------------------------------
Block 0x57c
0x57e: v57e(0x5b3) = CONST 
0x581: v581(0x4) = CONST 
0x584: v584 = CALLDATASIZE 
0x585: v585 = SUB v584 v581(0x4)
0x586: v586(0x40) = CONST 
0x589: v589 = LT v585 v586(0x40)
0x58a: v58a = ISZERO v589
0x58b: v58b(0x593) = CONST 
0x58e: JUMPI v58b(0x593) v58a
----------------------------------

Begin block 0x58f
prev = {'0x57c'}, next = {}
----------------------------------
Block 0x58f
0x58f: v58f(0x0) = CONST 
0x592: REVERT v58f(0x0) v58f(0x0)
----------------------------------

Begin block 0x593
prev = {'0x57c'}, next = {'0x11f5'}
----------------------------------
Block 0x593
0x595: v595 = ADD v581(0x4) v585
0x599: v599 = CALLDATALOAD v581(0x4)
0x59b: v59b(0x20) = CONST 
0x59d: v59d = ADD v59b(0x20) v581(0x4)
0x5a3: v5a3 = CALLDATALOAD v59d
0x5a5: v5a5(0x20) = CONST 
0x5a7: v5a7 = ADD v5a5(0x20) v59d
0x5af: v5af(0x11f5) = CONST 
0x5b2: JUMP v5af(0x11f5)
----------------------------------

Begin block 0x5b3
prev = {'0x120c'}, next = {}
----------------------------------
Block 0x5b3
0x5b4: v5b4(0x40) = CONST 
0x5b6: v5b6 = MLOAD v5b4(0x40)
0x5ba: MSTORE v5b6 v120d
0x5bb: v5bb(0x20) = CONST 
0x5bd: v5bd = ADD v5bb(0x20) v5b6
0x5c1: v5c1(0x40) = CONST 
0x5c3: v5c3 = MLOAD v5c1(0x40)
0x5c6: v5c6 = SUB v5bd v5c3
0x5c8: RETURN v5c3 v5c6
----------------------------------

Begin block 0x5c9
prev = {}, next = {'0x5d1', '0x5d5'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x5c9
0x5ca: v5ca = CALLVALUE 
0x5cc: v5cc = ISZERO v5ca
0x5cd: v5cd(0x5d5) = CONST 
0x5d0: JUMPI v5cd(0x5d5) v5cc
----------------------------------

Begin block 0x5d1
prev = {'0x5c9'}, next = {}
----------------------------------
Block 0x5d1
0x5d1: v5d1(0x0) = CONST 
0x5d4: REVERT v5d1(0x0) v5d1(0x0)
----------------------------------

Begin block 0x5d5
prev = {'0x5c9'}, next = {'0x5ec', '0x5e8'}
----------------------------------
Block 0x5d5
0x5d7: v5d7(0x6b9) = CONST 
0x5da: v5da(0x4) = CONST 
0x5dd: v5dd = CALLDATASIZE 
0x5de: v5de = SUB v5dd v5da(0x4)
0x5df: v5df(0x60) = CONST 
0x5e2: v5e2 = LT v5de v5df(0x60)
0x5e3: v5e3 = ISZERO v5e2
0x5e4: v5e4(0x5ec) = CONST 
0x5e7: JUMPI v5e4(0x5ec) v5e3
----------------------------------

Begin block 0x5e8
prev = {'0x5d5'}, next = {}
----------------------------------
Block 0x5e8
0x5e8: v5e8(0x0) = CONST 
0x5eb: REVERT v5e8(0x0) v5e8(0x0)
----------------------------------

Begin block 0x5ec
prev = {'0x5d5'}, next = {'0x633', '0x62f'}
----------------------------------
Block 0x5ec
0x5ee: v5ee = ADD v5da(0x4) v5de
0x5f2: v5f2 = CALLDATALOAD v5da(0x4)
0x5f3: v5f3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x608: v608 = AND v5f3(0xffffffffffffffffffffffffffffffffffffffff) v5f2
0x60a: v60a(0x20) = CONST 
0x60c: v60c = ADD v60a(0x20) v5da(0x4)
0x612: v612 = CALLDATALOAD v60c
0x614: v614(0x20) = CONST 
0x616: v616 = ADD v614(0x20) v60c
0x61c: v61c = CALLDATALOAD v616
0x61e: v61e(0x20) = CONST 
0x620: v620 = ADD v61e(0x20) v616
0x622: v622(0x100000000) = CONST 
0x629: v629 = GT v61c v622(0x100000000)
0x62a: v62a = ISZERO v629
0x62b: v62b(0x633) = CONST 
0x62e: JUMPI v62b(0x633) v62a
----------------------------------

Begin block 0x62f
prev = {'0x5ec'}, next = {}
----------------------------------
Block 0x62f
0x62f: v62f(0x0) = CONST 
0x632: REVERT v62f(0x0) v62f(0x0)
----------------------------------

Begin block 0x633
prev = {'0x5ec'}, next = {'0x645', '0x641'}
----------------------------------
Block 0x633
0x635: v635 = ADD v5da(0x4) v61c
0x637: v637(0x20) = CONST 
0x63a: v63a = ADD v635 v637(0x20)
0x63b: v63b = GT v63a v5ee
0x63c: v63c = ISZERO v63b
0x63d: v63d(0x645) = CONST 
0x640: JUMPI v63d(0x645) v63c
----------------------------------

Begin block 0x641
prev = {'0x633'}, next = {}
----------------------------------
Block 0x641
0x641: v641(0x0) = CONST 
0x644: REVERT v641(0x0) v641(0x0)
----------------------------------

Begin block 0x645
prev = {'0x633'}, next = {'0x663', '0x667'}
----------------------------------
Block 0x645
0x647: v647 = CALLDATALOAD v635
0x649: v649(0x20) = CONST 
0x64b: v64b = ADD v649(0x20) v635
0x64e: v64e(0x1) = CONST 
0x651: v651 = MUL v647 v64e(0x1)
0x653: v653 = ADD v64b v651
0x654: v654 = GT v653 v5ee
0x655: v655(0x100000000) = CONST 
0x65c: v65c = GT v647 v655(0x100000000)
0x65d: v65d = OR v65c v654
0x65e: v65e = ISZERO v65d
0x65f: v65f(0x667) = CONST 
0x662: JUMPI v65f(0x667) v65e
----------------------------------

Begin block 0x663
prev = {'0x645'}, next = {}
----------------------------------
Block 0x663
0x663: v663(0x0) = CONST 
0x666: REVERT v663(0x0) v663(0x0)
----------------------------------

Begin block 0x667
prev = {'0x645'}, next = {'0x1215'}
----------------------------------
Block 0x667
0x66c: v66c(0x1f) = CONST 
0x66e: v66e = ADD v66c(0x1f) v647
0x66f: v66f(0x20) = CONST 
0x673: v673 = DIV v66e v66f(0x20)
0x674: v674 = MUL v673 v66f(0x20)
0x675: v675(0x20) = CONST 
0x677: v677 = ADD v675(0x20) v674
0x678: v678(0x40) = CONST 
0x67a: v67a = MLOAD v678(0x40)
0x67d: v67d = ADD v67a v677
0x67e: v67e(0x40) = CONST 
0x680: MSTORE v67e(0x40) v67d
0x688: MSTORE v67a v647
0x689: v689(0x20) = CONST 
0x68b: v68b = ADD v689(0x20) v67a
0x691: CALLDATACOPY v68b v64b v647
0x692: v692(0x0) = CONST 
0x696: v696 = ADD v68b v647
0x697: MSTORE v696 v692(0x0)
0x698: v698(0x1f) = CONST 
0x69a: v69a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v698(0x1f)
0x69b: v69b(0x1f) = CONST 
0x69e: v69e = ADD v647 v69b(0x1f)
0x69f: v69f = AND v69e v69a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0x6a4: v6a4 = ADD v68b v69f
0x6b5: v6b5(0x1215) = CONST 
0x6b8: JUMP v6b5(0x1215)
----------------------------------

Begin block 0x6b9
prev = {'0x1439'}, next = {}
----------------------------------
Block 0x6b9
0x6ba: v6ba(0x40) = CONST 
0x6bc: v6bc = MLOAD v6ba(0x40)
0x6bf: v6bf = ISZERO v143e(0x1)
0x6c0: v6c0 = ISZERO v6bf
0x6c1: v6c1 = ISZERO v6c0
0x6c2: v6c2 = ISZERO v6c1
0x6c4: MSTORE v6bc v6c2
0x6c5: v6c5(0x20) = CONST 
0x6c7: v6c7 = ADD v6c5(0x20) v6bc
0x6cb: v6cb(0x40) = CONST 
0x6cd: v6cd = MLOAD v6cb(0x40)
0x6d0: v6d0 = SUB v6c7 v6cd
0x6d2: RETURN v6cd v6d0
----------------------------------

Begin block 0x6d3
prev = {}, next = {'0x6db', '0x6df'}
----------------------------------
function safeMul(uint256,uint256)()
Block 0x6d3
0x6d4: v6d4 = CALLVALUE 
0x6d6: v6d6 = ISZERO v6d4
0x6d7: v6d7(0x6df) = CONST 
0x6da: JUMPI v6d7(0x6df) v6d6
----------------------------------

Begin block 0x6db
prev = {'0x6d3'}, next = {}
----------------------------------
Block 0x6db
0x6db: v6db(0x0) = CONST 
0x6de: REVERT v6db(0x0) v6db(0x0)
----------------------------------

Begin block 0x6df
prev = {'0x6d3'}, next = {'0x6f6', '0x6f2'}
----------------------------------
Block 0x6df
0x6e1: v6e1(0x716) = CONST 
0x6e4: v6e4(0x4) = CONST 
0x6e7: v6e7 = CALLDATASIZE 
0x6e8: v6e8 = SUB v6e7 v6e4(0x4)
0x6e9: v6e9(0x40) = CONST 
0x6ec: v6ec = LT v6e8 v6e9(0x40)
0x6ed: v6ed = ISZERO v6ec
0x6ee: v6ee(0x6f6) = CONST 
0x6f1: JUMPI v6ee(0x6f6) v6ed
----------------------------------

Begin block 0x6f2
prev = {'0x6df'}, next = {}
----------------------------------
Block 0x6f2
0x6f2: v6f2(0x0) = CONST 
0x6f5: REVERT v6f2(0x0) v6f2(0x0)
----------------------------------

Begin block 0x6f6
prev = {'0x6df'}, next = {'0x1448'}
----------------------------------
Block 0x6f6
0x6f8: v6f8 = ADD v6e4(0x4) v6e8
0x6fc: v6fc = CALLDATALOAD v6e4(0x4)
0x6fe: v6fe(0x20) = CONST 
0x700: v700 = ADD v6fe(0x20) v6e4(0x4)
0x706: v706 = CALLDATALOAD v700
0x708: v708(0x20) = CONST 
0x70a: v70a = ADD v708(0x20) v700
0x712: v712(0x1448) = CONST 
0x715: JUMP v712(0x1448)
----------------------------------

Begin block 0x716
prev = {'0x146f'}, next = {}
----------------------------------
Block 0x716
0x717: v717(0x40) = CONST 
0x719: v719 = MLOAD v717(0x40)
0x71d: MSTORE v719 v144d
0x71e: v71e(0x20) = CONST 
0x720: v720 = ADD v71e(0x20) v719
0x724: v724(0x40) = CONST 
0x726: v726 = MLOAD v724(0x40)
0x729: v729 = SUB v720 v726
0x72b: RETURN v726 v729
----------------------------------

Begin block 0x72c
prev = {}, next = {'0x738', '0x734'}
----------------------------------
function newOwner()()
Block 0x72c
0x72d: v72d = CALLVALUE 
0x72f: v72f = ISZERO v72d
0x730: v730(0x738) = CONST 
0x733: JUMPI v730(0x738) v72f
----------------------------------

Begin block 0x734
prev = {'0x72c'}, next = {}
----------------------------------
Block 0x734
0x734: v734(0x0) = CONST 
0x737: REVERT v734(0x0) v734(0x0)
----------------------------------

Begin block 0x738
prev = {'0x72c'}, next = {'0x1475'}
----------------------------------
Block 0x738
0x73a: v73a(0x741) = CONST 
0x73d: v73d(0x1475) = CONST 
0x740: JUMP v73d(0x1475)
----------------------------------

Begin block 0x741
prev = {'0x1475'}, next = {}
----------------------------------
Block 0x741
0x742: v742(0x40) = CONST 
0x744: v744 = MLOAD v742(0x40)
0x747: v747(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75c: v75c = AND v747(0xffffffffffffffffffffffffffffffffffffffff) v1498
0x75d: v75d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x772: v772 = AND v75d(0xffffffffffffffffffffffffffffffffffffffff) v75c
0x774: MSTORE v744 v772
0x775: v775(0x20) = CONST 
0x777: v777 = ADD v775(0x20) v744
0x77b: v77b(0x40) = CONST 
0x77d: v77d = MLOAD v77b(0x40)
0x780: v780 = SUB v777 v77d
0x782: RETURN v77d v780
----------------------------------

Begin block 0x783
prev = {}, next = {'0x78b', '0x78f'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x783
0x784: v784 = CALLVALUE 
0x786: v786 = ISZERO v784
0x787: v787(0x78f) = CONST 
0x78a: JUMPI v787(0x78f) v786
----------------------------------

Begin block 0x78b
prev = {'0x783'}, next = {}
----------------------------------
Block 0x78b
0x78b: v78b(0x0) = CONST 
0x78e: REVERT v78b(0x0) v78b(0x0)
----------------------------------

Begin block 0x78f
prev = {'0x783'}, next = {'0x7a2', '0x7a6'}
----------------------------------
Block 0x78f
0x791: v791(0x7dc) = CONST 
0x794: v794(0x4) = CONST 
0x797: v797 = CALLDATASIZE 
0x798: v798 = SUB v797 v794(0x4)
0x799: v799(0x40) = CONST 
0x79c: v79c = LT v798 v799(0x40)
0x79d: v79d = ISZERO v79c
0x79e: v79e(0x7a6) = CONST 
0x7a1: JUMPI v79e(0x7a6) v79d
----------------------------------

Begin block 0x7a2
prev = {'0x78f'}, next = {}
----------------------------------
Block 0x7a2
0x7a2: v7a2(0x0) = CONST 
0x7a5: REVERT v7a2(0x0) v7a2(0x0)
----------------------------------

Begin block 0x7a6
prev = {'0x78f'}, next = {'0x149b'}
----------------------------------
Block 0x7a6
0x7a8: v7a8 = ADD v794(0x4) v798
0x7ac: v7ac = CALLDATALOAD v794(0x4)
0x7ad: v7ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c2: v7c2 = AND v7ad(0xffffffffffffffffffffffffffffffffffffffff) v7ac
0x7c4: v7c4(0x20) = CONST 
0x7c6: v7c6 = ADD v7c4(0x20) v794(0x4)
0x7cc: v7cc = CALLDATALOAD v7c6
0x7ce: v7ce(0x20) = CONST 
0x7d0: v7d0 = ADD v7ce(0x20) v7c6
0x7d8: v7d8(0x149b) = CONST 
0x7db: JUMP v7d8(0x149b)
----------------------------------

Begin block 0x7dc
prev = {'0x15c8'}, next = {}
----------------------------------
Block 0x7dc
0x7dd: v7dd(0x40) = CONST 
0x7df: v7df = MLOAD v7dd(0x40)
0x7e2: v7e2 = ISZERO v15ce
0x7e3: v7e3 = ISZERO v7e2
0x7e4: v7e4 = ISZERO v7e3
0x7e5: v7e5 = ISZERO v7e4
0x7e7: MSTORE v7df v7e5
0x7e8: v7e8(0x20) = CONST 
0x7ea: v7ea = ADD v7e8(0x20) v7df
0x7ee: v7ee(0x40) = CONST 
0x7f0: v7f0 = MLOAD v7ee(0x40)
0x7f3: v7f3 = SUB v7ea v7f0
0x7f5: RETURN v7f0 v7f3
----------------------------------

Begin block 0x7f6
prev = {}, next = {'0x7fe', '0x802'}
----------------------------------
function allowance(address,address)()
Block 0x7f6
0x7f7: v7f7 = CALLVALUE 
0x7f9: v7f9 = ISZERO v7f7
0x7fa: v7fa(0x802) = CONST 
0x7fd: JUMPI v7fa(0x802) v7f9
----------------------------------

Begin block 0x7fe
prev = {'0x7f6'}, next = {}
----------------------------------
Block 0x7fe
0x7fe: v7fe(0x0) = CONST 
0x801: REVERT v7fe(0x0) v7fe(0x0)
----------------------------------

Begin block 0x802
prev = {'0x7f6'}, next = {'0x815', '0x819'}
----------------------------------
Block 0x802
0x804: v804(0x865) = CONST 
0x807: v807(0x4) = CONST 
0x80a: v80a = CALLDATASIZE 
0x80b: v80b = SUB v80a v807(0x4)
0x80c: v80c(0x40) = CONST 
0x80f: v80f = LT v80b v80c(0x40)
0x810: v810 = ISZERO v80f
0x811: v811(0x819) = CONST 
0x814: JUMPI v811(0x819) v810
----------------------------------

Begin block 0x815
prev = {'0x802'}, next = {}
----------------------------------
Block 0x815
0x815: v815(0x0) = CONST 
0x818: REVERT v815(0x0) v815(0x0)
----------------------------------

Begin block 0x819
prev = {'0x802'}, next = {'0x15e1'}
----------------------------------
Block 0x819
0x81b: v81b = ADD v807(0x4) v80b
0x81f: v81f = CALLDATALOAD v807(0x4)
0x820: v820(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x835: v835 = AND v820(0xffffffffffffffffffffffffffffffffffffffff) v81f
0x837: v837(0x20) = CONST 
0x839: v839 = ADD v837(0x20) v807(0x4)
0x83f: v83f = CALLDATALOAD v839
0x840: v840(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x855: v855 = AND v840(0xffffffffffffffffffffffffffffffffffffffff) v83f
0x857: v857(0x20) = CONST 
0x859: v859 = ADD v857(0x20) v839
0x861: v861(0x15e1) = CONST 
0x864: JUMP v861(0x15e1)
----------------------------------

Begin block 0x865
prev = {'0x15e1'}, next = {}
----------------------------------
Block 0x865
0x866: v866(0x40) = CONST 
0x868: v868 = MLOAD v866(0x40)
0x86c: MSTORE v868 v1660
0x86d: v86d(0x20) = CONST 
0x86f: v86f = ADD v86d(0x20) v868
0x873: v873(0x40) = CONST 
0x875: v875 = MLOAD v873(0x40)
0x878: v878 = SUB v86f v875
0x87a: RETURN v875 v878
----------------------------------

Begin block 0x87b
prev = {}, next = {'0x883', '0x887'}
----------------------------------
function safeAdd(uint256,uint256)()
Block 0x87b
0x87c: v87c = CALLVALUE 
0x87e: v87e = ISZERO v87c
0x87f: v87f(0x887) = CONST 
0x882: JUMPI v87f(0x887) v87e
----------------------------------

Begin block 0x883
prev = {'0x87b'}, next = {}
----------------------------------
Block 0x883
0x883: v883(0x0) = CONST 
0x886: REVERT v883(0x0) v883(0x0)
----------------------------------

Begin block 0x887
prev = {'0x87b'}, next = {'0x89e', '0x89a'}
----------------------------------
Block 0x887
0x889: v889(0x8be) = CONST 
0x88c: v88c(0x4) = CONST 
0x88f: v88f = CALLDATASIZE 
0x890: v890 = SUB v88f v88c(0x4)
0x891: v891(0x40) = CONST 
0x894: v894 = LT v890 v891(0x40)
0x895: v895 = ISZERO v894
0x896: v896(0x89e) = CONST 
0x899: JUMPI v896(0x89e) v895
----------------------------------

Begin block 0x89a
prev = {'0x887'}, next = {}
----------------------------------
Block 0x89a
0x89a: v89a(0x0) = CONST 
0x89d: REVERT v89a(0x0) v89a(0x0)
----------------------------------

Begin block 0x89e
prev = {'0x887'}, next = {'0x16680x87b'}
----------------------------------
Block 0x89e
0x8a0: v8a0 = ADD v88c(0x4) v890
0x8a4: v8a4 = CALLDATALOAD v88c(0x4)
0x8a6: v8a6(0x20) = CONST 
0x8a8: v8a8 = ADD v8a6(0x20) v88c(0x4)
0x8ae: v8ae = CALLDATALOAD v8a8
0x8b0: v8b0(0x20) = CONST 
0x8b2: v8b2 = ADD v8b0(0x20) v8a8
0x8ba: v8ba(0x1668) = CONST 
0x8bd: JUMP v8ba(0x1668)
----------------------------------

Begin block 0x8be
prev = {'0x167c0x87b'}, next = {}
----------------------------------
Block 0x8be
0x8bf: v8bf(0x40) = CONST 
0x8c1: v8c1 = MLOAD v8bf(0x40)
0x8c5: MSTORE v8c1 v87b166d
0x8c6: v8c6(0x20) = CONST 
0x8c8: v8c8 = ADD v8c6(0x20) v8c1
0x8cc: v8cc(0x40) = CONST 
0x8ce: v8ce = MLOAD v8cc(0x40)
0x8d1: v8d1 = SUB v8c8 v8ce
0x8d3: RETURN v8ce v8d1
----------------------------------

Begin block 0x8d4
prev = {}, next = {'0x8e0', '0x8dc'}
----------------------------------
function transferOwnership(address)()
Block 0x8d4
0x8d5: v8d5 = CALLVALUE 
0x8d7: v8d7 = ISZERO v8d5
0x8d8: v8d8(0x8e0) = CONST 
0x8db: JUMPI v8d8(0x8e0) v8d7
----------------------------------

Begin block 0x8dc
prev = {'0x8d4'}, next = {}
----------------------------------
Block 0x8dc
0x8dc: v8dc(0x0) = CONST 
0x8df: REVERT v8dc(0x0) v8dc(0x0)
----------------------------------

Begin block 0x8e0
prev = {'0x8d4'}, next = {'0x8f7', '0x8f3'}
----------------------------------
Block 0x8e0
0x8e2: v8e2(0x923) = CONST 
0x8e5: v8e5(0x4) = CONST 
0x8e8: v8e8 = CALLDATASIZE 
0x8e9: v8e9 = SUB v8e8 v8e5(0x4)
0x8ea: v8ea(0x20) = CONST 
0x8ed: v8ed = LT v8e9 v8ea(0x20)
0x8ee: v8ee = ISZERO v8ed
0x8ef: v8ef(0x8f7) = CONST 
0x8f2: JUMPI v8ef(0x8f7) v8ee
----------------------------------

Begin block 0x8f3
prev = {'0x8e0'}, next = {}
----------------------------------
Block 0x8f3
0x8f3: v8f3(0x0) = CONST 
0x8f6: REVERT v8f3(0x0) v8f3(0x0)
----------------------------------

Begin block 0x8f7
prev = {'0x8e0'}, next = {'0x1682'}
----------------------------------
Block 0x8f7
0x8f9: v8f9 = ADD v8e5(0x4) v8e9
0x8fd: v8fd = CALLDATALOAD v8e5(0x4)
0x8fe: v8fe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x913: v913 = AND v8fe(0xffffffffffffffffffffffffffffffffffffffff) v8fd
0x915: v915(0x20) = CONST 
0x917: v917 = ADD v915(0x20) v8e5(0x4)
0x91f: v91f(0x1682) = CONST 
0x922: JUMP v91f(0x1682)
----------------------------------

Begin block 0x923
prev = {'0x16db'}, next = {}
----------------------------------
Block 0x923
0x924: STOP 
----------------------------------

Begin block 0x925
prev = {'0x130'}, next = {'0x9bb', '0x975'}
----------------------------------
Block 0x925
0x926: v926(0x3) = CONST 
0x929: v929 = SLOAD v926(0x3)
0x92a: v92a(0x1) = CONST 
0x92d: v92d(0x1) = CONST 
0x92f: v92f = AND v92d(0x1) v929
0x930: v930 = ISZERO v92f
0x931: v931(0x100) = CONST 
0x934: v934 = MUL v931(0x100) v930
0x935: v935 = SUB v934 v92a(0x1)
0x936: v936 = AND v935 v929
0x937: v937(0x2) = CONST 
0x93a: v93a = DIV v936 v937(0x2)
0x93c: v93c(0x1f) = CONST 
0x93e: v93e = ADD v93c(0x1f) v93a
0x93f: v93f(0x20) = CONST 
0x943: v943 = DIV v93e v93f(0x20)
0x944: v944 = MUL v943 v93f(0x20)
0x945: v945(0x20) = CONST 
0x947: v947 = ADD v945(0x20) v944
0x948: v948(0x40) = CONST 
0x94a: v94a = MLOAD v948(0x40)
0x94d: v94d = ADD v94a v947
0x94e: v94e(0x40) = CONST 
0x950: MSTORE v94e(0x40) v94d
0x957: MSTORE v94a v93a
0x958: v958(0x20) = CONST 
0x95a: v95a = ADD v958(0x20) v94a
0x95d: v95d = SLOAD v926(0x3)
0x95e: v95e(0x1) = CONST 
0x961: v961(0x1) = CONST 
0x963: v963 = AND v961(0x1) v95d
0x964: v964 = ISZERO v963
0x965: v965(0x100) = CONST 
0x968: v968 = MUL v965(0x100) v964
0x969: v969 = SUB v968 v95e(0x1)
0x96a: v96a = AND v969 v95d
0x96b: v96b(0x2) = CONST 
0x96e: v96e = DIV v96a v96b(0x2)
0x970: v970 = ISZERO v96e
0x971: v971(0x9bb) = CONST 
0x974: JUMPI v971(0x9bb) v970
----------------------------------

Begin block 0x975
prev = {'0x925'}, next = {'0x990', '0x97d'}
----------------------------------
Block 0x975
0x976: v976(0x1f) = CONST 
0x978: v978 = LT v976(0x1f) v96e
0x979: v979(0x990) = CONST 
0x97c: JUMPI v979(0x990) v978
----------------------------------

Begin block 0x97d
prev = {'0x975'}, next = {'0x9bb'}
----------------------------------
Block 0x97d
0x97d: v97d(0x100) = CONST 
0x982: v982 = SLOAD v926(0x3)
0x983: v983 = DIV v982 v97d(0x100)
0x984: v984 = MUL v983 v97d(0x100)
0x986: MSTORE v95a v984
0x988: v988(0x20) = CONST 
0x98a: v98a = ADD v988(0x20) v95a
0x98c: v98c(0x9bb) = CONST 
0x98f: JUMP v98c(0x9bb)
----------------------------------

Begin block 0x990
prev = {'0x975'}, next = {'0x99e'}
----------------------------------
Block 0x990
0x992: v992 = ADD v95a v96e
0x995: v995(0x0) = CONST 
0x997: MSTORE v995(0x0) v926(0x3)
0x998: v998(0x20) = CONST 
0x99a: v99a(0x0) = CONST 
0x99c: v99c = SHA3 v99a(0x0) v998(0x20)
----------------------------------

Begin block 0x99e
prev = {'0x990', '0x99e'}, next = {'0x99e', '0x9b2'}
----------------------------------
Block 0x99e
0x99e_0x0: v99e_0 = PHI v95a v9aa
0x99e_0x1: v99e_1 = PHI v99c v9a6
0x9a0: v9a0 = SLOAD v99e_1
0x9a2: MSTORE v99e_0 v9a0
0x9a4: v9a4(0x1) = CONST 
0x9a6: v9a6 = ADD v9a4(0x1) v99e_1
0x9a8: v9a8(0x20) = CONST 
0x9aa: v9aa = ADD v9a8(0x20) v99e_0
0x9ad: v9ad = GT v992 v9aa
0x9ae: v9ae(0x99e) = CONST 
0x9b1: JUMPI v9ae(0x99e) v9ad
----------------------------------

Begin block 0x9b2
prev = {'0x99e'}, next = {'0x9bb'}
----------------------------------
Block 0x9b2
0x9b4: v9b4 = SUB v9aa v992
0x9b5: v9b5(0x1f) = CONST 
0x9b7: v9b7 = AND v9b5(0x1f) v9b4
0x9b9: v9b9 = ADD v992 v9b7
----------------------------------

Begin block 0x9bb
prev = {'0x925', '0x9b2', '0x97d'}, next = {'0x139'}
----------------------------------
Block 0x9bb
0x9c2: JUMP v132(0x139)
----------------------------------

Begin block 0x9c3
prev = {'0x1d7'}, next = {'0x20d'}
----------------------------------
Block 0x9c3
0x9c4: v9c4(0x0) = CONST 
0x9c7: v9c7(0x7) = CONST 
0x9c9: v9c9(0x0) = CONST 
0x9cb: v9cb = CALLER 
0x9cc: v9cc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e1: v9e1 = AND v9cc(0xffffffffffffffffffffffffffffffffffffffff) v9cb
0x9e2: v9e2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9f7: v9f7 = AND v9e2(0xffffffffffffffffffffffffffffffffffffffff) v9e1
0x9f9: MSTORE v9c9(0x0) v9f7
0x9fa: v9fa(0x20) = CONST 
0x9fc: v9fc(0x20) = ADD v9fa(0x20) v9c9(0x0)
0x9ff: MSTORE v9fc(0x20) v9c7(0x7)
0xa00: va00(0x20) = CONST 
0xa02: va02(0x40) = ADD va00(0x20) v9fc(0x20)
0xa03: va03(0x0) = CONST 
0xa05: va05 = SHA3 va03(0x0) va02(0x40)
0xa06: va06(0x0) = CONST 
0xa09: va09(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa1e: va1e = AND va09(0xffffffffffffffffffffffffffffffffffffffff) v1f3
0xa1f: va1f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa34: va34 = AND va1f(0xffffffffffffffffffffffffffffffffffffffff) va1e
0xa36: MSTORE va06(0x0) va34
0xa37: va37(0x20) = CONST 
0xa39: va39(0x20) = ADD va37(0x20) va06(0x0)
0xa3c: MSTORE va39(0x20) va05
0xa3d: va3d(0x20) = CONST 
0xa3f: va3f(0x40) = ADD va3d(0x20) va39(0x20)
0xa40: va40(0x0) = CONST 
0xa42: va42 = SHA3 va40(0x0) va3f(0x40)
0xa45: SSTORE va42 v1fd
0xa48: va48(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa5d: va5d = AND va48(0xffffffffffffffffffffffffffffffffffffffff) v1f3
0xa5e: va5e = CALLER 
0xa5f: va5f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa74: va74 = AND va5f(0xffffffffffffffffffffffffffffffffffffffff) va5e
0xa75: va75(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa97: va97(0x40) = CONST 
0xa99: va99 = MLOAD va97(0x40)
0xa9d: MSTORE va99 v1fd
0xa9e: va9e(0x20) = CONST 
0xaa0: vaa0 = ADD va9e(0x20) va99
0xaa4: vaa4(0x40) = CONST 
0xaa6: vaa6 = MLOAD vaa4(0x40)
0xaa9: vaa9 = SUB vaa0 vaa6
0xaab: LOG3 vaa6 vaa9 va75(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va74 va5d
0xaac: vaac(0x1) = CONST 
0xab4: JUMP v1c2(0x20d)
----------------------------------

Begin block 0xab5
prev = {'0x233'}, next = {'0x23c'}
----------------------------------
Block 0xab5
0xab6: vab6(0x0) = CONST 
0xab8: vab8(0x6) = CONST 
0xaba: vaba(0x0) = CONST 
0xabd: vabd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xad2: vad2(0x0) = AND vabd(0xffffffffffffffffffffffffffffffffffffffff) vaba(0x0)
0xad3: vad3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xae8: vae8(0x0) = AND vad3(0xffffffffffffffffffffffffffffffffffffffff) vad2(0x0)
0xaea: MSTORE vaba(0x0) vae8(0x0)
0xaeb: vaeb(0x20) = CONST 
0xaed: vaed(0x20) = ADD vaeb(0x20) vaba(0x0)
0xaf0: MSTORE vaed(0x20) vab8(0x6)
0xaf1: vaf1(0x20) = CONST 
0xaf3: vaf3(0x40) = ADD vaf1(0x20) vaed(0x20)
0xaf4: vaf4(0x0) = CONST 
0xaf6: vaf6 = SHA3 vaf4(0x0) vaf3(0x40)
0xaf7: vaf7 = SLOAD vaf6
0xaf8: vaf8(0x5) = CONST 
0xafa: vafa = SLOAD vaf8(0x5)
0xafb: vafb = SUB vafa vaf7
0xaff: JUMP v235(0x23c)
----------------------------------

Begin block 0xb00
prev = {'0x275'}, next = {'0xb4b'}
----------------------------------
Block 0xb00
0xb01: vb01(0x0) = CONST 
0xb03: vb03(0xb4b) = CONST 
0xb06: vb06(0x6) = CONST 
0xb08: vb08(0x0) = CONST 
0xb0b: vb0b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb20: vb20 = AND vb0b(0xffffffffffffffffffffffffffffffffffffffff) v291
0xb21: vb21(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb36: vb36 = AND vb21(0xffffffffffffffffffffffffffffffffffffffff) vb20
0xb38: MSTORE vb08(0x0) vb36
0xb39: vb39(0x20) = CONST 
0xb3b: vb3b(0x20) = ADD vb39(0x20) vb08(0x0)
0xb3e: MSTORE vb3b(0x20) vb06(0x6)
0xb3f: vb3f(0x20) = CONST 
0xb41: vb41(0x40) = ADD vb3f(0x20) vb3b(0x20)
0xb42: vb42(0x0) = CONST 
0xb44: vb44 = SHA3 vb42(0x0) vb41(0x40)
0xb45: vb45 = SLOAD vb44
0xb47: vb47(0x1052) = CONST 
0xb4a: vb4a_0 = CALLPRIVATE vb47(0x1052) v2bb vb45 vb03(0xb4b)
----------------------------------

Begin block 0xb4b
prev = {'0xb00'}, next = {'0xc14'}
----------------------------------
Block 0xb4b
0xb4c: vb4c(0x6) = CONST 
0xb4e: vb4e(0x0) = CONST 
0xb51: vb51(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb66: vb66 = AND vb51(0xffffffffffffffffffffffffffffffffffffffff) v291
0xb67: vb67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb7c: vb7c = AND vb67(0xffffffffffffffffffffffffffffffffffffffff) vb66
0xb7e: MSTORE vb4e(0x0) vb7c
0xb7f: vb7f(0x20) = CONST 
0xb81: vb81(0x20) = ADD vb7f(0x20) vb4e(0x0)
0xb84: MSTORE vb81(0x20) vb4c(0x6)
0xb85: vb85(0x20) = CONST 
0xb87: vb87(0x40) = ADD vb85(0x20) vb81(0x20)
0xb88: vb88(0x0) = CONST 
0xb8a: vb8a = SHA3 vb88(0x0) vb87(0x40)
0xb8d: SSTORE vb8a vb4a_0
0xb8f: vb8f(0xc14) = CONST 
0xb92: vb92(0x7) = CONST 
0xb94: vb94(0x0) = CONST 
0xb97: vb97(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbac: vbac = AND vb97(0xffffffffffffffffffffffffffffffffffffffff) v291
0xbad: vbad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbc2: vbc2 = AND vbad(0xffffffffffffffffffffffffffffffffffffffff) vbac
0xbc4: MSTORE vb94(0x0) vbc2
0xbc5: vbc5(0x20) = CONST 
0xbc7: vbc7(0x20) = ADD vbc5(0x20) vb94(0x0)
0xbca: MSTORE vbc7(0x20) vb92(0x7)
0xbcb: vbcb(0x20) = CONST 
0xbcd: vbcd(0x40) = ADD vbcb(0x20) vbc7(0x20)
0xbce: vbce(0x0) = CONST 
0xbd0: vbd0 = SHA3 vbce(0x0) vbcd(0x40)
0xbd1: vbd1(0x0) = CONST 
0xbd3: vbd3 = CALLER 
0xbd4: vbd4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe9: vbe9 = AND vbd4(0xffffffffffffffffffffffffffffffffffffffff) vbd3
0xbea: vbea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbff: vbff = AND vbea(0xffffffffffffffffffffffffffffffffffffffff) vbe9
0xc01: MSTORE vbd1(0x0) vbff
0xc02: vc02(0x20) = CONST 
0xc04: vc04(0x20) = ADD vc02(0x20) vbd1(0x0)
0xc07: MSTORE vc04(0x20) vbd0
0xc08: vc08(0x20) = CONST 
0xc0a: vc0a(0x40) = ADD vc08(0x20) vc04(0x20)
0xc0b: vc0b(0x0) = CONST 
0xc0d: vc0d = SHA3 vc0b(0x0) vc0a(0x40)
0xc0e: vc0e = SLOAD vc0d
0xc10: vc10(0x1052) = CONST 
0xc13: vc13_0 = CALLPRIVATE vc10(0x1052) v2bb vc0e vb8f(0xc14)
----------------------------------

Begin block 0xc14
prev = {'0xb4b'}, next = {'0xcdd'}
----------------------------------
Block 0xc14
0xc15: vc15(0x7) = CONST 
0xc17: vc17(0x0) = CONST 
0xc1a: vc1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc2f: vc2f = AND vc1a(0xffffffffffffffffffffffffffffffffffffffff) v291
0xc30: vc30(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc45: vc45 = AND vc30(0xffffffffffffffffffffffffffffffffffffffff) vc2f
0xc47: MSTORE vc17(0x0) vc45
0xc48: vc48(0x20) = CONST 
0xc4a: vc4a(0x20) = ADD vc48(0x20) vc17(0x0)
0xc4d: MSTORE vc4a(0x20) vc15(0x7)
0xc4e: vc4e(0x20) = CONST 
0xc50: vc50(0x40) = ADD vc4e(0x20) vc4a(0x20)
0xc51: vc51(0x0) = CONST 
0xc53: vc53 = SHA3 vc51(0x0) vc50(0x40)
0xc54: vc54(0x0) = CONST 
0xc56: vc56 = CALLER 
0xc57: vc57(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6c: vc6c = AND vc57(0xffffffffffffffffffffffffffffffffffffffff) vc56
0xc6d: vc6d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc82: vc82 = AND vc6d(0xffffffffffffffffffffffffffffffffffffffff) vc6c
0xc84: MSTORE vc54(0x0) vc82
0xc85: vc85(0x20) = CONST 
0xc87: vc87(0x20) = ADD vc85(0x20) vc54(0x0)
0xc8a: MSTORE vc87(0x20) vc53
0xc8b: vc8b(0x20) = CONST 
0xc8d: vc8d(0x40) = ADD vc8b(0x20) vc87(0x20)
0xc8e: vc8e(0x0) = CONST 
0xc90: vc90 = SHA3 vc8e(0x0) vc8d(0x40)
0xc93: SSTORE vc90 vc13_0
0xc95: vc95(0xcdd) = CONST 
0xc98: vc98(0x6) = CONST 
0xc9a: vc9a(0x0) = CONST 
0xc9d: vc9d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcb2: vcb2 = AND vc9d(0xffffffffffffffffffffffffffffffffffffffff) v2b1
0xcb3: vcb3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcc8: vcc8 = AND vcb3(0xffffffffffffffffffffffffffffffffffffffff) vcb2
0xcca: MSTORE vc9a(0x0) vcc8
0xccb: vccb(0x20) = CONST 
0xccd: vccd(0x20) = ADD vccb(0x20) vc9a(0x0)
0xcd0: MSTORE vccd(0x20) vc98(0x6)
0xcd1: vcd1(0x20) = CONST 
0xcd3: vcd3(0x40) = ADD vcd1(0x20) vccd(0x20)
0xcd4: vcd4(0x0) = CONST 
0xcd6: vcd6 = SHA3 vcd4(0x0) vcd3(0x40)
0xcd7: vcd7 = SLOAD vcd6
0xcd9: vcd9(0x1668) = CONST 
0xcdc: vcdc_0 = CALLPRIVATE vcd9(0x1668) v2bb vcd7 vc95(0xcdd)
----------------------------------

Begin block 0xcdd
prev = {'0xc14'}, next = {'0x2cb'}
----------------------------------
Block 0xcdd
0xcde: vcde(0x6) = CONST 
0xce0: vce0(0x0) = CONST 
0xce3: vce3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcf8: vcf8 = AND vce3(0xffffffffffffffffffffffffffffffffffffffff) v2b1
0xcf9: vcf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd0e: vd0e = AND vcf9(0xffffffffffffffffffffffffffffffffffffffff) vcf8
0xd10: MSTORE vce0(0x0) vd0e
0xd11: vd11(0x20) = CONST 
0xd13: vd13(0x20) = ADD vd11(0x20) vce0(0x0)
0xd16: MSTORE vd13(0x20) vcde(0x6)
0xd17: vd17(0x20) = CONST 
0xd19: vd19(0x40) = ADD vd17(0x20) vd13(0x20)
0xd1a: vd1a(0x0) = CONST 
0xd1c: vd1c = SHA3 vd1a(0x0) vd19(0x40)
0xd1f: SSTORE vd1c vcdc_0
0xd22: vd22(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd37: vd37 = AND vd22(0xffffffffffffffffffffffffffffffffffffffff) v2b1
0xd39: vd39(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4e: vd4e = AND vd39(0xffffffffffffffffffffffffffffffffffffffff) v291
0xd4f: vd4f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd71: vd71(0x40) = CONST 
0xd73: vd73 = MLOAD vd71(0x40)
0xd77: MSTORE vd73 v2bb
0xd78: vd78(0x20) = CONST 
0xd7a: vd7a = ADD vd78(0x20) vd73
0xd7e: vd7e(0x40) = CONST 
0xd80: vd80 = MLOAD vd7e(0x40)
0xd83: vd83 = SUB vd7a vd80
0xd85: LOG3 vd80 vd83 vd4f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vd4e vd37
0xd86: vd86(0x1) = CONST 
0xd8f: JUMP v260(0x2cb)
----------------------------------

Begin block 0xd90
prev = {'0x2f1'}, next = {'0x2fa'}
----------------------------------
Block 0xd90
0xd91: vd91(0x4) = CONST 
0xd93: vd93(0x0) = CONST 
0xd96: vd96 = SLOAD vd91(0x4)
0xd98: vd98(0x100) = CONST 
0xd9b: vd9b(0x1) = EXP vd98(0x100) vd93(0x0)
0xd9d: vd9d = DIV vd96 vd9b(0x1)
0xd9e: vd9e(0xff) = CONST 
0xda0: vda0 = AND vd9e(0xff) vd9d
0xda2: JUMP v2f3(0x2fa)
----------------------------------

Begin block 0xda3
prev = {'0x322'}, next = {'0x32b'}
----------------------------------
Block 0xda3
0xda4: vda4(0x5) = CONST 
0xda6: vda6 = SLOAD vda4(0x5)
0xda8: JUMP v324(0x32b)
----------------------------------

Begin block 0xda9
prev = {'0x364'}, next = {'0x390'}
----------------------------------
Block 0xda9
0xdaa: vdaa(0x0) = CONST 
0xdac: vdac(0x6) = CONST 
0xdae: vdae(0x0) = CONST 
0xdb1: vdb1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc6: vdc6 = AND vdb1(0xffffffffffffffffffffffffffffffffffffffff) v380
0xdc7: vdc7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xddc: vddc = AND vdc7(0xffffffffffffffffffffffffffffffffffffffff) vdc6
0xdde: MSTORE vdae(0x0) vddc
0xddf: vddf(0x20) = CONST 
0xde1: vde1(0x20) = ADD vddf(0x20) vdae(0x0)
0xde4: MSTORE vde1(0x20) vdac(0x6)
0xde5: vde5(0x20) = CONST 
0xde7: vde7(0x40) = ADD vde5(0x20) vde1(0x20)
0xde8: vde8(0x0) = CONST 
0xdea: vdea = SHA3 vde8(0x0) vde7(0x40)
0xdeb: vdeb = SLOAD vdea
0xdf1: JUMP v34f(0x390)
----------------------------------

Begin block 0xdf2
prev = {'0x3b2'}, next = {'0xe4c', '0xe48'}
----------------------------------
Block 0xdf2
0xdf3: vdf3(0x1) = CONST 
0xdf5: vdf5(0x0) = CONST 
0xdf8: vdf8 = SLOAD vdf3(0x1)
0xdfa: vdfa(0x100) = CONST 
0xdfd: vdfd(0x1) = EXP vdfa(0x100) vdf5(0x0)
0xdff: vdff = DIV vdf8 vdfd(0x1)
0xe00: ve00(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe15: ve15 = AND ve00(0xffffffffffffffffffffffffffffffffffffffff) vdff
0xe16: ve16(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe2b: ve2b = AND ve16(0xffffffffffffffffffffffffffffffffffffffff) ve15
0xe2c: ve2c = CALLER 
0xe2d: ve2d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe42: ve42 = AND ve2d(0xffffffffffffffffffffffffffffffffffffffff) ve2c
0xe43: ve43 = EQ ve42 ve2b
0xe44: ve44(0xe4c) = CONST 
0xe47: JUMPI ve44(0xe4c) ve43
----------------------------------

Begin block 0xe48
prev = {'0xdf2'}, next = {}
----------------------------------
Block 0xe48
0xe48: ve48(0x0) = CONST 
0xe4b: REVERT ve48(0x0) ve48(0x0)
----------------------------------

Begin block 0xe4c
prev = {'0xdf2'}, next = {'0x3bb'}
----------------------------------
Block 0xe4c
0xe4d: ve4d(0x1) = CONST 
0xe4f: ve4f(0x0) = CONST 
0xe52: ve52 = SLOAD ve4d(0x1)
0xe54: ve54(0x100) = CONST 
0xe57: ve57(0x1) = EXP ve54(0x100) ve4f(0x0)
0xe59: ve59 = DIV ve52 ve57(0x1)
0xe5a: ve5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe6f: ve6f = AND ve5a(0xffffffffffffffffffffffffffffffffffffffff) ve59
0xe70: ve70(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe85: ve85 = AND ve70(0xffffffffffffffffffffffffffffffffffffffff) ve6f
0xe86: ve86(0x0) = CONST 
0xe8a: ve8a = SLOAD ve86(0x0)
0xe8c: ve8c(0x100) = CONST 
0xe8f: ve8f(0x1) = EXP ve8c(0x100) ve86(0x0)
0xe91: ve91 = DIV ve8a ve8f(0x1)
0xe92: ve92(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xea7: vea7 = AND ve92(0xffffffffffffffffffffffffffffffffffffffff) ve91
0xea8: vea8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xebd: vebd = AND vea8(0xffffffffffffffffffffffffffffffffffffffff) vea7
0xebe: vebe(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xedf: vedf(0x40) = CONST 
0xee1: vee1 = MLOAD vedf(0x40)
0xee2: vee2(0x40) = CONST 
0xee4: vee4 = MLOAD vee2(0x40)
0xee7: vee7 = SUB vee1 vee4
0xee9: LOG3 vee4 vee7 vebe(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vebd ve85
0xeea: veea(0x1) = CONST 
0xeec: veec(0x0) = CONST 
0xeef: veef = SLOAD veea(0x1)
0xef1: vef1(0x100) = CONST 
0xef4: vef4(0x1) = EXP vef1(0x100) veec(0x0)
0xef6: vef6 = DIV veef vef4(0x1)
0xef7: vef7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf0c: vf0c = AND vef7(0xffffffffffffffffffffffffffffffffffffffff) vef6
0xf0d: vf0d(0x0) = CONST 
0xf10: vf10(0x100) = CONST 
0xf13: vf13(0x1) = EXP vf10(0x100) vf0d(0x0)
0xf15: vf15 = SLOAD vf0d(0x0)
0xf17: vf17(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2c: vf2c(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf17(0xffffffffffffffffffffffffffffffffffffffff) vf13(0x1)
0xf2d: vf2d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf2c(0xffffffffffffffffffffffffffffffffffffffff)
0xf2e: vf2e = AND vf2d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf15
0xf31: vf31(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf46: vf46 = AND vf31(0xffffffffffffffffffffffffffffffffffffffff) vf0c
0xf47: vf47 = MUL vf46 vf13(0x1)
0xf48: vf48 = OR vf47 vf2e
0xf4a: SSTORE vf0d(0x0) vf48
0xf4c: vf4c(0x0) = CONST 
0xf4e: vf4e(0x1) = CONST 
0xf50: vf50(0x0) = CONST 
0xf52: vf52(0x100) = CONST 
0xf55: vf55(0x1) = EXP vf52(0x100) vf50(0x0)
0xf57: vf57 = SLOAD vf4e(0x1)
0xf59: vf59(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf6e: vf6e(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf59(0xffffffffffffffffffffffffffffffffffffffff) vf55(0x1)
0xf6f: vf6f(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf6e(0xffffffffffffffffffffffffffffffffffffffff)
0xf70: vf70 = AND vf6f(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf57
0xf73: vf73(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf88: vf88(0x0) = AND vf73(0xffffffffffffffffffffffffffffffffffffffff) vf4c(0x0)
0xf89: vf89(0x0) = MUL vf88(0x0) vf55(0x1)
0xf8a: vf8a = OR vf89(0x0) vf70
0xf8c: SSTORE vf4e(0x1) vf8a
0xf8e: JUMP v3b4(0x3bb)
----------------------------------

Begin block 0xf8f
prev = {'0x3c9'}, next = {'0x3d2'}
----------------------------------
Block 0xf8f
0xf90: vf90(0x0) = CONST 
0xf94: vf94 = SLOAD vf90(0x0)
0xf96: vf96(0x100) = CONST 
0xf99: vf99(0x1) = EXP vf96(0x100) vf90(0x0)
0xf9b: vf9b = DIV vf94 vf99(0x1)
0xf9c: vf9c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfb1: vfb1 = AND vf9c(0xffffffffffffffffffffffffffffffffffffffff) vf9b
0xfb3: JUMP v3cb(0x3d2)
----------------------------------

Begin block 0xfb4
prev = {'0x420'}, next = {'0x104a', '0x1004'}
----------------------------------
Block 0xfb4
0xfb5: vfb5(0x2) = CONST 
0xfb8: vfb8 = SLOAD vfb5(0x2)
0xfb9: vfb9(0x1) = CONST 
0xfbc: vfbc(0x1) = CONST 
0xfbe: vfbe = AND vfbc(0x1) vfb8
0xfbf: vfbf = ISZERO vfbe
0xfc0: vfc0(0x100) = CONST 
0xfc3: vfc3 = MUL vfc0(0x100) vfbf
0xfc4: vfc4 = SUB vfc3 vfb9(0x1)
0xfc5: vfc5 = AND vfc4 vfb8
0xfc6: vfc6(0x2) = CONST 
0xfc9: vfc9 = DIV vfc5 vfc6(0x2)
0xfcb: vfcb(0x1f) = CONST 
0xfcd: vfcd = ADD vfcb(0x1f) vfc9
0xfce: vfce(0x20) = CONST 
0xfd2: vfd2 = DIV vfcd vfce(0x20)
0xfd3: vfd3 = MUL vfd2 vfce(0x20)
0xfd4: vfd4(0x20) = CONST 
0xfd6: vfd6 = ADD vfd4(0x20) vfd3
0xfd7: vfd7(0x40) = CONST 
0xfd9: vfd9 = MLOAD vfd7(0x40)
0xfdc: vfdc = ADD vfd9 vfd6
0xfdd: vfdd(0x40) = CONST 
0xfdf: MSTORE vfdd(0x40) vfdc
0xfe6: MSTORE vfd9 vfc9
0xfe7: vfe7(0x20) = CONST 
0xfe9: vfe9 = ADD vfe7(0x20) vfd9
0xfec: vfec = SLOAD vfb5(0x2)
0xfed: vfed(0x1) = CONST 
0xff0: vff0(0x1) = CONST 
0xff2: vff2 = AND vff0(0x1) vfec
0xff3: vff3 = ISZERO vff2
0xff4: vff4(0x100) = CONST 
0xff7: vff7 = MUL vff4(0x100) vff3
0xff8: vff8 = SUB vff7 vfed(0x1)
0xff9: vff9 = AND vff8 vfec
0xffa: vffa(0x2) = CONST 
0xffd: vffd = DIV vff9 vffa(0x2)
0xfff: vfff = ISZERO vffd
0x1000: v1000(0x104a) = CONST 
0x1003: JUMPI v1000(0x104a) vfff
----------------------------------

Begin block 0x1004
prev = {'0xfb4'}, next = {'0x100c', '0x101f'}
----------------------------------
Block 0x1004
0x1005: v1005(0x1f) = CONST 
0x1007: v1007 = LT v1005(0x1f) vffd
0x1008: v1008(0x101f) = CONST 
0x100b: JUMPI v1008(0x101f) v1007
----------------------------------

Begin block 0x100c
prev = {'0x1004'}, next = {'0x104a'}
----------------------------------
Block 0x100c
0x100c: v100c(0x100) = CONST 
0x1011: v1011 = SLOAD vfb5(0x2)
0x1012: v1012 = DIV v1011 v100c(0x100)
0x1013: v1013 = MUL v1012 v100c(0x100)
0x1015: MSTORE vfe9 v1013
0x1017: v1017(0x20) = CONST 
0x1019: v1019 = ADD v1017(0x20) vfe9
0x101b: v101b(0x104a) = CONST 
0x101e: JUMP v101b(0x104a)
----------------------------------

Begin block 0x101f
prev = {'0x1004'}, next = {'0x102d'}
----------------------------------
Block 0x101f
0x1021: v1021 = ADD vfe9 vffd
0x1024: v1024(0x0) = CONST 
0x1026: MSTORE v1024(0x0) vfb5(0x2)
0x1027: v1027(0x20) = CONST 
0x1029: v1029(0x0) = CONST 
0x102b: v102b = SHA3 v1029(0x0) v1027(0x20)
----------------------------------

Begin block 0x102d
prev = {'0x102d', '0x101f'}, next = {'0x1041', '0x102d'}
----------------------------------
Block 0x102d
0x102d_0x0: v102d_0 = PHI vfe9 v1039
0x102d_0x1: v102d_1 = PHI v102b v1035
0x102f: v102f = SLOAD v102d_1
0x1031: MSTORE v102d_0 v102f
0x1033: v1033(0x1) = CONST 
0x1035: v1035 = ADD v1033(0x1) v102d_1
0x1037: v1037(0x20) = CONST 
0x1039: v1039 = ADD v1037(0x20) v102d_0
0x103c: v103c = GT v1021 v1039
0x103d: v103d(0x102d) = CONST 
0x1040: JUMPI v103d(0x102d) v103c
----------------------------------

Begin block 0x1041
prev = {'0x102d'}, next = {'0x104a'}
----------------------------------
Block 0x1041
0x1043: v1043 = SUB v1039 v1021
0x1044: v1044(0x1f) = CONST 
0x1046: v1046 = AND v1044(0x1f) v1043
0x1048: v1048 = ADD v1021 v1046
----------------------------------

Begin block 0x104a
prev = {'0xfb4', '0x1041', '0x100c'}, next = {'0x429'}
----------------------------------
Block 0x104a
0x1051: JUMP v422(0x429)
----------------------------------

Begin block 0x1052
prev = {}, next = {'0x10610x1052', '0x105d0x1052'}
----------------------------------
function 0x1052(v1052arg0, v1052arg1, v1052arg2)
Block 0x1052
0x1053: v1053(0x0) = CONST 
0x1057: v1057 = GT v1052arg0 v1052arg1
0x1058: v1058 = ISZERO v1057
0x1059: v1059(0x1061) = CONST 
0x105c: JUMPI v1059(0x1061) v1058
----------------------------------

Begin block 0x10520x4a4
prev = {'0x4c7'}, next = {'0x105d0x4a4', '0x10610x4a4'}
----------------------------------
Block 0x10520x4a4
0x10530x4a4: v4a41053(0x0) = CONST 
0x10570x4a4: v4a41057 = GT v4d7 v4cd
0x10580x4a4: v4a41058 = ISZERO v4a41057
0x10590x4a4: v4a41059(0x1061) = CONST 
0x105c0x4a4: JUMPI v4a41059(0x1061) v4a41058
----------------------------------

Begin block 0x105d0x4a4
prev = {'0x10520x4a4'}, next = {}
----------------------------------
Block 0x105d0x4a4
0x105d0x4a4: v4a4105d(0x0) = CONST 
0x10600x4a4: REVERT v4a4105d(0x0) v4a4105d(0x0)
----------------------------------

Begin block 0x105d0x1052
prev = {'0x1052'}, next = {}
----------------------------------
Block 0x105d0x1052
0x105d0x1052: v1052105d(0x0) = CONST 
0x10600x1052: REVERT v1052105d(0x0) v1052105d(0x0)
----------------------------------

Begin block 0x10610x4a4
prev = {'0x10520x4a4'}, next = {'0x4e7'}
----------------------------------
Block 0x10610x4a4
0x10640x4a4: v4a41064 = SUB v4cd v4d7
0x106b0x4a4: JUMP v4b2(0x4e7)
----------------------------------

Begin block 0x10610x1052
prev = {'0x1052'}, next = {}
----------------------------------
Block 0x10610x1052
0x10640x1052: v10521064 = SUB v1052arg1 v1052arg0
0x106b0x1052: RETURNPRIVATE v1052arg2 v10521064
----------------------------------

Begin block 0x106c
prev = {'0x520'}, next = {'0x10b7'}
----------------------------------
Block 0x106c
0x106d: v106d(0x0) = CONST 
0x106f: v106f(0x10b7) = CONST 
0x1072: v1072(0x6) = CONST 
0x1074: v1074(0x0) = CONST 
0x1076: v1076 = CALLER 
0x1077: v1077(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108c: v108c = AND v1077(0xffffffffffffffffffffffffffffffffffffffff) v1076
0x108d: v108d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10a2: v10a2 = AND v108d(0xffffffffffffffffffffffffffffffffffffffff) v108c
0x10a4: MSTORE v1074(0x0) v10a2
0x10a5: v10a5(0x20) = CONST 
0x10a7: v10a7(0x20) = ADD v10a5(0x20) v1074(0x0)
0x10aa: MSTORE v10a7(0x20) v1072(0x6)
0x10ab: v10ab(0x20) = CONST 
0x10ad: v10ad(0x40) = ADD v10ab(0x20) v10a7(0x20)
0x10ae: v10ae(0x0) = CONST 
0x10b0: v10b0 = SHA3 v10ae(0x0) v10ad(0x40)
0x10b1: v10b1 = SLOAD v10b0
0x10b3: v10b3(0x1052) = CONST 
0x10b6: v10b6_0 = CALLPRIVATE v10b3(0x1052) v546 v10b1 v106f(0x10b7)
----------------------------------

Begin block 0x10b7
prev = {'0x106c'}, next = {'0x1143'}
----------------------------------
Block 0x10b7
0x10b8: v10b8(0x6) = CONST 
0x10ba: v10ba(0x0) = CONST 
0x10bc: v10bc = CALLER 
0x10bd: v10bd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10d2: v10d2 = AND v10bd(0xffffffffffffffffffffffffffffffffffffffff) v10bc
0x10d3: v10d3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10e8: v10e8 = AND v10d3(0xffffffffffffffffffffffffffffffffffffffff) v10d2
0x10ea: MSTORE v10ba(0x0) v10e8
0x10eb: v10eb(0x20) = CONST 
0x10ed: v10ed(0x20) = ADD v10eb(0x20) v10ba(0x0)
0x10f0: MSTORE v10ed(0x20) v10b8(0x6)
0x10f1: v10f1(0x20) = CONST 
0x10f3: v10f3(0x40) = ADD v10f1(0x20) v10ed(0x20)
0x10f4: v10f4(0x0) = CONST 
0x10f6: v10f6 = SHA3 v10f4(0x0) v10f3(0x40)
0x10f9: SSTORE v10f6 v10b6_0
0x10fb: v10fb(0x1143) = CONST 
0x10fe: v10fe(0x6) = CONST 
0x1100: v1100(0x0) = CONST 
0x1103: v1103(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1118: v1118 = AND v1103(0xffffffffffffffffffffffffffffffffffffffff) v53c
0x1119: v1119(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x112e: v112e = AND v1119(0xffffffffffffffffffffffffffffffffffffffff) v1118
0x1130: MSTORE v1100(0x0) v112e
0x1131: v1131(0x20) = CONST 
0x1133: v1133(0x20) = ADD v1131(0x20) v1100(0x0)
0x1136: MSTORE v1133(0x20) v10fe(0x6)
0x1137: v1137(0x20) = CONST 
0x1139: v1139(0x40) = ADD v1137(0x20) v1133(0x20)
0x113a: v113a(0x0) = CONST 
0x113c: v113c = SHA3 v113a(0x0) v1139(0x40)
0x113d: v113d = SLOAD v113c
0x113f: v113f(0x1668) = CONST 
0x1142: v1142_0 = CALLPRIVATE v113f(0x1668) v546 v113d v10fb(0x1143)
----------------------------------

Begin block 0x1143
prev = {'0x10b7'}, next = {'0x556'}
----------------------------------
Block 0x1143
0x1144: v1144(0x6) = CONST 
0x1146: v1146(0x0) = CONST 
0x1149: v1149(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x115e: v115e = AND v1149(0xffffffffffffffffffffffffffffffffffffffff) v53c
0x115f: v115f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1174: v1174 = AND v115f(0xffffffffffffffffffffffffffffffffffffffff) v115e
0x1176: MSTORE v1146(0x0) v1174
0x1177: v1177(0x20) = CONST 
0x1179: v1179(0x20) = ADD v1177(0x20) v1146(0x0)
0x117c: MSTORE v1179(0x20) v1144(0x6)
0x117d: v117d(0x20) = CONST 
0x117f: v117f(0x40) = ADD v117d(0x20) v1179(0x20)
0x1180: v1180(0x0) = CONST 
0x1182: v1182 = SHA3 v1180(0x0) v117f(0x40)
0x1185: SSTORE v1182 v1142_0
0x1188: v1188(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x119d: v119d = AND v1188(0xffffffffffffffffffffffffffffffffffffffff) v53c
0x119e: v119e = CALLER 
0x119f: v119f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11b4: v11b4 = AND v119f(0xffffffffffffffffffffffffffffffffffffffff) v119e
0x11b5: v11b5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x11d7: v11d7(0x40) = CONST 
0x11d9: v11d9 = MLOAD v11d7(0x40)
0x11dd: MSTORE v11d9 v546
0x11de: v11de(0x20) = CONST 
0x11e0: v11e0 = ADD v11de(0x20) v11d9
0x11e4: v11e4(0x40) = CONST 
0x11e6: v11e6 = MLOAD v11e4(0x40)
0x11e9: v11e9 = SUB v11e0 v11e6
0x11eb: LOG3 v11e6 v11e9 v11b5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v11b4 v119d
0x11ec: v11ec(0x1) = CONST 
0x11f4: JUMP v50b(0x556)
----------------------------------

Begin block 0x11f5
prev = {'0x593'}, next = {'0x11ff', '0x1203'}
----------------------------------
Block 0x11f5
0x11f6: v11f6(0x0) = CONST 
0x11fa: v11fa = GT v5a3 v11f6(0x0)
0x11fb: v11fb(0x1203) = CONST 
0x11fe: JUMPI v11fb(0x1203) v11fa
----------------------------------

Begin block 0x11ff
prev = {'0x11f5'}, next = {}
----------------------------------
Block 0x11ff
0x11ff: v11ff(0x0) = CONST 
0x1202: REVERT v11ff(0x0) v11ff(0x0)
----------------------------------

Begin block 0x1203
prev = {'0x11f5'}, next = {'0x120b', '0x120c'}
----------------------------------
Block 0x1203
0x1207: v1207(0x120c) = CONST 
0x120a: JUMPI v1207(0x120c) v5a3
----------------------------------

Begin block 0x120b
prev = {'0x1203'}, next = {}
----------------------------------
Block 0x120b
0x120b: THROW 
----------------------------------

Begin block 0x120c
prev = {'0x1203'}, next = {'0x5b3'}
----------------------------------
Block 0x120c
0x120d: v120d = DIV v599 v5a3
0x1214: JUMP v57e(0x5b3)
----------------------------------

Begin block 0x1215
prev = {'0x667'}, next = {'0x13bb'}
----------------------------------
Block 0x1215
0x1216: v1216(0x0) = CONST 
0x1219: v1219(0x7) = CONST 
0x121b: v121b(0x0) = CONST 
0x121d: v121d = CALLER 
0x121e: v121e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1233: v1233 = AND v121e(0xffffffffffffffffffffffffffffffffffffffff) v121d
0x1234: v1234(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1249: v1249 = AND v1234(0xffffffffffffffffffffffffffffffffffffffff) v1233
0x124b: MSTORE v121b(0x0) v1249
0x124c: v124c(0x20) = CONST 
0x124e: v124e(0x20) = ADD v124c(0x20) v121b(0x0)
0x1251: MSTORE v124e(0x20) v1219(0x7)
0x1252: v1252(0x20) = CONST 
0x1254: v1254(0x40) = ADD v1252(0x20) v124e(0x20)
0x1255: v1255(0x0) = CONST 
0x1257: v1257 = SHA3 v1255(0x0) v1254(0x40)
0x1258: v1258(0x0) = CONST 
0x125b: v125b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1270: v1270 = AND v125b(0xffffffffffffffffffffffffffffffffffffffff) v608
0x1271: v1271(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1286: v1286 = AND v1271(0xffffffffffffffffffffffffffffffffffffffff) v1270
0x1288: MSTORE v1258(0x0) v1286
0x1289: v1289(0x20) = CONST 
0x128b: v128b(0x20) = ADD v1289(0x20) v1258(0x0)
0x128e: MSTORE v128b(0x20) v1257
0x128f: v128f(0x20) = CONST 
0x1291: v1291(0x40) = ADD v128f(0x20) v128b(0x20)
0x1292: v1292(0x0) = CONST 
0x1294: v1294 = SHA3 v1292(0x0) v1291(0x40)
0x1297: SSTORE v1294 v612
0x129a: v129a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12af: v12af = AND v129a(0xffffffffffffffffffffffffffffffffffffffff) v608
0x12b0: v12b0 = CALLER 
0x12b1: v12b1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12c6: v12c6 = AND v12b1(0xffffffffffffffffffffffffffffffffffffffff) v12b0
0x12c7: v12c7(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x12e9: v12e9(0x40) = CONST 
0x12eb: v12eb = MLOAD v12e9(0x40)
0x12ef: MSTORE v12eb v612
0x12f0: v12f0(0x20) = CONST 
0x12f2: v12f2 = ADD v12f0(0x20) v12eb
0x12f6: v12f6(0x40) = CONST 
0x12f8: v12f8 = MLOAD v12f6(0x40)
0x12fb: v12fb = SUB v12f2 v12f8
0x12fd: LOG3 v12f8 v12fb v12c7(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v12c6 v12af
0x12ff: v12ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1314: v1314 = AND v12ff(0xffffffffffffffffffffffffffffffffffffffff) v608
0x1315: v1315(0x8f4ffcb1) = CONST 
0x131a: v131a = CALLER 
0x131c: v131c = ADDRESS 
0x131e: v131e(0x40) = CONST 
0x1320: v1320 = MLOAD v131e(0x40)
0x1322: v1322(0xffffffff) = CONST 
0x1327: v1327(0x8f4ffcb1) = AND v1322(0xffffffff) v1315(0x8f4ffcb1)
0x1328: v1328(0xe0) = CONST 
0x132a: v132a(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = SHL v1328(0xe0) v1327(0x8f4ffcb1)
0x132c: MSTORE v1320 v132a(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x132d: v132d(0x4) = CONST 
0x132f: v132f = ADD v132d(0x4) v1320
0x1332: v1332(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1347: v1347 = AND v1332(0xffffffffffffffffffffffffffffffffffffffff) v131a
0x1348: v1348(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x135d: v135d = AND v1348(0xffffffffffffffffffffffffffffffffffffffff) v1347
0x135f: MSTORE v132f v135d
0x1360: v1360(0x20) = CONST 
0x1362: v1362 = ADD v1360(0x20) v132f
0x1365: MSTORE v1362 v612
0x1366: v1366(0x20) = CONST 
0x1368: v1368 = ADD v1366(0x20) v1362
0x136a: v136a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x137f: v137f = AND v136a(0xffffffffffffffffffffffffffffffffffffffff) v131c
0x1380: v1380(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1395: v1395 = AND v1380(0xffffffffffffffffffffffffffffffffffffffff) v137f
0x1397: MSTORE v1368 v1395
0x1398: v1398(0x20) = CONST 
0x139a: v139a = ADD v1398(0x20) v1368
0x139c: v139c(0x20) = CONST 
0x139e: v139e = ADD v139c(0x20) v139a
0x13a1: v13a1 = SUB v139e v132f
0x13a3: MSTORE v139a v13a1
0x13a7: v13a7 = MLOAD v67a
0x13a9: MSTORE v139e v13a7
0x13aa: v13aa(0x20) = CONST 
0x13ac: v13ac = ADD v13aa(0x20) v139e
0x13b0: v13b0 = MLOAD v67a
0x13b2: v13b2(0x20) = CONST 
0x13b4: v13b4 = ADD v13b2(0x20) v67a
0x13b9: v13b9(0x0) = CONST 
----------------------------------

Begin block 0x13bb
prev = {'0x13c4', '0x1215'}, next = {'0x13c4', '0x13d6'}
----------------------------------
Block 0x13bb
0x13bb_0x0: v13bb_0 = PHI v13b9(0x0) v13cf
0x13be: v13be = LT v13bb_0 v13b0
0x13bf: v13bf = ISZERO v13be
0x13c0: v13c0(0x13d6) = CONST 
0x13c3: JUMPI v13c0(0x13d6) v13bf
----------------------------------

Begin block 0x13c4
prev = {'0x13bb'}, next = {'0x13bb'}
----------------------------------
Block 0x13c4
0x13c4_0x0: v13c4_0 = PHI v13b9(0x0) v13cf
0x13c6: v13c6 = ADD v13b4 v13c4_0
0x13c7: v13c7 = MLOAD v13c6
0x13ca: v13ca = ADD v13ac v13c4_0
0x13cb: MSTORE v13ca v13c7
0x13cc: v13cc(0x20) = CONST 
0x13cf: v13cf = ADD v13c4_0 v13cc(0x20)
0x13d2: v13d2(0x13bb) = CONST 
0x13d5: JUMP v13d2(0x13bb)
----------------------------------

Begin block 0x13d6
prev = {'0x13bb'}, next = {'0x1403', '0x13ea'}
----------------------------------
Block 0x13d6
0x13df: v13df = ADD v13b0 v13ac
0x13e1: v13e1(0x1f) = CONST 
0x13e3: v13e3 = AND v13e1(0x1f) v13b0
0x13e5: v13e5 = ISZERO v13e3
0x13e6: v13e6(0x1403) = CONST 
0x13e9: JUMPI v13e6(0x1403) v13e5
----------------------------------

Begin block 0x13ea
prev = {'0x13d6'}, next = {'0x1403'}
----------------------------------
Block 0x13ea
0x13ec: v13ec = SUB v13df v13e3
0x13ee: v13ee = MLOAD v13ec
0x13ef: v13ef(0x1) = CONST 
0x13f2: v13f2(0x20) = CONST 
0x13f4: v13f4 = SUB v13f2(0x20) v13e3
0x13f5: v13f5(0x100) = CONST 
0x13f8: v13f8 = EXP v13f5(0x100) v13f4
0x13f9: v13f9 = SUB v13f8 v13ef(0x1)
0x13fa: v13fa = NOT v13f9
0x13fb: v13fb = AND v13fa v13ee
0x13fd: MSTORE v13ec v13fb
0x13fe: v13fe(0x20) = CONST 
0x1400: v1400 = ADD v13fe(0x20) v13ec
----------------------------------

Begin block 0x1403
prev = {'0x13ea', '0x13d6'}, next = {'0x1421', '0x1425'}
----------------------------------
Block 0x1403
0x1403_0x1: v1403_1 = PHI v13df v1400
0x140c: v140c(0x0) = CONST 
0x140e: v140e(0x40) = CONST 
0x1410: v1410 = MLOAD v140e(0x40)
0x1413: v1413 = SUB v1403_1 v1410
0x1415: v1415(0x0) = CONST 
0x1419: v1419 = EXTCODESIZE v1314
0x141a: v141a = ISZERO v1419
0x141c: v141c = ISZERO v141a
0x141d: v141d(0x1425) = CONST 
0x1420: JUMPI v141d(0x1425) v141c
----------------------------------

Begin block 0x1421
prev = {'0x1403'}, next = {}
----------------------------------
Block 0x1421
0x1421: v1421(0x0) = CONST 
0x1424: REVERT v1421(0x0) v1421(0x0)
----------------------------------

Begin block 0x1425
prev = {'0x1403'}, next = {'0x1439', '0x1430'}
----------------------------------
Block 0x1425
0x1427: v1427 = GAS 
0x1428: v1428 = CALL v1427 v1314 v1415(0x0) v1410 v1413 v1410 v140c(0x0)
0x1429: v1429 = ISZERO v1428
0x142b: v142b = ISZERO v1429
0x142c: v142c(0x1439) = CONST 
0x142f: JUMPI v142c(0x1439) v142b
----------------------------------

Begin block 0x1430
prev = {'0x1425'}, next = {}
----------------------------------
Block 0x1430
0x1430: v1430 = RETURNDATASIZE 
0x1431: v1431(0x0) = CONST 
0x1434: RETURNDATACOPY v1431(0x0) v1431(0x0) v1430
0x1435: v1435 = RETURNDATASIZE 
0x1436: v1436(0x0) = CONST 
0x1438: REVERT v1436(0x0) v1435
----------------------------------

Begin block 0x1439
prev = {'0x1425'}, next = {'0x6b9'}
----------------------------------
Block 0x1439
0x143e: v143e(0x1) = CONST 
0x1447: JUMP v5d7(0x6b9)
----------------------------------

Begin block 0x1448
prev = {'0x6f6'}, next = {'0x1459', '0x1466'}
----------------------------------
Block 0x1448
0x1449: v1449(0x0) = CONST 
0x144d: v144d = MUL v6fc v706
0x1450: v1450(0x0) = CONST 
0x1453: v1453 = EQ v6fc v1450(0x0)
0x1455: v1455(0x1466) = CONST 
0x1458: JUMPI v1455(0x1466) v1453
----------------------------------

Begin block 0x1459
prev = {'0x1448'}, next = {'0x1463', '0x1462'}
----------------------------------
Block 0x1459
0x145e: v145e(0x1463) = CONST 
0x1461: JUMPI v145e(0x1463) v6fc
----------------------------------

Begin block 0x1462
prev = {'0x1459'}, next = {}
----------------------------------
Block 0x1462
0x1462: THROW 
----------------------------------

Begin block 0x1463
prev = {'0x1459'}, next = {'0x1466'}
----------------------------------
Block 0x1463
0x1464: v1464 = DIV v144d v6fc
0x1465: v1465 = EQ v1464 v706
----------------------------------

Begin block 0x1466
prev = {'0x1448', '0x1463'}, next = {'0x146b', '0x146f'}
----------------------------------
Block 0x1466
0x1466_0x0: v1466_0 = PHI v1453 v1465
0x1467: v1467(0x146f) = CONST 
0x146a: JUMPI v1467(0x146f) v1466_0
----------------------------------

Begin block 0x146b
prev = {'0x1466'}, next = {}
----------------------------------
Block 0x146b
0x146b: v146b(0x0) = CONST 
0x146e: REVERT v146b(0x0) v146b(0x0)
----------------------------------

Begin block 0x146f
prev = {'0x1466'}, next = {'0x716'}
----------------------------------
Block 0x146f
0x1474: JUMP v6e1(0x716)
----------------------------------

Begin block 0x1475
prev = {'0x738'}, next = {'0x741'}
----------------------------------
Block 0x1475
0x1476: v1476(0x1) = CONST 
0x1478: v1478(0x0) = CONST 
0x147b: v147b = SLOAD v1476(0x1)
0x147d: v147d(0x100) = CONST 
0x1480: v1480(0x1) = EXP v147d(0x100) v1478(0x0)
0x1482: v1482 = DIV v147b v1480(0x1)
0x1483: v1483(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1498: v1498 = AND v1483(0xffffffffffffffffffffffffffffffffffffffff) v1482
0x149a: JUMP v73a(0x741)
----------------------------------

Begin block 0x149b
prev = {'0x7a6'}, next = {'0x14f6', '0x14f2'}
----------------------------------
Block 0x149b
0x149c: v149c(0x0) = CONST 
0x149f: v149f(0x0) = CONST 
0x14a2: v14a2 = SLOAD v149c(0x0)
0x14a4: v14a4(0x100) = CONST 
0x14a7: v14a7(0x1) = EXP v14a4(0x100) v149f(0x0)
0x14a9: v14a9 = DIV v14a2 v14a7(0x1)
0x14aa: v14aa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14bf: v14bf = AND v14aa(0xffffffffffffffffffffffffffffffffffffffff) v14a9
0x14c0: v14c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14d5: v14d5 = AND v14c0(0xffffffffffffffffffffffffffffffffffffffff) v14bf
0x14d6: v14d6 = CALLER 
0x14d7: v14d7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14ec: v14ec = AND v14d7(0xffffffffffffffffffffffffffffffffffffffff) v14d6
0x14ed: v14ed = EQ v14ec v14d5
0x14ee: v14ee(0x14f6) = CONST 
0x14f1: JUMPI v14ee(0x14f6) v14ed
----------------------------------

Begin block 0x14f2
prev = {'0x149b'}, next = {}
----------------------------------
Block 0x14f2
0x14f2: v14f2(0x0) = CONST 
0x14f5: REVERT v14f2(0x0) v14f2(0x0)
----------------------------------

Begin block 0x14f6
prev = {'0x149b'}, next = {'0x159a', '0x159e'}
----------------------------------
Block 0x14f6
0x14f8: v14f8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x150d: v150d = AND v14f8(0xffffffffffffffffffffffffffffffffffffffff) v7c2
0x150e: v150e(0xa9059cbb) = CONST 
0x1513: v1513(0x0) = CONST 
0x1517: v1517 = SLOAD v1513(0x0)
0x1519: v1519(0x100) = CONST 
0x151c: v151c(0x1) = EXP v1519(0x100) v1513(0x0)
0x151e: v151e = DIV v1517 v151c(0x1)
0x151f: v151f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1534: v1534 = AND v151f(0xffffffffffffffffffffffffffffffffffffffff) v151e
0x1536: v1536(0x40) = CONST 
0x1538: v1538 = MLOAD v1536(0x40)
0x153a: v153a(0xffffffff) = CONST 
0x153f: v153f(0xa9059cbb) = AND v153a(0xffffffff) v150e(0xa9059cbb)
0x1540: v1540(0xe0) = CONST 
0x1542: v1542(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v1540(0xe0) v153f(0xa9059cbb)
0x1544: MSTORE v1538 v1542(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x1545: v1545(0x4) = CONST 
0x1547: v1547 = ADD v1545(0x4) v1538
0x154a: v154a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x155f: v155f = AND v154a(0xffffffffffffffffffffffffffffffffffffffff) v1534
0x1560: v1560(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1575: v1575 = AND v1560(0xffffffffffffffffffffffffffffffffffffffff) v155f
0x1577: MSTORE v1547 v1575
0x1578: v1578(0x20) = CONST 
0x157a: v157a = ADD v1578(0x20) v1547
0x157d: MSTORE v157a v7cc
0x157e: v157e(0x20) = CONST 
0x1580: v1580 = ADD v157e(0x20) v157a
0x1585: v1585(0x20) = CONST 
0x1587: v1587(0x40) = CONST 
0x1589: v1589 = MLOAD v1587(0x40)
0x158c: v158c = SUB v1580 v1589
0x158e: v158e(0x0) = CONST 
0x1592: v1592 = EXTCODESIZE v150d
0x1593: v1593 = ISZERO v1592
0x1595: v1595 = ISZERO v1593
0x1596: v1596(0x159e) = CONST 
0x1599: JUMPI v1596(0x159e) v1595
----------------------------------

Begin block 0x159a
prev = {'0x14f6'}, next = {}
----------------------------------
Block 0x159a
0x159a: v159a(0x0) = CONST 
0x159d: REVERT v159a(0x0) v159a(0x0)
----------------------------------

Begin block 0x159e
prev = {'0x14f6'}, next = {'0x15b2', '0x15a9'}
----------------------------------
Block 0x159e
0x15a0: v15a0 = GAS 
0x15a1: v15a1 = CALL v15a0 v150d v158e(0x0) v1589 v158c v1589 v1585(0x20)
0x15a2: v15a2 = ISZERO v15a1
0x15a4: v15a4 = ISZERO v15a2
0x15a5: v15a5(0x15b2) = CONST 
0x15a8: JUMPI v15a5(0x15b2) v15a4
----------------------------------

Begin block 0x15a9
prev = {'0x159e'}, next = {}
----------------------------------
Block 0x15a9
0x15a9: v15a9 = RETURNDATASIZE 
0x15aa: v15aa(0x0) = CONST 
0x15ad: RETURNDATACOPY v15aa(0x0) v15aa(0x0) v15a9
0x15ae: v15ae = RETURNDATASIZE 
0x15af: v15af(0x0) = CONST 
0x15b1: REVERT v15af(0x0) v15ae
----------------------------------

Begin block 0x15b2
prev = {'0x159e'}, next = {'0x15c4', '0x15c8'}
----------------------------------
Block 0x15b2
0x15b7: v15b7(0x40) = CONST 
0x15b9: v15b9 = MLOAD v15b7(0x40)
0x15ba: v15ba = RETURNDATASIZE 
0x15bb: v15bb(0x20) = CONST 
0x15be: v15be = LT v15ba v15bb(0x20)
0x15bf: v15bf = ISZERO v15be
0x15c0: v15c0(0x15c8) = CONST 
0x15c3: JUMPI v15c0(0x15c8) v15bf
----------------------------------

Begin block 0x15c4
prev = {'0x15b2'}, next = {}
----------------------------------
Block 0x15c4
0x15c4: v15c4(0x0) = CONST 
0x15c7: REVERT v15c4(0x0) v15c4(0x0)
----------------------------------

Begin block 0x15c8
prev = {'0x15b2'}, next = {'0x7dc'}
----------------------------------
Block 0x15c8
0x15ca: v15ca = ADD v15b9 v15ba
0x15ce: v15ce = MLOAD v15b9
0x15d0: v15d0(0x20) = CONST 
0x15d2: v15d2 = ADD v15d0(0x20) v15b9
0x15e0: JUMP v791(0x7dc)
----------------------------------

Begin block 0x15e1
prev = {'0x819'}, next = {'0x865'}
----------------------------------
Block 0x15e1
0x15e2: v15e2(0x0) = CONST 
0x15e4: v15e4(0x7) = CONST 
0x15e6: v15e6(0x0) = CONST 
0x15e9: v15e9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15fe: v15fe = AND v15e9(0xffffffffffffffffffffffffffffffffffffffff) v835
0x15ff: v15ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1614: v1614 = AND v15ff(0xffffffffffffffffffffffffffffffffffffffff) v15fe
0x1616: MSTORE v15e6(0x0) v1614
0x1617: v1617(0x20) = CONST 
0x1619: v1619(0x20) = ADD v1617(0x20) v15e6(0x0)
0x161c: MSTORE v1619(0x20) v15e4(0x7)
0x161d: v161d(0x20) = CONST 
0x161f: v161f(0x40) = ADD v161d(0x20) v1619(0x20)
0x1620: v1620(0x0) = CONST 
0x1622: v1622 = SHA3 v1620(0x0) v161f(0x40)
0x1623: v1623(0x0) = CONST 
0x1626: v1626(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x163b: v163b = AND v1626(0xffffffffffffffffffffffffffffffffffffffff) v855
0x163c: v163c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1651: v1651 = AND v163c(0xffffffffffffffffffffffffffffffffffffffff) v163b
0x1653: MSTORE v1623(0x0) v1651
0x1654: v1654(0x20) = CONST 
0x1656: v1656(0x20) = ADD v1654(0x20) v1623(0x0)
0x1659: MSTORE v1656(0x20) v1622
0x165a: v165a(0x20) = CONST 
0x165c: v165c(0x40) = ADD v165a(0x20) v1656(0x20)
0x165d: v165d(0x0) = CONST 
0x165f: v165f = SHA3 v165d(0x0) v165c(0x40)
0x1660: v1660 = SLOAD v165f
0x1667: JUMP v804(0x865)
----------------------------------

Begin block 0x1668
prev = {}, next = {'0x167c0x1668', '0x16780x1668'}
----------------------------------
function 0x1668(v1668arg0, v1668arg1, v1668arg2)
Block 0x1668
0x1669: v1669(0x0) = CONST 
0x166d: v166d = ADD v1668arg1 v1668arg0
0x1672: v1672 = LT v166d v1668arg1
0x1673: v1673 = ISZERO v1672
0x1674: v1674(0x167c) = CONST 
0x1677: JUMPI v1674(0x167c) v1673
----------------------------------

Begin block 0x16680x87b
prev = {'0x89e'}, next = {'0x16780x87b', '0x167c0x87b'}
----------------------------------
Block 0x16680x87b
0x16690x87b: v87b1669(0x0) = CONST 
0x166d0x87b: v87b166d = ADD v8a4 v8ae
0x16720x87b: v87b1672 = LT v87b166d v8a4
0x16730x87b: v87b1673 = ISZERO v87b1672
0x16740x87b: v87b1674(0x167c) = CONST 
0x16770x87b: JUMPI v87b1674(0x167c) v87b1673
----------------------------------

Begin block 0x16780x87b
prev = {'0x16680x87b'}, next = {}
----------------------------------
Block 0x16780x87b
0x16780x87b: v87b1678(0x0) = CONST 
0x167b0x87b: REVERT v87b1678(0x0) v87b1678(0x0)
----------------------------------

Begin block 0x16780x1668
prev = {'0x1668'}, next = {}
----------------------------------
Block 0x16780x1668
0x16780x1668: v16681678(0x0) = CONST 
0x167b0x1668: REVERT v16681678(0x0) v16681678(0x0)
----------------------------------

Begin block 0x167c0x87b
prev = {'0x16680x87b'}, next = {'0x8be'}
----------------------------------
Block 0x167c0x87b
0x16810x87b: JUMP v889(0x8be)
----------------------------------

Begin block 0x167c0x1668
prev = {'0x1668'}, next = {}
----------------------------------
Block 0x167c0x1668
0x16810x1668: RETURNPRIVATE v1668arg2 v166d
----------------------------------

Begin block 0x1682
prev = {'0x8f7'}, next = {'0x16db', '0x16d7'}
----------------------------------
Block 0x1682
0x1683: v1683(0x0) = CONST 
0x1687: v1687 = SLOAD v1683(0x0)
0x1689: v1689(0x100) = CONST 
0x168c: v168c(0x1) = EXP v1689(0x100) v1683(0x0)
0x168e: v168e = DIV v1687 v168c(0x1)
0x168f: v168f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16a4: v16a4 = AND v168f(0xffffffffffffffffffffffffffffffffffffffff) v168e
0x16a5: v16a5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16ba: v16ba = AND v16a5(0xffffffffffffffffffffffffffffffffffffffff) v16a4
0x16bb: v16bb = CALLER 
0x16bc: v16bc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16d1: v16d1 = AND v16bc(0xffffffffffffffffffffffffffffffffffffffff) v16bb
0x16d2: v16d2 = EQ v16d1 v16ba
0x16d3: v16d3(0x16db) = CONST 
0x16d6: JUMPI v16d3(0x16db) v16d2
----------------------------------

Begin block 0x16d7
prev = {'0x1682'}, next = {}
----------------------------------
Block 0x16d7
0x16d7: v16d7(0x0) = CONST 
0x16da: REVERT v16d7(0x0) v16d7(0x0)
----------------------------------

Begin block 0x16db
prev = {'0x1682'}, next = {'0x923'}
----------------------------------
Block 0x16db
0x16dd: v16dd(0x1) = CONST 
0x16df: v16df(0x0) = CONST 
0x16e1: v16e1(0x100) = CONST 
0x16e4: v16e4(0x1) = EXP v16e1(0x100) v16df(0x0)
0x16e6: v16e6 = SLOAD v16dd(0x1)
0x16e8: v16e8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16fd: v16fd(0xffffffffffffffffffffffffffffffffffffffff) = MUL v16e8(0xffffffffffffffffffffffffffffffffffffffff) v16e4(0x1)
0x16fe: v16fe(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v16fd(0xffffffffffffffffffffffffffffffffffffffff)
0x16ff: v16ff = AND v16fe(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v16e6
0x1702: v1702(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1717: v1717 = AND v1702(0xffffffffffffffffffffffffffffffffffffffff) v913
0x1718: v1718 = MUL v1717 v16e4(0x1)
0x1719: v1719 = OR v1718 v16ff
0x171b: SSTORE v16dd(0x1) v1719
0x171e: JUMP v8e2(0x923)
----------------------------------

Begin block 0x1765
prev = {'0x114', '0x0'}, next = {'0x11f0x0'}
----------------------------------
Block 0x1765
0x1766: v1766(0x11f) = CONST 
0x1767: CALLPRIVATE v1766(0x11f)
----------------------------------

Begin block 0x1768
prev = {'0xe7'}, next = {}
----------------------------------
Block 0x1768
0x1769: v1769(0x124) = CONST 
0x176a: CALLPRIVATE v1769(0x124)
----------------------------------

Begin block 0x176b
prev = {'0xf3'}, next = {}
----------------------------------
Block 0x176b
0x176c: v176c(0x1b4) = CONST 
0x176d: CALLPRIVATE v176c(0x1b4)
----------------------------------

Begin block 0x176e
prev = {'0xfe'}, next = {}
----------------------------------
Block 0x176e
0x176f: v176f(0x227) = CONST 
0x1770: CALLPRIVATE v176f(0x227)
----------------------------------

Begin block 0x1771
prev = {'0x109'}, next = {}
----------------------------------
Block 0x1771
0x1772: v1772(0x252) = CONST 
0x1773: CALLPRIVATE v1772(0x252)
----------------------------------

Begin block 0x1774
prev = {'0x114'}, next = {}
----------------------------------
Block 0x1774
0x1775: v1775(0x2e5) = CONST 
0x1776: CALLPRIVATE v1775(0x2e5)
----------------------------------

Begin block 0x1777
prev = {'0xac'}, next = {}
----------------------------------
Block 0x1777
0x1778: v1778(0x316) = CONST 
0x1779: CALLPRIVATE v1778(0x316)
----------------------------------

Begin block 0x177a
prev = {'0xb7'}, next = {}
----------------------------------
Block 0x177a
0x177b: v177b(0x341) = CONST 
0x177c: CALLPRIVATE v177b(0x341)
----------------------------------

Begin block 0x177d
prev = {'0xc2'}, next = {}
----------------------------------
Block 0x177d
0x177e: v177e(0x3a6) = CONST 
0x177f: CALLPRIVATE v177e(0x3a6)
----------------------------------

Begin block 0x1780
prev = {'0xcd'}, next = {}
----------------------------------
Block 0x1780
0x1781: v1781(0x3bd) = CONST 
0x1782: CALLPRIVATE v1781(0x3bd)
----------------------------------

Begin block 0x1783
prev = {'0xd8'}, next = {}
----------------------------------
Block 0x1783
0x1784: v1784(0x414) = CONST 
0x1785: CALLPRIVATE v1784(0x414)
----------------------------------

Begin block 0x1786
prev = {'0x64'}, next = {}
----------------------------------
Block 0x1786
0x1787: v1787(0x4a4) = CONST 
0x1788: CALLPRIVATE v1787(0x4a4)
----------------------------------

Begin block 0x1789
prev = {'0x70'}, next = {}
----------------------------------
Block 0x1789
0x178a: v178a(0x4fd) = CONST 
0x178b: CALLPRIVATE v178a(0x4fd)
----------------------------------

Begin block 0x178c
prev = {'0x7b'}, next = {}
----------------------------------
Block 0x178c
0x178d: v178d(0x570) = CONST 
0x178e: CALLPRIVATE v178d(0x570)
----------------------------------

Begin block 0x178f
prev = {'0x86'}, next = {}
----------------------------------
Block 0x178f
0x1790: v1790(0x5c9) = CONST 
0x1791: CALLPRIVATE v1790(0x5c9)
----------------------------------

Begin block 0x1792
prev = {'0x91'}, next = {}
----------------------------------
Block 0x1792
0x1793: v1793(0x6d3) = CONST 
0x1794: CALLPRIVATE v1793(0x6d3)
----------------------------------

Begin block 0x1795
prev = {'0x29'}, next = {}
----------------------------------
Block 0x1795
0x1796: v1796(0x72c) = CONST 
0x1797: CALLPRIVATE v1796(0x72c)
----------------------------------

Begin block 0x1798
prev = {'0x34'}, next = {}
----------------------------------
Block 0x1798
0x1799: v1799(0x783) = CONST 
0x179a: CALLPRIVATE v1799(0x783)
----------------------------------

Begin block 0x179b
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x179b
0x179c: v179c(0x7f6) = CONST 
0x179d: CALLPRIVATE v179c(0x7f6)
----------------------------------

Begin block 0x179e
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x179e
0x179f: v179f(0x87b) = CONST 
0x17a0: CALLPRIVATE v179f(0x87b)
----------------------------------

Begin block 0x17a1
prev = {'0x55'}, next = {}
----------------------------------
Block 0x17a1
0x17a2: v17a2(0x8d4) = CONST 
0x17a3: CALLPRIVATE v17a2(0x8d4)
----------------------------------
