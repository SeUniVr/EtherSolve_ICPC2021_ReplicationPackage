
Begin block 0x0
prev = {}, next = {'0x126', '0xb'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0x126) = CONST 
0xa: JUMPI v7(0x126) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0x13ae', '0x3f'}
----------------------------------
Block 0xb
0xb: vb(0x0) = CONST 
0xd: vd = CALLDATALOAD vb(0x0)
0xe: ve(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2d: v2d = DIV vd ve(0x100000000000000000000000000000000000000000000000000000000)
0x2e: v2e(0xffffffff) = CONST 
0x33: v33 = AND v2e(0xffffffff) v2d
0x35: v35(0x1a7a8c0) = CONST 
0x3a: v3a = EQ v35(0x1a7a8c0) v33
0x1382: v1382(0x13ae) = CONST 
0x1383: JUMPI v1382(0x13ae) v3a
----------------------------------

Begin block 0x3f
prev = {'0xb'}, next = {'0x13b1', '0x4a'}
----------------------------------
Block 0x3f
0x40: v40(0x6fdde03) = CONST 
0x45: v45 = EQ v40(0x6fdde03) v33
0x1384: v1384(0x13b1) = CONST 
0x1385: JUMPI v1384(0x13b1) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x13b4', '0x55'}
----------------------------------
Block 0x4a
0x4b: v4b(0x95ea7b3) = CONST 
0x50: v50 = EQ v4b(0x95ea7b3) v33
0x1386: v1386(0x13b4) = CONST 
0x1387: JUMPI v1386(0x13b4) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x13b7', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0x18160ddd) = CONST 
0x5b: v5b = EQ v56(0x18160ddd) v33
0x1388: v1388(0x13b7) = CONST 
0x1389: JUMPI v1388(0x13b7) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x13ba', '0x6b'}
----------------------------------
Block 0x60
0x61: v61(0x229a4978) = CONST 
0x66: v66 = EQ v61(0x229a4978) v33
0x138a: v138a(0x13ba) = CONST 
0x138b: JUMPI v138a(0x13ba) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x76', '0x13bd'}
----------------------------------
Block 0x6b
0x6c: v6c(0x23b872dd) = CONST 
0x71: v71 = EQ v6c(0x23b872dd) v33
0x138c: v138c(0x13bd) = CONST 
0x138d: JUMPI v138c(0x13bd) v71
----------------------------------

Begin block 0x76
prev = {'0x6b'}, next = {'0x81', '0x13c0'}
----------------------------------
Block 0x76
0x77: v77(0x313ce567) = CONST 
0x7c: v7c = EQ v77(0x313ce567) v33
0x138e: v138e(0x13c0) = CONST 
0x138f: JUMPI v138e(0x13c0) v7c
----------------------------------

Begin block 0x81
prev = {'0x76'}, next = {'0x13c3', '0x8c'}
----------------------------------
Block 0x81
0x82: v82(0x4172d080) = CONST 
0x87: v87 = EQ v82(0x4172d080) v33
0x1390: v1390(0x13c3) = CONST 
0x1391: JUMPI v1390(0x13c3) v87
----------------------------------

Begin block 0x8c
prev = {'0x81'}, next = {'0x13c6', '0x97'}
----------------------------------
Block 0x8c
0x8d: v8d(0x4bb278f3) = CONST 
0x92: v92 = EQ v8d(0x4bb278f3) v33
0x1392: v1392(0x13c6) = CONST 
0x1393: JUMPI v1392(0x13c6) v92
----------------------------------

Begin block 0x97
prev = {'0x8c'}, next = {'0x13c9', '0xa2'}
----------------------------------
Block 0x97
0x98: v98(0x54fd4d50) = CONST 
0x9d: v9d = EQ v98(0x54fd4d50) v33
0x1394: v1394(0x13c9) = CONST 
0x1395: JUMPI v1394(0x13c9) v9d
----------------------------------

Begin block 0xa2
prev = {'0x97'}, next = {'0xad', '0x13cc'}
----------------------------------
Block 0xa2
0xa3: va3(0x590e1ae3) = CONST 
0xa8: va8 = EQ va3(0x590e1ae3) v33
0x1396: v1396(0x13cc) = CONST 
0x1397: JUMPI v1396(0x13cc) va8
----------------------------------

Begin block 0xad
prev = {'0xa2'}, next = {'0xb8', '0x13cf'}
----------------------------------
Block 0xad
0xae: vae(0x6f7920fd) = CONST 
0xb3: vb3 = EQ vae(0x6f7920fd) v33
0x1398: v1398(0x13cf) = CONST 
0x1399: JUMPI v1398(0x13cf) vb3
----------------------------------

Begin block 0xb8
prev = {'0xad'}, next = {'0xc3', '0x13d2'}
----------------------------------
Block 0xb8
0xb9: vb9(0x70a08231) = CONST 
0xbe: vbe = EQ vb9(0x70a08231) v33
0x139a: v139a(0x13d2) = CONST 
0x139b: JUMPI v139a(0x13d2) vbe
----------------------------------

Begin block 0xc3
prev = {'0xb8'}, next = {'0xce', '0x13d5'}
----------------------------------
Block 0xc3
0xc4: vc4(0x8d4e4083) = CONST 
0xc9: vc9 = EQ vc4(0x8d4e4083) v33
0x139c: v139c(0x13d5) = CONST 
0x139d: JUMPI v139c(0x13d5) vc9
----------------------------------

Begin block 0xce
prev = {'0xc3'}, next = {'0x13d8', '0xd9'}
----------------------------------
Block 0xce
0xcf: vcf(0x91b43d13) = CONST 
0xd4: vd4 = EQ vcf(0x91b43d13) v33
0x139e: v139e(0x13d8) = CONST 
0x139f: JUMPI v139e(0x13d8) vd4
----------------------------------

Begin block 0xd9
prev = {'0xce'}, next = {'0xe4', '0x13db'}
----------------------------------
Block 0xd9
0xda: vda(0x95d89b41) = CONST 
0xdf: vdf = EQ vda(0x95d89b41) v33
0x13a0: v13a0(0x13db) = CONST 
0x13a1: JUMPI v13a0(0x13db) vdf
----------------------------------

Begin block 0xe4
prev = {'0xd9'}, next = {'0x13de', '0xef'}
----------------------------------
Block 0xe4
0xe5: ve5(0xa81c3bdf) = CONST 
0xea: vea = EQ ve5(0xa81c3bdf) v33
0x13a2: v13a2(0x13de) = CONST 
0x13a3: JUMPI v13a2(0x13de) vea
----------------------------------

Begin block 0xef
prev = {'0xe4'}, next = {'0x13e1', '0xfa'}
----------------------------------
Block 0xef
0xf0: vf0(0xa9059cbb) = CONST 
0xf5: vf5 = EQ vf0(0xa9059cbb) v33
0x13a4: v13a4(0x13e1) = CONST 
0x13a5: JUMPI v13a4(0x13e1) vf5
----------------------------------

Begin block 0xfa
prev = {'0xef'}, next = {'0x13e4', '0x105'}
----------------------------------
Block 0xfa
0xfb: vfb(0xb4427263) = CONST 
0x100: v100 = EQ vfb(0xb4427263) v33
0x13a6: v13a6(0x13e4) = CONST 
0x13a7: JUMPI v13a6(0x13e4) v100
----------------------------------

Begin block 0x105
prev = {'0xfa'}, next = {'0x13e7', '0x110'}
----------------------------------
Block 0x105
0x106: v106(0xc039daf6) = CONST 
0x10b: v10b = EQ v106(0xc039daf6) v33
0x13a8: v13a8(0x13e7) = CONST 
0x13a9: JUMPI v13a8(0x13e7) v10b
----------------------------------

Begin block 0x110
prev = {'0x105'}, next = {'0x13ea', '0x11b'}
----------------------------------
Block 0x110
0x111: v111(0xd648a647) = CONST 
0x116: v116 = EQ v111(0xd648a647) v33
0x13aa: v13aa(0x13ea) = CONST 
0x13ab: JUMPI v13aa(0x13ea) v116
----------------------------------

Begin block 0x11b
prev = {'0x110'}, next = {'0x13ed', '0x126'}
----------------------------------
Block 0x11b
0x11c: v11c(0xdd62ed3e) = CONST 
0x121: v121 = EQ v11c(0xdd62ed3e) v33
0x13ac: v13ac(0x13ed) = CONST 
0x13ad: JUMPI v13ac(0x13ed) v121
----------------------------------

Begin block 0x126
prev = {'0x0', '0x11b'}, next = {}
----------------------------------
Block 0x126
0x127: v127(0x0) = CONST 
0x12a: REVERT v127(0x0) v127(0x0)
----------------------------------

Begin block 0x12b
prev = {}, next = {'0x136', '0x132'}
----------------------------------
function batFundDeposit()()
Block 0x12b
0x12c: v12c = CALLVALUE 
0x12d: v12d = ISZERO v12c
0x12e: v12e(0x136) = CONST 
0x131: JUMPI v12e(0x136) v12d
----------------------------------

Begin block 0x132
prev = {'0x12b'}, next = {}
----------------------------------
Block 0x132
0x132: v132(0x0) = CONST 
0x135: REVERT v132(0x0) v132(0x0)
----------------------------------

Begin block 0x136
prev = {'0x12b'}, next = {'0x711'}
----------------------------------
Block 0x136
0x137: v137(0x13e) = CONST 
0x13a: v13a(0x711) = CONST 
0x13d: JUMP v13a(0x711)
----------------------------------

Begin block 0x13e
prev = {'0x711'}, next = {}
----------------------------------
Block 0x13e
0x13f: v13f(0x40) = CONST 
0x141: v141 = MLOAD v13f(0x40)
0x144: v144(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x159: v159 = AND v144(0xffffffffffffffffffffffffffffffffffffffff) v734
0x15a: v15a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16f: v16f = AND v15a(0xffffffffffffffffffffffffffffffffffffffff) v159
0x171: MSTORE v141 v16f
0x172: v172(0x20) = CONST 
0x174: v174 = ADD v172(0x20) v141
0x178: v178(0x40) = CONST 
0x17a: v17a = MLOAD v178(0x40)
0x17d: v17d = SUB v174 v17a
0x17f: RETURN v17a v17d
----------------------------------

Begin block 0x180
prev = {}, next = {'0x187', '0x18b'}
----------------------------------
function name()()
Block 0x180
0x181: v181 = CALLVALUE 
0x182: v182 = ISZERO v181
0x183: v183(0x18b) = CONST 
0x186: JUMPI v183(0x18b) v182
----------------------------------

Begin block 0x187
prev = {'0x180'}, next = {}
----------------------------------
Block 0x187
0x187: v187(0x0) = CONST 
0x18a: REVERT v187(0x0) v187(0x0)
----------------------------------

Begin block 0x18b
prev = {'0x180'}, next = {'0x737'}
----------------------------------
Block 0x18b
0x18c: v18c(0x193) = CONST 
0x18f: v18f(0x737) = CONST 
0x192: JUMP v18f(0x737)
----------------------------------

Begin block 0x193
prev = {'0x737'}, next = {'0x1b8'}
----------------------------------
Block 0x193
0x194: v194(0x40) = CONST 
0x196: v196 = MLOAD v194(0x40)
0x199: v199(0x20) = CONST 
0x19b: v19b = ADD v199(0x20) v196
0x19e: v19e = SUB v19b v196
0x1a0: MSTORE v196 v19e
0x1a4: v1a4 = MLOAD v73b
0x1a6: MSTORE v19b v1a4
0x1a7: v1a7(0x20) = CONST 
0x1a9: v1a9 = ADD v1a7(0x20) v19b
0x1ad: v1ad = MLOAD v73b
0x1af: v1af(0x20) = CONST 
0x1b1: v1b1 = ADD v1af(0x20) v73b
0x1b6: v1b6(0x0) = CONST 
----------------------------------

Begin block 0x1b8
prev = {'0x1c9', '0x193'}, next = {'0x1d4', '0x1c1'}
----------------------------------
Block 0x1b8
0x1b8_0x0: v1b8_0 = PHI v1b6(0x0) v1cd
0x1bb: v1bb = LT v1b8_0 v1ad
0x1bc: v1bc = ISZERO v1bb
0x1bd: v1bd(0x1d4) = CONST 
0x1c0: JUMPI v1bd(0x1d4) v1bc
----------------------------------

Begin block 0x1c1
prev = {'0x1b8'}, next = {'0x1c9'}
----------------------------------
Block 0x1c1
0x1c1_0x0: v1c1_0 = PHI v1b6(0x0) v1cd
0x1c3: v1c3 = ADD v1b1 v1c1_0
0x1c4: v1c4 = MLOAD v1c3
0x1c7: v1c7 = ADD v1a9 v1c1_0
0x1c8: MSTORE v1c7 v1c4
----------------------------------

Begin block 0x1c9
prev = {'0x1c1'}, next = {'0x1b8'}
----------------------------------
Block 0x1c9
0x1c9_0x0: v1c9_0 = PHI v1b6(0x0) v1cd
0x1ca: v1ca(0x20) = CONST 
0x1cd: v1cd = ADD v1c9_0 v1ca(0x20)
0x1d0: v1d0(0x1b8) = CONST 
0x1d3: JUMP v1d0(0x1b8)
----------------------------------

Begin block 0x1d4
prev = {'0x1b8'}, next = {'0x201', '0x1e8'}
----------------------------------
Block 0x1d4
0x1dd: v1dd = ADD v1ad v1a9
0x1df: v1df(0x1f) = CONST 
0x1e1: v1e1 = AND v1df(0x1f) v1ad
0x1e3: v1e3 = ISZERO v1e1
0x1e4: v1e4(0x201) = CONST 
0x1e7: JUMPI v1e4(0x201) v1e3
----------------------------------

Begin block 0x1e8
prev = {'0x1d4'}, next = {'0x201'}
----------------------------------
Block 0x1e8
0x1ea: v1ea = SUB v1dd v1e1
0x1ec: v1ec = MLOAD v1ea
0x1ed: v1ed(0x1) = CONST 
0x1f0: v1f0(0x20) = CONST 
0x1f2: v1f2 = SUB v1f0(0x20) v1e1
0x1f3: v1f3(0x100) = CONST 
0x1f6: v1f6 = EXP v1f3(0x100) v1f2
0x1f7: v1f7 = SUB v1f6 v1ed(0x1)
0x1f8: v1f8 = NOT v1f7
0x1f9: v1f9 = AND v1f8 v1ec
0x1fb: MSTORE v1ea v1f9
0x1fc: v1fc(0x20) = CONST 
0x1fe: v1fe = ADD v1fc(0x20) v1ea
----------------------------------

Begin block 0x201
prev = {'0x1d4', '0x1e8'}, next = {}
----------------------------------
Block 0x201
0x201_0x1: v201_1 = PHI v1dd v1fe
0x207: v207(0x40) = CONST 
0x209: v209 = MLOAD v207(0x40)
0x20c: v20c = SUB v201_1 v209
0x20e: RETURN v209 v20c
----------------------------------

Begin block 0x20f
prev = {}, next = {'0x21a', '0x216'}
----------------------------------
function approve(address,uint256)()
Block 0x20f
0x210: v210 = CALLVALUE 
0x211: v211 = ISZERO v210
0x212: v212(0x21a) = CONST 
0x215: JUMPI v212(0x21a) v211
----------------------------------

Begin block 0x216
prev = {'0x20f'}, next = {}
----------------------------------
Block 0x216
0x216: v216(0x0) = CONST 
0x219: REVERT v216(0x0) v216(0x0)
----------------------------------

Begin block 0x21a
prev = {'0x20f'}, next = {'0x770'}
----------------------------------
Block 0x21a
0x21b: v21b(0x24f) = CONST 
0x21e: v21e(0x4) = CONST 
0x222: v222 = CALLDATALOAD v21e(0x4)
0x223: v223(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x238: v238 = AND v223(0xffffffffffffffffffffffffffffffffffffffff) v222
0x23a: v23a(0x20) = CONST 
0x23c: v23c(0x24) = ADD v23a(0x20) v21e(0x4)
0x241: v241 = CALLDATALOAD v23c(0x24)
0x243: v243(0x20) = CONST 
0x245: v245(0x44) = ADD v243(0x20) v23c(0x24)
0x24b: v24b(0x770) = CONST 
0x24e: JUMP v24b(0x770)
----------------------------------

Begin block 0x24f
prev = {'0x85d'}, next = {}
----------------------------------
Block 0x24f
0x250: v250(0x40) = CONST 
0x252: v252 = MLOAD v250(0x40)
0x255: v255 = ISZERO v859(0x1)
0x256: v256 = ISZERO v255
0x257: v257 = ISZERO v256
0x258: v258 = ISZERO v257
0x25a: MSTORE v252 v258
0x25b: v25b(0x20) = CONST 
0x25d: v25d = ADD v25b(0x20) v252
0x261: v261(0x40) = CONST 
0x263: v263 = MLOAD v261(0x40)
0x266: v266 = SUB v25d v263
0x268: RETURN v263 v266
----------------------------------

Begin block 0x269
prev = {}, next = {'0x274', '0x270'}
----------------------------------
function totalSupply()()
Block 0x269
0x26a: v26a = CALLVALUE 
0x26b: v26b = ISZERO v26a
0x26c: v26c(0x274) = CONST 
0x26f: JUMPI v26c(0x274) v26b
----------------------------------

Begin block 0x270
prev = {'0x269'}, next = {}
----------------------------------
Block 0x270
0x270: v270(0x0) = CONST 
0x273: REVERT v270(0x0) v270(0x0)
----------------------------------

Begin block 0x274
prev = {'0x269'}, next = {'0x863'}
----------------------------------
Block 0x274
0x275: v275(0x27c) = CONST 
0x278: v278(0x863) = CONST 
0x27b: JUMP v278(0x863)
----------------------------------

Begin block 0x27c
prev = {'0x863'}, next = {}
----------------------------------
Block 0x27c
0x27d: v27d(0x40) = CONST 
0x27f: v27f = MLOAD v27d(0x40)
0x283: MSTORE v27f v866
0x284: v284(0x20) = CONST 
0x286: v286 = ADD v284(0x20) v27f
0x28a: v28a(0x40) = CONST 
0x28c: v28c = MLOAD v28a(0x40)
0x28f: v28f = SUB v286 v28c
0x291: RETURN v28c v28f
----------------------------------

Begin block 0x292
prev = {}, next = {'0x299', '0x29d'}
----------------------------------
function batFund()()
Block 0x292
0x293: v293 = CALLVALUE 
0x294: v294 = ISZERO v293
0x295: v295(0x29d) = CONST 
0x298: JUMPI v295(0x29d) v294
----------------------------------

Begin block 0x299
prev = {'0x292'}, next = {}
----------------------------------
Block 0x299
0x299: v299(0x0) = CONST 
0x29c: REVERT v299(0x0) v299(0x0)
----------------------------------

Begin block 0x29d
prev = {'0x292'}, next = {'0x869'}
----------------------------------
Block 0x29d
0x29e: v29e(0x2a5) = CONST 
0x2a1: v2a1(0x869) = CONST 
0x2a4: JUMP v2a1(0x869)
----------------------------------

Begin block 0x2a5
prev = {'0x869'}, next = {}
----------------------------------
Block 0x2a5
0x2a6: v2a6(0x40) = CONST 
0x2a8: v2a8 = MLOAD v2a6(0x40)
0x2ac: MSTORE v2a8 v874(0x19d971e4fe8401e74000000)
0x2ad: v2ad(0x20) = CONST 
0x2af: v2af = ADD v2ad(0x20) v2a8
0x2b3: v2b3(0x40) = CONST 
0x2b5: v2b5 = MLOAD v2b3(0x40)
0x2b8: v2b8 = SUB v2af v2b5
0x2ba: RETURN v2b5 v2b8
----------------------------------

Begin block 0x2bb
prev = {}, next = {'0x2c6', '0x2c2'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x2bb
0x2bc: v2bc = CALLVALUE 
0x2bd: v2bd = ISZERO v2bc
0x2be: v2be(0x2c6) = CONST 
0x2c1: JUMPI v2be(0x2c6) v2bd
----------------------------------

Begin block 0x2c2
prev = {'0x2bb'}, next = {}
----------------------------------
Block 0x2c2
0x2c2: v2c2(0x0) = CONST 
0x2c5: REVERT v2c2(0x0) v2c2(0x0)
----------------------------------

Begin block 0x2c6
prev = {'0x2bb'}, next = {'0x877'}
----------------------------------
Block 0x2c6
0x2c7: v2c7(0x31a) = CONST 
0x2ca: v2ca(0x4) = CONST 
0x2ce: v2ce = CALLDATALOAD v2ca(0x4)
0x2cf: v2cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2e4: v2e4 = AND v2cf(0xffffffffffffffffffffffffffffffffffffffff) v2ce
0x2e6: v2e6(0x20) = CONST 
0x2e8: v2e8(0x24) = ADD v2e6(0x20) v2ca(0x4)
0x2ed: v2ed = CALLDATALOAD v2e8(0x24)
0x2ee: v2ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x303: v303 = AND v2ee(0xffffffffffffffffffffffffffffffffffffffff) v2ed
0x305: v305(0x20) = CONST 
0x307: v307(0x44) = ADD v305(0x20) v2e8(0x24)
0x30c: v30c = CALLDATALOAD v307(0x44)
0x30e: v30e(0x20) = CONST 
0x310: v310(0x64) = ADD v30e(0x20) v307(0x44)
0x316: v316(0x877) = CONST 
0x319: JUMP v316(0x877)
----------------------------------

Begin block 0x31a
prev = {'0xaf1'}, next = {}
----------------------------------
Block 0x31a
0x31a_0x0: v31a_0 = PHI vadf(0x1) vae8(0x0)
0x31b: v31b(0x40) = CONST 
0x31d: v31d = MLOAD v31b(0x40)
0x320: v320 = ISZERO v31a_0
0x321: v321 = ISZERO v320
0x322: v322 = ISZERO v321
0x323: v323 = ISZERO v322
0x325: MSTORE v31d v323
0x326: v326(0x20) = CONST 
0x328: v328 = ADD v326(0x20) v31d
0x32c: v32c(0x40) = CONST 
0x32e: v32e = MLOAD v32c(0x40)
0x331: v331 = SUB v328 v32e
0x333: RETURN v32e v331
----------------------------------

Begin block 0x334
prev = {}, next = {'0x33b', '0x33f'}
----------------------------------
function decimals()()
Block 0x334
0x335: v335 = CALLVALUE 
0x336: v336 = ISZERO v335
0x337: v337(0x33f) = CONST 
0x33a: JUMPI v337(0x33f) v336
----------------------------------

Begin block 0x33b
prev = {'0x334'}, next = {}
----------------------------------
Block 0x33b
0x33b: v33b(0x0) = CONST 
0x33e: REVERT v33b(0x0) v33b(0x0)
----------------------------------

Begin block 0x33f
prev = {'0x334'}, next = {'0xaf8'}
----------------------------------
Block 0x33f
0x340: v340(0x347) = CONST 
0x343: v343(0xaf8) = CONST 
0x346: JUMP v343(0xaf8)
----------------------------------

Begin block 0x347
prev = {'0xaf8'}, next = {}
----------------------------------
Block 0x347
0x348: v348(0x40) = CONST 
0x34a: v34a = MLOAD v348(0x40)
0x34e: MSTORE v34a vaf9(0x12)
0x34f: v34f(0x20) = CONST 
0x351: v351 = ADD v34f(0x20) v34a
0x355: v355(0x40) = CONST 
0x357: v357 = MLOAD v355(0x40)
0x35a: v35a = SUB v351 v357
0x35c: RETURN v357 v35a
----------------------------------

Begin block 0x35d
prev = {}, next = {'0x364', '0x368'}
----------------------------------
function tokenExchangeRate()()
Block 0x35d
0x35e: v35e = CALLVALUE 
0x35f: v35f = ISZERO v35e
0x360: v360(0x368) = CONST 
0x363: JUMPI v360(0x368) v35f
----------------------------------

Begin block 0x364
prev = {'0x35d'}, next = {}
----------------------------------
Block 0x364
0x364: v364(0x0) = CONST 
0x367: REVERT v364(0x0) v364(0x0)
----------------------------------

Begin block 0x368
prev = {'0x35d'}, next = {'0xafd'}
----------------------------------
Block 0x368
0x369: v369(0x370) = CONST 
0x36c: v36c(0xafd) = CONST 
0x36f: JUMP v36c(0xafd)
----------------------------------

Begin block 0x370
prev = {'0xafd'}, next = {}
----------------------------------
Block 0x370
0x371: v371(0x40) = CONST 
0x373: v373 = MLOAD v371(0x40)
0x377: MSTORE v373 vafe(0x1900)
0x378: v378(0x20) = CONST 
0x37a: v37a = ADD v378(0x20) v373
0x37e: v37e(0x40) = CONST 
0x380: v380 = MLOAD v37e(0x40)
0x383: v383 = SUB v37a v380
0x385: RETURN v380 v383
----------------------------------

Begin block 0x386
prev = {}, next = {'0x391', '0x38d'}
----------------------------------
function finalize()()
Block 0x386
0x387: v387 = CALLVALUE 
0x388: v388 = ISZERO v387
0x389: v389(0x391) = CONST 
0x38c: JUMPI v389(0x391) v388
----------------------------------

Begin block 0x38d
prev = {'0x386'}, next = {}
----------------------------------
Block 0x38d
0x38d: v38d(0x0) = CONST 
0x390: REVERT v38d(0x0) v38d(0x0)
----------------------------------

Begin block 0x391
prev = {'0x386'}, next = {'0xb03'}
----------------------------------
Block 0x391
0x392: v392(0x399) = CONST 
0x395: v395(0xb03) = CONST 
0x398: JUMP v395(0xb03)
----------------------------------

Begin block 0x399
prev = {'0xc4f'}, next = {}
----------------------------------
Block 0x399
0x39a: STOP 
----------------------------------

Begin block 0x39b
prev = {}, next = {'0x3a2', '0x3a6'}
----------------------------------
function version()()
Block 0x39b
0x39c: v39c = CALLVALUE 
0x39d: v39d = ISZERO v39c
0x39e: v39e(0x3a6) = CONST 
0x3a1: JUMPI v39e(0x3a6) v39d
----------------------------------

Begin block 0x3a2
prev = {'0x39b'}, next = {}
----------------------------------
Block 0x3a2
0x3a2: v3a2(0x0) = CONST 
0x3a5: REVERT v3a2(0x0) v3a2(0x0)
----------------------------------

Begin block 0x3a6
prev = {'0x39b'}, next = {'0xc51'}
----------------------------------
Block 0x3a6
0x3a7: v3a7(0x3ae) = CONST 
0x3aa: v3aa(0xc51) = CONST 
0x3ad: JUMP v3aa(0xc51)
----------------------------------

Begin block 0x3ae
prev = {'0xce7'}, next = {'0x3d3'}
----------------------------------
Block 0x3ae
0x3af: v3af(0x40) = CONST 
0x3b1: v3b1 = MLOAD v3af(0x40)
0x3b4: v3b4(0x20) = CONST 
0x3b6: v3b6 = ADD v3b4(0x20) v3b1
0x3b9: v3b9 = SUB v3b6 v3b1
0x3bb: MSTORE v3b1 v3b9
0x3bf: v3bf = MLOAD vc76
0x3c1: MSTORE v3b6 v3bf
0x3c2: v3c2(0x20) = CONST 
0x3c4: v3c4 = ADD v3c2(0x20) v3b6
0x3c8: v3c8 = MLOAD vc76
0x3ca: v3ca(0x20) = CONST 
0x3cc: v3cc = ADD v3ca(0x20) vc76
0x3d1: v3d1(0x0) = CONST 
----------------------------------

Begin block 0x3d3
prev = {'0x3e4', '0x3ae'}, next = {'0x3dc', '0x3ef'}
----------------------------------
Block 0x3d3
0x3d3_0x0: v3d3_0 = PHI v3d1(0x0) v3e8
0x3d6: v3d6 = LT v3d3_0 v3c8
0x3d7: v3d7 = ISZERO v3d6
0x3d8: v3d8(0x3ef) = CONST 
0x3db: JUMPI v3d8(0x3ef) v3d7
----------------------------------

Begin block 0x3dc
prev = {'0x3d3'}, next = {'0x3e4'}
----------------------------------
Block 0x3dc
0x3dc_0x0: v3dc_0 = PHI v3d1(0x0) v3e8
0x3de: v3de = ADD v3cc v3dc_0
0x3df: v3df = MLOAD v3de
0x3e2: v3e2 = ADD v3c4 v3dc_0
0x3e3: MSTORE v3e2 v3df
----------------------------------

Begin block 0x3e4
prev = {'0x3dc'}, next = {'0x3d3'}
----------------------------------
Block 0x3e4
0x3e4_0x0: v3e4_0 = PHI v3d1(0x0) v3e8
0x3e5: v3e5(0x20) = CONST 
0x3e8: v3e8 = ADD v3e4_0 v3e5(0x20)
0x3eb: v3eb(0x3d3) = CONST 
0x3ee: JUMP v3eb(0x3d3)
----------------------------------

Begin block 0x3ef
prev = {'0x3d3'}, next = {'0x403', '0x41c'}
----------------------------------
Block 0x3ef
0x3f8: v3f8 = ADD v3c8 v3c4
0x3fa: v3fa(0x1f) = CONST 
0x3fc: v3fc = AND v3fa(0x1f) v3c8
0x3fe: v3fe = ISZERO v3fc
0x3ff: v3ff(0x41c) = CONST 
0x402: JUMPI v3ff(0x41c) v3fe
----------------------------------

Begin block 0x403
prev = {'0x3ef'}, next = {'0x41c'}
----------------------------------
Block 0x403
0x405: v405 = SUB v3f8 v3fc
0x407: v407 = MLOAD v405
0x408: v408(0x1) = CONST 
0x40b: v40b(0x20) = CONST 
0x40d: v40d = SUB v40b(0x20) v3fc
0x40e: v40e(0x100) = CONST 
0x411: v411 = EXP v40e(0x100) v40d
0x412: v412 = SUB v411 v408(0x1)
0x413: v413 = NOT v412
0x414: v414 = AND v413 v407
0x416: MSTORE v405 v414
0x417: v417(0x20) = CONST 
0x419: v419 = ADD v417(0x20) v405
----------------------------------

Begin block 0x41c
prev = {'0x403', '0x3ef'}, next = {}
----------------------------------
Block 0x41c
0x41c_0x1: v41c_1 = PHI v3f8 v419
0x422: v422(0x40) = CONST 
0x424: v424 = MLOAD v422(0x40)
0x427: v427 = SUB v41c_1 v424
0x429: RETURN v424 v427
----------------------------------

Begin block 0x42a
prev = {}, next = {'0x435', '0x431'}
----------------------------------
function refund()()
Block 0x42a
0x42b: v42b = CALLVALUE 
0x42c: v42c = ISZERO v42b
0x42d: v42d(0x435) = CONST 
0x430: JUMPI v42d(0x435) v42c
----------------------------------

Begin block 0x431
prev = {'0x42a'}, next = {}
----------------------------------
Block 0x431
0x431: v431(0x0) = CONST 
0x434: REVERT v431(0x0) v431(0x0)
----------------------------------

Begin block 0x435
prev = {'0x42a'}, next = {'0xcef'}
----------------------------------
Block 0x435
0x436: v436(0x43d) = CONST 
0x439: v439(0xcef) = CONST 
0x43c: JUMP v439(0xcef)
----------------------------------

Begin block 0x43d
prev = {'0xed7'}, next = {}
----------------------------------
Block 0x43d
0x43e: STOP 
----------------------------------

Begin block 0x43f
prev = {}, next = {'0x446', '0x44a'}
----------------------------------
function tokenCreationCap()()
Block 0x43f
0x440: v440 = CALLVALUE 
0x441: v441 = ISZERO v440
0x442: v442(0x44a) = CONST 
0x445: JUMPI v442(0x44a) v441
----------------------------------

Begin block 0x446
prev = {'0x43f'}, next = {}
----------------------------------
Block 0x446
0x446: v446(0x0) = CONST 
0x449: REVERT v446(0x0) v446(0x0)
----------------------------------

Begin block 0x44a
prev = {'0x43f'}, next = {'0xedb'}
----------------------------------
Block 0x44a
0x44b: v44b(0x452) = CONST 
0x44e: v44e(0xedb) = CONST 
0x451: JUMP v44e(0xedb)
----------------------------------

Begin block 0x452
prev = {'0xedb'}, next = {}
----------------------------------
Block 0x452
0x453: v453(0x40) = CONST 
0x455: v455 = MLOAD v453(0x40)
0x459: MSTORE v455 vee6(0x4d8c55aefb8c05b5c000000)
0x45a: v45a(0x20) = CONST 
0x45c: v45c = ADD v45a(0x20) v455
0x460: v460(0x40) = CONST 
0x462: v462 = MLOAD v460(0x40)
0x465: v465 = SUB v45c v462
0x467: RETURN v462 v465
----------------------------------

Begin block 0x468
prev = {}, next = {'0x473', '0x46f'}
----------------------------------
function balanceOf(address)()
Block 0x468
0x469: v469 = CALLVALUE 
0x46a: v46a = ISZERO v469
0x46b: v46b(0x473) = CONST 
0x46e: JUMPI v46b(0x473) v46a
----------------------------------

Begin block 0x46f
prev = {'0x468'}, next = {}
----------------------------------
Block 0x46f
0x46f: v46f(0x0) = CONST 
0x472: REVERT v46f(0x0) v46f(0x0)
----------------------------------

Begin block 0x473
prev = {'0x468'}, next = {'0xee9'}
----------------------------------
Block 0x473
0x474: v474(0x49f) = CONST 
0x477: v477(0x4) = CONST 
0x47b: v47b = CALLDATALOAD v477(0x4)
0x47c: v47c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x491: v491 = AND v47c(0xffffffffffffffffffffffffffffffffffffffff) v47b
0x493: v493(0x20) = CONST 
0x495: v495(0x24) = ADD v493(0x20) v477(0x4)
0x49b: v49b(0xee9) = CONST 
0x49e: JUMP v49b(0xee9)
----------------------------------

Begin block 0x49f
prev = {'0xf2e'}, next = {}
----------------------------------
Block 0x49f
0x4a0: v4a0(0x40) = CONST 
0x4a2: v4a2 = MLOAD v4a0(0x40)
0x4a6: MSTORE v4a2 vf2b
0x4a7: v4a7(0x20) = CONST 
0x4a9: v4a9 = ADD v4a7(0x20) v4a2
0x4ad: v4ad(0x40) = CONST 
0x4af: v4af = MLOAD v4ad(0x40)
0x4b2: v4b2 = SUB v4a9 v4af
0x4b4: RETURN v4af v4b2
----------------------------------

Begin block 0x4b5
prev = {}, next = {'0x4bc', '0x4c0'}
----------------------------------
function isFinalized()()
Block 0x4b5
0x4b6: v4b6 = CALLVALUE 
0x4b7: v4b7 = ISZERO v4b6
0x4b8: v4b8(0x4c0) = CONST 
0x4bb: JUMPI v4b8(0x4c0) v4b7
----------------------------------

Begin block 0x4bc
prev = {'0x4b5'}, next = {}
----------------------------------
Block 0x4bc
0x4bc: v4bc(0x0) = CONST 
0x4bf: REVERT v4bc(0x0) v4bc(0x0)
----------------------------------

Begin block 0x4c0
prev = {'0x4b5'}, next = {'0xf33'}
----------------------------------
Block 0x4c0
0x4c1: v4c1(0x4c8) = CONST 
0x4c4: v4c4(0xf33) = CONST 
0x4c7: JUMP v4c4(0xf33)
----------------------------------

Begin block 0x4c8
prev = {'0xf33'}, next = {}
----------------------------------
Block 0x4c8
0x4c9: v4c9(0x40) = CONST 
0x4cb: v4cb = MLOAD v4c9(0x40)
0x4ce: v4ce = ISZERO vf43
0x4cf: v4cf = ISZERO v4ce
0x4d0: v4d0 = ISZERO v4cf
0x4d1: v4d1 = ISZERO v4d0
0x4d3: MSTORE v4cb v4d1
0x4d4: v4d4(0x20) = CONST 
0x4d6: v4d6 = ADD v4d4(0x20) v4cb
0x4da: v4da(0x40) = CONST 
0x4dc: v4dc = MLOAD v4da(0x40)
0x4df: v4df = SUB v4d6 v4dc
0x4e1: RETURN v4dc v4df
----------------------------------

Begin block 0x4e2
prev = {}, next = {'0x4ed', '0x4e9'}
----------------------------------
function fundingEndBlock()()
Block 0x4e2
0x4e3: v4e3 = CALLVALUE 
0x4e4: v4e4 = ISZERO v4e3
0x4e5: v4e5(0x4ed) = CONST 
0x4e8: JUMPI v4e5(0x4ed) v4e4
----------------------------------

Begin block 0x4e9
prev = {'0x4e2'}, next = {}
----------------------------------
Block 0x4e9
0x4e9: v4e9(0x0) = CONST 
0x4ec: REVERT v4e9(0x0) v4e9(0x0)
----------------------------------

Begin block 0x4ed
prev = {'0x4e2'}, next = {'0xf46'}
----------------------------------
Block 0x4ed
0x4ee: v4ee(0x4f5) = CONST 
0x4f1: v4f1(0xf46) = CONST 
0x4f4: JUMP v4f1(0xf46)
----------------------------------

Begin block 0x4f5
prev = {'0xf46'}, next = {}
----------------------------------
Block 0x4f5
0x4f6: v4f6(0x40) = CONST 
0x4f8: v4f8 = MLOAD v4f6(0x40)
0x4fc: MSTORE v4f8 vf49
0x4fd: v4fd(0x20) = CONST 
0x4ff: v4ff = ADD v4fd(0x20) v4f8
0x503: v503(0x40) = CONST 
0x505: v505 = MLOAD v503(0x40)
0x508: v508 = SUB v4ff v505
0x50a: RETURN v505 v508
----------------------------------

Begin block 0x50b
prev = {}, next = {'0x512', '0x516'}
----------------------------------
function symbol()()
Block 0x50b
0x50c: v50c = CALLVALUE 
0x50d: v50d = ISZERO v50c
0x50e: v50e(0x516) = CONST 
0x511: JUMPI v50e(0x516) v50d
----------------------------------

Begin block 0x512
prev = {'0x50b'}, next = {}
----------------------------------
Block 0x512
0x512: v512(0x0) = CONST 
0x515: REVERT v512(0x0) v512(0x0)
----------------------------------

Begin block 0x516
prev = {'0x50b'}, next = {'0xf4c'}
----------------------------------
Block 0x516
0x517: v517(0x51e) = CONST 
0x51a: v51a(0xf4c) = CONST 
0x51d: JUMP v51a(0xf4c)
----------------------------------

Begin block 0x51e
prev = {'0xf4c'}, next = {'0x543'}
----------------------------------
Block 0x51e
0x51f: v51f(0x40) = CONST 
0x521: v521 = MLOAD v51f(0x40)
0x524: v524(0x20) = CONST 
0x526: v526 = ADD v524(0x20) v521
0x529: v529 = SUB v526 v521
0x52b: MSTORE v521 v529
0x52f: v52f = MLOAD vf50
0x531: MSTORE v526 v52f
0x532: v532(0x20) = CONST 
0x534: v534 = ADD v532(0x20) v526
0x538: v538 = MLOAD vf50
0x53a: v53a(0x20) = CONST 
0x53c: v53c = ADD v53a(0x20) vf50
0x541: v541(0x0) = CONST 
----------------------------------

Begin block 0x543
prev = {'0x51e', '0x554'}, next = {'0x55f', '0x54c'}
----------------------------------
Block 0x543
0x543_0x0: v543_0 = PHI v541(0x0) v558
0x546: v546 = LT v543_0 v538
0x547: v547 = ISZERO v546
0x548: v548(0x55f) = CONST 
0x54b: JUMPI v548(0x55f) v547
----------------------------------

Begin block 0x54c
prev = {'0x543'}, next = {'0x554'}
----------------------------------
Block 0x54c
0x54c_0x0: v54c_0 = PHI v541(0x0) v558
0x54e: v54e = ADD v53c v54c_0
0x54f: v54f = MLOAD v54e
0x552: v552 = ADD v534 v54c_0
0x553: MSTORE v552 v54f
----------------------------------

Begin block 0x554
prev = {'0x54c'}, next = {'0x543'}
----------------------------------
Block 0x554
0x554_0x0: v554_0 = PHI v541(0x0) v558
0x555: v555(0x20) = CONST 
0x558: v558 = ADD v554_0 v555(0x20)
0x55b: v55b(0x543) = CONST 
0x55e: JUMP v55b(0x543)
----------------------------------

Begin block 0x55f
prev = {'0x543'}, next = {'0x58c', '0x573'}
----------------------------------
Block 0x55f
0x568: v568 = ADD v538 v534
0x56a: v56a(0x1f) = CONST 
0x56c: v56c = AND v56a(0x1f) v538
0x56e: v56e = ISZERO v56c
0x56f: v56f(0x58c) = CONST 
0x572: JUMPI v56f(0x58c) v56e
----------------------------------

Begin block 0x573
prev = {'0x55f'}, next = {'0x58c'}
----------------------------------
Block 0x573
0x575: v575 = SUB v568 v56c
0x577: v577 = MLOAD v575
0x578: v578(0x1) = CONST 
0x57b: v57b(0x20) = CONST 
0x57d: v57d = SUB v57b(0x20) v56c
0x57e: v57e(0x100) = CONST 
0x581: v581 = EXP v57e(0x100) v57d
0x582: v582 = SUB v581 v578(0x1)
0x583: v583 = NOT v582
0x584: v584 = AND v583 v577
0x586: MSTORE v575 v584
0x587: v587(0x20) = CONST 
0x589: v589 = ADD v587(0x20) v575
----------------------------------

Begin block 0x58c
prev = {'0x55f', '0x573'}, next = {}
----------------------------------
Block 0x58c
0x58c_0x1: v58c_1 = PHI v568 v589
0x592: v592(0x40) = CONST 
0x594: v594 = MLOAD v592(0x40)
0x597: v597 = SUB v58c_1 v594
0x599: RETURN v594 v597
----------------------------------

Begin block 0x59a
prev = {}, next = {'0x5a1', '0x5a5'}
----------------------------------
function ethFundDeposit()()
Block 0x59a
0x59b: v59b = CALLVALUE 
0x59c: v59c = ISZERO v59b
0x59d: v59d(0x5a5) = CONST 
0x5a0: JUMPI v59d(0x5a5) v59c
----------------------------------

Begin block 0x5a1
prev = {'0x59a'}, next = {}
----------------------------------
Block 0x5a1
0x5a1: v5a1(0x0) = CONST 
0x5a4: REVERT v5a1(0x0) v5a1(0x0)
----------------------------------

Begin block 0x5a5
prev = {'0x59a'}, next = {'0xf85'}
----------------------------------
Block 0x5a5
0x5a6: v5a6(0x5ad) = CONST 
0x5a9: v5a9(0xf85) = CONST 
0x5ac: JUMP v5a9(0xf85)
----------------------------------

Begin block 0x5ad
prev = {'0xf85'}, next = {}
----------------------------------
Block 0x5ad
0x5ae: v5ae(0x40) = CONST 
0x5b0: v5b0 = MLOAD v5ae(0x40)
0x5b3: v5b3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5c8: v5c8 = AND v5b3(0xffffffffffffffffffffffffffffffffffffffff) vfa8
0x5c9: v5c9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5de: v5de = AND v5c9(0xffffffffffffffffffffffffffffffffffffffff) v5c8
0x5e0: MSTORE v5b0 v5de
0x5e1: v5e1(0x20) = CONST 
0x5e3: v5e3 = ADD v5e1(0x20) v5b0
0x5e7: v5e7(0x40) = CONST 
0x5e9: v5e9 = MLOAD v5e7(0x40)
0x5ec: v5ec = SUB v5e3 v5e9
0x5ee: RETURN v5e9 v5ec
----------------------------------

Begin block 0x5ef
prev = {}, next = {'0x5fa', '0x5f6'}
----------------------------------
function transfer(address,uint256)()
Block 0x5ef
0x5f0: v5f0 = CALLVALUE 
0x5f1: v5f1 = ISZERO v5f0
0x5f2: v5f2(0x5fa) = CONST 
0x5f5: JUMPI v5f2(0x5fa) v5f1
----------------------------------

Begin block 0x5f6
prev = {'0x5ef'}, next = {}
----------------------------------
Block 0x5f6
0x5f6: v5f6(0x0) = CONST 
0x5f9: REVERT v5f6(0x0) v5f6(0x0)
----------------------------------

Begin block 0x5fa
prev = {'0x5ef'}, next = {'0xfab'}
----------------------------------
Block 0x5fa
0x5fb: v5fb(0x62f) = CONST 
0x5fe: v5fe(0x4) = CONST 
0x602: v602 = CALLDATALOAD v5fe(0x4)
0x603: v603(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x618: v618 = AND v603(0xffffffffffffffffffffffffffffffffffffffff) v602
0x61a: v61a(0x20) = CONST 
0x61c: v61c(0x24) = ADD v61a(0x20) v5fe(0x4)
0x621: v621 = CALLDATALOAD v61c(0x24)
0x623: v623(0x20) = CONST 
0x625: v625(0x44) = ADD v623(0x20) v61c(0x24)
0x62b: v62b(0xfab) = CONST 
0x62e: JUMP v62b(0xfab)
----------------------------------

Begin block 0x62f
prev = {'0x1113'}, next = {}
----------------------------------
Block 0x62f
0x62f_0x0: v62f_0 = PHI v1101(0x1) v110a(0x0)
0x630: v630(0x40) = CONST 
0x632: v632 = MLOAD v630(0x40)
0x635: v635 = ISZERO v62f_0
0x636: v636 = ISZERO v635
0x637: v637 = ISZERO v636
0x638: v638 = ISZERO v637
0x63a: MSTORE v632 v638
0x63b: v63b(0x20) = CONST 
0x63d: v63d = ADD v63b(0x20) v632
0x641: v641(0x40) = CONST 
0x643: v643 = MLOAD v641(0x40)
0x646: v646 = SUB v63d v643
0x648: RETURN v643 v646
----------------------------------

Begin block 0x649
prev = {}, next = {'0x1119'}
----------------------------------
function createTokens()()
Block 0x649
0x64a: v64a(0x651) = CONST 
0x64d: v64d(0x1119) = CONST 
0x650: JUMP v64d(0x1119)
----------------------------------

Begin block 0x651
prev = {'0x1238'}, next = {}
----------------------------------
Block 0x651
0x652: STOP 
----------------------------------

Begin block 0x653
prev = {}, next = {'0x65a', '0x65e'}
----------------------------------
function tokenCreationMin()()
Block 0x653
0x654: v654 = CALLVALUE 
0x655: v655 = ISZERO v654
0x656: v656(0x65e) = CONST 
0x659: JUMPI v656(0x65e) v655
----------------------------------

Begin block 0x65a
prev = {'0x653'}, next = {}
----------------------------------
Block 0x65a
0x65a: v65a(0x0) = CONST 
0x65d: REVERT v65a(0x0) v65a(0x0)
----------------------------------

Begin block 0x65e
prev = {'0x653'}, next = {'0x123c'}
----------------------------------
Block 0x65e
0x65f: v65f(0x666) = CONST 
0x662: v662(0x123c) = CONST 
0x665: JUMP v662(0x123c)
----------------------------------

Begin block 0x666
prev = {'0x123c'}, next = {}
----------------------------------
Block 0x666
0x667: v667(0x40) = CONST 
0x669: v669 = MLOAD v667(0x40)
0x66d: MSTORE v669 v1247(0x22e58cf5246568f83000000)
0x66e: v66e(0x20) = CONST 
0x670: v670 = ADD v66e(0x20) v669
0x674: v674(0x40) = CONST 
0x676: v676 = MLOAD v674(0x40)
0x679: v679 = SUB v670 v676
0x67b: RETURN v676 v679
----------------------------------

Begin block 0x67c
prev = {}, next = {'0x683', '0x687'}
----------------------------------
function fundingStartBlock()()
Block 0x67c
0x67d: v67d = CALLVALUE 
0x67e: v67e = ISZERO v67d
0x67f: v67f(0x687) = CONST 
0x682: JUMPI v67f(0x687) v67e
----------------------------------

Begin block 0x683
prev = {'0x67c'}, next = {}
----------------------------------
Block 0x683
0x683: v683(0x0) = CONST 
0x686: REVERT v683(0x0) v683(0x0)
----------------------------------

Begin block 0x687
prev = {'0x67c'}, next = {'0x124a'}
----------------------------------
Block 0x687
0x688: v688(0x68f) = CONST 
0x68b: v68b(0x124a) = CONST 
0x68e: JUMP v68b(0x124a)
----------------------------------

Begin block 0x68f
prev = {'0x124a'}, next = {}
----------------------------------
Block 0x68f
0x690: v690(0x40) = CONST 
0x692: v692 = MLOAD v690(0x40)
0x696: MSTORE v692 v124d
0x697: v697(0x20) = CONST 
0x699: v699 = ADD v697(0x20) v692
0x69d: v69d(0x40) = CONST 
0x69f: v69f = MLOAD v69d(0x40)
0x6a2: v6a2 = SUB v699 v69f
0x6a4: RETURN v69f v6a2
----------------------------------

Begin block 0x6a5
prev = {}, next = {'0x6ac', '0x6b0'}
----------------------------------
function allowance(address,address)()
Block 0x6a5
0x6a6: v6a6 = CALLVALUE 
0x6a7: v6a7 = ISZERO v6a6
0x6a8: v6a8(0x6b0) = CONST 
0x6ab: JUMPI v6a8(0x6b0) v6a7
----------------------------------

Begin block 0x6ac
prev = {'0x6a5'}, next = {}
----------------------------------
Block 0x6ac
0x6ac: v6ac(0x0) = CONST 
0x6af: REVERT v6ac(0x0) v6ac(0x0)
----------------------------------

Begin block 0x6b0
prev = {'0x6a5'}, next = {'0x1250'}
----------------------------------
Block 0x6b0
0x6b1: v6b1(0x6fb) = CONST 
0x6b4: v6b4(0x4) = CONST 
0x6b8: v6b8 = CALLDATALOAD v6b4(0x4)
0x6b9: v6b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ce: v6ce = AND v6b9(0xffffffffffffffffffffffffffffffffffffffff) v6b8
0x6d0: v6d0(0x20) = CONST 
0x6d2: v6d2(0x24) = ADD v6d0(0x20) v6b4(0x4)
0x6d7: v6d7 = CALLDATALOAD v6d2(0x24)
0x6d8: v6d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ed: v6ed = AND v6d8(0xffffffffffffffffffffffffffffffffffffffff) v6d7
0x6ef: v6ef(0x20) = CONST 
0x6f1: v6f1(0x44) = ADD v6ef(0x20) v6d2(0x24)
0x6f7: v6f7(0x1250) = CONST 
0x6fa: JUMP v6f7(0x1250)
----------------------------------

Begin block 0x6fb
prev = {'0x12d2'}, next = {}
----------------------------------
Block 0x6fb
0x6fc: v6fc(0x40) = CONST 
0x6fe: v6fe = MLOAD v6fc(0x40)
0x702: MSTORE v6fe v12cf
0x703: v703(0x20) = CONST 
0x705: v705 = ADD v703(0x20) v6fe
0x709: v709(0x40) = CONST 
0x70b: v70b = MLOAD v709(0x40)
0x70e: v70e = SUB v705 v70b
0x710: RETURN v70b v70e
----------------------------------

Begin block 0x711
prev = {'0x136'}, next = {'0x13e'}
----------------------------------
Block 0x711
0x712: v712(0x5) = CONST 
0x714: v714(0x0) = CONST 
0x717: v717 = SLOAD v712(0x5)
0x719: v719(0x100) = CONST 
0x71c: v71c(0x1) = EXP v719(0x100) v714(0x0)
0x71e: v71e = DIV v717 v71c(0x1)
0x71f: v71f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x734: v734 = AND v71f(0xffffffffffffffffffffffffffffffffffffffff) v71e
0x736: JUMP v137(0x13e)
----------------------------------

Begin block 0x737
prev = {'0x18b'}, next = {'0x193'}
----------------------------------
Block 0x737
0x738: v738(0x40) = CONST 
0x73b: v73b = MLOAD v738(0x40)
0x73e: v73e = ADD v73b v738(0x40)
0x73f: v73f(0x40) = CONST 
0x741: MSTORE v73f(0x40) v73e
0x743: v743(0x10) = CONST 
0x746: MSTORE v73b v743(0x10)
0x747: v747(0x20) = CONST 
0x749: v749 = ADD v747(0x20) v73b
0x74a: v74a(0x476f6f676c696572204972696469756d00000000000000000000000000000000) = CONST 
0x76c: MSTORE v749 v74a(0x476f6f676c696572204972696469756d00000000000000000000000000000000)
0x76f: JUMP v18c(0x193)
----------------------------------

Begin block 0x770
prev = {'0x21a'}, next = {'0x85d'}
----------------------------------
Block 0x770
0x771: v771(0x0) = CONST 
0x774: v774(0x2) = CONST 
0x776: v776(0x0) = CONST 
0x778: v778 = CALLER 
0x779: v779(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78e: v78e = AND v779(0xffffffffffffffffffffffffffffffffffffffff) v778
0x78f: v78f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a4: v7a4 = AND v78f(0xffffffffffffffffffffffffffffffffffffffff) v78e
0x7a6: MSTORE v776(0x0) v7a4
0x7a7: v7a7(0x20) = CONST 
0x7a9: v7a9(0x20) = ADD v7a7(0x20) v776(0x0)
0x7ac: MSTORE v7a9(0x20) v774(0x2)
0x7ad: v7ad(0x20) = CONST 
0x7af: v7af(0x40) = ADD v7ad(0x20) v7a9(0x20)
0x7b0: v7b0(0x0) = CONST 
0x7b2: v7b2 = SHA3 v7b0(0x0) v7af(0x40)
0x7b3: v7b3(0x0) = CONST 
0x7b6: v7b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7cb: v7cb = AND v7b6(0xffffffffffffffffffffffffffffffffffffffff) v238
0x7cc: v7cc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e1: v7e1 = AND v7cc(0xffffffffffffffffffffffffffffffffffffffff) v7cb
0x7e3: MSTORE v7b3(0x0) v7e1
0x7e4: v7e4(0x20) = CONST 
0x7e6: v7e6(0x20) = ADD v7e4(0x20) v7b3(0x0)
0x7e9: MSTORE v7e6(0x20) v7b2
0x7ea: v7ea(0x20) = CONST 
0x7ec: v7ec(0x40) = ADD v7ea(0x20) v7e6(0x20)
0x7ed: v7ed(0x0) = CONST 
0x7ef: v7ef = SHA3 v7ed(0x0) v7ec(0x40)
0x7f2: SSTORE v7ef v241
0x7f5: v7f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80a: v80a = AND v7f5(0xffffffffffffffffffffffffffffffffffffffff) v238
0x80b: v80b = CALLER 
0x80c: v80c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x821: v821 = AND v80c(0xffffffffffffffffffffffffffffffffffffffff) v80b
0x822: v822(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x844: v844(0x40) = CONST 
0x846: v846 = MLOAD v844(0x40)
0x84a: MSTORE v846 v241
0x84b: v84b(0x20) = CONST 
0x84d: v84d = ADD v84b(0x20) v846
0x851: v851(0x40) = CONST 
0x853: v853 = MLOAD v851(0x40)
0x856: v856 = SUB v84d v853
0x858: LOG3 v853 v856 v822(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v821 v80a
0x859: v859(0x1) = CONST 
----------------------------------

Begin block 0x85d
prev = {'0x770'}, next = {'0x24f'}
----------------------------------
Block 0x85d
0x862: JUMP v21b(0x24f)
----------------------------------

Begin block 0x863
prev = {'0x274'}, next = {'0x27c'}
----------------------------------
Block 0x863
0x864: v864(0x0) = CONST 
0x866: v866 = SLOAD v864(0x0)
0x868: JUMP v275(0x27c)
----------------------------------

Begin block 0x869
prev = {'0x29d'}, next = {'0x2a5'}
----------------------------------
Block 0x869
0x86a: v86a(0x12) = CONST 
0x86c: v86c(0xa) = CONST 
0x86e: v86e(0xde0b6b3a7640000) = EXP v86c(0xa) v86a(0x12)
0x86f: v86f(0x1dcd6500) = CONST 
0x874: v874(0x19d971e4fe8401e74000000) = MUL v86f(0x1dcd6500) v86e(0xde0b6b3a7640000)
0x876: JUMP v29e(0x2a5)
----------------------------------

Begin block 0x877
prev = {'0x2c6'}, next = {'0x944', '0x8c3'}
----------------------------------
Block 0x877
0x878: v878(0x0) = CONST 
0x87b: v87b(0x1) = CONST 
0x87d: v87d(0x0) = CONST 
0x880: v880(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x895: v895 = AND v880(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x896: v896(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8ab: v8ab = AND v896(0xffffffffffffffffffffffffffffffffffffffff) v895
0x8ad: MSTORE v87d(0x0) v8ab
0x8ae: v8ae(0x20) = CONST 
0x8b0: v8b0(0x20) = ADD v8ae(0x20) v87d(0x0)
0x8b3: MSTORE v8b0(0x20) v87b(0x1)
0x8b4: v8b4(0x20) = CONST 
0x8b6: v8b6(0x40) = ADD v8b4(0x20) v8b0(0x20)
0x8b7: v8b7(0x0) = CONST 
0x8b9: v8b9 = SHA3 v8b7(0x0) v8b6(0x40)
0x8ba: v8ba = SLOAD v8b9
0x8bb: v8bb = LT v8ba v30c
0x8bc: v8bc = ISZERO v8bb
0x8be: v8be = ISZERO v8bc
0x8bf: v8bf(0x944) = CONST 
0x8c2: JUMPI v8bf(0x944) v8be
----------------------------------

Begin block 0x8c3
prev = {'0x877'}, next = {'0x944'}
----------------------------------
Block 0x8c3
0x8c5: v8c5(0x2) = CONST 
0x8c7: v8c7(0x0) = CONST 
0x8ca: v8ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8df: v8df = AND v8ca(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x8e0: v8e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f5: v8f5 = AND v8e0(0xffffffffffffffffffffffffffffffffffffffff) v8df
0x8f7: MSTORE v8c7(0x0) v8f5
0x8f8: v8f8(0x20) = CONST 
0x8fa: v8fa(0x20) = ADD v8f8(0x20) v8c7(0x0)
0x8fd: MSTORE v8fa(0x20) v8c5(0x2)
0x8fe: v8fe(0x20) = CONST 
0x900: v900(0x40) = ADD v8fe(0x20) v8fa(0x20)
0x901: v901(0x0) = CONST 
0x903: v903 = SHA3 v901(0x0) v900(0x40)
0x904: v904(0x0) = CONST 
0x906: v906 = CALLER 
0x907: v907(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x91c: v91c = AND v907(0xffffffffffffffffffffffffffffffffffffffff) v906
0x91d: v91d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x932: v932 = AND v91d(0xffffffffffffffffffffffffffffffffffffffff) v91c
0x934: MSTORE v904(0x0) v932
0x935: v935(0x20) = CONST 
0x937: v937(0x20) = ADD v935(0x20) v904(0x0)
0x93a: MSTORE v937(0x20) v903
0x93b: v93b(0x20) = CONST 
0x93d: v93d(0x40) = ADD v93b(0x20) v937(0x20)
0x93e: v93e(0x0) = CONST 
0x940: v940 = SHA3 v93e(0x0) v93d(0x40)
0x941: v941 = SLOAD v940
0x942: v942 = LT v941 v30c
0x943: v943 = ISZERO v942
----------------------------------

Begin block 0x944
prev = {'0x877', '0x8c3'}, next = {'0x950', '0x94b'}
----------------------------------
Block 0x944
0x944_0x0: v944_0 = PHI v8bc v943
0x946: v946 = ISZERO v944_0
0x947: v947(0x950) = CONST 
0x94a: JUMPI v947(0x950) v946
----------------------------------

Begin block 0x94b
prev = {'0x944'}, next = {'0x950'}
----------------------------------
Block 0x94b
0x94c: v94c(0x0) = CONST 
0x94f: v94f = GT v30c v94c(0x0)
----------------------------------

Begin block 0x950
prev = {'0x94b', '0x944'}, next = {'0xae7', '0x956'}
----------------------------------
Block 0x950
0x950_0x0: v950_0 = PHI v8bc v943 v94f
0x951: v951 = ISZERO v950_0
0x952: v952(0xae7) = CONST 
0x955: JUMPI v952(0xae7) v951
----------------------------------

Begin block 0x956
prev = {'0x950'}, next = {'0xaf1'}
----------------------------------
Block 0x956
0x957: v957(0x1) = CONST 
0x959: v959(0x0) = CONST 
0x95c: v95c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x971: v971 = AND v95c(0xffffffffffffffffffffffffffffffffffffffff) v303
0x972: v972(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x987: v987 = AND v972(0xffffffffffffffffffffffffffffffffffffffff) v971
0x989: MSTORE v959(0x0) v987
0x98a: v98a(0x20) = CONST 
0x98c: v98c(0x20) = ADD v98a(0x20) v959(0x0)
0x98f: MSTORE v98c(0x20) v957(0x1)
0x990: v990(0x20) = CONST 
0x992: v992(0x40) = ADD v990(0x20) v98c(0x20)
0x993: v993(0x0) = CONST 
0x995: v995 = SHA3 v993(0x0) v992(0x40)
0x996: v996(0x0) = CONST 
0x99a: v99a = SLOAD v995
0x99b: v99b = ADD v99a v30c
0x9a1: SSTORE v995 v99b
0x9a4: v9a4(0x1) = CONST 
0x9a6: v9a6(0x0) = CONST 
0x9a9: v9a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9be: v9be = AND v9a9(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x9bf: v9bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d4: v9d4 = AND v9bf(0xffffffffffffffffffffffffffffffffffffffff) v9be
0x9d6: MSTORE v9a6(0x0) v9d4
0x9d7: v9d7(0x20) = CONST 
0x9d9: v9d9(0x20) = ADD v9d7(0x20) v9a6(0x0)
0x9dc: MSTORE v9d9(0x20) v9a4(0x1)
0x9dd: v9dd(0x20) = CONST 
0x9df: v9df(0x40) = ADD v9dd(0x20) v9d9(0x20)
0x9e0: v9e0(0x0) = CONST 
0x9e2: v9e2 = SHA3 v9e0(0x0) v9df(0x40)
0x9e3: v9e3(0x0) = CONST 
0x9e7: v9e7 = SLOAD v9e2
0x9e8: v9e8 = SUB v9e7 v30c
0x9ee: SSTORE v9e2 v9e8
0x9f1: v9f1(0x2) = CONST 
0x9f3: v9f3(0x0) = CONST 
0x9f6: v9f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa0b: va0b = AND v9f6(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0xa0c: va0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa21: va21 = AND va0c(0xffffffffffffffffffffffffffffffffffffffff) va0b
0xa23: MSTORE v9f3(0x0) va21
0xa24: va24(0x20) = CONST 
0xa26: va26(0x20) = ADD va24(0x20) v9f3(0x0)
0xa29: MSTORE va26(0x20) v9f1(0x2)
0xa2a: va2a(0x20) = CONST 
0xa2c: va2c(0x40) = ADD va2a(0x20) va26(0x20)
0xa2d: va2d(0x0) = CONST 
0xa2f: va2f = SHA3 va2d(0x0) va2c(0x40)
0xa30: va30(0x0) = CONST 
0xa32: va32 = CALLER 
0xa33: va33(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa48: va48 = AND va33(0xffffffffffffffffffffffffffffffffffffffff) va32
0xa49: va49(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa5e: va5e = AND va49(0xffffffffffffffffffffffffffffffffffffffff) va48
0xa60: MSTORE va30(0x0) va5e
0xa61: va61(0x20) = CONST 
0xa63: va63(0x20) = ADD va61(0x20) va30(0x0)
0xa66: MSTORE va63(0x20) va2f
0xa67: va67(0x20) = CONST 
0xa69: va69(0x40) = ADD va67(0x20) va63(0x20)
0xa6a: va6a(0x0) = CONST 
0xa6c: va6c = SHA3 va6a(0x0) va69(0x40)
0xa6d: va6d(0x0) = CONST 
0xa71: va71 = SLOAD va6c
0xa72: va72 = SUB va71 v30c
0xa78: SSTORE va6c va72
0xa7b: va7b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa90: va90 = AND va7b(0xffffffffffffffffffffffffffffffffffffffff) v303
0xa92: va92(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa7: vaa7 = AND va92(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0xaa8: vaa8(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xaca: vaca(0x40) = CONST 
0xacc: vacc = MLOAD vaca(0x40)
0xad0: MSTORE vacc v30c
0xad1: vad1(0x20) = CONST 
0xad3: vad3 = ADD vad1(0x20) vacc
0xad7: vad7(0x40) = CONST 
0xad9: vad9 = MLOAD vad7(0x40)
0xadc: vadc = SUB vad3 vad9
0xade: LOG3 vad9 vadc vaa8(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vaa7 va90
0xadf: vadf(0x1) = CONST 
0xae3: vae3(0xaf1) = CONST 
0xae6: JUMP vae3(0xaf1)
----------------------------------

Begin block 0xae7
prev = {'0x950'}, next = {'0xaf1'}
----------------------------------
Block 0xae7
0xae8: vae8(0x0) = CONST 
0xaec: vaec(0xaf1) = CONST 
0xaef: JUMP vaec(0xaf1)
----------------------------------

Begin block 0xaf1
prev = {'0xae7', '0x956'}, next = {'0x31a'}
----------------------------------
Block 0xaf1
0xaf7: JUMP v2c7(0x31a)
----------------------------------

Begin block 0xaf8
prev = {'0x33f'}, next = {'0x347'}
----------------------------------
Block 0xaf8
0xaf9: vaf9(0x12) = CONST 
0xafc: JUMP v340(0x347)
----------------------------------

Begin block 0xafd
prev = {'0x368'}, next = {'0x370'}
----------------------------------
Block 0xafd
0xafe: vafe(0x1900) = CONST 
0xb02: JUMP v369(0x370)
----------------------------------

Begin block 0xb03
prev = {'0x391'}, next = {'0xb1d', '0xb19'}
----------------------------------
Block 0xb03
0xb04: vb04(0x5) = CONST 
0xb06: vb06(0x14) = CONST 
0xb09: vb09 = SLOAD vb04(0x5)
0xb0b: vb0b(0x100) = CONST 
0xb0e: vb0e(0x10000000000000000000000000000000000000000) = EXP vb0b(0x100) vb06(0x14)
0xb10: vb10 = DIV vb09 vb0e(0x10000000000000000000000000000000000000000)
0xb11: vb11(0xff) = CONST 
0xb13: vb13 = AND vb11(0xff) vb10
0xb14: vb14 = ISZERO vb13
0xb15: vb15(0xb1d) = CONST 
0xb18: JUMPI vb15(0xb1d) vb14
----------------------------------

Begin block 0xb19
prev = {'0xb03'}, next = {}
----------------------------------
Block 0xb19
0xb19: vb19(0x0) = CONST 
0xb1c: REVERT vb19(0x0) vb19(0x0)
----------------------------------

Begin block 0xb1d
prev = {'0xb03'}, next = {'0xb79', '0xb75'}
----------------------------------
Block 0xb1d
0xb1e: vb1e(0x4) = CONST 
0xb20: vb20(0x0) = CONST 
0xb23: vb23 = SLOAD vb1e(0x4)
0xb25: vb25(0x100) = CONST 
0xb28: vb28(0x1) = EXP vb25(0x100) vb20(0x0)
0xb2a: vb2a = DIV vb23 vb28(0x1)
0xb2b: vb2b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb40: vb40 = AND vb2b(0xffffffffffffffffffffffffffffffffffffffff) vb2a
0xb41: vb41(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb56: vb56 = AND vb41(0xffffffffffffffffffffffffffffffffffffffff) vb40
0xb57: vb57 = CALLER 
0xb58: vb58(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb6d: vb6d = AND vb58(0xffffffffffffffffffffffffffffffffffffffff) vb57
0xb6e: vb6e = EQ vb6d vb56
0xb6f: vb6f = ISZERO vb6e
0xb70: vb70 = ISZERO vb6f
0xb71: vb71(0xb79) = CONST 
0xb74: JUMPI vb71(0xb79) vb70
----------------------------------

Begin block 0xb75
prev = {'0xb1d'}, next = {}
----------------------------------
Block 0xb75
0xb75: vb75(0x0) = CONST 
0xb78: REVERT vb75(0x0) vb75(0x0)
----------------------------------

Begin block 0xb79
prev = {'0xb1d'}, next = {'0xb8e', '0xb92'}
----------------------------------
Block 0xb79
0xb7a: vb7a(0x12) = CONST 
0xb7c: vb7c(0xa) = CONST 
0xb7e: vb7e(0xde0b6b3a7640000) = EXP vb7c(0xa) vb7a(0x12)
0xb7f: vb7f(0x283baec0) = CONST 
0xb84: vb84(0x22e58cf5246568f83000000) = MUL vb7f(0x283baec0) vb7e(0xde0b6b3a7640000)
0xb85: vb85(0x0) = CONST 
0xb87: vb87 = SLOAD vb85(0x0)
0xb88: vb88 = LT vb87 vb84(0x22e58cf5246568f83000000)
0xb89: vb89 = ISZERO vb88
0xb8a: vb8a(0xb92) = CONST 
0xb8d: JUMPI vb8a(0xb92) vb89
----------------------------------

Begin block 0xb8e
prev = {'0xb79'}, next = {}
----------------------------------
Block 0xb8e
0xb8e: vb8e(0x0) = CONST 
0xb91: REVERT vb8e(0x0) vb8e(0x0)
----------------------------------

Begin block 0xb92
prev = {'0xb79'}, next = {'0xbb0', '0xb9f'}
----------------------------------
Block 0xb92
0xb93: vb93(0x7) = CONST 
0xb95: vb95 = SLOAD vb93(0x7)
0xb96: vb96 = NUMBER 
0xb97: vb97 = GT vb96 vb95
0xb98: vb98 = ISZERO vb97
0xb9a: vb9a = ISZERO vb98
0xb9b: vb9b(0xbb0) = CONST 
0xb9e: JUMPI vb9b(0xbb0) vb9a
----------------------------------

Begin block 0xb9f
prev = {'0xb92'}, next = {'0xbb0'}
----------------------------------
Block 0xb9f
0xba0: vba0(0x12) = CONST 
0xba2: vba2(0xa) = CONST 
0xba4: vba4(0xde0b6b3a7640000) = EXP vba2(0xa) vba0(0x12)
0xba5: vba5(0x59682f00) = CONST 
0xbaa: vbaa(0x4d8c55aefb8c05b5c000000) = MUL vba5(0x59682f00) vba4(0xde0b6b3a7640000)
0xbab: vbab(0x0) = CONST 
0xbad: vbad = SLOAD vbab(0x0)
0xbae: vbae = EQ vbad vbaa(0x4d8c55aefb8c05b5c000000)
0xbaf: vbaf = ISZERO vbae
----------------------------------

Begin block 0xbb0
prev = {'0xb92', '0xb9f'}, next = {'0xbb6', '0xbba'}
----------------------------------
Block 0xbb0
0xbb0_0x0: vbb0_0 = PHI vb98 vbaf
0xbb1: vbb1 = ISZERO vbb0_0
0xbb2: vbb2(0xbba) = CONST 
0xbb5: JUMPI vbb2(0xbba) vbb1
----------------------------------

Begin block 0xbb6
prev = {'0xbb0'}, next = {}
----------------------------------
Block 0xbb6
0xbb6: vbb6(0x0) = CONST 
0xbb9: REVERT vbb6(0x0) vbb6(0x0)
----------------------------------

Begin block 0xbba
prev = {'0xbb0'}, next = {'0xc4e', '0xc4a'}
----------------------------------
Block 0xbba
0xbbb: vbbb(0x1) = CONST 
0xbbd: vbbd(0x5) = CONST 
0xbbf: vbbf(0x14) = CONST 
0xbc1: vbc1(0x100) = CONST 
0xbc4: vbc4(0x10000000000000000000000000000000000000000) = EXP vbc1(0x100) vbbf(0x14)
0xbc6: vbc6 = SLOAD vbbd(0x5)
0xbc8: vbc8(0xff) = CONST 
0xbca: vbca(0xff0000000000000000000000000000000000000000) = MUL vbc8(0xff) vbc4(0x10000000000000000000000000000000000000000)
0xbcb: vbcb(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT vbca(0xff0000000000000000000000000000000000000000)
0xbcc: vbcc = AND vbcb(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) vbc6
0xbcf: vbcf(0x0) = ISZERO vbbb(0x1)
0xbd0: vbd0(0x1) = ISZERO vbcf(0x0)
0xbd1: vbd1(0x10000000000000000000000000000000000000000) = MUL vbd0(0x1) vbc4(0x10000000000000000000000000000000000000000)
0xbd2: vbd2 = OR vbd1(0x10000000000000000000000000000000000000000) vbcc
0xbd4: SSTORE vbbd(0x5) vbd2
0xbd6: vbd6(0x4) = CONST 
0xbd8: vbd8(0x0) = CONST 
0xbdb: vbdb = SLOAD vbd6(0x4)
0xbdd: vbdd(0x100) = CONST 
0xbe0: vbe0(0x1) = EXP vbdd(0x100) vbd8(0x0)
0xbe2: vbe2 = DIV vbdb vbe0(0x1)
0xbe3: vbe3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf8: vbf8 = AND vbe3(0xffffffffffffffffffffffffffffffffffffffff) vbe2
0xbf9: vbf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0e: vc0e = AND vbf9(0xffffffffffffffffffffffffffffffffffffffff) vbf8
0xc0f: vc0f(0x8fc) = CONST 
0xc12: vc12 = ADDRESS 
0xc13: vc13(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc28: vc28 = AND vc13(0xffffffffffffffffffffffffffffffffffffffff) vc12
0xc29: vc29 = BALANCE vc28
0xc2c: vc2c = ISZERO vc29
0xc2d: vc2d = MUL vc2c vc0f(0x8fc)
0xc2f: vc2f(0x40) = CONST 
0xc31: vc31 = MLOAD vc2f(0x40)
0xc32: vc32(0x0) = CONST 
0xc34: vc34(0x40) = CONST 
0xc36: vc36 = MLOAD vc34(0x40)
0xc39: vc39 = SUB vc31 vc36
0xc3e: vc3e = CALL vc2d vc0e vc29 vc36 vc39 vc36 vc32(0x0)
0xc44: vc44 = ISZERO vc3e
0xc45: vc45 = ISZERO vc44
0xc46: vc46(0xc4e) = CONST 
0xc49: JUMPI vc46(0xc4e) vc45
----------------------------------

Begin block 0xc4a
prev = {'0xbba'}, next = {}
----------------------------------
Block 0xc4a
0xc4a: vc4a(0x0) = CONST 
0xc4d: REVERT vc4a(0x0) vc4a(0x0)
----------------------------------

Begin block 0xc4e
prev = {'0xbba'}, next = {'0xc4f'}
----------------------------------
Block 0xc4e
----------------------------------

Begin block 0xc4f
prev = {'0xc4e'}, next = {'0x399'}
----------------------------------
Block 0xc4f
0xc50: JUMP v392(0x399)
----------------------------------

Begin block 0xc51
prev = {'0x3a6'}, next = {'0xce7', '0xca1'}
----------------------------------
Block 0xc51
0xc52: vc52(0x3) = CONST 
0xc55: vc55 = SLOAD vc52(0x3)
0xc56: vc56(0x1) = CONST 
0xc59: vc59(0x1) = CONST 
0xc5b: vc5b = AND vc59(0x1) vc55
0xc5c: vc5c = ISZERO vc5b
0xc5d: vc5d(0x100) = CONST 
0xc60: vc60 = MUL vc5d(0x100) vc5c
0xc61: vc61 = SUB vc60 vc56(0x1)
0xc62: vc62 = AND vc61 vc55
0xc63: vc63(0x2) = CONST 
0xc66: vc66 = DIV vc62 vc63(0x2)
0xc68: vc68(0x1f) = CONST 
0xc6a: vc6a = ADD vc68(0x1f) vc66
0xc6b: vc6b(0x20) = CONST 
0xc6f: vc6f = DIV vc6a vc6b(0x20)
0xc70: vc70 = MUL vc6f vc6b(0x20)
0xc71: vc71(0x20) = CONST 
0xc73: vc73 = ADD vc71(0x20) vc70
0xc74: vc74(0x40) = CONST 
0xc76: vc76 = MLOAD vc74(0x40)
0xc79: vc79 = ADD vc76 vc73
0xc7a: vc7a(0x40) = CONST 
0xc7c: MSTORE vc7a(0x40) vc79
0xc83: MSTORE vc76 vc66
0xc84: vc84(0x20) = CONST 
0xc86: vc86 = ADD vc84(0x20) vc76
0xc89: vc89 = SLOAD vc52(0x3)
0xc8a: vc8a(0x1) = CONST 
0xc8d: vc8d(0x1) = CONST 
0xc8f: vc8f = AND vc8d(0x1) vc89
0xc90: vc90 = ISZERO vc8f
0xc91: vc91(0x100) = CONST 
0xc94: vc94 = MUL vc91(0x100) vc90
0xc95: vc95 = SUB vc94 vc8a(0x1)
0xc96: vc96 = AND vc95 vc89
0xc97: vc97(0x2) = CONST 
0xc9a: vc9a = DIV vc96 vc97(0x2)
0xc9c: vc9c = ISZERO vc9a
0xc9d: vc9d(0xce7) = CONST 
0xca0: JUMPI vc9d(0xce7) vc9c
----------------------------------

Begin block 0xca1
prev = {'0xc51'}, next = {'0xca9', '0xcbc'}
----------------------------------
Block 0xca1
0xca2: vca2(0x1f) = CONST 
0xca4: vca4 = LT vca2(0x1f) vc9a
0xca5: vca5(0xcbc) = CONST 
0xca8: JUMPI vca5(0xcbc) vca4
----------------------------------

Begin block 0xca9
prev = {'0xca1'}, next = {'0xce7'}
----------------------------------
Block 0xca9
0xca9: vca9(0x100) = CONST 
0xcae: vcae = SLOAD vc52(0x3)
0xcaf: vcaf = DIV vcae vca9(0x100)
0xcb0: vcb0 = MUL vcaf vca9(0x100)
0xcb2: MSTORE vc86 vcb0
0xcb4: vcb4(0x20) = CONST 
0xcb6: vcb6 = ADD vcb4(0x20) vc86
0xcb8: vcb8(0xce7) = CONST 
0xcbb: JUMP vcb8(0xce7)
----------------------------------

Begin block 0xcbc
prev = {'0xca1'}, next = {'0xcca'}
----------------------------------
Block 0xcbc
0xcbe: vcbe = ADD vc86 vc9a
0xcc1: vcc1(0x0) = CONST 
0xcc3: MSTORE vcc1(0x0) vc52(0x3)
0xcc4: vcc4(0x20) = CONST 
0xcc6: vcc6(0x0) = CONST 
0xcc8: vcc8 = SHA3 vcc6(0x0) vcc4(0x20)
----------------------------------

Begin block 0xcca
prev = {'0xcbc', '0xcca'}, next = {'0xcde', '0xcca'}
----------------------------------
Block 0xcca
0xcca_0x0: vcca_0 = PHI vc86 vcd6
0xcca_0x1: vcca_1 = PHI vcc8 vcd2
0xccc: vccc = SLOAD vcca_1
0xcce: MSTORE vcca_0 vccc
0xcd0: vcd0(0x1) = CONST 
0xcd2: vcd2 = ADD vcd0(0x1) vcca_1
0xcd4: vcd4(0x20) = CONST 
0xcd6: vcd6 = ADD vcd4(0x20) vcca_0
0xcd9: vcd9 = GT vcbe vcd6
0xcda: vcda(0xcca) = CONST 
0xcdd: JUMPI vcda(0xcca) vcd9
----------------------------------

Begin block 0xcde
prev = {'0xcca'}, next = {'0xce7'}
----------------------------------
Block 0xcde
0xce0: vce0 = SUB vcd6 vcbe
0xce1: vce1(0x1f) = CONST 
0xce3: vce3 = AND vce1(0x1f) vce0
0xce5: vce5 = ADD vcbe vce3
----------------------------------

Begin block 0xce7
prev = {'0xca9', '0xcde', '0xc51'}, next = {'0x3ae'}
----------------------------------
Block 0xce7
0xcee: JUMP v3a7(0x3ae)
----------------------------------

Begin block 0xcef
prev = {'0x435'}, next = {'0xd08', '0xd0c'}
----------------------------------
Block 0xcef
0xcf0: vcf0(0x0) = CONST 
0xcf3: vcf3(0x5) = CONST 
0xcf5: vcf5(0x14) = CONST 
0xcf8: vcf8 = SLOAD vcf3(0x5)
0xcfa: vcfa(0x100) = CONST 
0xcfd: vcfd(0x10000000000000000000000000000000000000000) = EXP vcfa(0x100) vcf5(0x14)
0xcff: vcff = DIV vcf8 vcfd(0x10000000000000000000000000000000000000000)
0xd00: vd00(0xff) = CONST 
0xd02: vd02 = AND vd00(0xff) vcff
0xd03: vd03 = ISZERO vd02
0xd04: vd04(0xd0c) = CONST 
0xd07: JUMPI vd04(0xd0c) vd03
----------------------------------

Begin block 0xd08
prev = {'0xcef'}, next = {}
----------------------------------
Block 0xd08
0xd08: vd08(0x0) = CONST 
0xd0b: REVERT vd08(0x0) vd08(0x0)
----------------------------------

Begin block 0xd0c
prev = {'0xcef'}, next = {'0xd18', '0xd1c'}
----------------------------------
Block 0xd0c
0xd0d: vd0d(0x7) = CONST 
0xd0f: vd0f = SLOAD vd0d(0x7)
0xd10: vd10 = NUMBER 
0xd11: vd11 = GT vd10 vd0f
0xd12: vd12 = ISZERO vd11
0xd13: vd13 = ISZERO vd12
0xd14: vd14(0xd1c) = CONST 
0xd17: JUMPI vd14(0xd1c) vd13
----------------------------------

Begin block 0xd18
prev = {'0xd0c'}, next = {}
----------------------------------
Block 0xd18
0xd18: vd18(0x0) = CONST 
0xd1b: REVERT vd18(0x0) vd18(0x0)
----------------------------------

Begin block 0xd1c
prev = {'0xd0c'}, next = {'0xd36', '0xd32'}
----------------------------------
Block 0xd1c
0xd1d: vd1d(0x12) = CONST 
0xd1f: vd1f(0xa) = CONST 
0xd21: vd21(0xde0b6b3a7640000) = EXP vd1f(0xa) vd1d(0x12)
0xd22: vd22(0x283baec0) = CONST 
0xd27: vd27(0x22e58cf5246568f83000000) = MUL vd22(0x283baec0) vd21(0xde0b6b3a7640000)
0xd28: vd28(0x0) = CONST 
0xd2a: vd2a = SLOAD vd28(0x0)
0xd2b: vd2b = LT vd2a vd27(0x22e58cf5246568f83000000)
0xd2c: vd2c = ISZERO vd2b
0xd2d: vd2d = ISZERO vd2c
0xd2e: vd2e(0xd36) = CONST 
0xd31: JUMPI vd2e(0xd36) vd2d
----------------------------------

Begin block 0xd32
prev = {'0xd1c'}, next = {}
----------------------------------
Block 0xd32
0xd32: vd32(0x0) = CONST 
0xd35: REVERT vd32(0x0) vd32(0x0)
----------------------------------

Begin block 0xd36
prev = {'0xd1c'}, next = {'0xd8d', '0xd91'}
----------------------------------
Block 0xd36
0xd37: vd37(0x5) = CONST 
0xd39: vd39(0x0) = CONST 
0xd3c: vd3c = SLOAD vd37(0x5)
0xd3e: vd3e(0x100) = CONST 
0xd41: vd41(0x1) = EXP vd3e(0x100) vd39(0x0)
0xd43: vd43 = DIV vd3c vd41(0x1)
0xd44: vd44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd59: vd59 = AND vd44(0xffffffffffffffffffffffffffffffffffffffff) vd43
0xd5a: vd5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd6f: vd6f = AND vd5a(0xffffffffffffffffffffffffffffffffffffffff) vd59
0xd70: vd70 = CALLER 
0xd71: vd71(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd86: vd86 = AND vd71(0xffffffffffffffffffffffffffffffffffffffff) vd70
0xd87: vd87 = EQ vd86 vd6f
0xd88: vd88 = ISZERO vd87
0xd89: vd89(0xd91) = CONST 
0xd8c: JUMPI vd89(0xd91) vd88
----------------------------------

Begin block 0xd8d
prev = {'0xd36'}, next = {}
----------------------------------
Block 0xd8d
0xd8d: vd8d(0x0) = CONST 
0xd90: REVERT vd8d(0x0) vd8d(0x0)
----------------------------------

Begin block 0xd91
prev = {'0xd36'}, next = {'0xddd', '0xde1'}
----------------------------------
Block 0xd91
0xd92: vd92(0x1) = CONST 
0xd94: vd94(0x0) = CONST 
0xd96: vd96 = CALLER 
0xd97: vd97(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdac: vdac = AND vd97(0xffffffffffffffffffffffffffffffffffffffff) vd96
0xdad: vdad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc2: vdc2 = AND vdad(0xffffffffffffffffffffffffffffffffffffffff) vdac
0xdc4: MSTORE vd94(0x0) vdc2
0xdc5: vdc5(0x20) = CONST 
0xdc7: vdc7(0x20) = ADD vdc5(0x20) vd94(0x0)
0xdca: MSTORE vdc7(0x20) vd92(0x1)
0xdcb: vdcb(0x20) = CONST 
0xdcd: vdcd(0x40) = ADD vdcb(0x20) vdc7(0x20)
0xdce: vdce(0x0) = CONST 
0xdd0: vdd0 = SHA3 vdce(0x0) vdcd(0x40)
0xdd1: vdd1 = SLOAD vdd0
0xdd4: vdd4(0x0) = CONST 
0xdd7: vdd7 = EQ vdd1 vdd4(0x0)
0xdd8: vdd8 = ISZERO vdd7
0xdd9: vdd9(0xde1) = CONST 
0xddc: JUMPI vdd9(0xde1) vdd8
----------------------------------

Begin block 0xddd
prev = {'0xd91'}, next = {}
----------------------------------
Block 0xddd
0xddd: vddd(0x0) = CONST 
0xde0: REVERT vddd(0x0) vddd(0x0)
----------------------------------

Begin block 0xde1
prev = {'0xd91'}, next = {'0x12d8'}
----------------------------------
Block 0xde1
0xde2: vde2(0x0) = CONST 
0xde4: vde4(0x1) = CONST 
0xde6: vde6(0x0) = CONST 
0xde8: vde8 = CALLER 
0xde9: vde9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdfe: vdfe = AND vde9(0xffffffffffffffffffffffffffffffffffffffff) vde8
0xdff: vdff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe14: ve14 = AND vdff(0xffffffffffffffffffffffffffffffffffffffff) vdfe
0xe16: MSTORE vde6(0x0) ve14
0xe17: ve17(0x20) = CONST 
0xe19: ve19(0x20) = ADD ve17(0x20) vde6(0x0)
0xe1c: MSTORE ve19(0x20) vde4(0x1)
0xe1d: ve1d(0x20) = CONST 
0xe1f: ve1f(0x40) = ADD ve1d(0x20) ve19(0x20)
0xe20: ve20(0x0) = CONST 
0xe22: ve22 = SHA3 ve20(0x0) ve1f(0x40)
0xe25: SSTORE ve22 vde2(0x0)
0xe27: ve27(0xe32) = CONST 
0xe2a: ve2a(0x0) = CONST 
0xe2c: ve2c = SLOAD ve2a(0x0)
0xe2e: ve2e(0x12d8) = CONST 
0xe31: JUMP ve2e(0x12d8)
----------------------------------

Begin block 0xe32
prev = {'0x12f0'}, next = {'0xe45'}
----------------------------------
Block 0xe32
0xe33: ve33(0x0) = CONST 
0xe37: SSTORE ve33(0x0) v12ea
0xe39: ve39(0x1900) = CONST 
0xe3e: ve3e(0x0) = ISZERO ve39(0x1900)
0xe3f: ve3f(0x1) = ISZERO ve3e(0x0)
0xe40: ve40(0xe45) = CONST 
0xe43: JUMPI ve40(0xe45) ve3f(0x1)
----------------------------------

Begin block 0xe45
prev = {'0xe32'}, next = {'0xed6', '0xed2'}
----------------------------------
Block 0xe45
0xe46: ve46 = DIV vdd1 ve39(0x1900)
0xe49: ve49 = CALLER 
0xe4a: ve4a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe5f: ve5f = AND ve4a(0xffffffffffffffffffffffffffffffffffffffff) ve49
0xe60: ve60(0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7) = CONST 
0xe82: ve82(0x40) = CONST 
0xe84: ve84 = MLOAD ve82(0x40)
0xe88: MSTORE ve84 ve46
0xe89: ve89(0x20) = CONST 
0xe8b: ve8b = ADD ve89(0x20) ve84
0xe8f: ve8f(0x40) = CONST 
0xe91: ve91 = MLOAD ve8f(0x40)
0xe94: ve94 = SUB ve8b ve91
0xe96: LOG2 ve91 ve94 ve60(0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7) ve5f
0xe97: ve97 = CALLER 
0xe98: ve98(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xead: vead = AND ve98(0xffffffffffffffffffffffffffffffffffffffff) ve97
0xeae: veae(0x8fc) = CONST 
0xeb4: veb4 = ISZERO ve46
0xeb5: veb5 = MUL veb4 veae(0x8fc)
0xeb7: veb7(0x40) = CONST 
0xeb9: veb9 = MLOAD veb7(0x40)
0xeba: veba(0x0) = CONST 
0xebc: vebc(0x40) = CONST 
0xebe: vebe = MLOAD vebc(0x40)
0xec1: vec1 = SUB veb9 vebe
0xec6: vec6 = CALL veb5 vead ve46 vebe vec1 vebe veba(0x0)
0xecc: vecc = ISZERO vec6
0xecd: vecd = ISZERO vecc
0xece: vece(0xed6) = CONST 
0xed1: JUMPI vece(0xed6) vecd
----------------------------------

Begin block 0xed2
prev = {'0xe45'}, next = {}
----------------------------------
Block 0xed2
0xed2: ved2(0x0) = CONST 
0xed5: REVERT ved2(0x0) ved2(0x0)
----------------------------------

Begin block 0xed6
prev = {'0xe45'}, next = {'0xed7'}
----------------------------------
Block 0xed6
----------------------------------

Begin block 0xed7
prev = {'0xed6'}, next = {'0x43d'}
----------------------------------
Block 0xed7
0xeda: JUMP v436(0x43d)
----------------------------------

Begin block 0xedb
prev = {'0x44a'}, next = {'0x452'}
----------------------------------
Block 0xedb
0xedc: vedc(0x12) = CONST 
0xede: vede(0xa) = CONST 
0xee0: vee0(0xde0b6b3a7640000) = EXP vede(0xa) vedc(0x12)
0xee1: vee1(0x59682f00) = CONST 
0xee6: vee6(0x4d8c55aefb8c05b5c000000) = MUL vee1(0x59682f00) vee0(0xde0b6b3a7640000)
0xee8: JUMP v44b(0x452)
----------------------------------

Begin block 0xee9
prev = {'0x473'}, next = {'0xf2e'}
----------------------------------
Block 0xee9
0xeea: veea(0x0) = CONST 
0xeec: veec(0x1) = CONST 
0xeee: veee(0x0) = CONST 
0xef1: vef1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf06: vf06 = AND vef1(0xffffffffffffffffffffffffffffffffffffffff) v491
0xf07: vf07(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1c: vf1c = AND vf07(0xffffffffffffffffffffffffffffffffffffffff) vf06
0xf1e: MSTORE veee(0x0) vf1c
0xf1f: vf1f(0x20) = CONST 
0xf21: vf21(0x20) = ADD vf1f(0x20) veee(0x0)
0xf24: MSTORE vf21(0x20) veec(0x1)
0xf25: vf25(0x20) = CONST 
0xf27: vf27(0x40) = ADD vf25(0x20) vf21(0x20)
0xf28: vf28(0x0) = CONST 
0xf2a: vf2a = SHA3 vf28(0x0) vf27(0x40)
0xf2b: vf2b = SLOAD vf2a
----------------------------------

Begin block 0xf2e
prev = {'0xee9'}, next = {'0x49f'}
----------------------------------
Block 0xf2e
0xf32: JUMP v474(0x49f)
----------------------------------

Begin block 0xf33
prev = {'0x4c0'}, next = {'0x4c8'}
----------------------------------
Block 0xf33
0xf34: vf34(0x5) = CONST 
0xf36: vf36(0x14) = CONST 
0xf39: vf39 = SLOAD vf34(0x5)
0xf3b: vf3b(0x100) = CONST 
0xf3e: vf3e(0x10000000000000000000000000000000000000000) = EXP vf3b(0x100) vf36(0x14)
0xf40: vf40 = DIV vf39 vf3e(0x10000000000000000000000000000000000000000)
0xf41: vf41(0xff) = CONST 
0xf43: vf43 = AND vf41(0xff) vf40
0xf45: JUMP v4c1(0x4c8)
----------------------------------

Begin block 0xf46
prev = {'0x4ed'}, next = {'0x4f5'}
----------------------------------
Block 0xf46
0xf47: vf47(0x7) = CONST 
0xf49: vf49 = SLOAD vf47(0x7)
0xf4b: JUMP v4ee(0x4f5)
----------------------------------

Begin block 0xf4c
prev = {'0x516'}, next = {'0x51e'}
----------------------------------
Block 0xf4c
0xf4d: vf4d(0x40) = CONST 
0xf50: vf50 = MLOAD vf4d(0x40)
0xf53: vf53 = ADD vf50 vf4d(0x40)
0xf54: vf54(0x40) = CONST 
0xf56: MSTORE vf54(0x40) vf53
0xf58: vf58(0x5) = CONST 
0xf5b: MSTORE vf50 vf58(0x5)
0xf5c: vf5c(0x20) = CONST 
0xf5e: vf5e = ADD vf5c(0x20) vf50
0xf5f: vf5f(0x474f4f4749000000000000000000000000000000000000000000000000000000) = CONST 
0xf81: MSTORE vf5e vf5f(0x474f4f4749000000000000000000000000000000000000000000000000000000)
0xf84: JUMP v517(0x51e)
----------------------------------

Begin block 0xf85
prev = {'0x5a5'}, next = {'0x5ad'}
----------------------------------
Block 0xf85
0xf86: vf86(0x4) = CONST 
0xf88: vf88(0x0) = CONST 
0xf8b: vf8b = SLOAD vf86(0x4)
0xf8d: vf8d(0x100) = CONST 
0xf90: vf90(0x1) = EXP vf8d(0x100) vf88(0x0)
0xf92: vf92 = DIV vf8b vf90(0x1)
0xf93: vf93(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa8: vfa8 = AND vf93(0xffffffffffffffffffffffffffffffffffffffff) vf92
0xfaa: JUMP v5a6(0x5ad)
----------------------------------

Begin block 0xfab
prev = {'0x5fa'}, next = {'0xffc', '0xff7'}
----------------------------------
Block 0xfab
0xfac: vfac(0x0) = CONST 
0xfaf: vfaf(0x1) = CONST 
0xfb1: vfb1(0x0) = CONST 
0xfb3: vfb3 = CALLER 
0xfb4: vfb4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfc9: vfc9 = AND vfb4(0xffffffffffffffffffffffffffffffffffffffff) vfb3
0xfca: vfca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfdf: vfdf = AND vfca(0xffffffffffffffffffffffffffffffffffffffff) vfc9
0xfe1: MSTORE vfb1(0x0) vfdf
0xfe2: vfe2(0x20) = CONST 
0xfe4: vfe4(0x20) = ADD vfe2(0x20) vfb1(0x0)
0xfe7: MSTORE vfe4(0x20) vfaf(0x1)
0xfe8: vfe8(0x20) = CONST 
0xfea: vfea(0x40) = ADD vfe8(0x20) vfe4(0x20)
0xfeb: vfeb(0x0) = CONST 
0xfed: vfed = SHA3 vfeb(0x0) vfea(0x40)
0xfee: vfee = SLOAD vfed
0xfef: vfef = LT vfee v621
0xff0: vff0 = ISZERO vfef
0xff2: vff2 = ISZERO vff0
0xff3: vff3(0xffc) = CONST 
0xff6: JUMPI vff3(0xffc) vff2
----------------------------------

Begin block 0xff7
prev = {'0xfab'}, next = {'0xffc'}
----------------------------------
Block 0xff7
0xff8: vff8(0x0) = CONST 
0xffb: vffb = GT v621 vff8(0x0)
----------------------------------

Begin block 0xffc
prev = {'0xfab', '0xff7'}, next = {'0x1002', '0x1109'}
----------------------------------
Block 0xffc
0xffc_0x0: vffc_0 = PHI vff0 vffb
0xffd: vffd = ISZERO vffc_0
0xffe: vffe(0x1109) = CONST 
0x1001: JUMPI vffe(0x1109) vffd
----------------------------------

Begin block 0x1002
prev = {'0xffc'}, next = {'0x1113'}
----------------------------------
Block 0x1002
0x1003: v1003(0x1) = CONST 
0x1005: v1005(0x0) = CONST 
0x1007: v1007 = CALLER 
0x1008: v1008(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x101d: v101d = AND v1008(0xffffffffffffffffffffffffffffffffffffffff) v1007
0x101e: v101e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1033: v1033 = AND v101e(0xffffffffffffffffffffffffffffffffffffffff) v101d
0x1035: MSTORE v1005(0x0) v1033
0x1036: v1036(0x20) = CONST 
0x1038: v1038(0x20) = ADD v1036(0x20) v1005(0x0)
0x103b: MSTORE v1038(0x20) v1003(0x1)
0x103c: v103c(0x20) = CONST 
0x103e: v103e(0x40) = ADD v103c(0x20) v1038(0x20)
0x103f: v103f(0x0) = CONST 
0x1041: v1041 = SHA3 v103f(0x0) v103e(0x40)
0x1042: v1042(0x0) = CONST 
0x1046: v1046 = SLOAD v1041
0x1047: v1047 = SUB v1046 v621
0x104d: SSTORE v1041 v1047
0x1050: v1050(0x1) = CONST 
0x1052: v1052(0x0) = CONST 
0x1055: v1055(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x106a: v106a = AND v1055(0xffffffffffffffffffffffffffffffffffffffff) v618
0x106b: v106b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1080: v1080 = AND v106b(0xffffffffffffffffffffffffffffffffffffffff) v106a
0x1082: MSTORE v1052(0x0) v1080
0x1083: v1083(0x20) = CONST 
0x1085: v1085(0x20) = ADD v1083(0x20) v1052(0x0)
0x1088: MSTORE v1085(0x20) v1050(0x1)
0x1089: v1089(0x20) = CONST 
0x108b: v108b(0x40) = ADD v1089(0x20) v1085(0x20)
0x108c: v108c(0x0) = CONST 
0x108e: v108e = SHA3 v108c(0x0) v108b(0x40)
0x108f: v108f(0x0) = CONST 
0x1093: v1093 = SLOAD v108e
0x1094: v1094 = ADD v1093 v621
0x109a: SSTORE v108e v1094
0x109d: v109d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10b2: v10b2 = AND v109d(0xffffffffffffffffffffffffffffffffffffffff) v618
0x10b3: v10b3 = CALLER 
0x10b4: v10b4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c9: v10c9 = AND v10b4(0xffffffffffffffffffffffffffffffffffffffff) v10b3
0x10ca: v10ca(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x10ec: v10ec(0x40) = CONST 
0x10ee: v10ee = MLOAD v10ec(0x40)
0x10f2: MSTORE v10ee v621
0x10f3: v10f3(0x20) = CONST 
0x10f5: v10f5 = ADD v10f3(0x20) v10ee
0x10f9: v10f9(0x40) = CONST 
0x10fb: v10fb = MLOAD v10f9(0x40)
0x10fe: v10fe = SUB v10f5 v10fb
0x1100: LOG3 v10fb v10fe v10ca(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v10c9 v10b2
0x1101: v1101(0x1) = CONST 
0x1105: v1105(0x1113) = CONST 
0x1108: JUMP v1105(0x1113)
----------------------------------

Begin block 0x1109
prev = {'0xffc'}, next = {'0x1113'}
----------------------------------
Block 0x1109
0x110a: v110a(0x0) = CONST 
0x110e: v110e(0x1113) = CONST 
0x1111: JUMP v110e(0x1113)
----------------------------------

Begin block 0x1113
prev = {'0x1002', '0x1109'}, next = {'0x62f'}
----------------------------------
Block 0x1113
0x1118: JUMP v5fb(0x62f)
----------------------------------

Begin block 0x1119
prev = {'0x649'}, next = {'0x1136', '0x1132'}
----------------------------------
Block 0x1119
0x111a: v111a(0x0) = CONST 
0x111d: v111d(0x5) = CONST 
0x111f: v111f(0x14) = CONST 
0x1122: v1122 = SLOAD v111d(0x5)
0x1124: v1124(0x100) = CONST 
0x1127: v1127(0x10000000000000000000000000000000000000000) = EXP v1124(0x100) v111f(0x14)
0x1129: v1129 = DIV v1122 v1127(0x10000000000000000000000000000000000000000)
0x112a: v112a(0xff) = CONST 
0x112c: v112c = AND v112a(0xff) v1129
0x112d: v112d = ISZERO v112c
0x112e: v112e(0x1136) = CONST 
0x1131: JUMPI v112e(0x1136) v112d
----------------------------------

Begin block 0x1132
prev = {'0x1119'}, next = {}
----------------------------------
Block 0x1132
0x1132: v1132(0x0) = CONST 
0x1135: REVERT v1132(0x0) v1132(0x0)
----------------------------------

Begin block 0x1136
prev = {'0x1119'}, next = {'0x1141', '0x1145'}
----------------------------------
Block 0x1136
0x1137: v1137(0x6) = CONST 
0x1139: v1139 = SLOAD v1137(0x6)
0x113a: v113a = NUMBER 
0x113b: v113b = LT v113a v1139
0x113c: v113c = ISZERO v113b
0x113d: v113d(0x1145) = CONST 
0x1140: JUMPI v113d(0x1145) v113c
----------------------------------

Begin block 0x1141
prev = {'0x1136'}, next = {}
----------------------------------
Block 0x1141
0x1141: v1141(0x0) = CONST 
0x1144: REVERT v1141(0x0) v1141(0x0)
----------------------------------

Begin block 0x1145
prev = {'0x1136'}, next = {'0x1154', '0x1150'}
----------------------------------
Block 0x1145
0x1146: v1146(0x7) = CONST 
0x1148: v1148 = SLOAD v1146(0x7)
0x1149: v1149 = NUMBER 
0x114a: v114a = GT v1149 v1148
0x114b: v114b = ISZERO v114a
0x114c: v114c(0x1154) = CONST 
0x114f: JUMPI v114c(0x1154) v114b
----------------------------------

Begin block 0x1150
prev = {'0x1145'}, next = {}
----------------------------------
Block 0x1150
0x1150: v1150(0x0) = CONST 
0x1153: REVERT v1150(0x0) v1150(0x0)
----------------------------------

Begin block 0x1154
prev = {'0x1145'}, next = {'0x115e', '0x1162'}
----------------------------------
Block 0x1154
0x1155: v1155(0x0) = CONST 
0x1157: v1157 = CALLVALUE 
0x1158: v1158 = EQ v1157 v1155(0x0)
0x1159: v1159 = ISZERO v1158
0x115a: v115a(0x1162) = CONST 
0x115d: JUMPI v115a(0x1162) v1159
----------------------------------

Begin block 0x115e
prev = {'0x1154'}, next = {}
----------------------------------
Block 0x115e
0x115e: v115e(0x0) = CONST 
0x1161: REVERT v115e(0x0) v115e(0x0)
----------------------------------

Begin block 0x1162
prev = {'0x1154'}, next = {'0x12f7'}
----------------------------------
Block 0x1162
0x1163: v1163(0x116e) = CONST 
0x1166: v1166 = CALLVALUE 
0x1167: v1167(0x1900) = CONST 
0x116a: v116a(0x12f7) = CONST 
0x116d: JUMP v116a(0x12f7)
----------------------------------

Begin block 0x116e
prev = {'0x1324'}, next = {'0x132b'}
----------------------------------
Block 0x116e
0x1171: v1171(0x117c) = CONST 
0x1174: v1174(0x0) = CONST 
0x1176: v1176 = SLOAD v1174(0x0)
0x1178: v1178(0x132b) = CONST 
0x117b: JUMP v1178(0x132b)
----------------------------------

Begin block 0x117c
prev = {'0x134f'}, next = {'0x1195', '0x1191'}
----------------------------------
Block 0x117c
0x1180: v1180(0x12) = CONST 
0x1182: v1182(0xa) = CONST 
0x1184: v1184(0xde0b6b3a7640000) = EXP v1182(0xa) v1180(0x12)
0x1185: v1185(0x59682f00) = CONST 
0x118a: v118a(0x4d8c55aefb8c05b5c000000) = MUL v1185(0x59682f00) v1184(0xde0b6b3a7640000)
0x118b: v118b = LT v118a(0x4d8c55aefb8c05b5c000000) v1331
0x118c: v118c = ISZERO v118b
0x118d: v118d(0x1195) = CONST 
0x1190: JUMPI v118d(0x1195) v118c
----------------------------------

Begin block 0x1191
prev = {'0x117c'}, next = {}
----------------------------------
Block 0x1191
0x1191: v1191(0x0) = CONST 
0x1194: REVERT v1191(0x0) v1191(0x0)
----------------------------------

Begin block 0x1195
prev = {'0x117c'}, next = {'0x1238'}
----------------------------------
Block 0x1195
0x1197: v1197(0x0) = CONST 
0x119b: SSTORE v1197(0x0) v1331
0x119e: v119e(0x1) = CONST 
0x11a0: v11a0(0x0) = CONST 
0x11a2: v11a2 = CALLER 
0x11a3: v11a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11b8: v11b8 = AND v11a3(0xffffffffffffffffffffffffffffffffffffffff) v11a2
0x11b9: v11b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11ce: v11ce = AND v11b9(0xffffffffffffffffffffffffffffffffffffffff) v11b8
0x11d0: MSTORE v11a0(0x0) v11ce
0x11d1: v11d1(0x20) = CONST 
0x11d3: v11d3(0x20) = ADD v11d1(0x20) v11a0(0x0)
0x11d6: MSTORE v11d3(0x20) v119e(0x1)
0x11d7: v11d7(0x20) = CONST 
0x11d9: v11d9(0x40) = ADD v11d7(0x20) v11d3(0x20)
0x11da: v11da(0x0) = CONST 
0x11dc: v11dc = SHA3 v11da(0x0) v11d9(0x40)
0x11dd: v11dd(0x0) = CONST 
0x11e1: v11e1 = SLOAD v11dc
0x11e2: v11e2 = ADD v11e1 v12fd
0x11e8: SSTORE v11dc v11e2
0x11ea: v11ea = CALLER 
0x11eb: v11eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1200: v1200 = AND v11eb(0xffffffffffffffffffffffffffffffffffffffff) v11ea
0x1201: v1201(0xb33527d2e0d30b7aece2c5e82927985866c1b75173d671c14f4457bf67aa6910) = CONST 
0x1223: v1223(0x40) = CONST 
0x1225: v1225 = MLOAD v1223(0x40)
0x1229: MSTORE v1225 v12fd
0x122a: v122a(0x20) = CONST 
0x122c: v122c = ADD v122a(0x20) v1225
0x1230: v1230(0x40) = CONST 
0x1232: v1232 = MLOAD v1230(0x40)
0x1235: v1235 = SUB v122c v1232
0x1237: LOG2 v1232 v1235 v1201(0xb33527d2e0d30b7aece2c5e82927985866c1b75173d671c14f4457bf67aa6910) v1200
----------------------------------

Begin block 0x1238
prev = {'0x1195'}, next = {'0x651'}
----------------------------------
Block 0x1238
0x123b: JUMP v64a(0x651)
----------------------------------

Begin block 0x123c
prev = {'0x65e'}, next = {'0x666'}
----------------------------------
Block 0x123c
0x123d: v123d(0x12) = CONST 
0x123f: v123f(0xa) = CONST 
0x1241: v1241(0xde0b6b3a7640000) = EXP v123f(0xa) v123d(0x12)
0x1242: v1242(0x283baec0) = CONST 
0x1247: v1247(0x22e58cf5246568f83000000) = MUL v1242(0x283baec0) v1241(0xde0b6b3a7640000)
0x1249: JUMP v65f(0x666)
----------------------------------

Begin block 0x124a
prev = {'0x687'}, next = {'0x68f'}
----------------------------------
Block 0x124a
0x124b: v124b(0x6) = CONST 
0x124d: v124d = SLOAD v124b(0x6)
0x124f: JUMP v688(0x68f)
----------------------------------

Begin block 0x1250
prev = {'0x6b0'}, next = {'0x12d2'}
----------------------------------
Block 0x1250
0x1251: v1251(0x0) = CONST 
0x1253: v1253(0x2) = CONST 
0x1255: v1255(0x0) = CONST 
0x1258: v1258(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x126d: v126d = AND v1258(0xffffffffffffffffffffffffffffffffffffffff) v6ce
0x126e: v126e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1283: v1283 = AND v126e(0xffffffffffffffffffffffffffffffffffffffff) v126d
0x1285: MSTORE v1255(0x0) v1283
0x1286: v1286(0x20) = CONST 
0x1288: v1288(0x20) = ADD v1286(0x20) v1255(0x0)
0x128b: MSTORE v1288(0x20) v1253(0x2)
0x128c: v128c(0x20) = CONST 
0x128e: v128e(0x40) = ADD v128c(0x20) v1288(0x20)
0x128f: v128f(0x0) = CONST 
0x1291: v1291 = SHA3 v128f(0x0) v128e(0x40)
0x1292: v1292(0x0) = CONST 
0x1295: v1295(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12aa: v12aa = AND v1295(0xffffffffffffffffffffffffffffffffffffffff) v6ed
0x12ab: v12ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12c0: v12c0 = AND v12ab(0xffffffffffffffffffffffffffffffffffffffff) v12aa
0x12c2: MSTORE v1292(0x0) v12c0
0x12c3: v12c3(0x20) = CONST 
0x12c5: v12c5(0x20) = ADD v12c3(0x20) v1292(0x0)
0x12c8: MSTORE v12c5(0x20) v1291
0x12c9: v12c9(0x20) = CONST 
0x12cb: v12cb(0x40) = ADD v12c9(0x20) v12c5(0x20)
0x12cc: v12cc(0x0) = CONST 
0x12ce: v12ce = SHA3 v12cc(0x0) v12cb(0x40)
0x12cf: v12cf = SLOAD v12ce
----------------------------------

Begin block 0x12d2
prev = {'0x1250'}, next = {'0x6fb'}
----------------------------------
Block 0x12d2
0x12d7: JUMP v6b1(0x6fb)
----------------------------------

Begin block 0x12d8
prev = {'0xde1'}, next = {'0x12e7', '0x12e6'}
----------------------------------
Block 0x12d8
0x12d9: v12d9(0x0) = CONST 
0x12de: v12de = LT ve2c vdd1
0x12df: v12df = ISZERO v12de
0x12e0: v12e0 = ISZERO v12df
0x12e1: v12e1 = ISZERO v12e0
0x12e2: v12e2(0x12e7) = CONST 
0x12e5: JUMPI v12e2(0x12e7) v12e1
----------------------------------

Begin block 0x12e6
prev = {'0x12d8'}, next = {}
----------------------------------
Block 0x12e6
0x12e6: THROW 
----------------------------------

Begin block 0x12e7
prev = {'0x12d8'}, next = {'0x12f0'}
----------------------------------
Block 0x12e7
0x12ea: v12ea = SUB ve2c vdd1
----------------------------------

Begin block 0x12f0
prev = {'0x12e7'}, next = {'0xe32'}
----------------------------------
Block 0x12f0
0x12f6: JUMP ve27(0xe32)
----------------------------------

Begin block 0x12f7
prev = {'0x1162'}, next = {'0x1318', '0x1309'}
----------------------------------
Block 0x12f7
0x12f8: v12f8(0x0) = CONST 
0x12fd: v12fd = MUL v1166 v1167(0x1900)
0x1300: v1300(0x0) = CONST 
0x1303: v1303 = EQ v1166 v1300(0x0)
0x1305: v1305(0x1318) = CONST 
0x1308: JUMPI v1305(0x1318) v1303
----------------------------------

Begin block 0x1309
prev = {'0x12f7'}, next = {'0x1315', '0x1314'}
----------------------------------
Block 0x1309
0x130e: v130e = ISZERO v1166
0x130f: v130f = ISZERO v130e
0x1310: v1310(0x1315) = CONST 
0x1313: JUMPI v1310(0x1315) v130f
----------------------------------

Begin block 0x1314
prev = {'0x1309'}, next = {}
----------------------------------
Block 0x1314
0x1314: THROW 
----------------------------------

Begin block 0x1315
prev = {'0x1309'}, next = {'0x1318'}
----------------------------------
Block 0x1315
0x1316: v1316 = DIV v12fd v1166
0x1317: v1317 = EQ v1316 v1167(0x1900)
----------------------------------

Begin block 0x1318
prev = {'0x1315', '0x12f7'}, next = {'0x1320', '0x131f'}
----------------------------------
Block 0x1318
0x1318_0x0: v1318_0 = PHI v1303 v1317
0x1319: v1319 = ISZERO v1318_0
0x131a: v131a = ISZERO v1319
0x131b: v131b(0x1320) = CONST 
0x131e: JUMPI v131b(0x1320) v131a
----------------------------------

Begin block 0x131f
prev = {'0x1318'}, next = {}
----------------------------------
Block 0x131f
0x131f: THROW 
----------------------------------

Begin block 0x1320
prev = {'0x1318'}, next = {'0x1324'}
----------------------------------
Block 0x1320
----------------------------------

Begin block 0x1324
prev = {'0x1320'}, next = {'0x116e'}
----------------------------------
Block 0x1324
0x132a: JUMP v1163(0x116e)
----------------------------------

Begin block 0x132b
prev = {'0x116e'}, next = {'0x133e', '0x1343'}
----------------------------------
Block 0x132b
0x132c: v132c(0x0) = CONST 
0x1331: v1331 = ADD v1176 v12fd
0x1336: v1336 = LT v1331 v1176
0x1337: v1337 = ISZERO v1336
0x1339: v1339 = ISZERO v1337
0x133a: v133a(0x1343) = CONST 
0x133d: JUMPI v133a(0x1343) v1339
----------------------------------

Begin block 0x133e
prev = {'0x132b'}, next = {'0x1343'}
----------------------------------
Block 0x133e
0x1341: v1341 = LT v1331 v12fd
0x1342: v1342 = ISZERO v1341
----------------------------------

Begin block 0x1343
prev = {'0x132b', '0x133e'}, next = {'0x134a', '0x134b'}
----------------------------------
Block 0x1343
0x1343_0x0: v1343_0 = PHI v1337 v1342
0x1344: v1344 = ISZERO v1343_0
0x1345: v1345 = ISZERO v1344
0x1346: v1346(0x134b) = CONST 
0x1349: JUMPI v1346(0x134b) v1345
----------------------------------

Begin block 0x134a
prev = {'0x1343'}, next = {}
----------------------------------
Block 0x134a
0x134a: THROW 
----------------------------------

Begin block 0x134b
prev = {'0x1343'}, next = {'0x134f'}
----------------------------------
Block 0x134b
----------------------------------

Begin block 0x134f
prev = {'0x134b'}, next = {'0x117c'}
----------------------------------
Block 0x134f
0x1355: JUMP v1171(0x117c)
----------------------------------

Begin block 0x13ae
prev = {'0xb'}, next = {}
----------------------------------
Block 0x13ae
0x13af: v13af(0x12b) = CONST 
0x13b0: CALLPRIVATE v13af(0x12b)
----------------------------------

Begin block 0x13b1
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x13b1
0x13b2: v13b2(0x180) = CONST 
0x13b3: CALLPRIVATE v13b2(0x180)
----------------------------------

Begin block 0x13b4
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x13b4
0x13b5: v13b5(0x20f) = CONST 
0x13b6: CALLPRIVATE v13b5(0x20f)
----------------------------------

Begin block 0x13b7
prev = {'0x55'}, next = {}
----------------------------------
Block 0x13b7
0x13b8: v13b8(0x269) = CONST 
0x13b9: CALLPRIVATE v13b8(0x269)
----------------------------------

Begin block 0x13ba
prev = {'0x60'}, next = {}
----------------------------------
Block 0x13ba
0x13bb: v13bb(0x292) = CONST 
0x13bc: CALLPRIVATE v13bb(0x292)
----------------------------------

Begin block 0x13bd
prev = {'0x6b'}, next = {}
----------------------------------
Block 0x13bd
0x13be: v13be(0x2bb) = CONST 
0x13bf: CALLPRIVATE v13be(0x2bb)
----------------------------------

Begin block 0x13c0
prev = {'0x76'}, next = {}
----------------------------------
Block 0x13c0
0x13c1: v13c1(0x334) = CONST 
0x13c2: CALLPRIVATE v13c1(0x334)
----------------------------------

Begin block 0x13c3
prev = {'0x81'}, next = {}
----------------------------------
Block 0x13c3
0x13c4: v13c4(0x35d) = CONST 
0x13c5: CALLPRIVATE v13c4(0x35d)
----------------------------------

Begin block 0x13c6
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x13c6
0x13c7: v13c7(0x386) = CONST 
0x13c8: CALLPRIVATE v13c7(0x386)
----------------------------------

Begin block 0x13c9
prev = {'0x97'}, next = {}
----------------------------------
Block 0x13c9
0x13ca: v13ca(0x39b) = CONST 
0x13cb: CALLPRIVATE v13ca(0x39b)
----------------------------------

Begin block 0x13cc
prev = {'0xa2'}, next = {}
----------------------------------
Block 0x13cc
0x13cd: v13cd(0x42a) = CONST 
0x13ce: CALLPRIVATE v13cd(0x42a)
----------------------------------

Begin block 0x13cf
prev = {'0xad'}, next = {}
----------------------------------
Block 0x13cf
0x13d0: v13d0(0x43f) = CONST 
0x13d1: CALLPRIVATE v13d0(0x43f)
----------------------------------

Begin block 0x13d2
prev = {'0xb8'}, next = {}
----------------------------------
Block 0x13d2
0x13d3: v13d3(0x468) = CONST 
0x13d4: CALLPRIVATE v13d3(0x468)
----------------------------------

Begin block 0x13d5
prev = {'0xc3'}, next = {}
----------------------------------
Block 0x13d5
0x13d6: v13d6(0x4b5) = CONST 
0x13d7: CALLPRIVATE v13d6(0x4b5)
----------------------------------

Begin block 0x13d8
prev = {'0xce'}, next = {}
----------------------------------
Block 0x13d8
0x13d9: v13d9(0x4e2) = CONST 
0x13da: CALLPRIVATE v13d9(0x4e2)
----------------------------------

Begin block 0x13db
prev = {'0xd9'}, next = {}
----------------------------------
Block 0x13db
0x13dc: v13dc(0x50b) = CONST 
0x13dd: CALLPRIVATE v13dc(0x50b)
----------------------------------

Begin block 0x13de
prev = {'0xe4'}, next = {}
----------------------------------
Block 0x13de
0x13df: v13df(0x59a) = CONST 
0x13e0: CALLPRIVATE v13df(0x59a)
----------------------------------

Begin block 0x13e1
prev = {'0xef'}, next = {}
----------------------------------
Block 0x13e1
0x13e2: v13e2(0x5ef) = CONST 
0x13e3: CALLPRIVATE v13e2(0x5ef)
----------------------------------

Begin block 0x13e4
prev = {'0xfa'}, next = {}
----------------------------------
Block 0x13e4
0x13e5: v13e5(0x649) = CONST 
0x13e6: CALLPRIVATE v13e5(0x649)
----------------------------------

Begin block 0x13e7
prev = {'0x105'}, next = {}
----------------------------------
Block 0x13e7
0x13e8: v13e8(0x653) = CONST 
0x13e9: CALLPRIVATE v13e8(0x653)
----------------------------------

Begin block 0x13ea
prev = {'0x110'}, next = {}
----------------------------------
Block 0x13ea
0x13eb: v13eb(0x67c) = CONST 
0x13ec: CALLPRIVATE v13eb(0x67c)
----------------------------------

Begin block 0x13ed
prev = {'0x11b'}, next = {}
----------------------------------
Block 0x13ed
0x13ee: v13ee(0x6a5) = CONST 
0x13ef: CALLPRIVATE v13ee(0x6a5)
----------------------------------
