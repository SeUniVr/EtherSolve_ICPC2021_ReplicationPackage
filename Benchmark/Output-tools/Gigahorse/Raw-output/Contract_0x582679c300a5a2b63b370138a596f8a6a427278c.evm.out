
Begin block 0x0
prev = {}, next = {'0xd', '0xba8'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xb88: vb88(0xba8) = CONST 
0xb89: JUMPI vb88(0xba8) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x40', '0xbab'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0xb8a: vb8a(0xbab) = CONST 
0xb8b: JUMPI vb8a(0xbab) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0xbae', '0x4b'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0xb8c: vb8c(0xbae) = CONST 
0xb8d: JUMPI vb8c(0xbae) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0xbb1', '0x56'}
----------------------------------
Block 0x4b
0x4c: v4c(0x18160ddd) = CONST 
0x51: v51 = EQ v4c(0x18160ddd) v34
0xb8e: vb8e(0xbb1) = CONST 
0xb8f: JUMPI vb8e(0xbb1) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x61', '0xbb4'}
----------------------------------
Block 0x56
0x57: v57(0x23b872dd) = CONST 
0x5c: v5c = EQ v57(0x23b872dd) v34
0xb90: vb90(0xbb4) = CONST 
0xb91: JUMPI vb90(0xbb4) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x6c', '0xbb7'}
----------------------------------
Block 0x61
0x62: v62(0x313ce567) = CONST 
0x67: v67 = EQ v62(0x313ce567) v34
0xb92: vb92(0xbb7) = CONST 
0xb93: JUMPI vb92(0xbb7) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0xbba', '0x77'}
----------------------------------
Block 0x6c
0x6d: v6d(0x70a08231) = CONST 
0x72: v72 = EQ v6d(0x70a08231) v34
0xb94: vb94(0xbba) = CONST 
0xb95: JUMPI vb94(0xbba) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0xbbd', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x79ba5097) = CONST 
0x7d: v7d = EQ v78(0x79ba5097) v34
0xb96: vb96(0xbbd) = CONST 
0xb97: JUMPI vb96(0xbbd) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0xbc0', '0x8d'}
----------------------------------
Block 0x82
0x83: v83(0x8da5cb5b) = CONST 
0x88: v88 = EQ v83(0x8da5cb5b) v34
0xb98: vb98(0xbc0) = CONST 
0xb99: JUMPI vb98(0xbc0) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x98', '0xbc3'}
----------------------------------
Block 0x8d
0x8e: v8e(0x95d89b41) = CONST 
0x93: v93 = EQ v8e(0x95d89b41) v34
0xb9a: vb9a(0xbc3) = CONST 
0xb9b: JUMPI vb9a(0xbc3) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0xa3', '0xbc6'}
----------------------------------
Block 0x98
0x99: v99(0xa9059cbb) = CONST 
0x9e: v9e = EQ v99(0xa9059cbb) v34
0xb9c: vb9c(0xbc6) = CONST 
0xb9d: JUMPI vb9c(0xbc6) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0xbc9', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0xcae9ca51) = CONST 
0xa9: va9 = EQ va4(0xcae9ca51) v34
0xb9e: vb9e(0xbc9) = CONST 
0xb9f: JUMPI vb9e(0xbc9) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0xbcc'}
----------------------------------
Block 0xae
0xaf: vaf(0xd4ee1d90) = CONST 
0xb4: vb4 = EQ vaf(0xd4ee1d90) v34
0xba0: vba0(0xbcc) = CONST 
0xba1: JUMPI vba0(0xbcc) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0xbcf'}
----------------------------------
Block 0xb9
0xba: vba(0xdc39d06d) = CONST 
0xbf: vbf = EQ vba(0xdc39d06d) v34
0xba2: vba2(0xbcf) = CONST 
0xba3: JUMPI vba2(0xbcf) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0xbd2', '0xcf'}
----------------------------------
Block 0xc4
0xc5: vc5(0xdd62ed3e) = CONST 
0xca: vca = EQ vc5(0xdd62ed3e) v34
0xba4: vba4(0xbd2) = CONST 
0xba5: JUMPI vba4(0xbd2) vca
----------------------------------

Begin block 0xcf
prev = {'0xc4'}, next = {'0xbd5', '0xba8'}
----------------------------------
Block 0xcf
0xd0: vd0(0xf2fde38b) = CONST 
0xd5: vd5 = EQ vd0(0xf2fde38b) v34
0xba6: vba6(0xbd5) = CONST 
0xba7: JUMPI vba6(0xbd5) vd5
----------------------------------

Begin block 0xda
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xda
0xdb: vdb(0x0) = CONST 
0xde: REVERT vdb(0x0) vdb(0x0)
----------------------------------

Begin block 0xdf
prev = {}, next = {'0xeb', '0xe7'}
----------------------------------
function name()()
Block 0xdf
0xe0: ve0 = CALLVALUE 
0xe2: ve2 = ISZERO ve0
0xe3: ve3(0xeb) = CONST 
0xe6: JUMPI ve3(0xeb) ve2
----------------------------------

Begin block 0xe7
prev = {'0xdf'}, next = {}
----------------------------------
Block 0xe7
0xe7: ve7(0x0) = CONST 
0xea: REVERT ve7(0x0) ve7(0x0)
----------------------------------

Begin block 0xeb
prev = {'0xdf'}, next = {'0xf40xdf'}
----------------------------------
Block 0xeb
0xed: ved(0xf4) = CONST 
0xf0: vf0(0x498) = CONST 
0xf3: vf3_0, vf3_1 = CALLPRIVATE vf0(0x498) ved(0xf4)
----------------------------------

Begin block 0xf40xdf
prev = {'0xeb'}, next = {'0x1160xdf'}
----------------------------------
Block 0xf40xdf
0xf50xdf: vdff5(0x40) = CONST 
0xf80xdf: vdff8 = MLOAD vdff5(0x40)
0xf90xdf: vdff9(0x20) = CONST 
0xfd0xdf: MSTORE vdff8 vdff9(0x20)
0xff0xdf: vdfff = MLOAD vf3_0
0x1020xdf: vdf102 = ADD vdff8 vdff9(0x20)
0x1030xdf: MSTORE vdf102 vdfff
0x1050xdf: vdf105 = MLOAD vf3_0
0x10c0xdf: vdf10c = ADD vdff8 vdff5(0x40)
0x10f0xdf: vdf10f = ADD vf3_0 vdff9(0x20)
0x1140xdf: vdf114(0x0) = CONST 
----------------------------------

Begin block 0xf40x2c6
prev = {'0x2d2'}, next = {'0x1160x2c6'}
----------------------------------
Block 0xf40x2c6
0xf50x2c6: v2c6f5(0x40) = CONST 
0xf80x2c6: v2c6f8 = MLOAD v2c6f5(0x40)
0xf90x2c6: v2c6f9(0x20) = CONST 
0xfd0x2c6: MSTORE v2c6f8 v2c6f9(0x20)
0xff0x2c6: v2c6ff = MLOAD v2da_0
0x1020x2c6: v2c6102 = ADD v2c6f8 v2c6f9(0x20)
0x1030x2c6: MSTORE v2c6102 v2c6ff
0x1050x2c6: v2c6105 = MLOAD v2da_0
0x10c0x2c6: v2c610c = ADD v2c6f8 v2c6f5(0x40)
0x10f0x2c6: v2c610f = ADD v2da_0 v2c6f9(0x20)
0x1140x2c6: v2c6114(0x0) = CONST 
----------------------------------

Begin block 0x1160xdf
prev = {'0xf40xdf', '0x11f0xdf'}, next = {'0x12e0xdf', '0x11f0xdf'}
----------------------------------
Block 0x1160xdf
0x1160xdf_0x0: v116df_0 = PHI vdf114(0x0) vdf129
0x1190xdf: vdf119 = LT v116df_0 vdf105
0x11a0xdf: vdf11a = ISZERO vdf119
0x11b0xdf: vdf11b(0x12e) = CONST 
0x11e0xdf: JUMPI vdf11b(0x12e) vdf11a
----------------------------------

Begin block 0x1160x2c6
prev = {'0x11f0x2c6', '0xf40x2c6'}, next = {'0x11f0x2c6', '0x12e0x2c6'}
----------------------------------
Block 0x1160x2c6
0x1160x2c6_0x0: v1162c6_0 = PHI v2c6114(0x0) v2c6129
0x1190x2c6: v2c6119 = LT v1162c6_0 v2c6105
0x11a0x2c6: v2c611a = ISZERO v2c6119
0x11b0x2c6: v2c611b(0x12e) = CONST 
0x11e0x2c6: JUMPI v2c611b(0x12e) v2c611a
----------------------------------

Begin block 0x11f0xdf
prev = {'0x1160xdf'}, next = {'0x1160xdf'}
----------------------------------
Block 0x11f0xdf
0x11f0xdf_0x0: v11fdf_0 = PHI vdf114(0x0) vdf129
0x1210xdf: vdf121 = ADD v11fdf_0 vdf10f
0x1220xdf: vdf122 = MLOAD vdf121
0x1250xdf: vdf125 = ADD v11fdf_0 vdf10c
0x1260xdf: MSTORE vdf125 vdf122
0x1270xdf: vdf127(0x20) = CONST 
0x1290xdf: vdf129 = ADD vdf127(0x20) v11fdf_0
0x12a0xdf: vdf12a(0x116) = CONST 
0x12d0xdf: JUMP vdf12a(0x116)
----------------------------------

Begin block 0x11f0x2c6
prev = {'0x1160x2c6'}, next = {'0x1160x2c6'}
----------------------------------
Block 0x11f0x2c6
0x11f0x2c6_0x0: v11f2c6_0 = PHI v2c6114(0x0) v2c6129
0x1210x2c6: v2c6121 = ADD v11f2c6_0 v2c610f
0x1220x2c6: v2c6122 = MLOAD v2c6121
0x1250x2c6: v2c6125 = ADD v11f2c6_0 v2c610c
0x1260x2c6: MSTORE v2c6125 v2c6122
0x1270x2c6: v2c6127(0x20) = CONST 
0x1290x2c6: v2c6129 = ADD v2c6127(0x20) v11f2c6_0
0x12a0x2c6: v2c612a(0x116) = CONST 
0x12d0x2c6: JUMP v2c612a(0x116)
----------------------------------

Begin block 0x12e0xdf
prev = {'0x1160xdf'}, next = {'0x1420xdf', '0x15b0xdf'}
----------------------------------
Block 0x12e0xdf
0x1370xdf: vdf137 = ADD vdf105 vdf10c
0x1390xdf: vdf139(0x1f) = CONST 
0x13b0xdf: vdf13b = AND vdf139(0x1f) vdf105
0x13d0xdf: vdf13d = ISZERO vdf13b
0x13e0xdf: vdf13e(0x15b) = CONST 
0x1410xdf: JUMPI vdf13e(0x15b) vdf13d
----------------------------------

Begin block 0x12e0x2c6
prev = {'0x1160x2c6'}, next = {'0x15b0x2c6', '0x1420x2c6'}
----------------------------------
Block 0x12e0x2c6
0x1370x2c6: v2c6137 = ADD v2c6105 v2c610c
0x1390x2c6: v2c6139(0x1f) = CONST 
0x13b0x2c6: v2c613b = AND v2c6139(0x1f) v2c6105
0x13d0x2c6: v2c613d = ISZERO v2c613b
0x13e0x2c6: v2c613e(0x15b) = CONST 
0x1410x2c6: JUMPI v2c613e(0x15b) v2c613d
----------------------------------

Begin block 0x1420xdf
prev = {'0x12e0xdf'}, next = {'0x15b0xdf'}
----------------------------------
Block 0x1420xdf
0x1440xdf: vdf144 = SUB vdf137 vdf13b
0x1460xdf: vdf146 = MLOAD vdf144
0x1470xdf: vdf147(0x1) = CONST 
0x14a0xdf: vdf14a(0x20) = CONST 
0x14c0xdf: vdf14c = SUB vdf14a(0x20) vdf13b
0x14d0xdf: vdf14d(0x100) = CONST 
0x1500xdf: vdf150 = EXP vdf14d(0x100) vdf14c
0x1510xdf: vdf151 = SUB vdf150 vdf147(0x1)
0x1520xdf: vdf152 = NOT vdf151
0x1530xdf: vdf153 = AND vdf152 vdf146
0x1550xdf: MSTORE vdf144 vdf153
0x1560xdf: vdf156(0x20) = CONST 
0x1580xdf: vdf158 = ADD vdf156(0x20) vdf144
----------------------------------

Begin block 0x1420x2c6
prev = {'0x12e0x2c6'}, next = {'0x15b0x2c6'}
----------------------------------
Block 0x1420x2c6
0x1440x2c6: v2c6144 = SUB v2c6137 v2c613b
0x1460x2c6: v2c6146 = MLOAD v2c6144
0x1470x2c6: v2c6147(0x1) = CONST 
0x14a0x2c6: v2c614a(0x20) = CONST 
0x14c0x2c6: v2c614c = SUB v2c614a(0x20) v2c613b
0x14d0x2c6: v2c614d(0x100) = CONST 
0x1500x2c6: v2c6150 = EXP v2c614d(0x100) v2c614c
0x1510x2c6: v2c6151 = SUB v2c6150 v2c6147(0x1)
0x1520x2c6: v2c6152 = NOT v2c6151
0x1530x2c6: v2c6153 = AND v2c6152 v2c6146
0x1550x2c6: MSTORE v2c6144 v2c6153
0x1560x2c6: v2c6156(0x20) = CONST 
0x1580x2c6: v2c6158 = ADD v2c6156(0x20) v2c6144
----------------------------------

Begin block 0x15b0xdf
prev = {'0x1420xdf', '0x12e0xdf'}, next = {}
----------------------------------
Block 0x15b0xdf
0x15b0xdf_0x1: v15bdf_1 = PHI vdf137 vdf158
0x1610xdf: vdf161(0x40) = CONST 
0x1630xdf: vdf163 = MLOAD vdf161(0x40)
0x1660xdf: vdf166 = SUB v15bdf_1 vdf163
0x1680xdf: RETURN vdf163 vdf166
----------------------------------

Begin block 0x15b0x2c6
prev = {'0x1420x2c6', '0x12e0x2c6'}, next = {}
----------------------------------
Block 0x15b0x2c6
0x15b0x2c6_0x1: v15b2c6_1 = PHI v2c6137 v2c6158
0x1610x2c6: v2c6161(0x40) = CONST 
0x1630x2c6: v2c6163 = MLOAD v2c6161(0x40)
0x1660x2c6: v2c6166 = SUB v15b2c6_1 v2c6163
0x1680x2c6: RETURN v2c6163 v2c6166
----------------------------------

Begin block 0x169
prev = {}, next = {'0x171', '0x175'}
----------------------------------
function approve(address,uint256)()
Block 0x169
0x16a: v16a = CALLVALUE 
0x16c: v16c = ISZERO v16a
0x16d: v16d(0x175) = CONST 
0x170: JUMPI v16d(0x175) v16c
----------------------------------

Begin block 0x171
prev = {'0x169'}, next = {}
----------------------------------
Block 0x171
0x171: v171(0x0) = CONST 
0x174: REVERT v171(0x0) v171(0x0)
----------------------------------

Begin block 0x175
prev = {'0x169'}, next = {'0x18c', '0x188'}
----------------------------------
Block 0x175
0x177: v177(0x1a2) = CONST 
0x17a: v17a(0x4) = CONST 
0x17d: v17d = CALLDATASIZE 
0x17e: v17e = SUB v17d v17a(0x4)
0x17f: v17f(0x40) = CONST 
0x182: v182 = LT v17e v17f(0x40)
0x183: v183 = ISZERO v182
0x184: v184(0x18c) = CONST 
0x187: JUMPI v184(0x18c) v183
----------------------------------

Begin block 0x188
prev = {'0x175'}, next = {}
----------------------------------
Block 0x188
0x188: v188(0x0) = CONST 
0x18b: REVERT v188(0x0) v188(0x0)
----------------------------------

Begin block 0x18c
prev = {'0x175'}, next = {'0x526'}
----------------------------------
Block 0x18c
0x18e: v18e(0x1) = CONST 
0x190: v190(0xa0) = CONST 
0x192: v192(0x2) = CONST 
0x194: v194(0x10000000000000000000000000000000000000000) = EXP v192(0x2) v190(0xa0)
0x195: v195(0xffffffffffffffffffffffffffffffffffffffff) = SUB v194(0x10000000000000000000000000000000000000000) v18e(0x1)
0x197: v197 = CALLDATALOAD v17a(0x4)
0x198: v198 = AND v197 v195(0xffffffffffffffffffffffffffffffffffffffff)
0x19a: v19a(0x20) = CONST 
0x19c: v19c = ADD v19a(0x20) v17a(0x4)
0x19d: v19d = CALLDATALOAD v19c
0x19e: v19e(0x526) = CONST 
0x1a1: JUMP v19e(0x526)
----------------------------------

Begin block 0x1a20x169
prev = {'0x5870x169'}, next = {}
----------------------------------
Block 0x1a20x169
0x1a30x169: v1691a3(0x40) = CONST 
0x1a60x169: v1691a6 = MLOAD v1691a3(0x40)
0x1a80x169: v1691a8 = ISZERO v585(0x1)
0x1a90x169: v1691a9 = ISZERO v1691a8
0x1ab0x169: MSTORE v1691a6 v1691a9
0x1ac0x169: v1691ac = MLOAD v1691a3(0x40)
0x1b00x169: v1691b0 = SUB v1691a6 v1691ac
0x1b10x169: v1691b1(0x20) = CONST 
0x1b30x169: v1691b3 = ADD v1691b1(0x20) v1691b0
0x1b50x169: RETURN v1691ac v1691b3
----------------------------------

Begin block 0x1a20x1dd
prev = {'0x67a'}, next = {}
----------------------------------
Block 0x1a20x1dd
0x1a30x1dd: v1dd1a3(0x40) = CONST 
0x1a60x1dd: v1dd1a6 = MLOAD v1dd1a3(0x40)
0x1a80x1dd: v1dd1a8 = ISZERO v6d3(0x1)
0x1a90x1dd: v1dd1a9 = ISZERO v1dd1a8
0x1ab0x1dd: MSTORE v1dd1a6 v1dd1a9
0x1ac0x1dd: v1dd1ac = MLOAD v1dd1a3(0x40)
0x1b00x1dd: v1dd1b0 = SUB v1dd1a6 v1dd1ac
0x1b10x1dd: v1dd1b1(0x20) = CONST 
0x1b30x1dd: v1dd1b3 = ADD v1dd1b1(0x20) v1dd1b0
0x1b50x1dd: RETURN v1dd1ac v1dd1b3
----------------------------------

Begin block 0x1a20x2db
prev = {'0x840'}, next = {}
----------------------------------
Block 0x1a20x2db
0x1a30x2db: v2db1a3(0x40) = CONST 
0x1a60x2db: v2db1a6 = MLOAD v2db1a3(0x40)
0x1a80x2db: v2db1a8 = ISZERO v897(0x1)
0x1a90x2db: v2db1a9 = ISZERO v2db1a8
0x1ab0x2db: MSTORE v2db1a6 v2db1a9
0x1ac0x2db: v2db1ac = MLOAD v2db1a3(0x40)
0x1b00x2db: v2db1b0 = SUB v2db1a6 v2db1ac
0x1b10x2db: v2db1b1(0x20) = CONST 
0x1b30x2db: v2db1b3 = ADD v2db1b1(0x20) v2db1b0
0x1b50x2db: RETURN v2db1ac v2db1b3
----------------------------------

Begin block 0x1a20x314
prev = {'0x9f1'}, next = {}
----------------------------------
Block 0x1a20x314
0x1a30x314: v3141a3(0x40) = CONST 
0x1a60x314: v3141a6 = MLOAD v3141a3(0x40)
0x1a80x314: v3141a8 = ISZERO v9f3(0x1)
0x1a90x314: v3141a9 = ISZERO v3141a8
0x1ab0x314: MSTORE v3141a6 v3141a9
0x1ac0x314: v3141ac = MLOAD v3141a3(0x40)
0x1b00x314: v3141b0 = SUB v3141a6 v3141ac
0x1b10x314: v3141b1(0x20) = CONST 
0x1b30x314: v3141b3 = ADD v3141b1(0x20) v3141b0
0x1b50x314: RETURN v3141ac v3141b3
----------------------------------

Begin block 0x1a20x3f1
prev = {'0xac0'}, next = {}
----------------------------------
Block 0x1a20x3f1
0x1a30x3f1: v3f11a3(0x40) = CONST 
0x1a60x3f1: v3f11a6 = MLOAD v3f11a3(0x40)
0x1a80x3f1: v3f11a8 = ISZERO vac2
0x1a90x3f1: v3f11a9 = ISZERO v3f11a8
0x1ab0x3f1: MSTORE v3f11a6 v3f11a9
0x1ac0x3f1: v3f11ac = MLOAD v3f11a3(0x40)
0x1b00x3f1: v3f11b0 = SUB v3f11a6 v3f11ac
0x1b10x3f1: v3f11b1(0x20) = CONST 
0x1b30x3f1: v3f11b3 = ADD v3f11b1(0x20) v3f11b0
0x1b50x3f1: RETURN v3f11ac v3f11b3
----------------------------------

Begin block 0x1b6
prev = {}, next = {'0x1be', '0x1c2'}
----------------------------------
function totalSupply()()
Block 0x1b6
0x1b7: v1b7 = CALLVALUE 
0x1b9: v1b9 = ISZERO v1b7
0x1ba: v1ba(0x1c2) = CONST 
0x1bd: JUMPI v1ba(0x1c2) v1b9
----------------------------------

Begin block 0x1be
prev = {'0x1b6'}, next = {}
----------------------------------
Block 0x1be
0x1be: v1be(0x0) = CONST 
0x1c1: REVERT v1be(0x0) v1be(0x0)
----------------------------------

Begin block 0x1c2
prev = {'0x1b6'}, next = {'0x58d'}
----------------------------------
Block 0x1c2
0x1c4: v1c4(0x1cb) = CONST 
0x1c7: v1c7(0x58d) = CONST 
0x1ca: JUMP v1c7(0x58d)
----------------------------------

Begin block 0x1cb0x1b6
prev = {'0x5cb'}, next = {}
----------------------------------
Block 0x1cb0x1b6
0x1cc0x1b6: v1b61cc(0x40) = CONST 
0x1cf0x1b6: v1b61cf = MLOAD v1b61cc(0x40)
0x1d20x1b6: MSTORE v1b61cf v5ca_0
0x1d30x1b6: v1b61d3 = MLOAD v1b61cc(0x40)
0x1d70x1b6: v1b61d7 = SUB v1b61cf v1b61d3
0x1d80x1b6: v1b61d8(0x20) = CONST 
0x1da0x1b6: v1b61da = ADD v1b61d8(0x20) v1b61d7
0x1dc0x1b6: RETURN v1b61d3 v1b61da
----------------------------------

Begin block 0x1cb0x24b
prev = {'0x6e4'}, next = {}
----------------------------------
Block 0x1cb0x24b
0x1cc0x24b: v24b1cc(0x40) = CONST 
0x1cf0x24b: v24b1cf = MLOAD v24b1cc(0x40)
0x1d20x24b: MSTORE v24b1cf v6fc
0x1d30x24b: v24b1d3 = MLOAD v24b1cc(0x40)
0x1d70x24b: v24b1d7 = SUB v24b1cf v24b1d3
0x1d80x24b: v24b1d8(0x20) = CONST 
0x1da0x24b: v24b1da = ADD v24b1d8(0x20) v24b1d7
0x1dc0x24b: RETURN v24b1d3 v24b1da
----------------------------------

Begin block 0x1cb0x42a
prev = {'0xac9'}, next = {}
----------------------------------
Block 0x1cb0x42a
0x1cc0x42a: v42a1cc(0x40) = CONST 
0x1cf0x42a: v42a1cf = MLOAD v42a1cc(0x40)
0x1d20x42a: MSTORE v42a1cf vaf1
0x1d30x42a: v42a1d3 = MLOAD v42a1cc(0x40)
0x1d70x42a: v42a1d7 = SUB v42a1cf v42a1d3
0x1d80x42a: v42a1d8(0x20) = CONST 
0x1da0x42a: v42a1da = ADD v42a1d8(0x20) v42a1d7
0x1dc0x42a: RETURN v42a1d3 v42a1da
----------------------------------

Begin block 0x1dd
prev = {}, next = {'0x1e9', '0x1e5'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1dd
0x1de: v1de = CALLVALUE 
0x1e0: v1e0 = ISZERO v1de
0x1e1: v1e1(0x1e9) = CONST 
0x1e4: JUMPI v1e1(0x1e9) v1e0
----------------------------------

Begin block 0x1e5
prev = {'0x1dd'}, next = {}
----------------------------------
Block 0x1e5
0x1e5: v1e5(0x0) = CONST 
0x1e8: REVERT v1e5(0x0) v1e5(0x0)
----------------------------------

Begin block 0x1e9
prev = {'0x1dd'}, next = {'0x1fc', '0x200'}
----------------------------------
Block 0x1e9
0x1eb: v1eb(0x1a2) = CONST 
0x1ee: v1ee(0x4) = CONST 
0x1f1: v1f1 = CALLDATASIZE 
0x1f2: v1f2 = SUB v1f1 v1ee(0x4)
0x1f3: v1f3(0x60) = CONST 
0x1f6: v1f6 = LT v1f2 v1f3(0x60)
0x1f7: v1f7 = ISZERO v1f6
0x1f8: v1f8(0x200) = CONST 
0x1fb: JUMPI v1f8(0x200) v1f7
----------------------------------

Begin block 0x1fc
prev = {'0x1e9'}, next = {}
----------------------------------
Block 0x1fc
0x1fc: v1fc(0x0) = CONST 
0x1ff: REVERT v1fc(0x0) v1fc(0x0)
----------------------------------

Begin block 0x200
prev = {'0x1e9'}, next = {'0x5d0'}
----------------------------------
Block 0x200
0x202: v202(0x1) = CONST 
0x204: v204(0xa0) = CONST 
0x206: v206(0x2) = CONST 
0x208: v208(0x10000000000000000000000000000000000000000) = EXP v206(0x2) v204(0xa0)
0x209: v209(0xffffffffffffffffffffffffffffffffffffffff) = SUB v208(0x10000000000000000000000000000000000000000) v202(0x1)
0x20b: v20b = CALLDATALOAD v1ee(0x4)
0x20d: v20d = AND v209(0xffffffffffffffffffffffffffffffffffffffff) v20b
0x20f: v20f(0x20) = CONST 
0x212: v212 = ADD v1ee(0x4) v20f(0x20)
0x213: v213 = CALLDATALOAD v212
0x216: v216 = AND v209(0xffffffffffffffffffffffffffffffffffffffff) v213
0x218: v218(0x40) = CONST 
0x21a: v21a = ADD v218(0x40) v1ee(0x4)
0x21b: v21b = CALLDATALOAD v21a
0x21c: v21c(0x5d0) = CONST 
0x21f: JUMP v21c(0x5d0)
----------------------------------

Begin block 0x220
prev = {}, next = {'0x22c', '0x228'}
----------------------------------
function decimals()()
Block 0x220
0x221: v221 = CALLVALUE 
0x223: v223 = ISZERO v221
0x224: v224(0x22c) = CONST 
0x227: JUMPI v224(0x22c) v223
----------------------------------

Begin block 0x228
prev = {'0x220'}, next = {}
----------------------------------
Block 0x228
0x228: v228(0x0) = CONST 
0x22b: REVERT v228(0x0) v228(0x0)
----------------------------------

Begin block 0x22c
prev = {'0x220'}, next = {'0x6db'}
----------------------------------
Block 0x22c
0x22e: v22e(0x235) = CONST 
0x231: v231(0x6db) = CONST 
0x234: JUMP v231(0x6db)
----------------------------------

Begin block 0x235
prev = {'0x6db'}, next = {}
----------------------------------
Block 0x235
0x236: v236(0x40) = CONST 
0x239: v239 = MLOAD v236(0x40)
0x23a: v23a(0xff) = CONST 
0x23e: v23e = AND v6e1 v23a(0xff)
0x240: MSTORE v239 v23e
0x241: v241 = MLOAD v236(0x40)
0x245: v245 = SUB v239 v241
0x246: v246(0x20) = CONST 
0x248: v248 = ADD v246(0x20) v245
0x24a: RETURN v241 v248
----------------------------------

Begin block 0x24b
prev = {}, next = {'0x253', '0x257'}
----------------------------------
function balanceOf(address)()
Block 0x24b
0x24c: v24c = CALLVALUE 
0x24e: v24e = ISZERO v24c
0x24f: v24f(0x257) = CONST 
0x252: JUMPI v24f(0x257) v24e
----------------------------------

Begin block 0x253
prev = {'0x24b'}, next = {}
----------------------------------
Block 0x253
0x253: v253(0x0) = CONST 
0x256: REVERT v253(0x0) v253(0x0)
----------------------------------

Begin block 0x257
prev = {'0x24b'}, next = {'0x26a', '0x26e'}
----------------------------------
Block 0x257
0x259: v259(0x1cb) = CONST 
0x25c: v25c(0x4) = CONST 
0x25f: v25f = CALLDATASIZE 
0x260: v260 = SUB v25f v25c(0x4)
0x261: v261(0x20) = CONST 
0x264: v264 = LT v260 v261(0x20)
0x265: v265 = ISZERO v264
0x266: v266(0x26e) = CONST 
0x269: JUMPI v266(0x26e) v265
----------------------------------

Begin block 0x26a
prev = {'0x257'}, next = {}
----------------------------------
Block 0x26a
0x26a: v26a(0x0) = CONST 
0x26d: REVERT v26a(0x0) v26a(0x0)
----------------------------------

Begin block 0x26e
prev = {'0x257'}, next = {'0x6e4'}
----------------------------------
Block 0x26e
0x270: v270 = CALLDATALOAD v25c(0x4)
0x271: v271(0x1) = CONST 
0x273: v273(0xa0) = CONST 
0x275: v275(0x2) = CONST 
0x277: v277(0x10000000000000000000000000000000000000000) = EXP v275(0x2) v273(0xa0)
0x278: v278(0xffffffffffffffffffffffffffffffffffffffff) = SUB v277(0x10000000000000000000000000000000000000000) v271(0x1)
0x279: v279 = AND v278(0xffffffffffffffffffffffffffffffffffffffff) v270
0x27a: v27a(0x6e4) = CONST 
0x27d: JUMP v27a(0x6e4)
----------------------------------

Begin block 0x27e
prev = {}, next = {'0x28a', '0x286'}
----------------------------------
function acceptOwnership()()
Block 0x27e
0x27f: v27f = CALLVALUE 
0x281: v281 = ISZERO v27f
0x282: v282(0x28a) = CONST 
0x285: JUMPI v282(0x28a) v281
----------------------------------

Begin block 0x286
prev = {'0x27e'}, next = {}
----------------------------------
Block 0x286
0x286: v286(0x0) = CONST 
0x289: REVERT v286(0x0) v286(0x0)
----------------------------------

Begin block 0x28a
prev = {'0x27e'}, next = {'0x6ff'}
----------------------------------
Block 0x28a
0x28c: v28c(0x293) = CONST 
0x28f: v28f(0x6ff) = CONST 
0x292: JUMP v28f(0x6ff)
----------------------------------

Begin block 0x2930x27e
prev = {'0x716'}, next = {}
----------------------------------
Block 0x2930x27e
0x2940x27e: STOP 
----------------------------------

Begin block 0x2930x465
prev = {'0xb0b'}, next = {}
----------------------------------
Block 0x2930x465
0x2940x465: STOP 
----------------------------------

Begin block 0x295
prev = {}, next = {'0x29d', '0x2a1'}
----------------------------------
function owner()()
Block 0x295
0x296: v296 = CALLVALUE 
0x298: v298 = ISZERO v296
0x299: v299(0x2a1) = CONST 
0x29c: JUMPI v299(0x2a1) v298
----------------------------------

Begin block 0x29d
prev = {'0x295'}, next = {}
----------------------------------
Block 0x29d
0x29d: v29d(0x0) = CONST 
0x2a0: REVERT v29d(0x0) v29d(0x0)
----------------------------------

Begin block 0x2a1
prev = {'0x295'}, next = {'0x787'}
----------------------------------
Block 0x2a1
0x2a3: v2a3(0x2aa) = CONST 
0x2a6: v2a6(0x787) = CONST 
0x2a9: JUMP v2a6(0x787)
----------------------------------

Begin block 0x2aa0x295
prev = {'0x787'}, next = {}
----------------------------------
Block 0x2aa0x295
0x2ab0x295: v2952ab(0x40) = CONST 
0x2ae0x295: v2952ae = MLOAD v2952ab(0x40)
0x2af0x295: v2952af(0x1) = CONST 
0x2b10x295: v2952b1(0xa0) = CONST 
0x2b30x295: v2952b3(0x2) = CONST 
0x2b50x295: v2952b5(0x10000000000000000000000000000000000000000) = EXP v2952b3(0x2) v2952b1(0xa0)
0x2b60x295: v2952b6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2952b5(0x10000000000000000000000000000000000000000) v2952af(0x1)
0x2b90x295: v2952b9 = AND v793 v2952b6(0xffffffffffffffffffffffffffffffffffffffff)
0x2bb0x295: MSTORE v2952ae v2952b9
0x2bc0x295: v2952bc = MLOAD v2952ab(0x40)
0x2c00x295: v2952c0 = SUB v2952ae v2952bc
0x2c10x295: v2952c1(0x20) = CONST 
0x2c30x295: v2952c3 = ADD v2952c1(0x20) v2952c0
0x2c50x295: RETURN v2952bc v2952c3
----------------------------------

Begin block 0x2aa0x3dc
prev = {'0x9ff'}, next = {}
----------------------------------
Block 0x2aa0x3dc
0x2ab0x3dc: v3dc2ab(0x40) = CONST 
0x2ae0x3dc: v3dc2ae = MLOAD v3dc2ab(0x40)
0x2af0x3dc: v3dc2af(0x1) = CONST 
0x2b10x3dc: v3dc2b1(0xa0) = CONST 
0x2b30x3dc: v3dc2b3(0x2) = CONST 
0x2b50x3dc: v3dc2b5(0x10000000000000000000000000000000000000000) = EXP v3dc2b3(0x2) v3dc2b1(0xa0)
0x2b60x3dc: v3dc2b6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3dc2b5(0x10000000000000000000000000000000000000000) v3dc2af(0x1)
0x2b90x3dc: v3dc2b9 = AND va0b v3dc2b6(0xffffffffffffffffffffffffffffffffffffffff)
0x2bb0x3dc: MSTORE v3dc2ae v3dc2b9
0x2bc0x3dc: v3dc2bc = MLOAD v3dc2ab(0x40)
0x2c00x3dc: v3dc2c0 = SUB v3dc2ae v3dc2bc
0x2c10x3dc: v3dc2c1(0x20) = CONST 
0x2c30x3dc: v3dc2c3 = ADD v3dc2c1(0x20) v3dc2c0
0x2c50x3dc: RETURN v3dc2bc v3dc2c3
----------------------------------

Begin block 0x2c6
prev = {}, next = {'0x2d2', '0x2ce'}
----------------------------------
function symbol()()
Block 0x2c6
0x2c7: v2c7 = CALLVALUE 
0x2c9: v2c9 = ISZERO v2c7
0x2ca: v2ca(0x2d2) = CONST 
0x2cd: JUMPI v2ca(0x2d2) v2c9
----------------------------------

Begin block 0x2ce
prev = {'0x2c6'}, next = {}
----------------------------------
Block 0x2ce
0x2ce: v2ce(0x0) = CONST 
0x2d1: REVERT v2ce(0x0) v2ce(0x0)
----------------------------------

Begin block 0x2d2
prev = {'0x2c6'}, next = {'0xf40x2c6'}
----------------------------------
Block 0x2d2
0x2d4: v2d4(0xf4) = CONST 
0x2d7: v2d7(0x796) = CONST 
0x2da: v2da_0, v2da_1 = CALLPRIVATE v2d7(0x796) v2d4(0xf4)
----------------------------------

Begin block 0x2db
prev = {}, next = {'0x2e3', '0x2e7'}
----------------------------------
function transfer(address,uint256)()
Block 0x2db
0x2dc: v2dc = CALLVALUE 
0x2de: v2de = ISZERO v2dc
0x2df: v2df(0x2e7) = CONST 
0x2e2: JUMPI v2df(0x2e7) v2de
----------------------------------

Begin block 0x2e3
prev = {'0x2db'}, next = {}
----------------------------------
Block 0x2e3
0x2e3: v2e3(0x0) = CONST 
0x2e6: REVERT v2e3(0x0) v2e3(0x0)
----------------------------------

Begin block 0x2e7
prev = {'0x2db'}, next = {'0x2fe', '0x2fa'}
----------------------------------
Block 0x2e7
0x2e9: v2e9(0x1a2) = CONST 
0x2ec: v2ec(0x4) = CONST 
0x2ef: v2ef = CALLDATASIZE 
0x2f0: v2f0 = SUB v2ef v2ec(0x4)
0x2f1: v2f1(0x40) = CONST 
0x2f4: v2f4 = LT v2f0 v2f1(0x40)
0x2f5: v2f5 = ISZERO v2f4
0x2f6: v2f6(0x2fe) = CONST 
0x2f9: JUMPI v2f6(0x2fe) v2f5
----------------------------------

Begin block 0x2fa
prev = {'0x2e7'}, next = {}
----------------------------------
Block 0x2fa
0x2fa: v2fa(0x0) = CONST 
0x2fd: REVERT v2fa(0x0) v2fa(0x0)
----------------------------------

Begin block 0x2fe
prev = {'0x2e7'}, next = {'0x7ee'}
----------------------------------
Block 0x2fe
0x300: v300(0x1) = CONST 
0x302: v302(0xa0) = CONST 
0x304: v304(0x2) = CONST 
0x306: v306(0x10000000000000000000000000000000000000000) = EXP v304(0x2) v302(0xa0)
0x307: v307(0xffffffffffffffffffffffffffffffffffffffff) = SUB v306(0x10000000000000000000000000000000000000000) v300(0x1)
0x309: v309 = CALLDATALOAD v2ec(0x4)
0x30a: v30a = AND v309 v307(0xffffffffffffffffffffffffffffffffffffffff)
0x30c: v30c(0x20) = CONST 
0x30e: v30e = ADD v30c(0x20) v2ec(0x4)
0x30f: v30f = CALLDATALOAD v30e
0x310: v310(0x7ee) = CONST 
0x313: JUMP v310(0x7ee)
----------------------------------

Begin block 0x314
prev = {}, next = {'0x320', '0x31c'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x314
0x315: v315 = CALLVALUE 
0x317: v317 = ISZERO v315
0x318: v318(0x320) = CONST 
0x31b: JUMPI v318(0x320) v317
----------------------------------

Begin block 0x31c
prev = {'0x314'}, next = {}
----------------------------------
Block 0x31c
0x31c: v31c(0x0) = CONST 
0x31f: REVERT v31c(0x0) v31c(0x0)
----------------------------------

Begin block 0x320
prev = {'0x314'}, next = {'0x337', '0x333'}
----------------------------------
Block 0x320
0x322: v322(0x1a2) = CONST 
0x325: v325(0x4) = CONST 
0x328: v328 = CALLDATASIZE 
0x329: v329 = SUB v328 v325(0x4)
0x32a: v32a(0x60) = CONST 
0x32d: v32d = LT v329 v32a(0x60)
0x32e: v32e = ISZERO v32d
0x32f: v32f(0x337) = CONST 
0x332: JUMPI v32f(0x337) v32e
----------------------------------

Begin block 0x333
prev = {'0x320'}, next = {}
----------------------------------
Block 0x333
0x333: v333(0x0) = CONST 
0x336: REVERT v333(0x0) v333(0x0)
----------------------------------

Begin block 0x337
prev = {'0x320'}, next = {'0x363', '0x367'}
----------------------------------
Block 0x337
0x338: v338(0x1) = CONST 
0x33a: v33a(0xa0) = CONST 
0x33c: v33c(0x2) = CONST 
0x33e: v33e(0x10000000000000000000000000000000000000000) = EXP v33c(0x2) v33a(0xa0)
0x33f: v33f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33e(0x10000000000000000000000000000000000000000) v338(0x1)
0x341: v341 = CALLDATALOAD v325(0x4)
0x342: v342 = AND v341 v33f(0xffffffffffffffffffffffffffffffffffffffff)
0x344: v344(0x20) = CONST 
0x347: v347 = ADD v325(0x4) v344(0x20)
0x348: v348 = CALLDATALOAD v347
0x34b: v34b = ADD v325(0x4) v329
0x34d: v34d(0x60) = CONST 
0x350: v350 = ADD v325(0x4) v34d(0x60)
0x351: v351(0x40) = CONST 
0x354: v354 = ADD v325(0x4) v351(0x40)
0x355: v355 = CALLDATALOAD v354
0x356: v356(0x100000000) = CONST 
0x35d: v35d = GT v355 v356(0x100000000)
0x35e: v35e = ISZERO v35d
0x35f: v35f(0x367) = CONST 
0x362: JUMPI v35f(0x367) v35e
----------------------------------

Begin block 0x363
prev = {'0x337'}, next = {}
----------------------------------
Block 0x363
0x363: v363(0x0) = CONST 
0x366: REVERT v363(0x0) v363(0x0)
----------------------------------

Begin block 0x367
prev = {'0x337'}, next = {'0x379', '0x375'}
----------------------------------
Block 0x367
0x369: v369 = ADD v325(0x4) v355
0x36b: v36b(0x20) = CONST 
0x36e: v36e = ADD v369 v36b(0x20)
0x36f: v36f = GT v36e v34b
0x370: v370 = ISZERO v36f
0x371: v371(0x379) = CONST 
0x374: JUMPI v371(0x379) v370
----------------------------------

Begin block 0x375
prev = {'0x367'}, next = {}
----------------------------------
Block 0x375
0x375: v375(0x0) = CONST 
0x378: REVERT v375(0x0) v375(0x0)
----------------------------------

Begin block 0x379
prev = {'0x367'}, next = {'0x397', '0x39b'}
----------------------------------
Block 0x379
0x37b: v37b = CALLDATALOAD v369
0x37d: v37d(0x20) = CONST 
0x37f: v37f = ADD v37d(0x20) v369
0x382: v382(0x1) = CONST 
0x385: v385 = MUL v37b v382(0x1)
0x387: v387 = ADD v37f v385
0x388: v388 = GT v387 v34b
0x389: v389(0x100000000) = CONST 
0x390: v390 = GT v37b v389(0x100000000)
0x391: v391 = OR v390 v388
0x392: v392 = ISZERO v391
0x393: v393(0x39b) = CONST 
0x396: JUMPI v393(0x39b) v392
----------------------------------

Begin block 0x397
prev = {'0x379'}, next = {}
----------------------------------
Block 0x397
0x397: v397(0x0) = CONST 
0x39a: REVERT v397(0x0) v397(0x0)
----------------------------------

Begin block 0x39b
prev = {'0x379'}, next = {'0x89e'}
----------------------------------
Block 0x39b
0x3a0: v3a0(0x1f) = CONST 
0x3a2: v3a2 = ADD v3a0(0x1f) v37b
0x3a3: v3a3(0x20) = CONST 
0x3a7: v3a7 = DIV v3a2 v3a3(0x20)
0x3a8: v3a8 = MUL v3a7 v3a3(0x20)
0x3a9: v3a9(0x20) = CONST 
0x3ab: v3ab = ADD v3a9(0x20) v3a8
0x3ac: v3ac(0x40) = CONST 
0x3ae: v3ae = MLOAD v3ac(0x40)
0x3b1: v3b1 = ADD v3ae v3ab
0x3b2: v3b2(0x40) = CONST 
0x3b4: MSTORE v3b2(0x40) v3b1
0x3bc: MSTORE v3ae v37b
0x3bd: v3bd(0x20) = CONST 
0x3bf: v3bf = ADD v3bd(0x20) v3ae
0x3c5: CALLDATACOPY v3bf v37f v37b
0x3c6: v3c6(0x0) = CONST 
0x3c9: v3c9 = ADD v3bf v37b
0x3cd: MSTORE v3c9 v3c6(0x0)
0x3d2: v3d2(0x89e) = CONST 
0x3db: JUMP v3d2(0x89e)
----------------------------------

Begin block 0x3dc
prev = {}, next = {'0x3e4', '0x3e8'}
----------------------------------
function newOwner()()
Block 0x3dc
0x3dd: v3dd = CALLVALUE 
0x3df: v3df = ISZERO v3dd
0x3e0: v3e0(0x3e8) = CONST 
0x3e3: JUMPI v3e0(0x3e8) v3df
----------------------------------

Begin block 0x3e4
prev = {'0x3dc'}, next = {}
----------------------------------
Block 0x3e4
0x3e4: v3e4(0x0) = CONST 
0x3e7: REVERT v3e4(0x0) v3e4(0x0)
----------------------------------

Begin block 0x3e8
prev = {'0x3dc'}, next = {'0x9ff'}
----------------------------------
Block 0x3e8
0x3ea: v3ea(0x2aa) = CONST 
0x3ed: v3ed(0x9ff) = CONST 
0x3f0: JUMP v3ed(0x9ff)
----------------------------------

Begin block 0x3f1
prev = {}, next = {'0x3f9', '0x3fd'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x3f1
0x3f2: v3f2 = CALLVALUE 
0x3f4: v3f4 = ISZERO v3f2
0x3f5: v3f5(0x3fd) = CONST 
0x3f8: JUMPI v3f5(0x3fd) v3f4
----------------------------------

Begin block 0x3f9
prev = {'0x3f1'}, next = {}
----------------------------------
Block 0x3f9
0x3f9: v3f9(0x0) = CONST 
0x3fc: REVERT v3f9(0x0) v3f9(0x0)
----------------------------------

Begin block 0x3fd
prev = {'0x3f1'}, next = {'0x410', '0x414'}
----------------------------------
Block 0x3fd
0x3ff: v3ff(0x1a2) = CONST 
0x402: v402(0x4) = CONST 
0x405: v405 = CALLDATASIZE 
0x406: v406 = SUB v405 v402(0x4)
0x407: v407(0x40) = CONST 
0x40a: v40a = LT v406 v407(0x40)
0x40b: v40b = ISZERO v40a
0x40c: v40c(0x414) = CONST 
0x40f: JUMPI v40c(0x414) v40b
----------------------------------

Begin block 0x410
prev = {'0x3fd'}, next = {}
----------------------------------
Block 0x410
0x410: v410(0x0) = CONST 
0x413: REVERT v410(0x0) v410(0x0)
----------------------------------

Begin block 0x414
prev = {'0x3fd'}, next = {'0xa0e'}
----------------------------------
Block 0x414
0x416: v416(0x1) = CONST 
0x418: v418(0xa0) = CONST 
0x41a: v41a(0x2) = CONST 
0x41c: v41c(0x10000000000000000000000000000000000000000) = EXP v41a(0x2) v418(0xa0)
0x41d: v41d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v41c(0x10000000000000000000000000000000000000000) v416(0x1)
0x41f: v41f = CALLDATALOAD v402(0x4)
0x420: v420 = AND v41f v41d(0xffffffffffffffffffffffffffffffffffffffff)
0x422: v422(0x20) = CONST 
0x424: v424 = ADD v422(0x20) v402(0x4)
0x425: v425 = CALLDATALOAD v424
0x426: v426(0xa0e) = CONST 
0x429: JUMP v426(0xa0e)
----------------------------------

Begin block 0x42a
prev = {}, next = {'0x432', '0x436'}
----------------------------------
function allowance(address,address)()
Block 0x42a
0x42b: v42b = CALLVALUE 
0x42d: v42d = ISZERO v42b
0x42e: v42e(0x436) = CONST 
0x431: JUMPI v42e(0x436) v42d
----------------------------------

Begin block 0x432
prev = {'0x42a'}, next = {}
----------------------------------
Block 0x432
0x432: v432(0x0) = CONST 
0x435: REVERT v432(0x0) v432(0x0)
----------------------------------

Begin block 0x436
prev = {'0x42a'}, next = {'0x449', '0x44d'}
----------------------------------
Block 0x436
0x438: v438(0x1cb) = CONST 
0x43b: v43b(0x4) = CONST 
0x43e: v43e = CALLDATASIZE 
0x43f: v43f = SUB v43e v43b(0x4)
0x440: v440(0x40) = CONST 
0x443: v443 = LT v43f v440(0x40)
0x444: v444 = ISZERO v443
0x445: v445(0x44d) = CONST 
0x448: JUMPI v445(0x44d) v444
----------------------------------

Begin block 0x449
prev = {'0x436'}, next = {}
----------------------------------
Block 0x449
0x449: v449(0x0) = CONST 
0x44c: REVERT v449(0x0) v449(0x0)
----------------------------------

Begin block 0x44d
prev = {'0x436'}, next = {'0xac9'}
----------------------------------
Block 0x44d
0x44f: v44f(0x1) = CONST 
0x451: v451(0xa0) = CONST 
0x453: v453(0x2) = CONST 
0x455: v455(0x10000000000000000000000000000000000000000) = EXP v453(0x2) v451(0xa0)
0x456: v456(0xffffffffffffffffffffffffffffffffffffffff) = SUB v455(0x10000000000000000000000000000000000000000) v44f(0x1)
0x458: v458 = CALLDATALOAD v43b(0x4)
0x45a: v45a = AND v456(0xffffffffffffffffffffffffffffffffffffffff) v458
0x45c: v45c(0x20) = CONST 
0x45e: v45e = ADD v45c(0x20) v43b(0x4)
0x45f: v45f = CALLDATALOAD v45e
0x460: v460 = AND v45f v456(0xffffffffffffffffffffffffffffffffffffffff)
0x461: v461(0xac9) = CONST 
0x464: JUMP v461(0xac9)
----------------------------------

Begin block 0x465
prev = {}, next = {'0x471', '0x46d'}
----------------------------------
function transferOwnership(address)()
Block 0x465
0x466: v466 = CALLVALUE 
0x468: v468 = ISZERO v466
0x469: v469(0x471) = CONST 
0x46c: JUMPI v469(0x471) v468
----------------------------------

Begin block 0x46d
prev = {'0x465'}, next = {}
----------------------------------
Block 0x46d
0x46d: v46d(0x0) = CONST 
0x470: REVERT v46d(0x0) v46d(0x0)
----------------------------------

Begin block 0x471
prev = {'0x465'}, next = {'0x488', '0x484'}
----------------------------------
Block 0x471
0x473: v473(0x293) = CONST 
0x476: v476(0x4) = CONST 
0x479: v479 = CALLDATASIZE 
0x47a: v47a = SUB v479 v476(0x4)
0x47b: v47b(0x20) = CONST 
0x47e: v47e = LT v47a v47b(0x20)
0x47f: v47f = ISZERO v47e
0x480: v480(0x488) = CONST 
0x483: JUMPI v480(0x488) v47f
----------------------------------

Begin block 0x484
prev = {'0x471'}, next = {}
----------------------------------
Block 0x484
0x484: v484(0x0) = CONST 
0x487: REVERT v484(0x0) v484(0x0)
----------------------------------

Begin block 0x488
prev = {'0x471'}, next = {'0xaf4'}
----------------------------------
Block 0x488
0x48a: v48a = CALLDATALOAD v476(0x4)
0x48b: v48b(0x1) = CONST 
0x48d: v48d(0xa0) = CONST 
0x48f: v48f(0x2) = CONST 
0x491: v491(0x10000000000000000000000000000000000000000) = EXP v48f(0x2) v48d(0xa0)
0x492: v492(0xffffffffffffffffffffffffffffffffffffffff) = SUB v491(0x10000000000000000000000000000000000000000) v48b(0x1)
0x493: v493 = AND v492(0xffffffffffffffffffffffffffffffffffffffff) v48a
0x494: v494(0xaf4) = CONST 
0x497: JUMP v494(0xaf4)
----------------------------------

Begin block 0x498
prev = {}, next = {'0x4d8', '0x51e0x498'}
----------------------------------
function 0x498(v498arg0)
Block 0x498
0x499: v499(0x3) = CONST 
0x49c: v49c = SLOAD v499(0x3)
0x49d: v49d(0x40) = CONST 
0x4a0: v4a0 = MLOAD v49d(0x40)
0x4a1: v4a1(0x20) = CONST 
0x4a3: v4a3(0x2) = CONST 
0x4a5: v4a5(0x1) = CONST 
0x4a8: v4a8 = AND v49c v4a5(0x1)
0x4a9: v4a9 = ISZERO v4a8
0x4aa: v4aa(0x100) = CONST 
0x4ad: v4ad = MUL v4aa(0x100) v4a9
0x4ae: v4ae(0x0) = CONST 
0x4b0: v4b0(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v4ae(0x0)
0x4b1: v4b1 = ADD v4b0(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v4ad
0x4b4: v4b4 = AND v49c v4b1
0x4b8: v4b8 = DIV v4b4 v4a3(0x2)
0x4b9: v4b9(0x1f) = CONST 
0x4bc: v4bc = ADD v4b8 v4b9(0x1f)
0x4bf: v4bf = DIV v4bc v4a1(0x20)
0x4c1: v4c1 = MUL v4a1(0x20) v4bf
0x4c3: v4c3 = ADD v4a0 v4c1
0x4c5: v4c5 = ADD v4a1(0x20) v4c3
0x4c8: MSTORE v49d(0x40) v4c5
0x4cb: MSTORE v4a0 v4b8
0x4cf: v4cf = ADD v4a0 v4a1(0x20)
0x4d3: v4d3 = ISZERO v4b8
0x4d4: v4d4(0x51e) = CONST 
0x4d7: JUMPI v4d4(0x51e) v4d3
----------------------------------

Begin block 0x4d8
prev = {'0x498'}, next = {'0x4f30x498', '0x4e0'}
----------------------------------
Block 0x4d8
0x4d9: v4d9(0x1f) = CONST 
0x4db: v4db = LT v4d9(0x1f) v4b8
0x4dc: v4dc(0x4f3) = CONST 
0x4df: JUMPI v4dc(0x4f3) v4db
----------------------------------

Begin block 0x4e0
prev = {'0x4d8'}, next = {'0x51e0x498'}
----------------------------------
Block 0x4e0
0x4e0: v4e0(0x100) = CONST 
0x4e5: v4e5 = SLOAD v499(0x3)
0x4e6: v4e6 = DIV v4e5 v4e0(0x100)
0x4e7: v4e7 = MUL v4e6 v4e0(0x100)
0x4e9: MSTORE v4cf v4e7
0x4eb: v4eb(0x20) = CONST 
0x4ed: v4ed = ADD v4eb(0x20) v4cf
0x4ef: v4ef(0x51e) = CONST 
0x4f2: JUMP v4ef(0x51e)
----------------------------------

Begin block 0x4f30x498
prev = {'0x4d8'}, next = {'0x5010x498'}
----------------------------------
Block 0x4f30x498
0x4f50x498: v4984f5 = ADD v4cf v4b8
0x4f80x498: v4984f8(0x0) = CONST 
0x4fa0x498: MSTORE v4984f8(0x0) v499(0x3)
0x4fb0x498: v4984fb(0x20) = CONST 
0x4fd0x498: v4984fd(0x0) = CONST 
0x4ff0x498: v4984ff = SHA3 v4984fd(0x0) v4984fb(0x20)
----------------------------------

Begin block 0x4f30x796
prev = {'0x7d3'}, next = {'0x5010x796'}
----------------------------------
Block 0x4f30x796
0x4f50x796: v7964f5 = ADD v7ca v7b3
0x4f80x796: v7964f8(0x0) = CONST 
0x4fa0x796: MSTORE v7964f8(0x0) v797(0x2)
0x4fb0x796: v7964fb(0x20) = CONST 
0x4fd0x796: v7964fd(0x0) = CONST 
0x4ff0x796: v7964ff = SHA3 v7964fd(0x0) v7964fb(0x20)
----------------------------------

Begin block 0x5010x498
prev = {'0x5010x498', '0x4f30x498'}, next = {'0x5150x498', '0x5010x498'}
----------------------------------
Block 0x5010x498
0x5010x498_0x0: v501498_0 = PHI v4cf v49850d
0x5010x498_0x1: v501498_1 = PHI v498509 v4984ff
0x5030x498: v498503 = SLOAD v501498_1
0x5050x498: MSTORE v501498_0 v498503
0x5070x498: v498507(0x1) = CONST 
0x5090x498: v498509 = ADD v498507(0x1) v501498_1
0x50b0x498: v49850b(0x20) = CONST 
0x50d0x498: v49850d = ADD v49850b(0x20) v501498_0
0x5100x498: v498510 = GT v4984f5 v49850d
0x5110x498: v498511(0x501) = CONST 
0x5140x498: JUMPI v498511(0x501) v498510
----------------------------------

Begin block 0x5010x796
prev = {'0x5010x796', '0x4f30x796'}, next = {'0x5010x796', '0x5150x796'}
----------------------------------
Block 0x5010x796
0x5010x796_0x0: v501796_0 = PHI v7ca v79650d
0x5010x796_0x1: v501796_1 = PHI v796509 v7964ff
0x5030x796: v796503 = SLOAD v501796_1
0x5050x796: MSTORE v501796_0 v796503
0x5070x796: v796507(0x1) = CONST 
0x5090x796: v796509 = ADD v796507(0x1) v501796_1
0x50b0x796: v79650b(0x20) = CONST 
0x50d0x796: v79650d = ADD v79650b(0x20) v501796_0
0x5100x796: v796510 = GT v7964f5 v79650d
0x5110x796: v796511(0x501) = CONST 
0x5140x796: JUMPI v796511(0x501) v796510
----------------------------------

Begin block 0x5150x498
prev = {'0x5010x498'}, next = {'0x51e0x498'}
----------------------------------
Block 0x5150x498
0x5170x498: v498517 = SUB v49850d v4984f5
0x5180x498: v498518(0x1f) = CONST 
0x51a0x498: v49851a = AND v498518(0x1f) v498517
0x51c0x498: v49851c = ADD v4984f5 v49851a
----------------------------------

Begin block 0x5150x796
prev = {'0x5010x796'}, next = {'0x51e0x796'}
----------------------------------
Block 0x5150x796
0x5170x796: v796517 = SUB v79650d v7964f5
0x5180x796: v796518(0x1f) = CONST 
0x51a0x796: v79651a = AND v796518(0x1f) v796517
0x51c0x796: v79651c = ADD v7964f5 v79651a
----------------------------------

Begin block 0x51e0x498
prev = {'0x5150x498', '0x498', '0x4e0'}, next = {}
----------------------------------
Block 0x51e0x498
0x5250x498: RETURNPRIVATE v498arg0 v4a0 v498arg0
----------------------------------

Begin block 0x51e0x796
prev = {'0x5150x796', '0x796', '0x7db'}, next = {}
----------------------------------
Block 0x51e0x796
0x5250x796: RETURNPRIVATE v796arg0 v79e v796arg0
----------------------------------

Begin block 0x526
prev = {'0x18c'}, next = {'0x5870x169'}
----------------------------------
Block 0x526
0x527: v527 = CALLER 
0x528: v528(0x0) = CONST 
0x52c: MSTORE v528(0x0) v527
0x52d: v52d(0x7) = CONST 
0x52f: v52f(0x20) = CONST 
0x533: MSTORE v52f(0x20) v52d(0x7)
0x534: v534(0x40) = CONST 
0x538: v538 = SHA3 v528(0x0) v534(0x40)
0x539: v539(0x1) = CONST 
0x53b: v53b(0xa0) = CONST 
0x53d: v53d(0x2) = CONST 
0x53f: v53f(0x10000000000000000000000000000000000000000) = EXP v53d(0x2) v53b(0xa0)
0x540: v540(0xffffffffffffffffffffffffffffffffffffffff) = SUB v53f(0x10000000000000000000000000000000000000000) v539(0x1)
0x542: v542 = AND v198 v540(0xffffffffffffffffffffffffffffffffffffffff)
0x545: MSTORE v528(0x0) v542
0x548: MSTORE v52f(0x20) v538
0x54b: v54b = SHA3 v528(0x0) v534(0x40)
0x54e: SSTORE v54b v19d
0x550: v550 = MLOAD v534(0x40)
0x553: MSTORE v550 v19d
0x555: v555 = MLOAD v534(0x40)
0x55c: v55c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x580: v580 = SUB v550 v555
0x581: v581 = ADD v580 v52f(0x20)
0x583: LOG3 v555 v581 v55c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v527 v542
0x585: v585(0x1) = CONST 
----------------------------------

Begin block 0x5870x169
prev = {'0x526'}, next = {'0x1a20x169'}
----------------------------------
Block 0x5870x169
0x58c0x169: JUMP v177(0x1a2)
----------------------------------

Begin block 0x5870xb4f
prev = {'0xb4f'}, next = {}
----------------------------------
Block 0x5870xb4f
0x58c0xb4f: RETURNPRIVATE vb4farg2 vb52
----------------------------------

Begin block 0x58d
prev = {'0x1c2'}, next = {'0x5cb'}
----------------------------------
Block 0x58d
0x58e: v58e(0x0) = CONST 
0x592: MSTORE v58e(0x0) v58e(0x0)
0x593: v593(0x6) = CONST 
0x595: v595(0x20) = CONST 
0x597: MSTORE v595(0x20) v593(0x6)
0x598: v598(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
0x5b9: v5b9 = SLOAD v598(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8)
0x5ba: v5ba(0x5) = CONST 
0x5bc: v5bc = SLOAD v5ba(0x5)
0x5bd: v5bd(0x5cb) = CONST 
0x5c1: v5c1(0xffffffff) = CONST 
0x5c6: v5c6(0xb3a) = CONST 
0x5c9: v5c9(0xb3a) = AND v5c6(0xb3a) v5c1(0xffffffff)
0x5ca: v5ca_0 = CALLPRIVATE v5c9(0xb3a) v5b9 v5bc v5bd(0x5cb)
----------------------------------

Begin block 0x5cb
prev = {'0x58d'}, next = {'0x1cb0x1b6'}
----------------------------------
Block 0x5cb
0x5cf: JUMP v1c4(0x1cb)
----------------------------------

Begin block 0x5d0
prev = {'0x200'}, next = {'0x5f9'}
----------------------------------
Block 0x5d0
0x5d1: v5d1(0x1) = CONST 
0x5d3: v5d3(0xa0) = CONST 
0x5d5: v5d5(0x2) = CONST 
0x5d7: v5d7(0x10000000000000000000000000000000000000000) = EXP v5d5(0x2) v5d3(0xa0)
0x5d8: v5d8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d7(0x10000000000000000000000000000000000000000) v5d1(0x1)
0x5da: v5da = AND v20d v5d8(0xffffffffffffffffffffffffffffffffffffffff)
0x5db: v5db(0x0) = CONST 
0x5df: MSTORE v5db(0x0) v5da
0x5e0: v5e0(0x6) = CONST 
0x5e2: v5e2(0x20) = CONST 
0x5e4: MSTORE v5e2(0x20) v5e0(0x6)
0x5e5: v5e5(0x40) = CONST 
0x5e8: v5e8 = SHA3 v5db(0x0) v5e5(0x40)
0x5e9: v5e9 = SLOAD v5e8
0x5ea: v5ea(0x5f9) = CONST 
0x5ef: v5ef(0xffffffff) = CONST 
0x5f4: v5f4(0xb3a) = CONST 
0x5f7: v5f7(0xb3a) = AND v5f4(0xb3a) v5ef(0xffffffff)
0x5f8: v5f8_0 = CALLPRIVATE v5f7(0xb3a) v21b v5e9 v5ea(0x5f9)
----------------------------------

Begin block 0x5f9
prev = {'0x5d0'}, next = {'0x636'}
----------------------------------
Block 0x5f9
0x5fa: v5fa(0x1) = CONST 
0x5fc: v5fc(0xa0) = CONST 
0x5fe: v5fe(0x2) = CONST 
0x600: v600(0x10000000000000000000000000000000000000000) = EXP v5fe(0x2) v5fc(0xa0)
0x601: v601(0xffffffffffffffffffffffffffffffffffffffff) = SUB v600(0x10000000000000000000000000000000000000000) v5fa(0x1)
0x603: v603 = AND v20d v601(0xffffffffffffffffffffffffffffffffffffffff)
0x604: v604(0x0) = CONST 
0x608: MSTORE v604(0x0) v603
0x609: v609(0x6) = CONST 
0x60b: v60b(0x20) = CONST 
0x60f: MSTORE v60b(0x20) v609(0x6)
0x610: v610(0x40) = CONST 
0x614: v614 = SHA3 v604(0x0) v610(0x40)
0x618: SSTORE v614 v5f8_0
0x619: v619(0x7) = CONST 
0x61c: MSTORE v60b(0x20) v619(0x7)
0x61f: v61f = SHA3 v604(0x0) v610(0x40)
0x620: v620 = CALLER 
0x622: MSTORE v604(0x0) v620
0x624: MSTORE v60b(0x20) v61f
0x625: v625 = SHA3 v604(0x0) v610(0x40)
0x626: v626 = SLOAD v625
0x627: v627(0x636) = CONST 
0x62c: v62c(0xffffffff) = CONST 
0x631: v631(0xb3a) = CONST 
0x634: v634(0xb3a) = AND v631(0xb3a) v62c(0xffffffff)
0x635: v635_0 = CALLPRIVATE v634(0xb3a) v21b v626 v627(0x636)
----------------------------------

Begin block 0x636
prev = {'0x5f9'}, next = {'0x67a'}
----------------------------------
Block 0x636
0x637: v637(0x1) = CONST 
0x639: v639(0xa0) = CONST 
0x63b: v63b(0x2) = CONST 
0x63d: v63d(0x10000000000000000000000000000000000000000) = EXP v63b(0x2) v639(0xa0)
0x63e: v63e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v63d(0x10000000000000000000000000000000000000000) v637(0x1)
0x641: v641 = AND v20d v63e(0xffffffffffffffffffffffffffffffffffffffff)
0x642: v642(0x0) = CONST 
0x646: MSTORE v642(0x0) v641
0x647: v647(0x7) = CONST 
0x649: v649(0x20) = CONST 
0x64d: MSTORE v649(0x20) v647(0x7)
0x64e: v64e(0x40) = CONST 
0x652: v652 = SHA3 v642(0x0) v64e(0x40)
0x653: v653 = CALLER 
0x655: MSTORE v642(0x0) v653
0x657: MSTORE v649(0x20) v652
0x65a: v65a = SHA3 v642(0x0) v64e(0x40)
0x65e: SSTORE v65a v635_0
0x661: v661 = AND v216 v63e(0xffffffffffffffffffffffffffffffffffffffff)
0x663: MSTORE v642(0x0) v661
0x664: v664(0x6) = CONST 
0x668: MSTORE v649(0x20) v664(0x6)
0x669: v669 = SHA3 v642(0x0) v64e(0x40)
0x66a: v66a = SLOAD v669
0x66b: v66b(0x67a) = CONST 
0x670: v670(0xffffffff) = CONST 
0x675: v675(0xb4f) = CONST 
0x678: v678(0xb4f) = AND v675(0xb4f) v670(0xffffffff)
0x679: v679_0 = CALLPRIVATE v678(0xb4f) v21b v66a v66b(0x67a)
----------------------------------

Begin block 0x67a
prev = {'0x636'}, next = {'0x1a20x1dd'}
----------------------------------
Block 0x67a
0x67b: v67b(0x1) = CONST 
0x67d: v67d(0xa0) = CONST 
0x67f: v67f(0x2) = CONST 
0x681: v681(0x10000000000000000000000000000000000000000) = EXP v67f(0x2) v67d(0xa0)
0x682: v682(0xffffffffffffffffffffffffffffffffffffffff) = SUB v681(0x10000000000000000000000000000000000000000) v67b(0x1)
0x685: v685 = AND v216 v682(0xffffffffffffffffffffffffffffffffffffffff)
0x686: v686(0x0) = CONST 
0x68a: MSTORE v686(0x0) v685
0x68b: v68b(0x6) = CONST 
0x68d: v68d(0x20) = CONST 
0x691: MSTORE v68d(0x20) v68b(0x6)
0x692: v692(0x40) = CONST 
0x697: v697 = SHA3 v686(0x0) v692(0x40)
0x69b: SSTORE v697 v679_0
0x69d: v69d = MLOAD v692(0x40)
0x6a0: MSTORE v69d v21b
0x6a2: v6a2 = MLOAD v692(0x40)
0x6a7: v6a7 = AND v20d v682(0xffffffffffffffffffffffffffffffffffffffff)
0x6a9: v6a9(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x6ce: v6ce = SUB v69d v6a2
0x6cf: v6cf = ADD v6ce v68d(0x20)
0x6d1: LOG3 v6a2 v6cf v6a9(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v6a7 v685
0x6d3: v6d3(0x1) = CONST 
0x6da: JUMP v1eb(0x1a2)
----------------------------------

Begin block 0x6db
prev = {'0x22c'}, next = {'0x235'}
----------------------------------
Block 0x6db
0x6dc: v6dc(0x4) = CONST 
0x6de: v6de = SLOAD v6dc(0x4)
0x6df: v6df(0xff) = CONST 
0x6e1: v6e1 = AND v6df(0xff) v6de
0x6e3: JUMP v22e(0x235)
----------------------------------

Begin block 0x6e4
prev = {'0x26e'}, next = {'0x1cb0x24b'}
----------------------------------
Block 0x6e4
0x6e5: v6e5(0x1) = CONST 
0x6e7: v6e7(0xa0) = CONST 
0x6e9: v6e9(0x2) = CONST 
0x6eb: v6eb(0x10000000000000000000000000000000000000000) = EXP v6e9(0x2) v6e7(0xa0)
0x6ec: v6ec(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6eb(0x10000000000000000000000000000000000000000) v6e5(0x1)
0x6ed: v6ed = AND v6ec(0xffffffffffffffffffffffffffffffffffffffff) v279
0x6ee: v6ee(0x0) = CONST 
0x6f2: MSTORE v6ee(0x0) v6ed
0x6f3: v6f3(0x6) = CONST 
0x6f5: v6f5(0x20) = CONST 
0x6f7: MSTORE v6f5(0x20) v6f3(0x6)
0x6f8: v6f8(0x40) = CONST 
0x6fb: v6fb = SHA3 v6ee(0x0) v6f8(0x40)
0x6fc: v6fc = SLOAD v6fb
0x6fe: JUMP v259(0x1cb)
----------------------------------

Begin block 0x6ff
prev = {'0x28a'}, next = {'0x712', '0x716'}
----------------------------------
Block 0x6ff
0x700: v700(0x1) = CONST 
0x702: v702 = SLOAD v700(0x1)
0x703: v703(0x1) = CONST 
0x705: v705(0xa0) = CONST 
0x707: v707(0x2) = CONST 
0x709: v709(0x10000000000000000000000000000000000000000) = EXP v707(0x2) v705(0xa0)
0x70a: v70a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v709(0x10000000000000000000000000000000000000000) v703(0x1)
0x70b: v70b = AND v70a(0xffffffffffffffffffffffffffffffffffffffff) v702
0x70c: v70c = CALLER 
0x70d: v70d = EQ v70c v70b
0x70e: v70e(0x716) = CONST 
0x711: JUMPI v70e(0x716) v70d
----------------------------------

Begin block 0x712
prev = {'0x6ff'}, next = {}
----------------------------------
Block 0x712
0x712: v712(0x0) = CONST 
0x715: REVERT v712(0x0) v712(0x0)
----------------------------------

Begin block 0x716
prev = {'0x6ff'}, next = {'0x2930x27e'}
----------------------------------
Block 0x716
0x717: v717(0x1) = CONST 
0x719: v719 = SLOAD v717(0x1)
0x71a: v71a(0x0) = CONST 
0x71d: v71d = SLOAD v71a(0x0)
0x71e: v71e(0x40) = CONST 
0x720: v720 = MLOAD v71e(0x40)
0x721: v721(0x1) = CONST 
0x723: v723(0xa0) = CONST 
0x725: v725(0x2) = CONST 
0x727: v727(0x10000000000000000000000000000000000000000) = EXP v725(0x2) v723(0xa0)
0x728: v728(0xffffffffffffffffffffffffffffffffffffffff) = SUB v727(0x10000000000000000000000000000000000000000) v721(0x1)
0x72b: v72b = AND v728(0xffffffffffffffffffffffffffffffffffffffff) v719
0x72f: v72f = AND v71d v728(0xffffffffffffffffffffffffffffffffffffffff)
0x731: v731(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x753: LOG3 v720 v71a(0x0) v731(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v72f v72b
0x754: v754(0x1) = CONST 
0x757: v757 = SLOAD v754(0x1)
0x758: v758(0x0) = CONST 
0x75b: v75b = SLOAD v758(0x0)
0x75c: v75c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x771: v771(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v75c(0xffffffffffffffffffffffffffffffffffffffff)
0x774: v774 = AND v771(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v75b
0x775: v775(0x1) = CONST 
0x777: v777(0xa0) = CONST 
0x779: v779(0x2) = CONST 
0x77b: v77b(0x10000000000000000000000000000000000000000) = EXP v779(0x2) v777(0xa0)
0x77c: v77c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v77b(0x10000000000000000000000000000000000000000) v775(0x1)
0x77e: v77e = AND v757 v77c(0xffffffffffffffffffffffffffffffffffffffff)
0x77f: v77f = OR v77e v774
0x782: SSTORE v758(0x0) v77f
0x783: v783 = AND v771(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v757
0x785: SSTORE v754(0x1) v783
0x786: JUMP v28c(0x293)
----------------------------------

Begin block 0x787
prev = {'0x2a1'}, next = {'0x2aa0x295'}
----------------------------------
Block 0x787
0x788: v788(0x0) = CONST 
0x78a: v78a = SLOAD v788(0x0)
0x78b: v78b(0x1) = CONST 
0x78d: v78d(0xa0) = CONST 
0x78f: v78f(0x2) = CONST 
0x791: v791(0x10000000000000000000000000000000000000000) = EXP v78f(0x2) v78d(0xa0)
0x792: v792(0xffffffffffffffffffffffffffffffffffffffff) = SUB v791(0x10000000000000000000000000000000000000000) v78b(0x1)
0x793: v793 = AND v792(0xffffffffffffffffffffffffffffffffffffffff) v78a
0x795: JUMP v2a3(0x2aa)
----------------------------------

Begin block 0x796
prev = {}, next = {'0x51e0x796', '0x7d3'}
----------------------------------
function 0x796(v796arg0)
Block 0x796
0x797: v797(0x2) = CONST 
0x79a: v79a = SLOAD v797(0x2)
0x79b: v79b(0x40) = CONST 
0x79e: v79e = MLOAD v79b(0x40)
0x79f: v79f(0x20) = CONST 
0x7a1: v7a1(0x1) = CONST 
0x7a4: v7a4 = AND v79a v7a1(0x1)
0x7a5: v7a5 = ISZERO v7a4
0x7a6: v7a6(0x100) = CONST 
0x7a9: v7a9 = MUL v7a6(0x100) v7a5
0x7aa: v7aa(0x0) = CONST 
0x7ac: v7ac(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v7aa(0x0)
0x7ad: v7ad = ADD v7ac(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v7a9
0x7b0: v7b0 = AND v79a v7ad
0x7b3: v7b3 = DIV v7b0 v797(0x2)
0x7b4: v7b4(0x1f) = CONST 
0x7b7: v7b7 = ADD v7b3 v7b4(0x1f)
0x7ba: v7ba = DIV v7b7 v79f(0x20)
0x7bc: v7bc = MUL v79f(0x20) v7ba
0x7be: v7be = ADD v79e v7bc
0x7c0: v7c0 = ADD v79f(0x20) v7be
0x7c3: MSTORE v79b(0x40) v7c0
0x7c6: MSTORE v79e v7b3
0x7ca: v7ca = ADD v79e v79f(0x20)
0x7ce: v7ce = ISZERO v7b3
0x7cf: v7cf(0x51e) = CONST 
0x7d2: JUMPI v7cf(0x51e) v7ce
----------------------------------

Begin block 0x7d3
prev = {'0x796'}, next = {'0x4f30x796', '0x7db'}
----------------------------------
Block 0x7d3
0x7d4: v7d4(0x1f) = CONST 
0x7d6: v7d6 = LT v7d4(0x1f) v7b3
0x7d7: v7d7(0x4f3) = CONST 
0x7da: JUMPI v7d7(0x4f3) v7d6
----------------------------------

Begin block 0x7db
prev = {'0x7d3'}, next = {'0x51e0x796'}
----------------------------------
Block 0x7db
0x7db: v7db(0x100) = CONST 
0x7e0: v7e0 = SLOAD v797(0x2)
0x7e1: v7e1 = DIV v7e0 v7db(0x100)
0x7e2: v7e2 = MUL v7e1 v7db(0x100)
0x7e4: MSTORE v7ca v7e2
0x7e6: v7e6(0x20) = CONST 
0x7e8: v7e8 = ADD v7e6(0x20) v7ca
0x7ea: v7ea(0x51e) = CONST 
0x7ed: JUMP v7ea(0x51e)
----------------------------------

Begin block 0x7ee
prev = {'0x2fe'}, next = {'0x80e'}
----------------------------------
Block 0x7ee
0x7ef: v7ef = CALLER 
0x7f0: v7f0(0x0) = CONST 
0x7f4: MSTORE v7f0(0x0) v7ef
0x7f5: v7f5(0x6) = CONST 
0x7f7: v7f7(0x20) = CONST 
0x7f9: MSTORE v7f7(0x20) v7f5(0x6)
0x7fa: v7fa(0x40) = CONST 
0x7fd: v7fd = SHA3 v7f0(0x0) v7fa(0x40)
0x7fe: v7fe = SLOAD v7fd
0x7ff: v7ff(0x80e) = CONST 
0x804: v804(0xffffffff) = CONST 
0x809: v809(0xb3a) = CONST 
0x80c: v80c(0xb3a) = AND v809(0xb3a) v804(0xffffffff)
0x80d: v80d_0 = CALLPRIVATE v80c(0xb3a) v30f v7fe v7ff(0x80e)
----------------------------------

Begin block 0x80e
prev = {'0x7ee'}, next = {'0x840'}
----------------------------------
Block 0x80e
0x80f: v80f = CALLER 
0x810: v810(0x0) = CONST 
0x814: MSTORE v810(0x0) v80f
0x815: v815(0x6) = CONST 
0x817: v817(0x20) = CONST 
0x819: MSTORE v817(0x20) v815(0x6)
0x81a: v81a(0x40) = CONST 
0x81e: v81e = SHA3 v810(0x0) v81a(0x40)
0x822: SSTORE v81e v80d_0
0x823: v823(0x1) = CONST 
0x825: v825(0xa0) = CONST 
0x827: v827(0x2) = CONST 
0x829: v829(0x10000000000000000000000000000000000000000) = EXP v827(0x2) v825(0xa0)
0x82a: v82a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v829(0x10000000000000000000000000000000000000000) v823(0x1)
0x82c: v82c = AND v30a v82a(0xffffffffffffffffffffffffffffffffffffffff)
0x82e: MSTORE v810(0x0) v82c
0x82f: v82f = SHA3 v810(0x0) v81a(0x40)
0x830: v830 = SLOAD v82f
0x831: v831(0x840) = CONST 
0x836: v836(0xffffffff) = CONST 
0x83b: v83b(0xb4f) = CONST 
0x83e: v83e(0xb4f) = AND v83b(0xb4f) v836(0xffffffff)
0x83f: v83f_0 = CALLPRIVATE v83e(0xb4f) v30f v830 v831(0x840)
----------------------------------

Begin block 0x840
prev = {'0x80e'}, next = {'0x1a20x2db'}
----------------------------------
Block 0x840
0x841: v841(0x1) = CONST 
0x843: v843(0xa0) = CONST 
0x845: v845(0x2) = CONST 
0x847: v847(0x10000000000000000000000000000000000000000) = EXP v845(0x2) v843(0xa0)
0x848: v848(0xffffffffffffffffffffffffffffffffffffffff) = SUB v847(0x10000000000000000000000000000000000000000) v841(0x1)
0x84a: v84a = AND v30a v848(0xffffffffffffffffffffffffffffffffffffffff)
0x84b: v84b(0x0) = CONST 
0x84f: MSTORE v84b(0x0) v84a
0x850: v850(0x6) = CONST 
0x852: v852(0x20) = CONST 
0x856: MSTORE v852(0x20) v850(0x6)
0x857: v857(0x40) = CONST 
0x85c: v85c = SHA3 v84b(0x0) v857(0x40)
0x860: SSTORE v85c v83f_0
0x862: v862 = MLOAD v857(0x40)
0x865: MSTORE v862 v30f
0x867: v867 = MLOAD v857(0x40)
0x86a: v86a = CALLER 
0x86c: v86c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x890: v890 = SUB v862 v867
0x893: v893 = ADD v852(0x20) v890
0x895: LOG3 v867 v893 v86c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v86a v84a
0x897: v897(0x1) = CONST 
0x89d: JUMP v2e9(0x1a2)
----------------------------------

Begin block 0x89e
prev = {'0x39b'}, next = {'0x976'}
----------------------------------
Block 0x89e
0x89f: v89f = CALLER 
0x8a0: v8a0(0x0) = CONST 
0x8a4: MSTORE v8a0(0x0) v89f
0x8a5: v8a5(0x7) = CONST 
0x8a7: v8a7(0x20) = CONST 
0x8ab: MSTORE v8a7(0x20) v8a5(0x7)
0x8ac: v8ac(0x40) = CONST 
0x8b0: v8b0 = SHA3 v8a0(0x0) v8ac(0x40)
0x8b1: v8b1(0x1) = CONST 
0x8b3: v8b3(0xa0) = CONST 
0x8b5: v8b5(0x2) = CONST 
0x8b7: v8b7(0x10000000000000000000000000000000000000000) = EXP v8b5(0x2) v8b3(0xa0)
0x8b8: v8b8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b7(0x10000000000000000000000000000000000000000) v8b1(0x1)
0x8ba: v8ba = AND v342 v8b8(0xffffffffffffffffffffffffffffffffffffffff)
0x8bd: MSTORE v8a0(0x0) v8ba
0x8c0: MSTORE v8a7(0x20) v8b0
0x8c3: v8c3 = SHA3 v8a0(0x0) v8ac(0x40)
0x8c6: SSTORE v8c3 v348
0x8c8: v8c8 = MLOAD v8ac(0x40)
0x8cb: MSTORE v8c8 v348
0x8cd: v8cd = MLOAD v8ac(0x40)
0x8d4: v8d4(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x8f8: v8f8 = SUB v8c8 v8cd
0x8f9: v8f9 = ADD v8f8 v8a7(0x20)
0x8fb: LOG3 v8cd v8f9 v8d4(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v89f v8ba
0x8fc: v8fc(0x40) = CONST 
0x8fe: v8fe = MLOAD v8fc(0x40)
0x8ff: v8ff(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = CONST 
0x921: MSTORE v8fe v8ff(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x922: v922 = CALLER 
0x923: v923(0x4) = CONST 
0x926: v926 = ADD v8fe v923(0x4)
0x929: MSTORE v926 v922
0x92a: v92a(0x24) = CONST 
0x92d: v92d = ADD v8fe v92a(0x24)
0x930: MSTORE v92d v348
0x931: v931 = ADDRESS 
0x932: v932(0x44) = CONST 
0x935: v935 = ADD v8fe v932(0x44)
0x938: MSTORE v935 v931
0x939: v939(0x80) = CONST 
0x93b: v93b(0x64) = CONST 
0x93e: v93e = ADD v8fe v93b(0x64)
0x941: MSTORE v93e v939(0x80)
0x943: v943 = MLOAD v3ae
0x944: v944(0x84) = CONST 
0x947: v947 = ADD v8fe v944(0x84)
0x948: MSTORE v947 v943
0x94a: v94a = MLOAD v3ae
0x94b: v94b(0x1) = CONST 
0x94d: v94d(0xa0) = CONST 
0x94f: v94f(0x2) = CONST 
0x951: v951(0x10000000000000000000000000000000000000000) = EXP v94f(0x2) v94d(0xa0)
0x952: v952(0xffffffffffffffffffffffffffffffffffffffff) = SUB v951(0x10000000000000000000000000000000000000000) v94b(0x1)
0x954: v954 = AND v342 v952(0xffffffffffffffffffffffffffffffffffffffff)
0x956: v956(0x8f4ffcb1) = CONST 
0x966: v966(0xa4) = CONST 
0x96a: v96a = ADD v8fe v966(0xa4)
0x96c: v96c(0x20) = CONST 
0x96f: v96f = ADD v3ae v96c(0x20)
0x974: v974(0x0) = CONST 
----------------------------------

Begin block 0x976
prev = {'0x89e', '0x97f'}, next = {'0x98e', '0x97f'}
----------------------------------
Block 0x976
0x976_0x0: v976_0 = PHI v974(0x0) v989
0x979: v979 = LT v976_0 v94a
0x97a: v97a = ISZERO v979
0x97b: v97b(0x98e) = CONST 
0x97e: JUMPI v97b(0x98e) v97a
----------------------------------

Begin block 0x97f
prev = {'0x976'}, next = {'0x976'}
----------------------------------
Block 0x97f
0x97f_0x0: v97f_0 = PHI v974(0x0) v989
0x981: v981 = ADD v97f_0 v96f
0x982: v982 = MLOAD v981
0x985: v985 = ADD v97f_0 v96a
0x986: MSTORE v985 v982
0x987: v987(0x20) = CONST 
0x989: v989 = ADD v987(0x20) v97f_0
0x98a: v98a(0x976) = CONST 
0x98d: JUMP v98a(0x976)
----------------------------------

Begin block 0x98e
prev = {'0x976'}, next = {'0x9bb', '0x9a2'}
----------------------------------
Block 0x98e
0x997: v997 = ADD v94a v96a
0x999: v999(0x1f) = CONST 
0x99b: v99b = AND v999(0x1f) v94a
0x99d: v99d = ISZERO v99b
0x99e: v99e(0x9bb) = CONST 
0x9a1: JUMPI v99e(0x9bb) v99d
----------------------------------

Begin block 0x9a2
prev = {'0x98e'}, next = {'0x9bb'}
----------------------------------
Block 0x9a2
0x9a4: v9a4 = SUB v997 v99b
0x9a6: v9a6 = MLOAD v9a4
0x9a7: v9a7(0x1) = CONST 
0x9aa: v9aa(0x20) = CONST 
0x9ac: v9ac = SUB v9aa(0x20) v99b
0x9ad: v9ad(0x100) = CONST 
0x9b0: v9b0 = EXP v9ad(0x100) v9ac
0x9b1: v9b1 = SUB v9b0 v9a7(0x1)
0x9b2: v9b2 = NOT v9b1
0x9b3: v9b3 = AND v9b2 v9a6
0x9b5: MSTORE v9a4 v9b3
0x9b6: v9b6(0x20) = CONST 
0x9b8: v9b8 = ADD v9b6(0x20) v9a4
----------------------------------

Begin block 0x9bb
prev = {'0x98e', '0x9a2'}, next = {'0x9dd', '0x9d9'}
----------------------------------
Block 0x9bb
0x9bb_0x1: v9bb_1 = PHI v997 v9b8
0x9c4: v9c4(0x0) = CONST 
0x9c6: v9c6(0x40) = CONST 
0x9c8: v9c8 = MLOAD v9c6(0x40)
0x9cb: v9cb = SUB v9bb_1 v9c8
0x9cd: v9cd(0x0) = CONST 
0x9d1: v9d1 = EXTCODESIZE v954
0x9d2: v9d2 = ISZERO v9d1
0x9d4: v9d4 = ISZERO v9d2
0x9d5: v9d5(0x9dd) = CONST 
0x9d8: JUMPI v9d5(0x9dd) v9d4
----------------------------------

Begin block 0x9d9
prev = {'0x9bb'}, next = {}
----------------------------------
Block 0x9d9
0x9d9: v9d9(0x0) = CONST 
0x9dc: REVERT v9d9(0x0) v9d9(0x0)
----------------------------------

Begin block 0x9dd
prev = {'0x9bb'}, next = {'0x9f1', '0x9e8'}
----------------------------------
Block 0x9dd
0x9df: v9df = GAS 
0x9e0: v9e0 = CALL v9df v954 v9cd(0x0) v9c8 v9cb v9c8 v9c4(0x0)
0x9e1: v9e1 = ISZERO v9e0
0x9e3: v9e3 = ISZERO v9e1
0x9e4: v9e4(0x9f1) = CONST 
0x9e7: JUMPI v9e4(0x9f1) v9e3
----------------------------------

Begin block 0x9e8
prev = {'0x9dd'}, next = {}
----------------------------------
Block 0x9e8
0x9e8: v9e8 = RETURNDATASIZE 
0x9e9: v9e9(0x0) = CONST 
0x9ec: RETURNDATACOPY v9e9(0x0) v9e9(0x0) v9e8
0x9ed: v9ed = RETURNDATASIZE 
0x9ee: v9ee(0x0) = CONST 
0x9f0: REVERT v9ee(0x0) v9ed
----------------------------------

Begin block 0x9f1
prev = {'0x9dd'}, next = {'0x1a20x314'}
----------------------------------
Block 0x9f1
0x9f3: v9f3(0x1) = CONST 
0x9fe: JUMP v322(0x1a2)
----------------------------------

Begin block 0x9ff
prev = {'0x3e8'}, next = {'0x2aa0x3dc'}
----------------------------------
Block 0x9ff
0xa00: va00(0x1) = CONST 
0xa02: va02 = SLOAD va00(0x1)
0xa03: va03(0x1) = CONST 
0xa05: va05(0xa0) = CONST 
0xa07: va07(0x2) = CONST 
0xa09: va09(0x10000000000000000000000000000000000000000) = EXP va07(0x2) va05(0xa0)
0xa0a: va0a(0xffffffffffffffffffffffffffffffffffffffff) = SUB va09(0x10000000000000000000000000000000000000000) va03(0x1)
0xa0b: va0b = AND va0a(0xffffffffffffffffffffffffffffffffffffffff) va02
0xa0d: JUMP v3ea(0x2aa)
----------------------------------

Begin block 0xa0e
prev = {'0x414'}, next = {'0xa22', '0xa26'}
----------------------------------
Block 0xa0e
0xa0f: va0f(0x0) = CONST 
0xa12: va12 = SLOAD va0f(0x0)
0xa13: va13(0x1) = CONST 
0xa15: va15(0xa0) = CONST 
0xa17: va17(0x2) = CONST 
0xa19: va19(0x10000000000000000000000000000000000000000) = EXP va17(0x2) va15(0xa0)
0xa1a: va1a(0xffffffffffffffffffffffffffffffffffffffff) = SUB va19(0x10000000000000000000000000000000000000000) va13(0x1)
0xa1b: va1b = AND va1a(0xffffffffffffffffffffffffffffffffffffffff) va12
0xa1c: va1c = CALLER 
0xa1d: va1d = EQ va1c va1b
0xa1e: va1e(0xa26) = CONST 
0xa21: JUMPI va1e(0xa26) va1d
----------------------------------

Begin block 0xa22
prev = {'0xa0e'}, next = {}
----------------------------------
Block 0xa22
0xa22: va22(0x0) = CONST 
0xa25: REVERT va22(0x0) va22(0x0)
----------------------------------

Begin block 0xa26
prev = {'0xa0e'}, next = {'0xa92', '0xa96'}
----------------------------------
Block 0xa26
0xa27: va27(0x0) = CONST 
0xa2a: va2a = SLOAD va27(0x0)
0xa2b: va2b(0x40) = CONST 
0xa2e: va2e = MLOAD va2b(0x40)
0xa2f: va2f(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = CONST 
0xa51: MSTORE va2e va2f(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xa52: va52(0x1) = CONST 
0xa54: va54(0xa0) = CONST 
0xa56: va56(0x2) = CONST 
0xa58: va58(0x10000000000000000000000000000000000000000) = EXP va56(0x2) va54(0xa0)
0xa59: va59(0xffffffffffffffffffffffffffffffffffffffff) = SUB va58(0x10000000000000000000000000000000000000000) va52(0x1)
0xa5c: va5c = AND va59(0xffffffffffffffffffffffffffffffffffffffff) va2a
0xa5d: va5d(0x4) = CONST 
0xa60: va60 = ADD va2e va5d(0x4)
0xa61: MSTORE va60 va5c
0xa62: va62(0x24) = CONST 
0xa65: va65 = ADD va2e va62(0x24)
0xa68: MSTORE va65 v425
0xa6a: va6a = MLOAD va2b(0x40)
0xa6d: va6d = AND v420 va59(0xffffffffffffffffffffffffffffffffffffffff)
0xa6f: va6f(0xa9059cbb) = CONST 
0xa75: va75(0x44) = CONST 
0xa79: va79 = ADD va2e va75(0x44)
0xa7b: va7b(0x20) = CONST 
0xa81: va81 = SUB va2e va6a
0xa84: va84 = ADD va75(0x44) va81
0xa8a: va8a = EXTCODESIZE va6d
0xa8b: va8b = ISZERO va8a
0xa8d: va8d = ISZERO va8b
0xa8e: va8e(0xa96) = CONST 
0xa91: JUMPI va8e(0xa96) va8d
----------------------------------

Begin block 0xa92
prev = {'0xa26'}, next = {}
----------------------------------
Block 0xa92
0xa92: va92(0x0) = CONST 
0xa95: REVERT va92(0x0) va92(0x0)
----------------------------------

Begin block 0xa96
prev = {'0xa26'}, next = {'0xaa1', '0xaaa'}
----------------------------------
Block 0xa96
0xa98: va98 = GAS 
0xa99: va99 = CALL va98 va6d va27(0x0) va6a va84 va6a va7b(0x20)
0xa9a: va9a = ISZERO va99
0xa9c: va9c = ISZERO va9a
0xa9d: va9d(0xaaa) = CONST 
0xaa0: JUMPI va9d(0xaaa) va9c
----------------------------------

Begin block 0xaa1
prev = {'0xa96'}, next = {}
----------------------------------
Block 0xaa1
0xaa1: vaa1 = RETURNDATASIZE 
0xaa2: vaa2(0x0) = CONST 
0xaa5: RETURNDATACOPY vaa2(0x0) vaa2(0x0) vaa1
0xaa6: vaa6 = RETURNDATASIZE 
0xaa7: vaa7(0x0) = CONST 
0xaa9: REVERT vaa7(0x0) vaa6
----------------------------------

Begin block 0xaaa
prev = {'0xa96'}, next = {'0xac0', '0xabc'}
----------------------------------
Block 0xaaa
0xaaf: vaaf(0x40) = CONST 
0xab1: vab1 = MLOAD vaaf(0x40)
0xab2: vab2 = RETURNDATASIZE 
0xab3: vab3(0x20) = CONST 
0xab6: vab6 = LT vab2 vab3(0x20)
0xab7: vab7 = ISZERO vab6
0xab8: vab8(0xac0) = CONST 
0xabb: JUMPI vab8(0xac0) vab7
----------------------------------

Begin block 0xabc
prev = {'0xaaa'}, next = {}
----------------------------------
Block 0xabc
0xabc: vabc(0x0) = CONST 
0xabf: REVERT vabc(0x0) vabc(0x0)
----------------------------------

Begin block 0xac0
prev = {'0xaaa'}, next = {'0x1a20x3f1'}
----------------------------------
Block 0xac0
0xac2: vac2 = MLOAD vab1
0xac8: JUMP v3ff(0x1a2)
----------------------------------

Begin block 0xac9
prev = {'0x44d'}, next = {'0x1cb0x42a'}
----------------------------------
Block 0xac9
0xaca: vaca(0x1) = CONST 
0xacc: vacc(0xa0) = CONST 
0xace: vace(0x2) = CONST 
0xad0: vad0(0x10000000000000000000000000000000000000000) = EXP vace(0x2) vacc(0xa0)
0xad1: vad1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad0(0x10000000000000000000000000000000000000000) vaca(0x1)
0xad4: vad4 = AND vad1(0xffffffffffffffffffffffffffffffffffffffff) v45a
0xad5: vad5(0x0) = CONST 
0xad9: MSTORE vad5(0x0) vad4
0xada: vada(0x7) = CONST 
0xadc: vadc(0x20) = CONST 
0xae0: MSTORE vadc(0x20) vada(0x7)
0xae1: vae1(0x40) = CONST 
0xae5: vae5 = SHA3 vad5(0x0) vae1(0x40)
0xae9: vae9 = AND vad1(0xffffffffffffffffffffffffffffffffffffffff) v460
0xaeb: MSTORE vad5(0x0) vae9
0xaef: MSTORE vadc(0x20) vae5
0xaf0: vaf0 = SHA3 vad5(0x0) vae1(0x40)
0xaf1: vaf1 = SLOAD vaf0
0xaf3: JUMP v438(0x1cb)
----------------------------------

Begin block 0xaf4
prev = {'0x488'}, next = {'0xb07', '0xb0b'}
----------------------------------
Block 0xaf4
0xaf5: vaf5(0x0) = CONST 
0xaf7: vaf7 = SLOAD vaf5(0x0)
0xaf8: vaf8(0x1) = CONST 
0xafa: vafa(0xa0) = CONST 
0xafc: vafc(0x2) = CONST 
0xafe: vafe(0x10000000000000000000000000000000000000000) = EXP vafc(0x2) vafa(0xa0)
0xaff: vaff(0xffffffffffffffffffffffffffffffffffffffff) = SUB vafe(0x10000000000000000000000000000000000000000) vaf8(0x1)
0xb00: vb00 = AND vaff(0xffffffffffffffffffffffffffffffffffffffff) vaf7
0xb01: vb01 = CALLER 
0xb02: vb02 = EQ vb01 vb00
0xb03: vb03(0xb0b) = CONST 
0xb06: JUMPI vb03(0xb0b) vb02
----------------------------------

Begin block 0xb07
prev = {'0xaf4'}, next = {}
----------------------------------
Block 0xb07
0xb07: vb07(0x0) = CONST 
0xb0a: REVERT vb07(0x0) vb07(0x0)
----------------------------------

Begin block 0xb0b
prev = {'0xaf4'}, next = {'0x2930x465'}
----------------------------------
Block 0xb0b
0xb0c: vb0c(0x1) = CONST 
0xb0f: vb0f = SLOAD vb0c(0x1)
0xb10: vb10(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb25: vb25(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vb10(0xffffffffffffffffffffffffffffffffffffffff)
0xb26: vb26 = AND vb25(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vb0f
0xb27: vb27(0x1) = CONST 
0xb29: vb29(0xa0) = CONST 
0xb2b: vb2b(0x2) = CONST 
0xb2d: vb2d(0x10000000000000000000000000000000000000000) = EXP vb2b(0x2) vb29(0xa0)
0xb2e: vb2e(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb2d(0x10000000000000000000000000000000000000000) vb27(0x1)
0xb32: vb32 = AND vb2e(0xffffffffffffffffffffffffffffffffffffffff) v493
0xb36: vb36 = OR vb32 vb26
0xb38: SSTORE vb0c(0x1) vb36
0xb39: JUMP v473(0x293)
----------------------------------

Begin block 0xb3a
prev = {}, next = {'0xb45', '0xb49'}
----------------------------------
function 0xb3a(vb3aarg0, vb3aarg1, vb3aarg2)
Block 0xb3a
0xb3b: vb3b(0x0) = CONST 
0xb3f: vb3f = GT vb3aarg0 vb3aarg1
0xb40: vb40 = ISZERO vb3f
0xb41: vb41(0xb49) = CONST 
0xb44: JUMPI vb41(0xb49) vb40
----------------------------------

Begin block 0xb45
prev = {'0xb3a'}, next = {}
----------------------------------
Block 0xb45
0xb45: vb45(0x0) = CONST 
0xb48: REVERT vb45(0x0) vb45(0x0)
----------------------------------

Begin block 0xb49
prev = {'0xb3a'}, next = {}
----------------------------------
Block 0xb49
0xb4c: vb4c = SUB vb3aarg1 vb3aarg0
0xb4e: RETURNPRIVATE vb3aarg2 vb4c
----------------------------------

Begin block 0xb4f
prev = {}, next = {'0x5870xb4f', '0xb5b'}
----------------------------------
function 0xb4f(vb4farg0, vb4farg1, vb4farg2)
Block 0xb4f
0xb52: vb52 = ADD vb4farg0 vb4farg1
0xb55: vb55 = LT vb52 vb4farg1
0xb56: vb56 = ISZERO vb55
0xb57: vb57(0x587) = CONST 
0xb5a: JUMPI vb57(0x587) vb56
----------------------------------

Begin block 0xb5b
prev = {'0xb4f'}, next = {}
----------------------------------
Block 0xb5b
0xb5b: vb5b(0x0) = CONST 
0xb5e: REVERT vb5b(0x0) vb5b(0x0)
----------------------------------

Begin block 0xba8
prev = {'0xcf', '0x0'}, next = {}
----------------------------------
Block 0xba8
0xba9: vba9(0xda) = CONST 
0xbaa: CALLPRIVATE vba9(0xda)
----------------------------------

Begin block 0xbab
prev = {'0xd'}, next = {}
----------------------------------
Block 0xbab
0xbac: vbac(0xdf) = CONST 
0xbad: CALLPRIVATE vbac(0xdf)
----------------------------------

Begin block 0xbae
prev = {'0x40'}, next = {}
----------------------------------
Block 0xbae
0xbaf: vbaf(0x169) = CONST 
0xbb0: CALLPRIVATE vbaf(0x169)
----------------------------------

Begin block 0xbb1
prev = {'0x4b'}, next = {}
----------------------------------
Block 0xbb1
0xbb2: vbb2(0x1b6) = CONST 
0xbb3: CALLPRIVATE vbb2(0x1b6)
----------------------------------

Begin block 0xbb4
prev = {'0x56'}, next = {}
----------------------------------
Block 0xbb4
0xbb5: vbb5(0x1dd) = CONST 
0xbb6: CALLPRIVATE vbb5(0x1dd)
----------------------------------

Begin block 0xbb7
prev = {'0x61'}, next = {}
----------------------------------
Block 0xbb7
0xbb8: vbb8(0x220) = CONST 
0xbb9: CALLPRIVATE vbb8(0x220)
----------------------------------

Begin block 0xbba
prev = {'0x6c'}, next = {}
----------------------------------
Block 0xbba
0xbbb: vbbb(0x24b) = CONST 
0xbbc: CALLPRIVATE vbbb(0x24b)
----------------------------------

Begin block 0xbbd
prev = {'0x77'}, next = {}
----------------------------------
Block 0xbbd
0xbbe: vbbe(0x27e) = CONST 
0xbbf: CALLPRIVATE vbbe(0x27e)
----------------------------------

Begin block 0xbc0
prev = {'0x82'}, next = {}
----------------------------------
Block 0xbc0
0xbc1: vbc1(0x295) = CONST 
0xbc2: CALLPRIVATE vbc1(0x295)
----------------------------------

Begin block 0xbc3
prev = {'0x8d'}, next = {}
----------------------------------
Block 0xbc3
0xbc4: vbc4(0x2c6) = CONST 
0xbc5: CALLPRIVATE vbc4(0x2c6)
----------------------------------

Begin block 0xbc6
prev = {'0x98'}, next = {}
----------------------------------
Block 0xbc6
0xbc7: vbc7(0x2db) = CONST 
0xbc8: CALLPRIVATE vbc7(0x2db)
----------------------------------

Begin block 0xbc9
prev = {'0xa3'}, next = {}
----------------------------------
Block 0xbc9
0xbca: vbca(0x314) = CONST 
0xbcb: CALLPRIVATE vbca(0x314)
----------------------------------

Begin block 0xbcc
prev = {'0xae'}, next = {}
----------------------------------
Block 0xbcc
0xbcd: vbcd(0x3dc) = CONST 
0xbce: CALLPRIVATE vbcd(0x3dc)
----------------------------------

Begin block 0xbcf
prev = {'0xb9'}, next = {}
----------------------------------
Block 0xbcf
0xbd0: vbd0(0x3f1) = CONST 
0xbd1: CALLPRIVATE vbd0(0x3f1)
----------------------------------

Begin block 0xbd2
prev = {'0xc4'}, next = {}
----------------------------------
Block 0xbd2
0xbd3: vbd3(0x42a) = CONST 
0xbd4: CALLPRIVATE vbd3(0x42a)
----------------------------------

Begin block 0xbd5
prev = {'0xcf'}, next = {}
----------------------------------
Block 0xbd5
0xbd6: vbd6(0x465) = CONST 
0xbd7: CALLPRIVATE vbd6(0x465)
----------------------------------
