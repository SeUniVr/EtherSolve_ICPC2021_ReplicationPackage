
Begin block 0x0
prev = {}, next = {'0xd', '0x1113'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x10f7: v10f7(0x1113) = CONST 
0x10f8: JUMPI v10f7(0x1113) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1116', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x10f9: v10f9(0x1116) = CONST 
0x10fa: JUMPI v10f9(0x1116) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x4c', '0x1119'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x10fb: v10fb(0x1119) = CONST 
0x10fc: JUMPI v10fb(0x1119) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x111c', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x10fd: v10fd(0x111c) = CONST 
0x10fe: JUMPI v10fd(0x111c) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x111f', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x2194f3a2) = CONST 
0x5d: v5d = EQ v58(0x2194f3a2) v35
0x10ff: v10ff(0x111f) = CONST 
0x1100: JUMPI v10ff(0x111f) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x1122', '0x6d'}
----------------------------------
Block 0x62
0x63: v63(0x23b872dd) = CONST 
0x68: v68 = EQ v63(0x23b872dd) v35
0x1101: v1101(0x1122) = CONST 
0x1102: JUMPI v1101(0x1122) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x78', '0x1125'}
----------------------------------
Block 0x6d
0x6e: v6e(0x313ce567) = CONST 
0x73: v73 = EQ v6e(0x313ce567) v35
0x1103: v1103(0x1125) = CONST 
0x1104: JUMPI v1103(0x1125) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x83', '0x1128'}
----------------------------------
Block 0x78
0x79: v79(0x54fd4d50) = CONST 
0x7e: v7e = EQ v79(0x54fd4d50) v35
0x1105: v1105(0x1128) = CONST 
0x1106: JUMPI v1105(0x1128) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x8e', '0x112b'}
----------------------------------
Block 0x83
0x84: v84(0x70a08231) = CONST 
0x89: v89 = EQ v84(0x70a08231) v35
0x1107: v1107(0x112b) = CONST 
0x1108: JUMPI v1107(0x112b) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x99', '0x112e'}
----------------------------------
Block 0x8e
0x8f: v8f(0x95d89b41) = CONST 
0x94: v94 = EQ v8f(0x95d89b41) v35
0x1109: v1109(0x112e) = CONST 
0x110a: JUMPI v1109(0x112e) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xa4', '0x1131'}
----------------------------------
Block 0x99
0x9a: v9a(0xa9059cbb) = CONST 
0x9f: v9f = EQ v9a(0xa9059cbb) v35
0x110b: v110b(0x1131) = CONST 
0x110c: JUMPI v110b(0x1131) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0x1134', '0xaf'}
----------------------------------
Block 0xa4
0xa5: va5(0xaa8c217c) = CONST 
0xaa: vaa = EQ va5(0xaa8c217c) v35
0x110d: v110d(0x1134) = CONST 
0x110e: JUMPI v110d(0x1134) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0x1137', '0xba'}
----------------------------------
Block 0xaf
0xb0: vb0(0xcae9ca51) = CONST 
0xb5: vb5 = EQ vb0(0xcae9ca51) v35
0x110f: v110f(0x1137) = CONST 
0x1110: JUMPI v110f(0x1137) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0x1113', '0x113a'}
----------------------------------
Block 0xba
0xbb: vbb(0xdd62ed3e) = CONST 
0xc0: vc0 = EQ vbb(0xdd62ed3e) v35
0x1111: v1111(0x113a) = CONST 
0x1112: JUMPI v1111(0x113a) vc0
----------------------------------

Begin block 0xc5
prev = {}, next = {'0x12d', '0x124'}
----------------------------------
function batchLock_63efZf()()
Block 0xc5
0xc6: vc6(0x7) = CONST 
0xc8: vc8(0x0) = CONST 
0xcb: vcb = SLOAD vc6(0x7)
0xcd: vcd(0x100) = CONST 
0xd0: vd0(0x1) = EXP vcd(0x100) vc8(0x0)
0xd2: vd2 = DIV vcb vd0(0x1)
0xd3: vd3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe8: ve8 = AND vd3(0xffffffffffffffffffffffffffffffffffffffff) vd2
0xe9: ve9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfe: vfe = AND ve9(0xffffffffffffffffffffffffffffffffffffffff) ve8
0xff: vff(0x8fc) = CONST 
0x102: v102 = CALLVALUE 
0x105: v105 = ISZERO v102
0x106: v106 = MUL v105 vff(0x8fc)
0x108: v108(0x40) = CONST 
0x10a: v10a = MLOAD v108(0x40)
0x10b: v10b(0x0) = CONST 
0x10d: v10d(0x40) = CONST 
0x10f: v10f = MLOAD v10d(0x40)
0x112: v112 = SUB v10a v10f
0x117: v117 = CALL v106 vfe v102 v10f v112 v10f v10b(0x0)
0x11d: v11d = ISZERO v117
0x11f: v11f = ISZERO v11d
0x120: v120(0x12d) = CONST 
0x123: JUMPI v120(0x12d) v11f
----------------------------------

Begin block 0x124
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x124
0x124: v124 = RETURNDATASIZE 
0x125: v125(0x0) = CONST 
0x128: RETURNDATACOPY v125(0x0) v125(0x0) v124
0x129: v129 = RETURNDATASIZE 
0x12a: v12a(0x0) = CONST 
0x12c: REVERT v12a(0x0) v129
----------------------------------

Begin block 0x12d
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x12d
0x12f: STOP 
----------------------------------

Begin block 0x130
prev = {}, next = {'0x138', '0x13c'}
----------------------------------
function name()()
Block 0x130
0x131: v131 = CALLVALUE 
0x133: v133 = ISZERO v131
0x134: v134(0x13c) = CONST 
0x137: JUMPI v134(0x13c) v133
----------------------------------

Begin block 0x138
prev = {'0x130'}, next = {}
----------------------------------
Block 0x138
0x138: v138(0x0) = CONST 
0x13b: REVERT v138(0x0) v138(0x0)
----------------------------------

Begin block 0x13c
prev = {'0x130'}, next = {'0x686'}
----------------------------------
Block 0x13c
0x13e: v13e(0x145) = CONST 
0x141: v141(0x686) = CONST 
0x144: JUMP v141(0x686)
----------------------------------

Begin block 0x145
prev = {'0x71c'}, next = {'0x16a'}
----------------------------------
Block 0x145
0x146: v146(0x40) = CONST 
0x148: v148 = MLOAD v146(0x40)
0x14b: v14b(0x20) = CONST 
0x14d: v14d = ADD v14b(0x20) v148
0x150: v150 = SUB v14d v148
0x152: MSTORE v148 v150
0x156: v156 = MLOAD v6ab
0x158: MSTORE v14d v156
0x159: v159(0x20) = CONST 
0x15b: v15b = ADD v159(0x20) v14d
0x15f: v15f = MLOAD v6ab
0x161: v161(0x20) = CONST 
0x163: v163 = ADD v161(0x20) v6ab
0x168: v168(0x0) = CONST 
----------------------------------

Begin block 0x16a
prev = {'0x173', '0x145'}, next = {'0x173', '0x185'}
----------------------------------
Block 0x16a
0x16a_0x0: v16a_0 = PHI v168(0x0) v17e
0x16d: v16d = LT v16a_0 v15f
0x16e: v16e = ISZERO v16d
0x16f: v16f(0x185) = CONST 
0x172: JUMPI v16f(0x185) v16e
----------------------------------

Begin block 0x173
prev = {'0x16a'}, next = {'0x16a'}
----------------------------------
Block 0x173
0x173_0x0: v173_0 = PHI v168(0x0) v17e
0x175: v175 = ADD v163 v173_0
0x176: v176 = MLOAD v175
0x179: v179 = ADD v15b v173_0
0x17a: MSTORE v179 v176
0x17b: v17b(0x20) = CONST 
0x17e: v17e = ADD v173_0 v17b(0x20)
0x181: v181(0x16a) = CONST 
0x184: JUMP v181(0x16a)
----------------------------------

Begin block 0x185
prev = {'0x16a'}, next = {'0x199', '0x1b2'}
----------------------------------
Block 0x185
0x18e: v18e = ADD v15f v15b
0x190: v190(0x1f) = CONST 
0x192: v192 = AND v190(0x1f) v15f
0x194: v194 = ISZERO v192
0x195: v195(0x1b2) = CONST 
0x198: JUMPI v195(0x1b2) v194
----------------------------------

Begin block 0x199
prev = {'0x185'}, next = {'0x1b2'}
----------------------------------
Block 0x199
0x19b: v19b = SUB v18e v192
0x19d: v19d = MLOAD v19b
0x19e: v19e(0x1) = CONST 
0x1a1: v1a1(0x20) = CONST 
0x1a3: v1a3 = SUB v1a1(0x20) v192
0x1a4: v1a4(0x100) = CONST 
0x1a7: v1a7 = EXP v1a4(0x100) v1a3
0x1a8: v1a8 = SUB v1a7 v19e(0x1)
0x1a9: v1a9 = NOT v1a8
0x1aa: v1aa = AND v1a9 v19d
0x1ac: MSTORE v19b v1aa
0x1ad: v1ad(0x20) = CONST 
0x1af: v1af = ADD v1ad(0x20) v19b
----------------------------------

Begin block 0x1b2
prev = {'0x185', '0x199'}, next = {}
----------------------------------
Block 0x1b2
0x1b2_0x1: v1b2_1 = PHI v18e v1af
0x1b8: v1b8(0x40) = CONST 
0x1ba: v1ba = MLOAD v1b8(0x40)
0x1bd: v1bd = SUB v1b2_1 v1ba
0x1bf: RETURN v1ba v1bd
----------------------------------

Begin block 0x1c0
prev = {}, next = {'0x1cc', '0x1c8'}
----------------------------------
function approve(address,uint256)()
Block 0x1c0
0x1c1: v1c1 = CALLVALUE 
0x1c3: v1c3 = ISZERO v1c1
0x1c4: v1c4(0x1cc) = CONST 
0x1c7: JUMPI v1c4(0x1cc) v1c3
----------------------------------

Begin block 0x1c8
prev = {'0x1c0'}, next = {}
----------------------------------
Block 0x1c8
0x1c8: v1c8(0x0) = CONST 
0x1cb: REVERT v1c8(0x0) v1c8(0x0)
----------------------------------

Begin block 0x1cc
prev = {'0x1c0'}, next = {'0x724'}
----------------------------------
Block 0x1cc
0x1ce: v1ce(0x20b) = CONST 
0x1d1: v1d1(0x4) = CONST 
0x1d4: v1d4 = CALLDATASIZE 
0x1d5: v1d5 = SUB v1d4 v1d1(0x4)
0x1d7: v1d7 = ADD v1d1(0x4) v1d5
0x1db: v1db = CALLDATALOAD v1d1(0x4)
0x1dc: v1dc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f1: v1f1 = AND v1dc(0xffffffffffffffffffffffffffffffffffffffff) v1db
0x1f3: v1f3(0x20) = CONST 
0x1f5: v1f5(0x24) = ADD v1f3(0x20) v1d1(0x4)
0x1fb: v1fb = CALLDATALOAD v1f5(0x24)
0x1fd: v1fd(0x20) = CONST 
0x1ff: v1ff(0x44) = ADD v1fd(0x20) v1f5(0x24)
0x207: v207(0x724) = CONST 
0x20a: JUMP v207(0x724)
----------------------------------

Begin block 0x20b
prev = {'0x724'}, next = {}
----------------------------------
Block 0x20b
0x20c: v20c(0x40) = CONST 
0x20e: v20e = MLOAD v20c(0x40)
0x211: v211 = ISZERO v80d(0x1)
0x212: v212 = ISZERO v211
0x213: v213 = ISZERO v212
0x214: v214 = ISZERO v213
0x216: MSTORE v20e v214
0x217: v217(0x20) = CONST 
0x219: v219 = ADD v217(0x20) v20e
0x21d: v21d(0x40) = CONST 
0x21f: v21f = MLOAD v21d(0x40)
0x222: v222 = SUB v219 v21f
0x224: RETURN v21f v222
----------------------------------

Begin block 0x225
prev = {}, next = {'0x231', '0x22d'}
----------------------------------
function totalSupply()()
Block 0x225
0x226: v226 = CALLVALUE 
0x228: v228 = ISZERO v226
0x229: v229(0x231) = CONST 
0x22c: JUMPI v229(0x231) v228
----------------------------------

Begin block 0x22d
prev = {'0x225'}, next = {}
----------------------------------
Block 0x22d
0x22d: v22d(0x0) = CONST 
0x230: REVERT v22d(0x0) v22d(0x0)
----------------------------------

Begin block 0x231
prev = {'0x225'}, next = {'0x816'}
----------------------------------
Block 0x231
0x233: v233(0x23a) = CONST 
0x236: v236(0x816) = CONST 
0x239: JUMP v236(0x816)
----------------------------------

Begin block 0x23a
prev = {'0x816'}, next = {}
----------------------------------
Block 0x23a
0x23b: v23b(0x40) = CONST 
0x23d: v23d = MLOAD v23b(0x40)
0x241: MSTORE v23d v819
0x242: v242(0x20) = CONST 
0x244: v244 = ADD v242(0x20) v23d
0x248: v248(0x40) = CONST 
0x24a: v24a = MLOAD v248(0x40)
0x24d: v24d = SUB v244 v24a
0x24f: RETURN v24a v24d
----------------------------------

Begin block 0x250
prev = {}, next = {'0x258', '0x25c'}
----------------------------------
function fundsWallet()()
Block 0x250
0x251: v251 = CALLVALUE 
0x253: v253 = ISZERO v251
0x254: v254(0x25c) = CONST 
0x257: JUMPI v254(0x25c) v253
----------------------------------

Begin block 0x258
prev = {'0x250'}, next = {}
----------------------------------
Block 0x258
0x258: v258(0x0) = CONST 
0x25b: REVERT v258(0x0) v258(0x0)
----------------------------------

Begin block 0x25c
prev = {'0x250'}, next = {'0x81c'}
----------------------------------
Block 0x25c
0x25e: v25e(0x265) = CONST 
0x261: v261(0x81c) = CONST 
0x264: JUMP v261(0x81c)
----------------------------------

Begin block 0x265
prev = {'0x81c'}, next = {}
----------------------------------
Block 0x265
0x266: v266(0x40) = CONST 
0x268: v268 = MLOAD v266(0x40)
0x26b: v26b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x280: v280 = AND v26b(0xffffffffffffffffffffffffffffffffffffffff) v83f
0x281: v281(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x296: v296 = AND v281(0xffffffffffffffffffffffffffffffffffffffff) v280
0x298: MSTORE v268 v296
0x299: v299(0x20) = CONST 
0x29b: v29b = ADD v299(0x20) v268
0x29f: v29f(0x40) = CONST 
0x2a1: v2a1 = MLOAD v29f(0x40)
0x2a4: v2a4 = SUB v29b v2a1
0x2a6: RETURN v2a1 v2a4
----------------------------------

Begin block 0x2a7
prev = {}, next = {'0x2b3', '0x2af'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x2a7
0x2a8: v2a8 = CALLVALUE 
0x2aa: v2aa = ISZERO v2a8
0x2ab: v2ab(0x2b3) = CONST 
0x2ae: JUMPI v2ab(0x2b3) v2aa
----------------------------------

Begin block 0x2af
prev = {'0x2a7'}, next = {}
----------------------------------
Block 0x2af
0x2af: v2af(0x0) = CONST 
0x2b2: REVERT v2af(0x0) v2af(0x0)
----------------------------------

Begin block 0x2b3
prev = {'0x2a7'}, next = {'0x842'}
----------------------------------
Block 0x2b3
0x2b5: v2b5(0x312) = CONST 
0x2b8: v2b8(0x4) = CONST 
0x2bb: v2bb = CALLDATASIZE 
0x2bc: v2bc = SUB v2bb v2b8(0x4)
0x2be: v2be = ADD v2b8(0x4) v2bc
0x2c2: v2c2 = CALLDATALOAD v2b8(0x4)
0x2c3: v2c3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2d8: v2d8 = AND v2c3(0xffffffffffffffffffffffffffffffffffffffff) v2c2
0x2da: v2da(0x20) = CONST 
0x2dc: v2dc(0x24) = ADD v2da(0x20) v2b8(0x4)
0x2e2: v2e2 = CALLDATALOAD v2dc(0x24)
0x2e3: v2e3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2f8: v2f8 = AND v2e3(0xffffffffffffffffffffffffffffffffffffffff) v2e2
0x2fa: v2fa(0x20) = CONST 
0x2fc: v2fc(0x44) = ADD v2fa(0x20) v2dc(0x24)
0x302: v302 = CALLDATALOAD v2fc(0x44)
0x304: v304(0x20) = CONST 
0x306: v306(0x64) = ADD v304(0x20) v2fc(0x44)
0x30e: v30e(0x842) = CONST 
0x311: JUMP v30e(0x842)
----------------------------------

Begin block 0x312
prev = {'0xab4'}, next = {}
----------------------------------
Block 0x312
0x312_0x0: v312_0 = PHI vaa7(0x1) vab0(0x0)
0x313: v313(0x40) = CONST 
0x315: v315 = MLOAD v313(0x40)
0x318: v318 = ISZERO v312_0
0x319: v319 = ISZERO v318
0x31a: v31a = ISZERO v319
0x31b: v31b = ISZERO v31a
0x31d: MSTORE v315 v31b
0x31e: v31e(0x20) = CONST 
0x320: v320 = ADD v31e(0x20) v315
0x324: v324(0x40) = CONST 
0x326: v326 = MLOAD v324(0x40)
0x329: v329 = SUB v320 v326
0x32b: RETURN v326 v329
----------------------------------

Begin block 0x32c
prev = {}, next = {'0x338', '0x334'}
----------------------------------
function decimals()()
Block 0x32c
0x32d: v32d = CALLVALUE 
0x32f: v32f = ISZERO v32d
0x330: v330(0x338) = CONST 
0x333: JUMPI v330(0x338) v32f
----------------------------------

Begin block 0x334
prev = {'0x32c'}, next = {}
----------------------------------
Block 0x334
0x334: v334(0x0) = CONST 
0x337: REVERT v334(0x0) v334(0x0)
----------------------------------

Begin block 0x338
prev = {'0x32c'}, next = {'0xabb'}
----------------------------------
Block 0x338
0x33a: v33a(0x341) = CONST 
0x33d: v33d(0xabb) = CONST 
0x340: JUMP v33d(0xabb)
----------------------------------

Begin block 0x341
prev = {'0xabb'}, next = {}
----------------------------------
Block 0x341
0x342: v342(0x40) = CONST 
0x344: v344 = MLOAD v342(0x40)
0x347: v347(0xff) = CONST 
0x349: v349 = AND v347(0xff) vacb
0x34a: v34a(0xff) = CONST 
0x34c: v34c = AND v34a(0xff) v349
0x34e: MSTORE v344 v34c
0x34f: v34f(0x20) = CONST 
0x351: v351 = ADD v34f(0x20) v344
0x355: v355(0x40) = CONST 
0x357: v357 = MLOAD v355(0x40)
0x35a: v35a = SUB v351 v357
0x35c: RETURN v357 v35a
----------------------------------

Begin block 0x35d
prev = {}, next = {'0x365', '0x369'}
----------------------------------
function version()()
Block 0x35d
0x35e: v35e = CALLVALUE 
0x360: v360 = ISZERO v35e
0x361: v361(0x369) = CONST 
0x364: JUMPI v361(0x369) v360
----------------------------------

Begin block 0x365
prev = {'0x35d'}, next = {}
----------------------------------
Block 0x365
0x365: v365(0x0) = CONST 
0x368: REVERT v365(0x0) v365(0x0)
----------------------------------

Begin block 0x369
prev = {'0x35d'}, next = {'0xace'}
----------------------------------
Block 0x369
0x36b: v36b(0x372) = CONST 
0x36e: v36e(0xace) = CONST 
0x371: JUMP v36e(0xace)
----------------------------------

Begin block 0x372
prev = {'0xb64'}, next = {'0x397'}
----------------------------------
Block 0x372
0x373: v373(0x40) = CONST 
0x375: v375 = MLOAD v373(0x40)
0x378: v378(0x20) = CONST 
0x37a: v37a = ADD v378(0x20) v375
0x37d: v37d = SUB v37a v375
0x37f: MSTORE v375 v37d
0x383: v383 = MLOAD vaf3
0x385: MSTORE v37a v383
0x386: v386(0x20) = CONST 
0x388: v388 = ADD v386(0x20) v37a
0x38c: v38c = MLOAD vaf3
0x38e: v38e(0x20) = CONST 
0x390: v390 = ADD v38e(0x20) vaf3
0x395: v395(0x0) = CONST 
----------------------------------

Begin block 0x397
prev = {'0x372', '0x3a0'}, next = {'0x3a0', '0x3b2'}
----------------------------------
Block 0x397
0x397_0x0: v397_0 = PHI v395(0x0) v3ab
0x39a: v39a = LT v397_0 v38c
0x39b: v39b = ISZERO v39a
0x39c: v39c(0x3b2) = CONST 
0x39f: JUMPI v39c(0x3b2) v39b
----------------------------------

Begin block 0x3a0
prev = {'0x397'}, next = {'0x397'}
----------------------------------
Block 0x3a0
0x3a0_0x0: v3a0_0 = PHI v395(0x0) v3ab
0x3a2: v3a2 = ADD v390 v3a0_0
0x3a3: v3a3 = MLOAD v3a2
0x3a6: v3a6 = ADD v388 v3a0_0
0x3a7: MSTORE v3a6 v3a3
0x3a8: v3a8(0x20) = CONST 
0x3ab: v3ab = ADD v3a0_0 v3a8(0x20)
0x3ae: v3ae(0x397) = CONST 
0x3b1: JUMP v3ae(0x397)
----------------------------------

Begin block 0x3b2
prev = {'0x397'}, next = {'0x3c6', '0x3df'}
----------------------------------
Block 0x3b2
0x3bb: v3bb = ADD v38c v388
0x3bd: v3bd(0x1f) = CONST 
0x3bf: v3bf = AND v3bd(0x1f) v38c
0x3c1: v3c1 = ISZERO v3bf
0x3c2: v3c2(0x3df) = CONST 
0x3c5: JUMPI v3c2(0x3df) v3c1
----------------------------------

Begin block 0x3c6
prev = {'0x3b2'}, next = {'0x3df'}
----------------------------------
Block 0x3c6
0x3c8: v3c8 = SUB v3bb v3bf
0x3ca: v3ca = MLOAD v3c8
0x3cb: v3cb(0x1) = CONST 
0x3ce: v3ce(0x20) = CONST 
0x3d0: v3d0 = SUB v3ce(0x20) v3bf
0x3d1: v3d1(0x100) = CONST 
0x3d4: v3d4 = EXP v3d1(0x100) v3d0
0x3d5: v3d5 = SUB v3d4 v3cb(0x1)
0x3d6: v3d6 = NOT v3d5
0x3d7: v3d7 = AND v3d6 v3ca
0x3d9: MSTORE v3c8 v3d7
0x3da: v3da(0x20) = CONST 
0x3dc: v3dc = ADD v3da(0x20) v3c8
----------------------------------

Begin block 0x3df
prev = {'0x3c6', '0x3b2'}, next = {}
----------------------------------
Block 0x3df
0x3df_0x1: v3df_1 = PHI v3bb v3dc
0x3e5: v3e5(0x40) = CONST 
0x3e7: v3e7 = MLOAD v3e5(0x40)
0x3ea: v3ea = SUB v3df_1 v3e7
0x3ec: RETURN v3e7 v3ea
----------------------------------

Begin block 0x3ed
prev = {}, next = {'0x3f9', '0x3f5'}
----------------------------------
function balanceOf(address)()
Block 0x3ed
0x3ee: v3ee = CALLVALUE 
0x3f0: v3f0 = ISZERO v3ee
0x3f1: v3f1(0x3f9) = CONST 
0x3f4: JUMPI v3f1(0x3f9) v3f0
----------------------------------

Begin block 0x3f5
prev = {'0x3ed'}, next = {}
----------------------------------
Block 0x3f5
0x3f5: v3f5(0x0) = CONST 
0x3f8: REVERT v3f5(0x0) v3f5(0x0)
----------------------------------

Begin block 0x3f9
prev = {'0x3ed'}, next = {'0xb6c'}
----------------------------------
Block 0x3f9
0x3fb: v3fb(0x42e) = CONST 
0x3fe: v3fe(0x4) = CONST 
0x401: v401 = CALLDATASIZE 
0x402: v402 = SUB v401 v3fe(0x4)
0x404: v404 = ADD v3fe(0x4) v402
0x408: v408 = CALLDATALOAD v3fe(0x4)
0x409: v409(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x41e: v41e = AND v409(0xffffffffffffffffffffffffffffffffffffffff) v408
0x420: v420(0x20) = CONST 
0x422: v422(0x24) = ADD v420(0x20) v3fe(0x4)
0x42a: v42a(0xb6c) = CONST 
0x42d: JUMP v42a(0xb6c)
----------------------------------

Begin block 0x42e
prev = {'0xb6c'}, next = {}
----------------------------------
Block 0x42e
0x42f: v42f(0x40) = CONST 
0x431: v431 = MLOAD v42f(0x40)
0x435: MSTORE v431 vbad
0x436: v436(0x20) = CONST 
0x438: v438 = ADD v436(0x20) v431
0x43c: v43c(0x40) = CONST 
0x43e: v43e = MLOAD v43c(0x40)
0x441: v441 = SUB v438 v43e
0x443: RETURN v43e v441
----------------------------------

Begin block 0x444
prev = {}, next = {'0x450', '0x44c'}
----------------------------------
function symbol()()
Block 0x444
0x445: v445 = CALLVALUE 
0x447: v447 = ISZERO v445
0x448: v448(0x450) = CONST 
0x44b: JUMPI v448(0x450) v447
----------------------------------

Begin block 0x44c
prev = {'0x444'}, next = {}
----------------------------------
Block 0x44c
0x44c: v44c(0x0) = CONST 
0x44f: REVERT v44c(0x0) v44c(0x0)
----------------------------------

Begin block 0x450
prev = {'0x444'}, next = {'0xbb4'}
----------------------------------
Block 0x450
0x452: v452(0x459) = CONST 
0x455: v455(0xbb4) = CONST 
0x458: JUMP v455(0xbb4)
----------------------------------

Begin block 0x459
prev = {'0xc4a'}, next = {'0x47e'}
----------------------------------
Block 0x459
0x45a: v45a(0x40) = CONST 
0x45c: v45c = MLOAD v45a(0x40)
0x45f: v45f(0x20) = CONST 
0x461: v461 = ADD v45f(0x20) v45c
0x464: v464 = SUB v461 v45c
0x466: MSTORE v45c v464
0x46a: v46a = MLOAD vbd9
0x46c: MSTORE v461 v46a
0x46d: v46d(0x20) = CONST 
0x46f: v46f = ADD v46d(0x20) v461
0x473: v473 = MLOAD vbd9
0x475: v475(0x20) = CONST 
0x477: v477 = ADD v475(0x20) vbd9
0x47c: v47c(0x0) = CONST 
----------------------------------

Begin block 0x47e
prev = {'0x487', '0x459'}, next = {'0x487', '0x499'}
----------------------------------
Block 0x47e
0x47e_0x0: v47e_0 = PHI v47c(0x0) v492
0x481: v481 = LT v47e_0 v473
0x482: v482 = ISZERO v481
0x483: v483(0x499) = CONST 
0x486: JUMPI v483(0x499) v482
----------------------------------

Begin block 0x487
prev = {'0x47e'}, next = {'0x47e'}
----------------------------------
Block 0x487
0x487_0x0: v487_0 = PHI v47c(0x0) v492
0x489: v489 = ADD v477 v487_0
0x48a: v48a = MLOAD v489
0x48d: v48d = ADD v46f v487_0
0x48e: MSTORE v48d v48a
0x48f: v48f(0x20) = CONST 
0x492: v492 = ADD v487_0 v48f(0x20)
0x495: v495(0x47e) = CONST 
0x498: JUMP v495(0x47e)
----------------------------------

Begin block 0x499
prev = {'0x47e'}, next = {'0x4ad', '0x4c6'}
----------------------------------
Block 0x499
0x4a2: v4a2 = ADD v473 v46f
0x4a4: v4a4(0x1f) = CONST 
0x4a6: v4a6 = AND v4a4(0x1f) v473
0x4a8: v4a8 = ISZERO v4a6
0x4a9: v4a9(0x4c6) = CONST 
0x4ac: JUMPI v4a9(0x4c6) v4a8
----------------------------------

Begin block 0x4ad
prev = {'0x499'}, next = {'0x4c6'}
----------------------------------
Block 0x4ad
0x4af: v4af = SUB v4a2 v4a6
0x4b1: v4b1 = MLOAD v4af
0x4b2: v4b2(0x1) = CONST 
0x4b5: v4b5(0x20) = CONST 
0x4b7: v4b7 = SUB v4b5(0x20) v4a6
0x4b8: v4b8(0x100) = CONST 
0x4bb: v4bb = EXP v4b8(0x100) v4b7
0x4bc: v4bc = SUB v4bb v4b2(0x1)
0x4bd: v4bd = NOT v4bc
0x4be: v4be = AND v4bd v4b1
0x4c0: MSTORE v4af v4be
0x4c1: v4c1(0x20) = CONST 
0x4c3: v4c3 = ADD v4c1(0x20) v4af
----------------------------------

Begin block 0x4c6
prev = {'0x4ad', '0x499'}, next = {}
----------------------------------
Block 0x4c6
0x4c6_0x1: v4c6_1 = PHI v4a2 v4c3
0x4cc: v4cc(0x40) = CONST 
0x4ce: v4ce = MLOAD v4cc(0x40)
0x4d1: v4d1 = SUB v4c6_1 v4ce
0x4d3: RETURN v4ce v4d1
----------------------------------

Begin block 0x4d4
prev = {}, next = {'0x4dc', '0x4e0'}
----------------------------------
function transfer(address,uint256)()
Block 0x4d4
0x4d5: v4d5 = CALLVALUE 
0x4d7: v4d7 = ISZERO v4d5
0x4d8: v4d8(0x4e0) = CONST 
0x4db: JUMPI v4d8(0x4e0) v4d7
----------------------------------

Begin block 0x4dc
prev = {'0x4d4'}, next = {}
----------------------------------
Block 0x4dc
0x4dc: v4dc(0x0) = CONST 
0x4df: REVERT v4dc(0x0) v4dc(0x0)
----------------------------------

Begin block 0x4e0
prev = {'0x4d4'}, next = {'0xc52'}
----------------------------------
Block 0x4e0
0x4e2: v4e2(0x51f) = CONST 
0x4e5: v4e5(0x4) = CONST 
0x4e8: v4e8 = CALLDATASIZE 
0x4e9: v4e9 = SUB v4e8 v4e5(0x4)
0x4eb: v4eb = ADD v4e5(0x4) v4e9
0x4ef: v4ef = CALLDATALOAD v4e5(0x4)
0x4f0: v4f0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x505: v505 = AND v4f0(0xffffffffffffffffffffffffffffffffffffffff) v4ef
0x507: v507(0x20) = CONST 
0x509: v509(0x24) = ADD v507(0x20) v4e5(0x4)
0x50f: v50f = CALLDATALOAD v509(0x24)
0x511: v511(0x20) = CONST 
0x513: v513(0x44) = ADD v511(0x20) v509(0x24)
0x51b: v51b(0xc52) = CONST 
0x51e: JUMP v51b(0xc52)
----------------------------------

Begin block 0x51f
prev = {'0xdb2'}, next = {}
----------------------------------
Block 0x51f
0x51f_0x0: v51f_0 = PHI vda5(0x1) vdae(0x0)
0x520: v520(0x40) = CONST 
0x522: v522 = MLOAD v520(0x40)
0x525: v525 = ISZERO v51f_0
0x526: v526 = ISZERO v525
0x527: v527 = ISZERO v526
0x528: v528 = ISZERO v527
0x52a: MSTORE v522 v528
0x52b: v52b(0x20) = CONST 
0x52d: v52d = ADD v52b(0x20) v522
0x531: v531(0x40) = CONST 
0x533: v533 = MLOAD v531(0x40)
0x536: v536 = SUB v52d v533
0x538: RETURN v533 v536
----------------------------------

Begin block 0x539
prev = {}, next = {'0x545', '0x541'}
----------------------------------
function amount()()
Block 0x539
0x53a: v53a = CALLVALUE 
0x53c: v53c = ISZERO v53a
0x53d: v53d(0x545) = CONST 
0x540: JUMPI v53d(0x545) v53c
----------------------------------

Begin block 0x541
prev = {'0x539'}, next = {}
----------------------------------
Block 0x541
0x541: v541(0x0) = CONST 
0x544: REVERT v541(0x0) v541(0x0)
----------------------------------

Begin block 0x545
prev = {'0x539'}, next = {'0xdb8'}
----------------------------------
Block 0x545
0x547: v547(0x54e) = CONST 
0x54a: v54a(0xdb8) = CONST 
0x54d: JUMP v54a(0xdb8)
----------------------------------

Begin block 0x54e
prev = {'0xdb8'}, next = {}
----------------------------------
Block 0x54e
0x54f: v54f(0x40) = CONST 
0x551: v551 = MLOAD v54f(0x40)
0x555: MSTORE v551 vdbb
0x556: v556(0x20) = CONST 
0x558: v558 = ADD v556(0x20) v551
0x55c: v55c(0x40) = CONST 
0x55e: v55e = MLOAD v55c(0x40)
0x561: v561 = SUB v558 v55e
0x563: RETURN v55e v561
----------------------------------

Begin block 0x564
prev = {}, next = {'0x570', '0x56c'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x564
0x565: v565 = CALLVALUE 
0x567: v567 = ISZERO v565
0x568: v568(0x570) = CONST 
0x56b: JUMPI v568(0x570) v567
----------------------------------

Begin block 0x56c
prev = {'0x564'}, next = {}
----------------------------------
Block 0x56c
0x56c: v56c(0x0) = CONST 
0x56f: REVERT v56c(0x0) v56c(0x0)
----------------------------------

Begin block 0x570
prev = {'0x564'}, next = {'0xdbe'}
----------------------------------
Block 0x570
0x572: v572(0x5f5) = CONST 
0x575: v575(0x4) = CONST 
0x578: v578 = CALLDATASIZE 
0x579: v579 = SUB v578 v575(0x4)
0x57b: v57b = ADD v575(0x4) v579
0x57f: v57f = CALLDATALOAD v575(0x4)
0x580: v580(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x595: v595 = AND v580(0xffffffffffffffffffffffffffffffffffffffff) v57f
0x597: v597(0x20) = CONST 
0x599: v599(0x24) = ADD v597(0x20) v575(0x4)
0x59f: v59f = CALLDATALOAD v599(0x24)
0x5a1: v5a1(0x20) = CONST 
0x5a3: v5a3(0x44) = ADD v5a1(0x20) v599(0x24)
0x5a9: v5a9 = CALLDATALOAD v5a3(0x44)
0x5ab: v5ab(0x20) = CONST 
0x5ad: v5ad(0x64) = ADD v5ab(0x20) v5a3(0x44)
0x5b0: v5b0 = ADD v575(0x4) v5a9
0x5b2: v5b2 = CALLDATALOAD v5b0
0x5b4: v5b4(0x20) = CONST 
0x5b6: v5b6 = ADD v5b4(0x20) v5b0
0x5ba: v5ba(0x1f) = CONST 
0x5bc: v5bc = ADD v5ba(0x1f) v5b2
0x5bd: v5bd(0x20) = CONST 
0x5c1: v5c1 = DIV v5bc v5bd(0x20)
0x5c2: v5c2 = MUL v5c1 v5bd(0x20)
0x5c3: v5c3(0x20) = CONST 
0x5c5: v5c5 = ADD v5c3(0x20) v5c2
0x5c6: v5c6(0x40) = CONST 
0x5c8: v5c8 = MLOAD v5c6(0x40)
0x5cb: v5cb = ADD v5c8 v5c5
0x5cc: v5cc(0x40) = CONST 
0x5ce: MSTORE v5cc(0x40) v5cb
0x5d6: MSTORE v5c8 v5b2
0x5d7: v5d7(0x20) = CONST 
0x5d9: v5d9 = ADD v5d7(0x20) v5c8
0x5df: CALLDATACOPY v5d9 v5b6 v5b2
0x5e1: v5e1 = ADD v5d9 v5b2
0x5f1: v5f1(0xdbe) = CONST 
0x5f4: JUMP v5f1(0xdbe)
----------------------------------

Begin block 0x5f5
prev = {'0x1050'}, next = {}
----------------------------------
Block 0x5f5
0x5f6: v5f6(0x40) = CONST 
0x5f8: v5f8 = MLOAD v5f6(0x40)
0x5fb: v5fb = ISZERO v1051(0x1)
0x5fc: v5fc = ISZERO v5fb
0x5fd: v5fd = ISZERO v5fc
0x5fe: v5fe = ISZERO v5fd
0x600: MSTORE v5f8 v5fe
0x601: v601(0x20) = CONST 
0x603: v603 = ADD v601(0x20) v5f8
0x607: v607(0x40) = CONST 
0x609: v609 = MLOAD v607(0x40)
0x60c: v60c = SUB v603 v609
0x60e: RETURN v609 v60c
----------------------------------

Begin block 0x60f
prev = {}, next = {'0x61b', '0x617'}
----------------------------------
function allowance(address,address)()
Block 0x60f
0x610: v610 = CALLVALUE 
0x612: v612 = ISZERO v610
0x613: v613(0x61b) = CONST 
0x616: JUMPI v613(0x61b) v612
----------------------------------

Begin block 0x617
prev = {'0x60f'}, next = {}
----------------------------------
Block 0x617
0x617: v617(0x0) = CONST 
0x61a: REVERT v617(0x0) v617(0x0)
----------------------------------

Begin block 0x61b
prev = {'0x60f'}, next = {'0x105b'}
----------------------------------
Block 0x61b
0x61d: v61d(0x670) = CONST 
0x620: v620(0x4) = CONST 
0x623: v623 = CALLDATASIZE 
0x624: v624 = SUB v623 v620(0x4)
0x626: v626 = ADD v620(0x4) v624
0x62a: v62a = CALLDATALOAD v620(0x4)
0x62b: v62b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x640: v640 = AND v62b(0xffffffffffffffffffffffffffffffffffffffff) v62a
0x642: v642(0x20) = CONST 
0x644: v644(0x24) = ADD v642(0x20) v620(0x4)
0x64a: v64a = CALLDATALOAD v644(0x24)
0x64b: v64b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x660: v660 = AND v64b(0xffffffffffffffffffffffffffffffffffffffff) v64a
0x662: v662(0x20) = CONST 
0x664: v664(0x44) = ADD v662(0x20) v644(0x24)
0x66c: v66c(0x105b) = CONST 
0x66f: JUMP v66c(0x105b)
----------------------------------

Begin block 0x670
prev = {'0x105b'}, next = {}
----------------------------------
Block 0x670
0x671: v671(0x40) = CONST 
0x673: v673 = MLOAD v671(0x40)
0x677: MSTORE v673 v10da
0x678: v678(0x20) = CONST 
0x67a: v67a = ADD v678(0x20) v673
0x67e: v67e(0x40) = CONST 
0x680: v680 = MLOAD v67e(0x40)
0x683: v683 = SUB v67a v680
0x685: RETURN v680 v683
----------------------------------

Begin block 0x686
prev = {'0x13c'}, next = {'0x71c', '0x6d6'}
----------------------------------
Block 0x686
0x687: v687(0x3) = CONST 
0x68a: v68a = SLOAD v687(0x3)
0x68b: v68b(0x1) = CONST 
0x68e: v68e(0x1) = CONST 
0x690: v690 = AND v68e(0x1) v68a
0x691: v691 = ISZERO v690
0x692: v692(0x100) = CONST 
0x695: v695 = MUL v692(0x100) v691
0x696: v696 = SUB v695 v68b(0x1)
0x697: v697 = AND v696 v68a
0x698: v698(0x2) = CONST 
0x69b: v69b = DIV v697 v698(0x2)
0x69d: v69d(0x1f) = CONST 
0x69f: v69f = ADD v69d(0x1f) v69b
0x6a0: v6a0(0x20) = CONST 
0x6a4: v6a4 = DIV v69f v6a0(0x20)
0x6a5: v6a5 = MUL v6a4 v6a0(0x20)
0x6a6: v6a6(0x20) = CONST 
0x6a8: v6a8 = ADD v6a6(0x20) v6a5
0x6a9: v6a9(0x40) = CONST 
0x6ab: v6ab = MLOAD v6a9(0x40)
0x6ae: v6ae = ADD v6ab v6a8
0x6af: v6af(0x40) = CONST 
0x6b1: MSTORE v6af(0x40) v6ae
0x6b8: MSTORE v6ab v69b
0x6b9: v6b9(0x20) = CONST 
0x6bb: v6bb = ADD v6b9(0x20) v6ab
0x6be: v6be = SLOAD v687(0x3)
0x6bf: v6bf(0x1) = CONST 
0x6c2: v6c2(0x1) = CONST 
0x6c4: v6c4 = AND v6c2(0x1) v6be
0x6c5: v6c5 = ISZERO v6c4
0x6c6: v6c6(0x100) = CONST 
0x6c9: v6c9 = MUL v6c6(0x100) v6c5
0x6ca: v6ca = SUB v6c9 v6bf(0x1)
0x6cb: v6cb = AND v6ca v6be
0x6cc: v6cc(0x2) = CONST 
0x6cf: v6cf = DIV v6cb v6cc(0x2)
0x6d1: v6d1 = ISZERO v6cf
0x6d2: v6d2(0x71c) = CONST 
0x6d5: JUMPI v6d2(0x71c) v6d1
----------------------------------

Begin block 0x6d6
prev = {'0x686'}, next = {'0x6de', '0x6f1'}
----------------------------------
Block 0x6d6
0x6d7: v6d7(0x1f) = CONST 
0x6d9: v6d9 = LT v6d7(0x1f) v6cf
0x6da: v6da(0x6f1) = CONST 
0x6dd: JUMPI v6da(0x6f1) v6d9
----------------------------------

Begin block 0x6de
prev = {'0x6d6'}, next = {'0x71c'}
----------------------------------
Block 0x6de
0x6de: v6de(0x100) = CONST 
0x6e3: v6e3 = SLOAD v687(0x3)
0x6e4: v6e4 = DIV v6e3 v6de(0x100)
0x6e5: v6e5 = MUL v6e4 v6de(0x100)
0x6e7: MSTORE v6bb v6e5
0x6e9: v6e9(0x20) = CONST 
0x6eb: v6eb = ADD v6e9(0x20) v6bb
0x6ed: v6ed(0x71c) = CONST 
0x6f0: JUMP v6ed(0x71c)
----------------------------------

Begin block 0x6f1
prev = {'0x6d6'}, next = {'0x6ff'}
----------------------------------
Block 0x6f1
0x6f3: v6f3 = ADD v6bb v6cf
0x6f6: v6f6(0x0) = CONST 
0x6f8: MSTORE v6f6(0x0) v687(0x3)
0x6f9: v6f9(0x20) = CONST 
0x6fb: v6fb(0x0) = CONST 
0x6fd: v6fd = SHA3 v6fb(0x0) v6f9(0x20)
----------------------------------

Begin block 0x6ff
prev = {'0x6ff', '0x6f1'}, next = {'0x713', '0x6ff'}
----------------------------------
Block 0x6ff
0x6ff_0x0: v6ff_0 = PHI v6bb v70b
0x6ff_0x1: v6ff_1 = PHI v6fd v707
0x701: v701 = SLOAD v6ff_1
0x703: MSTORE v6ff_0 v701
0x705: v705(0x1) = CONST 
0x707: v707 = ADD v705(0x1) v6ff_1
0x709: v709(0x20) = CONST 
0x70b: v70b = ADD v709(0x20) v6ff_0
0x70e: v70e = GT v6f3 v70b
0x70f: v70f(0x6ff) = CONST 
0x712: JUMPI v70f(0x6ff) v70e
----------------------------------

Begin block 0x713
prev = {'0x6ff'}, next = {'0x71c'}
----------------------------------
Block 0x713
0x715: v715 = SUB v70b v6f3
0x716: v716(0x1f) = CONST 
0x718: v718 = AND v716(0x1f) v715
0x71a: v71a = ADD v6f3 v718
----------------------------------

Begin block 0x71c
prev = {'0x686', '0x6de', '0x713'}, next = {'0x145'}
----------------------------------
Block 0x71c
0x723: JUMP v13e(0x145)
----------------------------------

Begin block 0x724
prev = {'0x1cc'}, next = {'0x20b'}
----------------------------------
Block 0x724
0x725: v725(0x0) = CONST 
0x728: v728(0x1) = CONST 
0x72a: v72a(0x0) = CONST 
0x72c: v72c = CALLER 
0x72d: v72d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x742: v742 = AND v72d(0xffffffffffffffffffffffffffffffffffffffff) v72c
0x743: v743(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x758: v758 = AND v743(0xffffffffffffffffffffffffffffffffffffffff) v742
0x75a: MSTORE v72a(0x0) v758
0x75b: v75b(0x20) = CONST 
0x75d: v75d(0x20) = ADD v75b(0x20) v72a(0x0)
0x760: MSTORE v75d(0x20) v728(0x1)
0x761: v761(0x20) = CONST 
0x763: v763(0x40) = ADD v761(0x20) v75d(0x20)
0x764: v764(0x0) = CONST 
0x766: v766 = SHA3 v764(0x0) v763(0x40)
0x767: v767(0x0) = CONST 
0x76a: v76a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x77f: v77f = AND v76a(0xffffffffffffffffffffffffffffffffffffffff) v1f1
0x780: v780(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x795: v795 = AND v780(0xffffffffffffffffffffffffffffffffffffffff) v77f
0x797: MSTORE v767(0x0) v795
0x798: v798(0x20) = CONST 
0x79a: v79a(0x20) = ADD v798(0x20) v767(0x0)
0x79d: MSTORE v79a(0x20) v766
0x79e: v79e(0x20) = CONST 
0x7a0: v7a0(0x40) = ADD v79e(0x20) v79a(0x20)
0x7a1: v7a1(0x0) = CONST 
0x7a3: v7a3 = SHA3 v7a1(0x0) v7a0(0x40)
0x7a6: SSTORE v7a3 v1fb
0x7a9: v7a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7be: v7be = AND v7a9(0xffffffffffffffffffffffffffffffffffffffff) v1f1
0x7bf: v7bf = CALLER 
0x7c0: v7c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7d5: v7d5 = AND v7c0(0xffffffffffffffffffffffffffffffffffffffff) v7bf
0x7d6: v7d6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x7f8: v7f8(0x40) = CONST 
0x7fa: v7fa = MLOAD v7f8(0x40)
0x7fe: MSTORE v7fa v1fb
0x7ff: v7ff(0x20) = CONST 
0x801: v801 = ADD v7ff(0x20) v7fa
0x805: v805(0x40) = CONST 
0x807: v807 = MLOAD v805(0x40)
0x80a: v80a = SUB v801 v807
0x80c: LOG3 v807 v80a v7d6(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v7d5 v7be
0x80d: v80d(0x1) = CONST 
0x815: JUMP v1ce(0x20b)
----------------------------------

Begin block 0x816
prev = {'0x231'}, next = {'0x23a'}
----------------------------------
Block 0x816
0x817: v817(0x2) = CONST 
0x819: v819 = SLOAD v817(0x2)
0x81b: JUMP v233(0x23a)
----------------------------------

Begin block 0x81c
prev = {'0x25c'}, next = {'0x265'}
----------------------------------
Block 0x81c
0x81d: v81d(0x7) = CONST 
0x81f: v81f(0x0) = CONST 
0x822: v822 = SLOAD v81d(0x7)
0x824: v824(0x100) = CONST 
0x827: v827(0x1) = EXP v824(0x100) v81f(0x0)
0x829: v829 = DIV v822 v827(0x1)
0x82a: v82a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x83f: v83f = AND v82a(0xffffffffffffffffffffffffffffffffffffffff) v829
0x841: JUMP v25e(0x265)
----------------------------------

Begin block 0x842
prev = {'0x2b3'}, next = {'0x88d', '0x90e'}
----------------------------------
Block 0x842
0x843: v843(0x0) = CONST 
0x846: v846(0x0) = CONST 
0x84a: v84a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x85f: v85f = AND v84a(0xffffffffffffffffffffffffffffffffffffffff) v2d8
0x860: v860(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x875: v875 = AND v860(0xffffffffffffffffffffffffffffffffffffffff) v85f
0x877: MSTORE v846(0x0) v875
0x878: v878(0x20) = CONST 
0x87a: v87a(0x20) = ADD v878(0x20) v846(0x0)
0x87d: MSTORE v87a(0x20) v846(0x0)
0x87e: v87e(0x20) = CONST 
0x880: v880(0x40) = ADD v87e(0x20) v87a(0x20)
0x881: v881(0x0) = CONST 
0x883: v883 = SHA3 v881(0x0) v880(0x40)
0x884: v884 = SLOAD v883
0x885: v885 = LT v884 v302
0x886: v886 = ISZERO v885
0x888: v888 = ISZERO v886
0x889: v889(0x90e) = CONST 
0x88c: JUMPI v889(0x90e) v888
----------------------------------

Begin block 0x88d
prev = {'0x842'}, next = {'0x90e'}
----------------------------------
Block 0x88d
0x88f: v88f(0x1) = CONST 
0x891: v891(0x0) = CONST 
0x894: v894(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a9: v8a9 = AND v894(0xffffffffffffffffffffffffffffffffffffffff) v2d8
0x8aa: v8aa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8bf: v8bf = AND v8aa(0xffffffffffffffffffffffffffffffffffffffff) v8a9
0x8c1: MSTORE v891(0x0) v8bf
0x8c2: v8c2(0x20) = CONST 
0x8c4: v8c4(0x20) = ADD v8c2(0x20) v891(0x0)
0x8c7: MSTORE v8c4(0x20) v88f(0x1)
0x8c8: v8c8(0x20) = CONST 
0x8ca: v8ca(0x40) = ADD v8c8(0x20) v8c4(0x20)
0x8cb: v8cb(0x0) = CONST 
0x8cd: v8cd = SHA3 v8cb(0x0) v8ca(0x40)
0x8ce: v8ce(0x0) = CONST 
0x8d0: v8d0 = CALLER 
0x8d1: v8d1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8e6: v8e6 = AND v8d1(0xffffffffffffffffffffffffffffffffffffffff) v8d0
0x8e7: v8e7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8fc: v8fc = AND v8e7(0xffffffffffffffffffffffffffffffffffffffff) v8e6
0x8fe: MSTORE v8ce(0x0) v8fc
0x8ff: v8ff(0x20) = CONST 
0x901: v901(0x20) = ADD v8ff(0x20) v8ce(0x0)
0x904: MSTORE v901(0x20) v8cd
0x905: v905(0x20) = CONST 
0x907: v907(0x40) = ADD v905(0x20) v901(0x20)
0x908: v908(0x0) = CONST 
0x90a: v90a = SHA3 v908(0x0) v907(0x40)
0x90b: v90b = SLOAD v90a
0x90c: v90c = LT v90b v302
0x90d: v90d = ISZERO v90c
----------------------------------

Begin block 0x90e
prev = {'0x88d', '0x842'}, next = {'0x915', '0x91a'}
----------------------------------
Block 0x90e
0x90e_0x0: v90e_0 = PHI v886 v90d
0x910: v910 = ISZERO v90e_0
0x911: v911(0x91a) = CONST 
0x914: JUMPI v911(0x91a) v910
----------------------------------

Begin block 0x915
prev = {'0x90e'}, next = {'0x91a'}
----------------------------------
Block 0x915
0x916: v916(0x0) = CONST 
0x919: v919 = GT v302 v916(0x0)
----------------------------------

Begin block 0x91a
prev = {'0x915', '0x90e'}, next = {'0x920', '0xaaf'}
----------------------------------
Block 0x91a
0x91a_0x0: v91a_0 = PHI v886 v90d v919
0x91b: v91b = ISZERO v91a_0
0x91c: v91c(0xaaf) = CONST 
0x91f: JUMPI v91c(0xaaf) v91b
----------------------------------

Begin block 0x920
prev = {'0x91a'}, next = {'0xab4'}
----------------------------------
Block 0x920
0x921: v921(0x0) = CONST 
0x925: v925(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x93a: v93a = AND v925(0xffffffffffffffffffffffffffffffffffffffff) v2f8
0x93b: v93b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x950: v950 = AND v93b(0xffffffffffffffffffffffffffffffffffffffff) v93a
0x952: MSTORE v921(0x0) v950
0x953: v953(0x20) = CONST 
0x955: v955(0x20) = ADD v953(0x20) v921(0x0)
0x958: MSTORE v955(0x20) v921(0x0)
0x959: v959(0x20) = CONST 
0x95b: v95b(0x40) = ADD v959(0x20) v955(0x20)
0x95c: v95c(0x0) = CONST 
0x95e: v95e = SHA3 v95c(0x0) v95b(0x40)
0x95f: v95f(0x0) = CONST 
0x963: v963 = SLOAD v95e
0x964: v964 = ADD v963 v302
0x96a: SSTORE v95e v964
0x96d: v96d(0x0) = CONST 
0x971: v971(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x986: v986 = AND v971(0xffffffffffffffffffffffffffffffffffffffff) v2d8
0x987: v987(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x99c: v99c = AND v987(0xffffffffffffffffffffffffffffffffffffffff) v986
0x99e: MSTORE v96d(0x0) v99c
0x99f: v99f(0x20) = CONST 
0x9a1: v9a1(0x20) = ADD v99f(0x20) v96d(0x0)
0x9a4: MSTORE v9a1(0x20) v96d(0x0)
0x9a5: v9a5(0x20) = CONST 
0x9a7: v9a7(0x40) = ADD v9a5(0x20) v9a1(0x20)
0x9a8: v9a8(0x0) = CONST 
0x9aa: v9aa = SHA3 v9a8(0x0) v9a7(0x40)
0x9ab: v9ab(0x0) = CONST 
0x9af: v9af = SLOAD v9aa
0x9b0: v9b0 = SUB v9af v302
0x9b6: SSTORE v9aa v9b0
0x9b9: v9b9(0x1) = CONST 
0x9bb: v9bb(0x0) = CONST 
0x9be: v9be(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d3: v9d3 = AND v9be(0xffffffffffffffffffffffffffffffffffffffff) v2d8
0x9d4: v9d4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e9: v9e9 = AND v9d4(0xffffffffffffffffffffffffffffffffffffffff) v9d3
0x9eb: MSTORE v9bb(0x0) v9e9
0x9ec: v9ec(0x20) = CONST 
0x9ee: v9ee(0x20) = ADD v9ec(0x20) v9bb(0x0)
0x9f1: MSTORE v9ee(0x20) v9b9(0x1)
0x9f2: v9f2(0x20) = CONST 
0x9f4: v9f4(0x40) = ADD v9f2(0x20) v9ee(0x20)
0x9f5: v9f5(0x0) = CONST 
0x9f7: v9f7 = SHA3 v9f5(0x0) v9f4(0x40)
0x9f8: v9f8(0x0) = CONST 
0x9fa: v9fa = CALLER 
0x9fb: v9fb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa10: va10 = AND v9fb(0xffffffffffffffffffffffffffffffffffffffff) v9fa
0xa11: va11(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa26: va26 = AND va11(0xffffffffffffffffffffffffffffffffffffffff) va10
0xa28: MSTORE v9f8(0x0) va26
0xa29: va29(0x20) = CONST 
0xa2b: va2b(0x20) = ADD va29(0x20) v9f8(0x0)
0xa2e: MSTORE va2b(0x20) v9f7
0xa2f: va2f(0x20) = CONST 
0xa31: va31(0x40) = ADD va2f(0x20) va2b(0x20)
0xa32: va32(0x0) = CONST 
0xa34: va34 = SHA3 va32(0x0) va31(0x40)
0xa35: va35(0x0) = CONST 
0xa39: va39 = SLOAD va34
0xa3a: va3a = SUB va39 v302
0xa40: SSTORE va34 va3a
0xa43: va43(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa58: va58 = AND va43(0xffffffffffffffffffffffffffffffffffffffff) v2f8
0xa5a: va5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa6f: va6f = AND va5a(0xffffffffffffffffffffffffffffffffffffffff) v2d8
0xa70: va70(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xa92: va92(0x40) = CONST 
0xa94: va94 = MLOAD va92(0x40)
0xa98: MSTORE va94 v302
0xa99: va99(0x20) = CONST 
0xa9b: va9b = ADD va99(0x20) va94
0xa9f: va9f(0x40) = CONST 
0xaa1: vaa1 = MLOAD va9f(0x40)
0xaa4: vaa4 = SUB va9b vaa1
0xaa6: LOG3 vaa1 vaa4 va70(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) va6f va58
0xaa7: vaa7(0x1) = CONST 
0xaab: vaab(0xab4) = CONST 
0xaae: JUMP vaab(0xab4)
----------------------------------

Begin block 0xaaf
prev = {'0x91a'}, next = {'0xab4'}
----------------------------------
Block 0xaaf
0xab0: vab0(0x0) = CONST 
----------------------------------

Begin block 0xab4
prev = {'0x920', '0xaaf'}, next = {'0x312'}
----------------------------------
Block 0xab4
0xaba: JUMP v2b5(0x312)
----------------------------------

Begin block 0xabb
prev = {'0x338'}, next = {'0x341'}
----------------------------------
Block 0xabb
0xabc: vabc(0x4) = CONST 
0xabe: vabe(0x0) = CONST 
0xac1: vac1 = SLOAD vabc(0x4)
0xac3: vac3(0x100) = CONST 
0xac6: vac6(0x1) = EXP vac3(0x100) vabe(0x0)
0xac8: vac8 = DIV vac1 vac6(0x1)
0xac9: vac9(0xff) = CONST 
0xacb: vacb = AND vac9(0xff) vac8
0xacd: JUMP v33a(0x341)
----------------------------------

Begin block 0xace
prev = {'0x369'}, next = {'0xb64', '0xb1e'}
----------------------------------
Block 0xace
0xacf: vacf(0x6) = CONST 
0xad2: vad2 = SLOAD vacf(0x6)
0xad3: vad3(0x1) = CONST 
0xad6: vad6(0x1) = CONST 
0xad8: vad8 = AND vad6(0x1) vad2
0xad9: vad9 = ISZERO vad8
0xada: vada(0x100) = CONST 
0xadd: vadd = MUL vada(0x100) vad9
0xade: vade = SUB vadd vad3(0x1)
0xadf: vadf = AND vade vad2
0xae0: vae0(0x2) = CONST 
0xae3: vae3 = DIV vadf vae0(0x2)
0xae5: vae5(0x1f) = CONST 
0xae7: vae7 = ADD vae5(0x1f) vae3
0xae8: vae8(0x20) = CONST 
0xaec: vaec = DIV vae7 vae8(0x20)
0xaed: vaed = MUL vaec vae8(0x20)
0xaee: vaee(0x20) = CONST 
0xaf0: vaf0 = ADD vaee(0x20) vaed
0xaf1: vaf1(0x40) = CONST 
0xaf3: vaf3 = MLOAD vaf1(0x40)
0xaf6: vaf6 = ADD vaf3 vaf0
0xaf7: vaf7(0x40) = CONST 
0xaf9: MSTORE vaf7(0x40) vaf6
0xb00: MSTORE vaf3 vae3
0xb01: vb01(0x20) = CONST 
0xb03: vb03 = ADD vb01(0x20) vaf3
0xb06: vb06 = SLOAD vacf(0x6)
0xb07: vb07(0x1) = CONST 
0xb0a: vb0a(0x1) = CONST 
0xb0c: vb0c = AND vb0a(0x1) vb06
0xb0d: vb0d = ISZERO vb0c
0xb0e: vb0e(0x100) = CONST 
0xb11: vb11 = MUL vb0e(0x100) vb0d
0xb12: vb12 = SUB vb11 vb07(0x1)
0xb13: vb13 = AND vb12 vb06
0xb14: vb14(0x2) = CONST 
0xb17: vb17 = DIV vb13 vb14(0x2)
0xb19: vb19 = ISZERO vb17
0xb1a: vb1a(0xb64) = CONST 
0xb1d: JUMPI vb1a(0xb64) vb19
----------------------------------

Begin block 0xb1e
prev = {'0xace'}, next = {'0xb26', '0xb39'}
----------------------------------
Block 0xb1e
0xb1f: vb1f(0x1f) = CONST 
0xb21: vb21 = LT vb1f(0x1f) vb17
0xb22: vb22(0xb39) = CONST 
0xb25: JUMPI vb22(0xb39) vb21
----------------------------------

Begin block 0xb26
prev = {'0xb1e'}, next = {'0xb64'}
----------------------------------
Block 0xb26
0xb26: vb26(0x100) = CONST 
0xb2b: vb2b = SLOAD vacf(0x6)
0xb2c: vb2c = DIV vb2b vb26(0x100)
0xb2d: vb2d = MUL vb2c vb26(0x100)
0xb2f: MSTORE vb03 vb2d
0xb31: vb31(0x20) = CONST 
0xb33: vb33 = ADD vb31(0x20) vb03
0xb35: vb35(0xb64) = CONST 
0xb38: JUMP vb35(0xb64)
----------------------------------

Begin block 0xb39
prev = {'0xb1e'}, next = {'0xb47'}
----------------------------------
Block 0xb39
0xb3b: vb3b = ADD vb03 vb17
0xb3e: vb3e(0x0) = CONST 
0xb40: MSTORE vb3e(0x0) vacf(0x6)
0xb41: vb41(0x20) = CONST 
0xb43: vb43(0x0) = CONST 
0xb45: vb45 = SHA3 vb43(0x0) vb41(0x20)
----------------------------------

Begin block 0xb47
prev = {'0xb39', '0xb47'}, next = {'0xb5b', '0xb47'}
----------------------------------
Block 0xb47
0xb47_0x0: vb47_0 = PHI vb03 vb53
0xb47_0x1: vb47_1 = PHI vb45 vb4f
0xb49: vb49 = SLOAD vb47_1
0xb4b: MSTORE vb47_0 vb49
0xb4d: vb4d(0x1) = CONST 
0xb4f: vb4f = ADD vb4d(0x1) vb47_1
0xb51: vb51(0x20) = CONST 
0xb53: vb53 = ADD vb51(0x20) vb47_0
0xb56: vb56 = GT vb3b vb53
0xb57: vb57(0xb47) = CONST 
0xb5a: JUMPI vb57(0xb47) vb56
----------------------------------

Begin block 0xb5b
prev = {'0xb47'}, next = {'0xb64'}
----------------------------------
Block 0xb5b
0xb5d: vb5d = SUB vb53 vb3b
0xb5e: vb5e(0x1f) = CONST 
0xb60: vb60 = AND vb5e(0x1f) vb5d
0xb62: vb62 = ADD vb3b vb60
----------------------------------

Begin block 0xb64
prev = {'0xb26', '0xace', '0xb5b'}, next = {'0x372'}
----------------------------------
Block 0xb64
0xb6b: JUMP v36b(0x372)
----------------------------------

Begin block 0xb6c
prev = {'0x3f9'}, next = {'0x42e'}
----------------------------------
Block 0xb6c
0xb6d: vb6d(0x0) = CONST 
0xb70: vb70(0x0) = CONST 
0xb73: vb73(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb88: vb88 = AND vb73(0xffffffffffffffffffffffffffffffffffffffff) v41e
0xb89: vb89(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9e: vb9e = AND vb89(0xffffffffffffffffffffffffffffffffffffffff) vb88
0xba0: MSTORE vb70(0x0) vb9e
0xba1: vba1(0x20) = CONST 
0xba3: vba3(0x20) = ADD vba1(0x20) vb70(0x0)
0xba6: MSTORE vba3(0x20) vb6d(0x0)
0xba7: vba7(0x20) = CONST 
0xba9: vba9(0x40) = ADD vba7(0x20) vba3(0x20)
0xbaa: vbaa(0x0) = CONST 
0xbac: vbac = SHA3 vbaa(0x0) vba9(0x40)
0xbad: vbad = SLOAD vbac
0xbb3: JUMP v3fb(0x42e)
----------------------------------

Begin block 0xbb4
prev = {'0x450'}, next = {'0xc04', '0xc4a'}
----------------------------------
Block 0xbb4
0xbb5: vbb5(0x5) = CONST 
0xbb8: vbb8 = SLOAD vbb5(0x5)
0xbb9: vbb9(0x1) = CONST 
0xbbc: vbbc(0x1) = CONST 
0xbbe: vbbe = AND vbbc(0x1) vbb8
0xbbf: vbbf = ISZERO vbbe
0xbc0: vbc0(0x100) = CONST 
0xbc3: vbc3 = MUL vbc0(0x100) vbbf
0xbc4: vbc4 = SUB vbc3 vbb9(0x1)
0xbc5: vbc5 = AND vbc4 vbb8
0xbc6: vbc6(0x2) = CONST 
0xbc9: vbc9 = DIV vbc5 vbc6(0x2)
0xbcb: vbcb(0x1f) = CONST 
0xbcd: vbcd = ADD vbcb(0x1f) vbc9
0xbce: vbce(0x20) = CONST 
0xbd2: vbd2 = DIV vbcd vbce(0x20)
0xbd3: vbd3 = MUL vbd2 vbce(0x20)
0xbd4: vbd4(0x20) = CONST 
0xbd6: vbd6 = ADD vbd4(0x20) vbd3
0xbd7: vbd7(0x40) = CONST 
0xbd9: vbd9 = MLOAD vbd7(0x40)
0xbdc: vbdc = ADD vbd9 vbd6
0xbdd: vbdd(0x40) = CONST 
0xbdf: MSTORE vbdd(0x40) vbdc
0xbe6: MSTORE vbd9 vbc9
0xbe7: vbe7(0x20) = CONST 
0xbe9: vbe9 = ADD vbe7(0x20) vbd9
0xbec: vbec = SLOAD vbb5(0x5)
0xbed: vbed(0x1) = CONST 
0xbf0: vbf0(0x1) = CONST 
0xbf2: vbf2 = AND vbf0(0x1) vbec
0xbf3: vbf3 = ISZERO vbf2
0xbf4: vbf4(0x100) = CONST 
0xbf7: vbf7 = MUL vbf4(0x100) vbf3
0xbf8: vbf8 = SUB vbf7 vbed(0x1)
0xbf9: vbf9 = AND vbf8 vbec
0xbfa: vbfa(0x2) = CONST 
0xbfd: vbfd = DIV vbf9 vbfa(0x2)
0xbff: vbff = ISZERO vbfd
0xc00: vc00(0xc4a) = CONST 
0xc03: JUMPI vc00(0xc4a) vbff
----------------------------------

Begin block 0xc04
prev = {'0xbb4'}, next = {'0xc0c', '0xc1f'}
----------------------------------
Block 0xc04
0xc05: vc05(0x1f) = CONST 
0xc07: vc07 = LT vc05(0x1f) vbfd
0xc08: vc08(0xc1f) = CONST 
0xc0b: JUMPI vc08(0xc1f) vc07
----------------------------------

Begin block 0xc0c
prev = {'0xc04'}, next = {'0xc4a'}
----------------------------------
Block 0xc0c
0xc0c: vc0c(0x100) = CONST 
0xc11: vc11 = SLOAD vbb5(0x5)
0xc12: vc12 = DIV vc11 vc0c(0x100)
0xc13: vc13 = MUL vc12 vc0c(0x100)
0xc15: MSTORE vbe9 vc13
0xc17: vc17(0x20) = CONST 
0xc19: vc19 = ADD vc17(0x20) vbe9
0xc1b: vc1b(0xc4a) = CONST 
0xc1e: JUMP vc1b(0xc4a)
----------------------------------

Begin block 0xc1f
prev = {'0xc04'}, next = {'0xc2d'}
----------------------------------
Block 0xc1f
0xc21: vc21 = ADD vbe9 vbfd
0xc24: vc24(0x0) = CONST 
0xc26: MSTORE vc24(0x0) vbb5(0x5)
0xc27: vc27(0x20) = CONST 
0xc29: vc29(0x0) = CONST 
0xc2b: vc2b = SHA3 vc29(0x0) vc27(0x20)
----------------------------------

Begin block 0xc2d
prev = {'0xc2d', '0xc1f'}, next = {'0xc2d', '0xc41'}
----------------------------------
Block 0xc2d
0xc2d_0x0: vc2d_0 = PHI vbe9 vc39
0xc2d_0x1: vc2d_1 = PHI vc2b vc35
0xc2f: vc2f = SLOAD vc2d_1
0xc31: MSTORE vc2d_0 vc2f
0xc33: vc33(0x1) = CONST 
0xc35: vc35 = ADD vc33(0x1) vc2d_1
0xc37: vc37(0x20) = CONST 
0xc39: vc39 = ADD vc37(0x20) vc2d_0
0xc3c: vc3c = GT vc21 vc39
0xc3d: vc3d(0xc2d) = CONST 
0xc40: JUMPI vc3d(0xc2d) vc3c
----------------------------------

Begin block 0xc41
prev = {'0xc2d'}, next = {'0xc4a'}
----------------------------------
Block 0xc41
0xc43: vc43 = SUB vc39 vc21
0xc44: vc44(0x1f) = CONST 
0xc46: vc46 = AND vc44(0x1f) vc43
0xc48: vc48 = ADD vc21 vc46
----------------------------------

Begin block 0xc4a
prev = {'0xc0c', '0xbb4', '0xc41'}, next = {'0x459'}
----------------------------------
Block 0xc4a
0xc51: JUMP v452(0x459)
----------------------------------

Begin block 0xc52
prev = {'0x4e0'}, next = {'0xc9d', '0xca2'}
----------------------------------
Block 0xc52
0xc53: vc53(0x0) = CONST 
0xc56: vc56(0x0) = CONST 
0xc59: vc59 = CALLER 
0xc5a: vc5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6f: vc6f = AND vc5a(0xffffffffffffffffffffffffffffffffffffffff) vc59
0xc70: vc70(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc85: vc85 = AND vc70(0xffffffffffffffffffffffffffffffffffffffff) vc6f
0xc87: MSTORE vc56(0x0) vc85
0xc88: vc88(0x20) = CONST 
0xc8a: vc8a(0x20) = ADD vc88(0x20) vc56(0x0)
0xc8d: MSTORE vc8a(0x20) vc56(0x0)
0xc8e: vc8e(0x20) = CONST 
0xc90: vc90(0x40) = ADD vc8e(0x20) vc8a(0x20)
0xc91: vc91(0x0) = CONST 
0xc93: vc93 = SHA3 vc91(0x0) vc90(0x40)
0xc94: vc94 = SLOAD vc93
0xc95: vc95 = LT vc94 v50f
0xc96: vc96 = ISZERO vc95
0xc98: vc98 = ISZERO vc96
0xc99: vc99(0xca2) = CONST 
0xc9c: JUMPI vc99(0xca2) vc98
----------------------------------

Begin block 0xc9d
prev = {'0xc52'}, next = {'0xca2'}
----------------------------------
Block 0xc9d
0xc9e: vc9e(0x0) = CONST 
0xca1: vca1 = GT v50f vc9e(0x0)
----------------------------------

Begin block 0xca2
prev = {'0xc9d', '0xc52'}, next = {'0xca8', '0xdad'}
----------------------------------
Block 0xca2
0xca2_0x0: vca2_0 = PHI vc96 vca1
0xca3: vca3 = ISZERO vca2_0
0xca4: vca4(0xdad) = CONST 
0xca7: JUMPI vca4(0xdad) vca3
----------------------------------

Begin block 0xca8
prev = {'0xca2'}, next = {'0xdb2'}
----------------------------------
Block 0xca8
0xca9: vca9(0x0) = CONST 
0xcac: vcac = CALLER 
0xcad: vcad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcc2: vcc2 = AND vcad(0xffffffffffffffffffffffffffffffffffffffff) vcac
0xcc3: vcc3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcd8: vcd8 = AND vcc3(0xffffffffffffffffffffffffffffffffffffffff) vcc2
0xcda: MSTORE vca9(0x0) vcd8
0xcdb: vcdb(0x20) = CONST 
0xcdd: vcdd(0x20) = ADD vcdb(0x20) vca9(0x0)
0xce0: MSTORE vcdd(0x20) vca9(0x0)
0xce1: vce1(0x20) = CONST 
0xce3: vce3(0x40) = ADD vce1(0x20) vcdd(0x20)
0xce4: vce4(0x0) = CONST 
0xce6: vce6 = SHA3 vce4(0x0) vce3(0x40)
0xce7: vce7(0x0) = CONST 
0xceb: vceb = SLOAD vce6
0xcec: vcec = SUB vceb v50f
0xcf2: SSTORE vce6 vcec
0xcf5: vcf5(0x0) = CONST 
0xcf9: vcf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd0e: vd0e = AND vcf9(0xffffffffffffffffffffffffffffffffffffffff) v505
0xd0f: vd0f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd24: vd24 = AND vd0f(0xffffffffffffffffffffffffffffffffffffffff) vd0e
0xd26: MSTORE vcf5(0x0) vd24
0xd27: vd27(0x20) = CONST 
0xd29: vd29(0x20) = ADD vd27(0x20) vcf5(0x0)
0xd2c: MSTORE vd29(0x20) vcf5(0x0)
0xd2d: vd2d(0x20) = CONST 
0xd2f: vd2f(0x40) = ADD vd2d(0x20) vd29(0x20)
0xd30: vd30(0x0) = CONST 
0xd32: vd32 = SHA3 vd30(0x0) vd2f(0x40)
0xd33: vd33(0x0) = CONST 
0xd37: vd37 = SLOAD vd32
0xd38: vd38 = ADD vd37 v50f
0xd3e: SSTORE vd32 vd38
0xd41: vd41(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd56: vd56 = AND vd41(0xffffffffffffffffffffffffffffffffffffffff) v505
0xd57: vd57 = CALLER 
0xd58: vd58(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd6d: vd6d = AND vd58(0xffffffffffffffffffffffffffffffffffffffff) vd57
0xd6e: vd6e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd90: vd90(0x40) = CONST 
0xd92: vd92 = MLOAD vd90(0x40)
0xd96: MSTORE vd92 v50f
0xd97: vd97(0x20) = CONST 
0xd99: vd99 = ADD vd97(0x20) vd92
0xd9d: vd9d(0x40) = CONST 
0xd9f: vd9f = MLOAD vd9d(0x40)
0xda2: vda2 = SUB vd99 vd9f
0xda4: LOG3 vd9f vda2 vd6e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vd6d vd56
0xda5: vda5(0x1) = CONST 
0xda9: vda9(0xdb2) = CONST 
0xdac: JUMP vda9(0xdb2)
----------------------------------

Begin block 0xdad
prev = {'0xca2'}, next = {'0xdb2'}
----------------------------------
Block 0xdad
0xdae: vdae(0x0) = CONST 
----------------------------------

Begin block 0xdb2
prev = {'0xca8', '0xdad'}, next = {'0x51f'}
----------------------------------
Block 0xdb2
0xdb7: JUMP v4e2(0x51f)
----------------------------------

Begin block 0xdb8
prev = {'0x545'}, next = {'0x54e'}
----------------------------------
Block 0xdb8
0xdb9: vdb9(0x8) = CONST 
0xdbb: vdbb = SLOAD vdb9(0x8)
0xdbd: JUMP v547(0x54e)
----------------------------------

Begin block 0xdbe
prev = {'0x570'}, next = {'0xfe4'}
----------------------------------
Block 0xdbe
0xdbf: vdbf(0x0) = CONST 
0xdc2: vdc2(0x1) = CONST 
0xdc4: vdc4(0x0) = CONST 
0xdc6: vdc6 = CALLER 
0xdc7: vdc7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xddc: vddc = AND vdc7(0xffffffffffffffffffffffffffffffffffffffff) vdc6
0xddd: vddd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdf2: vdf2 = AND vddd(0xffffffffffffffffffffffffffffffffffffffff) vddc
0xdf4: MSTORE vdc4(0x0) vdf2
0xdf5: vdf5(0x20) = CONST 
0xdf7: vdf7(0x20) = ADD vdf5(0x20) vdc4(0x0)
0xdfa: MSTORE vdf7(0x20) vdc2(0x1)
0xdfb: vdfb(0x20) = CONST 
0xdfd: vdfd(0x40) = ADD vdfb(0x20) vdf7(0x20)
0xdfe: vdfe(0x0) = CONST 
0xe00: ve00 = SHA3 vdfe(0x0) vdfd(0x40)
0xe01: ve01(0x0) = CONST 
0xe04: ve04(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe19: ve19 = AND ve04(0xffffffffffffffffffffffffffffffffffffffff) v595
0xe1a: ve1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe2f: ve2f = AND ve1a(0xffffffffffffffffffffffffffffffffffffffff) ve19
0xe31: MSTORE ve01(0x0) ve2f
0xe32: ve32(0x20) = CONST 
0xe34: ve34(0x20) = ADD ve32(0x20) ve01(0x0)
0xe37: MSTORE ve34(0x20) ve00
0xe38: ve38(0x20) = CONST 
0xe3a: ve3a(0x40) = ADD ve38(0x20) ve34(0x20)
0xe3b: ve3b(0x0) = CONST 
0xe3d: ve3d = SHA3 ve3b(0x0) ve3a(0x40)
0xe40: SSTORE ve3d v59f
0xe43: ve43(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe58: ve58 = AND ve43(0xffffffffffffffffffffffffffffffffffffffff) v595
0xe59: ve59 = CALLER 
0xe5a: ve5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe6f: ve6f = AND ve5a(0xffffffffffffffffffffffffffffffffffffffff) ve59
0xe70: ve70(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xe92: ve92(0x40) = CONST 
0xe94: ve94 = MLOAD ve92(0x40)
0xe98: MSTORE ve94 v59f
0xe99: ve99(0x20) = CONST 
0xe9b: ve9b = ADD ve99(0x20) ve94
0xe9f: ve9f(0x40) = CONST 
0xea1: vea1 = MLOAD ve9f(0x40)
0xea4: vea4 = SUB ve9b vea1
0xea6: LOG3 vea1 vea4 ve70(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) ve6f ve58
0xea8: vea8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xebd: vebd = AND vea8(0xffffffffffffffffffffffffffffffffffffffff) v595
0xebe: vebe(0x40) = CONST 
0xec0: vec0 = MLOAD vebe(0x40)
0xec3: vec3(0x72656365697665417070726f76616c28616464726573732c75696e743235362c) = CONST 
0xee5: MSTORE vec0 vec3(0x72656365697665417070726f76616c28616464726573732c75696e743235362c)
0xee6: vee6(0x20) = CONST 
0xee8: vee8 = ADD vee6(0x20) vec0
0xee9: vee9(0x616464726573732c627974657329000000000000000000000000000000000000) = CONST 
0xf0b: MSTORE vee8 vee9(0x616464726573732c627974657329000000000000000000000000000000000000)
0xf0d: vf0d(0x2e) = CONST 
0xf0f: vf0f = ADD vf0d(0x2e) vec0
0xf12: vf12(0x40) = CONST 
0xf14: vf14 = MLOAD vf12(0x40)
0xf17: vf17 = SUB vf0f vf14
0xf19: vf19 = SHA3 vf14 vf17
0xf1a: vf1a(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xf39: vf39 = DIV vf19 vf1a(0x100000000000000000000000000000000000000000000000000000000)
0xf3a: vf3a = CALLER 
0xf3c: vf3c = ADDRESS 
0xf3e: vf3e(0x40) = CONST 
0xf40: vf40 = MLOAD vf3e(0x40)
0xf42: vf42(0xffffffff) = CONST 
0xf47: vf47 = AND vf42(0xffffffff) vf39
0xf48: vf48(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xf66: vf66 = MUL vf48(0x100000000000000000000000000000000000000000000000000000000) vf47
0xf68: MSTORE vf40 vf66
0xf69: vf69(0x4) = CONST 
0xf6b: vf6b = ADD vf69(0x4) vf40
0xf6e: vf6e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf83: vf83 = AND vf6e(0xffffffffffffffffffffffffffffffffffffffff) vf3a
0xf84: vf84(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf99: vf99 = AND vf84(0xffffffffffffffffffffffffffffffffffffffff) vf83
0xf9b: MSTORE vf6b vf99
0xf9c: vf9c(0x20) = CONST 
0xf9e: vf9e = ADD vf9c(0x20) vf6b
0xfa1: MSTORE vf9e v59f
0xfa2: vfa2(0x20) = CONST 
0xfa4: vfa4 = ADD vfa2(0x20) vf9e
0xfa6: vfa6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfbb: vfbb = AND vfa6(0xffffffffffffffffffffffffffffffffffffffff) vf3c
0xfbc: vfbc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfd1: vfd1 = AND vfbc(0xffffffffffffffffffffffffffffffffffffffff) vfbb
0xfd3: MSTORE vfa4 vfd1
0xfd4: vfd4(0x20) = CONST 
0xfd6: vfd6 = ADD vfd4(0x20) vfa4
0xfd9: vfd9 = MLOAD v5c8
0xfdb: vfdb(0x20) = CONST 
0xfdd: vfdd = ADD vfdb(0x20) v5c8
0xfe2: vfe2(0x0) = CONST 
----------------------------------

Begin block 0xfe4
prev = {'0xdbe', '0xfed'}, next = {'0xfff', '0xfed'}
----------------------------------
Block 0xfe4
0xfe4_0x0: vfe4_0 = PHI vfe2(0x0) vff8
0xfe7: vfe7 = LT vfe4_0 vfd9
0xfe8: vfe8 = ISZERO vfe7
0xfe9: vfe9(0xfff) = CONST 
0xfec: JUMPI vfe9(0xfff) vfe8
----------------------------------

Begin block 0xfed
prev = {'0xfe4'}, next = {'0xfe4'}
----------------------------------
Block 0xfed
0xfed_0x0: vfed_0 = PHI vfe2(0x0) vff8
0xfef: vfef = ADD vfdd vfed_0
0xff0: vff0 = MLOAD vfef
0xff3: vff3 = ADD vfd6 vfed_0
0xff4: MSTORE vff3 vff0
0xff5: vff5(0x20) = CONST 
0xff8: vff8 = ADD vfed_0 vff5(0x20)
0xffb: vffb(0xfe4) = CONST 
0xffe: JUMP vffb(0xfe4)
----------------------------------

Begin block 0xfff
prev = {'0xfe4'}, next = {'0x1013', '0x102c'}
----------------------------------
Block 0xfff
0x1008: v1008 = ADD vfd9 vfd6
0x100a: v100a(0x1f) = CONST 
0x100c: v100c = AND v100a(0x1f) vfd9
0x100e: v100e = ISZERO v100c
0x100f: v100f(0x102c) = CONST 
0x1012: JUMPI v100f(0x102c) v100e
----------------------------------

Begin block 0x1013
prev = {'0xfff'}, next = {'0x102c'}
----------------------------------
Block 0x1013
0x1015: v1015 = SUB v1008 v100c
0x1017: v1017 = MLOAD v1015
0x1018: v1018(0x1) = CONST 
0x101b: v101b(0x20) = CONST 
0x101d: v101d = SUB v101b(0x20) v100c
0x101e: v101e(0x100) = CONST 
0x1021: v1021 = EXP v101e(0x100) v101d
0x1022: v1022 = SUB v1021 v1018(0x1)
0x1023: v1023 = NOT v1022
0x1024: v1024 = AND v1023 v1017
0x1026: MSTORE v1015 v1024
0x1027: v1027(0x20) = CONST 
0x1029: v1029 = ADD v1027(0x20) v1015
----------------------------------

Begin block 0x102c
prev = {'0x1013', '0xfff'}, next = {'0x1050', '0x104c'}
----------------------------------
Block 0x102c
0x102c_0x1: v102c_1 = PHI v1008 v1029
0x1034: v1034(0x0) = CONST 
0x1036: v1036(0x40) = CONST 
0x1038: v1038 = MLOAD v1036(0x40)
0x103b: v103b = SUB v102c_1 v1038
0x103d: v103d(0x0) = CONST 
0x1040: v1040 = GAS 
0x1041: v1041 = CALL v1040 vebd v103d(0x0) v1038 v103b v1038 v1034(0x0)
0x1046: v1046 = ISZERO v1041
0x1047: v1047 = ISZERO v1046
0x1048: v1048(0x1050) = CONST 
0x104b: JUMPI v1048(0x1050) v1047
----------------------------------

Begin block 0x104c
prev = {'0x102c'}, next = {}
----------------------------------
Block 0x104c
0x104c: v104c(0x0) = CONST 
0x104f: REVERT v104c(0x0) v104c(0x0)
----------------------------------

Begin block 0x1050
prev = {'0x102c'}, next = {'0x5f5'}
----------------------------------
Block 0x1050
0x1051: v1051(0x1) = CONST 
0x105a: JUMP v572(0x5f5)
----------------------------------

Begin block 0x105b
prev = {'0x61b'}, next = {'0x670'}
----------------------------------
Block 0x105b
0x105c: v105c(0x0) = CONST 
0x105e: v105e(0x1) = CONST 
0x1060: v1060(0x0) = CONST 
0x1063: v1063(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1078: v1078 = AND v1063(0xffffffffffffffffffffffffffffffffffffffff) v640
0x1079: v1079(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108e: v108e = AND v1079(0xffffffffffffffffffffffffffffffffffffffff) v1078
0x1090: MSTORE v1060(0x0) v108e
0x1091: v1091(0x20) = CONST 
0x1093: v1093(0x20) = ADD v1091(0x20) v1060(0x0)
0x1096: MSTORE v1093(0x20) v105e(0x1)
0x1097: v1097(0x20) = CONST 
0x1099: v1099(0x40) = ADD v1097(0x20) v1093(0x20)
0x109a: v109a(0x0) = CONST 
0x109c: v109c = SHA3 v109a(0x0) v1099(0x40)
0x109d: v109d(0x0) = CONST 
0x10a0: v10a0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10b5: v10b5 = AND v10a0(0xffffffffffffffffffffffffffffffffffffffff) v660
0x10b6: v10b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10cb: v10cb = AND v10b6(0xffffffffffffffffffffffffffffffffffffffff) v10b5
0x10cd: MSTORE v109d(0x0) v10cb
0x10ce: v10ce(0x20) = CONST 
0x10d0: v10d0(0x20) = ADD v10ce(0x20) v109d(0x0)
0x10d3: MSTORE v10d0(0x20) v109c
0x10d4: v10d4(0x20) = CONST 
0x10d6: v10d6(0x40) = ADD v10d4(0x20) v10d0(0x20)
0x10d7: v10d7(0x0) = CONST 
0x10d9: v10d9 = SHA3 v10d7(0x0) v10d6(0x40)
0x10da: v10da = SLOAD v10d9
0x10e1: JUMP v61d(0x670)
----------------------------------

Begin block 0x1113
prev = {'0xba', '0x0'}, next = {}
----------------------------------
Block 0x1113
0x1114: v1114(0xc5) = CONST 
0x1115: CALLPRIVATE v1114(0xc5)
----------------------------------

Begin block 0x1116
prev = {'0xd'}, next = {}
----------------------------------
Block 0x1116
0x1117: v1117(0x130) = CONST 
0x1118: CALLPRIVATE v1117(0x130)
----------------------------------

Begin block 0x1119
prev = {'0x41'}, next = {}
----------------------------------
Block 0x1119
0x111a: v111a(0x1c0) = CONST 
0x111b: CALLPRIVATE v111a(0x1c0)
----------------------------------

Begin block 0x111c
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x111c
0x111d: v111d(0x225) = CONST 
0x111e: CALLPRIVATE v111d(0x225)
----------------------------------

Begin block 0x111f
prev = {'0x57'}, next = {}
----------------------------------
Block 0x111f
0x1120: v1120(0x250) = CONST 
0x1121: CALLPRIVATE v1120(0x250)
----------------------------------

Begin block 0x1122
prev = {'0x62'}, next = {}
----------------------------------
Block 0x1122
0x1123: v1123(0x2a7) = CONST 
0x1124: CALLPRIVATE v1123(0x2a7)
----------------------------------

Begin block 0x1125
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x1125
0x1126: v1126(0x32c) = CONST 
0x1127: CALLPRIVATE v1126(0x32c)
----------------------------------

Begin block 0x1128
prev = {'0x78'}, next = {}
----------------------------------
Block 0x1128
0x1129: v1129(0x35d) = CONST 
0x112a: CALLPRIVATE v1129(0x35d)
----------------------------------

Begin block 0x112b
prev = {'0x83'}, next = {}
----------------------------------
Block 0x112b
0x112c: v112c(0x3ed) = CONST 
0x112d: CALLPRIVATE v112c(0x3ed)
----------------------------------

Begin block 0x112e
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x112e
0x112f: v112f(0x444) = CONST 
0x1130: CALLPRIVATE v112f(0x444)
----------------------------------

Begin block 0x1131
prev = {'0x99'}, next = {}
----------------------------------
Block 0x1131
0x1132: v1132(0x4d4) = CONST 
0x1133: CALLPRIVATE v1132(0x4d4)
----------------------------------

Begin block 0x1134
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x1134
0x1135: v1135(0x539) = CONST 
0x1136: CALLPRIVATE v1135(0x539)
----------------------------------

Begin block 0x1137
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x1137
0x1138: v1138(0x564) = CONST 
0x1139: CALLPRIVATE v1138(0x564)
----------------------------------

Begin block 0x113a
prev = {'0xba'}, next = {}
----------------------------------
Block 0x113a
0x113b: v113b(0x60f) = CONST 
0x113c: CALLPRIVATE v113b(0x60f)
----------------------------------
