
Begin block 0x0
prev = {}, next = {'0x10', '0xc'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1665', '0x1a'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0x1647: v1647(0x1665) = CONST 
0x1648: JUMPI v1647(0x1665) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x2b', '0x8c'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0xad071f00) = CONST 
0x26: v26 = GT v21(0xad071f00) v1f
0x27: v27(0x8c) = CONST 
0x2a: JUMPI v27(0x8c) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0x36', '0x66'}
----------------------------------
Block 0x2b
0x2c: v2c(0xbe040fb0) = CONST 
0x31: v31 = GT v2c(0xbe040fb0) v1f
0x32: v32(0x66) = CONST 
0x35: JUMPI v32(0x66) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x41', '0x1686'}
----------------------------------
Block 0x36
0x37: v37(0xbe040fb0) = CONST 
0x3c: v3c = EQ v37(0xbe040fb0) v1f
0x1649: v1649(0x1686) = CONST 
0x164a: JUMPI v1649(0x1686) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0x1689', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0xc52987cf) = CONST 
0x47: v47 = EQ v42(0xc52987cf) v1f
0x164b: v164b(0x1689) = CONST 
0x164c: JUMPI v164b(0x1689) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x168c'}
----------------------------------
Block 0x4c
0x4d: v4d(0xf48ccabd) = CONST 
0x52: v52 = EQ v4d(0xf48ccabd) v1f
0x164d: v164d(0x168c) = CONST 
0x164e: JUMPI v164d(0x168c) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x62', '0x168f'}
----------------------------------
Block 0x57
0x58: v58(0xfcfff16f) = CONST 
0x5d: v5d = EQ v58(0xfcfff16f) v1f
0x164f: v164f(0x168f) = CONST 
0x1650: JUMPI v164f(0x168f) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0xea0x0'}
----------------------------------
Block 0x62
0x62: v62(0xea) = CONST 
0x65: JUMP v62(0xea)
----------------------------------

Begin block 0x66
prev = {'0x2b'}, next = {'0x72', '0x167d'}
----------------------------------
Block 0x66
0x68: v68(0xad071f00) = CONST 
0x6d: v6d = EQ v68(0xad071f00) v1f
0x1651: v1651(0x167d) = CONST 
0x1652: JUMPI v1651(0x167d) v6d
----------------------------------

Begin block 0x72
prev = {'0x66'}, next = {'0x7d', '0x1680'}
----------------------------------
Block 0x72
0x73: v73(0xb33a4547) = CONST 
0x78: v78 = EQ v73(0xb33a4547) v1f
0x1653: v1653(0x1680) = CONST 
0x1654: JUMPI v1653(0x1680) v78
----------------------------------

Begin block 0x7d
prev = {'0x72'}, next = {'0x88', '0x1683'}
----------------------------------
Block 0x7d
0x7e: v7e(0xb5c7400b) = CONST 
0x83: v83 = EQ v7e(0xb5c7400b) v1f
0x1655: v1655(0x1683) = CONST 
0x1656: JUMPI v1655(0x1683) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0xea0x0'}
----------------------------------
Block 0x88
0x88: v88(0xea) = CONST 
0x8b: JUMP v88(0xea)
----------------------------------

Begin block 0x8c
prev = {'0x1a'}, next = {'0x98', '0xc8'}
----------------------------------
Block 0x8c
0x8e: v8e(0x44530f3a) = CONST 
0x93: v93 = GT v8e(0x44530f3a) v1f
0x94: v94(0xc8) = CONST 
0x97: JUMPI v94(0xc8) v93
----------------------------------

Begin block 0x98
prev = {'0x8c'}, next = {'0x1671', '0xa3'}
----------------------------------
Block 0x98
0x99: v99(0x44530f3a) = CONST 
0x9e: v9e = EQ v99(0x44530f3a) v1f
0x1657: v1657(0x1671) = CONST 
0x1658: JUMPI v1657(0x1671) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0xae', '0x1674'}
----------------------------------
Block 0xa3
0xa4: va4(0x7150d8ae) = CONST 
0xa9: va9 = EQ va4(0x7150d8ae) v1f
0x1659: v1659(0x1674) = CONST 
0x165a: JUMPI v1659(0x1674) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0x1677'}
----------------------------------
Block 0xae
0xaf: vaf(0x8129fc1c) = CONST 
0xb4: vb4 = EQ vaf(0x8129fc1c) v1f
0x165b: v165b(0x1677) = CONST 
0x165c: JUMPI v165b(0x1677) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0x167a'}
----------------------------------
Block 0xb9
0xba: vba(0x8f620487) = CONST 
0xbf: vbf = EQ vba(0x8f620487) v1f
0x165d: v165d(0x167a) = CONST 
0x165e: JUMPI v165d(0x167a) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0xea0x0'}
----------------------------------
Block 0xc4
0xc4: vc4(0xea) = CONST 
0xc7: JUMP vc4(0xea)
----------------------------------

Begin block 0xc8
prev = {'0x8c'}, next = {'0x1668', '0xd4'}
----------------------------------
Block 0xc8
0xca: vca(0x8551a53) = CONST 
0xcf: vcf = EQ vca(0x8551a53) v1f
0x165f: v165f(0x1668) = CONST 
0x1660: JUMPI v165f(0x1668) vcf
----------------------------------

Begin block 0xd4
prev = {'0xc8'}, next = {'0x166b', '0xdf'}
----------------------------------
Block 0xd4
0xd5: vd5(0xc3f6acf) = CONST 
0xda: vda = EQ vd5(0xc3f6acf) v1f
0x1661: v1661(0x166b) = CONST 
0x1662: JUMPI v1661(0x166b) vda
----------------------------------

Begin block 0xdf
prev = {'0xd4'}, next = {'0x1665', '0x166e'}
----------------------------------
Block 0xdf
0xe0: ve0(0x43d726d6) = CONST 
0xe5: ve5 = EQ ve0(0x43d726d6) v1f
0x1663: v1663(0x166e) = CONST 
0x1664: JUMPI v1663(0x166e) ve5
----------------------------------

Begin block 0xea
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xea
0xeb: veb(0x0) = CONST 
0xee: REVERT veb(0x0) veb(0x0)
----------------------------------

Begin block 0xea0x0
prev = {'0xc4', '0x1665', '0x62', '0x88'}, next = {}
----------------------------------
Block 0xea0x0
0xeb0x0: v0eb(0x0) = CONST 
0xee0x0: REVERT v0eb(0x0) v0eb(0x0)
----------------------------------

Begin block 0xef
prev = {}, next = {'0x311'}
----------------------------------
function seller()()
Block 0xef
0xf0: vf0(0xf7) = CONST 
0xf3: vf3(0x311) = CONST 
0xf6: JUMP vf3(0x311)
----------------------------------

Begin block 0xf7
prev = {'0x311'}, next = {}
----------------------------------
Block 0xf7
0xf8: vf8(0x40) = CONST 
0xfa: vfa = MLOAD vf8(0x40)
0xfd: vfd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x112: v112 = AND vfd(0xffffffffffffffffffffffffffffffffffffffff) v334
0x113: v113(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x128: v128 = AND v113(0xffffffffffffffffffffffffffffffffffffffff) v112
0x12a: MSTORE vfa v128
0x12b: v12b(0x20) = CONST 
0x12d: v12d = ADD v12b(0x20) vfa
0x131: v131(0x40) = CONST 
0x133: v133 = MLOAD v131(0x40)
0x136: v136 = SUB v12d v133
0x138: RETURN v133 v136
----------------------------------

Begin block 0x139
prev = {}, next = {'0x337'}
----------------------------------
function currentState()()
Block 0x139
0x13a: v13a(0x141) = CONST 
0x13d: v13d(0x337) = CONST 
0x140: JUMP v13d(0x337)
----------------------------------

Begin block 0x141
prev = {'0x337'}, next = {'0x150', '0x151'}
----------------------------------
Block 0x141
0x142: v142(0x40) = CONST 
0x144: v144 = MLOAD v142(0x40)
0x147: v147(0x4) = CONST 
0x14a: v14a = GT v346 v147(0x4)
0x14b: v14b = ISZERO v14a
0x14c: v14c(0x151) = CONST 
0x14f: JUMPI v14c(0x151) v14b
----------------------------------

Begin block 0x150
prev = {'0x141'}, next = {}
----------------------------------
Block 0x150
0x150: THROW 
----------------------------------

Begin block 0x151
prev = {'0x141'}, next = {}
----------------------------------
Block 0x151
0x152: v152(0xff) = CONST 
0x154: v154 = AND v152(0xff) v346
0x156: MSTORE v144 v154
0x157: v157(0x20) = CONST 
0x159: v159 = ADD v157(0x20) v144
0x15d: v15d(0x40) = CONST 
0x15f: v15f = MLOAD v15d(0x40)
0x162: v162 = SUB v159 v15f
0x164: RETURN v15f v162
----------------------------------

Begin block 0x165
prev = {}, next = {'0x349'}
----------------------------------
function close()()
Block 0x165
0x166: v166(0x16d) = CONST 
0x169: v169(0x349) = CONST 
0x16c: JUMP v169(0x349)
----------------------------------

Begin block 0x16d
prev = {'0x5cf'}, next = {}
----------------------------------
Block 0x16d
0x16e: STOP 
----------------------------------

Begin block 0x16f
prev = {}, next = {'0x63b'}
----------------------------------
function premiumAmount()()
Block 0x16f
0x170: v170(0x177) = CONST 
0x173: v173(0x63b) = CONST 
0x176: JUMP v173(0x63b)
----------------------------------

Begin block 0x177
prev = {'0x63b'}, next = {}
----------------------------------
Block 0x177
0x178: v178(0x40) = CONST 
0x17a: v17a = MLOAD v178(0x40)
0x17e: MSTORE v17a v63e
0x17f: v17f(0x20) = CONST 
0x181: v181 = ADD v17f(0x20) v17a
0x185: v185(0x40) = CONST 
0x187: v187 = MLOAD v185(0x40)
0x18a: v18a = SUB v181 v187
0x18c: RETURN v187 v18a
----------------------------------

Begin block 0x18d
prev = {}, next = {'0x641'}
----------------------------------
function buyer()()
Block 0x18d
0x18e: v18e(0x195) = CONST 
0x191: v191(0x641) = CONST 
0x194: JUMP v191(0x641)
----------------------------------

Begin block 0x195
prev = {'0x641'}, next = {}
----------------------------------
Block 0x195
0x196: v196(0x40) = CONST 
0x198: v198 = MLOAD v196(0x40)
0x19b: v19b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1b0: v1b0 = AND v19b(0xffffffffffffffffffffffffffffffffffffffff) v664
0x1b1: v1b1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1c6: v1c6 = AND v1b1(0xffffffffffffffffffffffffffffffffffffffff) v1b0
0x1c8: MSTORE v198 v1c6
0x1c9: v1c9(0x20) = CONST 
0x1cb: v1cb = ADD v1c9(0x20) v198
0x1cf: v1cf(0x40) = CONST 
0x1d1: v1d1 = MLOAD v1cf(0x40)
0x1d4: v1d4 = SUB v1cb v1d1
0x1d6: RETURN v1d1 v1d4
----------------------------------

Begin block 0x1d7
prev = {}, next = {'0x667'}
----------------------------------
function initialize()()
Block 0x1d7
0x1d8: v1d8(0x1df) = CONST 
0x1db: v1db(0x667) = CONST 
0x1de: JUMP v1db(0x667)
----------------------------------

Begin block 0x1df
prev = {'0x939'}, next = {}
----------------------------------
Block 0x1df
0x1e0: STOP 
----------------------------------

Begin block 0x1e1
prev = {}, next = {'0x9b2'}
----------------------------------
function expirationDate()()
Block 0x1e1
0x1e2: v1e2(0x1e9) = CONST 
0x1e5: v1e5(0x9b2) = CONST 
0x1e8: JUMP v1e5(0x9b2)
----------------------------------

Begin block 0x1e9
prev = {'0x9b2'}, next = {}
----------------------------------
Block 0x1e9
0x1ea: v1ea(0x40) = CONST 
0x1ec: v1ec = MLOAD v1ea(0x40)
0x1f0: MSTORE v1ec v9b5
0x1f1: v1f1(0x20) = CONST 
0x1f3: v1f3 = ADD v1f1(0x20) v1ec
0x1f7: v1f7(0x40) = CONST 
0x1f9: v1f9 = MLOAD v1f7(0x40)
0x1fc: v1fc = SUB v1f3 v1f9
0x1fe: RETURN v1f9 v1fc
----------------------------------

Begin block 0x1ff
prev = {}, next = {'0x9b8'}
----------------------------------
function underlyingAssetToken()()
Block 0x1ff
0x200: v200(0x207) = CONST 
0x203: v203(0x9b8) = CONST 
0x206: JUMP v203(0x9b8)
----------------------------------

Begin block 0x207
prev = {'0x9b8'}, next = {}
----------------------------------
Block 0x207
0x208: v208(0x40) = CONST 
0x20a: v20a = MLOAD v208(0x40)
0x20d: v20d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x222: v222 = AND v20d(0xffffffffffffffffffffffffffffffffffffffff) v9db
0x223: v223(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x238: v238 = AND v223(0xffffffffffffffffffffffffffffffffffffffff) v222
0x23a: MSTORE v20a v238
0x23b: v23b(0x20) = CONST 
0x23d: v23d = ADD v23b(0x20) v20a
0x241: v241(0x40) = CONST 
0x243: v243 = MLOAD v241(0x40)
0x246: v246 = SUB v23d v243
0x248: RETURN v243 v246
----------------------------------

Begin block 0x249
prev = {}, next = {'0x9de'}
----------------------------------
function purchasingToken()()
Block 0x249
0x24a: v24a(0x251) = CONST 
0x24d: v24d(0x9de) = CONST 
0x250: JUMP v24d(0x9de)
----------------------------------

Begin block 0x251
prev = {'0x9de'}, next = {}
----------------------------------
Block 0x251
0x252: v252(0x40) = CONST 
0x254: v254 = MLOAD v252(0x40)
0x257: v257(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x26c: v26c = AND v257(0xffffffffffffffffffffffffffffffffffffffff) va01
0x26d: v26d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x282: v282 = AND v26d(0xffffffffffffffffffffffffffffffffffffffff) v26c
0x284: MSTORE v254 v282
0x285: v285(0x20) = CONST 
0x287: v287 = ADD v285(0x20) v254
0x28b: v28b(0x40) = CONST 
0x28d: v28d = MLOAD v28b(0x40)
0x290: v290 = SUB v287 v28d
0x292: RETURN v28d v290
----------------------------------

Begin block 0x293
prev = {}, next = {'0x2a5', '0x2a9'}
----------------------------------
function updatePremium(uint256)()
Block 0x293
0x294: v294(0x2bf) = CONST 
0x297: v297(0x4) = CONST 
0x29a: v29a = CALLDATASIZE 
0x29b: v29b = SUB v29a v297(0x4)
0x29c: v29c(0x20) = CONST 
0x29f: v29f = LT v29b v29c(0x20)
0x2a0: v2a0 = ISZERO v29f
0x2a1: v2a1(0x2a9) = CONST 
0x2a4: JUMPI v2a1(0x2a9) v2a0
----------------------------------

Begin block 0x2a5
prev = {'0x293'}, next = {}
----------------------------------
Block 0x2a5
0x2a5: v2a5(0x0) = CONST 
0x2a8: REVERT v2a5(0x0) v2a5(0x0)
----------------------------------

Begin block 0x2a9
prev = {'0x293'}, next = {'0xa04'}
----------------------------------
Block 0x2a9
0x2ab: v2ab = ADD v297(0x4) v29b
0x2af: v2af = CALLDATALOAD v297(0x4)
0x2b1: v2b1(0x20) = CONST 
0x2b3: v2b3 = ADD v2b1(0x20) v297(0x4)
0x2bb: v2bb(0xa04) = CONST 
0x2be: JUMP v2bb(0xa04)
----------------------------------

Begin block 0x2bf
prev = {'0xb27'}, next = {}
----------------------------------
Block 0x2bf
0x2c0: STOP 
----------------------------------

Begin block 0x2c1
prev = {}, next = {'0xbb3'}
----------------------------------
function redeem()()
Block 0x2c1
0x2c2: v2c2(0x2c9) = CONST 
0x2c5: v2c5(0xbb3) = CONST 
0x2c8: JUMP v2c5(0xbb3)
----------------------------------

Begin block 0x2c9
prev = {'0xfc6'}, next = {}
----------------------------------
Block 0x2c9
0x2ca: STOP 
----------------------------------

Begin block 0x2cb
prev = {}, next = {'0x103e'}
----------------------------------
function strikePrice()()
Block 0x2cb
0x2cc: v2cc(0x2d3) = CONST 
0x2cf: v2cf(0x103e) = CONST 
0x2d2: JUMP v2cf(0x103e)
----------------------------------

Begin block 0x2d3
prev = {'0x103e'}, next = {}
----------------------------------
Block 0x2d3
0x2d4: v2d4(0x40) = CONST 
0x2d6: v2d6 = MLOAD v2d4(0x40)
0x2da: MSTORE v2d6 v1041
0x2db: v2db(0x20) = CONST 
0x2dd: v2dd = ADD v2db(0x20) v2d6
0x2e1: v2e1(0x40) = CONST 
0x2e3: v2e3 = MLOAD v2e1(0x40)
0x2e6: v2e6 = SUB v2dd v2e3
0x2e8: RETURN v2e3 v2e6
----------------------------------

Begin block 0x2e9
prev = {}, next = {'0x1044'}
----------------------------------
function underlyingAssetAmount()()
Block 0x2e9
0x2ea: v2ea(0x2f1) = CONST 
0x2ed: v2ed(0x1044) = CONST 
0x2f0: JUMP v2ed(0x1044)
----------------------------------

Begin block 0x2f1
prev = {'0x1044'}, next = {}
----------------------------------
Block 0x2f1
0x2f2: v2f2(0x40) = CONST 
0x2f4: v2f4 = MLOAD v2f2(0x40)
0x2f8: MSTORE v2f4 v1047
0x2f9: v2f9(0x20) = CONST 
0x2fb: v2fb = ADD v2f9(0x20) v2f4
0x2ff: v2ff(0x40) = CONST 
0x301: v301 = MLOAD v2ff(0x40)
0x304: v304 = SUB v2fb v301
0x306: RETURN v301 v304
----------------------------------

Begin block 0x307
prev = {}, next = {'0x104a'}
----------------------------------
function open()()
Block 0x307
0x308: v308(0x30f) = CONST 
0x30b: v30b(0x104a) = CONST 
0x30e: JUMP v30b(0x104a)
----------------------------------

Begin block 0x30f
prev = {'0x1350'}, next = {}
----------------------------------
Block 0x30f
0x310: STOP 
----------------------------------

Begin block 0x311
prev = {'0xef'}, next = {'0xf7'}
----------------------------------
Block 0x311
0x312: v312(0x1) = CONST 
0x314: v314(0x0) = CONST 
0x317: v317 = SLOAD v312(0x1)
0x319: v319(0x100) = CONST 
0x31c: v31c(0x1) = EXP v319(0x100) v314(0x0)
0x31e: v31e = DIV v317 v31c(0x1)
0x31f: v31f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x334: v334 = AND v31f(0xffffffffffffffffffffffffffffffffffffffff) v31e
0x336: JUMP vf0(0xf7)
----------------------------------

Begin block 0x337
prev = {'0x139'}, next = {'0x141'}
----------------------------------
Block 0x337
0x338: v338(0x0) = CONST 
0x33c: v33c = SLOAD v338(0x0)
0x33e: v33e(0x100) = CONST 
0x341: v341(0x1) = EXP v33e(0x100) v338(0x0)
0x343: v343 = DIV v33c v341(0x1)
0x344: v344(0xff) = CONST 
0x346: v346 = AND v344(0xff) v343
0x348: JUMP v13a(0x141)
----------------------------------

Begin block 0x349
prev = {'0x165'}, next = {'0x356'}
----------------------------------
Block 0x349
0x34a: v34a(0x1) = CONST 
0x34c: v34c(0x4) = CONST 
0x34f: v34f(0x0) = GT v34a(0x1) v34c(0x4)
0x350: v350(0x1) = ISZERO v34f(0x0)
0x351: v351(0x356) = CONST 
0x354: JUMPI v351(0x356) v350(0x1)
----------------------------------

Begin block 0x356
prev = {'0x349'}, next = {'0x36f', '0x370'}
----------------------------------
Block 0x356
0x357: v357(0x0) = CONST 
0x35b: v35b = SLOAD v357(0x0)
0x35d: v35d(0x100) = CONST 
0x360: v360(0x1) = EXP v35d(0x100) v357(0x0)
0x362: v362 = DIV v35b v360(0x1)
0x363: v363(0xff) = CONST 
0x365: v365 = AND v363(0xff) v362
0x366: v366(0x4) = CONST 
0x369: v369 = GT v365 v366(0x4)
0x36a: v36a = ISZERO v369
0x36b: v36b(0x370) = CONST 
0x36e: JUMPI v36b(0x370) v36a
----------------------------------

Begin block 0x36f
prev = {'0x356'}, next = {}
----------------------------------
Block 0x36f
0x36f: THROW 
----------------------------------

Begin block 0x370
prev = {'0x356'}, next = {'0x3ad', '0x377'}
----------------------------------
Block 0x370
0x371: v371 = EQ v365 v34a(0x1)
0x373: v373(0x3ad) = CONST 
0x376: JUMPI v373(0x3ad) v371
----------------------------------

Begin block 0x377
prev = {'0x370'}, next = {'0x384'}
----------------------------------
Block 0x377
0x378: v378(0x2) = CONST 
0x37a: v37a(0x4) = CONST 
0x37d: v37d(0x0) = GT v378(0x2) v37a(0x4)
0x37e: v37e(0x1) = ISZERO v37d(0x0)
0x37f: v37f(0x384) = CONST 
0x382: JUMPI v37f(0x384) v37e(0x1)
----------------------------------

Begin block 0x384
prev = {'0x377'}, next = {'0x39e', '0x39d'}
----------------------------------
Block 0x384
0x385: v385(0x0) = CONST 
0x389: v389 = SLOAD v385(0x0)
0x38b: v38b(0x100) = CONST 
0x38e: v38e(0x1) = EXP v38b(0x100) v385(0x0)
0x390: v390 = DIV v389 v38e(0x1)
0x391: v391(0xff) = CONST 
0x393: v393 = AND v391(0xff) v390
0x394: v394(0x4) = CONST 
0x397: v397 = GT v393 v394(0x4)
0x398: v398 = ISZERO v397
0x399: v399(0x39e) = CONST 
0x39c: JUMPI v399(0x39e) v398
----------------------------------

Begin block 0x39d
prev = {'0x384'}, next = {}
----------------------------------
Block 0x39d
0x39d: THROW 
----------------------------------

Begin block 0x39e
prev = {'0x384'}, next = {'0x3a6', '0x3ac'}
----------------------------------
Block 0x39e
0x39f: v39f = EQ v393 v378(0x2)
0x3a1: v3a1 = ISZERO v39f
0x3a2: v3a2(0x3ac) = CONST 
0x3a5: JUMPI v3a2(0x3ac) v3a1
----------------------------------

Begin block 0x3a6
prev = {'0x39e'}, next = {'0x3ac'}
----------------------------------
Block 0x3a6
0x3a7: v3a7(0x7) = CONST 
0x3a9: v3a9 = SLOAD v3a7(0x7)
0x3aa: v3aa = TIMESTAMP 
0x3ab: v3ab = GT v3aa v3a9
----------------------------------

Begin block 0x3ac
prev = {'0x39e', '0x3a6'}, next = {'0x3ad'}
----------------------------------
Block 0x3ac
----------------------------------

Begin block 0x3ad
prev = {'0x3ac', '0x370'}, next = {'0x3b2', '0x402'}
----------------------------------
Block 0x3ad
0x3ad_0x0: v3ad_0 = PHI v371 v39f v3ab
0x3ae: v3ae(0x402) = CONST 
0x3b1: JUMPI v3ae(0x402) v3ad_0
----------------------------------

Begin block 0x3b2
prev = {'0x3ad'}, next = {}
----------------------------------
Block 0x3b2
0x3b2: v3b2(0x40) = CONST 
0x3b4: v3b4 = MLOAD v3b2(0x40)
0x3b5: v3b5(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x3d7: MSTORE v3b4 v3b5(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x3d8: v3d8(0x4) = CONST 
0x3da: v3da = ADD v3d8(0x4) v3b4
0x3dd: v3dd(0x20) = CONST 
0x3df: v3df = ADD v3dd(0x20) v3da
0x3e2: v3e2 = SUB v3df v3da
0x3e4: MSTORE v3da v3e2
0x3e5: v3e5(0x45) = CONST 
0x3e8: MSTORE v3df v3e5(0x45)
0x3e9: v3e9(0x20) = CONST 
0x3eb: v3eb = ADD v3e9(0x20) v3df
0x3ed: v3ed(0x1482) = CONST 
0x3f0: v3f0(0x45) = CONST 
0x3f3: CODECOPY v3eb v3ed(0x1482) v3f0(0x45)
0x3f4: v3f4(0x60) = CONST 
0x3f6: v3f6 = ADD v3f4(0x60) v3eb
0x3fa: v3fa(0x40) = CONST 
0x3fc: v3fc = MLOAD v3fa(0x40)
0x3ff: v3ff = SUB v3f6 v3fc
0x401: REVERT v3fc v3ff
----------------------------------

Begin block 0x402
prev = {'0x3ad'}, next = {'0x4a8', '0x458'}
----------------------------------
Block 0x402
0x403: v403(0x1) = CONST 
0x405: v405(0x0) = CONST 
0x408: v408 = SLOAD v403(0x1)
0x40a: v40a(0x100) = CONST 
0x40d: v40d(0x1) = EXP v40a(0x100) v405(0x0)
0x40f: v40f = DIV v408 v40d(0x1)
0x410: v410(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x425: v425 = AND v410(0xffffffffffffffffffffffffffffffffffffffff) v40f
0x426: v426(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x43b: v43b = AND v426(0xffffffffffffffffffffffffffffffffffffffff) v425
0x43c: v43c = CALLER 
0x43d: v43d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x452: v452 = AND v43d(0xffffffffffffffffffffffffffffffffffffffff) v43c
0x453: v453 = EQ v452 v43b
0x454: v454(0x4a8) = CONST 
0x457: JUMPI v454(0x4a8) v453
----------------------------------

Begin block 0x458
prev = {'0x402'}, next = {}
----------------------------------
Block 0x458
0x458: v458(0x40) = CONST 
0x45a: v45a = MLOAD v458(0x40)
0x45b: v45b(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x47d: MSTORE v45a v45b(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x47e: v47e(0x4) = CONST 
0x480: v480 = ADD v47e(0x4) v45a
0x483: v483(0x20) = CONST 
0x485: v485 = ADD v483(0x20) v480
0x488: v488 = SUB v485 v480
0x48a: MSTORE v480 v488
0x48b: v48b(0x2d) = CONST 
0x48e: MSTORE v485 v48b(0x2d)
0x48f: v48f(0x20) = CONST 
0x491: v491 = ADD v48f(0x20) v485
0x493: v493(0x15ce) = CONST 
0x496: v496(0x2d) = CONST 
0x499: CODECOPY v491 v493(0x15ce) v496(0x2d)
0x49a: v49a(0x40) = CONST 
0x49c: v49c = ADD v49a(0x40) v491
0x4a0: v4a0(0x40) = CONST 
0x4a2: v4a2 = MLOAD v4a0(0x40)
0x4a5: v4a5 = SUB v49c v4a2
0x4a7: REVERT v4a2 v4a5
----------------------------------

Begin block 0x4a8
prev = {'0x402'}, next = {'0x571', '0x575'}
----------------------------------
Block 0x4a8
0x4a9: v4a9(0x2) = CONST 
0x4ab: v4ab(0x0) = CONST 
0x4ae: v4ae = SLOAD v4a9(0x2)
0x4b0: v4b0(0x100) = CONST 
0x4b3: v4b3(0x1) = EXP v4b0(0x100) v4ab(0x0)
0x4b5: v4b5 = DIV v4ae v4b3(0x1)
0x4b6: v4b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4cb: v4cb = AND v4b6(0xffffffffffffffffffffffffffffffffffffffff) v4b5
0x4cc: v4cc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4e1: v4e1 = AND v4cc(0xffffffffffffffffffffffffffffffffffffffff) v4cb
0x4e2: v4e2(0xa9059cbb) = CONST 
0x4e7: v4e7(0x1) = CONST 
0x4e9: v4e9(0x0) = CONST 
0x4ec: v4ec = SLOAD v4e7(0x1)
0x4ee: v4ee(0x100) = CONST 
0x4f1: v4f1(0x1) = EXP v4ee(0x100) v4e9(0x0)
0x4f3: v4f3 = DIV v4ec v4f1(0x1)
0x4f4: v4f4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x509: v509 = AND v4f4(0xffffffffffffffffffffffffffffffffffffffff) v4f3
0x50a: v50a(0x4) = CONST 
0x50c: v50c = SLOAD v50a(0x4)
0x50d: v50d(0x40) = CONST 
0x50f: v50f = MLOAD v50d(0x40)
0x511: v511(0xffffffff) = CONST 
0x516: v516(0xa9059cbb) = AND v511(0xffffffff) v4e2(0xa9059cbb)
0x517: v517(0xe0) = CONST 
0x519: v519(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v517(0xe0) v516(0xa9059cbb)
0x51b: MSTORE v50f v519(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x51c: v51c(0x4) = CONST 
0x51e: v51e = ADD v51c(0x4) v50f
0x521: v521(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x536: v536 = AND v521(0xffffffffffffffffffffffffffffffffffffffff) v509
0x537: v537(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x54c: v54c = AND v537(0xffffffffffffffffffffffffffffffffffffffff) v536
0x54e: MSTORE v51e v54c
0x54f: v54f(0x20) = CONST 
0x551: v551 = ADD v54f(0x20) v51e
0x554: MSTORE v551 v50c
0x555: v555(0x20) = CONST 
0x557: v557 = ADD v555(0x20) v551
0x55c: v55c(0x20) = CONST 
0x55e: v55e(0x40) = CONST 
0x560: v560 = MLOAD v55e(0x40)
0x563: v563 = SUB v557 v560
0x565: v565(0x0) = CONST 
0x569: v569 = EXTCODESIZE v4e1
0x56a: v56a = ISZERO v569
0x56c: v56c = ISZERO v56a
0x56d: v56d(0x575) = CONST 
0x570: JUMPI v56d(0x575) v56c
----------------------------------

Begin block 0x571
prev = {'0x4a8'}, next = {}
----------------------------------
Block 0x571
0x571: v571(0x0) = CONST 
0x574: REVERT v571(0x0) v571(0x0)
----------------------------------

Begin block 0x575
prev = {'0x4a8'}, next = {'0x589', '0x580'}
----------------------------------
Block 0x575
0x577: v577 = GAS 
0x578: v578 = CALL v577 v4e1 v565(0x0) v560 v563 v560 v55c(0x20)
0x579: v579 = ISZERO v578
0x57b: v57b = ISZERO v579
0x57c: v57c(0x589) = CONST 
0x57f: JUMPI v57c(0x589) v57b
----------------------------------

Begin block 0x580
prev = {'0x575'}, next = {}
----------------------------------
Block 0x580
0x580: v580 = RETURNDATASIZE 
0x581: v581(0x0) = CONST 
0x584: RETURNDATACOPY v581(0x0) v581(0x0) v580
0x585: v585 = RETURNDATASIZE 
0x586: v586(0x0) = CONST 
0x588: REVERT v586(0x0) v585
----------------------------------

Begin block 0x589
prev = {'0x575'}, next = {'0x59b', '0x59f'}
----------------------------------
Block 0x589
0x58e: v58e(0x40) = CONST 
0x590: v590 = MLOAD v58e(0x40)
0x591: v591 = RETURNDATASIZE 
0x592: v592(0x20) = CONST 
0x595: v595 = LT v591 v592(0x20)
0x596: v596 = ISZERO v595
0x597: v597(0x59f) = CONST 
0x59a: JUMPI v597(0x59f) v596
----------------------------------

Begin block 0x59b
prev = {'0x589'}, next = {}
----------------------------------
Block 0x59b
0x59b: v59b(0x0) = CONST 
0x59e: REVERT v59b(0x0) v59b(0x0)
----------------------------------

Begin block 0x59f
prev = {'0x589'}, next = {'0x5cf'}
----------------------------------
Block 0x59f
0x5a1: v5a1 = ADD v590 v591
0x5a5: v5a5 = MLOAD v590
0x5a7: v5a7(0x20) = CONST 
0x5a9: v5a9 = ADD v5a7(0x20) v590
0x5b2: v5b2(0x4) = CONST 
0x5b4: v5b4(0x0) = CONST 
0x5b7: v5b7(0x100) = CONST 
0x5ba: v5ba(0x1) = EXP v5b7(0x100) v5b4(0x0)
0x5bc: v5bc = SLOAD v5b4(0x0)
0x5be: v5be(0xff) = CONST 
0x5c0: v5c0(0xff) = MUL v5be(0xff) v5ba(0x1)
0x5c1: v5c1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v5c0(0xff)
0x5c2: v5c2 = AND v5c1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v5bc
0x5c5: v5c5(0x4) = CONST 
0x5c8: v5c8(0x0) = GT v5b2(0x4) v5c5(0x4)
0x5c9: v5c9(0x1) = ISZERO v5c8(0x0)
0x5ca: v5ca(0x5cf) = CONST 
0x5cd: JUMPI v5ca(0x5cf) v5c9(0x1)
----------------------------------

Begin block 0x5cf
prev = {'0x59f'}, next = {'0x16d'}
----------------------------------
Block 0x5cf
0x5d0: v5d0 = MUL v5b2(0x4) v5ba(0x1)
0x5d1: v5d1 = OR v5d0 v5c2
0x5d3: SSTORE v5b4(0x0) v5d1
0x5d5: v5d5(0x1) = CONST 
0x5d7: v5d7(0x0) = CONST 
0x5da: v5da = SLOAD v5d5(0x1)
0x5dc: v5dc(0x100) = CONST 
0x5df: v5df(0x1) = EXP v5dc(0x100) v5d7(0x0)
0x5e1: v5e1 = DIV v5da v5df(0x1)
0x5e2: v5e2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5f7: v5f7 = AND v5e2(0xffffffffffffffffffffffffffffffffffffffff) v5e1
0x5f8: v5f8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x60d: v60d = AND v5f8(0xffffffffffffffffffffffffffffffffffffffff) v5f7
0x60e: v60e(0x13607bf9d2dd20e1f3a7daf47ab12856f8aad65e6ae7e2c75ace3d0c424a40e8) = CONST 
0x62f: v62f(0x40) = CONST 
0x631: v631 = MLOAD v62f(0x40)
0x632: v632(0x40) = CONST 
0x634: v634 = MLOAD v632(0x40)
0x637: v637 = SUB v631 v634
0x639: LOG2 v634 v637 v60e(0x13607bf9d2dd20e1f3a7daf47ab12856f8aad65e6ae7e2c75ace3d0c424a40e8) v60d
0x63a: JUMP v166(0x16d)
----------------------------------

Begin block 0x63b
prev = {'0x16f'}, next = {'0x177'}
----------------------------------
Block 0x63b
0x63c: v63c(0x6) = CONST 
0x63e: v63e = SLOAD v63c(0x6)
0x640: JUMP v170(0x177)
----------------------------------

Begin block 0x641
prev = {'0x18d'}, next = {'0x195'}
----------------------------------
Block 0x641
0x642: v642(0x0) = CONST 
0x644: v644(0x1) = CONST 
0x647: v647 = SLOAD v642(0x0)
0x649: v649(0x100) = CONST 
0x64c: v64c(0x100) = EXP v649(0x100) v644(0x1)
0x64e: v64e = DIV v647 v64c(0x100)
0x64f: v64f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x664: v664 = AND v64f(0xffffffffffffffffffffffffffffffffffffffff) v64e
0x666: JUMP v18e(0x195)
----------------------------------

Begin block 0x667
prev = {'0x1d7'}, next = {'0x674'}
----------------------------------
Block 0x667
0x668: v668(0x0) = CONST 
0x66a: v66a(0x4) = CONST 
0x66d: v66d(0x0) = GT v668(0x0) v66a(0x4)
0x66e: v66e(0x1) = ISZERO v66d(0x0)
0x66f: v66f(0x674) = CONST 
0x672: JUMPI v66f(0x674) v66e(0x1)
----------------------------------

Begin block 0x674
prev = {'0x667'}, next = {'0x68e', '0x68d'}
----------------------------------
Block 0x674
0x675: v675(0x0) = CONST 
0x679: v679 = SLOAD v675(0x0)
0x67b: v67b(0x100) = CONST 
0x67e: v67e(0x1) = EXP v67b(0x100) v675(0x0)
0x680: v680 = DIV v679 v67e(0x1)
0x681: v681(0xff) = CONST 
0x683: v683 = AND v681(0xff) v680
0x684: v684(0x4) = CONST 
0x687: v687 = GT v683 v684(0x4)
0x688: v688 = ISZERO v687
0x689: v689(0x68e) = CONST 
0x68c: JUMPI v689(0x68e) v688
----------------------------------

Begin block 0x68d
prev = {'0x674'}, next = {}
----------------------------------
Block 0x68d
0x68d: THROW 
----------------------------------

Begin block 0x68e
prev = {'0x674'}, next = {'0x694', '0x6e4'}
----------------------------------
Block 0x68e
0x68f: v68f = EQ v683 v668(0x0)
0x690: v690(0x6e4) = CONST 
0x693: JUMPI v690(0x6e4) v68f
----------------------------------

Begin block 0x694
prev = {'0x68e'}, next = {}
----------------------------------
Block 0x694
0x694: v694(0x40) = CONST 
0x696: v696 = MLOAD v694(0x40)
0x697: v697(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x6b9: MSTORE v696 v697(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x6ba: v6ba(0x4) = CONST 
0x6bc: v6bc = ADD v6ba(0x4) v696
0x6bf: v6bf(0x20) = CONST 
0x6c1: v6c1 = ADD v6bf(0x20) v6bc
0x6c4: v6c4 = SUB v6c1 v6bc
0x6c6: MSTORE v6bc v6c4
0x6c7: v6c7(0x36) = CONST 
0x6ca: MSTORE v6c1 v6c7(0x36)
0x6cb: v6cb(0x20) = CONST 
0x6cd: v6cd = ADD v6cb(0x20) v6c1
0x6cf: v6cf(0x13ca) = CONST 
0x6d2: v6d2(0x36) = CONST 
0x6d5: CODECOPY v6cd v6cf(0x13ca) v6d2(0x36)
0x6d6: v6d6(0x40) = CONST 
0x6d8: v6d8 = ADD v6d6(0x40) v6cd
0x6dc: v6dc(0x40) = CONST 
0x6de: v6de = MLOAD v6dc(0x40)
0x6e1: v6e1 = SUB v6d8 v6de
0x6e3: REVERT v6de v6e1
----------------------------------

Begin block 0x6e4
prev = {'0x68e'}, next = {'0x78a', '0x73a'}
----------------------------------
Block 0x6e4
0x6e5: v6e5(0x1) = CONST 
0x6e7: v6e7(0x0) = CONST 
0x6ea: v6ea = SLOAD v6e5(0x1)
0x6ec: v6ec(0x100) = CONST 
0x6ef: v6ef(0x1) = EXP v6ec(0x100) v6e7(0x0)
0x6f1: v6f1 = DIV v6ea v6ef(0x1)
0x6f2: v6f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x707: v707 = AND v6f2(0xffffffffffffffffffffffffffffffffffffffff) v6f1
0x708: v708(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x71d: v71d = AND v708(0xffffffffffffffffffffffffffffffffffffffff) v707
0x71e: v71e = CALLER 
0x71f: v71f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x734: v734 = AND v71f(0xffffffffffffffffffffffffffffffffffffffff) v71e
0x735: v735 = EQ v734 v71d
0x736: v736(0x78a) = CONST 
0x739: JUMPI v736(0x78a) v735
----------------------------------

Begin block 0x73a
prev = {'0x6e4'}, next = {}
----------------------------------
Block 0x73a
0x73a: v73a(0x40) = CONST 
0x73c: v73c = MLOAD v73a(0x40)
0x73d: v73d(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x75f: MSTORE v73c v73d(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x760: v760(0x4) = CONST 
0x762: v762 = ADD v760(0x4) v73c
0x765: v765(0x20) = CONST 
0x767: v767 = ADD v765(0x20) v762
0x76a: v76a = SUB v767 v762
0x76c: MSTORE v762 v76a
0x76d: v76d(0x34) = CONST 
0x770: MSTORE v767 v76d(0x34)
0x771: v771(0x20) = CONST 
0x773: v773 = ADD v771(0x20) v767
0x775: v775(0x1400) = CONST 
0x778: v778(0x34) = CONST 
0x77b: CODECOPY v773 v775(0x1400) v778(0x34)
0x77c: v77c(0x40) = CONST 
0x77e: v77e = ADD v77c(0x40) v773
0x782: v782(0x40) = CONST 
0x784: v784 = MLOAD v782(0x40)
0x787: v787 = SUB v77e v784
0x789: REVERT v784 v787
----------------------------------

Begin block 0x78a
prev = {'0x6e4'}, next = {'0x887', '0x88b'}
----------------------------------
Block 0x78a
0x78b: v78b(0x2) = CONST 
0x78d: v78d(0x0) = CONST 
0x790: v790 = SLOAD v78b(0x2)
0x792: v792(0x100) = CONST 
0x795: v795(0x1) = EXP v792(0x100) v78d(0x0)
0x797: v797 = DIV v790 v795(0x1)
0x798: v798(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ad: v7ad = AND v798(0xffffffffffffffffffffffffffffffffffffffff) v797
0x7ae: v7ae(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c3: v7c3 = AND v7ae(0xffffffffffffffffffffffffffffffffffffffff) v7ad
0x7c4: v7c4(0x23b872dd) = CONST 
0x7c9: v7c9(0x1) = CONST 
0x7cb: v7cb(0x0) = CONST 
0x7ce: v7ce = SLOAD v7c9(0x1)
0x7d0: v7d0(0x100) = CONST 
0x7d3: v7d3(0x1) = EXP v7d0(0x100) v7cb(0x0)
0x7d5: v7d5 = DIV v7ce v7d3(0x1)
0x7d6: v7d6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7eb: v7eb = AND v7d6(0xffffffffffffffffffffffffffffffffffffffff) v7d5
0x7ec: v7ec = ADDRESS 
0x7ed: v7ed(0x4) = CONST 
0x7ef: v7ef = SLOAD v7ed(0x4)
0x7f0: v7f0(0x40) = CONST 
0x7f2: v7f2 = MLOAD v7f0(0x40)
0x7f4: v7f4(0xffffffff) = CONST 
0x7f9: v7f9(0x23b872dd) = AND v7f4(0xffffffff) v7c4(0x23b872dd)
0x7fa: v7fa(0xe0) = CONST 
0x7fc: v7fc(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v7fa(0xe0) v7f9(0x23b872dd)
0x7fe: MSTORE v7f2 v7fc(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0x7ff: v7ff(0x4) = CONST 
0x801: v801 = ADD v7ff(0x4) v7f2
0x804: v804(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x819: v819 = AND v804(0xffffffffffffffffffffffffffffffffffffffff) v7eb
0x81a: v81a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82f: v82f = AND v81a(0xffffffffffffffffffffffffffffffffffffffff) v819
0x831: MSTORE v801 v82f
0x832: v832(0x20) = CONST 
0x834: v834 = ADD v832(0x20) v801
0x836: v836(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x84b: v84b = AND v836(0xffffffffffffffffffffffffffffffffffffffff) v7ec
0x84c: v84c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x861: v861 = AND v84c(0xffffffffffffffffffffffffffffffffffffffff) v84b
0x863: MSTORE v834 v861
0x864: v864(0x20) = CONST 
0x866: v866 = ADD v864(0x20) v834
0x869: MSTORE v866 v7ef
0x86a: v86a(0x20) = CONST 
0x86c: v86c = ADD v86a(0x20) v866
0x872: v872(0x20) = CONST 
0x874: v874(0x40) = CONST 
0x876: v876 = MLOAD v874(0x40)
0x879: v879 = SUB v86c v876
0x87b: v87b(0x0) = CONST 
0x87f: v87f = EXTCODESIZE v7c3
0x880: v880 = ISZERO v87f
0x882: v882 = ISZERO v880
0x883: v883(0x88b) = CONST 
0x886: JUMPI v883(0x88b) v882
----------------------------------

Begin block 0x887
prev = {'0x78a'}, next = {}
----------------------------------
Block 0x887
0x887: v887(0x0) = CONST 
0x88a: REVERT v887(0x0) v887(0x0)
----------------------------------

Begin block 0x88b
prev = {'0x78a'}, next = {'0x89f', '0x896'}
----------------------------------
Block 0x88b
0x88d: v88d = GAS 
0x88e: v88e = CALL v88d v7c3 v87b(0x0) v876 v879 v876 v872(0x20)
0x88f: v88f = ISZERO v88e
0x891: v891 = ISZERO v88f
0x892: v892(0x89f) = CONST 
0x895: JUMPI v892(0x89f) v891
----------------------------------

Begin block 0x896
prev = {'0x88b'}, next = {}
----------------------------------
Block 0x896
0x896: v896 = RETURNDATASIZE 
0x897: v897(0x0) = CONST 
0x89a: RETURNDATACOPY v897(0x0) v897(0x0) v896
0x89b: v89b = RETURNDATASIZE 
0x89c: v89c(0x0) = CONST 
0x89e: REVERT v89c(0x0) v89b
----------------------------------

Begin block 0x89f
prev = {'0x88b'}, next = {'0x8b1', '0x8b5'}
----------------------------------
Block 0x89f
0x8a4: v8a4(0x40) = CONST 
0x8a6: v8a6 = MLOAD v8a4(0x40)
0x8a7: v8a7 = RETURNDATASIZE 
0x8a8: v8a8(0x20) = CONST 
0x8ab: v8ab = LT v8a7 v8a8(0x20)
0x8ac: v8ac = ISZERO v8ab
0x8ad: v8ad(0x8b5) = CONST 
0x8b0: JUMPI v8ad(0x8b5) v8ac
----------------------------------

Begin block 0x8b1
prev = {'0x89f'}, next = {}
----------------------------------
Block 0x8b1
0x8b1: v8b1(0x0) = CONST 
0x8b4: REVERT v8b1(0x0) v8b1(0x0)
----------------------------------

Begin block 0x8b5
prev = {'0x89f'}, next = {'0x8cb', '0x91b'}
----------------------------------
Block 0x8b5
0x8b7: v8b7 = ADD v8a6 v8a7
0x8bb: v8bb = MLOAD v8a6
0x8bd: v8bd(0x20) = CONST 
0x8bf: v8bf = ADD v8bd(0x20) v8a6
0x8c7: v8c7(0x91b) = CONST 
0x8ca: JUMPI v8c7(0x91b) v8bb
----------------------------------

Begin block 0x8cb
prev = {'0x8b5'}, next = {}
----------------------------------
Block 0x8cb
0x8cb: v8cb(0x40) = CONST 
0x8cd: v8cd = MLOAD v8cb(0x40)
0x8ce: v8ce(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x8f0: MSTORE v8cd v8ce(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x8f1: v8f1(0x4) = CONST 
0x8f3: v8f3 = ADD v8f1(0x4) v8cd
0x8f6: v8f6(0x20) = CONST 
0x8f8: v8f8 = ADD v8f6(0x20) v8f3
0x8fb: v8fb = SUB v8f8 v8f3
0x8fd: MSTORE v8f3 v8fb
0x8fe: v8fe(0x21) = CONST 
0x901: MSTORE v8f8 v8fe(0x21)
0x902: v902(0x20) = CONST 
0x904: v904 = ADD v902(0x20) v8f8
0x906: v906(0x15fb) = CONST 
0x909: v909(0x21) = CONST 
0x90c: CODECOPY v904 v906(0x15fb) v909(0x21)
0x90d: v90d(0x40) = CONST 
0x90f: v90f = ADD v90d(0x40) v904
0x913: v913(0x40) = CONST 
0x915: v915 = MLOAD v913(0x40)
0x918: v918 = SUB v90f v915
0x91a: REVERT v915 v918
----------------------------------

Begin block 0x91b
prev = {'0x8b5'}, next = {'0x939'}
----------------------------------
Block 0x91b
0x91c: v91c(0x1) = CONST 
0x91e: v91e(0x0) = CONST 
0x921: v921(0x100) = CONST 
0x924: v924(0x1) = EXP v921(0x100) v91e(0x0)
0x926: v926 = SLOAD v91e(0x0)
0x928: v928(0xff) = CONST 
0x92a: v92a(0xff) = MUL v928(0xff) v924(0x1)
0x92b: v92b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v92a(0xff)
0x92c: v92c = AND v92b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v926
0x92f: v92f(0x4) = CONST 
0x932: v932(0x0) = GT v91c(0x1) v92f(0x4)
0x933: v933(0x1) = ISZERO v932(0x0)
0x934: v934(0x939) = CONST 
0x937: JUMPI v934(0x939) v933(0x1)
----------------------------------

Begin block 0x939
prev = {'0x91b'}, next = {'0x1df'}
----------------------------------
Block 0x939
0x93a: v93a = MUL v91c(0x1) v924(0x1)
0x93b: v93b = OR v93a v92c
0x93d: SSTORE v91e(0x0) v93b
0x93f: v93f(0x1) = CONST 
0x941: v941(0x0) = CONST 
0x944: v944 = SLOAD v93f(0x1)
0x946: v946(0x100) = CONST 
0x949: v949(0x1) = EXP v946(0x100) v941(0x0)
0x94b: v94b = DIV v944 v949(0x1)
0x94c: v94c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x961: v961 = AND v94c(0xffffffffffffffffffffffffffffffffffffffff) v94b
0x962: v962(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x977: v977 = AND v962(0xffffffffffffffffffffffffffffffffffffffff) v961
0x978: v978(0x25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce79) = CONST 
0x999: v999(0x4) = CONST 
0x99b: v99b = SLOAD v999(0x4)
0x99c: v99c(0x40) = CONST 
0x99e: v99e = MLOAD v99c(0x40)
0x9a2: MSTORE v99e v99b
0x9a3: v9a3(0x20) = CONST 
0x9a5: v9a5 = ADD v9a3(0x20) v99e
0x9a9: v9a9(0x40) = CONST 
0x9ab: v9ab = MLOAD v9a9(0x40)
0x9ae: v9ae = SUB v9a5 v9ab
0x9b0: LOG2 v9ab v9ae v978(0x25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce79) v977
0x9b1: JUMP v1d8(0x1df)
----------------------------------

Begin block 0x9b2
prev = {'0x1e1'}, next = {'0x1e9'}
----------------------------------
Block 0x9b2
0x9b3: v9b3(0x7) = CONST 
0x9b5: v9b5 = SLOAD v9b3(0x7)
0x9b7: JUMP v1e2(0x1e9)
----------------------------------

Begin block 0x9b8
prev = {'0x1ff'}, next = {'0x207'}
----------------------------------
Block 0x9b8
0x9b9: v9b9(0x2) = CONST 
0x9bb: v9bb(0x0) = CONST 
0x9be: v9be = SLOAD v9b9(0x2)
0x9c0: v9c0(0x100) = CONST 
0x9c3: v9c3(0x1) = EXP v9c0(0x100) v9bb(0x0)
0x9c5: v9c5 = DIV v9be v9c3(0x1)
0x9c6: v9c6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9db: v9db = AND v9c6(0xffffffffffffffffffffffffffffffffffffffff) v9c5
0x9dd: JUMP v200(0x207)
----------------------------------

Begin block 0x9de
prev = {'0x249'}, next = {'0x251'}
----------------------------------
Block 0x9de
0x9df: v9df(0x3) = CONST 
0x9e1: v9e1(0x0) = CONST 
0x9e4: v9e4 = SLOAD v9df(0x3)
0x9e6: v9e6(0x100) = CONST 
0x9e9: v9e9(0x1) = EXP v9e6(0x100) v9e1(0x0)
0x9eb: v9eb = DIV v9e4 v9e9(0x1)
0x9ec: v9ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa01: va01 = AND v9ec(0xffffffffffffffffffffffffffffffffffffffff) v9eb
0xa03: JUMP v24a(0x251)
----------------------------------

Begin block 0xa04
prev = {'0x2a9'}, next = {'0xa11'}
----------------------------------
Block 0xa04
0xa05: va05(0x1) = CONST 
0xa07: va07(0x4) = CONST 
0xa0a: va0a(0x0) = GT va05(0x1) va07(0x4)
0xa0b: va0b(0x1) = ISZERO va0a(0x0)
0xa0c: va0c(0xa11) = CONST 
0xa0f: JUMPI va0c(0xa11) va0b(0x1)
----------------------------------

Begin block 0xa11
prev = {'0xa04'}, next = {'0xa2b', '0xa2a'}
----------------------------------
Block 0xa11
0xa12: va12(0x0) = CONST 
0xa16: va16 = SLOAD va12(0x0)
0xa18: va18(0x100) = CONST 
0xa1b: va1b(0x1) = EXP va18(0x100) va12(0x0)
0xa1d: va1d = DIV va16 va1b(0x1)
0xa1e: va1e(0xff) = CONST 
0xa20: va20 = AND va1e(0xff) va1d
0xa21: va21(0x4) = CONST 
0xa24: va24 = GT va20 va21(0x4)
0xa25: va25 = ISZERO va24
0xa26: va26(0xa2b) = CONST 
0xa29: JUMPI va26(0xa2b) va25
----------------------------------

Begin block 0xa2a
prev = {'0xa11'}, next = {}
----------------------------------
Block 0xa2a
0xa2a: THROW 
----------------------------------

Begin block 0xa2b
prev = {'0xa11'}, next = {'0xa31', '0xa81'}
----------------------------------
Block 0xa2b
0xa2c: va2c = EQ va20 va05(0x1)
0xa2d: va2d(0xa81) = CONST 
0xa30: JUMPI va2d(0xa81) va2c
----------------------------------

Begin block 0xa31
prev = {'0xa2b'}, next = {}
----------------------------------
Block 0xa31
0xa31: va31(0x40) = CONST 
0xa33: va33 = MLOAD va31(0x40)
0xa34: va34(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xa56: MSTORE va33 va34(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xa57: va57(0x4) = CONST 
0xa59: va59 = ADD va57(0x4) va33
0xa5c: va5c(0x20) = CONST 
0xa5e: va5e = ADD va5c(0x20) va59
0xa61: va61 = SUB va5e va59
0xa63: MSTORE va59 va61
0xa64: va64(0x45) = CONST 
0xa67: MSTORE va5e va64(0x45)
0xa68: va68(0x20) = CONST 
0xa6a: va6a = ADD va68(0x20) va5e
0xa6c: va6c(0x14c7) = CONST 
0xa6f: va6f(0x45) = CONST 
0xa72: CODECOPY va6a va6c(0x14c7) va6f(0x45)
0xa73: va73(0x60) = CONST 
0xa75: va75 = ADD va73(0x60) va6a
0xa79: va79(0x40) = CONST 
0xa7b: va7b = MLOAD va79(0x40)
0xa7e: va7e = SUB va75 va7b
0xa80: REVERT va7b va7e
----------------------------------

Begin block 0xa81
prev = {'0xa2b'}, next = {'0xad7', '0xb27'}
----------------------------------
Block 0xa81
0xa82: va82(0x1) = CONST 
0xa84: va84(0x0) = CONST 
0xa87: va87 = SLOAD va82(0x1)
0xa89: va89(0x100) = CONST 
0xa8c: va8c(0x1) = EXP va89(0x100) va84(0x0)
0xa8e: va8e = DIV va87 va8c(0x1)
0xa8f: va8f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa4: vaa4 = AND va8f(0xffffffffffffffffffffffffffffffffffffffff) va8e
0xaa5: vaa5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaba: vaba = AND vaa5(0xffffffffffffffffffffffffffffffffffffffff) vaa4
0xabb: vabb = CALLER 
0xabc: vabc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xad1: vad1 = AND vabc(0xffffffffffffffffffffffffffffffffffffffff) vabb
0xad2: vad2 = EQ vad1 vaba
0xad3: vad3(0xb27) = CONST 
0xad6: JUMPI vad3(0xb27) vad2
----------------------------------

Begin block 0xad7
prev = {'0xa81'}, next = {}
----------------------------------
Block 0xad7
0xad7: vad7(0x40) = CONST 
0xad9: vad9 = MLOAD vad7(0x40)
0xada: vada(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xafc: MSTORE vad9 vada(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xafd: vafd(0x4) = CONST 
0xaff: vaff = ADD vafd(0x4) vad9
0xb02: vb02(0x20) = CONST 
0xb04: vb04 = ADD vb02(0x20) vaff
0xb07: vb07 = SUB vb04 vaff
0xb09: MSTORE vaff vb07
0xb0a: vb0a(0x2f) = CONST 
0xb0d: MSTORE vb04 vb0a(0x2f)
0xb0e: vb0e(0x20) = CONST 
0xb10: vb10 = ADD vb0e(0x20) vb04
0xb12: vb12(0x1572) = CONST 
0xb15: vb15(0x2f) = CONST 
0xb18: CODECOPY vb10 vb12(0x1572) vb15(0x2f)
0xb19: vb19(0x40) = CONST 
0xb1b: vb1b = ADD vb19(0x40) vb10
0xb1f: vb1f(0x40) = CONST 
0xb21: vb21 = MLOAD vb1f(0x40)
0xb24: vb24 = SUB vb1b vb21
0xb26: REVERT vb21 vb24
----------------------------------

Begin block 0xb27
prev = {'0xa81'}, next = {'0x2bf'}
----------------------------------
Block 0xb27
0xb28: vb28(0x0) = CONST 
0xb2a: vb2a(0x6) = CONST 
0xb2c: vb2c = SLOAD vb2a(0x6)
0xb30: vb30(0x6) = CONST 
0xb34: SSTORE vb30(0x6) v2af
0xb36: vb36(0x1) = CONST 
0xb38: vb38(0x0) = CONST 
0xb3b: vb3b = SLOAD vb36(0x1)
0xb3d: vb3d(0x100) = CONST 
0xb40: vb40(0x1) = EXP vb3d(0x100) vb38(0x0)
0xb42: vb42 = DIV vb3b vb40(0x1)
0xb43: vb43(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb58: vb58 = AND vb43(0xffffffffffffffffffffffffffffffffffffffff) vb42
0xb59: vb59(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb6e: vb6e = AND vb59(0xffffffffffffffffffffffffffffffffffffffff) vb58
0xb6f: vb6f(0x6874c23f24ec50614d9c33701156ba38286c91c6722299201c1ce0732fe83c99) = CONST 
0xb91: vb91(0x6) = CONST 
0xb93: vb93 = SLOAD vb91(0x6)
0xb94: vb94(0x40) = CONST 
0xb96: vb96 = MLOAD vb94(0x40)
0xb9a: MSTORE vb96 vb2c
0xb9b: vb9b(0x20) = CONST 
0xb9d: vb9d = ADD vb9b(0x20) vb96
0xba0: MSTORE vb9d vb93
0xba1: vba1(0x20) = CONST 
0xba3: vba3 = ADD vba1(0x20) vb9d
0xba8: vba8(0x40) = CONST 
0xbaa: vbaa = MLOAD vba8(0x40)
0xbad: vbad = SUB vba3 vbaa
0xbaf: LOG2 vbaa vbad vb6f(0x6874c23f24ec50614d9c33701156ba38286c91c6722299201c1ce0732fe83c99) vb6e
0xbb2: JUMP v294(0x2bf)
----------------------------------

Begin block 0xbb3
prev = {'0x2c1'}, next = {'0xbc0'}
----------------------------------
Block 0xbb3
0xbb4: vbb4(0x2) = CONST 
0xbb6: vbb6(0x4) = CONST 
0xbb9: vbb9(0x0) = GT vbb4(0x2) vbb6(0x4)
0xbba: vbba(0x1) = ISZERO vbb9(0x0)
0xbbb: vbbb(0xbc0) = CONST 
0xbbe: JUMPI vbbb(0xbc0) vbba(0x1)
----------------------------------

Begin block 0xbc0
prev = {'0xbb3'}, next = {'0xbda', '0xbd9'}
----------------------------------
Block 0xbc0
0xbc1: vbc1(0x0) = CONST 
0xbc5: vbc5 = SLOAD vbc1(0x0)
0xbc7: vbc7(0x100) = CONST 
0xbca: vbca(0x1) = EXP vbc7(0x100) vbc1(0x0)
0xbcc: vbcc = DIV vbc5 vbca(0x1)
0xbcd: vbcd(0xff) = CONST 
0xbcf: vbcf = AND vbcd(0xff) vbcc
0xbd0: vbd0(0x4) = CONST 
0xbd3: vbd3 = GT vbcf vbd0(0x4)
0xbd4: vbd4 = ISZERO vbd3
0xbd5: vbd5(0xbda) = CONST 
0xbd8: JUMPI vbd5(0xbda) vbd4
----------------------------------

Begin block 0xbd9
prev = {'0xbc0'}, next = {}
----------------------------------
Block 0xbd9
0xbd9: THROW 
----------------------------------

Begin block 0xbda
prev = {'0xbc0'}, next = {'0xbe8', '0xbe2'}
----------------------------------
Block 0xbda
0xbdb: vbdb = EQ vbcf vbb4(0x2)
0xbdd: vbdd = ISZERO vbdb
0xbde: vbde(0xbe8) = CONST 
0xbe1: JUMPI vbde(0xbe8) vbdd
----------------------------------

Begin block 0xbe2
prev = {'0xbda'}, next = {'0xbe8'}
----------------------------------
Block 0xbe2
0xbe3: vbe3(0x7) = CONST 
0xbe5: vbe5 = SLOAD vbe3(0x7)
0xbe6: vbe6 = TIMESTAMP 
0xbe7: vbe7 = LT vbe6 vbe5
----------------------------------

Begin block 0xbe8
prev = {'0xbda', '0xbe2'}, next = {'0xbed', '0xc3d'}
----------------------------------
Block 0xbe8
0xbe8_0x0: vbe8_0 = PHI vbdb vbe7
0xbe9: vbe9(0xc3d) = CONST 
0xbec: JUMPI vbe9(0xc3d) vbe8_0
----------------------------------

Begin block 0xbed
prev = {'0xbe8'}, next = {}
----------------------------------
Block 0xbed
0xbed: vbed(0x40) = CONST 
0xbef: vbef = MLOAD vbed(0x40)
0xbf0: vbf0(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xc12: MSTORE vbef vbf0(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xc13: vc13(0x4) = CONST 
0xc15: vc15 = ADD vc13(0x4) vbef
0xc18: vc18(0x20) = CONST 
0xc1a: vc1a = ADD vc18(0x20) vc15
0xc1d: vc1d = SUB vc1a vc15
0xc1f: MSTORE vc15 vc1d
0xc20: vc20(0x3b) = CONST 
0xc23: MSTORE vc1a vc20(0x3b)
0xc24: vc24(0x20) = CONST 
0xc26: vc26 = ADD vc24(0x20) vc1a
0xc28: vc28(0x1537) = CONST 
0xc2b: vc2b(0x3b) = CONST 
0xc2e: CODECOPY vc26 vc28(0x1537) vc2b(0x3b)
0xc2f: vc2f(0x40) = CONST 
0xc31: vc31 = ADD vc2f(0x40) vc26
0xc35: vc35(0x40) = CONST 
0xc37: vc37 = MLOAD vc35(0x40)
0xc3a: vc3a = SUB vc31 vc37
0xc3c: REVERT vc37 vc3a
----------------------------------

Begin block 0xc3d
prev = {'0xbe8'}, next = {'0xc93', '0xce3'}
----------------------------------
Block 0xc3d
0xc3e: vc3e(0x0) = CONST 
0xc40: vc40(0x1) = CONST 
0xc43: vc43 = SLOAD vc3e(0x0)
0xc45: vc45(0x100) = CONST 
0xc48: vc48(0x100) = EXP vc45(0x100) vc40(0x1)
0xc4a: vc4a = DIV vc43 vc48(0x100)
0xc4b: vc4b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc60: vc60 = AND vc4b(0xffffffffffffffffffffffffffffffffffffffff) vc4a
0xc61: vc61(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc76: vc76 = AND vc61(0xffffffffffffffffffffffffffffffffffffffff) vc60
0xc77: vc77 = CALLER 
0xc78: vc78(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc8d: vc8d = AND vc78(0xffffffffffffffffffffffffffffffffffffffff) vc77
0xc8e: vc8e = EQ vc8d vc76
0xc8f: vc8f(0xce3) = CONST 
0xc92: JUMPI vc8f(0xce3) vc8e
----------------------------------

Begin block 0xc93
prev = {'0xc3d'}, next = {}
----------------------------------
Block 0xc93
0xc93: vc93(0x40) = CONST 
0xc95: vc95 = MLOAD vc93(0x40)
0xc96: vc96(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xcb8: MSTORE vc95 vc96(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xcb9: vcb9(0x4) = CONST 
0xcbb: vcbb = ADD vcb9(0x4) vc95
0xcbe: vcbe(0x20) = CONST 
0xcc0: vcc0 = ADD vcbe(0x20) vcbb
0xcc3: vcc3 = SUB vcc0 vcbb
0xcc5: MSTORE vcbb vcc3
0xcc6: vcc6(0x2d) = CONST 
0xcc9: MSTORE vcc0 vcc6(0x2d)
0xcca: vcca(0x20) = CONST 
0xccc: vccc = ADD vcca(0x20) vcc0
0xcce: vcce(0x15a1) = CONST 
0xcd1: vcd1(0x2d) = CONST 
0xcd4: CODECOPY vccc vcce(0x15a1) vcd1(0x2d)
0xcd5: vcd5(0x40) = CONST 
0xcd7: vcd7 = ADD vcd5(0x40) vccc
0xcdb: vcdb(0x40) = CONST 
0xcdd: vcdd = MLOAD vcdb(0x40)
0xce0: vce0 = SUB vcd7 vcdd
0xce2: REVERT vcdd vce0
----------------------------------

Begin block 0xce3
prev = {'0xc3d'}, next = {'0xe0f', '0xe0b'}
----------------------------------
Block 0xce3
0xce4: vce4(0x0) = CONST 
0xce6: vce6(0x5) = CONST 
0xce8: vce8 = SLOAD vce6(0x5)
0xce9: vce9(0x4) = CONST 
0xceb: vceb = SLOAD vce9(0x4)
0xcec: vcec = MUL vceb vce8
0xcef: vcef(0x3) = CONST 
0xcf1: vcf1(0x0) = CONST 
0xcf4: vcf4 = SLOAD vcef(0x3)
0xcf6: vcf6(0x100) = CONST 
0xcf9: vcf9(0x1) = EXP vcf6(0x100) vcf1(0x0)
0xcfb: vcfb = DIV vcf4 vcf9(0x1)
0xcfc: vcfc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd11: vd11 = AND vcfc(0xffffffffffffffffffffffffffffffffffffffff) vcfb
0xd12: vd12(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd27: vd27 = AND vd12(0xffffffffffffffffffffffffffffffffffffffff) vd11
0xd28: vd28(0x23b872dd) = CONST 
0xd2d: vd2d(0x0) = CONST 
0xd2f: vd2f(0x1) = CONST 
0xd32: vd32 = SLOAD vd2d(0x0)
0xd34: vd34(0x100) = CONST 
0xd37: vd37(0x100) = EXP vd34(0x100) vd2f(0x1)
0xd39: vd39 = DIV vd32 vd37(0x100)
0xd3a: vd3a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4f: vd4f = AND vd3a(0xffffffffffffffffffffffffffffffffffffffff) vd39
0xd50: vd50(0x1) = CONST 
0xd52: vd52(0x0) = CONST 
0xd55: vd55 = SLOAD vd50(0x1)
0xd57: vd57(0x100) = CONST 
0xd5a: vd5a(0x1) = EXP vd57(0x100) vd52(0x0)
0xd5c: vd5c = DIV vd55 vd5a(0x1)
0xd5d: vd5d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd72: vd72 = AND vd5d(0xffffffffffffffffffffffffffffffffffffffff) vd5c
0xd74: vd74(0x40) = CONST 
0xd76: vd76 = MLOAD vd74(0x40)
0xd78: vd78(0xffffffff) = CONST 
0xd7d: vd7d(0x23b872dd) = AND vd78(0xffffffff) vd28(0x23b872dd)
0xd7e: vd7e(0xe0) = CONST 
0xd80: vd80(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL vd7e(0xe0) vd7d(0x23b872dd)
0xd82: MSTORE vd76 vd80(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0xd83: vd83(0x4) = CONST 
0xd85: vd85 = ADD vd83(0x4) vd76
0xd88: vd88(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd9d: vd9d = AND vd88(0xffffffffffffffffffffffffffffffffffffffff) vd4f
0xd9e: vd9e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdb3: vdb3 = AND vd9e(0xffffffffffffffffffffffffffffffffffffffff) vd9d
0xdb5: MSTORE vd85 vdb3
0xdb6: vdb6(0x20) = CONST 
0xdb8: vdb8 = ADD vdb6(0x20) vd85
0xdba: vdba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdcf: vdcf = AND vdba(0xffffffffffffffffffffffffffffffffffffffff) vd72
0xdd0: vdd0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xde5: vde5 = AND vdd0(0xffffffffffffffffffffffffffffffffffffffff) vdcf
0xde7: MSTORE vdb8 vde5
0xde8: vde8(0x20) = CONST 
0xdea: vdea = ADD vde8(0x20) vdb8
0xded: MSTORE vdea vcec
0xdee: vdee(0x20) = CONST 
0xdf0: vdf0 = ADD vdee(0x20) vdea
0xdf6: vdf6(0x20) = CONST 
0xdf8: vdf8(0x40) = CONST 
0xdfa: vdfa = MLOAD vdf8(0x40)
0xdfd: vdfd = SUB vdf0 vdfa
0xdff: vdff(0x0) = CONST 
0xe03: ve03 = EXTCODESIZE vd27
0xe04: ve04 = ISZERO ve03
0xe06: ve06 = ISZERO ve04
0xe07: ve07(0xe0f) = CONST 
0xe0a: JUMPI ve07(0xe0f) ve06
----------------------------------

Begin block 0xe0b
prev = {'0xce3'}, next = {}
----------------------------------
Block 0xe0b
0xe0b: ve0b(0x0) = CONST 
0xe0e: REVERT ve0b(0x0) ve0b(0x0)
----------------------------------

Begin block 0xe0f
prev = {'0xce3'}, next = {'0xe1a', '0xe23'}
----------------------------------
Block 0xe0f
0xe11: ve11 = GAS 
0xe12: ve12 = CALL ve11 vd27 vdff(0x0) vdfa vdfd vdfa vdf6(0x20)
0xe13: ve13 = ISZERO ve12
0xe15: ve15 = ISZERO ve13
0xe16: ve16(0xe23) = CONST 
0xe19: JUMPI ve16(0xe23) ve15
----------------------------------

Begin block 0xe1a
prev = {'0xe0f'}, next = {}
----------------------------------
Block 0xe1a
0xe1a: ve1a = RETURNDATASIZE 
0xe1b: ve1b(0x0) = CONST 
0xe1e: RETURNDATACOPY ve1b(0x0) ve1b(0x0) ve1a
0xe1f: ve1f = RETURNDATASIZE 
0xe20: ve20(0x0) = CONST 
0xe22: REVERT ve20(0x0) ve1f
----------------------------------

Begin block 0xe23
prev = {'0xe0f'}, next = {'0xe39', '0xe35'}
----------------------------------
Block 0xe23
0xe28: ve28(0x40) = CONST 
0xe2a: ve2a = MLOAD ve28(0x40)
0xe2b: ve2b = RETURNDATASIZE 
0xe2c: ve2c(0x20) = CONST 
0xe2f: ve2f = LT ve2b ve2c(0x20)
0xe30: ve30 = ISZERO ve2f
0xe31: ve31(0xe39) = CONST 
0xe34: JUMPI ve31(0xe39) ve30
----------------------------------

Begin block 0xe35
prev = {'0xe23'}, next = {}
----------------------------------
Block 0xe35
0xe35: ve35(0x0) = CONST 
0xe38: REVERT ve35(0x0) ve35(0x0)
----------------------------------

Begin block 0xe39
prev = {'0xe23'}, next = {'0xe4f', '0xe9f'}
----------------------------------
Block 0xe39
0xe3b: ve3b = ADD ve2a ve2b
0xe3f: ve3f = MLOAD ve2a
0xe41: ve41(0x20) = CONST 
0xe43: ve43 = ADD ve41(0x20) ve2a
0xe4b: ve4b(0xe9f) = CONST 
0xe4e: JUMPI ve4b(0xe9f) ve3f
----------------------------------

Begin block 0xe4f
prev = {'0xe39'}, next = {}
----------------------------------
Block 0xe4f
0xe4f: ve4f(0x40) = CONST 
0xe51: ve51 = MLOAD ve4f(0x40)
0xe52: ve52(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xe74: MSTORE ve51 ve52(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe75: ve75(0x4) = CONST 
0xe77: ve77 = ADD ve75(0x4) ve51
0xe7a: ve7a(0x20) = CONST 
0xe7c: ve7c = ADD ve7a(0x20) ve77
0xe7f: ve7f = SUB ve7c ve77
0xe81: MSTORE ve77 ve7f
0xe82: ve82(0x2b) = CONST 
0xe85: MSTORE ve7c ve82(0x2b)
0xe86: ve86(0x20) = CONST 
0xe88: ve88 = ADD ve86(0x20) ve7c
0xe8a: ve8a(0x150c) = CONST 
0xe8d: ve8d(0x2b) = CONST 
0xe90: CODECOPY ve88 ve8a(0x150c) ve8d(0x2b)
0xe91: ve91(0x40) = CONST 
0xe93: ve93 = ADD ve91(0x40) ve88
0xe97: ve97(0x40) = CONST 
0xe99: ve99 = MLOAD ve97(0x40)
0xe9c: ve9c = SUB ve93 ve99
0xe9e: REVERT ve99 ve9c
----------------------------------

Begin block 0xe9f
prev = {'0xe39'}, next = {'0xf6c', '0xf68'}
----------------------------------
Block 0xe9f
0xea0: vea0(0x2) = CONST 
0xea2: vea2(0x0) = CONST 
0xea5: vea5 = SLOAD vea0(0x2)
0xea7: vea7(0x100) = CONST 
0xeaa: veaa(0x1) = EXP vea7(0x100) vea2(0x0)
0xeac: veac = DIV vea5 veaa(0x1)
0xead: vead(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xec2: vec2 = AND vead(0xffffffffffffffffffffffffffffffffffffffff) veac
0xec3: vec3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xed8: ved8 = AND vec3(0xffffffffffffffffffffffffffffffffffffffff) vec2
0xed9: ved9(0xa9059cbb) = CONST 
0xede: vede(0x0) = CONST 
0xee0: vee0(0x1) = CONST 
0xee3: vee3 = SLOAD vede(0x0)
0xee5: vee5(0x100) = CONST 
0xee8: vee8(0x100) = EXP vee5(0x100) vee0(0x1)
0xeea: veea = DIV vee3 vee8(0x100)
0xeeb: veeb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf00: vf00 = AND veeb(0xffffffffffffffffffffffffffffffffffffffff) veea
0xf01: vf01(0x4) = CONST 
0xf03: vf03 = SLOAD vf01(0x4)
0xf04: vf04(0x40) = CONST 
0xf06: vf06 = MLOAD vf04(0x40)
0xf08: vf08(0xffffffff) = CONST 
0xf0d: vf0d(0xa9059cbb) = AND vf08(0xffffffff) ved9(0xa9059cbb)
0xf0e: vf0e(0xe0) = CONST 
0xf10: vf10(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL vf0e(0xe0) vf0d(0xa9059cbb)
0xf12: MSTORE vf06 vf10(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xf13: vf13(0x4) = CONST 
0xf15: vf15 = ADD vf13(0x4) vf06
0xf18: vf18(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2d: vf2d = AND vf18(0xffffffffffffffffffffffffffffffffffffffff) vf00
0xf2e: vf2e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf43: vf43 = AND vf2e(0xffffffffffffffffffffffffffffffffffffffff) vf2d
0xf45: MSTORE vf15 vf43
0xf46: vf46(0x20) = CONST 
0xf48: vf48 = ADD vf46(0x20) vf15
0xf4b: MSTORE vf48 vf03
0xf4c: vf4c(0x20) = CONST 
0xf4e: vf4e = ADD vf4c(0x20) vf48
0xf53: vf53(0x20) = CONST 
0xf55: vf55(0x40) = CONST 
0xf57: vf57 = MLOAD vf55(0x40)
0xf5a: vf5a = SUB vf4e vf57
0xf5c: vf5c(0x0) = CONST 
0xf60: vf60 = EXTCODESIZE ved8
0xf61: vf61 = ISZERO vf60
0xf63: vf63 = ISZERO vf61
0xf64: vf64(0xf6c) = CONST 
0xf67: JUMPI vf64(0xf6c) vf63
----------------------------------

Begin block 0xf68
prev = {'0xe9f'}, next = {}
----------------------------------
Block 0xf68
0xf68: vf68(0x0) = CONST 
0xf6b: REVERT vf68(0x0) vf68(0x0)
----------------------------------

Begin block 0xf6c
prev = {'0xe9f'}, next = {'0xf77', '0xf80'}
----------------------------------
Block 0xf6c
0xf6e: vf6e = GAS 
0xf6f: vf6f = CALL vf6e ved8 vf5c(0x0) vf57 vf5a vf57 vf53(0x20)
0xf70: vf70 = ISZERO vf6f
0xf72: vf72 = ISZERO vf70
0xf73: vf73(0xf80) = CONST 
0xf76: JUMPI vf73(0xf80) vf72
----------------------------------

Begin block 0xf77
prev = {'0xf6c'}, next = {}
----------------------------------
Block 0xf77
0xf77: vf77 = RETURNDATASIZE 
0xf78: vf78(0x0) = CONST 
0xf7b: RETURNDATACOPY vf78(0x0) vf78(0x0) vf77
0xf7c: vf7c = RETURNDATASIZE 
0xf7d: vf7d(0x0) = CONST 
0xf7f: REVERT vf7d(0x0) vf7c
----------------------------------

Begin block 0xf80
prev = {'0xf6c'}, next = {'0xf92', '0xf96'}
----------------------------------
Block 0xf80
0xf85: vf85(0x40) = CONST 
0xf87: vf87 = MLOAD vf85(0x40)
0xf88: vf88 = RETURNDATASIZE 
0xf89: vf89(0x20) = CONST 
0xf8c: vf8c = LT vf88 vf89(0x20)
0xf8d: vf8d = ISZERO vf8c
0xf8e: vf8e(0xf96) = CONST 
0xf91: JUMPI vf8e(0xf96) vf8d
----------------------------------

Begin block 0xf92
prev = {'0xf80'}, next = {}
----------------------------------
Block 0xf92
0xf92: vf92(0x0) = CONST 
0xf95: REVERT vf92(0x0) vf92(0x0)
----------------------------------

Begin block 0xf96
prev = {'0xf80'}, next = {'0xfc6'}
----------------------------------
Block 0xf96
0xf98: vf98 = ADD vf87 vf88
0xf9c: vf9c = MLOAD vf87
0xf9e: vf9e(0x20) = CONST 
0xfa0: vfa0 = ADD vf9e(0x20) vf87
0xfa9: vfa9(0x3) = CONST 
0xfab: vfab(0x0) = CONST 
0xfae: vfae(0x100) = CONST 
0xfb1: vfb1(0x1) = EXP vfae(0x100) vfab(0x0)
0xfb3: vfb3 = SLOAD vfab(0x0)
0xfb5: vfb5(0xff) = CONST 
0xfb7: vfb7(0xff) = MUL vfb5(0xff) vfb1(0x1)
0xfb8: vfb8(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vfb7(0xff)
0xfb9: vfb9 = AND vfb8(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vfb3
0xfbc: vfbc(0x4) = CONST 
0xfbf: vfbf(0x0) = GT vfa9(0x3) vfbc(0x4)
0xfc0: vfc0(0x1) = ISZERO vfbf(0x0)
0xfc1: vfc1(0xfc6) = CONST 
0xfc4: JUMPI vfc1(0xfc6) vfc0(0x1)
----------------------------------

Begin block 0xfc6
prev = {'0xf96'}, next = {'0x2c9'}
----------------------------------
Block 0xfc6
0xfc7: vfc7 = MUL vfa9(0x3) vfb1(0x1)
0xfc8: vfc8 = OR vfc7 vfb9
0xfca: SSTORE vfab(0x0) vfc8
0xfcc: vfcc(0x0) = CONST 
0xfce: vfce(0x1) = CONST 
0xfd1: vfd1 = SLOAD vfcc(0x0)
0xfd3: vfd3(0x100) = CONST 
0xfd6: vfd6(0x100) = EXP vfd3(0x100) vfce(0x1)
0xfd8: vfd8 = DIV vfd1 vfd6(0x100)
0xfd9: vfd9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfee: vfee = AND vfd9(0xffffffffffffffffffffffffffffffffffffffff) vfd8
0xfef: vfef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1004: v1004 = AND vfef(0xffffffffffffffffffffffffffffffffffffffff) vfee
0x1005: v1005(0x4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b9369) = CONST 
0x1027: v1027(0x40) = CONST 
0x1029: v1029 = MLOAD v1027(0x40)
0x102d: MSTORE v1029 vcec
0x102e: v102e(0x20) = CONST 
0x1030: v1030 = ADD v102e(0x20) v1029
0x1034: v1034(0x40) = CONST 
0x1036: v1036 = MLOAD v1034(0x40)
0x1039: v1039 = SUB v1030 v1036
0x103b: LOG2 v1036 v1039 v1005(0x4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b9369) v1004
0x103d: JUMP v2c2(0x2c9)
----------------------------------

Begin block 0x103e
prev = {'0x2cb'}, next = {'0x2d3'}
----------------------------------
Block 0x103e
0x103f: v103f(0x5) = CONST 
0x1041: v1041 = SLOAD v103f(0x5)
0x1043: JUMP v2cc(0x2d3)
----------------------------------

Begin block 0x1044
prev = {'0x2e9'}, next = {'0x2f1'}
----------------------------------
Block 0x1044
0x1045: v1045(0x4) = CONST 
0x1047: v1047 = SLOAD v1045(0x4)
0x1049: JUMP v2ea(0x2f1)
----------------------------------

Begin block 0x104a
prev = {'0x307'}, next = {'0x1054', '0x10c1'}
----------------------------------
Block 0x104a
0x104b: v104b(0x7) = CONST 
0x104d: v104d = SLOAD v104b(0x7)
0x104e: v104e = TIMESTAMP 
0x104f: v104f = LT v104e v104d
0x1050: v1050(0x10c1) = CONST 
0x1053: JUMPI v1050(0x10c1) v104f
----------------------------------

Begin block 0x1054
prev = {'0x104a'}, next = {}
----------------------------------
Block 0x1054
0x1054: v1054(0x40) = CONST 
0x1056: v1056 = MLOAD v1054(0x40)
0x1057: v1057(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x1079: MSTORE v1056 v1057(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x107a: v107a(0x4) = CONST 
0x107c: v107c = ADD v107a(0x4) v1056
0x107f: v107f(0x20) = CONST 
0x1081: v1081 = ADD v107f(0x20) v107c
0x1084: v1084 = SUB v1081 v107c
0x1086: MSTORE v107c v1084
0x1087: v1087(0x1f) = CONST 
0x108a: MSTORE v1081 v1087(0x1f)
0x108b: v108b(0x20) = CONST 
0x108d: v108d = ADD v108b(0x20) v1081
0x108f: v108f(0x43616e6e6f74206f70656e20616e206578706972656420636f6e747261637400) = CONST 
0x10b1: MSTORE v108d v108f(0x43616e6e6f74206f70656e20616e206578706972656420636f6e747261637400)
0x10b3: v10b3(0x20) = CONST 
0x10b5: v10b5 = ADD v10b3(0x20) v108d
0x10b9: v10b9(0x40) = CONST 
0x10bb: v10bb = MLOAD v10b9(0x40)
0x10be: v10be = SUB v10b5 v10bb
0x10c0: REVERT v10bb v10be
----------------------------------

Begin block 0x10c1
prev = {'0x104a'}, next = {'0x10ce'}
----------------------------------
Block 0x10c1
0x10c2: v10c2(0x1) = CONST 
0x10c4: v10c4(0x4) = CONST 
0x10c7: v10c7(0x0) = GT v10c2(0x1) v10c4(0x4)
0x10c8: v10c8(0x1) = ISZERO v10c7(0x0)
0x10c9: v10c9(0x10ce) = CONST 
0x10cc: JUMPI v10c9(0x10ce) v10c8(0x1)
----------------------------------

Begin block 0x10ce
prev = {'0x10c1'}, next = {'0x10e8', '0x10e7'}
----------------------------------
Block 0x10ce
0x10cf: v10cf(0x0) = CONST 
0x10d3: v10d3 = SLOAD v10cf(0x0)
0x10d5: v10d5(0x100) = CONST 
0x10d8: v10d8(0x1) = EXP v10d5(0x100) v10cf(0x0)
0x10da: v10da = DIV v10d3 v10d8(0x1)
0x10db: v10db(0xff) = CONST 
0x10dd: v10dd = AND v10db(0xff) v10da
0x10de: v10de(0x4) = CONST 
0x10e1: v10e1 = GT v10dd v10de(0x4)
0x10e2: v10e2 = ISZERO v10e1
0x10e3: v10e3(0x10e8) = CONST 
0x10e6: JUMPI v10e3(0x10e8) v10e2
----------------------------------

Begin block 0x10e7
prev = {'0x10ce'}, next = {}
----------------------------------
Block 0x10e7
0x10e7: THROW 
----------------------------------

Begin block 0x10e8
prev = {'0x10ce'}, next = {'0x113e', '0x10ee'}
----------------------------------
Block 0x10e8
0x10e9: v10e9 = EQ v10dd v10c2(0x1)
0x10ea: v10ea(0x113e) = CONST 
0x10ed: JUMPI v10ea(0x113e) v10e9
----------------------------------

Begin block 0x10ee
prev = {'0x10e8'}, next = {}
----------------------------------
Block 0x10ee
0x10ee: v10ee(0x40) = CONST 
0x10f0: v10f0 = MLOAD v10ee(0x40)
0x10f1: v10f1(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x1113: MSTORE v10f0 v10f1(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1114: v1114(0x4) = CONST 
0x1116: v1116 = ADD v1114(0x4) v10f0
0x1119: v1119(0x20) = CONST 
0x111b: v111b = ADD v1119(0x20) v1116
0x111e: v111e = SUB v111b v1116
0x1120: MSTORE v1116 v111e
0x1121: v1121(0x2d) = CONST 
0x1124: MSTORE v111b v1121(0x2d)
0x1125: v1125(0x20) = CONST 
0x1127: v1127 = ADD v1125(0x20) v111b
0x1129: v1129(0x1434) = CONST 
0x112c: v112c(0x2d) = CONST 
0x112f: CODECOPY v1127 v1129(0x1434) v112c(0x2d)
0x1130: v1130(0x40) = CONST 
0x1132: v1132 = ADD v1130(0x40) v1127
0x1136: v1136(0x40) = CONST 
0x1138: v1138 = MLOAD v1136(0x40)
0x113b: v113b = SUB v1132 v1138
0x113d: REVERT v1138 v113b
----------------------------------

Begin block 0x113e
prev = {'0x10e8'}, next = {'0x129e', '0x12a2'}
----------------------------------
Block 0x113e
0x113f: v113f = CALLER 
0x1140: v1140(0x0) = CONST 
0x1142: v1142(0x1) = CONST 
0x1144: v1144(0x100) = CONST 
0x1147: v1147(0x100) = EXP v1144(0x100) v1142(0x1)
0x1149: v1149 = SLOAD v1140(0x0)
0x114b: v114b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1160: v1160(0xffffffffffffffffffffffffffffffffffffffff00) = MUL v114b(0xffffffffffffffffffffffffffffffffffffffff) v1147(0x100)
0x1161: v1161(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v1160(0xffffffffffffffffffffffffffffffffffffffff00)
0x1162: v1162 = AND v1161(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) v1149
0x1165: v1165(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x117a: v117a = AND v1165(0xffffffffffffffffffffffffffffffffffffffff) v113f
0x117b: v117b = MUL v117a v1147(0x100)
0x117c: v117c = OR v117b v1162
0x117e: SSTORE v1140(0x0) v117c
0x1180: v1180(0x3) = CONST 
0x1182: v1182(0x0) = CONST 
0x1185: v1185 = SLOAD v1180(0x3)
0x1187: v1187(0x100) = CONST 
0x118a: v118a(0x1) = EXP v1187(0x100) v1182(0x0)
0x118c: v118c = DIV v1185 v118a(0x1)
0x118d: v118d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11a2: v11a2 = AND v118d(0xffffffffffffffffffffffffffffffffffffffff) v118c
0x11a3: v11a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11b8: v11b8 = AND v11a3(0xffffffffffffffffffffffffffffffffffffffff) v11a2
0x11b9: v11b9(0x23b872dd) = CONST 
0x11be: v11be(0x0) = CONST 
0x11c0: v11c0(0x1) = CONST 
0x11c3: v11c3 = SLOAD v11be(0x0)
0x11c5: v11c5(0x100) = CONST 
0x11c8: v11c8(0x100) = EXP v11c5(0x100) v11c0(0x1)
0x11ca: v11ca = DIV v11c3 v11c8(0x100)
0x11cb: v11cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11e0: v11e0 = AND v11cb(0xffffffffffffffffffffffffffffffffffffffff) v11ca
0x11e1: v11e1(0x1) = CONST 
0x11e3: v11e3(0x0) = CONST 
0x11e6: v11e6 = SLOAD v11e1(0x1)
0x11e8: v11e8(0x100) = CONST 
0x11eb: v11eb(0x1) = EXP v11e8(0x100) v11e3(0x0)
0x11ed: v11ed = DIV v11e6 v11eb(0x1)
0x11ee: v11ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1203: v1203 = AND v11ee(0xffffffffffffffffffffffffffffffffffffffff) v11ed
0x1204: v1204(0x6) = CONST 
0x1206: v1206 = SLOAD v1204(0x6)
0x1207: v1207(0x40) = CONST 
0x1209: v1209 = MLOAD v1207(0x40)
0x120b: v120b(0xffffffff) = CONST 
0x1210: v1210(0x23b872dd) = AND v120b(0xffffffff) v11b9(0x23b872dd)
0x1211: v1211(0xe0) = CONST 
0x1213: v1213(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v1211(0xe0) v1210(0x23b872dd)
0x1215: MSTORE v1209 v1213(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0x1216: v1216(0x4) = CONST 
0x1218: v1218 = ADD v1216(0x4) v1209
0x121b: v121b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1230: v1230 = AND v121b(0xffffffffffffffffffffffffffffffffffffffff) v11e0
0x1231: v1231(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1246: v1246 = AND v1231(0xffffffffffffffffffffffffffffffffffffffff) v1230
0x1248: MSTORE v1218 v1246
0x1249: v1249(0x20) = CONST 
0x124b: v124b = ADD v1249(0x20) v1218
0x124d: v124d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1262: v1262 = AND v124d(0xffffffffffffffffffffffffffffffffffffffff) v1203
0x1263: v1263(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1278: v1278 = AND v1263(0xffffffffffffffffffffffffffffffffffffffff) v1262
0x127a: MSTORE v124b v1278
0x127b: v127b(0x20) = CONST 
0x127d: v127d = ADD v127b(0x20) v124b
0x1280: MSTORE v127d v1206
0x1281: v1281(0x20) = CONST 
0x1283: v1283 = ADD v1281(0x20) v127d
0x1289: v1289(0x20) = CONST 
0x128b: v128b(0x40) = CONST 
0x128d: v128d = MLOAD v128b(0x40)
0x1290: v1290 = SUB v1283 v128d
0x1292: v1292(0x0) = CONST 
0x1296: v1296 = EXTCODESIZE v11b8
0x1297: v1297 = ISZERO v1296
0x1299: v1299 = ISZERO v1297
0x129a: v129a(0x12a2) = CONST 
0x129d: JUMPI v129a(0x12a2) v1299
----------------------------------

Begin block 0x129e
prev = {'0x113e'}, next = {}
----------------------------------
Block 0x129e
0x129e: v129e(0x0) = CONST 
0x12a1: REVERT v129e(0x0) v129e(0x0)
----------------------------------

Begin block 0x12a2
prev = {'0x113e'}, next = {'0x12b6', '0x12ad'}
----------------------------------
Block 0x12a2
0x12a4: v12a4 = GAS 
0x12a5: v12a5 = CALL v12a4 v11b8 v1292(0x0) v128d v1290 v128d v1289(0x20)
0x12a6: v12a6 = ISZERO v12a5
0x12a8: v12a8 = ISZERO v12a6
0x12a9: v12a9(0x12b6) = CONST 
0x12ac: JUMPI v12a9(0x12b6) v12a8
----------------------------------

Begin block 0x12ad
prev = {'0x12a2'}, next = {}
----------------------------------
Block 0x12ad
0x12ad: v12ad = RETURNDATASIZE 
0x12ae: v12ae(0x0) = CONST 
0x12b1: RETURNDATACOPY v12ae(0x0) v12ae(0x0) v12ad
0x12b2: v12b2 = RETURNDATASIZE 
0x12b3: v12b3(0x0) = CONST 
0x12b5: REVERT v12b3(0x0) v12b2
----------------------------------

Begin block 0x12b6
prev = {'0x12a2'}, next = {'0x12c8', '0x12cc'}
----------------------------------
Block 0x12b6
0x12bb: v12bb(0x40) = CONST 
0x12bd: v12bd = MLOAD v12bb(0x40)
0x12be: v12be = RETURNDATASIZE 
0x12bf: v12bf(0x20) = CONST 
0x12c2: v12c2 = LT v12be v12bf(0x20)
0x12c3: v12c3 = ISZERO v12c2
0x12c4: v12c4(0x12cc) = CONST 
0x12c7: JUMPI v12c4(0x12cc) v12c3
----------------------------------

Begin block 0x12c8
prev = {'0x12b6'}, next = {}
----------------------------------
Block 0x12c8
0x12c8: v12c8(0x0) = CONST 
0x12cb: REVERT v12c8(0x0) v12c8(0x0)
----------------------------------

Begin block 0x12cc
prev = {'0x12b6'}, next = {'0x1332', '0x12e2'}
----------------------------------
Block 0x12cc
0x12ce: v12ce = ADD v12bd v12be
0x12d2: v12d2 = MLOAD v12bd
0x12d4: v12d4(0x20) = CONST 
0x12d6: v12d6 = ADD v12d4(0x20) v12bd
0x12de: v12de(0x1332) = CONST 
0x12e1: JUMPI v12de(0x1332) v12d2
----------------------------------

Begin block 0x12e2
prev = {'0x12cc'}, next = {}
----------------------------------
Block 0x12e2
0x12e2: v12e2(0x40) = CONST 
0x12e4: v12e4 = MLOAD v12e2(0x40)
0x12e5: v12e5(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x1307: MSTORE v12e4 v12e5(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1308: v1308(0x4) = CONST 
0x130a: v130a = ADD v1308(0x4) v12e4
0x130d: v130d(0x20) = CONST 
0x130f: v130f = ADD v130d(0x20) v130a
0x1312: v1312 = SUB v130f v130a
0x1314: MSTORE v130a v1312
0x1315: v1315(0x21) = CONST 
0x1318: MSTORE v130f v1315(0x21)
0x1319: v1319(0x20) = CONST 
0x131b: v131b = ADD v1319(0x20) v130f
0x131d: v131d(0x1461) = CONST 
0x1320: v1320(0x21) = CONST 
0x1323: CODECOPY v131b v131d(0x1461) v1320(0x21)
0x1324: v1324(0x40) = CONST 
0x1326: v1326 = ADD v1324(0x40) v131b
0x132a: v132a(0x40) = CONST 
0x132c: v132c = MLOAD v132a(0x40)
0x132f: v132f = SUB v1326 v132c
0x1331: REVERT v132c v132f
----------------------------------

Begin block 0x1332
prev = {'0x12cc'}, next = {'0x1350'}
----------------------------------
Block 0x1332
0x1333: v1333(0x2) = CONST 
0x1335: v1335(0x0) = CONST 
0x1338: v1338(0x100) = CONST 
0x133b: v133b(0x1) = EXP v1338(0x100) v1335(0x0)
0x133d: v133d = SLOAD v1335(0x0)
0x133f: v133f(0xff) = CONST 
0x1341: v1341(0xff) = MUL v133f(0xff) v133b(0x1)
0x1342: v1342(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v1341(0xff)
0x1343: v1343 = AND v1342(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v133d
0x1346: v1346(0x4) = CONST 
0x1349: v1349(0x0) = GT v1333(0x2) v1346(0x4)
0x134a: v134a(0x1) = ISZERO v1349(0x0)
0x134b: v134b(0x1350) = CONST 
0x134e: JUMPI v134b(0x1350) v134a(0x1)
----------------------------------

Begin block 0x1350
prev = {'0x1332'}, next = {'0x30f'}
----------------------------------
Block 0x1350
0x1351: v1351 = MUL v1333(0x2) v133b(0x1)
0x1352: v1352 = OR v1351 v1343
0x1354: SSTORE v1335(0x0) v1352
0x1356: v1356(0x0) = CONST 
0x1358: v1358(0x1) = CONST 
0x135b: v135b = SLOAD v1356(0x0)
0x135d: v135d(0x100) = CONST 
0x1360: v1360(0x100) = EXP v135d(0x100) v1358(0x1)
0x1362: v1362 = DIV v135b v1360(0x100)
0x1363: v1363(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1378: v1378 = AND v1363(0xffffffffffffffffffffffffffffffffffffffff) v1362
0x1379: v1379(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x138e: v138e = AND v1379(0xffffffffffffffffffffffffffffffffffffffff) v1378
0x138f: v138f(0xc4b27f09c64550fd678a5b3c3a00f454814732e346e0f1c79d0add8f980346de) = CONST 
0x13b0: v13b0(0x6) = CONST 
0x13b2: v13b2 = SLOAD v13b0(0x6)
0x13b3: v13b3(0x40) = CONST 
0x13b5: v13b5 = MLOAD v13b3(0x40)
0x13b9: MSTORE v13b5 v13b2
0x13ba: v13ba(0x20) = CONST 
0x13bc: v13bc = ADD v13ba(0x20) v13b5
0x13c0: v13c0(0x40) = CONST 
0x13c2: v13c2 = MLOAD v13c0(0x40)
0x13c5: v13c5 = SUB v13bc v13c2
0x13c7: LOG2 v13c2 v13c5 v138f(0xc4b27f09c64550fd678a5b3c3a00f454814732e346e0f1c79d0add8f980346de) v138e
0x13c8: JUMP v308(0x30f)
----------------------------------

Begin block 0x1665
prev = {'0x10', '0xdf'}, next = {'0xea0x0'}
----------------------------------
Block 0x1665
0x1666: v1666(0xea) = CONST 
0x1667: CALLPRIVATE v1666(0xea)
----------------------------------

Begin block 0x1668
prev = {'0xc8'}, next = {}
----------------------------------
Block 0x1668
0x1669: v1669(0xef) = CONST 
0x166a: CALLPRIVATE v1669(0xef)
----------------------------------

Begin block 0x166b
prev = {'0xd4'}, next = {}
----------------------------------
Block 0x166b
0x166c: v166c(0x139) = CONST 
0x166d: CALLPRIVATE v166c(0x139)
----------------------------------

Begin block 0x166e
prev = {'0xdf'}, next = {}
----------------------------------
Block 0x166e
0x166f: v166f(0x165) = CONST 
0x1670: CALLPRIVATE v166f(0x165)
----------------------------------

Begin block 0x1671
prev = {'0x98'}, next = {}
----------------------------------
Block 0x1671
0x1672: v1672(0x16f) = CONST 
0x1673: CALLPRIVATE v1672(0x16f)
----------------------------------

Begin block 0x1674
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x1674
0x1675: v1675(0x18d) = CONST 
0x1676: CALLPRIVATE v1675(0x18d)
----------------------------------

Begin block 0x1677
prev = {'0xae'}, next = {}
----------------------------------
Block 0x1677
0x1678: v1678(0x1d7) = CONST 
0x1679: CALLPRIVATE v1678(0x1d7)
----------------------------------

Begin block 0x167a
prev = {'0xb9'}, next = {}
----------------------------------
Block 0x167a
0x167b: v167b(0x1e1) = CONST 
0x167c: CALLPRIVATE v167b(0x1e1)
----------------------------------

Begin block 0x167d
prev = {'0x66'}, next = {}
----------------------------------
Block 0x167d
0x167e: v167e(0x1ff) = CONST 
0x167f: CALLPRIVATE v167e(0x1ff)
----------------------------------

Begin block 0x1680
prev = {'0x72'}, next = {}
----------------------------------
Block 0x1680
0x1681: v1681(0x249) = CONST 
0x1682: CALLPRIVATE v1681(0x249)
----------------------------------

Begin block 0x1683
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x1683
0x1684: v1684(0x293) = CONST 
0x1685: CALLPRIVATE v1684(0x293)
----------------------------------

Begin block 0x1686
prev = {'0x36'}, next = {}
----------------------------------
Block 0x1686
0x1687: v1687(0x2c1) = CONST 
0x1688: CALLPRIVATE v1687(0x2c1)
----------------------------------

Begin block 0x1689
prev = {'0x41'}, next = {}
----------------------------------
Block 0x1689
0x168a: v168a(0x2cb) = CONST 
0x168b: CALLPRIVATE v168a(0x2cb)
----------------------------------

Begin block 0x168c
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x168c
0x168d: v168d(0x2e9) = CONST 
0x168e: CALLPRIVATE v168d(0x2e9)
----------------------------------

Begin block 0x168f
prev = {'0x57'}, next = {}
----------------------------------
Block 0x168f
0x1690: v1690(0x307) = CONST 
0x1691: CALLPRIVATE v1690(0x307)
----------------------------------
