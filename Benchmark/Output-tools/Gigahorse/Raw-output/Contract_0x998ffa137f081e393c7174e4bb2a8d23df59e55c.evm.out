
Begin block 0x0
prev = {}, next = {'0xd', '0x6dd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x6c3: v6c3(0x6dd) = CONST 
0x6c4: JUMPI v6c3(0x6dd) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x6e0', '0x40'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0x6c5: v6c5(0x6e0) = CONST 
0x6c6: JUMPI v6c5(0x6e0) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0x4b', '0x6e3'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0x6c7: v6c7(0x6e3) = CONST 
0x6c8: JUMPI v6c7(0x6e3) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0x56', '0x6e6'}
----------------------------------
Block 0x4b
0x4c: v4c(0x18160ddd) = CONST 
0x51: v51 = EQ v4c(0x18160ddd) v34
0x6c9: v6c9(0x6e6) = CONST 
0x6ca: JUMPI v6c9(0x6e6) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x6e9', '0x61'}
----------------------------------
Block 0x56
0x57: v57(0x23b872dd) = CONST 
0x5c: v5c = EQ v57(0x23b872dd) v34
0x6cb: v6cb(0x6e9) = CONST 
0x6cc: JUMPI v6cb(0x6e9) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x6c', '0x6ec'}
----------------------------------
Block 0x61
0x62: v62(0x2ff2e9dc) = CONST 
0x67: v67 = EQ v62(0x2ff2e9dc) v34
0x6cd: v6cd(0x6ec) = CONST 
0x6ce: JUMPI v6cd(0x6ec) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0x6ef', '0x77'}
----------------------------------
Block 0x6c
0x6d: v6d(0x313ce567) = CONST 
0x72: v72 = EQ v6d(0x313ce567) v34
0x6cf: v6cf(0x6ef) = CONST 
0x6d0: JUMPI v6cf(0x6ef) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0x6f2', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x39509351) = CONST 
0x7d: v7d = EQ v78(0x39509351) v34
0x6d1: v6d1(0x6f2) = CONST 
0x6d2: JUMPI v6d1(0x6f2) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0x6f5', '0x8d'}
----------------------------------
Block 0x82
0x83: v83(0x70a08231) = CONST 
0x88: v88 = EQ v83(0x70a08231) v34
0x6d3: v6d3(0x6f5) = CONST 
0x6d4: JUMPI v6d3(0x6f5) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x98', '0x6e0'}
----------------------------------
Block 0x8d
0x8e: v8e(0x95d89b41) = CONST 
0x93: v93 = EQ v8e(0x95d89b41) v34
0x6d5: v6d5(0x6e0) = CONST 
0x6d6: JUMPI v6d5(0x6e0) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0x6f8', '0xa3'}
----------------------------------
Block 0x98
0x99: v99(0xa457c2d7) = CONST 
0x9e: v9e = EQ v99(0xa457c2d7) v34
0x6d7: v6d7(0x6f8) = CONST 
0x6d8: JUMPI v6d7(0x6f8) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0x6fb', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0xa9059cbb) = CONST 
0xa9: va9 = EQ va4(0xa9059cbb) v34
0x6d9: v6d9(0x6fb) = CONST 
0x6da: JUMPI v6d9(0x6fb) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0x6fe', '0x6dd'}
----------------------------------
Block 0xae
0xaf: vaf(0xdd62ed3e) = CONST 
0xb4: vb4 = EQ vaf(0xdd62ed3e) v34
0x6db: v6db(0x6fe) = CONST 
0x6dc: JUMPI v6db(0x6fe) vb4
----------------------------------

Begin block 0xb9
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xb9
0xba: vba(0x0) = CONST 
0xbd: REVERT vba(0x0) vba(0x0)
----------------------------------

Begin block 0xbe
prev = {}, next = {'0xca', '0xc6'}
----------------------------------
function symbol()()
Block 0xbe
0xbf: vbf = CALLVALUE 
0xc1: vc1 = ISZERO vbf
0xc2: vc2(0xca) = CONST 
0xc5: JUMPI vc2(0xca) vc1
----------------------------------

Begin block 0xc6
prev = {'0xbe'}, next = {}
----------------------------------
Block 0xc6
0xc6: vc6(0x0) = CONST 
0xc9: REVERT vc6(0x0) vc6(0x0)
----------------------------------

Begin block 0xca
prev = {'0xbe'}, next = {'0x2c5'}
----------------------------------
Block 0xca
0xcc: vcc(0xd3) = CONST 
0xcf: vcf(0x2c5) = CONST 
0xd2: JUMP vcf(0x2c5)
----------------------------------

Begin block 0xd3
prev = {'0x2c5'}, next = {'0xf5'}
----------------------------------
Block 0xd3
0xd4: vd4(0x40) = CONST 
0xd7: vd7 = MLOAD vd4(0x40)
0xd8: vd8(0x20) = CONST 
0xdc: MSTORE vd7 vd8(0x20)
0xde: vde = MLOAD v2c9
0xe1: ve1 = ADD vd7 vd8(0x20)
0xe2: MSTORE ve1 vde
0xe4: ve4 = MLOAD v2c9
0xeb: veb = ADD vd7 vd4(0x40)
0xee: vee = ADD v2c9 vd8(0x20)
0xf3: vf3(0x0) = CONST 
----------------------------------

Begin block 0xf5
prev = {'0xd3', '0xfe'}, next = {'0xfe', '0x10d'}
----------------------------------
Block 0xf5
0xf5_0x0: vf5_0 = PHI vf3(0x0) v108
0xf8: vf8 = LT vf5_0 ve4
0xf9: vf9 = ISZERO vf8
0xfa: vfa(0x10d) = CONST 
0xfd: JUMPI vfa(0x10d) vf9
----------------------------------

Begin block 0xfe
prev = {'0xf5'}, next = {'0xf5'}
----------------------------------
Block 0xfe
0xfe_0x0: vfe_0 = PHI vf3(0x0) v108
0x100: v100 = ADD vfe_0 vee
0x101: v101 = MLOAD v100
0x104: v104 = ADD vfe_0 veb
0x105: MSTORE v104 v101
0x106: v106(0x20) = CONST 
0x108: v108 = ADD v106(0x20) vfe_0
0x109: v109(0xf5) = CONST 
0x10c: JUMP v109(0xf5)
----------------------------------

Begin block 0x10d
prev = {'0xf5'}, next = {'0x121', '0x13a'}
----------------------------------
Block 0x10d
0x116: v116 = ADD ve4 veb
0x118: v118(0x1f) = CONST 
0x11a: v11a = AND v118(0x1f) ve4
0x11c: v11c = ISZERO v11a
0x11d: v11d(0x13a) = CONST 
0x120: JUMPI v11d(0x13a) v11c
----------------------------------

Begin block 0x121
prev = {'0x10d'}, next = {'0x13a'}
----------------------------------
Block 0x121
0x123: v123 = SUB v116 v11a
0x125: v125 = MLOAD v123
0x126: v126(0x1) = CONST 
0x129: v129(0x20) = CONST 
0x12b: v12b = SUB v129(0x20) v11a
0x12c: v12c(0x100) = CONST 
0x12f: v12f = EXP v12c(0x100) v12b
0x130: v130 = SUB v12f v126(0x1)
0x131: v131 = NOT v130
0x132: v132 = AND v131 v125
0x134: MSTORE v123 v132
0x135: v135(0x20) = CONST 
0x137: v137 = ADD v135(0x20) v123
----------------------------------

Begin block 0x13a
prev = {'0x10d', '0x121'}, next = {}
----------------------------------
Block 0x13a
0x13a_0x1: v13a_1 = PHI v116 v137
0x140: v140(0x40) = CONST 
0x142: v142 = MLOAD v140(0x40)
0x145: v145 = SUB v13a_1 v142
0x147: RETURN v142 v145
----------------------------------

Begin block 0x148
prev = {}, next = {'0x154', '0x150'}
----------------------------------
function approve(address,uint256)()
Block 0x148
0x149: v149 = CALLVALUE 
0x14b: v14b = ISZERO v149
0x14c: v14c(0x154) = CONST 
0x14f: JUMPI v14c(0x154) v14b
----------------------------------

Begin block 0x150
prev = {'0x148'}, next = {}
----------------------------------
Block 0x150
0x150: v150(0x0) = CONST 
0x153: REVERT v150(0x0) v150(0x0)
----------------------------------

Begin block 0x154
prev = {'0x148'}, next = {'0x2fc'}
----------------------------------
Block 0x154
0x156: v156(0x16c) = CONST 
0x159: v159(0x1) = CONST 
0x15b: v15b(0xa0) = CONST 
0x15d: v15d(0x2) = CONST 
0x15f: v15f(0x10000000000000000000000000000000000000000) = EXP v15d(0x2) v15b(0xa0)
0x160: v160(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f(0x10000000000000000000000000000000000000000) v159(0x1)
0x161: v161(0x4) = CONST 
0x163: v163 = CALLDATALOAD v161(0x4)
0x164: v164 = AND v163 v160(0xffffffffffffffffffffffffffffffffffffffff)
0x165: v165(0x24) = CONST 
0x167: v167 = CALLDATALOAD v165(0x24)
0x168: v168(0x2fc) = CONST 
0x16b: JUMP v168(0x2fc)
----------------------------------

Begin block 0x16c0x148
prev = {'0x313'}, next = {}
----------------------------------
Block 0x16c0x148
0x16d0x148: v14816d(0x40) = CONST 
0x1700x148: v148170 = MLOAD v14816d(0x40)
0x1720x148: v148172 = ISZERO v373(0x1)
0x1730x148: v148173 = ISZERO v148172
0x1750x148: MSTORE v148170 v148173
0x1760x148: v148176 = MLOAD v14816d(0x40)
0x17a0x148: v14817a = SUB v148170 v148176
0x17b0x148: v14817b(0x20) = CONST 
0x17d0x148: v14817d = ADD v14817b(0x20) v14817a
0x17f0x148: RETURN v148176 v14817d
----------------------------------

Begin block 0x16c0x1a7
prev = {'0x413'}, next = {}
----------------------------------
Block 0x16c0x1a7
0x16d0x1a7: v1a716d(0x40) = CONST 
0x1700x1a7: v1a7170 = MLOAD v1a716d(0x40)
0x1720x1a7: v1a7172 = ISZERO v415(0x1)
0x1730x1a7: v1a7173 = ISZERO v1a7172
0x1750x1a7: MSTORE v1a7170 v1a7173
0x1760x1a7: v1a7176 = MLOAD v1a716d(0x40)
0x17a0x1a7: v1a717a = SUB v1a7170 v1a7176
0x17b0x1a7: v1a717b(0x20) = CONST 
0x17d0x1a7: v1a717d = ADD v1a717b(0x20) v1a717a
0x17f0x1a7: RETURN v1a7176 v1a717d
----------------------------------

Begin block 0x16c0x211
prev = {'0x21d'}, next = {}
----------------------------------
Block 0x16c0x211
0x16d0x211: v21116d(0x40) = CONST 
0x1700x211: v211170 = MLOAD v21116d(0x40)
0x1720x211: v211172 = ISZERO v234_0
0x1730x211: v211173 = ISZERO v211172
0x1750x211: MSTORE v211170 v211173
0x1760x211: v211176 = MLOAD v21116d(0x40)
0x17a0x211: v21117a = SUB v211170 v211176
0x17b0x211: v21117b(0x20) = CONST 
0x17d0x211: v21117d = ADD v21117b(0x20) v21117a
0x17f0x211: RETURN v211176 v21117d
----------------------------------

Begin block 0x16c0x256
prev = {'0x262'}, next = {}
----------------------------------
Block 0x16c0x256
0x16d0x256: v25616d(0x40) = CONST 
0x1700x256: v256170 = MLOAD v25616d(0x40)
0x1720x256: v256172 = ISZERO v279_0
0x1730x256: v256173 = ISZERO v256172
0x1750x256: MSTORE v256170 v256173
0x1760x256: v256176 = MLOAD v25616d(0x40)
0x17a0x256: v25617a = SUB v256170 v256176
0x17b0x256: v25617b(0x20) = CONST 
0x17d0x256: v25617d = ADD v25617b(0x20) v25617a
0x17f0x256: RETURN v256176 v25617d
----------------------------------

Begin block 0x16c0x27a
prev = {'0x551'}, next = {}
----------------------------------
Block 0x16c0x27a
0x16d0x27a: v27a16d(0x40) = CONST 
0x1700x27a: v27a170 = MLOAD v27a16d(0x40)
0x1720x27a: v27a172 = ISZERO v553(0x1)
0x1730x27a: v27a173 = ISZERO v27a172
0x1750x27a: MSTORE v27a170 v27a173
0x1760x27a: v27a176 = MLOAD v27a16d(0x40)
0x17a0x27a: v27a17a = SUB v27a170 v27a176
0x17b0x27a: v27a17b(0x20) = CONST 
0x17d0x27a: v27a17d = ADD v27a17b(0x20) v27a17a
0x17f0x27a: RETURN v27a176 v27a17d
----------------------------------

Begin block 0x180
prev = {}, next = {'0x18c', '0x188'}
----------------------------------
function totalSupply()()
Block 0x180
0x181: v181 = CALLVALUE 
0x183: v183 = ISZERO v181
0x184: v184(0x18c) = CONST 
0x187: JUMPI v184(0x18c) v183
----------------------------------

Begin block 0x188
prev = {'0x180'}, next = {}
----------------------------------
Block 0x188
0x188: v188(0x0) = CONST 
0x18b: REVERT v188(0x0) v188(0x0)
----------------------------------

Begin block 0x18c
prev = {'0x180'}, next = {'0x37a'}
----------------------------------
Block 0x18c
0x18e: v18e(0x195) = CONST 
0x191: v191(0x37a) = CONST 
0x194: JUMP v191(0x37a)
----------------------------------

Begin block 0x1950x180
prev = {'0x37a'}, next = {}
----------------------------------
Block 0x1950x180
0x1960x180: v180196(0x40) = CONST 
0x1990x180: v180199 = MLOAD v180196(0x40)
0x19c0x180: MSTORE v180199 v37d
0x19d0x180: v18019d = MLOAD v180196(0x40)
0x1a10x180: v1801a1 = SUB v180199 v18019d
0x1a20x180: v1801a2(0x20) = CONST 
0x1a40x180: v1801a4 = ADD v1801a2(0x20) v1801a1
0x1a60x180: RETURN v18019d v1801a4
----------------------------------

Begin block 0x1950x1d1
prev = {'0x41d'}, next = {}
----------------------------------
Block 0x1950x1d1
0x1960x1d1: v1d1196(0x40) = CONST 
0x1990x1d1: v1d1199 = MLOAD v1d1196(0x40)
0x19c0x1d1: MSTORE v1d1199 v41e(0x16345785d8a0000)
0x19d0x1d1: v1d119d = MLOAD v1d1196(0x40)
0x1a10x1d1: v1d11a1 = SUB v1d1199 v1d119d
0x1a20x1d1: v1d11a2(0x20) = CONST 
0x1a40x1d1: v1d11a4 = ADD v1d11a2(0x20) v1d11a1
0x1a60x1d1: RETURN v1d119d v1d11a4
----------------------------------

Begin block 0x1950x235
prev = {'0x4de'}, next = {}
----------------------------------
Block 0x1950x235
0x1960x235: v235196(0x40) = CONST 
0x1990x235: v235199 = MLOAD v235196(0x40)
0x19c0x235: MSTORE v235199 v4f6
0x19d0x235: v23519d = MLOAD v235196(0x40)
0x1a10x235: v2351a1 = SUB v235199 v23519d
0x1a20x235: v2351a2(0x20) = CONST 
0x1a40x235: v2351a4 = ADD v2351a2(0x20) v2351a1
0x1a60x235: RETURN v23519d v2351a4
----------------------------------

Begin block 0x1950x29e
prev = {'0x55a'}, next = {}
----------------------------------
Block 0x1950x29e
0x1960x29e: v29e196(0x40) = CONST 
0x1990x29e: v29e199 = MLOAD v29e196(0x40)
0x19c0x29e: MSTORE v29e199 v582
0x19d0x29e: v29e19d = MLOAD v29e196(0x40)
0x1a10x29e: v29e1a1 = SUB v29e199 v29e19d
0x1a20x29e: v29e1a2(0x20) = CONST 
0x1a40x29e: v29e1a4 = ADD v29e1a2(0x20) v29e1a1
0x1a60x29e: RETURN v29e19d v29e1a4
----------------------------------

Begin block 0x1a7
prev = {}, next = {'0x1b3', '0x1af'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1a7
0x1a8: v1a8 = CALLVALUE 
0x1aa: v1aa = ISZERO v1a8
0x1ab: v1ab(0x1b3) = CONST 
0x1ae: JUMPI v1ab(0x1b3) v1aa
----------------------------------

Begin block 0x1af
prev = {'0x1a7'}, next = {}
----------------------------------
Block 0x1af
0x1af: v1af(0x0) = CONST 
0x1b2: REVERT v1af(0x0) v1af(0x0)
----------------------------------

Begin block 0x1b3
prev = {'0x1a7'}, next = {'0x380'}
----------------------------------
Block 0x1b3
0x1b5: v1b5(0x16c) = CONST 
0x1b8: v1b8(0x1) = CONST 
0x1ba: v1ba(0xa0) = CONST 
0x1bc: v1bc(0x2) = CONST 
0x1be: v1be(0x10000000000000000000000000000000000000000) = EXP v1bc(0x2) v1ba(0xa0)
0x1bf: v1bf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1be(0x10000000000000000000000000000000000000000) v1b8(0x1)
0x1c0: v1c0(0x4) = CONST 
0x1c2: v1c2 = CALLDATALOAD v1c0(0x4)
0x1c4: v1c4 = AND v1bf(0xffffffffffffffffffffffffffffffffffffffff) v1c2
0x1c6: v1c6(0x24) = CONST 
0x1c8: v1c8 = CALLDATALOAD v1c6(0x24)
0x1c9: v1c9 = AND v1c8 v1bf(0xffffffffffffffffffffffffffffffffffffffff)
0x1ca: v1ca(0x44) = CONST 
0x1cc: v1cc = CALLDATALOAD v1ca(0x44)
0x1cd: v1cd(0x380) = CONST 
0x1d0: JUMP v1cd(0x380)
----------------------------------

Begin block 0x1d1
prev = {}, next = {'0x1d9', '0x1dd'}
----------------------------------
function INITIAL_SUPPLY()()
Block 0x1d1
0x1d2: v1d2 = CALLVALUE 
0x1d4: v1d4 = ISZERO v1d2
0x1d5: v1d5(0x1dd) = CONST 
0x1d8: JUMPI v1d5(0x1dd) v1d4
----------------------------------

Begin block 0x1d9
prev = {'0x1d1'}, next = {}
----------------------------------
Block 0x1d9
0x1d9: v1d9(0x0) = CONST 
0x1dc: REVERT v1d9(0x0) v1d9(0x0)
----------------------------------

Begin block 0x1dd
prev = {'0x1d1'}, next = {'0x41d'}
----------------------------------
Block 0x1dd
0x1df: v1df(0x195) = CONST 
0x1e2: v1e2(0x41d) = CONST 
0x1e5: JUMP v1e2(0x41d)
----------------------------------

Begin block 0x1e6
prev = {}, next = {'0x1f2', '0x1ee'}
----------------------------------
function decimals()()
Block 0x1e6
0x1e7: v1e7 = CALLVALUE 
0x1e9: v1e9 = ISZERO v1e7
0x1ea: v1ea(0x1f2) = CONST 
0x1ed: JUMPI v1ea(0x1f2) v1e9
----------------------------------

Begin block 0x1ee
prev = {'0x1e6'}, next = {}
----------------------------------
Block 0x1ee
0x1ee: v1ee(0x0) = CONST 
0x1f1: REVERT v1ee(0x0) v1ee(0x0)
----------------------------------

Begin block 0x1f2
prev = {'0x1e6'}, next = {'0x429'}
----------------------------------
Block 0x1f2
0x1f4: v1f4(0x1fb) = CONST 
0x1f7: v1f7(0x429) = CONST 
0x1fa: JUMP v1f7(0x429)
----------------------------------

Begin block 0x1fb
prev = {'0x429'}, next = {}
----------------------------------
Block 0x1fb
0x1fc: v1fc(0x40) = CONST 
0x1ff: v1ff = MLOAD v1fc(0x40)
0x200: v200(0xff) = CONST 
0x204: v204 = AND v42a(0x8) v200(0xff)
0x206: MSTORE v1ff v204
0x207: v207 = MLOAD v1fc(0x40)
0x20b: v20b = SUB v1ff v207
0x20c: v20c(0x20) = CONST 
0x20e: v20e = ADD v20c(0x20) v20b
0x210: RETURN v207 v20e
----------------------------------

Begin block 0x211
prev = {}, next = {'0x21d', '0x219'}
----------------------------------
function increaseAllowance(address,uint256)()
Block 0x211
0x212: v212 = CALLVALUE 
0x214: v214 = ISZERO v212
0x215: v215(0x21d) = CONST 
0x218: JUMPI v215(0x21d) v214
----------------------------------

Begin block 0x219
prev = {'0x211'}, next = {}
----------------------------------
Block 0x219
0x219: v219(0x0) = CONST 
0x21c: REVERT v219(0x0) v219(0x0)
----------------------------------

Begin block 0x21d
prev = {'0x211'}, next = {'0x16c0x211'}
----------------------------------
Block 0x21d
0x21f: v21f(0x16c) = CONST 
0x222: v222(0x1) = CONST 
0x224: v224(0xa0) = CONST 
0x226: v226(0x2) = CONST 
0x228: v228(0x10000000000000000000000000000000000000000) = EXP v226(0x2) v224(0xa0)
0x229: v229(0xffffffffffffffffffffffffffffffffffffffff) = SUB v228(0x10000000000000000000000000000000000000000) v222(0x1)
0x22a: v22a(0x4) = CONST 
0x22c: v22c = CALLDATALOAD v22a(0x4)
0x22d: v22d = AND v22c v229(0xffffffffffffffffffffffffffffffffffffffff)
0x22e: v22e(0x24) = CONST 
0x230: v230 = CALLDATALOAD v22e(0x24)
0x231: v231(0x42e) = CONST 
0x234: v234_0 = CALLPRIVATE v231(0x42e) v230 v22d v21f(0x16c)
----------------------------------

Begin block 0x235
prev = {}, next = {'0x23d', '0x241'}
----------------------------------
function balanceOf(address)()
Block 0x235
0x236: v236 = CALLVALUE 
0x238: v238 = ISZERO v236
0x239: v239(0x241) = CONST 
0x23c: JUMPI v239(0x241) v238
----------------------------------

Begin block 0x23d
prev = {'0x235'}, next = {}
----------------------------------
Block 0x23d
0x23d: v23d(0x0) = CONST 
0x240: REVERT v23d(0x0) v23d(0x0)
----------------------------------

Begin block 0x241
prev = {'0x235'}, next = {'0x4de'}
----------------------------------
Block 0x241
0x243: v243(0x195) = CONST 
0x246: v246(0x1) = CONST 
0x248: v248(0xa0) = CONST 
0x24a: v24a(0x2) = CONST 
0x24c: v24c(0x10000000000000000000000000000000000000000) = EXP v24a(0x2) v248(0xa0)
0x24d: v24d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v24c(0x10000000000000000000000000000000000000000) v246(0x1)
0x24e: v24e(0x4) = CONST 
0x250: v250 = CALLDATALOAD v24e(0x4)
0x251: v251 = AND v250 v24d(0xffffffffffffffffffffffffffffffffffffffff)
0x252: v252(0x4de) = CONST 
0x255: JUMP v252(0x4de)
----------------------------------

Begin block 0x256
prev = {}, next = {'0x262', '0x25e'}
----------------------------------
function decreaseAllowance(address,uint256)()
Block 0x256
0x257: v257 = CALLVALUE 
0x259: v259 = ISZERO v257
0x25a: v25a(0x262) = CONST 
0x25d: JUMPI v25a(0x262) v259
----------------------------------

Begin block 0x25e
prev = {'0x256'}, next = {}
----------------------------------
Block 0x25e
0x25e: v25e(0x0) = CONST 
0x261: REVERT v25e(0x0) v25e(0x0)
----------------------------------

Begin block 0x262
prev = {'0x256'}, next = {'0x16c0x256'}
----------------------------------
Block 0x262
0x264: v264(0x16c) = CONST 
0x267: v267(0x1) = CONST 
0x269: v269(0xa0) = CONST 
0x26b: v26b(0x2) = CONST 
0x26d: v26d(0x10000000000000000000000000000000000000000) = EXP v26b(0x2) v269(0xa0)
0x26e: v26e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26d(0x10000000000000000000000000000000000000000) v267(0x1)
0x26f: v26f(0x4) = CONST 
0x271: v271 = CALLDATALOAD v26f(0x4)
0x272: v272 = AND v271 v26e(0xffffffffffffffffffffffffffffffffffffffff)
0x273: v273(0x24) = CONST 
0x275: v275 = CALLDATALOAD v273(0x24)
0x276: v276(0x4f9) = CONST 
0x279: v279_0 = CALLPRIVATE v276(0x4f9) v275 v272 v264(0x16c)
----------------------------------

Begin block 0x27a
prev = {}, next = {'0x286', '0x282'}
----------------------------------
function transfer(address,uint256)()
Block 0x27a
0x27b: v27b = CALLVALUE 
0x27d: v27d = ISZERO v27b
0x27e: v27e(0x286) = CONST 
0x281: JUMPI v27e(0x286) v27d
----------------------------------

Begin block 0x282
prev = {'0x27a'}, next = {}
----------------------------------
Block 0x282
0x282: v282(0x0) = CONST 
0x285: REVERT v282(0x0) v282(0x0)
----------------------------------

Begin block 0x286
prev = {'0x27a'}, next = {'0x544'}
----------------------------------
Block 0x286
0x288: v288(0x16c) = CONST 
0x28b: v28b(0x1) = CONST 
0x28d: v28d(0xa0) = CONST 
0x28f: v28f(0x2) = CONST 
0x291: v291(0x10000000000000000000000000000000000000000) = EXP v28f(0x2) v28d(0xa0)
0x292: v292(0xffffffffffffffffffffffffffffffffffffffff) = SUB v291(0x10000000000000000000000000000000000000000) v28b(0x1)
0x293: v293(0x4) = CONST 
0x295: v295 = CALLDATALOAD v293(0x4)
0x296: v296 = AND v295 v292(0xffffffffffffffffffffffffffffffffffffffff)
0x297: v297(0x24) = CONST 
0x299: v299 = CALLDATALOAD v297(0x24)
0x29a: v29a(0x544) = CONST 
0x29d: JUMP v29a(0x544)
----------------------------------

Begin block 0x29e
prev = {}, next = {'0x2aa', '0x2a6'}
----------------------------------
function allowance(address,address)()
Block 0x29e
0x29f: v29f = CALLVALUE 
0x2a1: v2a1 = ISZERO v29f
0x2a2: v2a2(0x2aa) = CONST 
0x2a5: JUMPI v2a2(0x2aa) v2a1
----------------------------------

Begin block 0x2a6
prev = {'0x29e'}, next = {}
----------------------------------
Block 0x2a6
0x2a6: v2a6(0x0) = CONST 
0x2a9: REVERT v2a6(0x0) v2a6(0x0)
----------------------------------

Begin block 0x2aa
prev = {'0x29e'}, next = {'0x55a'}
----------------------------------
Block 0x2aa
0x2ac: v2ac(0x195) = CONST 
0x2af: v2af(0x1) = CONST 
0x2b1: v2b1(0xa0) = CONST 
0x2b3: v2b3(0x2) = CONST 
0x2b5: v2b5(0x10000000000000000000000000000000000000000) = EXP v2b3(0x2) v2b1(0xa0)
0x2b6: v2b6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2b5(0x10000000000000000000000000000000000000000) v2af(0x1)
0x2b7: v2b7(0x4) = CONST 
0x2b9: v2b9 = CALLDATALOAD v2b7(0x4)
0x2bb: v2bb = AND v2b6(0xffffffffffffffffffffffffffffffffffffffff) v2b9
0x2bd: v2bd(0x24) = CONST 
0x2bf: v2bf = CALLDATALOAD v2bd(0x24)
0x2c0: v2c0 = AND v2bf v2b6(0xffffffffffffffffffffffffffffffffffffffff)
0x2c1: v2c1(0x55a) = CONST 
0x2c4: JUMP v2c1(0x55a)
----------------------------------

Begin block 0x2c5
prev = {'0xca'}, next = {'0xd3'}
----------------------------------
Block 0x2c5
0x2c6: v2c6(0x40) = CONST 
0x2c9: v2c9 = MLOAD v2c6(0x40)
0x2cc: v2cc = ADD v2c6(0x40) v2c9
0x2cf: MSTORE v2c6(0x40) v2cc
0x2d0: v2d0(0x3) = CONST 
0x2d3: MSTORE v2c9 v2d0(0x3)
0x2d4: v2d4(0x5443500000000000000000000000000000000000000000000000000000000000) = CONST 
0x2f5: v2f5(0x20) = CONST 
0x2f8: v2f8 = ADD v2c9 v2f5(0x20)
0x2f9: MSTORE v2f8 v2d4(0x5443500000000000000000000000000000000000000000000000000000000000)
0x2fb: JUMP vcc(0xd3)
----------------------------------

Begin block 0x2fc
prev = {'0x154'}, next = {'0x313', '0x30f'}
----------------------------------
Block 0x2fc
0x2fd: v2fd(0x0) = CONST 
0x2ff: v2ff(0x1) = CONST 
0x301: v301(0xa0) = CONST 
0x303: v303(0x2) = CONST 
0x305: v305(0x10000000000000000000000000000000000000000) = EXP v303(0x2) v301(0xa0)
0x306: v306(0xffffffffffffffffffffffffffffffffffffffff) = SUB v305(0x10000000000000000000000000000000000000000) v2ff(0x1)
0x308: v308 = AND v164 v306(0xffffffffffffffffffffffffffffffffffffffff)
0x309: v309 = ISZERO v308
0x30a: v30a = ISZERO v309
0x30b: v30b(0x313) = CONST 
0x30e: JUMPI v30b(0x313) v30a
----------------------------------

Begin block 0x30f
prev = {'0x2fc'}, next = {}
----------------------------------
Block 0x30f
0x30f: v30f(0x0) = CONST 
0x312: REVERT v30f(0x0) v30f(0x0)
----------------------------------

Begin block 0x313
prev = {'0x2fc'}, next = {'0x16c0x148'}
----------------------------------
Block 0x313
0x314: v314 = CALLER 
0x315: v315(0x0) = CONST 
0x319: MSTORE v315(0x0) v314
0x31a: v31a(0x1) = CONST 
0x31c: v31c(0x20) = CONST 
0x320: MSTORE v31c(0x20) v31a(0x1)
0x321: v321(0x40) = CONST 
0x325: v325 = SHA3 v315(0x0) v321(0x40)
0x326: v326(0x1) = CONST 
0x328: v328(0xa0) = CONST 
0x32a: v32a(0x2) = CONST 
0x32c: v32c(0x10000000000000000000000000000000000000000) = EXP v32a(0x2) v328(0xa0)
0x32d: v32d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v32c(0x10000000000000000000000000000000000000000) v326(0x1)
0x32f: v32f = AND v164 v32d(0xffffffffffffffffffffffffffffffffffffffff)
0x332: MSTORE v315(0x0) v32f
0x335: MSTORE v31c(0x20) v325
0x339: v339 = SHA3 v315(0x0) v321(0x40)
0x33c: SSTORE v339 v167
0x33e: v33e = MLOAD v321(0x40)
0x341: MSTORE v33e v167
0x343: v343 = MLOAD v321(0x40)
0x347: v347(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x36c: v36c = SUB v33e v343
0x36f: v36f = ADD v31c(0x20) v36c
0x371: LOG3 v343 v36f v347(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v314 v32f
0x373: v373(0x1) = CONST 
0x379: JUMP v156(0x16c)
----------------------------------

Begin block 0x37a
prev = {'0x18c'}, next = {'0x1950x180'}
----------------------------------
Block 0x37a
0x37b: v37b(0x2) = CONST 
0x37d: v37d = SLOAD v37b(0x2)
0x37f: JUMP v18e(0x195)
----------------------------------

Begin block 0x380
prev = {'0x1b3'}, next = {'0x3ac', '0x3b0'}
----------------------------------
Block 0x380
0x381: v381(0x1) = CONST 
0x383: v383(0xa0) = CONST 
0x385: v385(0x2) = CONST 
0x387: v387(0x10000000000000000000000000000000000000000) = EXP v385(0x2) v383(0xa0)
0x388: v388(0xffffffffffffffffffffffffffffffffffffffff) = SUB v387(0x10000000000000000000000000000000000000000) v381(0x1)
0x38a: v38a = AND v1c4 v388(0xffffffffffffffffffffffffffffffffffffffff)
0x38b: v38b(0x0) = CONST 
0x38f: MSTORE v38b(0x0) v38a
0x390: v390(0x1) = CONST 
0x392: v392(0x20) = CONST 
0x396: MSTORE v392(0x20) v390(0x1)
0x397: v397(0x40) = CONST 
0x39b: v39b = SHA3 v38b(0x0) v397(0x40)
0x39c: v39c = CALLER 
0x39e: MSTORE v38b(0x0) v39c
0x3a1: MSTORE v392(0x20) v39b
0x3a3: v3a3 = SHA3 v38b(0x0) v397(0x40)
0x3a4: v3a4 = SLOAD v3a3
0x3a6: v3a6 = GT v1cc v3a4
0x3a7: v3a7 = ISZERO v3a6
0x3a8: v3a8(0x3b0) = CONST 
0x3ab: JUMPI v3a8(0x3b0) v3a7
----------------------------------

Begin block 0x3ac
prev = {'0x380'}, next = {}
----------------------------------
Block 0x3ac
0x3ac: v3ac(0x0) = CONST 
0x3af: REVERT v3ac(0x0) v3ac(0x0)
----------------------------------

Begin block 0x3b0
prev = {'0x380'}, next = {'0x3e4'}
----------------------------------
Block 0x3b0
0x3b1: v3b1(0x1) = CONST 
0x3b3: v3b3(0xa0) = CONST 
0x3b5: v3b5(0x2) = CONST 
0x3b7: v3b7(0x10000000000000000000000000000000000000000) = EXP v3b5(0x2) v3b3(0xa0)
0x3b8: v3b8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b7(0x10000000000000000000000000000000000000000) v3b1(0x1)
0x3ba: v3ba = AND v1c4 v3b8(0xffffffffffffffffffffffffffffffffffffffff)
0x3bb: v3bb(0x0) = CONST 
0x3bf: MSTORE v3bb(0x0) v3ba
0x3c0: v3c0(0x1) = CONST 
0x3c2: v3c2(0x20) = CONST 
0x3c6: MSTORE v3c2(0x20) v3c0(0x1)
0x3c7: v3c7(0x40) = CONST 
0x3cb: v3cb = SHA3 v3bb(0x0) v3c7(0x40)
0x3cc: v3cc = CALLER 
0x3ce: MSTORE v3bb(0x0) v3cc
0x3d1: MSTORE v3c2(0x20) v3cb
0x3d3: v3d3 = SHA3 v3bb(0x0) v3c7(0x40)
0x3d4: v3d4 = SLOAD v3d3
0x3d5: v3d5(0x3e4) = CONST 
0x3da: v3da(0xffffffff) = CONST 
0x3df: v3df(0x585) = CONST 
0x3e2: v3e2(0x585) = AND v3df(0x585) v3da(0xffffffff)
0x3e3: v3e3_0 = CALLPRIVATE v3e2(0x585) v1cc v3d4 v3d5(0x3e4)
----------------------------------

Begin block 0x3e4
prev = {'0x3b0'}, next = {'0x413'}
----------------------------------
Block 0x3e4
0x3e5: v3e5(0x1) = CONST 
0x3e7: v3e7(0xa0) = CONST 
0x3e9: v3e9(0x2) = CONST 
0x3eb: v3eb(0x10000000000000000000000000000000000000000) = EXP v3e9(0x2) v3e7(0xa0)
0x3ec: v3ec(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3eb(0x10000000000000000000000000000000000000000) v3e5(0x1)
0x3ee: v3ee = AND v1c4 v3ec(0xffffffffffffffffffffffffffffffffffffffff)
0x3ef: v3ef(0x0) = CONST 
0x3f3: MSTORE v3ef(0x0) v3ee
0x3f4: v3f4(0x1) = CONST 
0x3f6: v3f6(0x20) = CONST 
0x3fa: MSTORE v3f6(0x20) v3f4(0x1)
0x3fb: v3fb(0x40) = CONST 
0x3ff: v3ff = SHA3 v3ef(0x0) v3fb(0x40)
0x400: v400 = CALLER 
0x402: MSTORE v3ef(0x0) v400
0x405: MSTORE v3f6(0x20) v3ff
0x407: v407 = SHA3 v3ef(0x0) v3fb(0x40)
0x408: SSTORE v407 v3e3_0
0x409: v409(0x413) = CONST 
0x40f: v40f(0x59c) = CONST 
0x412: CALLPRIVATE v40f(0x59c) v1cc v1c9 v1c4 v409(0x413)
----------------------------------

Begin block 0x413
prev = {'0x3e4'}, next = {'0x16c0x1a7'}
----------------------------------
Block 0x413
0x415: v415(0x1) = CONST 
0x41c: JUMP v1b5(0x16c)
----------------------------------

Begin block 0x41d
prev = {'0x1dd'}, next = {'0x1950x1d1'}
----------------------------------
Block 0x41d
0x41e: v41e(0x16345785d8a0000) = CONST 
0x428: JUMP v1df(0x195)
----------------------------------

Begin block 0x429
prev = {'0x1f2'}, next = {'0x1fb'}
----------------------------------
Block 0x429
0x42a: v42a(0x8) = CONST 
0x42d: JUMP v1f4(0x1fb)
----------------------------------

Begin block 0x42e
prev = {}, next = {'0x445', '0x441'}
----------------------------------
function 0x42e(v42earg0, v42earg1, v42earg2)
Block 0x42e
0x42f: v42f(0x0) = CONST 
0x431: v431(0x1) = CONST 
0x433: v433(0xa0) = CONST 
0x435: v435(0x2) = CONST 
0x437: v437(0x10000000000000000000000000000000000000000) = EXP v435(0x2) v433(0xa0)
0x438: v438(0xffffffffffffffffffffffffffffffffffffffff) = SUB v437(0x10000000000000000000000000000000000000000) v431(0x1)
0x43a: v43a = AND v42earg1 v438(0xffffffffffffffffffffffffffffffffffffffff)
0x43b: v43b = ISZERO v43a
0x43c: v43c = ISZERO v43b
0x43d: v43d(0x445) = CONST 
0x440: JUMPI v43d(0x445) v43c
----------------------------------

Begin block 0x441
prev = {'0x42e'}, next = {}
----------------------------------
Block 0x441
0x441: v441(0x0) = CONST 
0x444: REVERT v441(0x0) v441(0x0)
----------------------------------

Begin block 0x445
prev = {'0x42e'}, next = {'0x4790x42e'}
----------------------------------
Block 0x445
0x446: v446 = CALLER 
0x447: v447(0x0) = CONST 
0x44b: MSTORE v447(0x0) v446
0x44c: v44c(0x1) = CONST 
0x44e: v44e(0x20) = CONST 
0x452: MSTORE v44e(0x20) v44c(0x1)
0x453: v453(0x40) = CONST 
0x457: v457 = SHA3 v447(0x0) v453(0x40)
0x458: v458(0x1) = CONST 
0x45a: v45a(0xa0) = CONST 
0x45c: v45c(0x2) = CONST 
0x45e: v45e(0x10000000000000000000000000000000000000000) = EXP v45c(0x2) v45a(0xa0)
0x45f: v45f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v45e(0x10000000000000000000000000000000000000000) v458(0x1)
0x461: v461 = AND v42earg1 v45f(0xffffffffffffffffffffffffffffffffffffffff)
0x463: MSTORE v447(0x0) v461
0x466: MSTORE v44e(0x20) v457
0x468: v468 = SHA3 v447(0x0) v453(0x40)
0x469: v469 = SLOAD v468
0x46a: v46a(0x479) = CONST 
0x46f: v46f(0xffffffff) = CONST 
0x474: v474(0x68e) = CONST 
0x477: v477(0x68e) = AND v474(0x68e) v46f(0xffffffff)
0x478: v478_0 = CALLPRIVATE v477(0x68e) v42earg0 v469 v46a(0x479)
----------------------------------

Begin block 0x4790x42e
prev = {'0x445'}, next = {}
----------------------------------
Block 0x4790x42e
0x47a0x42e: v42e47a = CALLER 
0x47b0x42e: v42e47b(0x0) = CONST 
0x47f0x42e: MSTORE v42e47b(0x0) v42e47a
0x4800x42e: v42e480(0x1) = CONST 
0x4820x42e: v42e482(0x20) = CONST 
0x4860x42e: MSTORE v42e482(0x20) v42e480(0x1)
0x4870x42e: v42e487(0x40) = CONST 
0x48b0x42e: v42e48b = SHA3 v42e47b(0x0) v42e487(0x40)
0x48c0x42e: v42e48c(0x1) = CONST 
0x48e0x42e: v42e48e(0xa0) = CONST 
0x4900x42e: v42e490(0x2) = CONST 
0x4920x42e: v42e492(0x10000000000000000000000000000000000000000) = EXP v42e490(0x2) v42e48e(0xa0)
0x4930x42e: v42e493(0xffffffffffffffffffffffffffffffffffffffff) = SUB v42e492(0x10000000000000000000000000000000000000000) v42e48c(0x1)
0x4950x42e: v42e495 = AND v42earg1 v42e493(0xffffffffffffffffffffffffffffffffffffffff)
0x4980x42e: MSTORE v42e47b(0x0) v42e495
0x49b0x42e: MSTORE v42e482(0x20) v42e48b
0x49f0x42e: v42e49f = SHA3 v42e47b(0x0) v42e487(0x40)
0x4a20x42e: SSTORE v42e49f v478_0
0x4a40x42e: v42e4a4 = MLOAD v42e487(0x40)
0x4a70x42e: MSTORE v42e4a4 v478_0
0x4a80x42e: v42e4a8 = MLOAD v42e487(0x40)
0x4ab0x42e: v42e4ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x4d00x42e: v42e4d0 = SUB v42e4a4 v42e4a8
0x4d30x42e: v42e4d3 = ADD v42e482(0x20) v42e4d0
0x4d50x42e: LOG3 v42e4a8 v42e4d3 v42e4ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v42e47a v42e495
0x4d70x42e: v42e4d7(0x1) = CONST 
0x4dd0x42e: RETURNPRIVATE v42earg2 v42e4d7(0x1)
----------------------------------

Begin block 0x4790x4f9
prev = {'0x510'}, next = {}
----------------------------------
Block 0x4790x4f9
0x47a0x4f9: v4f947a = CALLER 
0x47b0x4f9: v4f947b(0x0) = CONST 
0x47f0x4f9: MSTORE v4f947b(0x0) v4f947a
0x4800x4f9: v4f9480(0x1) = CONST 
0x4820x4f9: v4f9482(0x20) = CONST 
0x4860x4f9: MSTORE v4f9482(0x20) v4f9480(0x1)
0x4870x4f9: v4f9487(0x40) = CONST 
0x48b0x4f9: v4f948b = SHA3 v4f947b(0x0) v4f9487(0x40)
0x48c0x4f9: v4f948c(0x1) = CONST 
0x48e0x4f9: v4f948e(0xa0) = CONST 
0x4900x4f9: v4f9490(0x2) = CONST 
0x4920x4f9: v4f9492(0x10000000000000000000000000000000000000000) = EXP v4f9490(0x2) v4f948e(0xa0)
0x4930x4f9: v4f9493(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4f9492(0x10000000000000000000000000000000000000000) v4f948c(0x1)
0x4950x4f9: v4f9495 = AND v4f9arg1 v4f9493(0xffffffffffffffffffffffffffffffffffffffff)
0x4980x4f9: MSTORE v4f947b(0x0) v4f9495
0x49b0x4f9: MSTORE v4f9482(0x20) v4f948b
0x49f0x4f9: v4f949f = SHA3 v4f947b(0x0) v4f9487(0x40)
0x4a20x4f9: SSTORE v4f949f v543_0
0x4a40x4f9: v4f94a4 = MLOAD v4f9487(0x40)
0x4a70x4f9: MSTORE v4f94a4 v543_0
0x4a80x4f9: v4f94a8 = MLOAD v4f9487(0x40)
0x4ab0x4f9: v4f94ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x4d00x4f9: v4f94d0 = SUB v4f94a4 v4f94a8
0x4d30x4f9: v4f94d3 = ADD v4f9482(0x20) v4f94d0
0x4d50x4f9: LOG3 v4f94a8 v4f94d3 v4f94ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v4f947a v4f9495
0x4d70x4f9: v4f94d7(0x1) = CONST 
0x4dd0x4f9: RETURNPRIVATE v4f9arg2 v4f94d7(0x1)
----------------------------------

Begin block 0x4de
prev = {'0x241'}, next = {'0x1950x235'}
----------------------------------
Block 0x4de
0x4df: v4df(0x1) = CONST 
0x4e1: v4e1(0xa0) = CONST 
0x4e3: v4e3(0x2) = CONST 
0x4e5: v4e5(0x10000000000000000000000000000000000000000) = EXP v4e3(0x2) v4e1(0xa0)
0x4e6: v4e6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4e5(0x10000000000000000000000000000000000000000) v4df(0x1)
0x4e7: v4e7 = AND v4e6(0xffffffffffffffffffffffffffffffffffffffff) v251
0x4e8: v4e8(0x0) = CONST 
0x4ec: MSTORE v4e8(0x0) v4e7
0x4ed: v4ed(0x20) = CONST 
0x4f1: MSTORE v4ed(0x20) v4e8(0x0)
0x4f2: v4f2(0x40) = CONST 
0x4f5: v4f5 = SHA3 v4e8(0x0) v4f2(0x40)
0x4f6: v4f6 = SLOAD v4f5
0x4f8: JUMP v243(0x195)
----------------------------------

Begin block 0x4f9
prev = {}, next = {'0x50c', '0x510'}
----------------------------------
function 0x4f9(v4f9arg0, v4f9arg1, v4f9arg2)
Block 0x4f9
0x4fa: v4fa(0x0) = CONST 
0x4fc: v4fc(0x1) = CONST 
0x4fe: v4fe(0xa0) = CONST 
0x500: v500(0x2) = CONST 
0x502: v502(0x10000000000000000000000000000000000000000) = EXP v500(0x2) v4fe(0xa0)
0x503: v503(0xffffffffffffffffffffffffffffffffffffffff) = SUB v502(0x10000000000000000000000000000000000000000) v4fc(0x1)
0x505: v505 = AND v4f9arg1 v503(0xffffffffffffffffffffffffffffffffffffffff)
0x506: v506 = ISZERO v505
0x507: v507 = ISZERO v506
0x508: v508(0x510) = CONST 
0x50b: JUMPI v508(0x510) v507
----------------------------------

Begin block 0x50c
prev = {'0x4f9'}, next = {}
----------------------------------
Block 0x50c
0x50c: v50c(0x0) = CONST 
0x50f: REVERT v50c(0x0) v50c(0x0)
----------------------------------

Begin block 0x510
prev = {'0x4f9'}, next = {'0x4790x4f9'}
----------------------------------
Block 0x510
0x511: v511 = CALLER 
0x512: v512(0x0) = CONST 
0x516: MSTORE v512(0x0) v511
0x517: v517(0x1) = CONST 
0x519: v519(0x20) = CONST 
0x51d: MSTORE v519(0x20) v517(0x1)
0x51e: v51e(0x40) = CONST 
0x522: v522 = SHA3 v512(0x0) v51e(0x40)
0x523: v523(0x1) = CONST 
0x525: v525(0xa0) = CONST 
0x527: v527(0x2) = CONST 
0x529: v529(0x10000000000000000000000000000000000000000) = EXP v527(0x2) v525(0xa0)
0x52a: v52a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v529(0x10000000000000000000000000000000000000000) v523(0x1)
0x52c: v52c = AND v4f9arg1 v52a(0xffffffffffffffffffffffffffffffffffffffff)
0x52e: MSTORE v512(0x0) v52c
0x531: MSTORE v519(0x20) v522
0x533: v533 = SHA3 v512(0x0) v51e(0x40)
0x534: v534 = SLOAD v533
0x535: v535(0x479) = CONST 
0x53a: v53a(0xffffffff) = CONST 
0x53f: v53f(0x585) = CONST 
0x542: v542(0x585) = AND v53f(0x585) v53a(0xffffffff)
0x543: v543_0 = CALLPRIVATE v542(0x585) v4f9arg0 v534 v535(0x479)
----------------------------------

Begin block 0x544
prev = {'0x286'}, next = {'0x551'}
----------------------------------
Block 0x544
0x545: v545(0x0) = CONST 
0x547: v547(0x551) = CONST 
0x54a: v54a = CALLER 
0x54d: v54d(0x59c) = CONST 
0x550: CALLPRIVATE v54d(0x59c) v299 v296 v54a v547(0x551)
----------------------------------

Begin block 0x551
prev = {'0x544'}, next = {'0x16c0x27a'}
----------------------------------
Block 0x551
0x553: v553(0x1) = CONST 
0x559: JUMP v288(0x16c)
----------------------------------

Begin block 0x55a
prev = {'0x2aa'}, next = {'0x1950x29e'}
----------------------------------
Block 0x55a
0x55b: v55b(0x1) = CONST 
0x55d: v55d(0xa0) = CONST 
0x55f: v55f(0x2) = CONST 
0x561: v561(0x10000000000000000000000000000000000000000) = EXP v55f(0x2) v55d(0xa0)
0x562: v562(0xffffffffffffffffffffffffffffffffffffffff) = SUB v561(0x10000000000000000000000000000000000000000) v55b(0x1)
0x565: v565 = AND v562(0xffffffffffffffffffffffffffffffffffffffff) v2bb
0x566: v566(0x0) = CONST 
0x56a: MSTORE v566(0x0) v565
0x56b: v56b(0x1) = CONST 
0x56d: v56d(0x20) = CONST 
0x571: MSTORE v56d(0x20) v56b(0x1)
0x572: v572(0x40) = CONST 
0x576: v576 = SHA3 v566(0x0) v572(0x40)
0x57a: v57a = AND v562(0xffffffffffffffffffffffffffffffffffffffff) v2c0
0x57c: MSTORE v566(0x0) v57a
0x580: MSTORE v56d(0x20) v576
0x581: v581 = SHA3 v566(0x0) v572(0x40)
0x582: v582 = SLOAD v581
0x584: JUMP v2ac(0x195)
----------------------------------

Begin block 0x585
prev = {}, next = {'0x591', '0x595'}
----------------------------------
function 0x585(v585arg0, v585arg1, v585arg2)
Block 0x585
0x586: v586(0x0) = CONST 
0x58b: v58b = GT v585arg0 v585arg1
0x58c: v58c = ISZERO v58b
0x58d: v58d(0x595) = CONST 
0x590: JUMPI v58d(0x595) v58c
----------------------------------

Begin block 0x591
prev = {'0x585'}, next = {}
----------------------------------
Block 0x591
0x591: v591(0x0) = CONST 
0x594: REVERT v591(0x0) v591(0x0)
----------------------------------

Begin block 0x595
prev = {'0x585'}, next = {}
----------------------------------
Block 0x595
0x599: v599 = SUB v585arg1 v585arg0
0x59b: RETURNPRIVATE v585arg2 v599
----------------------------------

Begin block 0x59c
prev = {}, next = {'0x5c1', '0x5bd'}
----------------------------------
function 0x59c(v59carg0, v59carg1, v59carg2, v59carg3)
Block 0x59c
0x59d: v59d(0x1) = CONST 
0x59f: v59f(0xa0) = CONST 
0x5a1: v5a1(0x2) = CONST 
0x5a3: v5a3(0x10000000000000000000000000000000000000000) = EXP v5a1(0x2) v59f(0xa0)
0x5a4: v5a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5a3(0x10000000000000000000000000000000000000000) v59d(0x1)
0x5a6: v5a6 = AND v59carg2 v5a4(0xffffffffffffffffffffffffffffffffffffffff)
0x5a7: v5a7(0x0) = CONST 
0x5ab: MSTORE v5a7(0x0) v5a6
0x5ac: v5ac(0x20) = CONST 
0x5b0: MSTORE v5ac(0x20) v5a7(0x0)
0x5b1: v5b1(0x40) = CONST 
0x5b4: v5b4 = SHA3 v5a7(0x0) v5b1(0x40)
0x5b5: v5b5 = SLOAD v5b4
0x5b7: v5b7 = GT v59carg0 v5b5
0x5b8: v5b8 = ISZERO v5b7
0x5b9: v5b9(0x5c1) = CONST 
0x5bc: JUMPI v5b9(0x5c1) v5b8
----------------------------------

Begin block 0x5bd
prev = {'0x59c'}, next = {}
----------------------------------
Block 0x5bd
0x5bd: v5bd(0x0) = CONST 
0x5c0: REVERT v5bd(0x0) v5bd(0x0)
----------------------------------

Begin block 0x5c1
prev = {'0x59c'}, next = {'0x5d6', '0x5d2'}
----------------------------------
Block 0x5c1
0x5c2: v5c2(0x1) = CONST 
0x5c4: v5c4(0xa0) = CONST 
0x5c6: v5c6(0x2) = CONST 
0x5c8: v5c8(0x10000000000000000000000000000000000000000) = EXP v5c6(0x2) v5c4(0xa0)
0x5c9: v5c9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5c8(0x10000000000000000000000000000000000000000) v5c2(0x1)
0x5cb: v5cb = AND v59carg1 v5c9(0xffffffffffffffffffffffffffffffffffffffff)
0x5cc: v5cc = ISZERO v5cb
0x5cd: v5cd = ISZERO v5cc
0x5ce: v5ce(0x5d6) = CONST 
0x5d1: JUMPI v5ce(0x5d6) v5cd
----------------------------------

Begin block 0x5d2
prev = {'0x5c1'}, next = {}
----------------------------------
Block 0x5d2
0x5d2: v5d2(0x0) = CONST 
0x5d5: REVERT v5d2(0x0) v5d2(0x0)
----------------------------------

Begin block 0x5d6
prev = {'0x5c1'}, next = {'0x5ff'}
----------------------------------
Block 0x5d6
0x5d7: v5d7(0x1) = CONST 
0x5d9: v5d9(0xa0) = CONST 
0x5db: v5db(0x2) = CONST 
0x5dd: v5dd(0x10000000000000000000000000000000000000000) = EXP v5db(0x2) v5d9(0xa0)
0x5de: v5de(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5dd(0x10000000000000000000000000000000000000000) v5d7(0x1)
0x5e0: v5e0 = AND v59carg2 v5de(0xffffffffffffffffffffffffffffffffffffffff)
0x5e1: v5e1(0x0) = CONST 
0x5e5: MSTORE v5e1(0x0) v5e0
0x5e6: v5e6(0x20) = CONST 
0x5ea: MSTORE v5e6(0x20) v5e1(0x0)
0x5eb: v5eb(0x40) = CONST 
0x5ee: v5ee = SHA3 v5e1(0x0) v5eb(0x40)
0x5ef: v5ef = SLOAD v5ee
0x5f0: v5f0(0x5ff) = CONST 
0x5f5: v5f5(0xffffffff) = CONST 
0x5fa: v5fa(0x585) = CONST 
0x5fd: v5fd(0x585) = AND v5fa(0x585) v5f5(0xffffffff)
0x5fe: v5fe_0 = CALLPRIVATE v5fd(0x585) v59carg0 v5ef v5f0(0x5ff)
----------------------------------

Begin block 0x5ff
prev = {'0x5d6'}, next = {'0x634'}
----------------------------------
Block 0x5ff
0x600: v600(0x1) = CONST 
0x602: v602(0xa0) = CONST 
0x604: v604(0x2) = CONST 
0x606: v606(0x10000000000000000000000000000000000000000) = EXP v604(0x2) v602(0xa0)
0x607: v607(0xffffffffffffffffffffffffffffffffffffffff) = SUB v606(0x10000000000000000000000000000000000000000) v600(0x1)
0x60a: v60a = AND v59carg2 v607(0xffffffffffffffffffffffffffffffffffffffff)
0x60b: v60b(0x0) = CONST 
0x60f: MSTORE v60b(0x0) v60a
0x610: v610(0x20) = CONST 
0x614: MSTORE v610(0x20) v60b(0x0)
0x615: v615(0x40) = CONST 
0x619: v619 = SHA3 v60b(0x0) v615(0x40)
0x61d: SSTORE v619 v5fe_0
0x620: v620 = AND v59carg1 v607(0xffffffffffffffffffffffffffffffffffffffff)
0x622: MSTORE v60b(0x0) v620
0x623: v623 = SHA3 v60b(0x0) v615(0x40)
0x624: v624 = SLOAD v623
0x625: v625(0x634) = CONST 
0x62a: v62a(0xffffffff) = CONST 
0x62f: v62f(0x68e) = CONST 
0x632: v632(0x68e) = AND v62f(0x68e) v62a(0xffffffff)
0x633: v633_0 = CALLPRIVATE v632(0x68e) v59carg0 v624 v625(0x634)
----------------------------------

Begin block 0x634
prev = {'0x5ff'}, next = {}
----------------------------------
Block 0x634
0x635: v635(0x1) = CONST 
0x637: v637(0xa0) = CONST 
0x639: v639(0x2) = CONST 
0x63b: v63b(0x10000000000000000000000000000000000000000) = EXP v639(0x2) v637(0xa0)
0x63c: v63c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v63b(0x10000000000000000000000000000000000000000) v635(0x1)
0x63f: v63f = AND v59carg1 v63c(0xffffffffffffffffffffffffffffffffffffffff)
0x640: v640(0x0) = CONST 
0x644: MSTORE v640(0x0) v63f
0x645: v645(0x20) = CONST 
0x649: MSTORE v645(0x20) v640(0x0)
0x64a: v64a(0x40) = CONST 
0x64f: v64f = SHA3 v640(0x0) v64a(0x40)
0x653: SSTORE v64f v633_0
0x655: v655 = MLOAD v64a(0x40)
0x658: MSTORE v655 v59carg0
0x65a: v65a = MLOAD v64a(0x40)
0x65f: v65f = AND v59carg2 v63c(0xffffffffffffffffffffffffffffffffffffffff)
0x661: v661(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x686: v686 = SUB v655 v65a
0x687: v687 = ADD v686 v645(0x20)
0x689: LOG3 v65a v687 v661(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v65f v63f
0x68d: RETURNPRIVATE v59carg3
----------------------------------

Begin block 0x68e
prev = {}, next = {'0x69c', '0x6a0'}
----------------------------------
function 0x68e(v68earg0, v68earg1, v68earg2)
Block 0x68e
0x68f: v68f(0x0) = CONST 
0x693: v693 = ADD v68earg0 v68earg1
0x696: v696 = LT v693 v68earg1
0x697: v697 = ISZERO v696
0x698: v698(0x6a0) = CONST 
0x69b: JUMPI v698(0x6a0) v697
----------------------------------

Begin block 0x69c
prev = {'0x68e'}, next = {}
----------------------------------
Block 0x69c
0x69c: v69c(0x0) = CONST 
0x69f: REVERT v69c(0x0) v69c(0x0)
----------------------------------

Begin block 0x6a0
prev = {'0x68e'}, next = {}
----------------------------------
Block 0x6a0
0x6a6: RETURNPRIVATE v68earg2 v693
----------------------------------

Begin block 0x6dd
prev = {'0x0', '0xae'}, next = {}
----------------------------------
Block 0x6dd
0x6de: v6de(0xb9) = CONST 
0x6df: CALLPRIVATE v6de(0xb9)
----------------------------------

Begin block 0x6e0
prev = {'0xd', '0x8d'}, next = {}
----------------------------------
Block 0x6e0
0x6e1: v6e1(0xbe) = CONST 
0x6e2: CALLPRIVATE v6e1(0xbe)
----------------------------------

Begin block 0x6e3
prev = {'0x40'}, next = {}
----------------------------------
Block 0x6e3
0x6e4: v6e4(0x148) = CONST 
0x6e5: CALLPRIVATE v6e4(0x148)
----------------------------------

Begin block 0x6e6
prev = {'0x4b'}, next = {}
----------------------------------
Block 0x6e6
0x6e7: v6e7(0x180) = CONST 
0x6e8: CALLPRIVATE v6e7(0x180)
----------------------------------

Begin block 0x6e9
prev = {'0x56'}, next = {}
----------------------------------
Block 0x6e9
0x6ea: v6ea(0x1a7) = CONST 
0x6eb: CALLPRIVATE v6ea(0x1a7)
----------------------------------

Begin block 0x6ec
prev = {'0x61'}, next = {}
----------------------------------
Block 0x6ec
0x6ed: v6ed(0x1d1) = CONST 
0x6ee: CALLPRIVATE v6ed(0x1d1)
----------------------------------

Begin block 0x6ef
prev = {'0x6c'}, next = {}
----------------------------------
Block 0x6ef
0x6f0: v6f0(0x1e6) = CONST 
0x6f1: CALLPRIVATE v6f0(0x1e6)
----------------------------------

Begin block 0x6f2
prev = {'0x77'}, next = {}
----------------------------------
Block 0x6f2
0x6f3: v6f3(0x211) = CONST 
0x6f4: CALLPRIVATE v6f3(0x211)
----------------------------------

Begin block 0x6f5
prev = {'0x82'}, next = {}
----------------------------------
Block 0x6f5
0x6f6: v6f6(0x235) = CONST 
0x6f7: CALLPRIVATE v6f6(0x235)
----------------------------------

Begin block 0x6f8
prev = {'0x98'}, next = {}
----------------------------------
Block 0x6f8
0x6f9: v6f9(0x256) = CONST 
0x6fa: CALLPRIVATE v6f9(0x256)
----------------------------------

Begin block 0x6fb
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x6fb
0x6fc: v6fc(0x27a) = CONST 
0x6fd: CALLPRIVATE v6fc(0x27a)
----------------------------------

Begin block 0x6fe
prev = {'0xae'}, next = {}
----------------------------------
Block 0x6fe
0x6ff: v6ff(0x29e) = CONST 
0x700: CALLPRIVATE v6ff(0x29e)
----------------------------------
