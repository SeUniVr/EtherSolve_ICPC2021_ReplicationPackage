
Begin block 0x0
prev = {}, next = {'0xd', '0x1cb3'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x1c87: v1c87(0x1cb3) = CONST 
0x1c88: JUMPI v1c87(0x1cb3) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x3b', '0xc8'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x31: v31(0x715018a6) = CONST 
0x36: v36 = GT v31(0x715018a6) v2f
0x37: v37(0xc8) = CONST 
0x3a: JUMPI v37(0xc8) v36
----------------------------------

Begin block 0x3b
prev = {'0xd'}, next = {'0x8c', '0x46'}
----------------------------------
Block 0x3b
0x3c: v3c(0xb33960b5) = CONST 
0x41: v41 = GT v3c(0xb33960b5) v2f
0x42: v42(0x8c) = CONST 
0x45: JUMPI v42(0x8c) v41
----------------------------------

Begin block 0x46
prev = {'0x3b'}, next = {'0x1ce3', '0x51'}
----------------------------------
Block 0x46
0x47: v47(0xb33960b5) = CONST 
0x4c: v4c = EQ v47(0xb33960b5) v2f
0x1c89: v1c89(0x1ce3) = CONST 
0x1c8a: JUMPI v1c89(0x1ce3) v4c
----------------------------------

Begin block 0x51
prev = {'0x46'}, next = {'0x5c', '0x1ce6'}
----------------------------------
Block 0x51
0x52: v52(0xb3c7166e) = CONST 
0x57: v57 = EQ v52(0xb3c7166e) v2f
0x1c8b: v1c8b(0x1ce6) = CONST 
0x1c8c: JUMPI v1c8b(0x1ce6) v57
----------------------------------

Begin block 0x5c
prev = {'0x51'}, next = {'0x1ce9', '0x67'}
----------------------------------
Block 0x5c
0x5d: v5d(0xb7019744) = CONST 
0x62: v62 = EQ v5d(0xb7019744) v2f
0x1c8d: v1c8d(0x1ce9) = CONST 
0x1c8e: JUMPI v1c8d(0x1ce9) v62
----------------------------------

Begin block 0x67
prev = {'0x5c'}, next = {'0x1cec', '0x72'}
----------------------------------
Block 0x67
0x68: v68(0xc2b2775a) = CONST 
0x6d: v6d = EQ v68(0xc2b2775a) v2f
0x1c8f: v1c8f(0x1cec) = CONST 
0x1c90: JUMPI v1c8f(0x1cec) v6d
----------------------------------

Begin block 0x72
prev = {'0x67'}, next = {'0x1cef', '0x7d'}
----------------------------------
Block 0x72
0x73: v73(0xdf4e550a) = CONST 
0x78: v78 = EQ v73(0xdf4e550a) v2f
0x1c91: v1c91(0x1cef) = CONST 
0x1c92: JUMPI v1c91(0x1cef) v78
----------------------------------

Begin block 0x7d
prev = {'0x72'}, next = {'0x88', '0x1cf2'}
----------------------------------
Block 0x7d
0x7e: v7e(0xf2fde38b) = CONST 
0x83: v83 = EQ v7e(0xf2fde38b) v2f
0x1c93: v1c93(0x1cf2) = CONST 
0x1c94: JUMPI v1c93(0x1cf2) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0x1470x0'}
----------------------------------
Block 0x88
0x88: v88(0x147) = CONST 
0x8b: JUMP v88(0x147)
----------------------------------

Begin block 0x8c
prev = {'0x3b'}, next = {'0x1cd4', '0x98'}
----------------------------------
Block 0x8c
0x8e: v8e(0x715018a6) = CONST 
0x93: v93 = EQ v8e(0x715018a6) v2f
0x1c95: v1c95(0x1cd4) = CONST 
0x1c96: JUMPI v1c95(0x1cd4) v93
----------------------------------

Begin block 0x98
prev = {'0x8c'}, next = {'0xa3', '0x1cd7'}
----------------------------------
Block 0x98
0x99: v99(0x8da5cb5b) = CONST 
0x9e: v9e = EQ v99(0x8da5cb5b) v2f
0x1c97: v1c97(0x1cd7) = CONST 
0x1c98: JUMPI v1c97(0x1cd7) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0x1cda', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0x8f32d59b) = CONST 
0xa9: va9 = EQ va4(0x8f32d59b) v2f
0x1c99: v1c99(0x1cda) = CONST 
0x1c9a: JUMPI v1c99(0x1cda) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0x1cdd', '0xb9'}
----------------------------------
Block 0xae
0xaf: vaf(0x9d891ac0) = CONST 
0xb4: vb4 = EQ vaf(0x9d891ac0) v2f
0x1c9b: v1c9b(0x1cdd) = CONST 
0x1c9c: JUMPI v1c9b(0x1cdd) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0x1ce0'}
----------------------------------
Block 0xb9
0xba: vba(0xa5d2e889) = CONST 
0xbf: vbf = EQ vba(0xa5d2e889) v2f
0x1c9d: v1c9d(0x1ce0) = CONST 
0x1c9e: JUMPI v1c9d(0x1ce0) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0x1470x0'}
----------------------------------
Block 0xc4
0xc4: vc4(0x147) = CONST 
0xc7: JUMP vc4(0x147)
----------------------------------

Begin block 0xc8
prev = {'0xd'}, next = {'0xd4', '0x10f'}
----------------------------------
Block 0xc8
0xca: vca(0x21285643) = CONST 
0xcf: vcf = GT vca(0x21285643) v2f
0xd0: vd0(0x10f) = CONST 
0xd3: JUMPI vd0(0x10f) vcf
----------------------------------

Begin block 0xd4
prev = {'0xc8'}, next = {'0x1cc5', '0xdf'}
----------------------------------
Block 0xd4
0xd5: vd5(0x21285643) = CONST 
0xda: vda = EQ vd5(0x21285643) v2f
0x1c9f: v1c9f(0x1cc5) = CONST 
0x1ca0: JUMPI v1c9f(0x1cc5) vda
----------------------------------

Begin block 0xdf
prev = {'0xd4'}, next = {'0xea', '0x1cc8'}
----------------------------------
Block 0xdf
0xe0: ve0(0x2343f149) = CONST 
0xe5: ve5 = EQ ve0(0x2343f149) v2f
0x1ca1: v1ca1(0x1cc8) = CONST 
0x1ca2: JUMPI v1ca1(0x1cc8) ve5
----------------------------------

Begin block 0xea
prev = {'0xdf'}, next = {'0x1ccb', '0xf5'}
----------------------------------
Block 0xea
0xeb: veb(0x27f56ad0) = CONST 
0xf0: vf0 = EQ veb(0x27f56ad0) v2f
0x1ca3: v1ca3(0x1ccb) = CONST 
0x1ca4: JUMPI v1ca3(0x1ccb) vf0
----------------------------------

Begin block 0xf5
prev = {'0xea'}, next = {'0x100', '0x1cce'}
----------------------------------
Block 0xf5
0xf6: vf6(0x3f3ff1aa) = CONST 
0xfb: vfb = EQ vf6(0x3f3ff1aa) v2f
0x1ca5: v1ca5(0x1cce) = CONST 
0x1ca6: JUMPI v1ca5(0x1cce) vfb
----------------------------------

Begin block 0x100
prev = {'0xf5'}, next = {'0x10b', '0x1cd1'}
----------------------------------
Block 0x100
0x101: v101(0x6f9f29bc) = CONST 
0x106: v106 = EQ v101(0x6f9f29bc) v2f
0x1ca7: v1ca7(0x1cd1) = CONST 
0x1ca8: JUMPI v1ca7(0x1cd1) v106
----------------------------------

Begin block 0x10b
prev = {'0x100'}, next = {'0x1470x0'}
----------------------------------
Block 0x10b
0x10b: v10b(0x147) = CONST 
0x10e: JUMP v10b(0x147)
----------------------------------

Begin block 0x10f
prev = {'0xc8'}, next = {'0x1cb6', '0x11b'}
----------------------------------
Block 0x10f
0x111: v111(0x177081c) = CONST 
0x116: v116 = EQ v111(0x177081c) v2f
0x1ca9: v1ca9(0x1cb6) = CONST 
0x1caa: JUMPI v1ca9(0x1cb6) v116
----------------------------------

Begin block 0x11b
prev = {'0x10f'}, next = {'0x1cb9', '0x126'}
----------------------------------
Block 0x11b
0x11c: v11c(0x36a1c22) = CONST 
0x121: v121 = EQ v11c(0x36a1c22) v2f
0x1cab: v1cab(0x1cb9) = CONST 
0x1cac: JUMPI v1cab(0x1cb9) v121
----------------------------------

Begin block 0x126
prev = {'0x11b'}, next = {'0x131', '0x1cbc'}
----------------------------------
Block 0x126
0x127: v127(0xa95eac7) = CONST 
0x12c: v12c = EQ v127(0xa95eac7) v2f
0x1cad: v1cad(0x1cbc) = CONST 
0x1cae: JUMPI v1cad(0x1cbc) v12c
----------------------------------

Begin block 0x131
prev = {'0x126'}, next = {'0x13c', '0x1cbf'}
----------------------------------
Block 0x131
0x132: v132(0xeb1d57d) = CONST 
0x137: v137 = EQ v132(0xeb1d57d) v2f
0x1caf: v1caf(0x1cbf) = CONST 
0x1cb0: JUMPI v1caf(0x1cbf) v137
----------------------------------

Begin block 0x13c
prev = {'0x131'}, next = {'0x1cb3', '0x1cc2'}
----------------------------------
Block 0x13c
0x13d: v13d(0x1522177a) = CONST 
0x142: v142 = EQ v13d(0x1522177a) v2f
0x1cb1: v1cb1(0x1cc2) = CONST 
0x1cb2: JUMPI v1cb1(0x1cc2) v142
----------------------------------

Begin block 0x147
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x147
0x148: v148(0x0) = CONST 
0x14b: REVERT v148(0x0) v148(0x0)
----------------------------------

Begin block 0x1470x0
prev = {'0x88', '0x10b', '0x1cb3', '0xc4'}, next = {}
----------------------------------
Block 0x1470x0
0x1480x0: v0148(0x0) = CONST 
0x14b0x0: REVERT v0148(0x0) v0148(0x0)
----------------------------------

Begin block 0x14c
prev = {}, next = {'0x158', '0x154'}
----------------------------------
function setMinimumStaking(address,uint256)()
Block 0x14c
0x14d: v14d = CALLVALUE 
0x14f: v14f = ISZERO v14d
0x150: v150(0x158) = CONST 
0x153: JUMPI v150(0x158) v14f
----------------------------------

Begin block 0x154
prev = {'0x14c'}, next = {}
----------------------------------
Block 0x154
0x154: v154(0x0) = CONST 
0x157: REVERT v154(0x0) v154(0x0)
----------------------------------

Begin block 0x158
prev = {'0x14c'}, next = {'0x16f', '0x16b'}
----------------------------------
Block 0x158
0x15a: v15a(0x185) = CONST 
0x15d: v15d(0x4) = CONST 
0x160: v160 = CALLDATASIZE 
0x161: v161 = SUB v160 v15d(0x4)
0x162: v162(0x40) = CONST 
0x165: v165 = LT v161 v162(0x40)
0x166: v166 = ISZERO v165
0x167: v167(0x16f) = CONST 
0x16a: JUMPI v167(0x16f) v166
----------------------------------

Begin block 0x16b
prev = {'0x158'}, next = {}
----------------------------------
Block 0x16b
0x16b: v16b(0x0) = CONST 
0x16e: REVERT v16b(0x0) v16b(0x0)
----------------------------------

Begin block 0x16f
prev = {'0x158'}, next = {'0x632'}
----------------------------------
Block 0x16f
0x171: v171(0x1) = CONST 
0x173: v173(0xa0) = CONST 
0x175: v175(0x2) = CONST 
0x177: v177(0x10000000000000000000000000000000000000000) = EXP v175(0x2) v173(0xa0)
0x178: v178(0xffffffffffffffffffffffffffffffffffffffff) = SUB v177(0x10000000000000000000000000000000000000000) v171(0x1)
0x17a: v17a = CALLDATALOAD v15d(0x4)
0x17b: v17b = AND v17a v178(0xffffffffffffffffffffffffffffffffffffffff)
0x17d: v17d(0x20) = CONST 
0x17f: v17f = ADD v17d(0x20) v15d(0x4)
0x180: v180 = CALLDATALOAD v17f
0x181: v181(0x632) = CONST 
0x184: JUMP v181(0x632)
----------------------------------

Begin block 0x1850x14c
prev = {'0x67e'}, next = {}
----------------------------------
Block 0x1850x14c
0x1860x14c: STOP 
----------------------------------

Begin block 0x1850x1e1
prev = {'0x836'}, next = {}
----------------------------------
Block 0x1850x1e1
0x1860x1e1: STOP 
----------------------------------

Begin block 0x1850x207
prev = {'0x93f'}, next = {}
----------------------------------
Block 0x1850x207
0x1860x207: STOP 
----------------------------------

Begin block 0x1850x300
prev = {'0xaec'}, next = {}
----------------------------------
Block 0x1850x300
0x1860x300: STOP 
----------------------------------

Begin block 0x1850x333
prev = {'0xc07'}, next = {}
----------------------------------
Block 0x1850x333
0x1860x333: STOP 
----------------------------------

Begin block 0x1850x3ae
prev = {'0xda7'}, next = {}
----------------------------------
Block 0x1850x3ae
0x1860x3ae: STOP 
----------------------------------

Begin block 0x1850x401
prev = {'0xf1f'}, next = {}
----------------------------------
Block 0x1850x401
0x1860x401: STOP 
----------------------------------

Begin block 0x1850x44c
prev = {'0x1032'}, next = {}
----------------------------------
Block 0x1850x44c
0x1860x44c: STOP 
----------------------------------

Begin block 0x1850x47f
prev = {'0x1274'}, next = {}
----------------------------------
Block 0x1850x47f
0x1860x47f: STOP 
----------------------------------

Begin block 0x1850x4c2
prev = {'0x1590'}, next = {}
----------------------------------
Block 0x1850x4c2
0x1860x4c2: STOP 
----------------------------------

Begin block 0x1850x505
prev = {'0x165f'}, next = {}
----------------------------------
Block 0x1850x505
0x1860x505: STOP 
----------------------------------

Begin block 0x1850x531
prev = {'0x177d'}, next = {}
----------------------------------
Block 0x1850x531
0x1860x531: STOP 
----------------------------------

Begin block 0x1850x5ff
prev = {'0x18c4'}, next = {}
----------------------------------
Block 0x1850x5ff
0x1860x5ff: STOP 
----------------------------------

Begin block 0x187
prev = {}, next = {'0x18f', '0x193'}
----------------------------------
function credits(uint256)()
Block 0x187
0x188: v188 = CALLVALUE 
0x18a: v18a = ISZERO v188
0x18b: v18b(0x193) = CONST 
0x18e: JUMPI v18b(0x193) v18a
----------------------------------

Begin block 0x18f
prev = {'0x187'}, next = {}
----------------------------------
Block 0x18f
0x18f: v18f(0x0) = CONST 
0x192: REVERT v18f(0x0) v18f(0x0)
----------------------------------

Begin block 0x193
prev = {'0x187'}, next = {'0x1a6', '0x1aa'}
----------------------------------
Block 0x193
0x195: v195(0x1b1) = CONST 
0x198: v198(0x4) = CONST 
0x19b: v19b = CALLDATASIZE 
0x19c: v19c = SUB v19b v198(0x4)
0x19d: v19d(0x20) = CONST 
0x1a0: v1a0 = LT v19c v19d(0x20)
0x1a1: v1a1 = ISZERO v1a0
0x1a2: v1a2(0x1aa) = CONST 
0x1a5: JUMPI v1a2(0x1aa) v1a1
----------------------------------

Begin block 0x1a6
prev = {'0x193'}, next = {}
----------------------------------
Block 0x1a6
0x1a6: v1a6(0x0) = CONST 
0x1a9: REVERT v1a6(0x0) v1a6(0x0)
----------------------------------

Begin block 0x1aa
prev = {'0x193'}, next = {'0x6dc'}
----------------------------------
Block 0x1aa
0x1ac: v1ac = CALLDATALOAD v198(0x4)
0x1ad: v1ad(0x6dc) = CONST 
0x1b0: JUMP v1ad(0x6dc)
----------------------------------

Begin block 0x1b1
prev = {'0x6dc'}, next = {}
----------------------------------
Block 0x1b1
0x1b2: v1b2(0x40) = CONST 
0x1b5: v1b5 = MLOAD v1b2(0x40)
0x1b6: v1b6(0x1) = CONST 
0x1b8: v1b8(0xa0) = CONST 
0x1ba: v1ba(0x2) = CONST 
0x1bc: v1bc(0x10000000000000000000000000000000000000000) = EXP v1ba(0x2) v1b8(0xa0)
0x1bd: v1bd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1bc(0x10000000000000000000000000000000000000000) v1b6(0x1)
0x1c0: v1c0 = AND v707 v1bd(0xffffffffffffffffffffffffffffffffffffffff)
0x1c2: MSTORE v1b5 v1c0
0x1c3: v1c3(0x20) = CONST 
0x1c6: v1c6 = ADD v1b5 v1c3(0x20)
0x1ca: MSTORE v1c6 v6f1
0x1cd: v1cd = ADD v1b2(0x40) v1b5
0x1d1: MSTORE v1cd v6f6
0x1d2: v1d2(0x60) = CONST 
0x1d5: v1d5 = ADD v1b5 v1d2(0x60)
0x1d6: MSTORE v1d5 v6fc
0x1d7: v1d7 = MLOAD v1b2(0x40)
0x1db: v1db = SUB v1b5 v1d7
0x1dc: v1dc(0x80) = CONST 
0x1de: v1de = ADD v1dc(0x80) v1db
0x1e0: RETURN v1d7 v1de
----------------------------------

Begin block 0x1e1
prev = {}, next = {'0x1f3', '0x1f7'}
----------------------------------
function stakeWithETH(address)()
Block 0x1e1
0x1e2: v1e2(0x185) = CONST 
0x1e5: v1e5(0x4) = CONST 
0x1e8: v1e8 = CALLDATASIZE 
0x1e9: v1e9 = SUB v1e8 v1e5(0x4)
0x1ea: v1ea(0x20) = CONST 
0x1ed: v1ed = LT v1e9 v1ea(0x20)
0x1ee: v1ee = ISZERO v1ed
0x1ef: v1ef(0x1f7) = CONST 
0x1f2: JUMPI v1ef(0x1f7) v1ee
----------------------------------

Begin block 0x1f3
prev = {'0x1e1'}, next = {}
----------------------------------
Block 0x1f3
0x1f3: v1f3(0x0) = CONST 
0x1f6: REVERT v1f3(0x0) v1f3(0x0)
----------------------------------

Begin block 0x1f7
prev = {'0x1e1'}, next = {'0x70d'}
----------------------------------
Block 0x1f7
0x1f9: v1f9 = CALLDATALOAD v1e5(0x4)
0x1fa: v1fa(0x1) = CONST 
0x1fc: v1fc(0xa0) = CONST 
0x1fe: v1fe(0x2) = CONST 
0x200: v200(0x10000000000000000000000000000000000000000) = EXP v1fe(0x2) v1fc(0xa0)
0x201: v201(0xffffffffffffffffffffffffffffffffffffffff) = SUB v200(0x10000000000000000000000000000000000000000) v1fa(0x1)
0x202: v202 = AND v201(0xffffffffffffffffffffffffffffffffffffffff) v1f9
0x203: v203(0x70d) = CONST 
0x206: JUMP v203(0x70d)
----------------------------------

Begin block 0x207
prev = {}, next = {'0x20f', '0x213'}
----------------------------------
function transferETHFunds()()
Block 0x207
0x208: v208 = CALLVALUE 
0x20a: v20a = ISZERO v208
0x20b: v20b(0x213) = CONST 
0x20e: JUMPI v20b(0x213) v20a
----------------------------------

Begin block 0x20f
prev = {'0x207'}, next = {}
----------------------------------
Block 0x20f
0x20f: v20f(0x0) = CONST 
0x212: REVERT v20f(0x0) v20f(0x0)
----------------------------------

Begin block 0x213
prev = {'0x207'}, next = {'0x8ae'}
----------------------------------
Block 0x213
0x215: v215(0x185) = CONST 
0x218: v218(0x8ae) = CONST 
0x21b: JUMP v218(0x8ae)
----------------------------------

Begin block 0x21c
prev = {}, next = {'0x228', '0x224'}
----------------------------------
function creditController()()
Block 0x21c
0x21d: v21d = CALLVALUE 
0x21f: v21f = ISZERO v21d
0x220: v220(0x228) = CONST 
0x223: JUMPI v220(0x228) v21f
----------------------------------

Begin block 0x224
prev = {'0x21c'}, next = {}
----------------------------------
Block 0x224
0x224: v224(0x0) = CONST 
0x227: REVERT v224(0x0) v224(0x0)
----------------------------------

Begin block 0x228
prev = {'0x21c'}, next = {'0x95c'}
----------------------------------
Block 0x228
0x22a: v22a(0x231) = CONST 
0x22d: v22d(0x95c) = CONST 
0x230: JUMP v22d(0x95c)
----------------------------------

Begin block 0x2310x21c
prev = {'0x95c'}, next = {}
----------------------------------
Block 0x2310x21c
0x2320x21c: v21c232(0x40) = CONST 
0x2350x21c: v21c235 = MLOAD v21c232(0x40)
0x2360x21c: v21c236(0x1) = CONST 
0x2380x21c: v21c238(0xa0) = CONST 
0x23a0x21c: v21c23a(0x2) = CONST 
0x23c0x21c: v21c23c(0x10000000000000000000000000000000000000000) = EXP v21c23a(0x2) v21c238(0xa0)
0x23d0x21c: v21c23d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v21c23c(0x10000000000000000000000000000000000000000) v21c236(0x1)
0x2400x21c: v21c240 = AND v968 v21c23d(0xffffffffffffffffffffffffffffffffffffffff)
0x2420x21c: MSTORE v21c235 v21c240
0x2430x21c: v21c243 = MLOAD v21c232(0x40)
0x2470x21c: v21c247 = SUB v21c235 v21c243
0x2480x21c: v21c248(0x20) = CONST 
0x24a0x21c: v21c24a = ADD v21c248(0x20) v21c247
0x24c0x21c: RETURN v21c243 v21c24a
----------------------------------

Begin block 0x2310x3c3
prev = {'0xdfe'}, next = {}
----------------------------------
Block 0x2310x3c3
0x2320x3c3: v3c3232(0x40) = CONST 
0x2350x3c3: v3c3235 = MLOAD v3c3232(0x40)
0x2360x3c3: v3c3236(0x1) = CONST 
0x2380x3c3: v3c3238(0xa0) = CONST 
0x23a0x3c3: v3c323a(0x2) = CONST 
0x23c0x3c3: v3c323c(0x10000000000000000000000000000000000000000) = EXP v3c323a(0x2) v3c3238(0xa0)
0x23d0x3c3: v3c323d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c323c(0x10000000000000000000000000000000000000000) v3c3236(0x1)
0x2400x3c3: v3c3240 = AND ve0a v3c323d(0xffffffffffffffffffffffffffffffffffffffff)
0x2420x3c3: MSTORE v3c3235 v3c3240
0x2430x3c3: v3c3243 = MLOAD v3c3232(0x40)
0x2470x3c3: v3c3247 = SUB v3c3235 v3c3243
0x2480x3c3: v3c3248(0x20) = CONST 
0x24a0x3c3: v3c324a = ADD v3c3248(0x20) v3c3247
0x24c0x3c3: RETURN v3c3243 v3c324a
----------------------------------

Begin block 0x24d
prev = {}, next = {'0x255', '0x259'}
----------------------------------
function minStakings(address)()
Block 0x24d
0x24e: v24e = CALLVALUE 
0x250: v250 = ISZERO v24e
0x251: v251(0x259) = CONST 
0x254: JUMPI v251(0x259) v250
----------------------------------

Begin block 0x255
prev = {'0x24d'}, next = {}
----------------------------------
Block 0x255
0x255: v255(0x0) = CONST 
0x258: REVERT v255(0x0) v255(0x0)
----------------------------------

Begin block 0x259
prev = {'0x24d'}, next = {'0x270', '0x26c'}
----------------------------------
Block 0x259
0x25b: v25b(0x280) = CONST 
0x25e: v25e(0x4) = CONST 
0x261: v261 = CALLDATASIZE 
0x262: v262 = SUB v261 v25e(0x4)
0x263: v263(0x20) = CONST 
0x266: v266 = LT v262 v263(0x20)
0x267: v267 = ISZERO v266
0x268: v268(0x270) = CONST 
0x26b: JUMPI v268(0x270) v267
----------------------------------

Begin block 0x26c
prev = {'0x259'}, next = {}
----------------------------------
Block 0x26c
0x26c: v26c(0x0) = CONST 
0x26f: REVERT v26c(0x0) v26c(0x0)
----------------------------------

Begin block 0x270
prev = {'0x259'}, next = {'0x96b'}
----------------------------------
Block 0x270
0x272: v272 = CALLDATALOAD v25e(0x4)
0x273: v273(0x1) = CONST 
0x275: v275(0xa0) = CONST 
0x277: v277(0x2) = CONST 
0x279: v279(0x10000000000000000000000000000000000000000) = EXP v277(0x2) v275(0xa0)
0x27a: v27a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v279(0x10000000000000000000000000000000000000000) v273(0x1)
0x27b: v27b = AND v27a(0xffffffffffffffffffffffffffffffffffffffff) v272
0x27c: v27c(0x96b) = CONST 
0x27f: JUMP v27c(0x96b)
----------------------------------

Begin block 0x2800x24d
prev = {'0x96b'}, next = {}
----------------------------------
Block 0x2800x24d
0x2810x24d: v24d281(0x40) = CONST 
0x2840x24d: v24d284 = MLOAD v24d281(0x40)
0x2870x24d: MSTORE v24d284 v97a
0x2880x24d: v24d288 = MLOAD v24d281(0x40)
0x28c0x24d: v24d28c = SUB v24d284 v24d288
0x28d0x24d: v24d28d(0x20) = CONST 
0x28f0x24d: v24d28f = ADD v24d28d(0x20) v24d28c
0x2910x24d: RETURN v24d288 v24d28f
----------------------------------

Begin block 0x2800x292
prev = {'0x97d'}, next = {}
----------------------------------
Block 0x2800x292
0x2810x292: v292281(0x40) = CONST 
0x2840x292: v292284 = MLOAD v292281(0x40)
0x2870x292: MSTORE v292284 v997
0x2880x292: v292288 = MLOAD v292281(0x40)
0x28c0x292: v29228c = SUB v292284 v292288
0x28d0x292: v29228d(0x20) = CONST 
0x28f0x292: v29228f = ADD v29228d(0x20) v29228c
0x2910x292: RETURN v292288 v29228f
----------------------------------

Begin block 0x2800x2cd
prev = {'0x99a'}, next = {}
----------------------------------
Block 0x2800x2cd
0x2810x2cd: v2cd281(0x40) = CONST 
0x2840x2cd: v2cd284 = MLOAD v2cd281(0x40)
0x2870x2cd: MSTORE v2cd284 v9a9
0x2880x2cd: v2cd288 = MLOAD v2cd281(0x40)
0x28c0x2cd: v2cd28c = SUB v2cd284 v2cd288
0x28d0x2cd: v2cd28d(0x20) = CONST 
0x28f0x2cd: v2cd28f = ADD v2cd28d(0x20) v2cd28c
0x2910x2cd: RETURN v2cd288 v2cd28f
----------------------------------

Begin block 0x292
prev = {}, next = {'0x29e', '0x29a'}
----------------------------------
function borrowerStakes(address,address)()
Block 0x292
0x293: v293 = CALLVALUE 
0x295: v295 = ISZERO v293
0x296: v296(0x29e) = CONST 
0x299: JUMPI v296(0x29e) v295
----------------------------------

Begin block 0x29a
prev = {'0x292'}, next = {}
----------------------------------
Block 0x29a
0x29a: v29a(0x0) = CONST 
0x29d: REVERT v29a(0x0) v29a(0x0)
----------------------------------

Begin block 0x29e
prev = {'0x292'}, next = {'0x2b1', '0x2b5'}
----------------------------------
Block 0x29e
0x2a0: v2a0(0x280) = CONST 
0x2a3: v2a3(0x4) = CONST 
0x2a6: v2a6 = CALLDATASIZE 
0x2a7: v2a7 = SUB v2a6 v2a3(0x4)
0x2a8: v2a8(0x40) = CONST 
0x2ab: v2ab = LT v2a7 v2a8(0x40)
0x2ac: v2ac = ISZERO v2ab
0x2ad: v2ad(0x2b5) = CONST 
0x2b0: JUMPI v2ad(0x2b5) v2ac
----------------------------------

Begin block 0x2b1
prev = {'0x29e'}, next = {}
----------------------------------
Block 0x2b1
0x2b1: v2b1(0x0) = CONST 
0x2b4: REVERT v2b1(0x0) v2b1(0x0)
----------------------------------

Begin block 0x2b5
prev = {'0x29e'}, next = {'0x97d'}
----------------------------------
Block 0x2b5
0x2b7: v2b7(0x1) = CONST 
0x2b9: v2b9(0xa0) = CONST 
0x2bb: v2bb(0x2) = CONST 
0x2bd: v2bd(0x10000000000000000000000000000000000000000) = EXP v2bb(0x2) v2b9(0xa0)
0x2be: v2be(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2bd(0x10000000000000000000000000000000000000000) v2b7(0x1)
0x2c0: v2c0 = CALLDATALOAD v2a3(0x4)
0x2c2: v2c2 = AND v2be(0xffffffffffffffffffffffffffffffffffffffff) v2c0
0x2c4: v2c4(0x20) = CONST 
0x2c6: v2c6 = ADD v2c4(0x20) v2a3(0x4)
0x2c7: v2c7 = CALLDATALOAD v2c6
0x2c8: v2c8 = AND v2c7 v2be(0xffffffffffffffffffffffffffffffffffffffff)
0x2c9: v2c9(0x97d) = CONST 
0x2cc: JUMP v2c9(0x97d)
----------------------------------

Begin block 0x2cd
prev = {}, next = {'0x2d5', '0x2d9'}
----------------------------------
function slashsAndRefunds(address)()
Block 0x2cd
0x2ce: v2ce = CALLVALUE 
0x2d0: v2d0 = ISZERO v2ce
0x2d1: v2d1(0x2d9) = CONST 
0x2d4: JUMPI v2d1(0x2d9) v2d0
----------------------------------

Begin block 0x2d5
prev = {'0x2cd'}, next = {}
----------------------------------
Block 0x2d5
0x2d5: v2d5(0x0) = CONST 
0x2d8: REVERT v2d5(0x0) v2d5(0x0)
----------------------------------

Begin block 0x2d9
prev = {'0x2cd'}, next = {'0x2f0', '0x2ec'}
----------------------------------
Block 0x2d9
0x2db: v2db(0x280) = CONST 
0x2de: v2de(0x4) = CONST 
0x2e1: v2e1 = CALLDATASIZE 
0x2e2: v2e2 = SUB v2e1 v2de(0x4)
0x2e3: v2e3(0x20) = CONST 
0x2e6: v2e6 = LT v2e2 v2e3(0x20)
0x2e7: v2e7 = ISZERO v2e6
0x2e8: v2e8(0x2f0) = CONST 
0x2eb: JUMPI v2e8(0x2f0) v2e7
----------------------------------

Begin block 0x2ec
prev = {'0x2d9'}, next = {}
----------------------------------
Block 0x2ec
0x2ec: v2ec(0x0) = CONST 
0x2ef: REVERT v2ec(0x0) v2ec(0x0)
----------------------------------

Begin block 0x2f0
prev = {'0x2d9'}, next = {'0x99a'}
----------------------------------
Block 0x2f0
0x2f2: v2f2 = CALLDATALOAD v2de(0x4)
0x2f3: v2f3(0x1) = CONST 
0x2f5: v2f5(0xa0) = CONST 
0x2f7: v2f7(0x2) = CONST 
0x2f9: v2f9(0x10000000000000000000000000000000000000000) = EXP v2f7(0x2) v2f5(0xa0)
0x2fa: v2fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2f9(0x10000000000000000000000000000000000000000) v2f3(0x1)
0x2fb: v2fb = AND v2fa(0xffffffffffffffffffffffffffffffffffffffff) v2f2
0x2fc: v2fc(0x99a) = CONST 
0x2ff: JUMP v2fc(0x99a)
----------------------------------

Begin block 0x300
prev = {}, next = {'0x30c', '0x308'}
----------------------------------
function transferTokenFunds(address)()
Block 0x300
0x301: v301 = CALLVALUE 
0x303: v303 = ISZERO v301
0x304: v304(0x30c) = CONST 
0x307: JUMPI v304(0x30c) v303
----------------------------------

Begin block 0x308
prev = {'0x300'}, next = {}
----------------------------------
Block 0x308
0x308: v308(0x0) = CONST 
0x30b: REVERT v308(0x0) v308(0x0)
----------------------------------

Begin block 0x30c
prev = {'0x300'}, next = {'0x323', '0x31f'}
----------------------------------
Block 0x30c
0x30e: v30e(0x185) = CONST 
0x311: v311(0x4) = CONST 
0x314: v314 = CALLDATASIZE 
0x315: v315 = SUB v314 v311(0x4)
0x316: v316(0x20) = CONST 
0x319: v319 = LT v315 v316(0x20)
0x31a: v31a = ISZERO v319
0x31b: v31b(0x323) = CONST 
0x31e: JUMPI v31b(0x323) v31a
----------------------------------

Begin block 0x31f
prev = {'0x30c'}, next = {}
----------------------------------
Block 0x31f
0x31f: v31f(0x0) = CONST 
0x322: REVERT v31f(0x0) v31f(0x0)
----------------------------------

Begin block 0x323
prev = {'0x30c'}, next = {'0x9ac'}
----------------------------------
Block 0x323
0x325: v325 = CALLDATALOAD v311(0x4)
0x326: v326(0x1) = CONST 
0x328: v328(0xa0) = CONST 
0x32a: v32a(0x2) = CONST 
0x32c: v32c(0x10000000000000000000000000000000000000000) = EXP v32a(0x2) v328(0xa0)
0x32d: v32d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v32c(0x10000000000000000000000000000000000000000) v326(0x1)
0x32e: v32e = AND v32d(0xffffffffffffffffffffffffffffffffffffffff) v325
0x32f: v32f(0x9ac) = CONST 
0x332: JUMP v32f(0x9ac)
----------------------------------

Begin block 0x333
prev = {}, next = {'0x33b', '0x33f'}
----------------------------------
function createCreditRule(address,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32,uint16)()
Block 0x333
0x334: v334 = CALLVALUE 
0x336: v336 = ISZERO v334
0x337: v337(0x33f) = CONST 
0x33a: JUMPI v337(0x33f) v336
----------------------------------

Begin block 0x33b
prev = {'0x333'}, next = {}
----------------------------------
Block 0x33b
0x33b: v33b(0x0) = CONST 
0x33e: REVERT v33b(0x0) v33b(0x0)
----------------------------------

Begin block 0x33f
prev = {'0x333'}, next = {'0x357', '0x353'}
----------------------------------
Block 0x33f
0x341: v341(0x185) = CONST 
0x344: v344(0x4) = CONST 
0x347: v347 = CALLDATASIZE 
0x348: v348 = SUB v347 v344(0x4)
0x349: v349(0x140) = CONST 
0x34d: v34d = LT v348 v349(0x140)
0x34e: v34e = ISZERO v34d
0x34f: v34f(0x357) = CONST 
0x352: JUMPI v34f(0x357) v34e
----------------------------------

Begin block 0x353
prev = {'0x33f'}, next = {}
----------------------------------
Block 0x353
0x353: v353(0x0) = CONST 
0x356: REVERT v353(0x0) v353(0x0)
----------------------------------

Begin block 0x357
prev = {'0x33f'}, next = {'0xb06'}
----------------------------------
Block 0x357
0x35a: v35a = CALLDATALOAD v344(0x4)
0x35b: v35b(0x1) = CONST 
0x35d: v35d(0xa0) = CONST 
0x35f: v35f(0x2) = CONST 
0x361: v361(0x10000000000000000000000000000000000000000) = EXP v35f(0x2) v35d(0xa0)
0x362: v362(0xffffffffffffffffffffffffffffffffffffffff) = SUB v361(0x10000000000000000000000000000000000000000) v35b(0x1)
0x363: v363 = AND v362(0xffffffffffffffffffffffffffffffffffffffff) v35a
0x365: v365(0x20) = CONST 
0x368: v368 = ADD v344(0x4) v365(0x20)
0x369: v369 = CALLDATALOAD v368
0x36b: v36b(0x40) = CONST 
0x36e: v36e = ADD v344(0x4) v36b(0x40)
0x36f: v36f = CALLDATALOAD v36e
0x371: v371(0x60) = CONST 
0x374: v374 = ADD v344(0x4) v371(0x60)
0x375: v375 = CALLDATALOAD v374
0x377: v377(0x80) = CONST 
0x37a: v37a = ADD v344(0x4) v377(0x80)
0x37b: v37b = CALLDATALOAD v37a
0x37d: v37d(0xa0) = CONST 
0x380: v380 = ADD v344(0x4) v37d(0xa0)
0x381: v381 = CALLDATALOAD v380
0x383: v383(0xc0) = CONST 
0x386: v386 = ADD v344(0x4) v383(0xc0)
0x387: v387 = CALLDATALOAD v386
0x388: v388(0xffffffff) = CONST 
0x38f: v38f = AND v388(0xffffffff) v387
0x391: v391(0xe0) = CONST 
0x394: v394 = ADD v344(0x4) v391(0xe0)
0x395: v395 = CALLDATALOAD v394
0x397: v397 = AND v388(0xffffffff) v395
0x399: v399(0x100) = CONST 
0x39d: v39d = ADD v344(0x4) v399(0x100)
0x39e: v39e = CALLDATALOAD v39d
0x39f: v39f = AND v39e v388(0xffffffff)
0x3a1: v3a1(0x120) = CONST 
0x3a4: v3a4 = ADD v3a1(0x120) v344(0x4)
0x3a5: v3a5 = CALLDATALOAD v3a4
0x3a6: v3a6(0xffff) = CONST 
0x3a9: v3a9 = AND v3a6(0xffff) v3a5
0x3aa: v3aa(0xb06) = CONST 
0x3ad: JUMP v3aa(0xb06)
----------------------------------

Begin block 0x3ae
prev = {}, next = {'0x3b6', '0x3ba'}
----------------------------------
function renounceOwnership()()
Block 0x3ae
0x3af: v3af = CALLVALUE 
0x3b1: v3b1 = ISZERO v3af
0x3b2: v3b2(0x3ba) = CONST 
0x3b5: JUMPI v3b2(0x3ba) v3b1
----------------------------------

Begin block 0x3b6
prev = {'0x3ae'}, next = {}
----------------------------------
Block 0x3b6
0x3b6: v3b6(0x0) = CONST 
0x3b9: REVERT v3b6(0x0) v3b6(0x0)
----------------------------------

Begin block 0x3ba
prev = {'0x3ae'}, next = {'0xd4b'}
----------------------------------
Block 0x3ba
0x3bc: v3bc(0x185) = CONST 
0x3bf: v3bf(0xd4b) = CONST 
0x3c2: JUMP v3bf(0xd4b)
----------------------------------

Begin block 0x3c3
prev = {}, next = {'0x3cf', '0x3cb'}
----------------------------------
function owner()()
Block 0x3c3
0x3c4: v3c4 = CALLVALUE 
0x3c6: v3c6 = ISZERO v3c4
0x3c7: v3c7(0x3cf) = CONST 
0x3ca: JUMPI v3c7(0x3cf) v3c6
----------------------------------

Begin block 0x3cb
prev = {'0x3c3'}, next = {}
----------------------------------
Block 0x3cb
0x3cb: v3cb(0x0) = CONST 
0x3ce: REVERT v3cb(0x0) v3cb(0x0)
----------------------------------

Begin block 0x3cf
prev = {'0x3c3'}, next = {'0xdfe'}
----------------------------------
Block 0x3cf
0x3d1: v3d1(0x231) = CONST 
0x3d4: v3d4(0xdfe) = CONST 
0x3d7: JUMP v3d4(0xdfe)
----------------------------------

Begin block 0x3d8
prev = {}, next = {'0x3e4', '0x3e0'}
----------------------------------
function isOwner()()
Block 0x3d8
0x3d9: v3d9 = CALLVALUE 
0x3db: v3db = ISZERO v3d9
0x3dc: v3dc(0x3e4) = CONST 
0x3df: JUMPI v3dc(0x3e4) v3db
----------------------------------

Begin block 0x3e0
prev = {'0x3d8'}, next = {}
----------------------------------
Block 0x3e0
0x3e0: v3e0(0x0) = CONST 
0x3e3: REVERT v3e0(0x0) v3e0(0x0)
----------------------------------

Begin block 0x3e4
prev = {'0x3d8'}, next = {'0x3ed'}
----------------------------------
Block 0x3e4
0x3e6: v3e6(0x3ed) = CONST 
0x3e9: v3e9(0xe0d) = CONST 
0x3ec: v3ec_0 = CALLPRIVATE v3e9(0xe0d) v3e6(0x3ed)
----------------------------------

Begin block 0x3ed
prev = {'0x3e4'}, next = {}
----------------------------------
Block 0x3ed
0x3ee: v3ee(0x40) = CONST 
0x3f1: v3f1 = MLOAD v3ee(0x40)
0x3f3: v3f3 = ISZERO v3ec_0
0x3f4: v3f4 = ISZERO v3f3
0x3f6: MSTORE v3f1 v3f4
0x3f7: v3f7 = MLOAD v3ee(0x40)
0x3fb: v3fb = SUB v3f1 v3f7
0x3fc: v3fc(0x20) = CONST 
0x3fe: v3fe = ADD v3fc(0x20) v3fb
0x400: RETURN v3f7 v3fe
----------------------------------

Begin block 0x401
prev = {}, next = {'0x40d', '0x409'}
----------------------------------
function createCredit(address,uint256,uint256,uint256,uint256)()
Block 0x401
0x402: v402 = CALLVALUE 
0x404: v404 = ISZERO v402
0x405: v405(0x40d) = CONST 
0x408: JUMPI v405(0x40d) v404
----------------------------------

Begin block 0x409
prev = {'0x401'}, next = {}
----------------------------------
Block 0x409
0x409: v409(0x0) = CONST 
0x40c: REVERT v409(0x0) v409(0x0)
----------------------------------

Begin block 0x40d
prev = {'0x401'}, next = {'0x420', '0x424'}
----------------------------------
Block 0x40d
0x40f: v40f(0x185) = CONST 
0x412: v412(0x4) = CONST 
0x415: v415 = CALLDATASIZE 
0x416: v416 = SUB v415 v412(0x4)
0x417: v417(0xa0) = CONST 
0x41a: v41a = LT v416 v417(0xa0)
0x41b: v41b = ISZERO v41a
0x41c: v41c(0x424) = CONST 
0x41f: JUMPI v41c(0x424) v41b
----------------------------------

Begin block 0x420
prev = {'0x40d'}, next = {}
----------------------------------
Block 0x420
0x420: v420(0x0) = CONST 
0x423: REVERT v420(0x0) v420(0x0)
----------------------------------

Begin block 0x424
prev = {'0x40d'}, next = {'0xe1e'}
----------------------------------
Block 0x424
0x426: v426(0x1) = CONST 
0x428: v428(0xa0) = CONST 
0x42a: v42a(0x2) = CONST 
0x42c: v42c(0x10000000000000000000000000000000000000000) = EXP v42a(0x2) v428(0xa0)
0x42d: v42d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v42c(0x10000000000000000000000000000000000000000) v426(0x1)
0x42f: v42f = CALLDATALOAD v412(0x4)
0x430: v430 = AND v42f v42d(0xffffffffffffffffffffffffffffffffffffffff)
0x432: v432(0x20) = CONST 
0x435: v435 = ADD v412(0x4) v432(0x20)
0x436: v436 = CALLDATALOAD v435
0x438: v438(0x40) = CONST 
0x43b: v43b = ADD v412(0x4) v438(0x40)
0x43c: v43c = CALLDATALOAD v43b
0x43e: v43e(0x60) = CONST 
0x441: v441 = ADD v412(0x4) v43e(0x60)
0x442: v442 = CALLDATALOAD v441
0x444: v444(0x80) = CONST 
0x446: v446 = ADD v444(0x80) v412(0x4)
0x447: v447 = CALLDATALOAD v446
0x448: v448(0xe1e) = CONST 
0x44b: JUMP v448(0xe1e)
----------------------------------

Begin block 0x44c
prev = {}, next = {'0x454', '0x458'}
----------------------------------
function transferColendiController(address)()
Block 0x44c
0x44d: v44d = CALLVALUE 
0x44f: v44f = ISZERO v44d
0x450: v450(0x458) = CONST 
0x453: JUMPI v450(0x458) v44f
----------------------------------

Begin block 0x454
prev = {'0x44c'}, next = {}
----------------------------------
Block 0x454
0x454: v454(0x0) = CONST 
0x457: REVERT v454(0x0) v454(0x0)
----------------------------------

Begin block 0x458
prev = {'0x44c'}, next = {'0x46b', '0x46f'}
----------------------------------
Block 0x458
0x45a: v45a(0x185) = CONST 
0x45d: v45d(0x4) = CONST 
0x460: v460 = CALLDATASIZE 
0x461: v461 = SUB v460 v45d(0x4)
0x462: v462(0x20) = CONST 
0x465: v465 = LT v461 v462(0x20)
0x466: v466 = ISZERO v465
0x467: v467(0x46f) = CONST 
0x46a: JUMPI v467(0x46f) v466
----------------------------------

Begin block 0x46b
prev = {'0x458'}, next = {}
----------------------------------
Block 0x46b
0x46b: v46b(0x0) = CONST 
0x46e: REVERT v46b(0x0) v46b(0x0)
----------------------------------

Begin block 0x46f
prev = {'0x458'}, next = {'0xfd6'}
----------------------------------
Block 0x46f
0x471: v471 = CALLDATALOAD v45d(0x4)
0x472: v472(0x1) = CONST 
0x474: v474(0xa0) = CONST 
0x476: v476(0x2) = CONST 
0x478: v478(0x10000000000000000000000000000000000000000) = EXP v476(0x2) v474(0xa0)
0x479: v479(0xffffffffffffffffffffffffffffffffffffffff) = SUB v478(0x10000000000000000000000000000000000000000) v472(0x1)
0x47a: v47a = AND v479(0xffffffffffffffffffffffffffffffffffffffff) v471
0x47b: v47b(0xfd6) = CONST 
0x47e: JUMP v47b(0xfd6)
----------------------------------

Begin block 0x47f
prev = {}, next = {'0x48b', '0x487'}
----------------------------------
function stakeWithERC20(address,address,uint256)()
Block 0x47f
0x480: v480 = CALLVALUE 
0x482: v482 = ISZERO v480
0x483: v483(0x48b) = CONST 
0x486: JUMPI v483(0x48b) v482
----------------------------------

Begin block 0x487
prev = {'0x47f'}, next = {}
----------------------------------
Block 0x487
0x487: v487(0x0) = CONST 
0x48a: REVERT v487(0x0) v487(0x0)
----------------------------------

Begin block 0x48b
prev = {'0x47f'}, next = {'0x49e', '0x4a2'}
----------------------------------
Block 0x48b
0x48d: v48d(0x185) = CONST 
0x490: v490(0x4) = CONST 
0x493: v493 = CALLDATASIZE 
0x494: v494 = SUB v493 v490(0x4)
0x495: v495(0x60) = CONST 
0x498: v498 = LT v494 v495(0x60)
0x499: v499 = ISZERO v498
0x49a: v49a(0x4a2) = CONST 
0x49d: JUMPI v49a(0x4a2) v499
----------------------------------

Begin block 0x49e
prev = {'0x48b'}, next = {}
----------------------------------
Block 0x49e
0x49e: v49e(0x0) = CONST 
0x4a1: REVERT v49e(0x0) v49e(0x0)
----------------------------------

Begin block 0x4a2
prev = {'0x48b'}, next = {'0x1061'}
----------------------------------
Block 0x4a2
0x4a4: v4a4(0x1) = CONST 
0x4a6: v4a6(0xa0) = CONST 
0x4a8: v4a8(0x2) = CONST 
0x4aa: v4aa(0x10000000000000000000000000000000000000000) = EXP v4a8(0x2) v4a6(0xa0)
0x4ab: v4ab(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4aa(0x10000000000000000000000000000000000000000) v4a4(0x1)
0x4ad: v4ad = CALLDATALOAD v490(0x4)
0x4af: v4af = AND v4ab(0xffffffffffffffffffffffffffffffffffffffff) v4ad
0x4b1: v4b1(0x20) = CONST 
0x4b4: v4b4 = ADD v490(0x4) v4b1(0x20)
0x4b5: v4b5 = CALLDATALOAD v4b4
0x4b8: v4b8 = AND v4ab(0xffffffffffffffffffffffffffffffffffffffff) v4b5
0x4ba: v4ba(0x40) = CONST 
0x4bc: v4bc = ADD v4ba(0x40) v490(0x4)
0x4bd: v4bd = CALLDATALOAD v4bc
0x4be: v4be(0x1061) = CONST 
0x4c1: JUMP v4be(0x1061)
----------------------------------

Begin block 0x4c2
prev = {}, next = {'0x4ce', '0x4ca'}
----------------------------------
function refundStakings(address,address,uint256)()
Block 0x4c2
0x4c3: v4c3 = CALLVALUE 
0x4c5: v4c5 = ISZERO v4c3
0x4c6: v4c6(0x4ce) = CONST 
0x4c9: JUMPI v4c6(0x4ce) v4c5
----------------------------------

Begin block 0x4ca
prev = {'0x4c2'}, next = {}
----------------------------------
Block 0x4ca
0x4ca: v4ca(0x0) = CONST 
0x4cd: REVERT v4ca(0x0) v4ca(0x0)
----------------------------------

Begin block 0x4ce
prev = {'0x4c2'}, next = {'0x4e5', '0x4e1'}
----------------------------------
Block 0x4ce
0x4d0: v4d0(0x185) = CONST 
0x4d3: v4d3(0x4) = CONST 
0x4d6: v4d6 = CALLDATASIZE 
0x4d7: v4d7 = SUB v4d6 v4d3(0x4)
0x4d8: v4d8(0x60) = CONST 
0x4db: v4db = LT v4d7 v4d8(0x60)
0x4dc: v4dc = ISZERO v4db
0x4dd: v4dd(0x4e5) = CONST 
0x4e0: JUMPI v4dd(0x4e5) v4dc
----------------------------------

Begin block 0x4e1
prev = {'0x4ce'}, next = {}
----------------------------------
Block 0x4e1
0x4e1: v4e1(0x0) = CONST 
0x4e4: REVERT v4e1(0x0) v4e1(0x0)
----------------------------------

Begin block 0x4e5
prev = {'0x4ce'}, next = {'0x12de'}
----------------------------------
Block 0x4e5
0x4e7: v4e7(0x1) = CONST 
0x4e9: v4e9(0xa0) = CONST 
0x4eb: v4eb(0x2) = CONST 
0x4ed: v4ed(0x10000000000000000000000000000000000000000) = EXP v4eb(0x2) v4e9(0xa0)
0x4ee: v4ee(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ed(0x10000000000000000000000000000000000000000) v4e7(0x1)
0x4f0: v4f0 = CALLDATALOAD v4d3(0x4)
0x4f2: v4f2 = AND v4ee(0xffffffffffffffffffffffffffffffffffffffff) v4f0
0x4f4: v4f4(0x20) = CONST 
0x4f7: v4f7 = ADD v4d3(0x4) v4f4(0x20)
0x4f8: v4f8 = CALLDATALOAD v4f7
0x4fb: v4fb = AND v4ee(0xffffffffffffffffffffffffffffffffffffffff) v4f8
0x4fd: v4fd(0x40) = CONST 
0x4ff: v4ff = ADD v4fd(0x40) v4d3(0x4)
0x500: v500 = CALLDATALOAD v4ff
0x501: v501(0x12de) = CONST 
0x504: JUMP v501(0x12de)
----------------------------------

Begin block 0x505
prev = {}, next = {'0x517', '0x51b'}
----------------------------------
function payBack(address,uint256)()
Block 0x505
0x506: v506(0x185) = CONST 
0x509: v509(0x4) = CONST 
0x50c: v50c = CALLDATASIZE 
0x50d: v50d = SUB v50c v509(0x4)
0x50e: v50e(0x40) = CONST 
0x511: v511 = LT v50d v50e(0x40)
0x512: v512 = ISZERO v511
0x513: v513(0x51b) = CONST 
0x516: JUMPI v513(0x51b) v512
----------------------------------

Begin block 0x517
prev = {'0x505'}, next = {}
----------------------------------
Block 0x517
0x517: v517(0x0) = CONST 
0x51a: REVERT v517(0x0) v517(0x0)
----------------------------------

Begin block 0x51b
prev = {'0x505'}, next = {'0x15db'}
----------------------------------
Block 0x51b
0x51d: v51d(0x1) = CONST 
0x51f: v51f(0xa0) = CONST 
0x521: v521(0x2) = CONST 
0x523: v523(0x10000000000000000000000000000000000000000) = EXP v521(0x2) v51f(0xa0)
0x524: v524(0xffffffffffffffffffffffffffffffffffffffff) = SUB v523(0x10000000000000000000000000000000000000000) v51d(0x1)
0x526: v526 = CALLDATALOAD v509(0x4)
0x527: v527 = AND v526 v524(0xffffffffffffffffffffffffffffffffffffffff)
0x529: v529(0x20) = CONST 
0x52b: v52b = ADD v529(0x20) v509(0x4)
0x52c: v52c = CALLDATALOAD v52b
0x52d: v52d(0x15db) = CONST 
0x530: JUMP v52d(0x15db)
----------------------------------

Begin block 0x531
prev = {}, next = {'0x539', '0x53d'}
----------------------------------
function slashBorrower(address,address,uint256)()
Block 0x531
0x532: v532 = CALLVALUE 
0x534: v534 = ISZERO v532
0x535: v535(0x53d) = CONST 
0x538: JUMPI v535(0x53d) v534
----------------------------------

Begin block 0x539
prev = {'0x531'}, next = {}
----------------------------------
Block 0x539
0x539: v539(0x0) = CONST 
0x53c: REVERT v539(0x0) v539(0x0)
----------------------------------

Begin block 0x53d
prev = {'0x531'}, next = {'0x550', '0x554'}
----------------------------------
Block 0x53d
0x53f: v53f(0x185) = CONST 
0x542: v542(0x4) = CONST 
0x545: v545 = CALLDATASIZE 
0x546: v546 = SUB v545 v542(0x4)
0x547: v547(0x60) = CONST 
0x54a: v54a = LT v546 v547(0x60)
0x54b: v54b = ISZERO v54a
0x54c: v54c(0x554) = CONST 
0x54f: JUMPI v54c(0x554) v54b
----------------------------------

Begin block 0x550
prev = {'0x53d'}, next = {}
----------------------------------
Block 0x550
0x550: v550(0x0) = CONST 
0x553: REVERT v550(0x0) v550(0x0)
----------------------------------

Begin block 0x554
prev = {'0x53d'}, next = {'0x16c6'}
----------------------------------
Block 0x554
0x556: v556(0x1) = CONST 
0x558: v558(0xa0) = CONST 
0x55a: v55a(0x2) = CONST 
0x55c: v55c(0x10000000000000000000000000000000000000000) = EXP v55a(0x2) v558(0xa0)
0x55d: v55d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v55c(0x10000000000000000000000000000000000000000) v556(0x1)
0x55f: v55f = CALLDATALOAD v542(0x4)
0x561: v561 = AND v55d(0xffffffffffffffffffffffffffffffffffffffff) v55f
0x563: v563(0x20) = CONST 
0x566: v566 = ADD v542(0x4) v563(0x20)
0x567: v567 = CALLDATALOAD v566
0x56a: v56a = AND v55d(0xffffffffffffffffffffffffffffffffffffffff) v567
0x56c: v56c(0x40) = CONST 
0x56e: v56e = ADD v56c(0x40) v542(0x4)
0x56f: v56f = CALLDATALOAD v56e
0x570: v570(0x16c6) = CONST 
0x573: JUMP v570(0x16c6)
----------------------------------

Begin block 0x574
prev = {}, next = {'0x57c', '0x580'}
----------------------------------
function creditRules(uint256)()
Block 0x574
0x575: v575 = CALLVALUE 
0x577: v577 = ISZERO v575
0x578: v578(0x580) = CONST 
0x57b: JUMPI v578(0x580) v577
----------------------------------

Begin block 0x57c
prev = {'0x574'}, next = {}
----------------------------------
Block 0x57c
0x57c: v57c(0x0) = CONST 
0x57f: REVERT v57c(0x0) v57c(0x0)
----------------------------------

Begin block 0x580
prev = {'0x574'}, next = {'0x597', '0x593'}
----------------------------------
Block 0x580
0x582: v582(0x59e) = CONST 
0x585: v585(0x4) = CONST 
0x588: v588 = CALLDATASIZE 
0x589: v589 = SUB v588 v585(0x4)
0x58a: v58a(0x20) = CONST 
0x58d: v58d = LT v589 v58a(0x20)
0x58e: v58e = ISZERO v58d
0x58f: v58f(0x597) = CONST 
0x592: JUMPI v58f(0x597) v58e
----------------------------------

Begin block 0x593
prev = {'0x580'}, next = {}
----------------------------------
Block 0x593
0x593: v593(0x0) = CONST 
0x596: REVERT v593(0x0) v593(0x0)
----------------------------------

Begin block 0x597
prev = {'0x580'}, next = {'0x17e7'}
----------------------------------
Block 0x597
0x599: v599 = CALLDATALOAD v585(0x4)
0x59a: v59a(0x17e7) = CONST 
0x59d: JUMP v59a(0x17e7)
----------------------------------

Begin block 0x59e
prev = {'0x17e7'}, next = {}
----------------------------------
Block 0x59e
0x59f: v59f(0x40) = CONST 
0x5a2: v5a2 = MLOAD v59f(0x40)
0x5a3: v5a3(0x1) = CONST 
0x5a5: v5a5(0xa0) = CONST 
0x5a7: v5a7(0x2) = CONST 
0x5a9: v5a9(0x10000000000000000000000000000000000000000) = EXP v5a7(0x2) v5a5(0xa0)
0x5aa: v5aa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5a9(0x10000000000000000000000000000000000000000) v5a3(0x1)
0x5ad: v5ad = AND v181e v5aa(0xffffffffffffffffffffffffffffffffffffffff)
0x5af: MSTORE v5a2 v5ad
0x5b0: v5b0(0x20) = CONST 
0x5b3: v5b3 = ADD v5a2 v5b0(0x20)
0x5b7: MSTORE v5b3 v17ff
0x5ba: v5ba = ADD v59f(0x40) v5a2
0x5be: MSTORE v5ba v1804
0x5bf: v5bf(0x60) = CONST 
0x5c2: v5c2 = ADD v5a2 v5bf(0x60)
0x5c6: MSTORE v5c2 v1808
0x5c7: v5c7(0x80) = CONST 
0x5ca: v5ca = ADD v5a2 v5c7(0x80)
0x5ce: MSTORE v5ca v180d
0x5cf: v5cf(0xffffffff) = CONST 
0x5d6: v5d6 = AND v5cf(0xffffffff) v182e
0x5d7: v5d7(0xa0) = CONST 
0x5da: v5da = ADD v5a2 v5d7(0xa0)
0x5db: MSTORE v5da v5d6
0x5de: v5de = AND v5cf(0xffffffff) v1839
0x5df: v5df(0xc0) = CONST 
0x5e2: v5e2 = ADD v5a2 v5df(0xc0)
0x5e3: MSTORE v5e2 v5de
0x5e4: v5e4 = AND v5cf(0xffffffff) v1847
0x5e5: v5e5(0xe0) = CONST 
0x5e8: v5e8 = ADD v5a2 v5e5(0xe0)
0x5e9: MSTORE v5e8 v5e4
0x5ea: v5ea(0xffff) = CONST 
0x5ed: v5ed = AND v5ea(0xffff) v185c
0x5ee: v5ee(0x100) = CONST 
0x5f2: v5f2 = ADD v5a2 v5ee(0x100)
0x5f3: MSTORE v5f2 v5ed
0x5f4: v5f4 = MLOAD v59f(0x40)
0x5f8: v5f8 = SUB v5a2 v5f4
0x5f9: v5f9(0x120) = CONST 
0x5fc: v5fc = ADD v5f9(0x120) v5f8
0x5fe: RETURN v5f4 v5fc
----------------------------------

Begin block 0x5ff
prev = {}, next = {'0x60b', '0x607'}
----------------------------------
function transferOwnership(address)()
Block 0x5ff
0x600: v600 = CALLVALUE 
0x602: v602 = ISZERO v600
0x603: v603(0x60b) = CONST 
0x606: JUMPI v603(0x60b) v602
----------------------------------

Begin block 0x607
prev = {'0x5ff'}, next = {}
----------------------------------
Block 0x607
0x607: v607(0x0) = CONST 
0x60a: REVERT v607(0x0) v607(0x0)
----------------------------------

Begin block 0x60b
prev = {'0x5ff'}, next = {'0x61e', '0x622'}
----------------------------------
Block 0x60b
0x60d: v60d(0x185) = CONST 
0x610: v610(0x4) = CONST 
0x613: v613 = CALLDATASIZE 
0x614: v614 = SUB v613 v610(0x4)
0x615: v615(0x20) = CONST 
0x618: v618 = LT v614 v615(0x20)
0x619: v619 = ISZERO v618
0x61a: v61a(0x622) = CONST 
0x61d: JUMPI v61a(0x622) v619
----------------------------------

Begin block 0x61e
prev = {'0x60b'}, next = {}
----------------------------------
Block 0x61e
0x61e: v61e(0x0) = CONST 
0x621: REVERT v61e(0x0) v61e(0x0)
----------------------------------

Begin block 0x622
prev = {'0x60b'}, next = {'0x185f'}
----------------------------------
Block 0x622
0x624: v624 = CALLDATALOAD v610(0x4)
0x625: v625(0x1) = CONST 
0x627: v627(0xa0) = CONST 
0x629: v629(0x2) = CONST 
0x62b: v62b(0x10000000000000000000000000000000000000000) = EXP v629(0x2) v627(0xa0)
0x62c: v62c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v62b(0x10000000000000000000000000000000000000000) v625(0x1)
0x62d: v62d = AND v62c(0xffffffffffffffffffffffffffffffffffffffff) v624
0x62e: v62e(0x185f) = CONST 
0x631: JUMP v62e(0x185f)
----------------------------------

Begin block 0x632
prev = {'0x16f'}, next = {'0x645', '0x67e'}
----------------------------------
Block 0x632
0x633: v633(0x1) = CONST 
0x635: v635 = SLOAD v633(0x1)
0x636: v636(0x1) = CONST 
0x638: v638(0xa0) = CONST 
0x63a: v63a(0x2) = CONST 
0x63c: v63c(0x10000000000000000000000000000000000000000) = EXP v63a(0x2) v638(0xa0)
0x63d: v63d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v63c(0x10000000000000000000000000000000000000000) v636(0x1)
0x63e: v63e = AND v63d(0xffffffffffffffffffffffffffffffffffffffff) v635
0x63f: v63f = CALLER 
0x640: v640 = EQ v63f v63e
0x641: v641(0x67e) = CONST 
0x644: JUMPI v641(0x67e) v640
----------------------------------

Begin block 0x645
prev = {'0x632'}, next = {}
----------------------------------
Block 0x645
0x645: v645(0x40) = CONST 
0x647: v647 = MLOAD v645(0x40)
0x648: v648(0xe5) = CONST 
0x64a: v64a(0x2) = CONST 
0x64c: v64c(0x2000000000000000000000000000000000000000000000000000000000) = EXP v64a(0x2) v648(0xe5)
0x64d: v64d(0x461bcd) = CONST 
0x651: v651(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v64d(0x461bcd) v64c(0x2000000000000000000000000000000000000000000000000000000000)
0x653: MSTORE v647 v651(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x654: v654(0x4) = CONST 
0x656: v656 = ADD v654(0x4) v647
0x659: v659(0x20) = CONST 
0x65b: v65b = ADD v659(0x20) v656
0x65e: v65e = SUB v65b v656
0x660: MSTORE v656 v65e
0x661: v661(0x29) = CONST 
0x664: MSTORE v65b v661(0x29)
0x665: v665(0x20) = CONST 
0x667: v667 = ADD v665(0x20) v65b
0x669: v669(0x1b2e) = CONST 
0x66c: v66c(0x29) = CONST 
0x66f: CODECOPY v667 v669(0x1b2e) v66c(0x29)
0x670: v670(0x40) = CONST 
0x672: v672 = ADD v670(0x40) v667
0x676: v676(0x40) = CONST 
0x678: v678 = MLOAD v676(0x40)
0x67b: v67b = SUB v672 v678
0x67d: REVERT v678 v67b
----------------------------------

Begin block 0x67e
prev = {'0x632'}, next = {'0x1850x14c'}
----------------------------------
Block 0x67e
0x67f: v67f(0x1) = CONST 
0x681: v681(0xa0) = CONST 
0x683: v683(0x2) = CONST 
0x685: v685(0x10000000000000000000000000000000000000000) = EXP v683(0x2) v681(0xa0)
0x686: v686(0xffffffffffffffffffffffffffffffffffffffff) = SUB v685(0x10000000000000000000000000000000000000000) v67f(0x1)
0x688: v688 = AND v17b v686(0xffffffffffffffffffffffffffffffffffffffff)
0x689: v689(0x0) = CONST 
0x68d: MSTORE v689(0x0) v688
0x68e: v68e(0x2) = CONST 
0x690: v690(0x20) = CONST 
0x694: MSTORE v690(0x20) v68e(0x2)
0x695: v695(0x40) = CONST 
0x69a: v69a = SHA3 v689(0x0) v695(0x40)
0x69d: SSTORE v69a v180
0x69f: v69f = MLOAD v695(0x40)
0x6a2: MSTORE v69f v688
0x6a3: v6a3 = TIMESTAMP 
0x6a6: v6a6 = ADD v69f v690(0x20)
0x6a7: MSTORE v6a6 v6a3
0x6aa: v6aa = ADD v695(0x40) v69f
0x6ad: MSTORE v6aa v180
0x6ae: v6ae = MLOAD v695(0x40)
0x6af: v6af(0x6cc08eda8c04b8d9b54221711cc33598ba2583aa556191d8e8787bca3f88d318) = CONST 
0x6d3: v6d3 = SUB v69f v6ae
0x6d4: v6d4(0x60) = CONST 
0x6d6: v6d6 = ADD v6d4(0x60) v6d3
0x6d8: LOG1 v6ae v6d6 v6af(0x6cc08eda8c04b8d9b54221711cc33598ba2583aa556191d8e8787bca3f88d318)
0x6db: JUMP v15a(0x185)
----------------------------------

Begin block 0x6dc
prev = {'0x1aa'}, next = {'0x1b1'}
----------------------------------
Block 0x6dc
0x6dd: v6dd(0x4) = CONST 
0x6df: v6df(0x20) = CONST 
0x6e1: MSTORE v6df(0x20) v6dd(0x4)
0x6e2: v6e2(0x0) = CONST 
0x6e6: MSTORE v6e2(0x0) v1ac
0x6e7: v6e7(0x40) = CONST 
0x6ea: v6ea = SHA3 v6e2(0x0) v6e7(0x40)
0x6ec: v6ec = SLOAD v6ea
0x6ed: v6ed(0x1) = CONST 
0x6f0: v6f0 = ADD v6ea v6ed(0x1)
0x6f1: v6f1 = SLOAD v6f0
0x6f2: v6f2(0x2) = CONST 
0x6f5: v6f5 = ADD v6ea v6f2(0x2)
0x6f6: v6f6 = SLOAD v6f5
0x6f7: v6f7(0x3) = CONST 
0x6fb: v6fb = ADD v6ea v6f7(0x3)
0x6fc: v6fc = SLOAD v6fb
0x6fd: v6fd(0x1) = CONST 
0x6ff: v6ff(0xa0) = CONST 
0x701: v701(0x2) = CONST 
0x703: v703(0x10000000000000000000000000000000000000000) = EXP v701(0x2) v6ff(0xa0)
0x704: v704(0xffffffffffffffffffffffffffffffffffffffff) = SUB v703(0x10000000000000000000000000000000000000000) v6fd(0x1)
0x707: v707 = AND v6ec v704(0xffffffffffffffffffffffffffffffffffffffff)
0x70c: JUMP v195(0x1b1)
----------------------------------

Begin block 0x70d
prev = {'0x1f7'}, next = {'0x7b0', '0x741'}
----------------------------------
Block 0x70d
0x70e: v70e(0x0) = CONST 
0x711: MSTORE v70e(0x0) v70e(0x0)
0x712: v712(0x2) = CONST 
0x714: v714(0x20) = CONST 
0x716: MSTORE v714(0x20) v712(0x2)
0x717: v717(0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b) = CONST 
0x738: v738 = SLOAD v717(0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b)
0x739: v739 = ISZERO v738
0x73b: v73b = ISZERO v739
0x73d: v73d(0x7b0) = CONST 
0x740: JUMPI v73d(0x7b0) v739
----------------------------------

Begin block 0x741
prev = {'0x70d'}, next = {'0x7b0', '0x775'}
----------------------------------
Block 0x741
0x742: v742(0x0) = CONST 
0x745: MSTORE v742(0x0) v742(0x0)
0x746: v746(0x2) = CONST 
0x748: v748(0x20) = CONST 
0x74a: MSTORE v748(0x20) v746(0x2)
0x74b: v74b(0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b) = CONST 
0x76c: v76c = SLOAD v74b(0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b)
0x76d: v76d = CALLVALUE 
0x76e: v76e = LT v76d v76c
0x76f: v76f = ISZERO v76e
0x771: v771(0x7b0) = CONST 
0x774: JUMPI v771(0x7b0) v76f
----------------------------------

Begin block 0x775
prev = {'0x741'}, next = {'0x7b0'}
----------------------------------
Block 0x775
0x776: v776(0x1) = CONST 
0x778: v778(0xa0) = CONST 
0x77a: v77a(0x2) = CONST 
0x77c: v77c(0x10000000000000000000000000000000000000000) = EXP v77a(0x2) v778(0xa0)
0x77d: v77d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v77c(0x10000000000000000000000000000000000000000) v776(0x1)
0x77f: v77f = AND v202 v77d(0xffffffffffffffffffffffffffffffffffffffff)
0x780: v780(0x0) = CONST 
0x784: MSTORE v780(0x0) v77f
0x785: v785(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc) = CONST 
0x7a6: v7a6(0x20) = CONST 
0x7a8: MSTORE v7a6(0x20) v785(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc)
0x7a9: v7a9(0x40) = CONST 
0x7ac: v7ac = SHA3 v780(0x0) v7a9(0x40)
0x7ad: v7ad = SLOAD v7ac
0x7ae: v7ae = ISZERO v7ad
0x7af: v7af = ISZERO v7ae
----------------------------------

Begin block 0x7b0
prev = {'0x741', '0x775', '0x70d'}, next = {'0x7ee', '0x7b5'}
----------------------------------
Block 0x7b0
0x7b0_0x0: v7b0_0 = PHI v73b v76f v7af
0x7b1: v7b1(0x7ee) = CONST 
0x7b4: JUMPI v7b1(0x7ee) v7b0_0
----------------------------------

Begin block 0x7b5
prev = {'0x7b0'}, next = {}
----------------------------------
Block 0x7b5
0x7b5: v7b5(0x40) = CONST 
0x7b7: v7b7 = MLOAD v7b5(0x40)
0x7b8: v7b8(0xe5) = CONST 
0x7ba: v7ba(0x2) = CONST 
0x7bc: v7bc(0x2000000000000000000000000000000000000000000000000000000000) = EXP v7ba(0x2) v7b8(0xe5)
0x7bd: v7bd(0x461bcd) = CONST 
0x7c1: v7c1(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v7bd(0x461bcd) v7bc(0x2000000000000000000000000000000000000000000000000000000000)
0x7c3: MSTORE v7b7 v7c1(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x7c4: v7c4(0x4) = CONST 
0x7c6: v7c6 = ADD v7c4(0x4) v7b7
0x7c9: v7c9(0x20) = CONST 
0x7cb: v7cb = ADD v7c9(0x20) v7c6
0x7ce: v7ce = SUB v7cb v7c6
0x7d0: MSTORE v7c6 v7ce
0x7d1: v7d1(0x26) = CONST 
0x7d4: MSTORE v7cb v7d1(0x26)
0x7d5: v7d5(0x20) = CONST 
0x7d7: v7d7 = ADD v7d5(0x20) v7cb
0x7d9: v7d9(0x1bdb) = CONST 
0x7dc: v7dc(0x26) = CONST 
0x7df: CODECOPY v7d7 v7d9(0x1bdb) v7dc(0x26)
0x7e0: v7e0(0x40) = CONST 
0x7e2: v7e2 = ADD v7e0(0x40) v7d7
0x7e6: v7e6(0x40) = CONST 
0x7e8: v7e8 = MLOAD v7e6(0x40)
0x7eb: v7eb = SUB v7e2 v7e8
0x7ed: REVERT v7e8 v7eb
----------------------------------

Begin block 0x7ee
prev = {'0x7b0'}, next = {'0x836'}
----------------------------------
Block 0x7ee
0x7ef: v7ef(0x1) = CONST 
0x7f1: v7f1(0xa0) = CONST 
0x7f3: v7f3(0x2) = CONST 
0x7f5: v7f5(0x10000000000000000000000000000000000000000) = EXP v7f3(0x2) v7f1(0xa0)
0x7f6: v7f6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7f5(0x10000000000000000000000000000000000000000) v7ef(0x1)
0x7f8: v7f8 = AND v202 v7f6(0xffffffffffffffffffffffffffffffffffffffff)
0x7f9: v7f9(0x0) = CONST 
0x7fd: MSTORE v7f9(0x0) v7f8
0x7fe: v7fe(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc) = CONST 
0x81f: v81f(0x20) = CONST 
0x821: MSTORE v81f(0x20) v7fe(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc)
0x822: v822(0x40) = CONST 
0x825: v825 = SHA3 v7f9(0x0) v822(0x40)
0x826: v826 = SLOAD v825
0x827: v827(0x836) = CONST 
0x82b: v82b = CALLVALUE 
0x82c: v82c(0xffffffff) = CONST 
0x831: v831(0x18c7) = CONST 
0x834: v834(0x18c7) = AND v831(0x18c7) v82c(0xffffffff)
0x835: v835_0 = CALLPRIVATE v834(0x18c7) v82b v826 v827(0x836)
----------------------------------

Begin block 0x836
prev = {'0x7ee'}, next = {'0x1850x1e1'}
----------------------------------
Block 0x836
0x837: v837(0x1) = CONST 
0x839: v839(0xa0) = CONST 
0x83b: v83b(0x2) = CONST 
0x83d: v83d(0x10000000000000000000000000000000000000000) = EXP v83b(0x2) v839(0xa0)
0x83e: v83e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v83d(0x10000000000000000000000000000000000000000) v837(0x1)
0x840: v840 = AND v202 v83e(0xffffffffffffffffffffffffffffffffffffffff)
0x841: v841(0x0) = CONST 
0x845: MSTORE v841(0x0) v840
0x846: v846(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc) = CONST 
0x867: v867(0x20) = CONST 
0x86b: MSTORE v867(0x20) v846(0x5b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc)
0x86c: v86c(0x40) = CONST 
0x870: v870 = SHA3 v841(0x0) v86c(0x40)
0x874: SSTORE v870 v835_0
0x876: v876 = MLOAD v86c(0x40)
0x879: MSTORE v876 v841(0x0)
0x87a: v87a = CALLVALUE 
0x87d: v87d = ADD v876 v867(0x20)
0x87e: MSTORE v87d v87a
0x880: v880 = MLOAD v86c(0x40)
0x883: v883(0x795c91e2fef542f2e8bccd08552a8961ecb158d0f47be08f5c44b349993b07a9) = CONST 
0x8a8: v8a8 = SUB v876 v880
0x8a9: v8a9 = ADD v8a8 v86c(0x40)
0x8ab: LOG2 v880 v8a9 v883(0x795c91e2fef542f2e8bccd08552a8961ecb158d0f47be08f5c44b349993b07a9) v840
0x8ad: JUMP v1e2(0x185)
----------------------------------

Begin block 0x8ae
prev = {'0x213'}, next = {'0x8c1', '0x8fa'}
----------------------------------
Block 0x8ae
0x8af: v8af(0x1) = CONST 
0x8b1: v8b1 = SLOAD v8af(0x1)
0x8b2: v8b2(0x1) = CONST 
0x8b4: v8b4(0xa0) = CONST 
0x8b6: v8b6(0x2) = CONST 
0x8b8: v8b8(0x10000000000000000000000000000000000000000) = EXP v8b6(0x2) v8b4(0xa0)
0x8b9: v8b9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b8(0x10000000000000000000000000000000000000000) v8b2(0x1)
0x8ba: v8ba = AND v8b9(0xffffffffffffffffffffffffffffffffffffffff) v8b1
0x8bb: v8bb = CALLER 
0x8bc: v8bc = EQ v8bb v8ba
0x8bd: v8bd(0x8fa) = CONST 
0x8c0: JUMPI v8bd(0x8fa) v8bc
----------------------------------

Begin block 0x8c1
prev = {'0x8ae'}, next = {}
----------------------------------
Block 0x8c1
0x8c1: v8c1(0x40) = CONST 
0x8c3: v8c3 = MLOAD v8c1(0x40)
0x8c4: v8c4(0xe5) = CONST 
0x8c6: v8c6(0x2) = CONST 
0x8c8: v8c8(0x2000000000000000000000000000000000000000000000000000000000) = EXP v8c6(0x2) v8c4(0xe5)
0x8c9: v8c9(0x461bcd) = CONST 
0x8cd: v8cd(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v8c9(0x461bcd) v8c8(0x2000000000000000000000000000000000000000000000000000000000)
0x8cf: MSTORE v8c3 v8cd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x8d0: v8d0(0x4) = CONST 
0x8d2: v8d2 = ADD v8d0(0x4) v8c3
0x8d5: v8d5(0x20) = CONST 
0x8d7: v8d7 = ADD v8d5(0x20) v8d2
0x8da: v8da = SUB v8d7 v8d2
0x8dc: MSTORE v8d2 v8da
0x8dd: v8dd(0x29) = CONST 
0x8e0: MSTORE v8d7 v8dd(0x29)
0x8e1: v8e1(0x20) = CONST 
0x8e3: v8e3 = ADD v8e1(0x20) v8d7
0x8e5: v8e5(0x1b2e) = CONST 
0x8e8: v8e8(0x29) = CONST 
0x8eb: CODECOPY v8e3 v8e5(0x1b2e) v8e8(0x29)
0x8ec: v8ec(0x40) = CONST 
0x8ee: v8ee = ADD v8ec(0x40) v8e3
0x8f2: v8f2(0x40) = CONST 
0x8f4: v8f4 = MLOAD v8f2(0x40)
0x8f7: v8f7 = SUB v8ee v8f4
0x8f9: REVERT v8f4 v8f7
----------------------------------

Begin block 0x8fa
prev = {'0x8ae'}, next = {'0x936', '0x93f'}
----------------------------------
Block 0x8fa
0x8fb: v8fb(0x0) = CONST 
0x8ff: MSTORE v8fb(0x0) v8fb(0x0)
0x900: v900(0x6) = CONST 
0x902: v902(0x20) = CONST 
0x904: MSTORE v902(0x20) v900(0x6)
0x905: v905(0x0) = CONST 
0x908: v908 = MLOAD v905(0x0)
0x909: v909(0x20) = CONST 
0x90b: v90b(0x1c48) = CONST 
0x913: MSTORE v905(0x0) v908
0x914: v914 = SLOAD v1cf9(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8)
0x915: v915(0x40) = CONST 
0x917: v917 = MLOAD v915(0x40)
0x918: v918 = CALLER 
0x91b: v91b = ISZERO v914
0x91c: v91c(0x8fc) = CONST 
0x91f: v91f = MUL v91c(0x8fc) v91b
0x929: v929 = CALL v91f v918 v914 v917 v8fb(0x0) v917 v8fb(0x0)
0x92f: v92f = ISZERO v929
0x931: v931 = ISZERO v92f
0x932: v932(0x93f) = CONST 
0x935: JUMPI v932(0x93f) v931
0x1cf9: v1cf9(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
----------------------------------

Begin block 0x936
prev = {'0x8fa'}, next = {}
----------------------------------
Block 0x936
0x936: v936 = RETURNDATASIZE 
0x937: v937(0x0) = CONST 
0x93a: RETURNDATACOPY v937(0x0) v937(0x0) v936
0x93b: v93b = RETURNDATASIZE 
0x93c: v93c(0x0) = CONST 
0x93e: REVERT v93c(0x0) v93b
----------------------------------

Begin block 0x93f
prev = {'0x8fa'}, next = {'0x1850x207'}
----------------------------------
Block 0x93f
0x941: v941(0x0) = CONST 
0x945: MSTORE v941(0x0) v941(0x0)
0x946: v946(0x6) = CONST 
0x948: v948(0x20) = CONST 
0x94a: MSTORE v948(0x20) v946(0x6)
0x94b: v94b(0x0) = CONST 
0x94e: v94e = MLOAD v94b(0x0)
0x94f: v94f(0x20) = CONST 
0x951: v951(0x1c48) = CONST 
0x959: MSTORE v94b(0x0) v94e
0x95a: SSTORE v1cfe(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) v941(0x0)
0x95b: JUMP v215(0x185)
0x1cfe: v1cfe(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
----------------------------------

Begin block 0x95c
prev = {'0x228'}, next = {'0x2310x21c'}
----------------------------------
Block 0x95c
0x95d: v95d(0x1) = CONST 
0x95f: v95f = SLOAD v95d(0x1)
0x960: v960(0x1) = CONST 
0x962: v962(0xa0) = CONST 
0x964: v964(0x2) = CONST 
0x966: v966(0x10000000000000000000000000000000000000000) = EXP v964(0x2) v962(0xa0)
0x967: v967(0xffffffffffffffffffffffffffffffffffffffff) = SUB v966(0x10000000000000000000000000000000000000000) v960(0x1)
0x968: v968 = AND v967(0xffffffffffffffffffffffffffffffffffffffff) v95f
0x96a: JUMP v22a(0x231)
----------------------------------

Begin block 0x96b
prev = {'0x270'}, next = {'0x2800x24d'}
----------------------------------
Block 0x96b
0x96c: v96c(0x2) = CONST 
0x96e: v96e(0x20) = CONST 
0x970: MSTORE v96e(0x20) v96c(0x2)
0x971: v971(0x0) = CONST 
0x975: MSTORE v971(0x0) v27b
0x976: v976(0x40) = CONST 
0x979: v979 = SHA3 v971(0x0) v976(0x40)
0x97a: v97a = SLOAD v979
0x97c: JUMP v25b(0x280)
----------------------------------

Begin block 0x97d
prev = {'0x2b5'}, next = {'0x2800x292'}
----------------------------------
Block 0x97d
0x97e: v97e(0x5) = CONST 
0x980: v980(0x20) = CONST 
0x984: MSTORE v980(0x20) v97e(0x5)
0x985: v985(0x0) = CONST 
0x989: MSTORE v985(0x0) v2c2
0x98a: v98a(0x40) = CONST 
0x98e: v98e = SHA3 v985(0x0) v98a(0x40)
0x991: MSTORE v980(0x20) v98e
0x994: MSTORE v985(0x0) v2c8
0x996: v996 = SHA3 v985(0x0) v98a(0x40)
0x997: v997 = SLOAD v996
0x999: JUMP v2a0(0x280)
----------------------------------

Begin block 0x99a
prev = {'0x2f0'}, next = {'0x2800x2cd'}
----------------------------------
Block 0x99a
0x99b: v99b(0x6) = CONST 
0x99d: v99d(0x20) = CONST 
0x99f: MSTORE v99d(0x20) v99b(0x6)
0x9a0: v9a0(0x0) = CONST 
0x9a4: MSTORE v9a0(0x0) v2fb
0x9a5: v9a5(0x40) = CONST 
0x9a8: v9a8 = SHA3 v9a0(0x0) v9a5(0x40)
0x9a9: v9a9 = SLOAD v9a8
0x9ab: JUMP v2db(0x280)
----------------------------------

Begin block 0x9ac
prev = {'0x323'}, next = {'0x9bf', '0x9f8'}
----------------------------------
Block 0x9ac
0x9ad: v9ad(0x1) = CONST 
0x9af: v9af = SLOAD v9ad(0x1)
0x9b0: v9b0(0x1) = CONST 
0x9b2: v9b2(0xa0) = CONST 
0x9b4: v9b4(0x2) = CONST 
0x9b6: v9b6(0x10000000000000000000000000000000000000000) = EXP v9b4(0x2) v9b2(0xa0)
0x9b7: v9b7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9b6(0x10000000000000000000000000000000000000000) v9b0(0x1)
0x9b8: v9b8 = AND v9b7(0xffffffffffffffffffffffffffffffffffffffff) v9af
0x9b9: v9b9 = CALLER 
0x9ba: v9ba = EQ v9b9 v9b8
0x9bb: v9bb(0x9f8) = CONST 
0x9be: JUMPI v9bb(0x9f8) v9ba
----------------------------------

Begin block 0x9bf
prev = {'0x9ac'}, next = {}
----------------------------------
Block 0x9bf
0x9bf: v9bf(0x40) = CONST 
0x9c1: v9c1 = MLOAD v9bf(0x40)
0x9c2: v9c2(0xe5) = CONST 
0x9c4: v9c4(0x2) = CONST 
0x9c6: v9c6(0x2000000000000000000000000000000000000000000000000000000000) = EXP v9c4(0x2) v9c2(0xe5)
0x9c7: v9c7(0x461bcd) = CONST 
0x9cb: v9cb(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v9c7(0x461bcd) v9c6(0x2000000000000000000000000000000000000000000000000000000000)
0x9cd: MSTORE v9c1 v9cb(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x9ce: v9ce(0x4) = CONST 
0x9d0: v9d0 = ADD v9ce(0x4) v9c1
0x9d3: v9d3(0x20) = CONST 
0x9d5: v9d5 = ADD v9d3(0x20) v9d0
0x9d8: v9d8 = SUB v9d5 v9d0
0x9da: MSTORE v9d0 v9d8
0x9db: v9db(0x29) = CONST 
0x9de: MSTORE v9d5 v9db(0x29)
0x9df: v9df(0x20) = CONST 
0x9e1: v9e1 = ADD v9df(0x20) v9d5
0x9e3: v9e3(0x1b2e) = CONST 
0x9e6: v9e6(0x29) = CONST 
0x9e9: CODECOPY v9e1 v9e3(0x1b2e) v9e6(0x29)
0x9ea: v9ea(0x40) = CONST 
0x9ec: v9ec = ADD v9ea(0x40) v9e1
0x9f0: v9f0(0x40) = CONST 
0x9f2: v9f2 = MLOAD v9f0(0x40)
0x9f5: v9f5 = SUB v9ec v9f2
0x9f7: REVERT v9f2 v9f5
----------------------------------

Begin block 0x9f8
prev = {'0x9ac'}, next = {'0xa68', '0xa6c'}
----------------------------------
Block 0x9f8
0x9f9: v9f9(0x1) = CONST 
0x9fb: v9fb(0xa0) = CONST 
0x9fd: v9fd(0x2) = CONST 
0x9ff: v9ff(0x10000000000000000000000000000000000000000) = EXP v9fd(0x2) v9fb(0xa0)
0xa00: va00(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9ff(0x10000000000000000000000000000000000000000) v9f9(0x1)
0xa02: va02 = AND v32e va00(0xffffffffffffffffffffffffffffffffffffffff)
0xa03: va03(0x0) = CONST 
0xa07: MSTORE va03(0x0) va02
0xa08: va08(0x6) = CONST 
0xa0a: va0a(0x20) = CONST 
0xa0e: MSTORE va0a(0x20) va08(0x6)
0xa0f: va0f(0x40) = CONST 
0xa13: va13 = SHA3 va03(0x0) va0f(0x40)
0xa14: va14 = SLOAD va13
0xa16: va16 = MLOAD va0f(0x40)
0xa17: va17(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = CONST 
0xa39: MSTORE va16 va17(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xa3a: va3a = CALLER 
0xa3b: va3b(0x4) = CONST 
0xa3e: va3e = ADD va16 va3b(0x4)
0xa3f: MSTORE va3e va3a
0xa40: va40(0x24) = CONST 
0xa43: va43 = ADD va16 va40(0x24)
0xa47: MSTORE va43 va14
0xa49: va49 = MLOAD va0f(0x40)
0xa4a: va4a(0xa9059cbb) = CONST 
0xa50: va50(0x44) = CONST 
0xa54: va54 = ADD va16 va50(0x44)
0xa59: va59 = SUB va16 va49
0xa5a: va5a = ADD va59 va50(0x44)
0xa60: va60 = EXTCODESIZE va02
0xa61: va61 = ISZERO va60
0xa63: va63 = ISZERO va61
0xa64: va64(0xa6c) = CONST 
0xa67: JUMPI va64(0xa6c) va63
----------------------------------

Begin block 0xa68
prev = {'0x9f8'}, next = {}
----------------------------------
Block 0xa68
0xa68: va68(0x0) = CONST 
0xa6b: REVERT va68(0x0) va68(0x0)
----------------------------------

Begin block 0xa6c
prev = {'0x9f8'}, next = {'0xa80', '0xa77'}
----------------------------------
Block 0xa6c
0xa6e: va6e = GAS 
0xa6f: va6f = CALL va6e va02 va03(0x0) va49 va5a va49 va0a(0x20)
0xa70: va70 = ISZERO va6f
0xa72: va72 = ISZERO va70
0xa73: va73(0xa80) = CONST 
0xa76: JUMPI va73(0xa80) va72
----------------------------------

Begin block 0xa77
prev = {'0xa6c'}, next = {}
----------------------------------
Block 0xa77
0xa77: va77 = RETURNDATASIZE 
0xa78: va78(0x0) = CONST 
0xa7b: RETURNDATACOPY va78(0x0) va78(0x0) va77
0xa7c: va7c = RETURNDATASIZE 
0xa7d: va7d(0x0) = CONST 
0xa7f: REVERT va7d(0x0) va7c
----------------------------------

Begin block 0xa80
prev = {'0xa6c'}, next = {'0xa92', '0xa96'}
----------------------------------
Block 0xa80
0xa85: va85(0x40) = CONST 
0xa87: va87 = MLOAD va85(0x40)
0xa88: va88 = RETURNDATASIZE 
0xa89: va89(0x20) = CONST 
0xa8c: va8c = LT va88 va89(0x20)
0xa8d: va8d = ISZERO va8c
0xa8e: va8e(0xa96) = CONST 
0xa91: JUMPI va8e(0xa96) va8d
----------------------------------

Begin block 0xa92
prev = {'0xa80'}, next = {}
----------------------------------
Block 0xa92
0xa92: va92(0x0) = CONST 
0xa95: REVERT va92(0x0) va92(0x0)
----------------------------------

Begin block 0xa96
prev = {'0xa80'}, next = {'0xaec', '0xa9d'}
----------------------------------
Block 0xa96
0xa98: va98 = MLOAD va87
0xa99: va99(0xaec) = CONST 
0xa9c: JUMPI va99(0xaec) va98
----------------------------------

Begin block 0xa9d
prev = {'0xa96'}, next = {}
----------------------------------
Block 0xa9d
0xa9d: va9d(0x40) = CONST 
0xaa0: vaa0 = MLOAD va9d(0x40)
0xaa1: vaa1(0xe5) = CONST 
0xaa3: vaa3(0x2) = CONST 
0xaa5: vaa5(0x2000000000000000000000000000000000000000000000000000000000) = EXP vaa3(0x2) vaa1(0xe5)
0xaa6: vaa6(0x461bcd) = CONST 
0xaaa: vaaa(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vaa6(0x461bcd) vaa5(0x2000000000000000000000000000000000000000000000000000000000)
0xaac: MSTORE vaa0 vaaa(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xaad: vaad(0x20) = CONST 
0xaaf: vaaf(0x4) = CONST 
0xab2: vab2 = ADD vaa0 vaaf(0x4)
0xab3: MSTORE vab2 vaad(0x20)
0xab4: vab4(0x15) = CONST 
0xab6: vab6(0x24) = CONST 
0xab9: vab9 = ADD vaa0 vab6(0x24)
0xaba: MSTORE vab9 vab4(0x15)
0xabb: vabb(0x4661696c6564204552433230207472616e736665720000000000000000000000) = CONST 
0xadc: vadc(0x44) = CONST 
0xadf: vadf = ADD vaa0 vadc(0x44)
0xae0: MSTORE vadf vabb(0x4661696c6564204552433230207472616e736665720000000000000000000000)
0xae2: vae2 = MLOAD va9d(0x40)
0xae6: vae6 = SUB vaa0 vae2
0xae7: vae7(0x64) = CONST 
0xae9: vae9 = ADD vae7(0x64) vae6
0xaeb: REVERT vae2 vae9
----------------------------------

Begin block 0xaec
prev = {'0xa96'}, next = {'0x1850x300'}
----------------------------------
Block 0xaec
0xaed: vaed(0x1) = CONST 
0xaef: vaef(0xa0) = CONST 
0xaf1: vaf1(0x2) = CONST 
0xaf3: vaf3(0x10000000000000000000000000000000000000000) = EXP vaf1(0x2) vaef(0xa0)
0xaf4: vaf4(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf3(0x10000000000000000000000000000000000000000) vaed(0x1)
0xaf5: vaf5 = AND vaf4(0xffffffffffffffffffffffffffffffffffffffff) v32e
0xaf6: vaf6(0x0) = CONST 
0xafa: MSTORE vaf6(0x0) vaf5
0xafb: vafb(0x6) = CONST 
0xafd: vafd(0x20) = CONST 
0xaff: MSTORE vafd(0x20) vafb(0x6)
0xb00: vb00(0x40) = CONST 
0xb03: vb03 = SHA3 vaf6(0x0) vb00(0x40)
0xb04: SSTORE vb03 vaf6(0x0)
0xb05: JUMP v30e(0x185)
----------------------------------

Begin block 0xb06
prev = {'0x357'}, next = {'0xb19', '0xb52'}
----------------------------------
Block 0xb06
0xb07: vb07(0x1) = CONST 
0xb09: vb09 = SLOAD vb07(0x1)
0xb0a: vb0a(0x1) = CONST 
0xb0c: vb0c(0xa0) = CONST 
0xb0e: vb0e(0x2) = CONST 
0xb10: vb10(0x10000000000000000000000000000000000000000) = EXP vb0e(0x2) vb0c(0xa0)
0xb11: vb11(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb10(0x10000000000000000000000000000000000000000) vb0a(0x1)
0xb12: vb12 = AND vb11(0xffffffffffffffffffffffffffffffffffffffff) vb09
0xb13: vb13 = CALLER 
0xb14: vb14 = EQ vb13 vb12
0xb15: vb15(0xb52) = CONST 
0xb18: JUMPI vb15(0xb52) vb14
----------------------------------

Begin block 0xb19
prev = {'0xb06'}, next = {}
----------------------------------
Block 0xb19
0xb19: vb19(0x40) = CONST 
0xb1b: vb1b = MLOAD vb19(0x40)
0xb1c: vb1c(0xe5) = CONST 
0xb1e: vb1e(0x2) = CONST 
0xb20: vb20(0x2000000000000000000000000000000000000000000000000000000000) = EXP vb1e(0x2) vb1c(0xe5)
0xb21: vb21(0x461bcd) = CONST 
0xb25: vb25(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vb21(0x461bcd) vb20(0x2000000000000000000000000000000000000000000000000000000000)
0xb27: MSTORE vb1b vb25(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xb28: vb28(0x4) = CONST 
0xb2a: vb2a = ADD vb28(0x4) vb1b
0xb2d: vb2d(0x20) = CONST 
0xb2f: vb2f = ADD vb2d(0x20) vb2a
0xb32: vb32 = SUB vb2f vb2a
0xb34: MSTORE vb2a vb32
0xb35: vb35(0x29) = CONST 
0xb38: MSTORE vb2f vb35(0x29)
0xb39: vb39(0x20) = CONST 
0xb3b: vb3b = ADD vb39(0x20) vb2f
0xb3d: vb3d(0x1b2e) = CONST 
0xb40: vb40(0x29) = CONST 
0xb43: CODECOPY vb3b vb3d(0x1b2e) vb40(0x29)
0xb44: vb44(0x40) = CONST 
0xb46: vb46 = ADD vb44(0x40) vb3b
0xb4a: vb4a(0x40) = CONST 
0xb4c: vb4c = MLOAD vb4a(0x40)
0xb4f: vb4f = SUB vb46 vb4c
0xb51: REVERT vb4c vb4f
----------------------------------

Begin block 0xb52
prev = {'0xb06'}, next = {'0x1a3b'}
----------------------------------
Block 0xb52
0xb53: vb53(0xb5a) = CONST 
0xb56: vb56(0x1a3b) = CONST 
0xb59: JUMP vb56(0x1a3b)
----------------------------------

Begin block 0xb5a
prev = {'0x1a3b'}, next = {'0xbce', '0xc07'}
----------------------------------
Block 0xb5a
0xb5c: vb5c(0x40) = CONST 
0xb5f: vb5f = MLOAD vb5c(0x40)
0xb60: vb60(0x120) = CONST 
0xb64: vb64 = ADD vb5f vb60(0x120)
0xb66: MSTORE vb5c(0x40) vb64
0xb67: vb67(0x1) = CONST 
0xb69: vb69(0xa0) = CONST 
0xb6b: vb6b(0x2) = CONST 
0xb6d: vb6d(0x10000000000000000000000000000000000000000) = EXP vb6b(0x2) vb69(0xa0)
0xb6e: vb6e(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb6d(0x10000000000000000000000000000000000000000) vb67(0x1)
0xb71: vb71 = AND v363 vb6e(0xffffffffffffffffffffffffffffffffffffffff)
0xb73: MSTORE vb5f vb71
0xb74: vb74(0x20) = CONST 
0xb78: vb78 = ADD vb5f vb74(0x20)
0xb7b: MSTORE vb78 v36f
0xb7e: vb7e = ADD vb5c(0x40) vb5f
0xb81: MSTORE vb7e v375
0xb82: vb82(0x60) = CONST 
0xb85: vb85 = ADD vb5f vb82(0x60)
0xb88: MSTORE vb85 v37b
0xb89: vb89(0x80) = CONST 
0xb8c: vb8c = ADD vb5f vb89(0x80)
0xb8f: MSTORE vb8c v381
0xb90: vb90(0xffffffff) = CONST 
0xb97: vb97 = AND v38f vb90(0xffffffff)
0xb98: vb98(0xa0) = CONST 
0xb9b: vb9b = ADD vb5f vb98(0xa0)
0xb9c: MSTORE vb9b vb97
0xb9f: vb9f = AND vb90(0xffffffff) v397
0xba0: vba0(0xc0) = CONST 
0xba3: vba3 = ADD vb5f vba0(0xc0)
0xba4: MSTORE vba3 vb9f
0xba6: vba6 = AND v39f vb90(0xffffffff)
0xba7: vba7(0xe0) = CONST 
0xbaa: vbaa = ADD vb5f vba7(0xe0)
0xbab: MSTORE vbaa vba6
0xbac: vbac(0xffff) = CONST 
0xbb0: vbb0 = AND v3a9 vbac(0xffff)
0xbb1: vbb1(0x100) = CONST 
0xbb5: vbb5 = ADD vb5f vbb1(0x100)
0xbb6: MSTORE vbb5 vbb0
0xbb7: vbb7(0x0) = CONST 
0xbbb: MSTORE vbb7(0x0) v369
0xbbc: vbbc(0x3) = CONST 
0xbc0: MSTORE vb74(0x20) vbbc(0x3)
0xbc4: vbc4 = SHA3 vbb7(0x0) vb5c(0x40)
0xbc5: vbc5 = SLOAD vbc4
0xbc8: vbc8 = AND vb6e(0xffffffffffffffffffffffffffffffffffffffff) vbc5
0xbc9: vbc9 = ISZERO vbc8
0xbca: vbca(0xc07) = CONST 
0xbcd: JUMPI vbca(0xc07) vbc9
----------------------------------

Begin block 0xbce
prev = {'0xb5a'}, next = {}
----------------------------------
Block 0xbce
0xbce: vbce(0x40) = CONST 
0xbd0: vbd0 = MLOAD vbce(0x40)
0xbd1: vbd1(0xe5) = CONST 
0xbd3: vbd3(0x2) = CONST 
0xbd5: vbd5(0x2000000000000000000000000000000000000000000000000000000000) = EXP vbd3(0x2) vbd1(0xe5)
0xbd6: vbd6(0x461bcd) = CONST 
0xbda: vbda(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vbd6(0x461bcd) vbd5(0x2000000000000000000000000000000000000000000000000000000000)
0xbdc: MSTORE vbd0 vbda(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xbdd: vbdd(0x4) = CONST 
0xbdf: vbdf = ADD vbdd(0x4) vbd0
0xbe2: vbe2(0x20) = CONST 
0xbe4: vbe4 = ADD vbe2(0x20) vbdf
0xbe7: vbe7 = SUB vbe4 vbdf
0xbe9: MSTORE vbdf vbe7
0xbea: vbea(0x27) = CONST 
0xbed: MSTORE vbe4 vbea(0x27)
0xbee: vbee(0x20) = CONST 
0xbf0: vbf0 = ADD vbee(0x20) vbe4
0xbf2: vbf2(0x1ae1) = CONST 
0xbf5: vbf5(0x27) = CONST 
0xbf8: CODECOPY vbf0 vbf2(0x1ae1) vbf5(0x27)
0xbf9: vbf9(0x40) = CONST 
0xbfb: vbfb = ADD vbf9(0x40) vbf0
0xbff: vbff(0x40) = CONST 
0xc01: vc01 = MLOAD vbff(0x40)
0xc04: vc04 = SUB vbfb vc01
0xc06: REVERT vc01 vc04
----------------------------------

Begin block 0xc07
prev = {'0xb5a'}, next = {'0x1850x333'}
----------------------------------
Block 0xc07
0xc08: vc08(0x0) = CONST 
0xc0c: MSTORE vc08(0x0) v369
0xc0d: vc0d(0x3) = CONST 
0xc0f: vc0f(0x20) = CONST 
0xc13: MSTORE vc0f(0x20) vc0d(0x3)
0xc14: vc14(0x40) = CONST 
0xc19: vc19 = SHA3 vc08(0x0) vc14(0x40)
0xc1b: vc1b = MLOAD vb5f
0xc1d: vc1d = SLOAD vc19
0xc1e: vc1e(0x1) = CONST 
0xc20: vc20(0xa0) = CONST 
0xc22: vc22(0x2) = CONST 
0xc24: vc24(0x10000000000000000000000000000000000000000) = EXP vc22(0x2) vc20(0xa0)
0xc25: vc25(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc24(0x10000000000000000000000000000000000000000) vc1e(0x1)
0xc28: vc28 = AND vc25(0xffffffffffffffffffffffffffffffffffffffff) vc1b
0xc29: vc29(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc3e: vc3e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vc29(0xffffffffffffffffffffffffffffffffffffffff)
0xc41: vc41 = AND vc1d vc3e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)
0xc42: vc42 = OR vc41 vc28
0xc44: SSTORE vc19 vc42
0xc47: vc47 = ADD vb5f vc0f(0x20)
0xc48: vc48 = MLOAD vc47
0xc49: vc49(0x1) = CONST 
0xc4c: vc4c = ADD vc19 vc49(0x1)
0xc4d: SSTORE vc4c vc48
0xc50: vc50 = ADD vb5f vc14(0x40)
0xc51: vc51 = MLOAD vc50
0xc52: vc52(0x2) = CONST 
0xc55: vc55 = ADD vc19 vc52(0x2)
0xc56: SSTORE vc55 vc51
0xc57: vc57(0x60) = CONST 
0xc5a: vc5a = ADD vb5f vc57(0x60)
0xc5b: vc5b = MLOAD vc5a
0xc5e: vc5e = ADD vc19 vc0d(0x3)
0xc62: SSTORE vc5e vc5b
0xc63: vc63(0x80) = CONST 
0xc66: vc66 = ADD vb5f vc63(0x80)
0xc67: vc67 = MLOAD vc66
0xc68: vc68(0x4) = CONST 
0xc6b: vc6b = ADD vc19 vc68(0x4)
0xc6c: SSTORE vc6b vc67
0xc6d: vc6d(0xa0) = CONST 
0xc70: vc70 = ADD vb5f vc6d(0xa0)
0xc71: vc71 = MLOAD vc70
0xc72: vc72(0x5) = CONST 
0xc76: vc76 = ADD vc19 vc72(0x5)
0xc78: vc78 = SLOAD vc76
0xc79: vc79(0xc0) = CONST 
0xc7c: vc7c = ADD vb5f vc79(0xc0)
0xc7d: vc7d = MLOAD vc7c
0xc7e: vc7e(0xe0) = CONST 
0xc81: vc81 = ADD vb5f vc7e(0xe0)
0xc82: vc82 = MLOAD vc81
0xc83: vc83(0x100) = CONST 
0xc87: vc87 = ADD vb5f vc83(0x100)
0xc88: vc88 = MLOAD vc87
0xc89: vc89(0xffff) = CONST 
0xc8c: vc8c = AND vc89(0xffff) vc88
0xc8d: vc8d(0x1000000000000000000000000) = CONST 
0xc9b: vc9b = MUL vc8d(0x1000000000000000000000000) vc8c
0xc9c: vc9c(0xffff000000000000000000000000) = CONST 
0xcab: vcab(0xffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffff) = NOT vc9c(0xffff000000000000000000000000)
0xcac: vcac(0xffffffff) = CONST 
0xcb3: vcb3 = AND vcac(0xffffffff) vc82
0xcb4: vcb4(0x10000000000000000) = CONST 
0xcbe: vcbe = MUL vcb4(0x10000000000000000) vcb3
0xcbf: vcbf(0xffffffff0000000000000000) = CONST 
0xccc: vccc(0xffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff) = NOT vcbf(0xffffffff0000000000000000)
0xccf: vccf = AND vcac(0xffffffff) vc7d
0xcd0: vcd0(0x100000000) = CONST 
0xcd6: vcd6 = MUL vcd0(0x100000000) vccf
0xcd7: vcd7(0xffffffff00000000) = CONST 
0xce0: vce0(0xffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff) = NOT vcd7(0xffffffff00000000)
0xce4: vce4 = AND vc71 vcac(0xffffffff)
0xce5: vce5(0xffffffff) = CONST 
0xcea: vcea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000) = NOT vce5(0xffffffff)
0xced: vced = AND vc78 vcea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000)
0xcf1: vcf1 = OR vced vce4
0xcf5: vcf5 = AND vcf1 vce0(0xffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff)
0xcf9: vcf9 = OR vcf5 vcd6
0xcfd: vcfd = AND vcf9 vccc(0xffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff)
0xd01: vd01 = OR vcfd vcbe
0xd02: vd02 = AND vd01 vcab(0xffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffff)
0xd06: vd06 = OR vd02 vc9b
0xd08: SSTORE vc76 vd06
0xd0a: vd0a = MLOAD vc14(0x40)
0xd0d: MSTORE vd0a v369
0xd0f: vd0f = MLOAD vc14(0x40)
0xd12: vd12 = AND v363 vc25(0xffffffffffffffffffffffffffffffffffffffff)
0xd14: vd14(0xe95256b13d897358e25376d5519d290ab125a4b1347782f09390b981224bf82) = CONST 
0xd39: vd39 = SUB vd0a vd0f
0xd3c: vd3c = ADD vc0f(0x20) vd39
0xd3e: LOG2 vd0f vd3c vd14(0xe95256b13d897358e25376d5519d290ab125a4b1347782f09390b981224bf82) vd12
0xd4a: JUMP v341(0x185)
----------------------------------

Begin block 0xd4b
prev = {'0x3ba'}, next = {'0xd53'}
----------------------------------
Block 0xd4b
0xd4c: vd4c(0xd53) = CONST 
0xd4f: vd4f(0xe0d) = CONST 
0xd52: vd52_0 = CALLPRIVATE vd4f(0xe0d) vd4c(0xd53)
----------------------------------

Begin block 0xd53
prev = {'0xd4b'}, next = {'0xda7', '0xd58'}
----------------------------------
Block 0xd53
0xd54: vd54(0xda7) = CONST 
0xd57: JUMPI vd54(0xda7) vd52_0
----------------------------------

Begin block 0xd58
prev = {'0xd53'}, next = {}
----------------------------------
Block 0xd58
0xd58: vd58(0x40) = CONST 
0xd5b: vd5b = MLOAD vd58(0x40)
0xd5c: vd5c(0xe5) = CONST 
0xd5e: vd5e(0x2) = CONST 
0xd60: vd60(0x2000000000000000000000000000000000000000000000000000000000) = EXP vd5e(0x2) vd5c(0xe5)
0xd61: vd61(0x461bcd) = CONST 
0xd65: vd65(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vd61(0x461bcd) vd60(0x2000000000000000000000000000000000000000000000000000000000)
0xd67: MSTORE vd5b vd65(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xd68: vd68(0x20) = CONST 
0xd6a: vd6a(0x4) = CONST 
0xd6d: vd6d = ADD vd5b vd6a(0x4)
0xd70: MSTORE vd6d vd68(0x20)
0xd71: vd71(0x24) = CONST 
0xd74: vd74 = ADD vd5b vd71(0x24)
0xd75: MSTORE vd74 vd68(0x20)
0xd76: vd76(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0xd97: vd97(0x44) = CONST 
0xd9a: vd9a = ADD vd5b vd97(0x44)
0xd9b: MSTORE vd9a vd76(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0xd9d: vd9d = MLOAD vd58(0x40)
0xda1: vda1 = SUB vd5b vd9d
0xda2: vda2(0x64) = CONST 
0xda4: vda4 = ADD vda2(0x64) vda1
0xda6: REVERT vd9d vda4
----------------------------------

Begin block 0xda7
prev = {'0xd53'}, next = {'0x1850x3ae'}
----------------------------------
Block 0xda7
0xda8: vda8(0x0) = CONST 
0xdab: vdab = SLOAD vda8(0x0)
0xdac: vdac(0x40) = CONST 
0xdae: vdae = MLOAD vdac(0x40)
0xdaf: vdaf(0x1) = CONST 
0xdb1: vdb1(0xa0) = CONST 
0xdb3: vdb3(0x2) = CONST 
0xdb5: vdb5(0x10000000000000000000000000000000000000000) = EXP vdb3(0x2) vdb1(0xa0)
0xdb6: vdb6(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdb5(0x10000000000000000000000000000000000000000) vdaf(0x1)
0xdb9: vdb9 = AND vdab vdb6(0xffffffffffffffffffffffffffffffffffffffff)
0xdbb: vdbb(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xddf: LOG3 vdae vda8(0x0) vdbb(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vdb9 vda8(0x0)
0xde0: vde0(0x0) = CONST 
0xde3: vde3 = SLOAD vde0(0x0)
0xde4: vde4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdf9: vdf9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vde4(0xffffffffffffffffffffffffffffffffffffffff)
0xdfa: vdfa = AND vdf9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vde3
0xdfc: SSTORE vde0(0x0) vdfa
0xdfd: JUMP v3bc(0x185)
----------------------------------

Begin block 0xdfe
prev = {'0x3cf'}, next = {'0x2310x3c3'}
----------------------------------
Block 0xdfe
0xdff: vdff(0x0) = CONST 
0xe01: ve01 = SLOAD vdff(0x0)
0xe02: ve02(0x1) = CONST 
0xe04: ve04(0xa0) = CONST 
0xe06: ve06(0x2) = CONST 
0xe08: ve08(0x10000000000000000000000000000000000000000) = EXP ve06(0x2) ve04(0xa0)
0xe09: ve09(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve08(0x10000000000000000000000000000000000000000) ve02(0x1)
0xe0a: ve0a = AND ve09(0xffffffffffffffffffffffffffffffffffffffff) ve01
0xe0c: JUMP v3d1(0x231)
----------------------------------

Begin block 0xe0d
prev = {}, next = {}
----------------------------------
function 0xe0d(ve0darg0)
Block 0xe0d
0xe0e: ve0e(0x0) = CONST 
0xe10: ve10 = SLOAD ve0e(0x0)
0xe11: ve11(0x1) = CONST 
0xe13: ve13(0xa0) = CONST 
0xe15: ve15(0x2) = CONST 
0xe17: ve17(0x10000000000000000000000000000000000000000) = EXP ve15(0x2) ve13(0xa0)
0xe18: ve18(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve17(0x10000000000000000000000000000000000000000) ve11(0x1)
0xe19: ve19 = AND ve18(0xffffffffffffffffffffffffffffffffffffffff) ve10
0xe1a: ve1a = CALLER 
0xe1b: ve1b = EQ ve1a ve19
0xe1d: RETURNPRIVATE ve0darg0 ve1b
----------------------------------

Begin block 0xe1e
prev = {'0x424'}, next = {'0xe31', '0xe6a'}
----------------------------------
Block 0xe1e
0xe1f: ve1f(0x1) = CONST 
0xe21: ve21 = SLOAD ve1f(0x1)
0xe22: ve22(0x1) = CONST 
0xe24: ve24(0xa0) = CONST 
0xe26: ve26(0x2) = CONST 
0xe28: ve28(0x10000000000000000000000000000000000000000) = EXP ve26(0x2) ve24(0xa0)
0xe29: ve29(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve28(0x10000000000000000000000000000000000000000) ve22(0x1)
0xe2a: ve2a = AND ve29(0xffffffffffffffffffffffffffffffffffffffff) ve21
0xe2b: ve2b = CALLER 
0xe2c: ve2c = EQ ve2b ve2a
0xe2d: ve2d(0xe6a) = CONST 
0xe30: JUMPI ve2d(0xe6a) ve2c
----------------------------------

Begin block 0xe31
prev = {'0xe1e'}, next = {}
----------------------------------
Block 0xe31
0xe31: ve31(0x40) = CONST 
0xe33: ve33 = MLOAD ve31(0x40)
0xe34: ve34(0xe5) = CONST 
0xe36: ve36(0x2) = CONST 
0xe38: ve38(0x2000000000000000000000000000000000000000000000000000000000) = EXP ve36(0x2) ve34(0xe5)
0xe39: ve39(0x461bcd) = CONST 
0xe3d: ve3d(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL ve39(0x461bcd) ve38(0x2000000000000000000000000000000000000000000000000000000000)
0xe3f: MSTORE ve33 ve3d(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe40: ve40(0x4) = CONST 
0xe42: ve42 = ADD ve40(0x4) ve33
0xe45: ve45(0x20) = CONST 
0xe47: ve47 = ADD ve45(0x20) ve42
0xe4a: ve4a = SUB ve47 ve42
0xe4c: MSTORE ve42 ve4a
0xe4d: ve4d(0x29) = CONST 
0xe50: MSTORE ve47 ve4d(0x29)
0xe51: ve51(0x20) = CONST 
0xe53: ve53 = ADD ve51(0x20) ve47
0xe55: ve55(0x1b2e) = CONST 
0xe58: ve58(0x29) = CONST 
0xe5b: CODECOPY ve53 ve55(0x1b2e) ve58(0x29)
0xe5c: ve5c(0x40) = CONST 
0xe5e: ve5e = ADD ve5c(0x40) ve53
0xe62: ve62(0x40) = CONST 
0xe64: ve64 = MLOAD ve62(0x40)
0xe67: ve67 = SUB ve5e ve64
0xe69: REVERT ve64 ve67
----------------------------------

Begin block 0xe6a
prev = {'0xe1e'}, next = {'0xec1', '0xe88'}
----------------------------------
Block 0xe6a
0xe6b: ve6b(0x0) = CONST 
0xe6f: MSTORE ve6b(0x0) v43c
0xe70: ve70(0x4) = CONST 
0xe72: ve72(0x20) = CONST 
0xe74: MSTORE ve72(0x20) ve70(0x4)
0xe75: ve75(0x40) = CONST 
0xe78: ve78 = SHA3 ve6b(0x0) ve75(0x40)
0xe79: ve79 = SLOAD ve78
0xe7a: ve7a(0x1) = CONST 
0xe7c: ve7c(0xa0) = CONST 
0xe7e: ve7e(0x2) = CONST 
0xe80: ve80(0x10000000000000000000000000000000000000000) = EXP ve7e(0x2) ve7c(0xa0)
0xe81: ve81(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve80(0x10000000000000000000000000000000000000000) ve7a(0x1)
0xe82: ve82 = AND ve81(0xffffffffffffffffffffffffffffffffffffffff) ve79
0xe83: ve83 = ISZERO ve82
0xe84: ve84(0xec1) = CONST 
0xe87: JUMPI ve84(0xec1) ve83
----------------------------------

Begin block 0xe88
prev = {'0xe6a'}, next = {}
----------------------------------
Block 0xe88
0xe88: ve88(0x40) = CONST 
0xe8a: ve8a = MLOAD ve88(0x40)
0xe8b: ve8b(0xe5) = CONST 
0xe8d: ve8d(0x2) = CONST 
0xe8f: ve8f(0x2000000000000000000000000000000000000000000000000000000000) = EXP ve8d(0x2) ve8b(0xe5)
0xe90: ve90(0x461bcd) = CONST 
0xe94: ve94(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL ve90(0x461bcd) ve8f(0x2000000000000000000000000000000000000000000000000000000000)
0xe96: MSTORE ve8a ve94(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe97: ve97(0x4) = CONST 
0xe99: ve99 = ADD ve97(0x4) ve8a
0xe9c: ve9c(0x20) = CONST 
0xe9e: ve9e = ADD ve9c(0x20) ve99
0xea1: vea1 = SUB ve9e ve99
0xea3: MSTORE ve99 vea1
0xea4: vea4(0x22) = CONST 
0xea7: MSTORE ve9e vea4(0x22)
0xea8: vea8(0x20) = CONST 
0xeaa: veaa = ADD vea8(0x20) ve9e
0xeac: veac(0x1c26) = CONST 
0xeaf: veaf(0x22) = CONST 
0xeb2: CODECOPY veaa veac(0x1c26) veaf(0x22)
0xeb3: veb3(0x40) = CONST 
0xeb5: veb5 = ADD veb3(0x40) veaa
0xeb9: veb9(0x40) = CONST 
0xebb: vebb = MLOAD veb9(0x40)
0xebe: vebe = SUB veb5 vebb
0xec0: REVERT vebb vebe
----------------------------------

Begin block 0xec1
prev = {'0xe6a'}, next = {'0xede', '0xf17'}
----------------------------------
Block 0xec1
0xec2: vec2(0x0) = CONST 
0xec6: MSTORE vec2(0x0) v442
0xec7: vec7(0x3) = CONST 
0xec9: vec9(0x20) = CONST 
0xecb: MSTORE vec9(0x20) vec7(0x3)
0xecc: vecc(0x40) = CONST 
0xecf: vecf = SHA3 vec2(0x0) vecc(0x40)
0xed0: ved0 = SLOAD vecf
0xed1: ved1(0x1) = CONST 
0xed3: ved3(0xa0) = CONST 
0xed5: ved5(0x2) = CONST 
0xed7: ved7(0x10000000000000000000000000000000000000000) = EXP ved5(0x2) ved3(0xa0)
0xed8: ved8(0xffffffffffffffffffffffffffffffffffffffff) = SUB ved7(0x10000000000000000000000000000000000000000) ved1(0x1)
0xed9: ved9 = AND ved8(0xffffffffffffffffffffffffffffffffffffffff) ved0
0xeda: veda(0xf17) = CONST 
0xedd: JUMPI veda(0xf17) ved9
----------------------------------

Begin block 0xede
prev = {'0xec1'}, next = {}
----------------------------------
Block 0xede
0xede: vede(0x40) = CONST 
0xee0: vee0 = MLOAD vede(0x40)
0xee1: vee1(0xe5) = CONST 
0xee3: vee3(0x2) = CONST 
0xee5: vee5(0x2000000000000000000000000000000000000000000000000000000000) = EXP vee3(0x2) vee1(0xe5)
0xee6: vee6(0x461bcd) = CONST 
0xeea: veea(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vee6(0x461bcd) vee5(0x2000000000000000000000000000000000000000000000000000000000)
0xeec: MSTORE vee0 veea(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xeed: veed(0x4) = CONST 
0xeef: veef = ADD veed(0x4) vee0
0xef2: vef2(0x20) = CONST 
0xef4: vef4 = ADD vef2(0x20) veef
0xef7: vef7 = SUB vef4 veef
0xef9: MSTORE veef vef7
0xefa: vefa(0x24) = CONST 
0xefd: MSTORE vef4 vefa(0x24)
0xefe: vefe(0x20) = CONST 
0xf00: vf00 = ADD vefe(0x20) vef4
0xf02: vf02(0x1bb7) = CONST 
0xf05: vf05(0x24) = CONST 
0xf08: CODECOPY vf00 vf02(0x1bb7) vf05(0x24)
0xf09: vf09(0x40) = CONST 
0xf0b: vf0b = ADD vf09(0x40) vf00
0xf0f: vf0f(0x40) = CONST 
0xf11: vf11 = MLOAD vf0f(0x40)
0xf14: vf14 = SUB vf0b vf11
0xf16: REVERT vf11 vf14
----------------------------------

Begin block 0xf17
prev = {'0xec1'}, next = {'0x1a87'}
----------------------------------
Block 0xf17
0xf18: vf18(0xf1f) = CONST 
0xf1b: vf1b(0x1a87) = CONST 
0xf1e: JUMP vf1b(0x1a87)
----------------------------------

Begin block 0xf1f
prev = {'0x1a87'}, next = {'0x1850x401'}
----------------------------------
Block 0xf1f
0xf21: vf21(0x40) = CONST 
0xf24: vf24 = MLOAD vf21(0x40)
0xf25: vf25(0x80) = CONST 
0xf28: vf28 = ADD vf24 vf25(0x80)
0xf2a: MSTORE vf21(0x40) vf28
0xf2b: vf2b(0x1) = CONST 
0xf2d: vf2d(0xa0) = CONST 
0xf2f: vf2f(0x2) = CONST 
0xf31: vf31(0x10000000000000000000000000000000000000000) = EXP vf2f(0x2) vf2d(0xa0)
0xf32: vf32(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf31(0x10000000000000000000000000000000000000000) vf2b(0x1)
0xf35: vf35 = AND vf32(0xffffffffffffffffffffffffffffffffffffffff) v430
0xf38: MSTORE vf24 vf35
0xf39: vf39(0x20) = CONST 
0xf3d: vf3d = ADD vf24 vf39(0x20)
0xf40: MSTORE vf3d v442
0xf43: vf43 = ADD vf21(0x40) vf24
0xf46: MSTORE vf43 v447
0xf47: vf47(0x60) = CONST 
0xf4a: vf4a = ADD vf24 vf47(0x60)
0xf4d: MSTORE vf4a v436
0xf4e: vf4e(0x0) = CONST 
0xf52: MSTORE vf4e(0x0) v43c
0xf53: vf53(0x4) = CONST 
0xf56: MSTORE vf39(0x20) vf53(0x4)
0xf59: vf59 = SHA3 vf4e(0x0) vf21(0x40)
0xf5b: vf5b = MLOAD vf24
0xf5d: vf5d = SLOAD vf59
0xf5e: vf5e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf73: vf73(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf5e(0xffffffffffffffffffffffffffffffffffffffff)
0xf74: vf74 = AND vf73(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf5d
0xf76: vf76 = AND vf32(0xffffffffffffffffffffffffffffffffffffffff) vf5b
0xf7a: vf7a = OR vf76 vf74
0xf7c: SSTORE vf59 vf7a
0xf7e: vf7e = MLOAD vf3d
0xf7f: vf7f(0x1) = CONST 
0xf82: vf82 = ADD vf59 vf7f(0x1)
0xf83: SSTORE vf82 vf7e
0xf84: vf84 = MLOAD vf43
0xf85: vf85(0x2) = CONST 
0xf88: vf88 = ADD vf59 vf85(0x2)
0xf89: SSTORE vf88 vf84
0xf8a: vf8a = MLOAD vf4a
0xf8b: vf8b(0x3) = CONST 
0xf8f: vf8f = ADD vf59 vf8b(0x3)
0xf93: SSTORE vf8f vf8a
0xf95: vf95 = MLOAD vf21(0x40)
0xf98: MSTORE vf95 v43c
0xf9b: vf9b = ADD vf95 vf39(0x20)
0xf9e: MSTORE vf9b v436
0xfa0: vfa0 = MLOAD vf21(0x40)
0xfa5: vfa5(0x63d5cfb8e4ecca270c27bb5dc91a1848a87d0a87734cdc221f13ed4e205b2e49) = CONST 
0xfc9: vfc9 = SUB vf95 vfa0
0xfcc: vfcc = ADD vf21(0x40) vfc9
0xfce: LOG2 vfa0 vfcc vfa5(0x63d5cfb8e4ecca270c27bb5dc91a1848a87d0a87734cdc221f13ed4e205b2e49) vf35
0xfd5: JUMP v40f(0x185)
----------------------------------

Begin block 0xfd6
prev = {'0x46f'}, next = {'0xfde'}
----------------------------------
Block 0xfd6
0xfd7: vfd7(0xfde) = CONST 
0xfda: vfda(0xe0d) = CONST 
0xfdd: vfdd_0 = CALLPRIVATE vfda(0xe0d) vfd7(0xfde)
----------------------------------

Begin block 0xfde
prev = {'0xfd6'}, next = {'0x1032', '0xfe3'}
----------------------------------
Block 0xfde
0xfdf: vfdf(0x1032) = CONST 
0xfe2: JUMPI vfdf(0x1032) vfdd_0
----------------------------------

Begin block 0xfe3
prev = {'0xfde'}, next = {}
----------------------------------
Block 0xfe3
0xfe3: vfe3(0x40) = CONST 
0xfe6: vfe6 = MLOAD vfe3(0x40)
0xfe7: vfe7(0xe5) = CONST 
0xfe9: vfe9(0x2) = CONST 
0xfeb: vfeb(0x2000000000000000000000000000000000000000000000000000000000) = EXP vfe9(0x2) vfe7(0xe5)
0xfec: vfec(0x461bcd) = CONST 
0xff0: vff0(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vfec(0x461bcd) vfeb(0x2000000000000000000000000000000000000000000000000000000000)
0xff2: MSTORE vfe6 vff0(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xff3: vff3(0x20) = CONST 
0xff5: vff5(0x4) = CONST 
0xff8: vff8 = ADD vfe6 vff5(0x4)
0xffb: MSTORE vff8 vff3(0x20)
0xffc: vffc(0x24) = CONST 
0xfff: vfff = ADD vfe6 vffc(0x24)
0x1000: MSTORE vfff vff3(0x20)
0x1001: v1001(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x1022: v1022(0x44) = CONST 
0x1025: v1025 = ADD vfe6 v1022(0x44)
0x1026: MSTORE v1025 v1001(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x1028: v1028 = MLOAD vfe3(0x40)
0x102c: v102c = SUB vfe6 v1028
0x102d: v102d(0x64) = CONST 
0x102f: v102f = ADD v102d(0x64) v102c
0x1031: REVERT v1028 v102f
----------------------------------

Begin block 0x1032
prev = {'0xfde'}, next = {'0x1850x44c'}
----------------------------------
Block 0x1032
0x1033: v1033(0x1) = CONST 
0x1036: v1036 = SLOAD v1033(0x1)
0x1037: v1037(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x104c: v104c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1037(0xffffffffffffffffffffffffffffffffffffffff)
0x104d: v104d = AND v104c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v1036
0x104e: v104e(0x1) = CONST 
0x1050: v1050(0xa0) = CONST 
0x1052: v1052(0x2) = CONST 
0x1054: v1054(0x10000000000000000000000000000000000000000) = EXP v1052(0x2) v1050(0xa0)
0x1055: v1055(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1054(0x10000000000000000000000000000000000000000) v104e(0x1)
0x1059: v1059 = AND v1055(0xffffffffffffffffffffffffffffffffffffffff) v47a
0x105d: v105d = OR v1059 v104d
0x105f: SSTORE v1033(0x1) v105d
0x1060: JUMP v45a(0x185)
----------------------------------

Begin block 0x1061
prev = {'0x4a2'}, next = {'0x107f', '0x10b8'}
----------------------------------
Block 0x1061
0x1062: v1062(0x1) = CONST 
0x1064: v1064(0xa0) = CONST 
0x1066: v1066(0x2) = CONST 
0x1068: v1068(0x10000000000000000000000000000000000000000) = EXP v1066(0x2) v1064(0xa0)
0x1069: v1069(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1068(0x10000000000000000000000000000000000000000) v1062(0x1)
0x106b: v106b = AND v4b8 v1069(0xffffffffffffffffffffffffffffffffffffffff)
0x106c: v106c(0x0) = CONST 
0x1070: MSTORE v106c(0x0) v106b
0x1071: v1071(0x2) = CONST 
0x1073: v1073(0x20) = CONST 
0x1075: MSTORE v1073(0x20) v1071(0x2)
0x1076: v1076(0x40) = CONST 
0x1079: v1079 = SHA3 v106c(0x0) v1076(0x40)
0x107a: v107a = SLOAD v1079
0x107b: v107b(0x10b8) = CONST 
0x107e: JUMPI v107b(0x10b8) v107a
----------------------------------

Begin block 0x107f
prev = {'0x1061'}, next = {}
----------------------------------
Block 0x107f
0x107f: v107f(0x40) = CONST 
0x1081: v1081 = MLOAD v107f(0x40)
0x1082: v1082(0xe5) = CONST 
0x1084: v1084(0x2) = CONST 
0x1086: v1086(0x2000000000000000000000000000000000000000000000000000000000) = EXP v1084(0x2) v1082(0xe5)
0x1087: v1087(0x461bcd) = CONST 
0x108b: v108b(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v1087(0x461bcd) v1086(0x2000000000000000000000000000000000000000000000000000000000)
0x108d: MSTORE v1081 v108b(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x108e: v108e(0x4) = CONST 
0x1090: v1090 = ADD v108e(0x4) v1081
0x1093: v1093(0x20) = CONST 
0x1095: v1095 = ADD v1093(0x20) v1090
0x1098: v1098 = SUB v1095 v1090
0x109a: MSTORE v1090 v1098
0x109b: v109b(0x31) = CONST 
0x109e: MSTORE v1095 v109b(0x31)
0x109f: v109f(0x20) = CONST 
0x10a1: v10a1 = ADD v109f(0x20) v1095
0x10a3: v10a3(0x1b57) = CONST 
0x10a6: v10a6(0x31) = CONST 
0x10a9: CODECOPY v10a1 v10a3(0x1b57) v10a6(0x31)
0x10aa: v10aa(0x40) = CONST 
0x10ac: v10ac = ADD v10aa(0x40) v10a1
0x10b0: v10b0(0x40) = CONST 
0x10b2: v10b2 = MLOAD v10b0(0x40)
0x10b5: v10b5 = SUB v10ac v10b2
0x10b7: REVERT v10b2 v10b5
----------------------------------

Begin block 0x10b8
prev = {'0x1061'}, next = {'0x10c3', '0x110e'}
----------------------------------
Block 0x10b8
0x10b9: v10b9(0x0) = CONST 
0x10bc: v10bc = GT v4bd v10b9(0x0)
0x10be: v10be = ISZERO v10bc
0x10bf: v10bf(0x110e) = CONST 
0x10c2: JUMPI v10bf(0x110e) v10be
----------------------------------

Begin block 0x10c3
prev = {'0x10b8'}, next = {'0x110e', '0x10e5'}
----------------------------------
Block 0x10c3
0x10c4: v10c4(0x1) = CONST 
0x10c6: v10c6(0xa0) = CONST 
0x10c8: v10c8(0x2) = CONST 
0x10ca: v10ca(0x10000000000000000000000000000000000000000) = EXP v10c8(0x2) v10c6(0xa0)
0x10cb: v10cb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10ca(0x10000000000000000000000000000000000000000) v10c4(0x1)
0x10cd: v10cd = AND v4b8 v10cb(0xffffffffffffffffffffffffffffffffffffffff)
0x10ce: v10ce(0x0) = CONST 
0x10d2: MSTORE v10ce(0x0) v10cd
0x10d3: v10d3(0x2) = CONST 
0x10d5: v10d5(0x20) = CONST 
0x10d7: MSTORE v10d5(0x20) v10d3(0x2)
0x10d8: v10d8(0x40) = CONST 
0x10db: v10db = SHA3 v10ce(0x0) v10d8(0x40)
0x10dc: v10dc = SLOAD v10db
0x10de: v10de = LT v4bd v10dc
0x10df: v10df = ISZERO v10de
0x10e1: v10e1(0x110e) = CONST 
0x10e4: JUMPI v10e1(0x110e) v10df
----------------------------------

Begin block 0x10e5
prev = {'0x10c3'}, next = {'0x110e'}
----------------------------------
Block 0x10e5
0x10e6: v10e6(0x1) = CONST 
0x10e8: v10e8(0xa0) = CONST 
0x10ea: v10ea(0x2) = CONST 
0x10ec: v10ec(0x10000000000000000000000000000000000000000) = EXP v10ea(0x2) v10e8(0xa0)
0x10ed: v10ed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10ec(0x10000000000000000000000000000000000000000) v10e6(0x1)
0x10f0: v10f0 = AND v4b8 v10ed(0xffffffffffffffffffffffffffffffffffffffff)
0x10f1: v10f1(0x0) = CONST 
0x10f5: MSTORE v10f1(0x0) v10f0
0x10f6: v10f6(0x5) = CONST 
0x10f8: v10f8(0x20) = CONST 
0x10fc: MSTORE v10f8(0x20) v10f6(0x5)
0x10fd: v10fd(0x40) = CONST 
0x1101: v1101 = SHA3 v10f1(0x0) v10fd(0x40)
0x1104: v1104 = AND v4af v10ed(0xffffffffffffffffffffffffffffffffffffffff)
0x1106: MSTORE v10f1(0x0) v1104
0x1109: MSTORE v10f8(0x20) v1101
0x110a: v110a = SHA3 v10f1(0x0) v10fd(0x40)
0x110b: v110b = SLOAD v110a
0x110c: v110c = ISZERO v110b
0x110d: v110d = ISZERO v110c
----------------------------------

Begin block 0x110e
prev = {'0x10c3', '0x10e5', '0x10b8'}, next = {'0x1113', '0x114c'}
----------------------------------
Block 0x110e
0x110e_0x0: v110e_0 = PHI v10bc v10df v110d
0x110f: v110f(0x114c) = CONST 
0x1112: JUMPI v110f(0x114c) v110e_0
----------------------------------

Begin block 0x1113
prev = {'0x110e'}, next = {}
----------------------------------
Block 0x1113
0x1113: v1113(0x40) = CONST 
0x1115: v1115 = MLOAD v1113(0x40)
0x1116: v1116(0xe5) = CONST 
0x1118: v1118(0x2) = CONST 
0x111a: v111a(0x2000000000000000000000000000000000000000000000000000000000) = EXP v1118(0x2) v1116(0xe5)
0x111b: v111b(0x461bcd) = CONST 
0x111f: v111f(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v111b(0x461bcd) v111a(0x2000000000000000000000000000000000000000000000000000000000)
0x1121: MSTORE v1115 v111f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1122: v1122(0x4) = CONST 
0x1124: v1124 = ADD v1122(0x4) v1115
0x1127: v1127(0x20) = CONST 
0x1129: v1129 = ADD v1127(0x20) v1124
0x112c: v112c = SUB v1129 v1124
0x112e: MSTORE v1124 v112c
0x112f: v112f(0x25) = CONST 
0x1132: MSTORE v1129 v112f(0x25)
0x1133: v1133(0x20) = CONST 
0x1135: v1135 = ADD v1133(0x20) v1129
0x1137: v1137(0x1c01) = CONST 
0x113a: v113a(0x25) = CONST 
0x113d: CODECOPY v1135 v1137(0x1c01) v113a(0x25)
0x113e: v113e(0x40) = CONST 
0x1140: v1140 = ADD v113e(0x40) v1135
0x1144: v1144(0x40) = CONST 
0x1146: v1146 = MLOAD v1144(0x40)
0x1149: v1149 = SUB v1140 v1146
0x114b: REVERT v1146 v1149
----------------------------------

Begin block 0x114c
prev = {'0x110e'}, next = {'0x11be', '0x11ba'}
----------------------------------
Block 0x114c
0x114d: v114d(0x40) = CONST 
0x1150: v1150 = MLOAD v114d(0x40)
0x1151: v1151(0x23b872dd00000000000000000000000000000000000000000000000000000000) = CONST 
0x1173: MSTORE v1150 v1151(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0x1174: v1174(0x1) = CONST 
0x1176: v1176(0xa0) = CONST 
0x1178: v1178(0x2) = CONST 
0x117a: v117a(0x10000000000000000000000000000000000000000) = EXP v1178(0x2) v1176(0xa0)
0x117b: v117b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v117a(0x10000000000000000000000000000000000000000) v1174(0x1)
0x117e: v117e = AND v117b(0xffffffffffffffffffffffffffffffffffffffff) v4af
0x117f: v117f(0x4) = CONST 
0x1182: v1182 = ADD v1150 v117f(0x4)
0x1183: MSTORE v1182 v117e
0x1184: v1184 = ADDRESS 
0x1185: v1185(0x24) = CONST 
0x1188: v1188 = ADD v1150 v1185(0x24)
0x1189: MSTORE v1188 v1184
0x118a: v118a(0x44) = CONST 
0x118d: v118d = ADD v1150 v118a(0x44)
0x1190: MSTORE v118d v4bd
0x1192: v1192 = MLOAD v114d(0x40)
0x1195: v1195 = AND v4b8 v117b(0xffffffffffffffffffffffffffffffffffffffff)
0x1197: v1197(0x23b872dd) = CONST 
0x119d: v119d(0x64) = CONST 
0x11a1: v11a1 = ADD v1150 v119d(0x64)
0x11a3: v11a3(0x20) = CONST 
0x11ab: v11ab = SUB v1150 v1192
0x11ac: v11ac = ADD v11ab v119d(0x64)
0x11ae: v11ae(0x0) = CONST 
0x11b2: v11b2 = EXTCODESIZE v1195
0x11b3: v11b3 = ISZERO v11b2
0x11b5: v11b5 = ISZERO v11b3
0x11b6: v11b6(0x11be) = CONST 
0x11b9: JUMPI v11b6(0x11be) v11b5
----------------------------------

Begin block 0x11ba
prev = {'0x114c'}, next = {}
----------------------------------
Block 0x11ba
0x11ba: v11ba(0x0) = CONST 
0x11bd: REVERT v11ba(0x0) v11ba(0x0)
----------------------------------

Begin block 0x11be
prev = {'0x114c'}, next = {'0x11c9', '0x11d2'}
----------------------------------
Block 0x11be
0x11c0: v11c0 = GAS 
0x11c1: v11c1 = CALL v11c0 v1195 v11ae(0x0) v1192 v11ac v1192 v11a3(0x20)
0x11c2: v11c2 = ISZERO v11c1
0x11c4: v11c4 = ISZERO v11c2
0x11c5: v11c5(0x11d2) = CONST 
0x11c8: JUMPI v11c5(0x11d2) v11c4
----------------------------------

Begin block 0x11c9
prev = {'0x11be'}, next = {}
----------------------------------
Block 0x11c9
0x11c9: v11c9 = RETURNDATASIZE 
0x11ca: v11ca(0x0) = CONST 
0x11cd: RETURNDATACOPY v11ca(0x0) v11ca(0x0) v11c9
0x11ce: v11ce = RETURNDATASIZE 
0x11cf: v11cf(0x0) = CONST 
0x11d1: REVERT v11cf(0x0) v11ce
----------------------------------

Begin block 0x11d2
prev = {'0x11be'}, next = {'0x11e4', '0x11e8'}
----------------------------------
Block 0x11d2
0x11d7: v11d7(0x40) = CONST 
0x11d9: v11d9 = MLOAD v11d7(0x40)
0x11da: v11da = RETURNDATASIZE 
0x11db: v11db(0x20) = CONST 
0x11de: v11de = LT v11da v11db(0x20)
0x11df: v11df = ISZERO v11de
0x11e0: v11e0(0x11e8) = CONST 
0x11e3: JUMPI v11e0(0x11e8) v11df
----------------------------------

Begin block 0x11e4
prev = {'0x11d2'}, next = {}
----------------------------------
Block 0x11e4
0x11e4: v11e4(0x0) = CONST 
0x11e7: REVERT v11e4(0x0) v11e4(0x0)
----------------------------------

Begin block 0x11e8
prev = {'0x11d2'}, next = {'0x123e', '0x11ef'}
----------------------------------
Block 0x11e8
0x11ea: v11ea = MLOAD v11d9
0x11eb: v11eb(0x123e) = CONST 
0x11ee: JUMPI v11eb(0x123e) v11ea
----------------------------------

Begin block 0x11ef
prev = {'0x11e8'}, next = {}
----------------------------------
Block 0x11ef
0x11ef: v11ef(0x40) = CONST 
0x11f2: v11f2 = MLOAD v11ef(0x40)
0x11f3: v11f3(0xe5) = CONST 
0x11f5: v11f5(0x2) = CONST 
0x11f7: v11f7(0x2000000000000000000000000000000000000000000000000000000000) = EXP v11f5(0x2) v11f3(0xe5)
0x11f8: v11f8(0x461bcd) = CONST 
0x11fc: v11fc(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v11f8(0x461bcd) v11f7(0x2000000000000000000000000000000000000000000000000000000000)
0x11fe: MSTORE v11f2 v11fc(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x11ff: v11ff(0x20) = CONST 
0x1201: v1201(0x4) = CONST 
0x1204: v1204 = ADD v11f2 v1201(0x4)
0x1205: MSTORE v1204 v11ff(0x20)
0x1206: v1206(0x19) = CONST 
0x1208: v1208(0x24) = CONST 
0x120b: v120b = ADD v11f2 v1208(0x24)
0x120c: MSTORE v120b v1206(0x19)
0x120d: v120d(0x4e6f7420656e6f75676820617070726f76656420455243323000000000000000) = CONST 
0x122e: v122e(0x44) = CONST 
0x1231: v1231 = ADD v11f2 v122e(0x44)
0x1232: MSTORE v1231 v120d(0x4e6f7420656e6f75676820617070726f76656420455243323000000000000000)
0x1234: v1234 = MLOAD v11ef(0x40)
0x1238: v1238 = SUB v11f2 v1234
0x1239: v1239(0x64) = CONST 
0x123b: v123b = ADD v1239(0x64) v1238
0x123d: REVERT v1234 v123b
----------------------------------

Begin block 0x123e
prev = {'0x11e8'}, next = {'0x1274'}
----------------------------------
Block 0x123e
0x123f: v123f(0x1) = CONST 
0x1241: v1241(0xa0) = CONST 
0x1243: v1243(0x2) = CONST 
0x1245: v1245(0x10000000000000000000000000000000000000000) = EXP v1243(0x2) v1241(0xa0)
0x1246: v1246(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1245(0x10000000000000000000000000000000000000000) v123f(0x1)
0x1249: v1249 = AND v4b8 v1246(0xffffffffffffffffffffffffffffffffffffffff)
0x124a: v124a(0x0) = CONST 
0x124e: MSTORE v124a(0x0) v1249
0x124f: v124f(0x5) = CONST 
0x1251: v1251(0x20) = CONST 
0x1255: MSTORE v1251(0x20) v124f(0x5)
0x1256: v1256(0x40) = CONST 
0x125a: v125a = SHA3 v124a(0x0) v1256(0x40)
0x125d: v125d = AND v4af v1246(0xffffffffffffffffffffffffffffffffffffffff)
0x125f: MSTORE v124a(0x0) v125d
0x1262: MSTORE v1251(0x20) v125a
0x1263: v1263 = SHA3 v124a(0x0) v1256(0x40)
0x1264: v1264 = SLOAD v1263
0x1265: v1265(0x1274) = CONST 
0x126a: v126a(0xffffffff) = CONST 
0x126f: v126f(0x18c7) = CONST 
0x1272: v1272(0x18c7) = AND v126f(0x18c7) v126a(0xffffffff)
0x1273: v1273_0 = CALLPRIVATE v1272(0x18c7) v4bd v1264 v1265(0x1274)
----------------------------------

Begin block 0x1274
prev = {'0x123e'}, next = {'0x1850x47f'}
----------------------------------
Block 0x1274
0x1275: v1275(0x1) = CONST 
0x1277: v1277(0xa0) = CONST 
0x1279: v1279(0x2) = CONST 
0x127b: v127b(0x10000000000000000000000000000000000000000) = EXP v1279(0x2) v1277(0xa0)
0x127c: v127c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v127b(0x10000000000000000000000000000000000000000) v1275(0x1)
0x127f: v127f = AND v4b8 v127c(0xffffffffffffffffffffffffffffffffffffffff)
0x1280: v1280(0x0) = CONST 
0x1284: MSTORE v1280(0x0) v127f
0x1285: v1285(0x5) = CONST 
0x1287: v1287(0x20) = CONST 
0x128b: MSTORE v1287(0x20) v1285(0x5)
0x128c: v128c(0x40) = CONST 
0x1290: v1290 = SHA3 v1280(0x0) v128c(0x40)
0x1293: v1293 = AND v4af v127c(0xffffffffffffffffffffffffffffffffffffffff)
0x1296: MSTORE v1280(0x0) v1293
0x1299: MSTORE v1287(0x20) v1290
0x129d: v129d = SHA3 v1280(0x0) v128c(0x40)
0x12a1: SSTORE v129d v1273_0
0x12a3: v12a3 = MLOAD v128c(0x40)
0x12a6: MSTORE v12a3 v127f
0x12a9: v12a9 = ADD v12a3 v1287(0x20)
0x12ac: MSTORE v12a9 v4bd
0x12ae: v12ae = MLOAD v128c(0x40)
0x12b1: v12b1(0x795c91e2fef542f2e8bccd08552a8961ecb158d0f47be08f5c44b349993b07a9) = CONST 
0x12d6: v12d6 = SUB v12a3 v12ae
0x12d7: v12d7 = ADD v12d6 v128c(0x40)
0x12d9: LOG2 v12ae v12d7 v12b1(0x795c91e2fef542f2e8bccd08552a8961ecb158d0f47be08f5c44b349993b07a9) v1293
0x12dd: JUMP v48d(0x185)
----------------------------------

Begin block 0x12de
prev = {'0x4e5'}, next = {'0x12f1', '0x132a'}
----------------------------------
Block 0x12de
0x12df: v12df(0x1) = CONST 
0x12e1: v12e1 = SLOAD v12df(0x1)
0x12e2: v12e2(0x1) = CONST 
0x12e4: v12e4(0xa0) = CONST 
0x12e6: v12e6(0x2) = CONST 
0x12e8: v12e8(0x10000000000000000000000000000000000000000) = EXP v12e6(0x2) v12e4(0xa0)
0x12e9: v12e9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v12e8(0x10000000000000000000000000000000000000000) v12e2(0x1)
0x12ea: v12ea = AND v12e9(0xffffffffffffffffffffffffffffffffffffffff) v12e1
0x12eb: v12eb = CALLER 
0x12ec: v12ec = EQ v12eb v12ea
0x12ed: v12ed(0x132a) = CONST 
0x12f0: JUMPI v12ed(0x132a) v12ec
----------------------------------

Begin block 0x12f1
prev = {'0x12de'}, next = {}
----------------------------------
Block 0x12f1
0x12f1: v12f1(0x40) = CONST 
0x12f3: v12f3 = MLOAD v12f1(0x40)
0x12f4: v12f4(0xe5) = CONST 
0x12f6: v12f6(0x2) = CONST 
0x12f8: v12f8(0x2000000000000000000000000000000000000000000000000000000000) = EXP v12f6(0x2) v12f4(0xe5)
0x12f9: v12f9(0x461bcd) = CONST 
0x12fd: v12fd(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v12f9(0x461bcd) v12f8(0x2000000000000000000000000000000000000000000000000000000000)
0x12ff: MSTORE v12f3 v12fd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1300: v1300(0x4) = CONST 
0x1302: v1302 = ADD v1300(0x4) v12f3
0x1305: v1305(0x20) = CONST 
0x1307: v1307 = ADD v1305(0x20) v1302
0x130a: v130a = SUB v1307 v1302
0x130c: MSTORE v1302 v130a
0x130d: v130d(0x29) = CONST 
0x1310: MSTORE v1307 v130d(0x29)
0x1311: v1311(0x20) = CONST 
0x1313: v1313 = ADD v1311(0x20) v1307
0x1315: v1315(0x1b2e) = CONST 
0x1318: v1318(0x29) = CONST 
0x131b: CODECOPY v1313 v1315(0x1b2e) v1318(0x29)
0x131c: v131c(0x40) = CONST 
0x131e: v131e = ADD v131c(0x40) v1313
0x1322: v1322(0x40) = CONST 
0x1324: v1324 = MLOAD v1322(0x40)
0x1327: v1327 = SUB v131e v1324
0x1329: REVERT v1324 v1327
----------------------------------

Begin block 0x132a
prev = {'0x12de'}, next = {'0x1391', '0x1358'}
----------------------------------
Block 0x132a
0x132b: v132b(0x1) = CONST 
0x132d: v132d(0xa0) = CONST 
0x132f: v132f(0x2) = CONST 
0x1331: v1331(0x10000000000000000000000000000000000000000) = EXP v132f(0x2) v132d(0xa0)
0x1332: v1332(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1331(0x10000000000000000000000000000000000000000) v132b(0x1)
0x1335: v1335 = AND v4fb v1332(0xffffffffffffffffffffffffffffffffffffffff)
0x1336: v1336(0x0) = CONST 
0x133a: MSTORE v1336(0x0) v1335
0x133b: v133b(0x5) = CONST 
0x133d: v133d(0x20) = CONST 
0x1341: MSTORE v133d(0x20) v133b(0x5)
0x1342: v1342(0x40) = CONST 
0x1346: v1346 = SHA3 v1336(0x0) v1342(0x40)
0x1349: v1349 = AND v4f2 v1332(0xffffffffffffffffffffffffffffffffffffffff)
0x134b: MSTORE v1336(0x0) v1349
0x134e: MSTORE v133d(0x20) v1346
0x134f: v134f = SHA3 v1336(0x0) v1342(0x40)
0x1350: v1350 = SLOAD v134f
0x1352: v1352 = GT v500 v1350
0x1353: v1353 = ISZERO v1352
0x1354: v1354(0x1391) = CONST 
0x1357: JUMPI v1354(0x1391) v1353
----------------------------------

Begin block 0x1358
prev = {'0x132a'}, next = {}
----------------------------------
Block 0x1358
0x1358: v1358(0x40) = CONST 
0x135a: v135a = MLOAD v1358(0x40)
0x135b: v135b(0xe5) = CONST 
0x135d: v135d(0x2) = CONST 
0x135f: v135f(0x2000000000000000000000000000000000000000000000000000000000) = EXP v135d(0x2) v135b(0xe5)
0x1360: v1360(0x461bcd) = CONST 
0x1364: v1364(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v1360(0x461bcd) v135f(0x2000000000000000000000000000000000000000000000000000000000)
0x1366: MSTORE v135a v1364(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1367: v1367(0x4) = CONST 
0x1369: v1369 = ADD v1367(0x4) v135a
0x136c: v136c(0x20) = CONST 
0x136e: v136e = ADD v136c(0x20) v1369
0x1371: v1371 = SUB v136e v1369
0x1373: MSTORE v1369 v1371
0x1374: v1374(0x2f) = CONST 
0x1377: MSTORE v136e v1374(0x2f)
0x1378: v1378(0x20) = CONST 
0x137a: v137a = ADD v1378(0x20) v136e
0x137c: v137c(0x1b88) = CONST 
0x137f: v137f(0x2f) = CONST 
0x1382: CODECOPY v137a v137c(0x1b88) v137f(0x2f)
0x1383: v1383(0x40) = CONST 
0x1385: v1385 = ADD v1383(0x40) v137a
0x1389: v1389(0x40) = CONST 
0x138b: v138b = MLOAD v1389(0x40)
0x138e: v138e = SUB v1385 v138b
0x1390: REVERT v138b v138e
----------------------------------

Begin block 0x1391
prev = {'0x132a'}, next = {'0x1437', '0x13a0'}
----------------------------------
Block 0x1391
0x1392: v1392(0x1) = CONST 
0x1394: v1394(0xa0) = CONST 
0x1396: v1396(0x2) = CONST 
0x1398: v1398(0x10000000000000000000000000000000000000000) = EXP v1396(0x2) v1394(0xa0)
0x1399: v1399(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1398(0x10000000000000000000000000000000000000000) v1392(0x1)
0x139b: v139b = AND v4fb v1399(0xffffffffffffffffffffffffffffffffffffffff)
0x139c: v139c(0x1437) = CONST 
0x139f: JUMPI v139c(0x1437) v139b
----------------------------------

Begin block 0x13a0
prev = {'0x1391'}, next = {'0x13cc', '0x13d5'}
----------------------------------
Block 0x13a0
0x13a0: v13a0(0x40) = CONST 
0x13a2: v13a2 = MLOAD v13a0(0x40)
0x13a3: v13a3(0x1) = CONST 
0x13a5: v13a5(0xa0) = CONST 
0x13a7: v13a7(0x2) = CONST 
0x13a9: v13a9(0x10000000000000000000000000000000000000000) = EXP v13a7(0x2) v13a5(0xa0)
0x13aa: v13aa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v13a9(0x10000000000000000000000000000000000000000) v13a3(0x1)
0x13ac: v13ac = AND v4f2 v13aa(0xffffffffffffffffffffffffffffffffffffffff)
0x13af: v13af = ISZERO v500
0x13b0: v13b0(0x8fc) = CONST 
0x13b3: v13b3 = MUL v13b0(0x8fc) v13af
0x13b7: v13b7(0x0) = CONST 
0x13bf: v13bf = CALL v13b3 v13ac v500 v13a2 v13b7(0x0) v13a2 v13b7(0x0)
0x13c5: v13c5 = ISZERO v13bf
0x13c7: v13c7 = ISZERO v13c5
0x13c8: v13c8(0x13d5) = CONST 
0x13cb: JUMPI v13c8(0x13d5) v13c7
----------------------------------

Begin block 0x13cc
prev = {'0x13a0'}, next = {}
----------------------------------
Block 0x13cc
0x13cc: v13cc = RETURNDATASIZE 
0x13cd: v13cd(0x0) = CONST 
0x13d0: RETURNDATACOPY v13cd(0x0) v13cd(0x0) v13cc
0x13d1: v13d1 = RETURNDATASIZE 
0x13d2: v13d2(0x0) = CONST 
0x13d4: REVERT v13d2(0x0) v13d1
----------------------------------

Begin block 0x13d5
prev = {'0x13a0'}, next = {'0x140c'}
----------------------------------
Block 0x13d5
0x13d7: v13d7(0x1) = CONST 
0x13d9: v13d9(0xa0) = CONST 
0x13db: v13db(0x2) = CONST 
0x13dd: v13dd(0x10000000000000000000000000000000000000000) = EXP v13db(0x2) v13d9(0xa0)
0x13de: v13de(0xffffffffffffffffffffffffffffffffffffffff) = SUB v13dd(0x10000000000000000000000000000000000000000) v13d7(0x1)
0x13e1: v13e1 = AND v4fb v13de(0xffffffffffffffffffffffffffffffffffffffff)
0x13e2: v13e2(0x0) = CONST 
0x13e6: MSTORE v13e2(0x0) v13e1
0x13e7: v13e7(0x5) = CONST 
0x13e9: v13e9(0x20) = CONST 
0x13ed: MSTORE v13e9(0x20) v13e7(0x5)
0x13ee: v13ee(0x40) = CONST 
0x13f2: v13f2 = SHA3 v13e2(0x0) v13ee(0x40)
0x13f5: v13f5 = AND v4f2 v13de(0xffffffffffffffffffffffffffffffffffffffff)
0x13f7: MSTORE v13e2(0x0) v13f5
0x13fa: MSTORE v13e9(0x20) v13f2
0x13fb: v13fb = SHA3 v13e2(0x0) v13ee(0x40)
0x13fc: v13fc = SLOAD v13fb
0x13fd: v13fd(0x140c) = CONST 
0x1402: v1402(0xffffffff) = CONST 
0x1407: v1407(0x192b) = CONST 
0x140a: v140a(0x192b) = AND v1407(0x192b) v1402(0xffffffff)
0x140b: v140b_0 = CALLPRIVATE v140a(0x192b) v500 v13fc v13fd(0x140c)
----------------------------------

Begin block 0x140c
prev = {'0x13d5'}, next = {'0x1590'}
----------------------------------
Block 0x140c
0x140d: v140d(0x1) = CONST 
0x140f: v140f(0xa0) = CONST 
0x1411: v1411(0x2) = CONST 
0x1413: v1413(0x10000000000000000000000000000000000000000) = EXP v1411(0x2) v140f(0xa0)
0x1414: v1414(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1413(0x10000000000000000000000000000000000000000) v140d(0x1)
0x1417: v1417 = AND v4fb v1414(0xffffffffffffffffffffffffffffffffffffffff)
0x1418: v1418(0x0) = CONST 
0x141c: MSTORE v1418(0x0) v1417
0x141d: v141d(0x5) = CONST 
0x141f: v141f(0x20) = CONST 
0x1423: MSTORE v141f(0x20) v141d(0x5)
0x1424: v1424(0x40) = CONST 
0x1428: v1428 = SHA3 v1418(0x0) v1424(0x40)
0x142b: v142b = AND v4f2 v1414(0xffffffffffffffffffffffffffffffffffffffff)
0x142d: MSTORE v1418(0x0) v142b
0x1430: MSTORE v141f(0x20) v1428
0x1431: v1431 = SHA3 v1418(0x0) v1424(0x40)
0x1432: SSTORE v1431 v140b_0
0x1433: v1433(0x1590) = CONST 
0x1436: JUMP v1433(0x1590)
----------------------------------

Begin block 0x1437
prev = {'0x1391'}, next = {'0x14af', '0x14b3'}
----------------------------------
Block 0x1437
0x1439: v1439(0x1) = CONST 
0x143b: v143b(0xa0) = CONST 
0x143d: v143d(0x2) = CONST 
0x143f: v143f(0x10000000000000000000000000000000000000000) = EXP v143d(0x2) v143b(0xa0)
0x1440: v1440(0xffffffffffffffffffffffffffffffffffffffff) = SUB v143f(0x10000000000000000000000000000000000000000) v1439(0x1)
0x1441: v1441 = AND v1440(0xffffffffffffffffffffffffffffffffffffffff) v4fb
0x1442: v1442(0xa9059cbb) = CONST 
0x1449: v1449(0x40) = CONST 
0x144b: v144b = MLOAD v1449(0x40)
0x144d: v144d(0xffffffff) = CONST 
0x1452: v1452(0xa9059cbb) = AND v144d(0xffffffff) v1442(0xa9059cbb)
0x1453: v1453(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x1471: v1471(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = MUL v1453(0x100000000000000000000000000000000000000000000000000000000) v1452(0xa9059cbb)
0x1473: MSTORE v144b v1471(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x1474: v1474(0x4) = CONST 
0x1476: v1476 = ADD v1474(0x4) v144b
0x1479: v1479(0x1) = CONST 
0x147b: v147b(0xa0) = CONST 
0x147d: v147d(0x2) = CONST 
0x147f: v147f(0x10000000000000000000000000000000000000000) = EXP v147d(0x2) v147b(0xa0)
0x1480: v1480(0xffffffffffffffffffffffffffffffffffffffff) = SUB v147f(0x10000000000000000000000000000000000000000) v1479(0x1)
0x1481: v1481 = AND v1480(0xffffffffffffffffffffffffffffffffffffffff) v4f2
0x1482: v1482(0x1) = CONST 
0x1484: v1484(0xa0) = CONST 
0x1486: v1486(0x2) = CONST 
0x1488: v1488(0x10000000000000000000000000000000000000000) = EXP v1486(0x2) v1484(0xa0)
0x1489: v1489(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1488(0x10000000000000000000000000000000000000000) v1482(0x1)
0x148a: v148a = AND v1489(0xffffffffffffffffffffffffffffffffffffffff) v1481
0x148c: MSTORE v1476 v148a
0x148d: v148d(0x20) = CONST 
0x148f: v148f = ADD v148d(0x20) v1476
0x1492: MSTORE v148f v500
0x1493: v1493(0x20) = CONST 
0x1495: v1495 = ADD v1493(0x20) v148f
0x149a: v149a(0x20) = CONST 
0x149c: v149c(0x40) = CONST 
0x149e: v149e = MLOAD v149c(0x40)
0x14a1: v14a1 = SUB v1495 v149e
0x14a3: v14a3(0x0) = CONST 
0x14a7: v14a7 = EXTCODESIZE v1441
0x14a8: v14a8 = ISZERO v14a7
0x14aa: v14aa = ISZERO v14a8
0x14ab: v14ab(0x14b3) = CONST 
0x14ae: JUMPI v14ab(0x14b3) v14aa
----------------------------------

Begin block 0x14af
prev = {'0x1437'}, next = {}
----------------------------------
Block 0x14af
0x14af: v14af(0x0) = CONST 
0x14b2: REVERT v14af(0x0) v14af(0x0)
----------------------------------

Begin block 0x14b3
prev = {'0x1437'}, next = {'0x14c7', '0x14be'}
----------------------------------
Block 0x14b3
0x14b5: v14b5 = GAS 
0x14b6: v14b6 = CALL v14b5 v1441 v14a3(0x0) v149e v14a1 v149e v149a(0x20)
0x14b7: v14b7 = ISZERO v14b6
0x14b9: v14b9 = ISZERO v14b7
0x14ba: v14ba(0x14c7) = CONST 
0x14bd: JUMPI v14ba(0x14c7) v14b9
----------------------------------

Begin block 0x14be
prev = {'0x14b3'}, next = {}
----------------------------------
Block 0x14be
0x14be: v14be = RETURNDATASIZE 
0x14bf: v14bf(0x0) = CONST 
0x14c2: RETURNDATACOPY v14bf(0x0) v14bf(0x0) v14be
0x14c3: v14c3 = RETURNDATASIZE 
0x14c4: v14c4(0x0) = CONST 
0x14c6: REVERT v14c4(0x0) v14c3
----------------------------------

Begin block 0x14c7
prev = {'0x14b3'}, next = {'0x14dd', '0x14d9'}
----------------------------------
Block 0x14c7
0x14cc: v14cc(0x40) = CONST 
0x14ce: v14ce = MLOAD v14cc(0x40)
0x14cf: v14cf = RETURNDATASIZE 
0x14d0: v14d0(0x20) = CONST 
0x14d3: v14d3 = LT v14cf v14d0(0x20)
0x14d4: v14d4 = ISZERO v14d3
0x14d5: v14d5(0x14dd) = CONST 
0x14d8: JUMPI v14d5(0x14dd) v14d4
----------------------------------

Begin block 0x14d9
prev = {'0x14c7'}, next = {}
----------------------------------
Block 0x14d9
0x14d9: v14d9(0x0) = CONST 
0x14dc: REVERT v14d9(0x0) v14d9(0x0)
----------------------------------

Begin block 0x14dd
prev = {'0x14c7'}, next = {'0x14e4', '0x1533'}
----------------------------------
Block 0x14dd
0x14df: v14df = MLOAD v14ce
0x14e0: v14e0(0x1533) = CONST 
0x14e3: JUMPI v14e0(0x1533) v14df
----------------------------------

Begin block 0x14e4
prev = {'0x14dd'}, next = {}
----------------------------------
Block 0x14e4
0x14e4: v14e4(0x40) = CONST 
0x14e7: v14e7 = MLOAD v14e4(0x40)
0x14e8: v14e8(0xe5) = CONST 
0x14ea: v14ea(0x2) = CONST 
0x14ec: v14ec(0x2000000000000000000000000000000000000000000000000000000000) = EXP v14ea(0x2) v14e8(0xe5)
0x14ed: v14ed(0x461bcd) = CONST 
0x14f1: v14f1(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v14ed(0x461bcd) v14ec(0x2000000000000000000000000000000000000000000000000000000000)
0x14f3: MSTORE v14e7 v14f1(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x14f4: v14f4(0x20) = CONST 
0x14f6: v14f6(0x4) = CONST 
0x14f9: v14f9 = ADD v14e7 v14f6(0x4)
0x14fa: MSTORE v14f9 v14f4(0x20)
0x14fb: v14fb(0x19) = CONST 
0x14fd: v14fd(0x24) = CONST 
0x1500: v1500 = ADD v14e7 v14fd(0x24)
0x1501: MSTORE v1500 v14fb(0x19)
0x1502: v1502(0x4e6f7420656e6f75676820617070726f76656420455243323000000000000000) = CONST 
0x1523: v1523(0x44) = CONST 
0x1526: v1526 = ADD v14e7 v1523(0x44)
0x1527: MSTORE v1526 v1502(0x4e6f7420656e6f75676820617070726f76656420455243323000000000000000)
0x1529: v1529 = MLOAD v14e4(0x40)
0x152d: v152d = SUB v14e7 v1529
0x152e: v152e(0x64) = CONST 
0x1530: v1530 = ADD v152e(0x64) v152d
0x1532: REVERT v1529 v1530
----------------------------------

Begin block 0x1533
prev = {'0x14dd'}, next = {'0x1569'}
----------------------------------
Block 0x1533
0x1534: v1534(0x1) = CONST 
0x1536: v1536(0xa0) = CONST 
0x1538: v1538(0x2) = CONST 
0x153a: v153a(0x10000000000000000000000000000000000000000) = EXP v1538(0x2) v1536(0xa0)
0x153b: v153b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v153a(0x10000000000000000000000000000000000000000) v1534(0x1)
0x153e: v153e = AND v4fb v153b(0xffffffffffffffffffffffffffffffffffffffff)
0x153f: v153f(0x0) = CONST 
0x1543: MSTORE v153f(0x0) v153e
0x1544: v1544(0x5) = CONST 
0x1546: v1546(0x20) = CONST 
0x154a: MSTORE v1546(0x20) v1544(0x5)
0x154b: v154b(0x40) = CONST 
0x154f: v154f = SHA3 v153f(0x0) v154b(0x40)
0x1552: v1552 = AND v4f2 v153b(0xffffffffffffffffffffffffffffffffffffffff)
0x1554: MSTORE v153f(0x0) v1552
0x1557: MSTORE v1546(0x20) v154f
0x1558: v1558 = SHA3 v153f(0x0) v154b(0x40)
0x1559: v1559 = SLOAD v1558
0x155a: v155a(0x1569) = CONST 
0x155f: v155f(0xffffffff) = CONST 
0x1564: v1564(0x192b) = CONST 
0x1567: v1567(0x192b) = AND v1564(0x192b) v155f(0xffffffff)
0x1568: v1568_0 = CALLPRIVATE v1567(0x192b) v500 v1559 v155a(0x1569)
----------------------------------

Begin block 0x1569
prev = {'0x1533'}, next = {'0x1590'}
----------------------------------
Block 0x1569
0x156a: v156a(0x1) = CONST 
0x156c: v156c(0xa0) = CONST 
0x156e: v156e(0x2) = CONST 
0x1570: v1570(0x10000000000000000000000000000000000000000) = EXP v156e(0x2) v156c(0xa0)
0x1571: v1571(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1570(0x10000000000000000000000000000000000000000) v156a(0x1)
0x1574: v1574 = AND v4fb v1571(0xffffffffffffffffffffffffffffffffffffffff)
0x1575: v1575(0x0) = CONST 
0x1579: MSTORE v1575(0x0) v1574
0x157a: v157a(0x5) = CONST 
0x157c: v157c(0x20) = CONST 
0x1580: MSTORE v157c(0x20) v157a(0x5)
0x1581: v1581(0x40) = CONST 
0x1585: v1585 = SHA3 v1575(0x0) v1581(0x40)
0x1588: v1588 = AND v4f2 v1571(0xffffffffffffffffffffffffffffffffffffffff)
0x158a: MSTORE v1575(0x0) v1588
0x158d: MSTORE v157c(0x20) v1585
0x158e: v158e = SHA3 v1575(0x0) v1581(0x40)
0x158f: SSTORE v158e v1568_0
----------------------------------

Begin block 0x1590
prev = {'0x1569', '0x140c'}, next = {'0x1850x4c2'}
----------------------------------
Block 0x1590
0x1591: v1591(0x40) = CONST 
0x1594: v1594 = MLOAD v1591(0x40)
0x1595: v1595(0x1) = CONST 
0x1597: v1597(0xa0) = CONST 
0x1599: v1599(0x2) = CONST 
0x159b: v159b(0x10000000000000000000000000000000000000000) = EXP v1599(0x2) v1597(0xa0)
0x159c: v159c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v159b(0x10000000000000000000000000000000000000000) v1595(0x1)
0x159f: v159f = AND v159c(0xffffffffffffffffffffffffffffffffffffffff) v4fb
0x15a1: MSTORE v1594 v159f
0x15a2: v15a2(0x20) = CONST 
0x15a5: v15a5 = ADD v1594 v15a2(0x20)
0x15a8: MSTORE v15a5 v500
0x15aa: v15aa = MLOAD v1591(0x40)
0x15ad: v15ad = AND v4f2 v159c(0xffffffffffffffffffffffffffffffffffffffff)
0x15af: v15af(0xb9484603b5282bab13ae2984448a8cf0ce27ddbe88b44fb172ad73374f272a38) = CONST 
0x15d3: v15d3 = SUB v1594 v15aa
0x15d4: v15d4 = ADD v15d3 v1591(0x40)
0x15d6: LOG2 v15aa v15d4 v15af(0xb9484603b5282bab13ae2984448a8cf0ce27ddbe88b44fb172ad73374f272a38) v15ad
0x15da: JUMP v4d0(0x185)
----------------------------------

Begin block 0x15db
prev = {'0x51b'}, next = {'0x1636', '0x15fd'}
----------------------------------
Block 0x15db
0x15dc: v15dc(0x0) = CONST 
0x15e0: MSTORE v15dc(0x0) v52c
0x15e1: v15e1(0x4) = CONST 
0x15e3: v15e3(0x20) = CONST 
0x15e5: MSTORE v15e3(0x20) v15e1(0x4)
0x15e6: v15e6(0x40) = CONST 
0x15e9: v15e9 = SHA3 v15dc(0x0) v15e6(0x40)
0x15ea: v15ea = SLOAD v15e9
0x15eb: v15eb(0x1) = CONST 
0x15ed: v15ed(0xa0) = CONST 
0x15ef: v15ef(0x2) = CONST 
0x15f1: v15f1(0x10000000000000000000000000000000000000000) = EXP v15ef(0x2) v15ed(0xa0)
0x15f2: v15f2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f1(0x10000000000000000000000000000000000000000) v15eb(0x1)
0x15f5: v15f5 = AND v15f2(0xffffffffffffffffffffffffffffffffffffffff) v527
0x15f7: v15f7 = AND v15ea v15f2(0xffffffffffffffffffffffffffffffffffffffff)
0x15f8: v15f8 = EQ v15f7 v15f5
0x15f9: v15f9(0x1636) = CONST 
0x15fc: JUMPI v15f9(0x1636) v15f8
----------------------------------

Begin block 0x15fd
prev = {'0x15db'}, next = {}
----------------------------------
Block 0x15fd
0x15fd: v15fd(0x40) = CONST 
0x15ff: v15ff = MLOAD v15fd(0x40)
0x1600: v1600(0xe5) = CONST 
0x1602: v1602(0x2) = CONST 
0x1604: v1604(0x2000000000000000000000000000000000000000000000000000000000) = EXP v1602(0x2) v1600(0xe5)
0x1605: v1605(0x461bcd) = CONST 
0x1609: v1609(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v1605(0x461bcd) v1604(0x2000000000000000000000000000000000000000000000000000000000)
0x160b: MSTORE v15ff v1609(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x160c: v160c(0x4) = CONST 
0x160e: v160e = ADD v160c(0x4) v15ff
0x1611: v1611(0x20) = CONST 
0x1613: v1613 = ADD v1611(0x20) v160e
0x1616: v1616 = SUB v1613 v160e
0x1618: MSTORE v160e v1616
0x1619: v1619(0x28) = CONST 
0x161c: MSTORE v1613 v1619(0x28)
0x161d: v161d(0x20) = CONST 
0x161f: v161f = ADD v161d(0x20) v1613
0x1621: v1621(0x1ab9) = CONST 
0x1624: v1624(0x28) = CONST 
0x1627: CODECOPY v161f v1621(0x1ab9) v1624(0x28)
0x1628: v1628(0x40) = CONST 
0x162a: v162a = ADD v1628(0x40) v161f
0x162e: v162e(0x40) = CONST 
0x1630: v1630 = MLOAD v162e(0x40)
0x1633: v1633 = SUB v162a v1630
0x1635: REVERT v1630 v1633
----------------------------------

Begin block 0x1636
prev = {'0x15db'}, next = {'0x165f'}
----------------------------------
Block 0x1636
0x1637: v1637(0x0) = CONST 
0x163a: MSTORE v1637(0x0) v1637(0x0)
0x163b: v163b(0x6) = CONST 
0x163d: v163d(0x20) = CONST 
0x163f: MSTORE v163d(0x20) v163b(0x6)
0x1640: v1640(0x0) = CONST 
0x1643: v1643 = MLOAD v1640(0x0)
0x1644: v1644(0x20) = CONST 
0x1646: v1646(0x1c48) = CONST 
0x164e: MSTORE v1640(0x0) v1643
0x164f: v164f = SLOAD v1d03(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8)
0x1650: v1650(0x165f) = CONST 
0x1654: v1654 = CALLVALUE 
0x1655: v1655(0xffffffff) = CONST 
0x165a: v165a(0x18c7) = CONST 
0x165d: v165d(0x18c7) = AND v165a(0x18c7) v1655(0xffffffff)
0x165e: v165e_0 = CALLPRIVATE v165d(0x18c7) v1654 v164f v1650(0x165f)
0x1d03: v1d03(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
----------------------------------

Begin block 0x165f
prev = {'0x1636'}, next = {'0x1850x505'}
----------------------------------
Block 0x165f
0x1660: v1660(0x0) = CONST 
0x1663: MSTORE v1660(0x0) v1660(0x0)
0x1664: v1664(0x6) = CONST 
0x1666: v1666(0x20) = CONST 
0x166a: MSTORE v1666(0x20) v1664(0x6)
0x166b: v166b(0x0) = CONST 
0x166e: v166e = MLOAD v166b(0x0)
0x166f: v166f(0x20) = CONST 
0x1671: v1671(0x1c48) = CONST 
0x1679: MSTORE v166b(0x0) v166e
0x167d: SSTORE v1d08(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) v165e_0
0x167e: v167e(0x40) = CONST 
0x1681: v1681 = MLOAD v167e(0x40)
0x1684: MSTORE v1681 v52c
0x1685: v1685 = CALLVALUE 
0x1688: v1688 = ADD v1681 v1666(0x20)
0x168c: MSTORE v1688 v1685
0x168e: v168e = MLOAD v167e(0x40)
0x168f: v168f(0x1) = CONST 
0x1691: v1691(0xa0) = CONST 
0x1693: v1693(0x2) = CONST 
0x1695: v1695(0x10000000000000000000000000000000000000000) = EXP v1693(0x2) v1691(0xa0)
0x1696: v1696(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1695(0x10000000000000000000000000000000000000000) v168f(0x1)
0x1698: v1698 = AND v527 v1696(0xffffffffffffffffffffffffffffffffffffffff)
0x169a: v169a(0x9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93) = CONST 
0x16bf: v16bf = SUB v1681 v168e
0x16c0: v16c0 = ADD v16bf v167e(0x40)
0x16c2: LOG2 v168e v16c0 v169a(0x9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93) v1698
0x16c5: JUMP v506(0x185)
0x1d08: v1d08(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
----------------------------------

Begin block 0x16c6
prev = {'0x554'}, next = {'0x1712', '0x16d9'}
----------------------------------
Block 0x16c6
0x16c7: v16c7(0x1) = CONST 
0x16c9: v16c9 = SLOAD v16c7(0x1)
0x16ca: v16ca(0x1) = CONST 
0x16cc: v16cc(0xa0) = CONST 
0x16ce: v16ce(0x2) = CONST 
0x16d0: v16d0(0x10000000000000000000000000000000000000000) = EXP v16ce(0x2) v16cc(0xa0)
0x16d1: v16d1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v16d0(0x10000000000000000000000000000000000000000) v16ca(0x1)
0x16d2: v16d2 = AND v16d1(0xffffffffffffffffffffffffffffffffffffffff) v16c9
0x16d3: v16d3 = CALLER 
0x16d4: v16d4 = EQ v16d3 v16d2
0x16d5: v16d5(0x1712) = CONST 
0x16d8: JUMPI v16d5(0x1712) v16d4
----------------------------------

Begin block 0x16d9
prev = {'0x16c6'}, next = {}
----------------------------------
Block 0x16d9
0x16d9: v16d9(0x40) = CONST 
0x16db: v16db = MLOAD v16d9(0x40)
0x16dc: v16dc(0xe5) = CONST 
0x16de: v16de(0x2) = CONST 
0x16e0: v16e0(0x2000000000000000000000000000000000000000000000000000000000) = EXP v16de(0x2) v16dc(0xe5)
0x16e1: v16e1(0x461bcd) = CONST 
0x16e5: v16e5(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v16e1(0x461bcd) v16e0(0x2000000000000000000000000000000000000000000000000000000000)
0x16e7: MSTORE v16db v16e5(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x16e8: v16e8(0x4) = CONST 
0x16ea: v16ea = ADD v16e8(0x4) v16db
0x16ed: v16ed(0x20) = CONST 
0x16ef: v16ef = ADD v16ed(0x20) v16ea
0x16f2: v16f2 = SUB v16ef v16ea
0x16f4: MSTORE v16ea v16f2
0x16f5: v16f5(0x29) = CONST 
0x16f8: MSTORE v16ef v16f5(0x29)
0x16f9: v16f9(0x20) = CONST 
0x16fb: v16fb = ADD v16f9(0x20) v16ef
0x16fd: v16fd(0x1b2e) = CONST 
0x1700: v1700(0x29) = CONST 
0x1703: CODECOPY v16fb v16fd(0x1b2e) v1700(0x29)
0x1704: v1704(0x40) = CONST 
0x1706: v1706 = ADD v1704(0x40) v16fb
0x170a: v170a(0x40) = CONST 
0x170c: v170c = MLOAD v170a(0x40)
0x170f: v170f = SUB v1706 v170c
0x1711: REVERT v170c v170f
----------------------------------

Begin block 0x1712
prev = {'0x16c6'}, next = {'0x173b'}
----------------------------------
Block 0x1712
0x1713: v1713(0x1) = CONST 
0x1715: v1715(0xa0) = CONST 
0x1717: v1717(0x2) = CONST 
0x1719: v1719(0x10000000000000000000000000000000000000000) = EXP v1717(0x2) v1715(0xa0)
0x171a: v171a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1719(0x10000000000000000000000000000000000000000) v1713(0x1)
0x171c: v171c = AND v56a v171a(0xffffffffffffffffffffffffffffffffffffffff)
0x171d: v171d(0x0) = CONST 
0x1721: MSTORE v171d(0x0) v171c
0x1722: v1722(0x6) = CONST 
0x1724: v1724(0x20) = CONST 
0x1726: MSTORE v1724(0x20) v1722(0x6)
0x1727: v1727(0x40) = CONST 
0x172a: v172a = SHA3 v171d(0x0) v1727(0x40)
0x172b: v172b = SLOAD v172a
0x172c: v172c(0x173b) = CONST 
0x1731: v1731(0xffffffff) = CONST 
0x1736: v1736(0x18c7) = CONST 
0x1739: v1739(0x18c7) = AND v1736(0x18c7) v1731(0xffffffff)
0x173a: v173a_0 = CALLPRIVATE v1739(0x18c7) v56f v172b v172c(0x173b)
----------------------------------

Begin block 0x173b
prev = {'0x1712'}, next = {'0x177d'}
----------------------------------
Block 0x173b
0x173c: v173c(0x1) = CONST 
0x173e: v173e(0xa0) = CONST 
0x1740: v1740(0x2) = CONST 
0x1742: v1742(0x10000000000000000000000000000000000000000) = EXP v1740(0x2) v173e(0xa0)
0x1743: v1743(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1742(0x10000000000000000000000000000000000000000) v173c(0x1)
0x1746: v1746 = AND v56a v1743(0xffffffffffffffffffffffffffffffffffffffff)
0x1747: v1747(0x0) = CONST 
0x174b: MSTORE v1747(0x0) v1746
0x174c: v174c(0x6) = CONST 
0x174e: v174e(0x20) = CONST 
0x1752: MSTORE v174e(0x20) v174c(0x6)
0x1753: v1753(0x40) = CONST 
0x1757: v1757 = SHA3 v1747(0x0) v1753(0x40)
0x175b: SSTORE v1757 v173a_0
0x175c: v175c(0x5) = CONST 
0x175f: MSTORE v174e(0x20) v175c(0x5)
0x1762: v1762 = SHA3 v1747(0x0) v1753(0x40)
0x1765: v1765 = AND v561 v1743(0xffffffffffffffffffffffffffffffffffffffff)
0x1767: MSTORE v1747(0x0) v1765
0x176b: MSTORE v174e(0x20) v1762
0x176c: v176c = SHA3 v1747(0x0) v1753(0x40)
0x176d: v176d = SLOAD v176c
0x176e: v176e(0x177d) = CONST 
0x1773: v1773(0xffffffff) = CONST 
0x1778: v1778(0x192b) = CONST 
0x177b: v177b(0x192b) = AND v1778(0x192b) v1773(0xffffffff)
0x177c: v177c_0 = CALLPRIVATE v177b(0x192b) v56f v176d v176e(0x177d)
----------------------------------

Begin block 0x177d
prev = {'0x173b'}, next = {'0x1850x531'}
----------------------------------
Block 0x177d
0x177e: v177e(0x1) = CONST 
0x1780: v1780(0xa0) = CONST 
0x1782: v1782(0x2) = CONST 
0x1784: v1784(0x10000000000000000000000000000000000000000) = EXP v1782(0x2) v1780(0xa0)
0x1785: v1785(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1784(0x10000000000000000000000000000000000000000) v177e(0x1)
0x1788: v1788 = AND v56a v1785(0xffffffffffffffffffffffffffffffffffffffff)
0x1789: v1789(0x0) = CONST 
0x178d: MSTORE v1789(0x0) v1788
0x178e: v178e(0x5) = CONST 
0x1790: v1790(0x20) = CONST 
0x1794: MSTORE v1790(0x20) v178e(0x5)
0x1795: v1795(0x40) = CONST 
0x1799: v1799 = SHA3 v1789(0x0) v1795(0x40)
0x179c: v179c = AND v561 v1785(0xffffffffffffffffffffffffffffffffffffffff)
0x179f: MSTORE v1789(0x0) v179c
0x17a2: MSTORE v1790(0x20) v1799
0x17a6: v17a6 = SHA3 v1789(0x0) v1795(0x40)
0x17aa: SSTORE v17a6 v177c_0
0x17ac: v17ac = MLOAD v1795(0x40)
0x17af: MSTORE v17ac v1788
0x17b2: v17b2 = ADD v17ac v1790(0x20)
0x17b5: MSTORE v17b2 v56f
0x17b7: v17b7 = MLOAD v1795(0x40)
0x17ba: v17ba(0x6a18cd5b165a2771308d97a117eacbc073907af17bfea236217f0e8632a738bc) = CONST 
0x17df: v17df = SUB v17ac v17b7
0x17e0: v17e0 = ADD v17df v1795(0x40)
0x17e2: LOG2 v17b7 v17e0 v17ba(0x6a18cd5b165a2771308d97a117eacbc073907af17bfea236217f0e8632a738bc) v179c
0x17e6: JUMP v53f(0x185)
----------------------------------

Begin block 0x17e7
prev = {'0x597'}, next = {'0x59e'}
----------------------------------
Block 0x17e7
0x17e8: v17e8(0x3) = CONST 
0x17ea: v17ea(0x20) = CONST 
0x17ee: MSTORE v17ea(0x20) v17e8(0x3)
0x17ef: v17ef(0x0) = CONST 
0x17f3: MSTORE v17ef(0x0) v599
0x17f4: v17f4(0x40) = CONST 
0x17f8: v17f8 = SHA3 v17ef(0x0) v17f4(0x40)
0x17fa: v17fa = SLOAD v17f8
0x17fb: v17fb(0x1) = CONST 
0x17fe: v17fe = ADD v17f8 v17fb(0x1)
0x17ff: v17ff = SLOAD v17fe
0x1800: v1800(0x2) = CONST 
0x1803: v1803 = ADD v17f8 v1800(0x2)
0x1804: v1804 = SLOAD v1803
0x1807: v1807 = ADD v17f8 v17e8(0x3)
0x1808: v1808 = SLOAD v1807
0x1809: v1809(0x4) = CONST 
0x180c: v180c = ADD v17f8 v1809(0x4)
0x180d: v180d = SLOAD v180c
0x180e: v180e(0x5) = CONST 
0x1812: v1812 = ADD v17f8 v180e(0x5)
0x1813: v1813 = SLOAD v1812
0x1814: v1814(0x1) = CONST 
0x1816: v1816(0xa0) = CONST 
0x1818: v1818(0x2) = CONST 
0x181a: v181a(0x10000000000000000000000000000000000000000) = EXP v1818(0x2) v1816(0xa0)
0x181b: v181b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v181a(0x10000000000000000000000000000000000000000) v1814(0x1)
0x181e: v181e = AND v17fa v181b(0xffffffffffffffffffffffffffffffffffffffff)
0x1827: v1827(0xffffffff) = CONST 
0x182e: v182e = AND v1813 v1827(0xffffffff)
0x1830: v1830(0x100000000) = CONST 
0x1837: v1837 = DIV v1813 v1830(0x100000000)
0x1839: v1839 = AND v1827(0xffffffff) v1837
0x183b: v183b(0x10000000000000000) = CONST 
0x1846: v1846 = DIV v1813 v183b(0x10000000000000000)
0x1847: v1847 = AND v1846 v1827(0xffffffff)
0x1849: v1849(0x1000000000000000000000000) = CONST 
0x1858: v1858 = DIV v1813 v1849(0x1000000000000000000000000)
0x1859: v1859(0xffff) = CONST 
0x185c: v185c = AND v1859(0xffff) v1858
0x185e: JUMP v582(0x59e)
----------------------------------

Begin block 0x185f
prev = {'0x622'}, next = {'0x1867'}
----------------------------------
Block 0x185f
0x1860: v1860(0x1867) = CONST 
0x1863: v1863(0xe0d) = CONST 
0x1866: v1866_0 = CALLPRIVATE v1863(0xe0d) v1860(0x1867)
----------------------------------

Begin block 0x1867
prev = {'0x185f'}, next = {'0x18bb', '0x186c'}
----------------------------------
Block 0x1867
0x1868: v1868(0x18bb) = CONST 
0x186b: JUMPI v1868(0x18bb) v1866_0
----------------------------------

Begin block 0x186c
prev = {'0x1867'}, next = {}
----------------------------------
Block 0x186c
0x186c: v186c(0x40) = CONST 
0x186f: v186f = MLOAD v186c(0x40)
0x1870: v1870(0xe5) = CONST 
0x1872: v1872(0x2) = CONST 
0x1874: v1874(0x2000000000000000000000000000000000000000000000000000000000) = EXP v1872(0x2) v1870(0xe5)
0x1875: v1875(0x461bcd) = CONST 
0x1879: v1879(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v1875(0x461bcd) v1874(0x2000000000000000000000000000000000000000000000000000000000)
0x187b: MSTORE v186f v1879(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x187c: v187c(0x20) = CONST 
0x187e: v187e(0x4) = CONST 
0x1881: v1881 = ADD v186f v187e(0x4)
0x1884: MSTORE v1881 v187c(0x20)
0x1885: v1885(0x24) = CONST 
0x1888: v1888 = ADD v186f v1885(0x24)
0x1889: MSTORE v1888 v187c(0x20)
0x188a: v188a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x18ab: v18ab(0x44) = CONST 
0x18ae: v18ae = ADD v186f v18ab(0x44)
0x18af: MSTORE v18ae v188a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x18b1: v18b1 = MLOAD v186c(0x40)
0x18b5: v18b5 = SUB v186f v18b1
0x18b6: v18b6(0x64) = CONST 
0x18b8: v18b8 = ADD v18b6(0x64) v18b5
0x18ba: REVERT v18b1 v18b8
----------------------------------

Begin block 0x18bb
prev = {'0x1867'}, next = {'0x198b'}
----------------------------------
Block 0x18bb
0x18bc: v18bc(0x18c4) = CONST 
0x18c0: v18c0(0x198b) = CONST 
0x18c3: JUMP v18c0(0x198b)
----------------------------------

Begin block 0x18c4
prev = {'0x19d3'}, next = {'0x1850x5ff'}
----------------------------------
Block 0x18c4
0x18c6: JUMP v60d(0x185)
----------------------------------

Begin block 0x18c7
prev = {}, next = {'0x18d5', '0x1924'}
----------------------------------
function 0x18c7(v18c7arg0, v18c7arg1, v18c7arg2)
Block 0x18c7
0x18c8: v18c8(0x0) = CONST 
0x18cc: v18cc = ADD v18c7arg0 v18c7arg1
0x18cf: v18cf = LT v18cc v18c7arg1
0x18d0: v18d0 = ISZERO v18cf
0x18d1: v18d1(0x1924) = CONST 
0x18d4: JUMPI v18d1(0x1924) v18d0
----------------------------------

Begin block 0x18d5
prev = {'0x18c7'}, next = {}
----------------------------------
Block 0x18d5
0x18d5: v18d5(0x40) = CONST 
0x18d8: v18d8 = MLOAD v18d5(0x40)
0x18d9: v18d9(0xe5) = CONST 
0x18db: v18db(0x2) = CONST 
0x18dd: v18dd(0x2000000000000000000000000000000000000000000000000000000000) = EXP v18db(0x2) v18d9(0xe5)
0x18de: v18de(0x461bcd) = CONST 
0x18e2: v18e2(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v18de(0x461bcd) v18dd(0x2000000000000000000000000000000000000000000000000000000000)
0x18e4: MSTORE v18d8 v18e2(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x18e5: v18e5(0x20) = CONST 
0x18e7: v18e7(0x4) = CONST 
0x18ea: v18ea = ADD v18d8 v18e7(0x4)
0x18eb: MSTORE v18ea v18e5(0x20)
0x18ec: v18ec(0x1b) = CONST 
0x18ee: v18ee(0x24) = CONST 
0x18f1: v18f1 = ADD v18d8 v18ee(0x24)
0x18f2: MSTORE v18f1 v18ec(0x1b)
0x18f3: v18f3(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
0x1914: v1914(0x44) = CONST 
0x1917: v1917 = ADD v18d8 v1914(0x44)
0x1918: MSTORE v1917 v18f3(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
0x191a: v191a = MLOAD v18d5(0x40)
0x191e: v191e = SUB v18d8 v191a
0x191f: v191f(0x64) = CONST 
0x1921: v1921 = ADD v191f(0x64) v191e
0x1923: REVERT v191a v1921
----------------------------------

Begin block 0x1924
prev = {'0x18c7'}, next = {}
----------------------------------
Block 0x1924
0x192a: RETURNPRIVATE v18c7arg2 v18cc
----------------------------------

Begin block 0x192b
prev = {}, next = {'0x1936', '0x1985'}
----------------------------------
function 0x192b(v192barg0, v192barg1, v192barg2)
Block 0x192b
0x192c: v192c(0x0) = CONST 
0x1930: v1930 = GT v192barg0 v192barg1
0x1931: v1931 = ISZERO v1930
0x1932: v1932(0x1985) = CONST 
0x1935: JUMPI v1932(0x1985) v1931
----------------------------------

Begin block 0x1936
prev = {'0x192b'}, next = {}
----------------------------------
Block 0x1936
0x1936: v1936(0x40) = CONST 
0x1939: v1939 = MLOAD v1936(0x40)
0x193a: v193a(0xe5) = CONST 
0x193c: v193c(0x2) = CONST 
0x193e: v193e(0x2000000000000000000000000000000000000000000000000000000000) = EXP v193c(0x2) v193a(0xe5)
0x193f: v193f(0x461bcd) = CONST 
0x1943: v1943(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v193f(0x461bcd) v193e(0x2000000000000000000000000000000000000000000000000000000000)
0x1945: MSTORE v1939 v1943(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x1946: v1946(0x20) = CONST 
0x1948: v1948(0x4) = CONST 
0x194b: v194b = ADD v1939 v1948(0x4)
0x194c: MSTORE v194b v1946(0x20)
0x194d: v194d(0x1e) = CONST 
0x194f: v194f(0x24) = CONST 
0x1952: v1952 = ADD v1939 v194f(0x24)
0x1953: MSTORE v1952 v194d(0x1e)
0x1954: v1954(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
0x1975: v1975(0x44) = CONST 
0x1978: v1978 = ADD v1939 v1975(0x44)
0x1979: MSTORE v1978 v1954(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
0x197b: v197b = MLOAD v1936(0x40)
0x197f: v197f = SUB v1939 v197b
0x1980: v1980(0x64) = CONST 
0x1982: v1982 = ADD v1980(0x64) v197f
0x1984: REVERT v197b v1982
----------------------------------

Begin block 0x1985
prev = {'0x192b'}, next = {}
----------------------------------
Block 0x1985
0x1988: v1988 = SUB v192barg1 v192barg0
0x198a: RETURNPRIVATE v192barg2 v1988
----------------------------------

Begin block 0x198b
prev = {'0x18bb'}, next = {'0x19d3', '0x199a'}
----------------------------------
Block 0x198b
0x198c: v198c(0x1) = CONST 
0x198e: v198e(0xa0) = CONST 
0x1990: v1990(0x2) = CONST 
0x1992: v1992(0x10000000000000000000000000000000000000000) = EXP v1990(0x2) v198e(0xa0)
0x1993: v1993(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1992(0x10000000000000000000000000000000000000000) v198c(0x1)
0x1995: v1995 = AND v62d v1993(0xffffffffffffffffffffffffffffffffffffffff)
0x1996: v1996(0x19d3) = CONST 
0x1999: JUMPI v1996(0x19d3) v1995
----------------------------------

Begin block 0x199a
prev = {'0x198b'}, next = {}
----------------------------------
Block 0x199a
0x199a: v199a(0x40) = CONST 
0x199c: v199c = MLOAD v199a(0x40)
0x199d: v199d(0xe5) = CONST 
0x199f: v199f(0x2) = CONST 
0x19a1: v19a1(0x2000000000000000000000000000000000000000000000000000000000) = EXP v199f(0x2) v199d(0xe5)
0x19a2: v19a2(0x461bcd) = CONST 
0x19a6: v19a6(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v19a2(0x461bcd) v19a1(0x2000000000000000000000000000000000000000000000000000000000)
0x19a8: MSTORE v199c v19a6(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x19a9: v19a9(0x4) = CONST 
0x19ab: v19ab = ADD v19a9(0x4) v199c
0x19ae: v19ae(0x20) = CONST 
0x19b0: v19b0 = ADD v19ae(0x20) v19ab
0x19b3: v19b3 = SUB v19b0 v19ab
0x19b5: MSTORE v19ab v19b3
0x19b6: v19b6(0x26) = CONST 
0x19b9: MSTORE v19b0 v19b6(0x26)
0x19ba: v19ba(0x20) = CONST 
0x19bc: v19bc = ADD v19ba(0x20) v19b0
0x19be: v19be(0x1b08) = CONST 
0x19c1: v19c1(0x26) = CONST 
0x19c4: CODECOPY v19bc v19be(0x1b08) v19c1(0x26)
0x19c5: v19c5(0x40) = CONST 
0x19c7: v19c7 = ADD v19c5(0x40) v19bc
0x19cb: v19cb(0x40) = CONST 
0x19cd: v19cd = MLOAD v19cb(0x40)
0x19d0: v19d0 = SUB v19c7 v19cd
0x19d2: REVERT v19cd v19d0
----------------------------------

Begin block 0x19d3
prev = {'0x198b'}, next = {'0x18c4'}
----------------------------------
Block 0x19d3
0x19d4: v19d4(0x0) = CONST 
0x19d7: v19d7 = SLOAD v19d4(0x0)
0x19d8: v19d8(0x40) = CONST 
0x19da: v19da = MLOAD v19d8(0x40)
0x19db: v19db(0x1) = CONST 
0x19dd: v19dd(0xa0) = CONST 
0x19df: v19df(0x2) = CONST 
0x19e1: v19e1(0x10000000000000000000000000000000000000000) = EXP v19df(0x2) v19dd(0xa0)
0x19e2: v19e2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v19e1(0x10000000000000000000000000000000000000000) v19db(0x1)
0x19e5: v19e5 = AND v62d v19e2(0xffffffffffffffffffffffffffffffffffffffff)
0x19e8: v19e8 = AND v19d7 v19e2(0xffffffffffffffffffffffffffffffffffffffff)
0x19ea: v19ea(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x1a0c: LOG3 v19da v19d4(0x0) v19ea(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v19e8 v19e5
0x1a0d: v1a0d(0x0) = CONST 
0x1a10: v1a10 = SLOAD v1a0d(0x0)
0x1a11: v1a11(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1a26: v1a26(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1a11(0xffffffffffffffffffffffffffffffffffffffff)
0x1a27: v1a27 = AND v1a26(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v1a10
0x1a28: v1a28(0x1) = CONST 
0x1a2a: v1a2a(0xa0) = CONST 
0x1a2c: v1a2c(0x2) = CONST 
0x1a2e: v1a2e(0x10000000000000000000000000000000000000000) = EXP v1a2c(0x2) v1a2a(0xa0)
0x1a2f: v1a2f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a2e(0x10000000000000000000000000000000000000000) v1a28(0x1)
0x1a33: v1a33 = AND v1a2f(0xffffffffffffffffffffffffffffffffffffffff) v62d
0x1a37: v1a37 = OR v1a33 v1a27
0x1a39: SSTORE v1a0d(0x0) v1a37
0x1a3a: JUMP v18bc(0x18c4)
----------------------------------

Begin block 0x1a3b
prev = {'0xb52'}, next = {'0xb5a'}
----------------------------------
Block 0x1a3b
0x1a3c: v1a3c(0x40) = CONST 
0x1a3f: v1a3f = MLOAD v1a3c(0x40)
0x1a40: v1a40(0x120) = CONST 
0x1a44: v1a44 = ADD v1a3f v1a40(0x120)
0x1a46: MSTORE v1a3c(0x40) v1a44
0x1a47: v1a47(0x0) = CONST 
0x1a4b: MSTORE v1a3f v1a47(0x0)
0x1a4c: v1a4c(0x20) = CONST 
0x1a4f: v1a4f = ADD v1a3f v1a4c(0x20)
0x1a52: MSTORE v1a4f v1a47(0x0)
0x1a55: v1a55 = ADD v1a3f v1a3c(0x40)
0x1a58: MSTORE v1a55 v1a47(0x0)
0x1a59: v1a59(0x60) = CONST 
0x1a5c: v1a5c = ADD v1a3f v1a59(0x60)
0x1a5f: MSTORE v1a5c v1a47(0x0)
0x1a60: v1a60(0x80) = CONST 
0x1a63: v1a63 = ADD v1a3f v1a60(0x80)
0x1a66: MSTORE v1a63 v1a47(0x0)
0x1a67: v1a67(0xa0) = CONST 
0x1a6a: v1a6a = ADD v1a3f v1a67(0xa0)
0x1a6d: MSTORE v1a6a v1a47(0x0)
0x1a6e: v1a6e(0xc0) = CONST 
0x1a71: v1a71 = ADD v1a3f v1a6e(0xc0)
0x1a74: MSTORE v1a71 v1a47(0x0)
0x1a75: v1a75(0xe0) = CONST 
0x1a78: v1a78 = ADD v1a3f v1a75(0xe0)
0x1a7b: MSTORE v1a78 v1a47(0x0)
0x1a7c: v1a7c(0x100) = CONST 
0x1a80: v1a80 = ADD v1a3f v1a7c(0x100)
0x1a84: MSTORE v1a80 v1a47(0x0)
0x1a86: JUMP vb53(0xb5a)
----------------------------------

Begin block 0x1a87
prev = {'0xf17'}, next = {'0xf1f'}
----------------------------------
Block 0x1a87
0x1a88: v1a88(0x40) = CONST 
0x1a8a: v1a8a = MLOAD v1a88(0x40)
0x1a8c: v1a8c(0x80) = CONST 
0x1a8e: v1a8e = ADD v1a8c(0x80) v1a8a
0x1a8f: v1a8f(0x40) = CONST 
0x1a91: MSTORE v1a8f(0x40) v1a8e
0x1a93: v1a93(0x0) = CONST 
0x1a95: v1a95(0x1) = CONST 
0x1a97: v1a97(0xa0) = CONST 
0x1a99: v1a99(0x2) = CONST 
0x1a9b: v1a9b(0x10000000000000000000000000000000000000000) = EXP v1a99(0x2) v1a97(0xa0)
0x1a9c: v1a9c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a9b(0x10000000000000000000000000000000000000000) v1a95(0x1)
0x1a9d: v1a9d(0x0) = AND v1a9c(0xffffffffffffffffffffffffffffffffffffffff) v1a93(0x0)
0x1a9f: MSTORE v1a8a v1a9d(0x0)
0x1aa0: v1aa0(0x20) = CONST 
0x1aa2: v1aa2 = ADD v1aa0(0x20) v1a8a
0x1aa3: v1aa3(0x0) = CONST 
0x1aa6: MSTORE v1aa2 v1aa3(0x0)
0x1aa7: v1aa7(0x20) = CONST 
0x1aa9: v1aa9 = ADD v1aa7(0x20) v1aa2
0x1aaa: v1aaa(0x0) = CONST 
0x1aad: MSTORE v1aa9 v1aaa(0x0)
0x1aae: v1aae(0x20) = CONST 
0x1ab0: v1ab0 = ADD v1aae(0x20) v1aa9
0x1ab1: v1ab1(0x0) = CONST 
0x1ab4: MSTORE v1ab0 v1ab1(0x0)
0x1ab7: JUMP vf18(0xf1f)
----------------------------------

Begin block 0x1cb3
prev = {'0x13c', '0x0'}, next = {'0x1470x0'}
----------------------------------
Block 0x1cb3
0x1cb4: v1cb4(0x147) = CONST 
0x1cb5: CALLPRIVATE v1cb4(0x147)
----------------------------------

Begin block 0x1cb6
prev = {'0x10f'}, next = {}
----------------------------------
Block 0x1cb6
0x1cb7: v1cb7(0x14c) = CONST 
0x1cb8: CALLPRIVATE v1cb7(0x14c)
----------------------------------

Begin block 0x1cb9
prev = {'0x11b'}, next = {}
----------------------------------
Block 0x1cb9
0x1cba: v1cba(0x187) = CONST 
0x1cbb: CALLPRIVATE v1cba(0x187)
----------------------------------

Begin block 0x1cbc
prev = {'0x126'}, next = {}
----------------------------------
Block 0x1cbc
0x1cbd: v1cbd(0x1e1) = CONST 
0x1cbe: CALLPRIVATE v1cbd(0x1e1)
----------------------------------

Begin block 0x1cbf
prev = {'0x131'}, next = {}
----------------------------------
Block 0x1cbf
0x1cc0: v1cc0(0x207) = CONST 
0x1cc1: CALLPRIVATE v1cc0(0x207)
----------------------------------

Begin block 0x1cc2
prev = {'0x13c'}, next = {}
----------------------------------
Block 0x1cc2
0x1cc3: v1cc3(0x21c) = CONST 
0x1cc4: CALLPRIVATE v1cc3(0x21c)
----------------------------------

Begin block 0x1cc5
prev = {'0xd4'}, next = {}
----------------------------------
Block 0x1cc5
0x1cc6: v1cc6(0x24d) = CONST 
0x1cc7: CALLPRIVATE v1cc6(0x24d)
----------------------------------

Begin block 0x1cc8
prev = {'0xdf'}, next = {}
----------------------------------
Block 0x1cc8
0x1cc9: v1cc9(0x292) = CONST 
0x1cca: CALLPRIVATE v1cc9(0x292)
----------------------------------

Begin block 0x1ccb
prev = {'0xea'}, next = {}
----------------------------------
Block 0x1ccb
0x1ccc: v1ccc(0x2cd) = CONST 
0x1ccd: CALLPRIVATE v1ccc(0x2cd)
----------------------------------

Begin block 0x1cce
prev = {'0xf5'}, next = {}
----------------------------------
Block 0x1cce
0x1ccf: v1ccf(0x300) = CONST 
0x1cd0: CALLPRIVATE v1ccf(0x300)
----------------------------------

Begin block 0x1cd1
prev = {'0x100'}, next = {}
----------------------------------
Block 0x1cd1
0x1cd2: v1cd2(0x333) = CONST 
0x1cd3: CALLPRIVATE v1cd2(0x333)
----------------------------------

Begin block 0x1cd4
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x1cd4
0x1cd5: v1cd5(0x3ae) = CONST 
0x1cd6: CALLPRIVATE v1cd5(0x3ae)
----------------------------------

Begin block 0x1cd7
prev = {'0x98'}, next = {}
----------------------------------
Block 0x1cd7
0x1cd8: v1cd8(0x3c3) = CONST 
0x1cd9: CALLPRIVATE v1cd8(0x3c3)
----------------------------------

Begin block 0x1cda
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x1cda
0x1cdb: v1cdb(0x3d8) = CONST 
0x1cdc: CALLPRIVATE v1cdb(0x3d8)
----------------------------------

Begin block 0x1cdd
prev = {'0xae'}, next = {}
----------------------------------
Block 0x1cdd
0x1cde: v1cde(0x401) = CONST 
0x1cdf: CALLPRIVATE v1cde(0x401)
----------------------------------

Begin block 0x1ce0
prev = {'0xb9'}, next = {}
----------------------------------
Block 0x1ce0
0x1ce1: v1ce1(0x44c) = CONST 
0x1ce2: CALLPRIVATE v1ce1(0x44c)
----------------------------------

Begin block 0x1ce3
prev = {'0x46'}, next = {}
----------------------------------
Block 0x1ce3
0x1ce4: v1ce4(0x47f) = CONST 
0x1ce5: CALLPRIVATE v1ce4(0x47f)
----------------------------------

Begin block 0x1ce6
prev = {'0x51'}, next = {}
----------------------------------
Block 0x1ce6
0x1ce7: v1ce7(0x4c2) = CONST 
0x1ce8: CALLPRIVATE v1ce7(0x4c2)
----------------------------------

Begin block 0x1ce9
prev = {'0x5c'}, next = {}
----------------------------------
Block 0x1ce9
0x1cea: v1cea(0x505) = CONST 
0x1ceb: CALLPRIVATE v1cea(0x505)
----------------------------------

Begin block 0x1cec
prev = {'0x67'}, next = {}
----------------------------------
Block 0x1cec
0x1ced: v1ced(0x531) = CONST 
0x1cee: CALLPRIVATE v1ced(0x531)
----------------------------------

Begin block 0x1cef
prev = {'0x72'}, next = {}
----------------------------------
Block 0x1cef
0x1cf0: v1cf0(0x574) = CONST 
0x1cf1: CALLPRIVATE v1cf0(0x574)
----------------------------------

Begin block 0x1cf2
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x1cf2
0x1cf3: v1cf3(0x5ff) = CONST 
0x1cf4: CALLPRIVATE v1cf3(0x5ff)
----------------------------------
