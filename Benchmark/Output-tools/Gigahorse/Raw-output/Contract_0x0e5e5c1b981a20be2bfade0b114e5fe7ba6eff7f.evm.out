
Begin block 0x0
prev = {}, next = {'0xb', '0x126'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0x126) = CONST 
0xa: JUMPI v7(0x126) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0x3f', '0x13cc'}
----------------------------------
Block 0xb
0xb: vb(0x0) = CONST 
0xd: vd = CALLDATALOAD vb(0x0)
0xe: ve(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2d: v2d = DIV vd ve(0x100000000000000000000000000000000000000000000000000000000)
0x2e: v2e(0xffffffff) = CONST 
0x33: v33 = AND v2e(0xffffffff) v2d
0x35: v35(0x1a7a8c0) = CONST 
0x3a: v3a = EQ v35(0x1a7a8c0) v33
0x13a0: v13a0(0x13cc) = CONST 
0x13a1: JUMPI v13a0(0x13cc) v3a
----------------------------------

Begin block 0x3f
prev = {'0xb'}, next = {'0x13cf', '0x4a'}
----------------------------------
Block 0x3f
0x40: v40(0x6fdde03) = CONST 
0x45: v45 = EQ v40(0x6fdde03) v33
0x13a2: v13a2(0x13cf) = CONST 
0x13a3: JUMPI v13a2(0x13cf) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x55', '0x13d2'}
----------------------------------
Block 0x4a
0x4b: v4b(0x95ea7b3) = CONST 
0x50: v50 = EQ v4b(0x95ea7b3) v33
0x13a4: v13a4(0x13d2) = CONST 
0x13a5: JUMPI v13a4(0x13d2) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x13d5', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0x18160ddd) = CONST 
0x5b: v5b = EQ v56(0x18160ddd) v33
0x13a6: v13a6(0x13d5) = CONST 
0x13a7: JUMPI v13a6(0x13d5) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x6b', '0x13d8'}
----------------------------------
Block 0x60
0x61: v61(0x229a4978) = CONST 
0x66: v66 = EQ v61(0x229a4978) v33
0x13a8: v13a8(0x13d8) = CONST 
0x13a9: JUMPI v13a8(0x13d8) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x13db', '0x76'}
----------------------------------
Block 0x6b
0x6c: v6c(0x23b872dd) = CONST 
0x71: v71 = EQ v6c(0x23b872dd) v33
0x13aa: v13aa(0x13db) = CONST 
0x13ab: JUMPI v13aa(0x13db) v71
----------------------------------

Begin block 0x76
prev = {'0x6b'}, next = {'0x81', '0x13de'}
----------------------------------
Block 0x76
0x77: v77(0x313ce567) = CONST 
0x7c: v7c = EQ v77(0x313ce567) v33
0x13ac: v13ac(0x13de) = CONST 
0x13ad: JUMPI v13ac(0x13de) v7c
----------------------------------

Begin block 0x81
prev = {'0x76'}, next = {'0x13e1', '0x8c'}
----------------------------------
Block 0x81
0x82: v82(0x4172d080) = CONST 
0x87: v87 = EQ v82(0x4172d080) v33
0x13ae: v13ae(0x13e1) = CONST 
0x13af: JUMPI v13ae(0x13e1) v87
----------------------------------

Begin block 0x8c
prev = {'0x81'}, next = {'0x97', '0x13e4'}
----------------------------------
Block 0x8c
0x8d: v8d(0x4bb278f3) = CONST 
0x92: v92 = EQ v8d(0x4bb278f3) v33
0x13b0: v13b0(0x13e4) = CONST 
0x13b1: JUMPI v13b0(0x13e4) v92
----------------------------------

Begin block 0x97
prev = {'0x8c'}, next = {'0x13e7', '0xa2'}
----------------------------------
Block 0x97
0x98: v98(0x54fd4d50) = CONST 
0x9d: v9d = EQ v98(0x54fd4d50) v33
0x13b2: v13b2(0x13e7) = CONST 
0x13b3: JUMPI v13b2(0x13e7) v9d
----------------------------------

Begin block 0xa2
prev = {'0x97'}, next = {'0xad', '0x13ea'}
----------------------------------
Block 0xa2
0xa3: va3(0x590e1ae3) = CONST 
0xa8: va8 = EQ va3(0x590e1ae3) v33
0x13b4: v13b4(0x13ea) = CONST 
0x13b5: JUMPI v13b4(0x13ea) va8
----------------------------------

Begin block 0xad
prev = {'0xa2'}, next = {'0xb8', '0x13ed'}
----------------------------------
Block 0xad
0xae: vae(0x6f7920fd) = CONST 
0xb3: vb3 = EQ vae(0x6f7920fd) v33
0x13b6: v13b6(0x13ed) = CONST 
0x13b7: JUMPI v13b6(0x13ed) vb3
----------------------------------

Begin block 0xb8
prev = {'0xad'}, next = {'0xc3', '0x13f0'}
----------------------------------
Block 0xb8
0xb9: vb9(0x70a08231) = CONST 
0xbe: vbe = EQ vb9(0x70a08231) v33
0x13b8: v13b8(0x13f0) = CONST 
0x13b9: JUMPI v13b8(0x13f0) vbe
----------------------------------

Begin block 0xc3
prev = {'0xb8'}, next = {'0x13f3', '0xce'}
----------------------------------
Block 0xc3
0xc4: vc4(0x8d4e4083) = CONST 
0xc9: vc9 = EQ vc4(0x8d4e4083) v33
0x13ba: v13ba(0x13f3) = CONST 
0x13bb: JUMPI v13ba(0x13f3) vc9
----------------------------------

Begin block 0xce
prev = {'0xc3'}, next = {'0xd9', '0x13f6'}
----------------------------------
Block 0xce
0xcf: vcf(0x91b43d13) = CONST 
0xd4: vd4 = EQ vcf(0x91b43d13) v33
0x13bc: v13bc(0x13f6) = CONST 
0x13bd: JUMPI v13bc(0x13f6) vd4
----------------------------------

Begin block 0xd9
prev = {'0xce'}, next = {'0x13f9', '0xe4'}
----------------------------------
Block 0xd9
0xda: vda(0x95d89b41) = CONST 
0xdf: vdf = EQ vda(0x95d89b41) v33
0x13be: v13be(0x13f9) = CONST 
0x13bf: JUMPI v13be(0x13f9) vdf
----------------------------------

Begin block 0xe4
prev = {'0xd9'}, next = {'0x13fc', '0xef'}
----------------------------------
Block 0xe4
0xe5: ve5(0xa81c3bdf) = CONST 
0xea: vea = EQ ve5(0xa81c3bdf) v33
0x13c0: v13c0(0x13fc) = CONST 
0x13c1: JUMPI v13c0(0x13fc) vea
----------------------------------

Begin block 0xef
prev = {'0xe4'}, next = {'0xfa', '0x13ff'}
----------------------------------
Block 0xef
0xf0: vf0(0xa9059cbb) = CONST 
0xf5: vf5 = EQ vf0(0xa9059cbb) v33
0x13c2: v13c2(0x13ff) = CONST 
0x13c3: JUMPI v13c2(0x13ff) vf5
----------------------------------

Begin block 0xfa
prev = {'0xef'}, next = {'0x105', '0x1402'}
----------------------------------
Block 0xfa
0xfb: vfb(0xb4427263) = CONST 
0x100: v100 = EQ vfb(0xb4427263) v33
0x13c4: v13c4(0x1402) = CONST 
0x13c5: JUMPI v13c4(0x1402) v100
----------------------------------

Begin block 0x105
prev = {'0xfa'}, next = {'0x110', '0x1405'}
----------------------------------
Block 0x105
0x106: v106(0xc039daf6) = CONST 
0x10b: v10b = EQ v106(0xc039daf6) v33
0x13c6: v13c6(0x1405) = CONST 
0x13c7: JUMPI v13c6(0x1405) v10b
----------------------------------

Begin block 0x110
prev = {'0x105'}, next = {'0x1408', '0x11b'}
----------------------------------
Block 0x110
0x111: v111(0xd648a647) = CONST 
0x116: v116 = EQ v111(0xd648a647) v33
0x13c8: v13c8(0x1408) = CONST 
0x13c9: JUMPI v13c8(0x1408) v116
----------------------------------

Begin block 0x11b
prev = {'0x110'}, next = {'0x140b', '0x126'}
----------------------------------
Block 0x11b
0x11c: v11c(0xdd62ed3e) = CONST 
0x121: v121 = EQ v11c(0xdd62ed3e) v33
0x13ca: v13ca(0x140b) = CONST 
0x13cb: JUMPI v13ca(0x140b) v121
----------------------------------

Begin block 0x126
prev = {'0x11b', '0x0'}, next = {}
----------------------------------
Block 0x126
0x127: v127(0x0) = CONST 
0x12a: REVERT v127(0x0) v127(0x0)
----------------------------------

Begin block 0x12b
prev = {}, next = {'0x136', '0x132'}
----------------------------------
function batFundDeposit()()
Block 0x12b
0x12c: v12c = CALLVALUE 
0x12d: v12d = ISZERO v12c
0x12e: v12e(0x136) = CONST 
0x131: JUMPI v12e(0x136) v12d
----------------------------------

Begin block 0x132
prev = {'0x12b'}, next = {}
----------------------------------
Block 0x132
0x132: v132(0x0) = CONST 
0x135: REVERT v132(0x0) v132(0x0)
----------------------------------

Begin block 0x136
prev = {'0x12b'}, next = {'0x711'}
----------------------------------
Block 0x136
0x137: v137(0x13e) = CONST 
0x13a: v13a(0x711) = CONST 
0x13d: JUMP v13a(0x711)
----------------------------------

Begin block 0x13e
prev = {'0x711'}, next = {}
----------------------------------
Block 0x13e
0x13f: v13f(0x40) = CONST 
0x141: v141 = MLOAD v13f(0x40)
0x144: v144(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x159: v159 = AND v144(0xffffffffffffffffffffffffffffffffffffffff) v734
0x15a: v15a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16f: v16f = AND v15a(0xffffffffffffffffffffffffffffffffffffffff) v159
0x171: MSTORE v141 v16f
0x172: v172(0x20) = CONST 
0x174: v174 = ADD v172(0x20) v141
0x178: v178(0x40) = CONST 
0x17a: v17a = MLOAD v178(0x40)
0x17d: v17d = SUB v174 v17a
0x17f: RETURN v17a v17d
----------------------------------

Begin block 0x180
prev = {}, next = {'0x18b', '0x187'}
----------------------------------
function name()()
Block 0x180
0x181: v181 = CALLVALUE 
0x182: v182 = ISZERO v181
0x183: v183(0x18b) = CONST 
0x186: JUMPI v183(0x18b) v182
----------------------------------

Begin block 0x187
prev = {'0x180'}, next = {}
----------------------------------
Block 0x187
0x187: v187(0x0) = CONST 
0x18a: REVERT v187(0x0) v187(0x0)
----------------------------------

Begin block 0x18b
prev = {'0x180'}, next = {'0x737'}
----------------------------------
Block 0x18b
0x18c: v18c(0x193) = CONST 
0x18f: v18f(0x737) = CONST 
0x192: JUMP v18f(0x737)
----------------------------------

Begin block 0x193
prev = {'0x737'}, next = {'0x1b8'}
----------------------------------
Block 0x193
0x194: v194(0x40) = CONST 
0x196: v196 = MLOAD v194(0x40)
0x199: v199(0x20) = CONST 
0x19b: v19b = ADD v199(0x20) v196
0x19e: v19e = SUB v19b v196
0x1a0: MSTORE v196 v19e
0x1a4: v1a4 = MLOAD v73b
0x1a6: MSTORE v19b v1a4
0x1a7: v1a7(0x20) = CONST 
0x1a9: v1a9 = ADD v1a7(0x20) v19b
0x1ad: v1ad = MLOAD v73b
0x1af: v1af(0x20) = CONST 
0x1b1: v1b1 = ADD v1af(0x20) v73b
0x1b6: v1b6(0x0) = CONST 
----------------------------------

Begin block 0x1b8
prev = {'0x193', '0x1c9'}, next = {'0x1d4', '0x1c1'}
----------------------------------
Block 0x1b8
0x1b8_0x0: v1b8_0 = PHI v1b6(0x0) v1cd
0x1bb: v1bb = LT v1b8_0 v1ad
0x1bc: v1bc = ISZERO v1bb
0x1bd: v1bd(0x1d4) = CONST 
0x1c0: JUMPI v1bd(0x1d4) v1bc
----------------------------------

Begin block 0x1c1
prev = {'0x1b8'}, next = {'0x1c9'}
----------------------------------
Block 0x1c1
0x1c1_0x0: v1c1_0 = PHI v1b6(0x0) v1cd
0x1c3: v1c3 = ADD v1b1 v1c1_0
0x1c4: v1c4 = MLOAD v1c3
0x1c7: v1c7 = ADD v1a9 v1c1_0
0x1c8: MSTORE v1c7 v1c4
----------------------------------

Begin block 0x1c9
prev = {'0x1c1'}, next = {'0x1b8'}
----------------------------------
Block 0x1c9
0x1c9_0x0: v1c9_0 = PHI v1b6(0x0) v1cd
0x1ca: v1ca(0x20) = CONST 
0x1cd: v1cd = ADD v1c9_0 v1ca(0x20)
0x1d0: v1d0(0x1b8) = CONST 
0x1d3: JUMP v1d0(0x1b8)
----------------------------------

Begin block 0x1d4
prev = {'0x1b8'}, next = {'0x1e8', '0x201'}
----------------------------------
Block 0x1d4
0x1dd: v1dd = ADD v1ad v1a9
0x1df: v1df(0x1f) = CONST 
0x1e1: v1e1 = AND v1df(0x1f) v1ad
0x1e3: v1e3 = ISZERO v1e1
0x1e4: v1e4(0x201) = CONST 
0x1e7: JUMPI v1e4(0x201) v1e3
----------------------------------

Begin block 0x1e8
prev = {'0x1d4'}, next = {'0x201'}
----------------------------------
Block 0x1e8
0x1ea: v1ea = SUB v1dd v1e1
0x1ec: v1ec = MLOAD v1ea
0x1ed: v1ed(0x1) = CONST 
0x1f0: v1f0(0x20) = CONST 
0x1f2: v1f2 = SUB v1f0(0x20) v1e1
0x1f3: v1f3(0x100) = CONST 
0x1f6: v1f6 = EXP v1f3(0x100) v1f2
0x1f7: v1f7 = SUB v1f6 v1ed(0x1)
0x1f8: v1f8 = NOT v1f7
0x1f9: v1f9 = AND v1f8 v1ec
0x1fb: MSTORE v1ea v1f9
0x1fc: v1fc(0x20) = CONST 
0x1fe: v1fe = ADD v1fc(0x20) v1ea
----------------------------------

Begin block 0x201
prev = {'0x1d4', '0x1e8'}, next = {}
----------------------------------
Block 0x201
0x201_0x1: v201_1 = PHI v1dd v1fe
0x207: v207(0x40) = CONST 
0x209: v209 = MLOAD v207(0x40)
0x20c: v20c = SUB v201_1 v209
0x20e: RETURN v209 v20c
----------------------------------

Begin block 0x20f
prev = {}, next = {'0x21a', '0x216'}
----------------------------------
function approve(address,uint256)()
Block 0x20f
0x210: v210 = CALLVALUE 
0x211: v211 = ISZERO v210
0x212: v212(0x21a) = CONST 
0x215: JUMPI v212(0x21a) v211
----------------------------------

Begin block 0x216
prev = {'0x20f'}, next = {}
----------------------------------
Block 0x216
0x216: v216(0x0) = CONST 
0x219: REVERT v216(0x0) v216(0x0)
----------------------------------

Begin block 0x21a
prev = {'0x20f'}, next = {'0x770'}
----------------------------------
Block 0x21a
0x21b: v21b(0x24f) = CONST 
0x21e: v21e(0x4) = CONST 
0x222: v222 = CALLDATALOAD v21e(0x4)
0x223: v223(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x238: v238 = AND v223(0xffffffffffffffffffffffffffffffffffffffff) v222
0x23a: v23a(0x20) = CONST 
0x23c: v23c(0x24) = ADD v23a(0x20) v21e(0x4)
0x241: v241 = CALLDATALOAD v23c(0x24)
0x243: v243(0x20) = CONST 
0x245: v245(0x44) = ADD v243(0x20) v23c(0x24)
0x24b: v24b(0x770) = CONST 
0x24e: JUMP v24b(0x770)
----------------------------------

Begin block 0x24f
prev = {'0x85d'}, next = {}
----------------------------------
Block 0x24f
0x250: v250(0x40) = CONST 
0x252: v252 = MLOAD v250(0x40)
0x255: v255 = ISZERO v859(0x1)
0x256: v256 = ISZERO v255
0x257: v257 = ISZERO v256
0x258: v258 = ISZERO v257
0x25a: MSTORE v252 v258
0x25b: v25b(0x20) = CONST 
0x25d: v25d = ADD v25b(0x20) v252
0x261: v261(0x40) = CONST 
0x263: v263 = MLOAD v261(0x40)
0x266: v266 = SUB v25d v263
0x268: RETURN v263 v266
----------------------------------

Begin block 0x269
prev = {}, next = {'0x270', '0x274'}
----------------------------------
function totalSupply()()
Block 0x269
0x26a: v26a = CALLVALUE 
0x26b: v26b = ISZERO v26a
0x26c: v26c(0x274) = CONST 
0x26f: JUMPI v26c(0x274) v26b
----------------------------------

Begin block 0x270
prev = {'0x269'}, next = {}
----------------------------------
Block 0x270
0x270: v270(0x0) = CONST 
0x273: REVERT v270(0x0) v270(0x0)
----------------------------------

Begin block 0x274
prev = {'0x269'}, next = {'0x863'}
----------------------------------
Block 0x274
0x275: v275(0x27c) = CONST 
0x278: v278(0x863) = CONST 
0x27b: JUMP v278(0x863)
----------------------------------

Begin block 0x27c
prev = {'0x863'}, next = {}
----------------------------------
Block 0x27c
0x27d: v27d(0x40) = CONST 
0x27f: v27f = MLOAD v27d(0x40)
0x283: MSTORE v27f v866
0x284: v284(0x20) = CONST 
0x286: v286 = ADD v284(0x20) v27f
0x28a: v28a(0x40) = CONST 
0x28c: v28c = MLOAD v28a(0x40)
0x28f: v28f = SUB v286 v28c
0x291: RETURN v28c v28f
----------------------------------

Begin block 0x292
prev = {}, next = {'0x299', '0x29d'}
----------------------------------
function batFund()()
Block 0x292
0x293: v293 = CALLVALUE 
0x294: v294 = ISZERO v293
0x295: v295(0x29d) = CONST 
0x298: JUMPI v295(0x29d) v294
----------------------------------

Begin block 0x299
prev = {'0x292'}, next = {}
----------------------------------
Block 0x299
0x299: v299(0x0) = CONST 
0x29c: REVERT v299(0x0) v299(0x0)
----------------------------------

Begin block 0x29d
prev = {'0x292'}, next = {'0x869'}
----------------------------------
Block 0x29d
0x29e: v29e(0x2a5) = CONST 
0x2a1: v2a1(0x869) = CONST 
0x2a4: JUMP v2a1(0x869)
----------------------------------

Begin block 0x2a5
prev = {'0x898'}, next = {}
----------------------------------
Block 0x2a5
0x2a6: v2a6(0x40) = CONST 
0x2a8: v2a8 = MLOAD v2a6(0x40)
0x2ac: MSTORE v2a8 v899
0x2ad: v2ad(0x20) = CONST 
0x2af: v2af = ADD v2ad(0x20) v2a8
0x2b3: v2b3(0x40) = CONST 
0x2b5: v2b5 = MLOAD v2b3(0x40)
0x2b8: v2b8 = SUB v2af v2b5
0x2ba: RETURN v2b5 v2b8
----------------------------------

Begin block 0x2bb
prev = {}, next = {'0x2c6', '0x2c2'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x2bb
0x2bc: v2bc = CALLVALUE 
0x2bd: v2bd = ISZERO v2bc
0x2be: v2be(0x2c6) = CONST 
0x2c1: JUMPI v2be(0x2c6) v2bd
----------------------------------

Begin block 0x2c2
prev = {'0x2bb'}, next = {}
----------------------------------
Block 0x2c2
0x2c2: v2c2(0x0) = CONST 
0x2c5: REVERT v2c2(0x0) v2c2(0x0)
----------------------------------

Begin block 0x2c6
prev = {'0x2bb'}, next = {'0x89c'}
----------------------------------
Block 0x2c6
0x2c7: v2c7(0x31a) = CONST 
0x2ca: v2ca(0x4) = CONST 
0x2ce: v2ce = CALLDATALOAD v2ca(0x4)
0x2cf: v2cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2e4: v2e4 = AND v2cf(0xffffffffffffffffffffffffffffffffffffffff) v2ce
0x2e6: v2e6(0x20) = CONST 
0x2e8: v2e8(0x24) = ADD v2e6(0x20) v2ca(0x4)
0x2ed: v2ed = CALLDATALOAD v2e8(0x24)
0x2ee: v2ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x303: v303 = AND v2ee(0xffffffffffffffffffffffffffffffffffffffff) v2ed
0x305: v305(0x20) = CONST 
0x307: v307(0x44) = ADD v305(0x20) v2e8(0x24)
0x30c: v30c = CALLDATALOAD v307(0x44)
0x30e: v30e(0x20) = CONST 
0x310: v310(0x64) = ADD v30e(0x20) v307(0x44)
0x316: v316(0x89c) = CONST 
0x319: JUMP v316(0x89c)
----------------------------------

Begin block 0x31a
prev = {'0xb16'}, next = {}
----------------------------------
Block 0x31a
0x31a_0x0: v31a_0 = PHI vb04(0x1) vb0d(0x0)
0x31b: v31b(0x40) = CONST 
0x31d: v31d = MLOAD v31b(0x40)
0x320: v320 = ISZERO v31a_0
0x321: v321 = ISZERO v320
0x322: v322 = ISZERO v321
0x323: v323 = ISZERO v322
0x325: MSTORE v31d v323
0x326: v326(0x20) = CONST 
0x328: v328 = ADD v326(0x20) v31d
0x32c: v32c(0x40) = CONST 
0x32e: v32e = MLOAD v32c(0x40)
0x331: v331 = SUB v328 v32e
0x333: RETURN v32e v331
----------------------------------

Begin block 0x334
prev = {}, next = {'0x33f', '0x33b'}
----------------------------------
function decimals()()
Block 0x334
0x335: v335 = CALLVALUE 
0x336: v336 = ISZERO v335
0x337: v337(0x33f) = CONST 
0x33a: JUMPI v337(0x33f) v336
----------------------------------

Begin block 0x33b
prev = {'0x334'}, next = {}
----------------------------------
Block 0x33b
0x33b: v33b(0x0) = CONST 
0x33e: REVERT v33b(0x0) v33b(0x0)
----------------------------------

Begin block 0x33f
prev = {'0x334'}, next = {'0xb1d'}
----------------------------------
Block 0x33f
0x340: v340(0x347) = CONST 
0x343: v343(0xb1d) = CONST 
0x346: JUMP v343(0xb1d)
----------------------------------

Begin block 0x347
prev = {'0xb1d'}, next = {}
----------------------------------
Block 0x347
0x348: v348(0x40) = CONST 
0x34a: v34a = MLOAD v348(0x40)
0x34e: MSTORE v34a vb1e(0x12)
0x34f: v34f(0x20) = CONST 
0x351: v351 = ADD v34f(0x20) v34a
0x355: v355(0x40) = CONST 
0x357: v357 = MLOAD v355(0x40)
0x35a: v35a = SUB v351 v357
0x35c: RETURN v357 v35a
----------------------------------

Begin block 0x35d
prev = {}, next = {'0x368', '0x364'}
----------------------------------
function tokenExchangeRate()()
Block 0x35d
0x35e: v35e = CALLVALUE 
0x35f: v35f = ISZERO v35e
0x360: v360(0x368) = CONST 
0x363: JUMPI v360(0x368) v35f
----------------------------------

Begin block 0x364
prev = {'0x35d'}, next = {}
----------------------------------
Block 0x364
0x364: v364(0x0) = CONST 
0x367: REVERT v364(0x0) v364(0x0)
----------------------------------

Begin block 0x368
prev = {'0x35d'}, next = {'0xb22'}
----------------------------------
Block 0x368
0x369: v369(0x370) = CONST 
0x36c: v36c(0xb22) = CONST 
0x36f: JUMP v36c(0xb22)
----------------------------------

Begin block 0x370
prev = {'0xb22'}, next = {}
----------------------------------
Block 0x370
0x371: v371(0x40) = CONST 
0x373: v373 = MLOAD v371(0x40)
0x377: MSTORE v373 vb23(0x1900)
0x378: v378(0x20) = CONST 
0x37a: v37a = ADD v378(0x20) v373
0x37e: v37e(0x40) = CONST 
0x380: v380 = MLOAD v37e(0x40)
0x383: v383 = SUB v37a v380
0x385: RETURN v380 v383
----------------------------------

Begin block 0x386
prev = {}, next = {'0x391', '0x38d'}
----------------------------------
function finalize()()
Block 0x386
0x387: v387 = CALLVALUE 
0x388: v388 = ISZERO v387
0x389: v389(0x391) = CONST 
0x38c: JUMPI v389(0x391) v388
----------------------------------

Begin block 0x38d
prev = {'0x386'}, next = {}
----------------------------------
Block 0x38d
0x38d: v38d(0x0) = CONST 
0x390: REVERT v38d(0x0) v38d(0x0)
----------------------------------

Begin block 0x391
prev = {'0x386'}, next = {'0xb28'}
----------------------------------
Block 0x391
0x392: v392(0x399) = CONST 
0x395: v395(0xb28) = CONST 
0x398: JUMP v395(0xb28)
----------------------------------

Begin block 0x399
prev = {'0xc74'}, next = {}
----------------------------------
Block 0x399
0x39a: STOP 
----------------------------------

Begin block 0x39b
prev = {}, next = {'0x3a2', '0x3a6'}
----------------------------------
function version()()
Block 0x39b
0x39c: v39c = CALLVALUE 
0x39d: v39d = ISZERO v39c
0x39e: v39e(0x3a6) = CONST 
0x3a1: JUMPI v39e(0x3a6) v39d
----------------------------------

Begin block 0x3a2
prev = {'0x39b'}, next = {}
----------------------------------
Block 0x3a2
0x3a2: v3a2(0x0) = CONST 
0x3a5: REVERT v3a2(0x0) v3a2(0x0)
----------------------------------

Begin block 0x3a6
prev = {'0x39b'}, next = {'0xc76'}
----------------------------------
Block 0x3a6
0x3a7: v3a7(0x3ae) = CONST 
0x3aa: v3aa(0xc76) = CONST 
0x3ad: JUMP v3aa(0xc76)
----------------------------------

Begin block 0x3ae
prev = {'0xd0c'}, next = {'0x3d3'}
----------------------------------
Block 0x3ae
0x3af: v3af(0x40) = CONST 
0x3b1: v3b1 = MLOAD v3af(0x40)
0x3b4: v3b4(0x20) = CONST 
0x3b6: v3b6 = ADD v3b4(0x20) v3b1
0x3b9: v3b9 = SUB v3b6 v3b1
0x3bb: MSTORE v3b1 v3b9
0x3bf: v3bf = MLOAD vc9b
0x3c1: MSTORE v3b6 v3bf
0x3c2: v3c2(0x20) = CONST 
0x3c4: v3c4 = ADD v3c2(0x20) v3b6
0x3c8: v3c8 = MLOAD vc9b
0x3ca: v3ca(0x20) = CONST 
0x3cc: v3cc = ADD v3ca(0x20) vc9b
0x3d1: v3d1(0x0) = CONST 
----------------------------------

Begin block 0x3d3
prev = {'0x3ae', '0x3e4'}, next = {'0x3ef', '0x3dc'}
----------------------------------
Block 0x3d3
0x3d3_0x0: v3d3_0 = PHI v3d1(0x0) v3e8
0x3d6: v3d6 = LT v3d3_0 v3c8
0x3d7: v3d7 = ISZERO v3d6
0x3d8: v3d8(0x3ef) = CONST 
0x3db: JUMPI v3d8(0x3ef) v3d7
----------------------------------

Begin block 0x3dc
prev = {'0x3d3'}, next = {'0x3e4'}
----------------------------------
Block 0x3dc
0x3dc_0x0: v3dc_0 = PHI v3d1(0x0) v3e8
0x3de: v3de = ADD v3cc v3dc_0
0x3df: v3df = MLOAD v3de
0x3e2: v3e2 = ADD v3c4 v3dc_0
0x3e3: MSTORE v3e2 v3df
----------------------------------

Begin block 0x3e4
prev = {'0x3dc'}, next = {'0x3d3'}
----------------------------------
Block 0x3e4
0x3e4_0x0: v3e4_0 = PHI v3d1(0x0) v3e8
0x3e5: v3e5(0x20) = CONST 
0x3e8: v3e8 = ADD v3e4_0 v3e5(0x20)
0x3eb: v3eb(0x3d3) = CONST 
0x3ee: JUMP v3eb(0x3d3)
----------------------------------

Begin block 0x3ef
prev = {'0x3d3'}, next = {'0x41c', '0x403'}
----------------------------------
Block 0x3ef
0x3f8: v3f8 = ADD v3c8 v3c4
0x3fa: v3fa(0x1f) = CONST 
0x3fc: v3fc = AND v3fa(0x1f) v3c8
0x3fe: v3fe = ISZERO v3fc
0x3ff: v3ff(0x41c) = CONST 
0x402: JUMPI v3ff(0x41c) v3fe
----------------------------------

Begin block 0x403
prev = {'0x3ef'}, next = {'0x41c'}
----------------------------------
Block 0x403
0x405: v405 = SUB v3f8 v3fc
0x407: v407 = MLOAD v405
0x408: v408(0x1) = CONST 
0x40b: v40b(0x20) = CONST 
0x40d: v40d = SUB v40b(0x20) v3fc
0x40e: v40e(0x100) = CONST 
0x411: v411 = EXP v40e(0x100) v40d
0x412: v412 = SUB v411 v408(0x1)
0x413: v413 = NOT v412
0x414: v414 = AND v413 v407
0x416: MSTORE v405 v414
0x417: v417(0x20) = CONST 
0x419: v419 = ADD v417(0x20) v405
----------------------------------

Begin block 0x41c
prev = {'0x403', '0x3ef'}, next = {}
----------------------------------
Block 0x41c
0x41c_0x1: v41c_1 = PHI v3f8 v419
0x422: v422(0x40) = CONST 
0x424: v424 = MLOAD v422(0x40)
0x427: v427 = SUB v41c_1 v424
0x429: RETURN v424 v427
----------------------------------

Begin block 0x42a
prev = {}, next = {'0x435', '0x431'}
----------------------------------
function refund()()
Block 0x42a
0x42b: v42b = CALLVALUE 
0x42c: v42c = ISZERO v42b
0x42d: v42d(0x435) = CONST 
0x430: JUMPI v42d(0x435) v42c
----------------------------------

Begin block 0x431
prev = {'0x42a'}, next = {}
----------------------------------
Block 0x431
0x431: v431(0x0) = CONST 
0x434: REVERT v431(0x0) v431(0x0)
----------------------------------

Begin block 0x435
prev = {'0x42a'}, next = {'0xd14'}
----------------------------------
Block 0x435
0x436: v436(0x43d) = CONST 
0x439: v439(0xd14) = CONST 
0x43c: JUMP v439(0xd14)
----------------------------------

Begin block 0x43d
prev = {'0xefc'}, next = {}
----------------------------------
Block 0x43d
0x43e: STOP 
----------------------------------

Begin block 0x43f
prev = {}, next = {'0x44a', '0x446'}
----------------------------------
function tokenCreationCap()()
Block 0x43f
0x440: v440 = CALLVALUE 
0x441: v441 = ISZERO v440
0x442: v442(0x44a) = CONST 
0x445: JUMPI v442(0x44a) v441
----------------------------------

Begin block 0x446
prev = {'0x43f'}, next = {}
----------------------------------
Block 0x446
0x446: v446(0x0) = CONST 
0x449: REVERT v446(0x0) v446(0x0)
----------------------------------

Begin block 0x44a
prev = {'0x43f'}, next = {'0xf00'}
----------------------------------
Block 0x44a
0x44b: v44b(0x452) = CONST 
0x44e: v44e(0xf00) = CONST 
0x451: JUMP v44e(0xf00)
----------------------------------

Begin block 0x452
prev = {'0xf00'}, next = {}
----------------------------------
Block 0x452
0x453: v453(0x40) = CONST 
0x455: v455 = MLOAD v453(0x40)
0x459: MSTORE v455 vf0b(0x4d8c55aefb8c05b5c000000)
0x45a: v45a(0x20) = CONST 
0x45c: v45c = ADD v45a(0x20) v455
0x460: v460(0x40) = CONST 
0x462: v462 = MLOAD v460(0x40)
0x465: v465 = SUB v45c v462
0x467: RETURN v462 v465
----------------------------------

Begin block 0x468
prev = {}, next = {'0x46f', '0x473'}
----------------------------------
function balanceOf(address)()
Block 0x468
0x469: v469 = CALLVALUE 
0x46a: v46a = ISZERO v469
0x46b: v46b(0x473) = CONST 
0x46e: JUMPI v46b(0x473) v46a
----------------------------------

Begin block 0x46f
prev = {'0x468'}, next = {}
----------------------------------
Block 0x46f
0x46f: v46f(0x0) = CONST 
0x472: REVERT v46f(0x0) v46f(0x0)
----------------------------------

Begin block 0x473
prev = {'0x468'}, next = {'0xf0e'}
----------------------------------
Block 0x473
0x474: v474(0x49f) = CONST 
0x477: v477(0x4) = CONST 
0x47b: v47b = CALLDATALOAD v477(0x4)
0x47c: v47c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x491: v491 = AND v47c(0xffffffffffffffffffffffffffffffffffffffff) v47b
0x493: v493(0x20) = CONST 
0x495: v495(0x24) = ADD v493(0x20) v477(0x4)
0x49b: v49b(0xf0e) = CONST 
0x49e: JUMP v49b(0xf0e)
----------------------------------

Begin block 0x49f
prev = {'0xf53'}, next = {}
----------------------------------
Block 0x49f
0x4a0: v4a0(0x40) = CONST 
0x4a2: v4a2 = MLOAD v4a0(0x40)
0x4a6: MSTORE v4a2 vf50
0x4a7: v4a7(0x20) = CONST 
0x4a9: v4a9 = ADD v4a7(0x20) v4a2
0x4ad: v4ad(0x40) = CONST 
0x4af: v4af = MLOAD v4ad(0x40)
0x4b2: v4b2 = SUB v4a9 v4af
0x4b4: RETURN v4af v4b2
----------------------------------

Begin block 0x4b5
prev = {}, next = {'0x4bc', '0x4c0'}
----------------------------------
function isFinalized()()
Block 0x4b5
0x4b6: v4b6 = CALLVALUE 
0x4b7: v4b7 = ISZERO v4b6
0x4b8: v4b8(0x4c0) = CONST 
0x4bb: JUMPI v4b8(0x4c0) v4b7
----------------------------------

Begin block 0x4bc
prev = {'0x4b5'}, next = {}
----------------------------------
Block 0x4bc
0x4bc: v4bc(0x0) = CONST 
0x4bf: REVERT v4bc(0x0) v4bc(0x0)
----------------------------------

Begin block 0x4c0
prev = {'0x4b5'}, next = {'0xf58'}
----------------------------------
Block 0x4c0
0x4c1: v4c1(0x4c8) = CONST 
0x4c4: v4c4(0xf58) = CONST 
0x4c7: JUMP v4c4(0xf58)
----------------------------------

Begin block 0x4c8
prev = {'0xf58'}, next = {}
----------------------------------
Block 0x4c8
0x4c9: v4c9(0x40) = CONST 
0x4cb: v4cb = MLOAD v4c9(0x40)
0x4ce: v4ce = ISZERO vf68
0x4cf: v4cf = ISZERO v4ce
0x4d0: v4d0 = ISZERO v4cf
0x4d1: v4d1 = ISZERO v4d0
0x4d3: MSTORE v4cb v4d1
0x4d4: v4d4(0x20) = CONST 
0x4d6: v4d6 = ADD v4d4(0x20) v4cb
0x4da: v4da(0x40) = CONST 
0x4dc: v4dc = MLOAD v4da(0x40)
0x4df: v4df = SUB v4d6 v4dc
0x4e1: RETURN v4dc v4df
----------------------------------

Begin block 0x4e2
prev = {}, next = {'0x4e9', '0x4ed'}
----------------------------------
function fundingEndBlock()()
Block 0x4e2
0x4e3: v4e3 = CALLVALUE 
0x4e4: v4e4 = ISZERO v4e3
0x4e5: v4e5(0x4ed) = CONST 
0x4e8: JUMPI v4e5(0x4ed) v4e4
----------------------------------

Begin block 0x4e9
prev = {'0x4e2'}, next = {}
----------------------------------
Block 0x4e9
0x4e9: v4e9(0x0) = CONST 
0x4ec: REVERT v4e9(0x0) v4e9(0x0)
----------------------------------

Begin block 0x4ed
prev = {'0x4e2'}, next = {'0xf6b'}
----------------------------------
Block 0x4ed
0x4ee: v4ee(0x4f5) = CONST 
0x4f1: v4f1(0xf6b) = CONST 
0x4f4: JUMP v4f1(0xf6b)
----------------------------------

Begin block 0x4f5
prev = {'0xf6b'}, next = {}
----------------------------------
Block 0x4f5
0x4f6: v4f6(0x40) = CONST 
0x4f8: v4f8 = MLOAD v4f6(0x40)
0x4fc: MSTORE v4f8 vf6e
0x4fd: v4fd(0x20) = CONST 
0x4ff: v4ff = ADD v4fd(0x20) v4f8
0x503: v503(0x40) = CONST 
0x505: v505 = MLOAD v503(0x40)
0x508: v508 = SUB v4ff v505
0x50a: RETURN v505 v508
----------------------------------

Begin block 0x50b
prev = {}, next = {'0x512', '0x516'}
----------------------------------
function symbol()()
Block 0x50b
0x50c: v50c = CALLVALUE 
0x50d: v50d = ISZERO v50c
0x50e: v50e(0x516) = CONST 
0x511: JUMPI v50e(0x516) v50d
----------------------------------

Begin block 0x512
prev = {'0x50b'}, next = {}
----------------------------------
Block 0x512
0x512: v512(0x0) = CONST 
0x515: REVERT v512(0x0) v512(0x0)
----------------------------------

Begin block 0x516
prev = {'0x50b'}, next = {'0xf71'}
----------------------------------
Block 0x516
0x517: v517(0x51e) = CONST 
0x51a: v51a(0xf71) = CONST 
0x51d: JUMP v51a(0xf71)
----------------------------------

Begin block 0x51e
prev = {'0xf71'}, next = {'0x543'}
----------------------------------
Block 0x51e
0x51f: v51f(0x40) = CONST 
0x521: v521 = MLOAD v51f(0x40)
0x524: v524(0x20) = CONST 
0x526: v526 = ADD v524(0x20) v521
0x529: v529 = SUB v526 v521
0x52b: MSTORE v521 v529
0x52f: v52f = MLOAD vf75
0x531: MSTORE v526 v52f
0x532: v532(0x20) = CONST 
0x534: v534 = ADD v532(0x20) v526
0x538: v538 = MLOAD vf75
0x53a: v53a(0x20) = CONST 
0x53c: v53c = ADD v53a(0x20) vf75
0x541: v541(0x0) = CONST 
----------------------------------

Begin block 0x543
prev = {'0x51e', '0x554'}, next = {'0x54c', '0x55f'}
----------------------------------
Block 0x543
0x543_0x0: v543_0 = PHI v541(0x0) v558
0x546: v546 = LT v543_0 v538
0x547: v547 = ISZERO v546
0x548: v548(0x55f) = CONST 
0x54b: JUMPI v548(0x55f) v547
----------------------------------

Begin block 0x54c
prev = {'0x543'}, next = {'0x554'}
----------------------------------
Block 0x54c
0x54c_0x0: v54c_0 = PHI v541(0x0) v558
0x54e: v54e = ADD v53c v54c_0
0x54f: v54f = MLOAD v54e
0x552: v552 = ADD v534 v54c_0
0x553: MSTORE v552 v54f
----------------------------------

Begin block 0x554
prev = {'0x54c'}, next = {'0x543'}
----------------------------------
Block 0x554
0x554_0x0: v554_0 = PHI v541(0x0) v558
0x555: v555(0x20) = CONST 
0x558: v558 = ADD v554_0 v555(0x20)
0x55b: v55b(0x543) = CONST 
0x55e: JUMP v55b(0x543)
----------------------------------

Begin block 0x55f
prev = {'0x543'}, next = {'0x58c', '0x573'}
----------------------------------
Block 0x55f
0x568: v568 = ADD v538 v534
0x56a: v56a(0x1f) = CONST 
0x56c: v56c = AND v56a(0x1f) v538
0x56e: v56e = ISZERO v56c
0x56f: v56f(0x58c) = CONST 
0x572: JUMPI v56f(0x58c) v56e
----------------------------------

Begin block 0x573
prev = {'0x55f'}, next = {'0x58c'}
----------------------------------
Block 0x573
0x575: v575 = SUB v568 v56c
0x577: v577 = MLOAD v575
0x578: v578(0x1) = CONST 
0x57b: v57b(0x20) = CONST 
0x57d: v57d = SUB v57b(0x20) v56c
0x57e: v57e(0x100) = CONST 
0x581: v581 = EXP v57e(0x100) v57d
0x582: v582 = SUB v581 v578(0x1)
0x583: v583 = NOT v582
0x584: v584 = AND v583 v577
0x586: MSTORE v575 v584
0x587: v587(0x20) = CONST 
0x589: v589 = ADD v587(0x20) v575
----------------------------------

Begin block 0x58c
prev = {'0x55f', '0x573'}, next = {}
----------------------------------
Block 0x58c
0x58c_0x1: v58c_1 = PHI v568 v589
0x592: v592(0x40) = CONST 
0x594: v594 = MLOAD v592(0x40)
0x597: v597 = SUB v58c_1 v594
0x599: RETURN v594 v597
----------------------------------

Begin block 0x59a
prev = {}, next = {'0x5a1', '0x5a5'}
----------------------------------
function ethFundDeposit()()
Block 0x59a
0x59b: v59b = CALLVALUE 
0x59c: v59c = ISZERO v59b
0x59d: v59d(0x5a5) = CONST 
0x5a0: JUMPI v59d(0x5a5) v59c
----------------------------------

Begin block 0x5a1
prev = {'0x59a'}, next = {}
----------------------------------
Block 0x5a1
0x5a1: v5a1(0x0) = CONST 
0x5a4: REVERT v5a1(0x0) v5a1(0x0)
----------------------------------

Begin block 0x5a5
prev = {'0x59a'}, next = {'0xfaa'}
----------------------------------
Block 0x5a5
0x5a6: v5a6(0x5ad) = CONST 
0x5a9: v5a9(0xfaa) = CONST 
0x5ac: JUMP v5a9(0xfaa)
----------------------------------

Begin block 0x5ad
prev = {'0xfaa'}, next = {}
----------------------------------
Block 0x5ad
0x5ae: v5ae(0x40) = CONST 
0x5b0: v5b0 = MLOAD v5ae(0x40)
0x5b3: v5b3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5c8: v5c8 = AND v5b3(0xffffffffffffffffffffffffffffffffffffffff) vfcd
0x5c9: v5c9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5de: v5de = AND v5c9(0xffffffffffffffffffffffffffffffffffffffff) v5c8
0x5e0: MSTORE v5b0 v5de
0x5e1: v5e1(0x20) = CONST 
0x5e3: v5e3 = ADD v5e1(0x20) v5b0
0x5e7: v5e7(0x40) = CONST 
0x5e9: v5e9 = MLOAD v5e7(0x40)
0x5ec: v5ec = SUB v5e3 v5e9
0x5ee: RETURN v5e9 v5ec
----------------------------------

Begin block 0x5ef
prev = {}, next = {'0x5f6', '0x5fa'}
----------------------------------
function transfer(address,uint256)()
Block 0x5ef
0x5f0: v5f0 = CALLVALUE 
0x5f1: v5f1 = ISZERO v5f0
0x5f2: v5f2(0x5fa) = CONST 
0x5f5: JUMPI v5f2(0x5fa) v5f1
----------------------------------

Begin block 0x5f6
prev = {'0x5ef'}, next = {}
----------------------------------
Block 0x5f6
0x5f6: v5f6(0x0) = CONST 
0x5f9: REVERT v5f6(0x0) v5f6(0x0)
----------------------------------

Begin block 0x5fa
prev = {'0x5ef'}, next = {'0xfd0'}
----------------------------------
Block 0x5fa
0x5fb: v5fb(0x62f) = CONST 
0x5fe: v5fe(0x4) = CONST 
0x602: v602 = CALLDATALOAD v5fe(0x4)
0x603: v603(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x618: v618 = AND v603(0xffffffffffffffffffffffffffffffffffffffff) v602
0x61a: v61a(0x20) = CONST 
0x61c: v61c(0x24) = ADD v61a(0x20) v5fe(0x4)
0x621: v621 = CALLDATALOAD v61c(0x24)
0x623: v623(0x20) = CONST 
0x625: v625(0x44) = ADD v623(0x20) v61c(0x24)
0x62b: v62b(0xfd0) = CONST 
0x62e: JUMP v62b(0xfd0)
----------------------------------

Begin block 0x62f
prev = {'0x1138'}, next = {}
----------------------------------
Block 0x62f
0x62f_0x0: v62f_0 = PHI v1126(0x1) v112f(0x0)
0x630: v630(0x40) = CONST 
0x632: v632 = MLOAD v630(0x40)
0x635: v635 = ISZERO v62f_0
0x636: v636 = ISZERO v635
0x637: v637 = ISZERO v636
0x638: v638 = ISZERO v637
0x63a: MSTORE v632 v638
0x63b: v63b(0x20) = CONST 
0x63d: v63d = ADD v63b(0x20) v632
0x641: v641(0x40) = CONST 
0x643: v643 = MLOAD v641(0x40)
0x646: v646 = SUB v63d v643
0x648: RETURN v643 v646
----------------------------------

Begin block 0x649
prev = {}, next = {'0x113e'}
----------------------------------
function createTokens()()
Block 0x649
0x64a: v64a(0x651) = CONST 
0x64d: v64d(0x113e) = CONST 
0x650: JUMP v64d(0x113e)
----------------------------------

Begin block 0x651
prev = {'0x125d'}, next = {}
----------------------------------
Block 0x651
0x652: STOP 
----------------------------------

Begin block 0x653
prev = {}, next = {'0x65a', '0x65e'}
----------------------------------
function tokenCreationMin()()
Block 0x653
0x654: v654 = CALLVALUE 
0x655: v655 = ISZERO v654
0x656: v656(0x65e) = CONST 
0x659: JUMPI v656(0x65e) v655
----------------------------------

Begin block 0x65a
prev = {'0x653'}, next = {}
----------------------------------
Block 0x65a
0x65a: v65a(0x0) = CONST 
0x65d: REVERT v65a(0x0) v65a(0x0)
----------------------------------

Begin block 0x65e
prev = {'0x653'}, next = {'0x1261'}
----------------------------------
Block 0x65e
0x65f: v65f(0x666) = CONST 
0x662: v662(0x1261) = CONST 
0x665: JUMP v662(0x1261)
----------------------------------

Begin block 0x666
prev = {'0x1261'}, next = {}
----------------------------------
Block 0x666
0x667: v667(0x40) = CONST 
0x669: v669 = MLOAD v667(0x40)
0x66d: MSTORE v669 v126c(0x22e58cf5246568f83000000)
0x66e: v66e(0x20) = CONST 
0x670: v670 = ADD v66e(0x20) v669
0x674: v674(0x40) = CONST 
0x676: v676 = MLOAD v674(0x40)
0x679: v679 = SUB v670 v676
0x67b: RETURN v676 v679
----------------------------------

Begin block 0x67c
prev = {}, next = {'0x683', '0x687'}
----------------------------------
function fundingStartBlock()()
Block 0x67c
0x67d: v67d = CALLVALUE 
0x67e: v67e = ISZERO v67d
0x67f: v67f(0x687) = CONST 
0x682: JUMPI v67f(0x687) v67e
----------------------------------

Begin block 0x683
prev = {'0x67c'}, next = {}
----------------------------------
Block 0x683
0x683: v683(0x0) = CONST 
0x686: REVERT v683(0x0) v683(0x0)
----------------------------------

Begin block 0x687
prev = {'0x67c'}, next = {'0x126f'}
----------------------------------
Block 0x687
0x688: v688(0x68f) = CONST 
0x68b: v68b(0x126f) = CONST 
0x68e: JUMP v68b(0x126f)
----------------------------------

Begin block 0x68f
prev = {'0x126f'}, next = {}
----------------------------------
Block 0x68f
0x690: v690(0x40) = CONST 
0x692: v692 = MLOAD v690(0x40)
0x696: MSTORE v692 v1272
0x697: v697(0x20) = CONST 
0x699: v699 = ADD v697(0x20) v692
0x69d: v69d(0x40) = CONST 
0x69f: v69f = MLOAD v69d(0x40)
0x6a2: v6a2 = SUB v699 v69f
0x6a4: RETURN v69f v6a2
----------------------------------

Begin block 0x6a5
prev = {}, next = {'0x6ac', '0x6b0'}
----------------------------------
function allowance(address,address)()
Block 0x6a5
0x6a6: v6a6 = CALLVALUE 
0x6a7: v6a7 = ISZERO v6a6
0x6a8: v6a8(0x6b0) = CONST 
0x6ab: JUMPI v6a8(0x6b0) v6a7
----------------------------------

Begin block 0x6ac
prev = {'0x6a5'}, next = {}
----------------------------------
Block 0x6ac
0x6ac: v6ac(0x0) = CONST 
0x6af: REVERT v6ac(0x0) v6ac(0x0)
----------------------------------

Begin block 0x6b0
prev = {'0x6a5'}, next = {'0x1275'}
----------------------------------
Block 0x6b0
0x6b1: v6b1(0x6fb) = CONST 
0x6b4: v6b4(0x4) = CONST 
0x6b8: v6b8 = CALLDATALOAD v6b4(0x4)
0x6b9: v6b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ce: v6ce = AND v6b9(0xffffffffffffffffffffffffffffffffffffffff) v6b8
0x6d0: v6d0(0x20) = CONST 
0x6d2: v6d2(0x24) = ADD v6d0(0x20) v6b4(0x4)
0x6d7: v6d7 = CALLDATALOAD v6d2(0x24)
0x6d8: v6d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6ed: v6ed = AND v6d8(0xffffffffffffffffffffffffffffffffffffffff) v6d7
0x6ef: v6ef(0x20) = CONST 
0x6f1: v6f1(0x44) = ADD v6ef(0x20) v6d2(0x24)
0x6f7: v6f7(0x1275) = CONST 
0x6fa: JUMP v6f7(0x1275)
----------------------------------

Begin block 0x6fb
prev = {'0x12f7'}, next = {}
----------------------------------
Block 0x6fb
0x6fc: v6fc(0x40) = CONST 
0x6fe: v6fe = MLOAD v6fc(0x40)
0x702: MSTORE v6fe v12f4
0x703: v703(0x20) = CONST 
0x705: v705 = ADD v703(0x20) v6fe
0x709: v709(0x40) = CONST 
0x70b: v70b = MLOAD v709(0x40)
0x70e: v70e = SUB v705 v70b
0x710: RETURN v70b v70e
----------------------------------

Begin block 0x711
prev = {'0x136'}, next = {'0x13e'}
----------------------------------
Block 0x711
0x712: v712(0x5) = CONST 
0x714: v714(0x0) = CONST 
0x717: v717 = SLOAD v712(0x5)
0x719: v719(0x100) = CONST 
0x71c: v71c(0x1) = EXP v719(0x100) v714(0x0)
0x71e: v71e = DIV v717 v71c(0x1)
0x71f: v71f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x734: v734 = AND v71f(0xffffffffffffffffffffffffffffffffffffffff) v71e
0x736: JUMP v137(0x13e)
----------------------------------

Begin block 0x737
prev = {'0x18b'}, next = {'0x193'}
----------------------------------
Block 0x737
0x738: v738(0x40) = CONST 
0x73b: v73b = MLOAD v738(0x40)
0x73e: v73e = ADD v73b v738(0x40)
0x73f: v73f(0x40) = CONST 
0x741: MSTORE v73f(0x40) v73e
0x743: v743(0x12) = CONST 
0x746: MSTORE v73b v743(0x12)
0x747: v747(0x20) = CONST 
0x749: v749 = ADD v747(0x20) v73b
0x74a: v74a(0x476f6f676c6965722054656c6c757269756d0000000000000000000000000000) = CONST 
0x76c: MSTORE v749 v74a(0x476f6f676c6965722054656c6c757269756d0000000000000000000000000000)
0x76f: JUMP v18c(0x193)
----------------------------------

Begin block 0x770
prev = {'0x21a'}, next = {'0x85d'}
----------------------------------
Block 0x770
0x771: v771(0x0) = CONST 
0x774: v774(0x2) = CONST 
0x776: v776(0x0) = CONST 
0x778: v778 = CALLER 
0x779: v779(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78e: v78e = AND v779(0xffffffffffffffffffffffffffffffffffffffff) v778
0x78f: v78f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a4: v7a4 = AND v78f(0xffffffffffffffffffffffffffffffffffffffff) v78e
0x7a6: MSTORE v776(0x0) v7a4
0x7a7: v7a7(0x20) = CONST 
0x7a9: v7a9(0x20) = ADD v7a7(0x20) v776(0x0)
0x7ac: MSTORE v7a9(0x20) v774(0x2)
0x7ad: v7ad(0x20) = CONST 
0x7af: v7af(0x40) = ADD v7ad(0x20) v7a9(0x20)
0x7b0: v7b0(0x0) = CONST 
0x7b2: v7b2 = SHA3 v7b0(0x0) v7af(0x40)
0x7b3: v7b3(0x0) = CONST 
0x7b6: v7b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7cb: v7cb = AND v7b6(0xffffffffffffffffffffffffffffffffffffffff) v238
0x7cc: v7cc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e1: v7e1 = AND v7cc(0xffffffffffffffffffffffffffffffffffffffff) v7cb
0x7e3: MSTORE v7b3(0x0) v7e1
0x7e4: v7e4(0x20) = CONST 
0x7e6: v7e6(0x20) = ADD v7e4(0x20) v7b3(0x0)
0x7e9: MSTORE v7e6(0x20) v7b2
0x7ea: v7ea(0x20) = CONST 
0x7ec: v7ec(0x40) = ADD v7ea(0x20) v7e6(0x20)
0x7ed: v7ed(0x0) = CONST 
0x7ef: v7ef = SHA3 v7ed(0x0) v7ec(0x40)
0x7f2: SSTORE v7ef v241
0x7f5: v7f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80a: v80a = AND v7f5(0xffffffffffffffffffffffffffffffffffffffff) v238
0x80b: v80b = CALLER 
0x80c: v80c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x821: v821 = AND v80c(0xffffffffffffffffffffffffffffffffffffffff) v80b
0x822: v822(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x844: v844(0x40) = CONST 
0x846: v846 = MLOAD v844(0x40)
0x84a: MSTORE v846 v241
0x84b: v84b(0x20) = CONST 
0x84d: v84d = ADD v84b(0x20) v846
0x851: v851(0x40) = CONST 
0x853: v853 = MLOAD v851(0x40)
0x856: v856 = SUB v84d v853
0x858: LOG3 v853 v856 v822(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v821 v80a
0x859: v859(0x1) = CONST 
----------------------------------

Begin block 0x85d
prev = {'0x770'}, next = {'0x24f'}
----------------------------------
Block 0x85d
0x862: JUMP v21b(0x24f)
----------------------------------

Begin block 0x863
prev = {'0x274'}, next = {'0x27c'}
----------------------------------
Block 0x863
0x864: v864(0x0) = CONST 
0x866: v866 = SLOAD v864(0x0)
0x868: JUMP v275(0x27c)
----------------------------------

Begin block 0x869
prev = {'0x29d'}, next = {'0x898'}
----------------------------------
Block 0x869
0x86a: v86a(0x12) = CONST 
0x86c: v86c(0xa) = CONST 
0x86e: v86e(0xde0b6b3a7640000) = EXP v86c(0xa) v86a(0x12)
0x86f: v86f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
0x891: v891(0x0) = ISZERO v86e(0xde0b6b3a7640000)
0x892: v892(0x1) = ISZERO v891(0x0)
0x893: v893(0x898) = CONST 
0x896: JUMPI v893(0x898) v892(0x1)
----------------------------------

Begin block 0x898
prev = {'0x869'}, next = {'0x2a5'}
----------------------------------
Block 0x898
0x899: v899 = DIV v86f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v86e(0xde0b6b3a7640000)
0x89b: JUMP v29e(0x2a5)
----------------------------------

Begin block 0x89c
prev = {'0x2c6'}, next = {'0x8e8', '0x969'}
----------------------------------
Block 0x89c
0x89d: v89d(0x0) = CONST 
0x8a0: v8a0(0x1) = CONST 
0x8a2: v8a2(0x0) = CONST 
0x8a5: v8a5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8ba: v8ba = AND v8a5(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x8bb: v8bb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8d0: v8d0 = AND v8bb(0xffffffffffffffffffffffffffffffffffffffff) v8ba
0x8d2: MSTORE v8a2(0x0) v8d0
0x8d3: v8d3(0x20) = CONST 
0x8d5: v8d5(0x20) = ADD v8d3(0x20) v8a2(0x0)
0x8d8: MSTORE v8d5(0x20) v8a0(0x1)
0x8d9: v8d9(0x20) = CONST 
0x8db: v8db(0x40) = ADD v8d9(0x20) v8d5(0x20)
0x8dc: v8dc(0x0) = CONST 
0x8de: v8de = SHA3 v8dc(0x0) v8db(0x40)
0x8df: v8df = SLOAD v8de
0x8e0: v8e0 = LT v8df v30c
0x8e1: v8e1 = ISZERO v8e0
0x8e3: v8e3 = ISZERO v8e1
0x8e4: v8e4(0x969) = CONST 
0x8e7: JUMPI v8e4(0x969) v8e3
----------------------------------

Begin block 0x8e8
prev = {'0x89c'}, next = {'0x969'}
----------------------------------
Block 0x8e8
0x8ea: v8ea(0x2) = CONST 
0x8ec: v8ec(0x0) = CONST 
0x8ef: v8ef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x904: v904 = AND v8ef(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x905: v905(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x91a: v91a = AND v905(0xffffffffffffffffffffffffffffffffffffffff) v904
0x91c: MSTORE v8ec(0x0) v91a
0x91d: v91d(0x20) = CONST 
0x91f: v91f(0x20) = ADD v91d(0x20) v8ec(0x0)
0x922: MSTORE v91f(0x20) v8ea(0x2)
0x923: v923(0x20) = CONST 
0x925: v925(0x40) = ADD v923(0x20) v91f(0x20)
0x926: v926(0x0) = CONST 
0x928: v928 = SHA3 v926(0x0) v925(0x40)
0x929: v929(0x0) = CONST 
0x92b: v92b = CALLER 
0x92c: v92c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x941: v941 = AND v92c(0xffffffffffffffffffffffffffffffffffffffff) v92b
0x942: v942(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x957: v957 = AND v942(0xffffffffffffffffffffffffffffffffffffffff) v941
0x959: MSTORE v929(0x0) v957
0x95a: v95a(0x20) = CONST 
0x95c: v95c(0x20) = ADD v95a(0x20) v929(0x0)
0x95f: MSTORE v95c(0x20) v928
0x960: v960(0x20) = CONST 
0x962: v962(0x40) = ADD v960(0x20) v95c(0x20)
0x963: v963(0x0) = CONST 
0x965: v965 = SHA3 v963(0x0) v962(0x40)
0x966: v966 = SLOAD v965
0x967: v967 = LT v966 v30c
0x968: v968 = ISZERO v967
----------------------------------

Begin block 0x969
prev = {'0x8e8', '0x89c'}, next = {'0x970', '0x975'}
----------------------------------
Block 0x969
0x969_0x0: v969_0 = PHI v8e1 v968
0x96b: v96b = ISZERO v969_0
0x96c: v96c(0x975) = CONST 
0x96f: JUMPI v96c(0x975) v96b
----------------------------------

Begin block 0x970
prev = {'0x969'}, next = {'0x975'}
----------------------------------
Block 0x970
0x971: v971(0x0) = CONST 
0x974: v974 = GT v30c v971(0x0)
----------------------------------

Begin block 0x975
prev = {'0x970', '0x969'}, next = {'0xb0c', '0x97b'}
----------------------------------
Block 0x975
0x975_0x0: v975_0 = PHI v8e1 v968 v974
0x976: v976 = ISZERO v975_0
0x977: v977(0xb0c) = CONST 
0x97a: JUMPI v977(0xb0c) v976
----------------------------------

Begin block 0x97b
prev = {'0x975'}, next = {'0xb16'}
----------------------------------
Block 0x97b
0x97c: v97c(0x1) = CONST 
0x97e: v97e(0x0) = CONST 
0x981: v981(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x996: v996 = AND v981(0xffffffffffffffffffffffffffffffffffffffff) v303
0x997: v997(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ac: v9ac = AND v997(0xffffffffffffffffffffffffffffffffffffffff) v996
0x9ae: MSTORE v97e(0x0) v9ac
0x9af: v9af(0x20) = CONST 
0x9b1: v9b1(0x20) = ADD v9af(0x20) v97e(0x0)
0x9b4: MSTORE v9b1(0x20) v97c(0x1)
0x9b5: v9b5(0x20) = CONST 
0x9b7: v9b7(0x40) = ADD v9b5(0x20) v9b1(0x20)
0x9b8: v9b8(0x0) = CONST 
0x9ba: v9ba = SHA3 v9b8(0x0) v9b7(0x40)
0x9bb: v9bb(0x0) = CONST 
0x9bf: v9bf = SLOAD v9ba
0x9c0: v9c0 = ADD v9bf v30c
0x9c6: SSTORE v9ba v9c0
0x9c9: v9c9(0x1) = CONST 
0x9cb: v9cb(0x0) = CONST 
0x9ce: v9ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e3: v9e3 = AND v9ce(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0x9e4: v9e4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9f9: v9f9 = AND v9e4(0xffffffffffffffffffffffffffffffffffffffff) v9e3
0x9fb: MSTORE v9cb(0x0) v9f9
0x9fc: v9fc(0x20) = CONST 
0x9fe: v9fe(0x20) = ADD v9fc(0x20) v9cb(0x0)
0xa01: MSTORE v9fe(0x20) v9c9(0x1)
0xa02: va02(0x20) = CONST 
0xa04: va04(0x40) = ADD va02(0x20) v9fe(0x20)
0xa05: va05(0x0) = CONST 
0xa07: va07 = SHA3 va05(0x0) va04(0x40)
0xa08: va08(0x0) = CONST 
0xa0c: va0c = SLOAD va07
0xa0d: va0d = SUB va0c v30c
0xa13: SSTORE va07 va0d
0xa16: va16(0x2) = CONST 
0xa18: va18(0x0) = CONST 
0xa1b: va1b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa30: va30 = AND va1b(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0xa31: va31(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa46: va46 = AND va31(0xffffffffffffffffffffffffffffffffffffffff) va30
0xa48: MSTORE va18(0x0) va46
0xa49: va49(0x20) = CONST 
0xa4b: va4b(0x20) = ADD va49(0x20) va18(0x0)
0xa4e: MSTORE va4b(0x20) va16(0x2)
0xa4f: va4f(0x20) = CONST 
0xa51: va51(0x40) = ADD va4f(0x20) va4b(0x20)
0xa52: va52(0x0) = CONST 
0xa54: va54 = SHA3 va52(0x0) va51(0x40)
0xa55: va55(0x0) = CONST 
0xa57: va57 = CALLER 
0xa58: va58(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa6d: va6d = AND va58(0xffffffffffffffffffffffffffffffffffffffff) va57
0xa6e: va6e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa83: va83 = AND va6e(0xffffffffffffffffffffffffffffffffffffffff) va6d
0xa85: MSTORE va55(0x0) va83
0xa86: va86(0x20) = CONST 
0xa88: va88(0x20) = ADD va86(0x20) va55(0x0)
0xa8b: MSTORE va88(0x20) va54
0xa8c: va8c(0x20) = CONST 
0xa8e: va8e(0x40) = ADD va8c(0x20) va88(0x20)
0xa8f: va8f(0x0) = CONST 
0xa91: va91 = SHA3 va8f(0x0) va8e(0x40)
0xa92: va92(0x0) = CONST 
0xa96: va96 = SLOAD va91
0xa97: va97 = SUB va96 v30c
0xa9d: SSTORE va91 va97
0xaa0: vaa0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab5: vab5 = AND vaa0(0xffffffffffffffffffffffffffffffffffffffff) v303
0xab7: vab7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xacc: vacc = AND vab7(0xffffffffffffffffffffffffffffffffffffffff) v2e4
0xacd: vacd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xaef: vaef(0x40) = CONST 
0xaf1: vaf1 = MLOAD vaef(0x40)
0xaf5: MSTORE vaf1 v30c
0xaf6: vaf6(0x20) = CONST 
0xaf8: vaf8 = ADD vaf6(0x20) vaf1
0xafc: vafc(0x40) = CONST 
0xafe: vafe = MLOAD vafc(0x40)
0xb01: vb01 = SUB vaf8 vafe
0xb03: LOG3 vafe vb01 vacd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vacc vab5
0xb04: vb04(0x1) = CONST 
0xb08: vb08(0xb16) = CONST 
0xb0b: JUMP vb08(0xb16)
----------------------------------

Begin block 0xb0c
prev = {'0x975'}, next = {'0xb16'}
----------------------------------
Block 0xb0c
0xb0d: vb0d(0x0) = CONST 
0xb11: vb11(0xb16) = CONST 
0xb14: JUMP vb11(0xb16)
----------------------------------

Begin block 0xb16
prev = {'0xb0c', '0x97b'}, next = {'0x31a'}
----------------------------------
Block 0xb16
0xb1c: JUMP v2c7(0x31a)
----------------------------------

Begin block 0xb1d
prev = {'0x33f'}, next = {'0x347'}
----------------------------------
Block 0xb1d
0xb1e: vb1e(0x12) = CONST 
0xb21: JUMP v340(0x347)
----------------------------------

Begin block 0xb22
prev = {'0x368'}, next = {'0x370'}
----------------------------------
Block 0xb22
0xb23: vb23(0x1900) = CONST 
0xb27: JUMP v369(0x370)
----------------------------------

Begin block 0xb28
prev = {'0x391'}, next = {'0xb3e', '0xb42'}
----------------------------------
Block 0xb28
0xb29: vb29(0x5) = CONST 
0xb2b: vb2b(0x14) = CONST 
0xb2e: vb2e = SLOAD vb29(0x5)
0xb30: vb30(0x100) = CONST 
0xb33: vb33(0x10000000000000000000000000000000000000000) = EXP vb30(0x100) vb2b(0x14)
0xb35: vb35 = DIV vb2e vb33(0x10000000000000000000000000000000000000000)
0xb36: vb36(0xff) = CONST 
0xb38: vb38 = AND vb36(0xff) vb35
0xb39: vb39 = ISZERO vb38
0xb3a: vb3a(0xb42) = CONST 
0xb3d: JUMPI vb3a(0xb42) vb39
----------------------------------

Begin block 0xb3e
prev = {'0xb28'}, next = {}
----------------------------------
Block 0xb3e
0xb3e: vb3e(0x0) = CONST 
0xb41: REVERT vb3e(0x0) vb3e(0x0)
----------------------------------

Begin block 0xb42
prev = {'0xb28'}, next = {'0xb9a', '0xb9e'}
----------------------------------
Block 0xb42
0xb43: vb43(0x4) = CONST 
0xb45: vb45(0x0) = CONST 
0xb48: vb48 = SLOAD vb43(0x4)
0xb4a: vb4a(0x100) = CONST 
0xb4d: vb4d(0x1) = EXP vb4a(0x100) vb45(0x0)
0xb4f: vb4f = DIV vb48 vb4d(0x1)
0xb50: vb50(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb65: vb65 = AND vb50(0xffffffffffffffffffffffffffffffffffffffff) vb4f
0xb66: vb66(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb7b: vb7b = AND vb66(0xffffffffffffffffffffffffffffffffffffffff) vb65
0xb7c: vb7c = CALLER 
0xb7d: vb7d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb92: vb92 = AND vb7d(0xffffffffffffffffffffffffffffffffffffffff) vb7c
0xb93: vb93 = EQ vb92 vb7b
0xb94: vb94 = ISZERO vb93
0xb95: vb95 = ISZERO vb94
0xb96: vb96(0xb9e) = CONST 
0xb99: JUMPI vb96(0xb9e) vb95
----------------------------------

Begin block 0xb9a
prev = {'0xb42'}, next = {}
----------------------------------
Block 0xb9a
0xb9a: vb9a(0x0) = CONST 
0xb9d: REVERT vb9a(0x0) vb9a(0x0)
----------------------------------

Begin block 0xb9e
prev = {'0xb42'}, next = {'0xbb3', '0xbb7'}
----------------------------------
Block 0xb9e
0xb9f: vb9f(0x12) = CONST 
0xba1: vba1(0xa) = CONST 
0xba3: vba3(0xde0b6b3a7640000) = EXP vba1(0xa) vb9f(0x12)
0xba4: vba4(0x283baec0) = CONST 
0xba9: vba9(0x22e58cf5246568f83000000) = MUL vba4(0x283baec0) vba3(0xde0b6b3a7640000)
0xbaa: vbaa(0x0) = CONST 
0xbac: vbac = SLOAD vbaa(0x0)
0xbad: vbad = LT vbac vba9(0x22e58cf5246568f83000000)
0xbae: vbae = ISZERO vbad
0xbaf: vbaf(0xbb7) = CONST 
0xbb2: JUMPI vbaf(0xbb7) vbae
----------------------------------

Begin block 0xbb3
prev = {'0xb9e'}, next = {}
----------------------------------
Block 0xbb3
0xbb3: vbb3(0x0) = CONST 
0xbb6: REVERT vbb3(0x0) vbb3(0x0)
----------------------------------

Begin block 0xbb7
prev = {'0xb9e'}, next = {'0xbc4', '0xbd5'}
----------------------------------
Block 0xbb7
0xbb8: vbb8(0x7) = CONST 
0xbba: vbba = SLOAD vbb8(0x7)
0xbbb: vbbb = NUMBER 
0xbbc: vbbc = GT vbbb vbba
0xbbd: vbbd = ISZERO vbbc
0xbbf: vbbf = ISZERO vbbd
0xbc0: vbc0(0xbd5) = CONST 
0xbc3: JUMPI vbc0(0xbd5) vbbf
----------------------------------

Begin block 0xbc4
prev = {'0xbb7'}, next = {'0xbd5'}
----------------------------------
Block 0xbc4
0xbc5: vbc5(0x12) = CONST 
0xbc7: vbc7(0xa) = CONST 
0xbc9: vbc9(0xde0b6b3a7640000) = EXP vbc7(0xa) vbc5(0x12)
0xbca: vbca(0x59682f00) = CONST 
0xbcf: vbcf(0x4d8c55aefb8c05b5c000000) = MUL vbca(0x59682f00) vbc9(0xde0b6b3a7640000)
0xbd0: vbd0(0x0) = CONST 
0xbd2: vbd2 = SLOAD vbd0(0x0)
0xbd3: vbd3 = EQ vbd2 vbcf(0x4d8c55aefb8c05b5c000000)
0xbd4: vbd4 = ISZERO vbd3
----------------------------------

Begin block 0xbd5
prev = {'0xbc4', '0xbb7'}, next = {'0xbdf', '0xbdb'}
----------------------------------
Block 0xbd5
0xbd5_0x0: vbd5_0 = PHI vbbd vbd4
0xbd6: vbd6 = ISZERO vbd5_0
0xbd7: vbd7(0xbdf) = CONST 
0xbda: JUMPI vbd7(0xbdf) vbd6
----------------------------------

Begin block 0xbdb
prev = {'0xbd5'}, next = {}
----------------------------------
Block 0xbdb
0xbdb: vbdb(0x0) = CONST 
0xbde: REVERT vbdb(0x0) vbdb(0x0)
----------------------------------

Begin block 0xbdf
prev = {'0xbd5'}, next = {'0xc6f', '0xc73'}
----------------------------------
Block 0xbdf
0xbe0: vbe0(0x1) = CONST 
0xbe2: vbe2(0x5) = CONST 
0xbe4: vbe4(0x14) = CONST 
0xbe6: vbe6(0x100) = CONST 
0xbe9: vbe9(0x10000000000000000000000000000000000000000) = EXP vbe6(0x100) vbe4(0x14)
0xbeb: vbeb = SLOAD vbe2(0x5)
0xbed: vbed(0xff) = CONST 
0xbef: vbef(0xff0000000000000000000000000000000000000000) = MUL vbed(0xff) vbe9(0x10000000000000000000000000000000000000000)
0xbf0: vbf0(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT vbef(0xff0000000000000000000000000000000000000000)
0xbf1: vbf1 = AND vbf0(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) vbeb
0xbf4: vbf4(0x0) = ISZERO vbe0(0x1)
0xbf5: vbf5(0x1) = ISZERO vbf4(0x0)
0xbf6: vbf6(0x10000000000000000000000000000000000000000) = MUL vbf5(0x1) vbe9(0x10000000000000000000000000000000000000000)
0xbf7: vbf7 = OR vbf6(0x10000000000000000000000000000000000000000) vbf1
0xbf9: SSTORE vbe2(0x5) vbf7
0xbfb: vbfb(0x4) = CONST 
0xbfd: vbfd(0x0) = CONST 
0xc00: vc00 = SLOAD vbfb(0x4)
0xc02: vc02(0x100) = CONST 
0xc05: vc05(0x1) = EXP vc02(0x100) vbfd(0x0)
0xc07: vc07 = DIV vc00 vc05(0x1)
0xc08: vc08(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc1d: vc1d = AND vc08(0xffffffffffffffffffffffffffffffffffffffff) vc07
0xc1e: vc1e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc33: vc33 = AND vc1e(0xffffffffffffffffffffffffffffffffffffffff) vc1d
0xc34: vc34(0x8fc) = CONST 
0xc37: vc37 = ADDRESS 
0xc38: vc38(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc4d: vc4d = AND vc38(0xffffffffffffffffffffffffffffffffffffffff) vc37
0xc4e: vc4e = BALANCE vc4d
0xc51: vc51 = ISZERO vc4e
0xc52: vc52 = MUL vc51 vc34(0x8fc)
0xc54: vc54(0x40) = CONST 
0xc56: vc56 = MLOAD vc54(0x40)
0xc57: vc57(0x0) = CONST 
0xc59: vc59(0x40) = CONST 
0xc5b: vc5b = MLOAD vc59(0x40)
0xc5e: vc5e = SUB vc56 vc5b
0xc63: vc63 = CALL vc52 vc33 vc4e vc5b vc5e vc5b vc57(0x0)
0xc69: vc69 = ISZERO vc63
0xc6a: vc6a = ISZERO vc69
0xc6b: vc6b(0xc73) = CONST 
0xc6e: JUMPI vc6b(0xc73) vc6a
----------------------------------

Begin block 0xc6f
prev = {'0xbdf'}, next = {}
----------------------------------
Block 0xc6f
0xc6f: vc6f(0x0) = CONST 
0xc72: REVERT vc6f(0x0) vc6f(0x0)
----------------------------------

Begin block 0xc73
prev = {'0xbdf'}, next = {'0xc74'}
----------------------------------
Block 0xc73
----------------------------------

Begin block 0xc74
prev = {'0xc73'}, next = {'0x399'}
----------------------------------
Block 0xc74
0xc75: JUMP v392(0x399)
----------------------------------

Begin block 0xc76
prev = {'0x3a6'}, next = {'0xd0c', '0xcc6'}
----------------------------------
Block 0xc76
0xc77: vc77(0x3) = CONST 
0xc7a: vc7a = SLOAD vc77(0x3)
0xc7b: vc7b(0x1) = CONST 
0xc7e: vc7e(0x1) = CONST 
0xc80: vc80 = AND vc7e(0x1) vc7a
0xc81: vc81 = ISZERO vc80
0xc82: vc82(0x100) = CONST 
0xc85: vc85 = MUL vc82(0x100) vc81
0xc86: vc86 = SUB vc85 vc7b(0x1)
0xc87: vc87 = AND vc86 vc7a
0xc88: vc88(0x2) = CONST 
0xc8b: vc8b = DIV vc87 vc88(0x2)
0xc8d: vc8d(0x1f) = CONST 
0xc8f: vc8f = ADD vc8d(0x1f) vc8b
0xc90: vc90(0x20) = CONST 
0xc94: vc94 = DIV vc8f vc90(0x20)
0xc95: vc95 = MUL vc94 vc90(0x20)
0xc96: vc96(0x20) = CONST 
0xc98: vc98 = ADD vc96(0x20) vc95
0xc99: vc99(0x40) = CONST 
0xc9b: vc9b = MLOAD vc99(0x40)
0xc9e: vc9e = ADD vc9b vc98
0xc9f: vc9f(0x40) = CONST 
0xca1: MSTORE vc9f(0x40) vc9e
0xca8: MSTORE vc9b vc8b
0xca9: vca9(0x20) = CONST 
0xcab: vcab = ADD vca9(0x20) vc9b
0xcae: vcae = SLOAD vc77(0x3)
0xcaf: vcaf(0x1) = CONST 
0xcb2: vcb2(0x1) = CONST 
0xcb4: vcb4 = AND vcb2(0x1) vcae
0xcb5: vcb5 = ISZERO vcb4
0xcb6: vcb6(0x100) = CONST 
0xcb9: vcb9 = MUL vcb6(0x100) vcb5
0xcba: vcba = SUB vcb9 vcaf(0x1)
0xcbb: vcbb = AND vcba vcae
0xcbc: vcbc(0x2) = CONST 
0xcbf: vcbf = DIV vcbb vcbc(0x2)
0xcc1: vcc1 = ISZERO vcbf
0xcc2: vcc2(0xd0c) = CONST 
0xcc5: JUMPI vcc2(0xd0c) vcc1
----------------------------------

Begin block 0xcc6
prev = {'0xc76'}, next = {'0xce1', '0xcce'}
----------------------------------
Block 0xcc6
0xcc7: vcc7(0x1f) = CONST 
0xcc9: vcc9 = LT vcc7(0x1f) vcbf
0xcca: vcca(0xce1) = CONST 
0xccd: JUMPI vcca(0xce1) vcc9
----------------------------------

Begin block 0xcce
prev = {'0xcc6'}, next = {'0xd0c'}
----------------------------------
Block 0xcce
0xcce: vcce(0x100) = CONST 
0xcd3: vcd3 = SLOAD vc77(0x3)
0xcd4: vcd4 = DIV vcd3 vcce(0x100)
0xcd5: vcd5 = MUL vcd4 vcce(0x100)
0xcd7: MSTORE vcab vcd5
0xcd9: vcd9(0x20) = CONST 
0xcdb: vcdb = ADD vcd9(0x20) vcab
0xcdd: vcdd(0xd0c) = CONST 
0xce0: JUMP vcdd(0xd0c)
----------------------------------

Begin block 0xce1
prev = {'0xcc6'}, next = {'0xcef'}
----------------------------------
Block 0xce1
0xce3: vce3 = ADD vcab vcbf
0xce6: vce6(0x0) = CONST 
0xce8: MSTORE vce6(0x0) vc77(0x3)
0xce9: vce9(0x20) = CONST 
0xceb: vceb(0x0) = CONST 
0xced: vced = SHA3 vceb(0x0) vce9(0x20)
----------------------------------

Begin block 0xcef
prev = {'0xce1', '0xcef'}, next = {'0xcef', '0xd03'}
----------------------------------
Block 0xcef
0xcef_0x0: vcef_0 = PHI vcab vcfb
0xcef_0x1: vcef_1 = PHI vced vcf7
0xcf1: vcf1 = SLOAD vcef_1
0xcf3: MSTORE vcef_0 vcf1
0xcf5: vcf5(0x1) = CONST 
0xcf7: vcf7 = ADD vcf5(0x1) vcef_1
0xcf9: vcf9(0x20) = CONST 
0xcfb: vcfb = ADD vcf9(0x20) vcef_0
0xcfe: vcfe = GT vce3 vcfb
0xcff: vcff(0xcef) = CONST 
0xd02: JUMPI vcff(0xcef) vcfe
----------------------------------

Begin block 0xd03
prev = {'0xcef'}, next = {'0xd0c'}
----------------------------------
Block 0xd03
0xd05: vd05 = SUB vcfb vce3
0xd06: vd06(0x1f) = CONST 
0xd08: vd08 = AND vd06(0x1f) vd05
0xd0a: vd0a = ADD vce3 vd08
----------------------------------

Begin block 0xd0c
prev = {'0xcce', '0xd03', '0xc76'}, next = {'0x3ae'}
----------------------------------
Block 0xd0c
0xd13: JUMP v3a7(0x3ae)
----------------------------------

Begin block 0xd14
prev = {'0x435'}, next = {'0xd2d', '0xd31'}
----------------------------------
Block 0xd14
0xd15: vd15(0x0) = CONST 
0xd18: vd18(0x5) = CONST 
0xd1a: vd1a(0x14) = CONST 
0xd1d: vd1d = SLOAD vd18(0x5)
0xd1f: vd1f(0x100) = CONST 
0xd22: vd22(0x10000000000000000000000000000000000000000) = EXP vd1f(0x100) vd1a(0x14)
0xd24: vd24 = DIV vd1d vd22(0x10000000000000000000000000000000000000000)
0xd25: vd25(0xff) = CONST 
0xd27: vd27 = AND vd25(0xff) vd24
0xd28: vd28 = ISZERO vd27
0xd29: vd29(0xd31) = CONST 
0xd2c: JUMPI vd29(0xd31) vd28
----------------------------------

Begin block 0xd2d
prev = {'0xd14'}, next = {}
----------------------------------
Block 0xd2d
0xd2d: vd2d(0x0) = CONST 
0xd30: REVERT vd2d(0x0) vd2d(0x0)
----------------------------------

Begin block 0xd31
prev = {'0xd14'}, next = {'0xd41', '0xd3d'}
----------------------------------
Block 0xd31
0xd32: vd32(0x7) = CONST 
0xd34: vd34 = SLOAD vd32(0x7)
0xd35: vd35 = NUMBER 
0xd36: vd36 = GT vd35 vd34
0xd37: vd37 = ISZERO vd36
0xd38: vd38 = ISZERO vd37
0xd39: vd39(0xd41) = CONST 
0xd3c: JUMPI vd39(0xd41) vd38
----------------------------------

Begin block 0xd3d
prev = {'0xd31'}, next = {}
----------------------------------
Block 0xd3d
0xd3d: vd3d(0x0) = CONST 
0xd40: REVERT vd3d(0x0) vd3d(0x0)
----------------------------------

Begin block 0xd41
prev = {'0xd31'}, next = {'0xd57', '0xd5b'}
----------------------------------
Block 0xd41
0xd42: vd42(0x12) = CONST 
0xd44: vd44(0xa) = CONST 
0xd46: vd46(0xde0b6b3a7640000) = EXP vd44(0xa) vd42(0x12)
0xd47: vd47(0x283baec0) = CONST 
0xd4c: vd4c(0x22e58cf5246568f83000000) = MUL vd47(0x283baec0) vd46(0xde0b6b3a7640000)
0xd4d: vd4d(0x0) = CONST 
0xd4f: vd4f = SLOAD vd4d(0x0)
0xd50: vd50 = LT vd4f vd4c(0x22e58cf5246568f83000000)
0xd51: vd51 = ISZERO vd50
0xd52: vd52 = ISZERO vd51
0xd53: vd53(0xd5b) = CONST 
0xd56: JUMPI vd53(0xd5b) vd52
----------------------------------

Begin block 0xd57
prev = {'0xd41'}, next = {}
----------------------------------
Block 0xd57
0xd57: vd57(0x0) = CONST 
0xd5a: REVERT vd57(0x0) vd57(0x0)
----------------------------------

Begin block 0xd5b
prev = {'0xd41'}, next = {'0xdb6', '0xdb2'}
----------------------------------
Block 0xd5b
0xd5c: vd5c(0x5) = CONST 
0xd5e: vd5e(0x0) = CONST 
0xd61: vd61 = SLOAD vd5c(0x5)
0xd63: vd63(0x100) = CONST 
0xd66: vd66(0x1) = EXP vd63(0x100) vd5e(0x0)
0xd68: vd68 = DIV vd61 vd66(0x1)
0xd69: vd69(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd7e: vd7e = AND vd69(0xffffffffffffffffffffffffffffffffffffffff) vd68
0xd7f: vd7f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd94: vd94 = AND vd7f(0xffffffffffffffffffffffffffffffffffffffff) vd7e
0xd95: vd95 = CALLER 
0xd96: vd96(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdab: vdab = AND vd96(0xffffffffffffffffffffffffffffffffffffffff) vd95
0xdac: vdac = EQ vdab vd94
0xdad: vdad = ISZERO vdac
0xdae: vdae(0xdb6) = CONST 
0xdb1: JUMPI vdae(0xdb6) vdad
----------------------------------

Begin block 0xdb2
prev = {'0xd5b'}, next = {}
----------------------------------
Block 0xdb2
0xdb2: vdb2(0x0) = CONST 
0xdb5: REVERT vdb2(0x0) vdb2(0x0)
----------------------------------

Begin block 0xdb6
prev = {'0xd5b'}, next = {'0xe02', '0xe06'}
----------------------------------
Block 0xdb6
0xdb7: vdb7(0x1) = CONST 
0xdb9: vdb9(0x0) = CONST 
0xdbb: vdbb = CALLER 
0xdbc: vdbc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdd1: vdd1 = AND vdbc(0xffffffffffffffffffffffffffffffffffffffff) vdbb
0xdd2: vdd2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xde7: vde7 = AND vdd2(0xffffffffffffffffffffffffffffffffffffffff) vdd1
0xde9: MSTORE vdb9(0x0) vde7
0xdea: vdea(0x20) = CONST 
0xdec: vdec(0x20) = ADD vdea(0x20) vdb9(0x0)
0xdef: MSTORE vdec(0x20) vdb7(0x1)
0xdf0: vdf0(0x20) = CONST 
0xdf2: vdf2(0x40) = ADD vdf0(0x20) vdec(0x20)
0xdf3: vdf3(0x0) = CONST 
0xdf5: vdf5 = SHA3 vdf3(0x0) vdf2(0x40)
0xdf6: vdf6 = SLOAD vdf5
0xdf9: vdf9(0x0) = CONST 
0xdfc: vdfc = EQ vdf6 vdf9(0x0)
0xdfd: vdfd = ISZERO vdfc
0xdfe: vdfe(0xe06) = CONST 
0xe01: JUMPI vdfe(0xe06) vdfd
----------------------------------

Begin block 0xe02
prev = {'0xdb6'}, next = {}
----------------------------------
Block 0xe02
0xe02: ve02(0x0) = CONST 
0xe05: REVERT ve02(0x0) ve02(0x0)
----------------------------------

Begin block 0xe06
prev = {'0xdb6'}, next = {'0x12fd'}
----------------------------------
Block 0xe06
0xe07: ve07(0x0) = CONST 
0xe09: ve09(0x1) = CONST 
0xe0b: ve0b(0x0) = CONST 
0xe0d: ve0d = CALLER 
0xe0e: ve0e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe23: ve23 = AND ve0e(0xffffffffffffffffffffffffffffffffffffffff) ve0d
0xe24: ve24(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe39: ve39 = AND ve24(0xffffffffffffffffffffffffffffffffffffffff) ve23
0xe3b: MSTORE ve0b(0x0) ve39
0xe3c: ve3c(0x20) = CONST 
0xe3e: ve3e(0x20) = ADD ve3c(0x20) ve0b(0x0)
0xe41: MSTORE ve3e(0x20) ve09(0x1)
0xe42: ve42(0x20) = CONST 
0xe44: ve44(0x40) = ADD ve42(0x20) ve3e(0x20)
0xe45: ve45(0x0) = CONST 
0xe47: ve47 = SHA3 ve45(0x0) ve44(0x40)
0xe4a: SSTORE ve47 ve07(0x0)
0xe4c: ve4c(0xe57) = CONST 
0xe4f: ve4f(0x0) = CONST 
0xe51: ve51 = SLOAD ve4f(0x0)
0xe53: ve53(0x12fd) = CONST 
0xe56: JUMP ve53(0x12fd)
----------------------------------

Begin block 0xe57
prev = {'0x1315'}, next = {'0xe6a'}
----------------------------------
Block 0xe57
0xe58: ve58(0x0) = CONST 
0xe5c: SSTORE ve58(0x0) v130f
0xe5e: ve5e(0x1900) = CONST 
0xe63: ve63(0x0) = ISZERO ve5e(0x1900)
0xe64: ve64(0x1) = ISZERO ve63(0x0)
0xe65: ve65(0xe6a) = CONST 
0xe68: JUMPI ve65(0xe6a) ve64(0x1)
----------------------------------

Begin block 0xe6a
prev = {'0xe57'}, next = {'0xefb', '0xef7'}
----------------------------------
Block 0xe6a
0xe6b: ve6b = DIV vdf6 ve5e(0x1900)
0xe6e: ve6e = CALLER 
0xe6f: ve6f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe84: ve84 = AND ve6f(0xffffffffffffffffffffffffffffffffffffffff) ve6e
0xe85: ve85(0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7) = CONST 
0xea7: vea7(0x40) = CONST 
0xea9: vea9 = MLOAD vea7(0x40)
0xead: MSTORE vea9 ve6b
0xeae: veae(0x20) = CONST 
0xeb0: veb0 = ADD veae(0x20) vea9
0xeb4: veb4(0x40) = CONST 
0xeb6: veb6 = MLOAD veb4(0x40)
0xeb9: veb9 = SUB veb0 veb6
0xebb: LOG2 veb6 veb9 ve85(0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7) ve84
0xebc: vebc = CALLER 
0xebd: vebd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xed2: ved2 = AND vebd(0xffffffffffffffffffffffffffffffffffffffff) vebc
0xed3: ved3(0x8fc) = CONST 
0xed9: ved9 = ISZERO ve6b
0xeda: veda = MUL ved9 ved3(0x8fc)
0xedc: vedc(0x40) = CONST 
0xede: vede = MLOAD vedc(0x40)
0xedf: vedf(0x0) = CONST 
0xee1: vee1(0x40) = CONST 
0xee3: vee3 = MLOAD vee1(0x40)
0xee6: vee6 = SUB vede vee3
0xeeb: veeb = CALL veda ved2 ve6b vee3 vee6 vee3 vedf(0x0)
0xef1: vef1 = ISZERO veeb
0xef2: vef2 = ISZERO vef1
0xef3: vef3(0xefb) = CONST 
0xef6: JUMPI vef3(0xefb) vef2
----------------------------------

Begin block 0xef7
prev = {'0xe6a'}, next = {}
----------------------------------
Block 0xef7
0xef7: vef7(0x0) = CONST 
0xefa: REVERT vef7(0x0) vef7(0x0)
----------------------------------

Begin block 0xefb
prev = {'0xe6a'}, next = {'0xefc'}
----------------------------------
Block 0xefb
----------------------------------

Begin block 0xefc
prev = {'0xefb'}, next = {'0x43d'}
----------------------------------
Block 0xefc
0xeff: JUMP v436(0x43d)
----------------------------------

Begin block 0xf00
prev = {'0x44a'}, next = {'0x452'}
----------------------------------
Block 0xf00
0xf01: vf01(0x12) = CONST 
0xf03: vf03(0xa) = CONST 
0xf05: vf05(0xde0b6b3a7640000) = EXP vf03(0xa) vf01(0x12)
0xf06: vf06(0x59682f00) = CONST 
0xf0b: vf0b(0x4d8c55aefb8c05b5c000000) = MUL vf06(0x59682f00) vf05(0xde0b6b3a7640000)
0xf0d: JUMP v44b(0x452)
----------------------------------

Begin block 0xf0e
prev = {'0x473'}, next = {'0xf53'}
----------------------------------
Block 0xf0e
0xf0f: vf0f(0x0) = CONST 
0xf11: vf11(0x1) = CONST 
0xf13: vf13(0x0) = CONST 
0xf16: vf16(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2b: vf2b = AND vf16(0xffffffffffffffffffffffffffffffffffffffff) v491
0xf2c: vf2c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf41: vf41 = AND vf2c(0xffffffffffffffffffffffffffffffffffffffff) vf2b
0xf43: MSTORE vf13(0x0) vf41
0xf44: vf44(0x20) = CONST 
0xf46: vf46(0x20) = ADD vf44(0x20) vf13(0x0)
0xf49: MSTORE vf46(0x20) vf11(0x1)
0xf4a: vf4a(0x20) = CONST 
0xf4c: vf4c(0x40) = ADD vf4a(0x20) vf46(0x20)
0xf4d: vf4d(0x0) = CONST 
0xf4f: vf4f = SHA3 vf4d(0x0) vf4c(0x40)
0xf50: vf50 = SLOAD vf4f
----------------------------------

Begin block 0xf53
prev = {'0xf0e'}, next = {'0x49f'}
----------------------------------
Block 0xf53
0xf57: JUMP v474(0x49f)
----------------------------------

Begin block 0xf58
prev = {'0x4c0'}, next = {'0x4c8'}
----------------------------------
Block 0xf58
0xf59: vf59(0x5) = CONST 
0xf5b: vf5b(0x14) = CONST 
0xf5e: vf5e = SLOAD vf59(0x5)
0xf60: vf60(0x100) = CONST 
0xf63: vf63(0x10000000000000000000000000000000000000000) = EXP vf60(0x100) vf5b(0x14)
0xf65: vf65 = DIV vf5e vf63(0x10000000000000000000000000000000000000000)
0xf66: vf66(0xff) = CONST 
0xf68: vf68 = AND vf66(0xff) vf65
0xf6a: JUMP v4c1(0x4c8)
----------------------------------

Begin block 0xf6b
prev = {'0x4ed'}, next = {'0x4f5'}
----------------------------------
Block 0xf6b
0xf6c: vf6c(0x7) = CONST 
0xf6e: vf6e = SLOAD vf6c(0x7)
0xf70: JUMP v4ee(0x4f5)
----------------------------------

Begin block 0xf71
prev = {'0x516'}, next = {'0x51e'}
----------------------------------
Block 0xf71
0xf72: vf72(0x40) = CONST 
0xf75: vf75 = MLOAD vf72(0x40)
0xf78: vf78 = ADD vf75 vf72(0x40)
0xf79: vf79(0x40) = CONST 
0xf7b: MSTORE vf79(0x40) vf78
0xf7d: vf7d(0x5) = CONST 
0xf80: MSTORE vf75 vf7d(0x5)
0xf81: vf81(0x20) = CONST 
0xf83: vf83 = ADD vf81(0x20) vf75
0xf84: vf84(0x474f4f4754000000000000000000000000000000000000000000000000000000) = CONST 
0xfa6: MSTORE vf83 vf84(0x474f4f4754000000000000000000000000000000000000000000000000000000)
0xfa9: JUMP v517(0x51e)
----------------------------------

Begin block 0xfaa
prev = {'0x5a5'}, next = {'0x5ad'}
----------------------------------
Block 0xfaa
0xfab: vfab(0x4) = CONST 
0xfad: vfad(0x0) = CONST 
0xfb0: vfb0 = SLOAD vfab(0x4)
0xfb2: vfb2(0x100) = CONST 
0xfb5: vfb5(0x1) = EXP vfb2(0x100) vfad(0x0)
0xfb7: vfb7 = DIV vfb0 vfb5(0x1)
0xfb8: vfb8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfcd: vfcd = AND vfb8(0xffffffffffffffffffffffffffffffffffffffff) vfb7
0xfcf: JUMP v5a6(0x5ad)
----------------------------------

Begin block 0xfd0
prev = {'0x5fa'}, next = {'0x101c', '0x1021'}
----------------------------------
Block 0xfd0
0xfd1: vfd1(0x0) = CONST 
0xfd4: vfd4(0x1) = CONST 
0xfd6: vfd6(0x0) = CONST 
0xfd8: vfd8 = CALLER 
0xfd9: vfd9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfee: vfee = AND vfd9(0xffffffffffffffffffffffffffffffffffffffff) vfd8
0xfef: vfef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1004: v1004 = AND vfef(0xffffffffffffffffffffffffffffffffffffffff) vfee
0x1006: MSTORE vfd6(0x0) v1004
0x1007: v1007(0x20) = CONST 
0x1009: v1009(0x20) = ADD v1007(0x20) vfd6(0x0)
0x100c: MSTORE v1009(0x20) vfd4(0x1)
0x100d: v100d(0x20) = CONST 
0x100f: v100f(0x40) = ADD v100d(0x20) v1009(0x20)
0x1010: v1010(0x0) = CONST 
0x1012: v1012 = SHA3 v1010(0x0) v100f(0x40)
0x1013: v1013 = SLOAD v1012
0x1014: v1014 = LT v1013 v621
0x1015: v1015 = ISZERO v1014
0x1017: v1017 = ISZERO v1015
0x1018: v1018(0x1021) = CONST 
0x101b: JUMPI v1018(0x1021) v1017
----------------------------------

Begin block 0x101c
prev = {'0xfd0'}, next = {'0x1021'}
----------------------------------
Block 0x101c
0x101d: v101d(0x0) = CONST 
0x1020: v1020 = GT v621 v101d(0x0)
----------------------------------

Begin block 0x1021
prev = {'0x101c', '0xfd0'}, next = {'0x1027', '0x112e'}
----------------------------------
Block 0x1021
0x1021_0x0: v1021_0 = PHI v1015 v1020
0x1022: v1022 = ISZERO v1021_0
0x1023: v1023(0x112e) = CONST 
0x1026: JUMPI v1023(0x112e) v1022
----------------------------------

Begin block 0x1027
prev = {'0x1021'}, next = {'0x1138'}
----------------------------------
Block 0x1027
0x1028: v1028(0x1) = CONST 
0x102a: v102a(0x0) = CONST 
0x102c: v102c = CALLER 
0x102d: v102d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1042: v1042 = AND v102d(0xffffffffffffffffffffffffffffffffffffffff) v102c
0x1043: v1043(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1058: v1058 = AND v1043(0xffffffffffffffffffffffffffffffffffffffff) v1042
0x105a: MSTORE v102a(0x0) v1058
0x105b: v105b(0x20) = CONST 
0x105d: v105d(0x20) = ADD v105b(0x20) v102a(0x0)
0x1060: MSTORE v105d(0x20) v1028(0x1)
0x1061: v1061(0x20) = CONST 
0x1063: v1063(0x40) = ADD v1061(0x20) v105d(0x20)
0x1064: v1064(0x0) = CONST 
0x1066: v1066 = SHA3 v1064(0x0) v1063(0x40)
0x1067: v1067(0x0) = CONST 
0x106b: v106b = SLOAD v1066
0x106c: v106c = SUB v106b v621
0x1072: SSTORE v1066 v106c
0x1075: v1075(0x1) = CONST 
0x1077: v1077(0x0) = CONST 
0x107a: v107a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108f: v108f = AND v107a(0xffffffffffffffffffffffffffffffffffffffff) v618
0x1090: v1090(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10a5: v10a5 = AND v1090(0xffffffffffffffffffffffffffffffffffffffff) v108f
0x10a7: MSTORE v1077(0x0) v10a5
0x10a8: v10a8(0x20) = CONST 
0x10aa: v10aa(0x20) = ADD v10a8(0x20) v1077(0x0)
0x10ad: MSTORE v10aa(0x20) v1075(0x1)
0x10ae: v10ae(0x20) = CONST 
0x10b0: v10b0(0x40) = ADD v10ae(0x20) v10aa(0x20)
0x10b1: v10b1(0x0) = CONST 
0x10b3: v10b3 = SHA3 v10b1(0x0) v10b0(0x40)
0x10b4: v10b4(0x0) = CONST 
0x10b8: v10b8 = SLOAD v10b3
0x10b9: v10b9 = ADD v10b8 v621
0x10bf: SSTORE v10b3 v10b9
0x10c2: v10c2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10d7: v10d7 = AND v10c2(0xffffffffffffffffffffffffffffffffffffffff) v618
0x10d8: v10d8 = CALLER 
0x10d9: v10d9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10ee: v10ee = AND v10d9(0xffffffffffffffffffffffffffffffffffffffff) v10d8
0x10ef: v10ef(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1111: v1111(0x40) = CONST 
0x1113: v1113 = MLOAD v1111(0x40)
0x1117: MSTORE v1113 v621
0x1118: v1118(0x20) = CONST 
0x111a: v111a = ADD v1118(0x20) v1113
0x111e: v111e(0x40) = CONST 
0x1120: v1120 = MLOAD v111e(0x40)
0x1123: v1123 = SUB v111a v1120
0x1125: LOG3 v1120 v1123 v10ef(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v10ee v10d7
0x1126: v1126(0x1) = CONST 
0x112a: v112a(0x1138) = CONST 
0x112d: JUMP v112a(0x1138)
----------------------------------

Begin block 0x112e
prev = {'0x1021'}, next = {'0x1138'}
----------------------------------
Block 0x112e
0x112f: v112f(0x0) = CONST 
0x1133: v1133(0x1138) = CONST 
0x1136: JUMP v1133(0x1138)
----------------------------------

Begin block 0x1138
prev = {'0x1027', '0x112e'}, next = {'0x62f'}
----------------------------------
Block 0x1138
0x113d: JUMP v5fb(0x62f)
----------------------------------

Begin block 0x113e
prev = {'0x649'}, next = {'0x1157', '0x115b'}
----------------------------------
Block 0x113e
0x113f: v113f(0x0) = CONST 
0x1142: v1142(0x5) = CONST 
0x1144: v1144(0x14) = CONST 
0x1147: v1147 = SLOAD v1142(0x5)
0x1149: v1149(0x100) = CONST 
0x114c: v114c(0x10000000000000000000000000000000000000000) = EXP v1149(0x100) v1144(0x14)
0x114e: v114e = DIV v1147 v114c(0x10000000000000000000000000000000000000000)
0x114f: v114f(0xff) = CONST 
0x1151: v1151 = AND v114f(0xff) v114e
0x1152: v1152 = ISZERO v1151
0x1153: v1153(0x115b) = CONST 
0x1156: JUMPI v1153(0x115b) v1152
----------------------------------

Begin block 0x1157
prev = {'0x113e'}, next = {}
----------------------------------
Block 0x1157
0x1157: v1157(0x0) = CONST 
0x115a: REVERT v1157(0x0) v1157(0x0)
----------------------------------

Begin block 0x115b
prev = {'0x113e'}, next = {'0x1166', '0x116a'}
----------------------------------
Block 0x115b
0x115c: v115c(0x6) = CONST 
0x115e: v115e = SLOAD v115c(0x6)
0x115f: v115f = NUMBER 
0x1160: v1160 = LT v115f v115e
0x1161: v1161 = ISZERO v1160
0x1162: v1162(0x116a) = CONST 
0x1165: JUMPI v1162(0x116a) v1161
----------------------------------

Begin block 0x1166
prev = {'0x115b'}, next = {}
----------------------------------
Block 0x1166
0x1166: v1166(0x0) = CONST 
0x1169: REVERT v1166(0x0) v1166(0x0)
----------------------------------

Begin block 0x116a
prev = {'0x115b'}, next = {'0x1179', '0x1175'}
----------------------------------
Block 0x116a
0x116b: v116b(0x7) = CONST 
0x116d: v116d = SLOAD v116b(0x7)
0x116e: v116e = NUMBER 
0x116f: v116f = GT v116e v116d
0x1170: v1170 = ISZERO v116f
0x1171: v1171(0x1179) = CONST 
0x1174: JUMPI v1171(0x1179) v1170
----------------------------------

Begin block 0x1175
prev = {'0x116a'}, next = {}
----------------------------------
Block 0x1175
0x1175: v1175(0x0) = CONST 
0x1178: REVERT v1175(0x0) v1175(0x0)
----------------------------------

Begin block 0x1179
prev = {'0x116a'}, next = {'0x1183', '0x1187'}
----------------------------------
Block 0x1179
0x117a: v117a(0x0) = CONST 
0x117c: v117c = CALLVALUE 
0x117d: v117d = EQ v117c v117a(0x0)
0x117e: v117e = ISZERO v117d
0x117f: v117f(0x1187) = CONST 
0x1182: JUMPI v117f(0x1187) v117e
----------------------------------

Begin block 0x1183
prev = {'0x1179'}, next = {}
----------------------------------
Block 0x1183
0x1183: v1183(0x0) = CONST 
0x1186: REVERT v1183(0x0) v1183(0x0)
----------------------------------

Begin block 0x1187
prev = {'0x1179'}, next = {'0x131c'}
----------------------------------
Block 0x1187
0x1188: v1188(0x1193) = CONST 
0x118b: v118b = CALLVALUE 
0x118c: v118c(0x1900) = CONST 
0x118f: v118f(0x131c) = CONST 
0x1192: JUMP v118f(0x131c)
----------------------------------

Begin block 0x1193
prev = {'0x1349'}, next = {'0x1350'}
----------------------------------
Block 0x1193
0x1196: v1196(0x11a1) = CONST 
0x1199: v1199(0x0) = CONST 
0x119b: v119b = SLOAD v1199(0x0)
0x119d: v119d(0x1350) = CONST 
0x11a0: JUMP v119d(0x1350)
----------------------------------

Begin block 0x11a1
prev = {'0x1374'}, next = {'0x11ba', '0x11b6'}
----------------------------------
Block 0x11a1
0x11a5: v11a5(0x12) = CONST 
0x11a7: v11a7(0xa) = CONST 
0x11a9: v11a9(0xde0b6b3a7640000) = EXP v11a7(0xa) v11a5(0x12)
0x11aa: v11aa(0x59682f00) = CONST 
0x11af: v11af(0x4d8c55aefb8c05b5c000000) = MUL v11aa(0x59682f00) v11a9(0xde0b6b3a7640000)
0x11b0: v11b0 = LT v11af(0x4d8c55aefb8c05b5c000000) v1356
0x11b1: v11b1 = ISZERO v11b0
0x11b2: v11b2(0x11ba) = CONST 
0x11b5: JUMPI v11b2(0x11ba) v11b1
----------------------------------

Begin block 0x11b6
prev = {'0x11a1'}, next = {}
----------------------------------
Block 0x11b6
0x11b6: v11b6(0x0) = CONST 
0x11b9: REVERT v11b6(0x0) v11b6(0x0)
----------------------------------

Begin block 0x11ba
prev = {'0x11a1'}, next = {'0x125d'}
----------------------------------
Block 0x11ba
0x11bc: v11bc(0x0) = CONST 
0x11c0: SSTORE v11bc(0x0) v1356
0x11c3: v11c3(0x1) = CONST 
0x11c5: v11c5(0x0) = CONST 
0x11c7: v11c7 = CALLER 
0x11c8: v11c8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11dd: v11dd = AND v11c8(0xffffffffffffffffffffffffffffffffffffffff) v11c7
0x11de: v11de(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11f3: v11f3 = AND v11de(0xffffffffffffffffffffffffffffffffffffffff) v11dd
0x11f5: MSTORE v11c5(0x0) v11f3
0x11f6: v11f6(0x20) = CONST 
0x11f8: v11f8(0x20) = ADD v11f6(0x20) v11c5(0x0)
0x11fb: MSTORE v11f8(0x20) v11c3(0x1)
0x11fc: v11fc(0x20) = CONST 
0x11fe: v11fe(0x40) = ADD v11fc(0x20) v11f8(0x20)
0x11ff: v11ff(0x0) = CONST 
0x1201: v1201 = SHA3 v11ff(0x0) v11fe(0x40)
0x1202: v1202(0x0) = CONST 
0x1206: v1206 = SLOAD v1201
0x1207: v1207 = ADD v1206 v1322
0x120d: SSTORE v1201 v1207
0x120f: v120f = CALLER 
0x1210: v1210(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1225: v1225 = AND v1210(0xffffffffffffffffffffffffffffffffffffffff) v120f
0x1226: v1226(0xb33527d2e0d30b7aece2c5e82927985866c1b75173d671c14f4457bf67aa6910) = CONST 
0x1248: v1248(0x40) = CONST 
0x124a: v124a = MLOAD v1248(0x40)
0x124e: MSTORE v124a v1322
0x124f: v124f(0x20) = CONST 
0x1251: v1251 = ADD v124f(0x20) v124a
0x1255: v1255(0x40) = CONST 
0x1257: v1257 = MLOAD v1255(0x40)
0x125a: v125a = SUB v1251 v1257
0x125c: LOG2 v1257 v125a v1226(0xb33527d2e0d30b7aece2c5e82927985866c1b75173d671c14f4457bf67aa6910) v1225
----------------------------------

Begin block 0x125d
prev = {'0x11ba'}, next = {'0x651'}
----------------------------------
Block 0x125d
0x1260: JUMP v64a(0x651)
----------------------------------

Begin block 0x1261
prev = {'0x65e'}, next = {'0x666'}
----------------------------------
Block 0x1261
0x1262: v1262(0x12) = CONST 
0x1264: v1264(0xa) = CONST 
0x1266: v1266(0xde0b6b3a7640000) = EXP v1264(0xa) v1262(0x12)
0x1267: v1267(0x283baec0) = CONST 
0x126c: v126c(0x22e58cf5246568f83000000) = MUL v1267(0x283baec0) v1266(0xde0b6b3a7640000)
0x126e: JUMP v65f(0x666)
----------------------------------

Begin block 0x126f
prev = {'0x687'}, next = {'0x68f'}
----------------------------------
Block 0x126f
0x1270: v1270(0x6) = CONST 
0x1272: v1272 = SLOAD v1270(0x6)
0x1274: JUMP v688(0x68f)
----------------------------------

Begin block 0x1275
prev = {'0x6b0'}, next = {'0x12f7'}
----------------------------------
Block 0x1275
0x1276: v1276(0x0) = CONST 
0x1278: v1278(0x2) = CONST 
0x127a: v127a(0x0) = CONST 
0x127d: v127d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1292: v1292 = AND v127d(0xffffffffffffffffffffffffffffffffffffffff) v6ce
0x1293: v1293(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12a8: v12a8 = AND v1293(0xffffffffffffffffffffffffffffffffffffffff) v1292
0x12aa: MSTORE v127a(0x0) v12a8
0x12ab: v12ab(0x20) = CONST 
0x12ad: v12ad(0x20) = ADD v12ab(0x20) v127a(0x0)
0x12b0: MSTORE v12ad(0x20) v1278(0x2)
0x12b1: v12b1(0x20) = CONST 
0x12b3: v12b3(0x40) = ADD v12b1(0x20) v12ad(0x20)
0x12b4: v12b4(0x0) = CONST 
0x12b6: v12b6 = SHA3 v12b4(0x0) v12b3(0x40)
0x12b7: v12b7(0x0) = CONST 
0x12ba: v12ba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12cf: v12cf = AND v12ba(0xffffffffffffffffffffffffffffffffffffffff) v6ed
0x12d0: v12d0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12e5: v12e5 = AND v12d0(0xffffffffffffffffffffffffffffffffffffffff) v12cf
0x12e7: MSTORE v12b7(0x0) v12e5
0x12e8: v12e8(0x20) = CONST 
0x12ea: v12ea(0x20) = ADD v12e8(0x20) v12b7(0x0)
0x12ed: MSTORE v12ea(0x20) v12b6
0x12ee: v12ee(0x20) = CONST 
0x12f0: v12f0(0x40) = ADD v12ee(0x20) v12ea(0x20)
0x12f1: v12f1(0x0) = CONST 
0x12f3: v12f3 = SHA3 v12f1(0x0) v12f0(0x40)
0x12f4: v12f4 = SLOAD v12f3
----------------------------------

Begin block 0x12f7
prev = {'0x1275'}, next = {'0x6fb'}
----------------------------------
Block 0x12f7
0x12fc: JUMP v6b1(0x6fb)
----------------------------------

Begin block 0x12fd
prev = {'0xe06'}, next = {'0x130b', '0x130c'}
----------------------------------
Block 0x12fd
0x12fe: v12fe(0x0) = CONST 
0x1303: v1303 = LT ve51 vdf6
0x1304: v1304 = ISZERO v1303
0x1305: v1305 = ISZERO v1304
0x1306: v1306 = ISZERO v1305
0x1307: v1307(0x130c) = CONST 
0x130a: JUMPI v1307(0x130c) v1306
----------------------------------

Begin block 0x130b
prev = {'0x12fd'}, next = {}
----------------------------------
Block 0x130b
0x130b: THROW 
----------------------------------

Begin block 0x130c
prev = {'0x12fd'}, next = {'0x1315'}
----------------------------------
Block 0x130c
0x130f: v130f = SUB ve51 vdf6
----------------------------------

Begin block 0x1315
prev = {'0x130c'}, next = {'0xe57'}
----------------------------------
Block 0x1315
0x131b: JUMP ve4c(0xe57)
----------------------------------

Begin block 0x131c
prev = {'0x1187'}, next = {'0x132e', '0x133d'}
----------------------------------
Block 0x131c
0x131d: v131d(0x0) = CONST 
0x1322: v1322 = MUL v118b v118c(0x1900)
0x1325: v1325(0x0) = CONST 
0x1328: v1328 = EQ v118b v1325(0x0)
0x132a: v132a(0x133d) = CONST 
0x132d: JUMPI v132a(0x133d) v1328
----------------------------------

Begin block 0x132e
prev = {'0x131c'}, next = {'0x1339', '0x133a'}
----------------------------------
Block 0x132e
0x1333: v1333 = ISZERO v118b
0x1334: v1334 = ISZERO v1333
0x1335: v1335(0x133a) = CONST 
0x1338: JUMPI v1335(0x133a) v1334
----------------------------------

Begin block 0x1339
prev = {'0x132e'}, next = {}
----------------------------------
Block 0x1339
0x1339: THROW 
----------------------------------

Begin block 0x133a
prev = {'0x132e'}, next = {'0x133d'}
----------------------------------
Block 0x133a
0x133b: v133b = DIV v1322 v118b
0x133c: v133c = EQ v133b v118c(0x1900)
----------------------------------

Begin block 0x133d
prev = {'0x133a', '0x131c'}, next = {'0x1344', '0x1345'}
----------------------------------
Block 0x133d
0x133d_0x0: v133d_0 = PHI v1328 v133c
0x133e: v133e = ISZERO v133d_0
0x133f: v133f = ISZERO v133e
0x1340: v1340(0x1345) = CONST 
0x1343: JUMPI v1340(0x1345) v133f
----------------------------------

Begin block 0x1344
prev = {'0x133d'}, next = {}
----------------------------------
Block 0x1344
0x1344: THROW 
----------------------------------

Begin block 0x1345
prev = {'0x133d'}, next = {'0x1349'}
----------------------------------
Block 0x1345
----------------------------------

Begin block 0x1349
prev = {'0x1345'}, next = {'0x1193'}
----------------------------------
Block 0x1349
0x134f: JUMP v1188(0x1193)
----------------------------------

Begin block 0x1350
prev = {'0x1193'}, next = {'0x1363', '0x1368'}
----------------------------------
Block 0x1350
0x1351: v1351(0x0) = CONST 
0x1356: v1356 = ADD v119b v1322
0x135b: v135b = LT v1356 v119b
0x135c: v135c = ISZERO v135b
0x135e: v135e = ISZERO v135c
0x135f: v135f(0x1368) = CONST 
0x1362: JUMPI v135f(0x1368) v135e
----------------------------------

Begin block 0x1363
prev = {'0x1350'}, next = {'0x1368'}
----------------------------------
Block 0x1363
0x1366: v1366 = LT v1356 v1322
0x1367: v1367 = ISZERO v1366
----------------------------------

Begin block 0x1368
prev = {'0x1350', '0x1363'}, next = {'0x136f', '0x1370'}
----------------------------------
Block 0x1368
0x1368_0x0: v1368_0 = PHI v135c v1367
0x1369: v1369 = ISZERO v1368_0
0x136a: v136a = ISZERO v1369
0x136b: v136b(0x1370) = CONST 
0x136e: JUMPI v136b(0x1370) v136a
----------------------------------

Begin block 0x136f
prev = {'0x1368'}, next = {}
----------------------------------
Block 0x136f
0x136f: THROW 
----------------------------------

Begin block 0x1370
prev = {'0x1368'}, next = {'0x1374'}
----------------------------------
Block 0x1370
----------------------------------

Begin block 0x1374
prev = {'0x1370'}, next = {'0x11a1'}
----------------------------------
Block 0x1374
0x137a: JUMP v1196(0x11a1)
----------------------------------

Begin block 0x13cc
prev = {'0xb'}, next = {}
----------------------------------
Block 0x13cc
0x13cd: v13cd(0x12b) = CONST 
0x13ce: CALLPRIVATE v13cd(0x12b)
----------------------------------

Begin block 0x13cf
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x13cf
0x13d0: v13d0(0x180) = CONST 
0x13d1: CALLPRIVATE v13d0(0x180)
----------------------------------

Begin block 0x13d2
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x13d2
0x13d3: v13d3(0x20f) = CONST 
0x13d4: CALLPRIVATE v13d3(0x20f)
----------------------------------

Begin block 0x13d5
prev = {'0x55'}, next = {}
----------------------------------
Block 0x13d5
0x13d6: v13d6(0x269) = CONST 
0x13d7: CALLPRIVATE v13d6(0x269)
----------------------------------

Begin block 0x13d8
prev = {'0x60'}, next = {}
----------------------------------
Block 0x13d8
0x13d9: v13d9(0x292) = CONST 
0x13da: CALLPRIVATE v13d9(0x292)
----------------------------------

Begin block 0x13db
prev = {'0x6b'}, next = {}
----------------------------------
Block 0x13db
0x13dc: v13dc(0x2bb) = CONST 
0x13dd: CALLPRIVATE v13dc(0x2bb)
----------------------------------

Begin block 0x13de
prev = {'0x76'}, next = {}
----------------------------------
Block 0x13de
0x13df: v13df(0x334) = CONST 
0x13e0: CALLPRIVATE v13df(0x334)
----------------------------------

Begin block 0x13e1
prev = {'0x81'}, next = {}
----------------------------------
Block 0x13e1
0x13e2: v13e2(0x35d) = CONST 
0x13e3: CALLPRIVATE v13e2(0x35d)
----------------------------------

Begin block 0x13e4
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x13e4
0x13e5: v13e5(0x386) = CONST 
0x13e6: CALLPRIVATE v13e5(0x386)
----------------------------------

Begin block 0x13e7
prev = {'0x97'}, next = {}
----------------------------------
Block 0x13e7
0x13e8: v13e8(0x39b) = CONST 
0x13e9: CALLPRIVATE v13e8(0x39b)
----------------------------------

Begin block 0x13ea
prev = {'0xa2'}, next = {}
----------------------------------
Block 0x13ea
0x13eb: v13eb(0x42a) = CONST 
0x13ec: CALLPRIVATE v13eb(0x42a)
----------------------------------

Begin block 0x13ed
prev = {'0xad'}, next = {}
----------------------------------
Block 0x13ed
0x13ee: v13ee(0x43f) = CONST 
0x13ef: CALLPRIVATE v13ee(0x43f)
----------------------------------

Begin block 0x13f0
prev = {'0xb8'}, next = {}
----------------------------------
Block 0x13f0
0x13f1: v13f1(0x468) = CONST 
0x13f2: CALLPRIVATE v13f1(0x468)
----------------------------------

Begin block 0x13f3
prev = {'0xc3'}, next = {}
----------------------------------
Block 0x13f3
0x13f4: v13f4(0x4b5) = CONST 
0x13f5: CALLPRIVATE v13f4(0x4b5)
----------------------------------

Begin block 0x13f6
prev = {'0xce'}, next = {}
----------------------------------
Block 0x13f6
0x13f7: v13f7(0x4e2) = CONST 
0x13f8: CALLPRIVATE v13f7(0x4e2)
----------------------------------

Begin block 0x13f9
prev = {'0xd9'}, next = {}
----------------------------------
Block 0x13f9
0x13fa: v13fa(0x50b) = CONST 
0x13fb: CALLPRIVATE v13fa(0x50b)
----------------------------------

Begin block 0x13fc
prev = {'0xe4'}, next = {}
----------------------------------
Block 0x13fc
0x13fd: v13fd(0x59a) = CONST 
0x13fe: CALLPRIVATE v13fd(0x59a)
----------------------------------

Begin block 0x13ff
prev = {'0xef'}, next = {}
----------------------------------
Block 0x13ff
0x1400: v1400(0x5ef) = CONST 
0x1401: CALLPRIVATE v1400(0x5ef)
----------------------------------

Begin block 0x1402
prev = {'0xfa'}, next = {}
----------------------------------
Block 0x1402
0x1403: v1403(0x649) = CONST 
0x1404: CALLPRIVATE v1403(0x649)
----------------------------------

Begin block 0x1405
prev = {'0x105'}, next = {}
----------------------------------
Block 0x1405
0x1406: v1406(0x653) = CONST 
0x1407: CALLPRIVATE v1406(0x653)
----------------------------------

Begin block 0x1408
prev = {'0x110'}, next = {}
----------------------------------
Block 0x1408
0x1409: v1409(0x67c) = CONST 
0x140a: CALLPRIVATE v1409(0x67c)
----------------------------------

Begin block 0x140b
prev = {'0x11b'}, next = {}
----------------------------------
Block 0x140b
0x140c: v140c(0x6a5) = CONST 
0x140d: CALLPRIVATE v140c(0x6a5)
----------------------------------
