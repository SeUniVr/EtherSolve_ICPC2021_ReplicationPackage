
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0xd27', '0x1a'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0xd0d: vd0d(0xd27) = CONST 
0xd0e: JUMPI vd0d(0xd27) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x2b', '0x71'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x39509351) = CONST 
0x26: v26 = GT v21(0x39509351) v1f
0x27: v27(0x71) = CONST 
0x2a: JUMPI v27(0x71) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0xd3c', '0x36'}
----------------------------------
Block 0x2b
0x2c: v2c(0x39509351) = CONST 
0x31: v31 = EQ v2c(0x39509351) v1f
0xd0f: vd0f(0xd3c) = CONST 
0xd10: JUMPI vd0f(0xd3c) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x41', '0xd3f'}
----------------------------------
Block 0x36
0x37: v37(0x70a08231) = CONST 
0x3c: v3c = EQ v37(0x70a08231) v1f
0xd11: vd11(0xd3f) = CONST 
0xd12: JUMPI vd11(0xd3f) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0xd42', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95d89b41) = CONST 
0x47: v47 = EQ v42(0x95d89b41) v1f
0xd13: vd13(0xd42) = CONST 
0xd14: JUMPI vd13(0xd42) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0xd45'}
----------------------------------
Block 0x4c
0x4d: v4d(0xa457c2d7) = CONST 
0x52: v52 = EQ v4d(0xa457c2d7) v1f
0xd15: vd15(0xd45) = CONST 
0xd16: JUMPI vd15(0xd45) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x62', '0xd48'}
----------------------------------
Block 0x57
0x58: v58(0xa9059cbb) = CONST 
0x5d: v5d = EQ v58(0xa9059cbb) v1f
0xd17: vd17(0xd48) = CONST 
0xd18: JUMPI vd17(0xd48) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0xd4b', '0x6d'}
----------------------------------
Block 0x62
0x63: v63(0xdd62ed3e) = CONST 
0x68: v68 = EQ v63(0xdd62ed3e) v1f
0xd19: vd19(0xd4b) = CONST 
0xd1a: JUMPI vd19(0xd4b) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0xb40x0'}
----------------------------------
Block 0x6d
0x6d: v6d(0xb4) = CONST 
0x70: JUMP v6d(0xb4)
----------------------------------

Begin block 0x71
prev = {'0x1a'}, next = {'0x7d', '0xd2a'}
----------------------------------
Block 0x71
0x73: v73(0x6fdde03) = CONST 
0x78: v78 = EQ v73(0x6fdde03) v1f
0xd1b: vd1b(0xd2a) = CONST 
0xd1c: JUMPI vd1b(0xd2a) v78
----------------------------------

Begin block 0x7d
prev = {'0x71'}, next = {'0xd2d', '0x88'}
----------------------------------
Block 0x7d
0x7e: v7e(0x95ea7b3) = CONST 
0x83: v83 = EQ v7e(0x95ea7b3) v1f
0xd1d: vd1d(0xd2d) = CONST 
0xd1e: JUMPI vd1d(0xd2d) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0xd30', '0x93'}
----------------------------------
Block 0x88
0x89: v89(0x18160ddd) = CONST 
0x8e: v8e = EQ v89(0x18160ddd) v1f
0xd1f: vd1f(0xd30) = CONST 
0xd20: JUMPI vd1f(0xd30) v8e
----------------------------------

Begin block 0x93
prev = {'0x88'}, next = {'0x9e', '0xd33'}
----------------------------------
Block 0x93
0x94: v94(0x23b872dd) = CONST 
0x99: v99 = EQ v94(0x23b872dd) v1f
0xd21: vd21(0xd33) = CONST 
0xd22: JUMPI vd21(0xd33) v99
----------------------------------

Begin block 0x9e
prev = {'0x93'}, next = {'0xd36', '0xa9'}
----------------------------------
Block 0x9e
0x9f: v9f(0x313ce567) = CONST 
0xa4: va4 = EQ v9f(0x313ce567) v1f
0xd23: vd23(0xd36) = CONST 
0xd24: JUMPI vd23(0xd36) va4
----------------------------------

Begin block 0xa9
prev = {'0x9e'}, next = {'0xd27', '0xd39'}
----------------------------------
Block 0xa9
0xaa: vaa(0x378dc3dc) = CONST 
0xaf: vaf = EQ vaa(0x378dc3dc) v1f
0xd25: vd25(0xd39) = CONST 
0xd26: JUMPI vd25(0xd39) vaf
----------------------------------

Begin block 0xb4
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xb4
0xb5: vb5(0x0) = CONST 
0xb8: REVERT vb5(0x0) vb5(0x0)
----------------------------------

Begin block 0xb40x0
prev = {'0xd27', '0x6d'}, next = {}
----------------------------------
Block 0xb40x0
0xb50x0: v0b5(0x0) = CONST 
0xb80x0: REVERT v0b5(0x0) v0b5(0x0)
----------------------------------

Begin block 0xb9
prev = {}, next = {'0x50d'}
----------------------------------
function name()()
Block 0xb9
0xba: vba(0xc1) = CONST 
0xbd: vbd(0x50d) = CONST 
0xc0: JUMP vbd(0x50d)
----------------------------------

Begin block 0xc1
prev = {'0x5a5'}, next = {'0xe6'}
----------------------------------
Block 0xc1
0xc2: vc2(0x40) = CONST 
0xc4: vc4 = MLOAD vc2(0x40)
0xc7: vc7(0x20) = CONST 
0xc9: vc9 = ADD vc7(0x20) vc4
0xcc: vcc = SUB vc9 vc4
0xce: MSTORE vc4 vcc
0xd2: vd2 = MLOAD v534
0xd4: MSTORE vc9 vd2
0xd5: vd5(0x20) = CONST 
0xd7: vd7 = ADD vd5(0x20) vc9
0xdb: vdb = MLOAD v534
0xdd: vdd(0x20) = CONST 
0xdf: vdf = ADD vdd(0x20) v534
0xe4: ve4(0x0) = CONST 
----------------------------------

Begin block 0xe6
prev = {'0xc1', '0xef'}, next = {'0x101', '0xef'}
----------------------------------
Block 0xe6
0xe6_0x0: ve6_0 = PHI ve4(0x0) vfa
0xe9: ve9 = LT ve6_0 vdb
0xea: vea = ISZERO ve9
0xeb: veb(0x101) = CONST 
0xee: JUMPI veb(0x101) vea
----------------------------------

Begin block 0xef
prev = {'0xe6'}, next = {'0xe6'}
----------------------------------
Block 0xef
0xef_0x0: vef_0 = PHI ve4(0x0) vfa
0xf1: vf1 = ADD vdf vef_0
0xf2: vf2 = MLOAD vf1
0xf5: vf5 = ADD vd7 vef_0
0xf6: MSTORE vf5 vf2
0xf7: vf7(0x20) = CONST 
0xfa: vfa = ADD vef_0 vf7(0x20)
0xfd: vfd(0xe6) = CONST 
0x100: JUMP vfd(0xe6)
----------------------------------

Begin block 0x101
prev = {'0xe6'}, next = {'0x115', '0x12e'}
----------------------------------
Block 0x101
0x10a: v10a = ADD vdb vd7
0x10c: v10c(0x1f) = CONST 
0x10e: v10e = AND v10c(0x1f) vdb
0x110: v110 = ISZERO v10e
0x111: v111(0x12e) = CONST 
0x114: JUMPI v111(0x12e) v110
----------------------------------

Begin block 0x115
prev = {'0x101'}, next = {'0x12e'}
----------------------------------
Block 0x115
0x117: v117 = SUB v10a v10e
0x119: v119 = MLOAD v117
0x11a: v11a(0x1) = CONST 
0x11d: v11d(0x20) = CONST 
0x11f: v11f = SUB v11d(0x20) v10e
0x120: v120(0x100) = CONST 
0x123: v123 = EXP v120(0x100) v11f
0x124: v124 = SUB v123 v11a(0x1)
0x125: v125 = NOT v124
0x126: v126 = AND v125 v119
0x128: MSTORE v117 v126
0x129: v129(0x20) = CONST 
0x12b: v12b = ADD v129(0x20) v117
----------------------------------

Begin block 0x12e
prev = {'0x115', '0x101'}, next = {}
----------------------------------
Block 0x12e
0x12e_0x1: v12e_1 = PHI v10a v12b
0x134: v134(0x40) = CONST 
0x136: v136 = MLOAD v134(0x40)
0x139: v139 = SUB v12e_1 v136
0x13b: RETURN v136 v139
----------------------------------

Begin block 0x13c
prev = {}, next = {'0x14e', '0x152'}
----------------------------------
function approve(address,uint256)()
Block 0x13c
0x13d: v13d(0x188) = CONST 
0x140: v140(0x4) = CONST 
0x143: v143 = CALLDATASIZE 
0x144: v144 = SUB v143 v140(0x4)
0x145: v145(0x40) = CONST 
0x148: v148 = LT v144 v145(0x40)
0x149: v149 = ISZERO v148
0x14a: v14a(0x152) = CONST 
0x14d: JUMPI v14a(0x152) v149
----------------------------------

Begin block 0x14e
prev = {'0x13c'}, next = {}
----------------------------------
Block 0x14e
0x14e: v14e(0x0) = CONST 
0x151: REVERT v14e(0x0) v14e(0x0)
----------------------------------

Begin block 0x152
prev = {'0x13c'}, next = {'0x5af'}
----------------------------------
Block 0x152
0x154: v154 = ADD v140(0x4) v144
0x158: v158 = CALLDATALOAD v140(0x4)
0x159: v159(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16e: v16e = AND v159(0xffffffffffffffffffffffffffffffffffffffff) v158
0x170: v170(0x20) = CONST 
0x172: v172 = ADD v170(0x20) v140(0x4)
0x178: v178 = CALLDATALOAD v172
0x17a: v17a(0x20) = CONST 
0x17c: v17c = ADD v17a(0x20) v172
0x184: v184(0x5af) = CONST 
0x187: JUMP v184(0x5af)
----------------------------------

Begin block 0x188
prev = {'0x5bc'}, next = {}
----------------------------------
Block 0x188
0x189: v189(0x40) = CONST 
0x18b: v18b = MLOAD v189(0x40)
0x18e: v18e = ISZERO v5bd(0x1)
0x18f: v18f = ISZERO v18e
0x190: v190 = ISZERO v18f
0x191: v191 = ISZERO v190
0x193: MSTORE v18b v191
0x194: v194(0x20) = CONST 
0x196: v196 = ADD v194(0x20) v18b
0x19a: v19a(0x40) = CONST 
0x19c: v19c = MLOAD v19a(0x40)
0x19f: v19f = SUB v196 v19c
0x1a1: RETURN v19c v19f
----------------------------------

Begin block 0x1a2
prev = {}, next = {'0x5c6'}
----------------------------------
function totalSupply()()
Block 0x1a2
0x1a3: v1a3(0x1aa) = CONST 
0x1a6: v1a6(0x5c6) = CONST 
0x1a9: JUMP v1a6(0x5c6)
----------------------------------

Begin block 0x1aa
prev = {'0x5c6'}, next = {}
----------------------------------
Block 0x1aa
0x1ab: v1ab(0x40) = CONST 
0x1ad: v1ad = MLOAD v1ab(0x40)
0x1b1: MSTORE v1ad v5cb
0x1b2: v1b2(0x20) = CONST 
0x1b4: v1b4 = ADD v1b2(0x20) v1ad
0x1b8: v1b8(0x40) = CONST 
0x1ba: v1ba = MLOAD v1b8(0x40)
0x1bd: v1bd = SUB v1b4 v1ba
0x1bf: RETURN v1ba v1bd
----------------------------------

Begin block 0x1c0
prev = {}, next = {'0x1d2', '0x1d6'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1c0
0x1c1: v1c1(0x22c) = CONST 
0x1c4: v1c4(0x4) = CONST 
0x1c7: v1c7 = CALLDATASIZE 
0x1c8: v1c8 = SUB v1c7 v1c4(0x4)
0x1c9: v1c9(0x60) = CONST 
0x1cc: v1cc = LT v1c8 v1c9(0x60)
0x1cd: v1cd = ISZERO v1cc
0x1ce: v1ce(0x1d6) = CONST 
0x1d1: JUMPI v1ce(0x1d6) v1cd
----------------------------------

Begin block 0x1d2
prev = {'0x1c0'}, next = {}
----------------------------------
Block 0x1d2
0x1d2: v1d2(0x0) = CONST 
0x1d5: REVERT v1d2(0x0) v1d2(0x0)
----------------------------------

Begin block 0x1d6
prev = {'0x1c0'}, next = {'0x5d0'}
----------------------------------
Block 0x1d6
0x1d8: v1d8 = ADD v1c4(0x4) v1c8
0x1dc: v1dc = CALLDATALOAD v1c4(0x4)
0x1dd: v1dd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f2: v1f2 = AND v1dd(0xffffffffffffffffffffffffffffffffffffffff) v1dc
0x1f4: v1f4(0x20) = CONST 
0x1f6: v1f6 = ADD v1f4(0x20) v1c4(0x4)
0x1fc: v1fc = CALLDATALOAD v1f6
0x1fd: v1fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x212: v212 = AND v1fd(0xffffffffffffffffffffffffffffffffffffffff) v1fc
0x214: v214(0x20) = CONST 
0x216: v216 = ADD v214(0x20) v1f6
0x21c: v21c = CALLDATALOAD v216
0x21e: v21e(0x20) = CONST 
0x220: v220 = ADD v21e(0x20) v216
0x228: v228(0x5d0) = CONST 
0x22b: JUMP v228(0x5d0)
----------------------------------

Begin block 0x22c
prev = {'0x676'}, next = {}
----------------------------------
Block 0x22c
0x22d: v22d(0x40) = CONST 
0x22f: v22f = MLOAD v22d(0x40)
0x232: v232 = ISZERO v677(0x1)
0x233: v233 = ISZERO v232
0x234: v234 = ISZERO v233
0x235: v235 = ISZERO v234
0x237: MSTORE v22f v235
0x238: v238(0x20) = CONST 
0x23a: v23a = ADD v238(0x20) v22f
0x23e: v23e(0x40) = CONST 
0x240: v240 = MLOAD v23e(0x40)
0x243: v243 = SUB v23a v240
0x245: RETURN v240 v243
----------------------------------

Begin block 0x246
prev = {}, next = {'0x681'}
----------------------------------
function decimals()()
Block 0x246
0x247: v247(0x24e) = CONST 
0x24a: v24a(0x681) = CONST 
0x24d: JUMP v24a(0x681)
----------------------------------

Begin block 0x24e
prev = {'0x681'}, next = {}
----------------------------------
Block 0x24e
0x24f: v24f(0x40) = CONST 
0x251: v251 = MLOAD v24f(0x40)
0x254: v254(0xff) = CONST 
0x256: v256 = AND v254(0xff) v693
0x257: v257(0xff) = CONST 
0x259: v259 = AND v257(0xff) v256
0x25b: MSTORE v251 v259
0x25c: v25c(0x20) = CONST 
0x25e: v25e = ADD v25c(0x20) v251
0x262: v262(0x40) = CONST 
0x264: v264 = MLOAD v262(0x40)
0x267: v267 = SUB v25e v264
0x269: RETURN v264 v267
----------------------------------

Begin block 0x26a
prev = {}, next = {'0x698'}
----------------------------------
function initialSupply()()
Block 0x26a
0x26b: v26b(0x272) = CONST 
0x26e: v26e(0x698) = CONST 
0x271: JUMP v26e(0x698)
----------------------------------

Begin block 0x272
prev = {'0x698'}, next = {}
----------------------------------
Block 0x272
0x273: v273(0x40) = CONST 
0x275: v275 = MLOAD v273(0x40)
0x279: MSTORE v275 v69b
0x27a: v27a(0x20) = CONST 
0x27c: v27c = ADD v27a(0x20) v275
0x280: v280(0x40) = CONST 
0x282: v282 = MLOAD v280(0x40)
0x285: v285 = SUB v27c v282
0x287: RETURN v282 v285
----------------------------------

Begin block 0x288
prev = {}, next = {'0x29e', '0x29a'}
----------------------------------
function increaseAllowance(address,uint256)()
Block 0x288
0x289: v289(0x2d4) = CONST 
0x28c: v28c(0x4) = CONST 
0x28f: v28f = CALLDATASIZE 
0x290: v290 = SUB v28f v28c(0x4)
0x291: v291(0x40) = CONST 
0x294: v294 = LT v290 v291(0x40)
0x295: v295 = ISZERO v294
0x296: v296(0x29e) = CONST 
0x299: JUMPI v296(0x29e) v295
----------------------------------

Begin block 0x29a
prev = {'0x288'}, next = {}
----------------------------------
Block 0x29a
0x29a: v29a(0x0) = CONST 
0x29d: REVERT v29a(0x0) v29a(0x0)
----------------------------------

Begin block 0x29e
prev = {'0x288'}, next = {'0x69e'}
----------------------------------
Block 0x29e
0x2a0: v2a0 = ADD v28c(0x4) v290
0x2a4: v2a4 = CALLDATALOAD v28c(0x4)
0x2a5: v2a5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2ba: v2ba = AND v2a5(0xffffffffffffffffffffffffffffffffffffffff) v2a4
0x2bc: v2bc(0x20) = CONST 
0x2be: v2be = ADD v2bc(0x20) v28c(0x4)
0x2c4: v2c4 = CALLDATALOAD v2be
0x2c6: v2c6(0x20) = CONST 
0x2c8: v2c8 = ADD v2c6(0x20) v2be
0x2d0: v2d0(0x69e) = CONST 
0x2d3: JUMP v2d0(0x69e)
----------------------------------

Begin block 0x2d4
prev = {'0x739'}, next = {}
----------------------------------
Block 0x2d4
0x2d5: v2d5(0x40) = CONST 
0x2d7: v2d7 = MLOAD v2d5(0x40)
0x2da: v2da = ISZERO v73a(0x1)
0x2db: v2db = ISZERO v2da
0x2dc: v2dc = ISZERO v2db
0x2dd: v2dd = ISZERO v2dc
0x2df: MSTORE v2d7 v2dd
0x2e0: v2e0(0x20) = CONST 
0x2e2: v2e2 = ADD v2e0(0x20) v2d7
0x2e6: v2e6(0x40) = CONST 
0x2e8: v2e8 = MLOAD v2e6(0x40)
0x2eb: v2eb = SUB v2e2 v2e8
0x2ed: RETURN v2e8 v2eb
----------------------------------

Begin block 0x2ee
prev = {}, next = {'0x300', '0x304'}
----------------------------------
function balanceOf(address)()
Block 0x2ee
0x2ef: v2ef(0x330) = CONST 
0x2f2: v2f2(0x4) = CONST 
0x2f5: v2f5 = CALLDATASIZE 
0x2f6: v2f6 = SUB v2f5 v2f2(0x4)
0x2f7: v2f7(0x20) = CONST 
0x2fa: v2fa = LT v2f6 v2f7(0x20)
0x2fb: v2fb = ISZERO v2fa
0x2fc: v2fc(0x304) = CONST 
0x2ff: JUMPI v2fc(0x304) v2fb
----------------------------------

Begin block 0x300
prev = {'0x2ee'}, next = {}
----------------------------------
Block 0x300
0x300: v300(0x0) = CONST 
0x303: REVERT v300(0x0) v300(0x0)
----------------------------------

Begin block 0x304
prev = {'0x2ee'}, next = {'0x743'}
----------------------------------
Block 0x304
0x306: v306 = ADD v2f2(0x4) v2f6
0x30a: v30a = CALLDATALOAD v2f2(0x4)
0x30b: v30b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x320: v320 = AND v30b(0xffffffffffffffffffffffffffffffffffffffff) v30a
0x322: v322(0x20) = CONST 
0x324: v324 = ADD v322(0x20) v2f2(0x4)
0x32c: v32c(0x743) = CONST 
0x32f: JUMP v32c(0x743)
----------------------------------

Begin block 0x330
prev = {'0x743'}, next = {}
----------------------------------
Block 0x330
0x331: v331(0x40) = CONST 
0x333: v333 = MLOAD v331(0x40)
0x337: MSTORE v333 v784
0x338: v338(0x20) = CONST 
0x33a: v33a = ADD v338(0x20) v333
0x33e: v33e(0x40) = CONST 
0x340: v340 = MLOAD v33e(0x40)
0x343: v343 = SUB v33a v340
0x345: RETURN v340 v343
----------------------------------

Begin block 0x346
prev = {}, next = {'0x78b'}
----------------------------------
function symbol()()
Block 0x346
0x347: v347(0x34e) = CONST 
0x34a: v34a(0x78b) = CONST 
0x34d: JUMP v34a(0x78b)
----------------------------------

Begin block 0x34e
prev = {'0x823'}, next = {'0x373'}
----------------------------------
Block 0x34e
0x34f: v34f(0x40) = CONST 
0x351: v351 = MLOAD v34f(0x40)
0x354: v354(0x20) = CONST 
0x356: v356 = ADD v354(0x20) v351
0x359: v359 = SUB v356 v351
0x35b: MSTORE v351 v359
0x35f: v35f = MLOAD v7b2
0x361: MSTORE v356 v35f
0x362: v362(0x20) = CONST 
0x364: v364 = ADD v362(0x20) v356
0x368: v368 = MLOAD v7b2
0x36a: v36a(0x20) = CONST 
0x36c: v36c = ADD v36a(0x20) v7b2
0x371: v371(0x0) = CONST 
----------------------------------

Begin block 0x373
prev = {'0x34e', '0x37c'}, next = {'0x38e', '0x37c'}
----------------------------------
Block 0x373
0x373_0x0: v373_0 = PHI v371(0x0) v387
0x376: v376 = LT v373_0 v368
0x377: v377 = ISZERO v376
0x378: v378(0x38e) = CONST 
0x37b: JUMPI v378(0x38e) v377
----------------------------------

Begin block 0x37c
prev = {'0x373'}, next = {'0x373'}
----------------------------------
Block 0x37c
0x37c_0x0: v37c_0 = PHI v371(0x0) v387
0x37e: v37e = ADD v36c v37c_0
0x37f: v37f = MLOAD v37e
0x382: v382 = ADD v364 v37c_0
0x383: MSTORE v382 v37f
0x384: v384(0x20) = CONST 
0x387: v387 = ADD v37c_0 v384(0x20)
0x38a: v38a(0x373) = CONST 
0x38d: JUMP v38a(0x373)
----------------------------------

Begin block 0x38e
prev = {'0x373'}, next = {'0x3a2', '0x3bb'}
----------------------------------
Block 0x38e
0x397: v397 = ADD v368 v364
0x399: v399(0x1f) = CONST 
0x39b: v39b = AND v399(0x1f) v368
0x39d: v39d = ISZERO v39b
0x39e: v39e(0x3bb) = CONST 
0x3a1: JUMPI v39e(0x3bb) v39d
----------------------------------

Begin block 0x3a2
prev = {'0x38e'}, next = {'0x3bb'}
----------------------------------
Block 0x3a2
0x3a4: v3a4 = SUB v397 v39b
0x3a6: v3a6 = MLOAD v3a4
0x3a7: v3a7(0x1) = CONST 
0x3aa: v3aa(0x20) = CONST 
0x3ac: v3ac = SUB v3aa(0x20) v39b
0x3ad: v3ad(0x100) = CONST 
0x3b0: v3b0 = EXP v3ad(0x100) v3ac
0x3b1: v3b1 = SUB v3b0 v3a7(0x1)
0x3b2: v3b2 = NOT v3b1
0x3b3: v3b3 = AND v3b2 v3a6
0x3b5: MSTORE v3a4 v3b3
0x3b6: v3b6(0x20) = CONST 
0x3b8: v3b8 = ADD v3b6(0x20) v3a4
----------------------------------

Begin block 0x3bb
prev = {'0x3a2', '0x38e'}, next = {}
----------------------------------
Block 0x3bb
0x3bb_0x1: v3bb_1 = PHI v397 v3b8
0x3c1: v3c1(0x40) = CONST 
0x3c3: v3c3 = MLOAD v3c1(0x40)
0x3c6: v3c6 = SUB v3bb_1 v3c3
0x3c8: RETURN v3c3 v3c6
----------------------------------

Begin block 0x3c9
prev = {}, next = {'0x3db', '0x3df'}
----------------------------------
function decreaseAllowance(address,uint256)()
Block 0x3c9
0x3ca: v3ca(0x415) = CONST 
0x3cd: v3cd(0x4) = CONST 
0x3d0: v3d0 = CALLDATASIZE 
0x3d1: v3d1 = SUB v3d0 v3cd(0x4)
0x3d2: v3d2(0x40) = CONST 
0x3d5: v3d5 = LT v3d1 v3d2(0x40)
0x3d6: v3d6 = ISZERO v3d5
0x3d7: v3d7(0x3df) = CONST 
0x3da: JUMPI v3d7(0x3df) v3d6
----------------------------------

Begin block 0x3db
prev = {'0x3c9'}, next = {}
----------------------------------
Block 0x3db
0x3db: v3db(0x0) = CONST 
0x3de: REVERT v3db(0x0) v3db(0x0)
----------------------------------

Begin block 0x3df
prev = {'0x3c9'}, next = {'0x82d'}
----------------------------------
Block 0x3df
0x3e1: v3e1 = ADD v3cd(0x4) v3d1
0x3e5: v3e5 = CALLDATALOAD v3cd(0x4)
0x3e6: v3e6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3fb: v3fb = AND v3e6(0xffffffffffffffffffffffffffffffffffffffff) v3e5
0x3fd: v3fd(0x20) = CONST 
0x3ff: v3ff = ADD v3fd(0x20) v3cd(0x4)
0x405: v405 = CALLDATALOAD v3ff
0x407: v407(0x20) = CONST 
0x409: v409 = ADD v407(0x20) v3ff
0x411: v411(0x82d) = CONST 
0x414: JUMP v411(0x82d)
----------------------------------

Begin block 0x415
prev = {'0x8c8'}, next = {}
----------------------------------
Block 0x415
0x416: v416(0x40) = CONST 
0x418: v418 = MLOAD v416(0x40)
0x41b: v41b = ISZERO v8c9(0x1)
0x41c: v41c = ISZERO v41b
0x41d: v41d = ISZERO v41c
0x41e: v41e = ISZERO v41d
0x420: MSTORE v418 v41e
0x421: v421(0x20) = CONST 
0x423: v423 = ADD v421(0x20) v418
0x427: v427(0x40) = CONST 
0x429: v429 = MLOAD v427(0x40)
0x42c: v42c = SUB v423 v429
0x42e: RETURN v429 v42c
----------------------------------

Begin block 0x42f
prev = {}, next = {'0x441', '0x445'}
----------------------------------
function transfer(address,uint256)()
Block 0x42f
0x430: v430(0x47b) = CONST 
0x433: v433(0x4) = CONST 
0x436: v436 = CALLDATASIZE 
0x437: v437 = SUB v436 v433(0x4)
0x438: v438(0x40) = CONST 
0x43b: v43b = LT v437 v438(0x40)
0x43c: v43c = ISZERO v43b
0x43d: v43d(0x445) = CONST 
0x440: JUMPI v43d(0x445) v43c
----------------------------------

Begin block 0x441
prev = {'0x42f'}, next = {}
----------------------------------
Block 0x441
0x441: v441(0x0) = CONST 
0x444: REVERT v441(0x0) v441(0x0)
----------------------------------

Begin block 0x445
prev = {'0x42f'}, next = {'0x8d2'}
----------------------------------
Block 0x445
0x447: v447 = ADD v433(0x4) v437
0x44b: v44b = CALLDATALOAD v433(0x4)
0x44c: v44c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x461: v461 = AND v44c(0xffffffffffffffffffffffffffffffffffffffff) v44b
0x463: v463(0x20) = CONST 
0x465: v465 = ADD v463(0x20) v433(0x4)
0x46b: v46b = CALLDATALOAD v465
0x46d: v46d(0x20) = CONST 
0x46f: v46f = ADD v46d(0x20) v465
0x477: v477(0x8d2) = CONST 
0x47a: JUMP v477(0x8d2)
----------------------------------

Begin block 0x47b
prev = {'0x8df'}, next = {}
----------------------------------
Block 0x47b
0x47c: v47c(0x40) = CONST 
0x47e: v47e = MLOAD v47c(0x40)
0x481: v481 = ISZERO v8e0(0x1)
0x482: v482 = ISZERO v481
0x483: v483 = ISZERO v482
0x484: v484 = ISZERO v483
0x486: MSTORE v47e v484
0x487: v487(0x20) = CONST 
0x489: v489 = ADD v487(0x20) v47e
0x48d: v48d(0x40) = CONST 
0x48f: v48f = MLOAD v48d(0x40)
0x492: v492 = SUB v489 v48f
0x494: RETURN v48f v492
----------------------------------

Begin block 0x495
prev = {}, next = {'0x4ab', '0x4a7'}
----------------------------------
function allowance(address,address)()
Block 0x495
0x496: v496(0x4f7) = CONST 
0x499: v499(0x4) = CONST 
0x49c: v49c = CALLDATASIZE 
0x49d: v49d = SUB v49c v499(0x4)
0x49e: v49e(0x40) = CONST 
0x4a1: v4a1 = LT v49d v49e(0x40)
0x4a2: v4a2 = ISZERO v4a1
0x4a3: v4a3(0x4ab) = CONST 
0x4a6: JUMPI v4a3(0x4ab) v4a2
----------------------------------

Begin block 0x4a7
prev = {'0x495'}, next = {}
----------------------------------
Block 0x4a7
0x4a7: v4a7(0x0) = CONST 
0x4aa: REVERT v4a7(0x0) v4a7(0x0)
----------------------------------

Begin block 0x4ab
prev = {'0x495'}, next = {'0x8e9'}
----------------------------------
Block 0x4ab
0x4ad: v4ad = ADD v499(0x4) v49d
0x4b1: v4b1 = CALLDATALOAD v499(0x4)
0x4b2: v4b2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4c7: v4c7 = AND v4b2(0xffffffffffffffffffffffffffffffffffffffff) v4b1
0x4c9: v4c9(0x20) = CONST 
0x4cb: v4cb = ADD v4c9(0x20) v499(0x4)
0x4d1: v4d1 = CALLDATALOAD v4cb
0x4d2: v4d2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4e7: v4e7 = AND v4d2(0xffffffffffffffffffffffffffffffffffffffff) v4d1
0x4e9: v4e9(0x20) = CONST 
0x4eb: v4eb = ADD v4e9(0x20) v4cb
0x4f3: v4f3(0x8e9) = CONST 
0x4f6: JUMP v4f3(0x8e9)
----------------------------------

Begin block 0x4f7
prev = {'0x8e9'}, next = {}
----------------------------------
Block 0x4f7
0x4f8: v4f8(0x40) = CONST 
0x4fa: v4fa = MLOAD v4f8(0x40)
0x4fe: MSTORE v4fa v968
0x4ff: v4ff(0x20) = CONST 
0x501: v501 = ADD v4ff(0x20) v4fa
0x505: v505(0x40) = CONST 
0x507: v507 = MLOAD v505(0x40)
0x50a: v50a = SUB v501 v507
0x50c: RETURN v507 v50a
----------------------------------

Begin block 0x50d
prev = {'0xb9'}, next = {'0x5a5', '0x55f'}
----------------------------------
Block 0x50d
0x50e: v50e(0x60) = CONST 
0x510: v510(0x3) = CONST 
0x513: v513 = SLOAD v510(0x3)
0x514: v514(0x1) = CONST 
0x517: v517(0x1) = CONST 
0x519: v519 = AND v517(0x1) v513
0x51a: v51a = ISZERO v519
0x51b: v51b(0x100) = CONST 
0x51e: v51e = MUL v51b(0x100) v51a
0x51f: v51f = SUB v51e v514(0x1)
0x520: v520 = AND v51f v513
0x521: v521(0x2) = CONST 
0x524: v524 = DIV v520 v521(0x2)
0x526: v526(0x1f) = CONST 
0x528: v528 = ADD v526(0x1f) v524
0x529: v529(0x20) = CONST 
0x52d: v52d = DIV v528 v529(0x20)
0x52e: v52e = MUL v52d v529(0x20)
0x52f: v52f(0x20) = CONST 
0x531: v531 = ADD v52f(0x20) v52e
0x532: v532(0x40) = CONST 
0x534: v534 = MLOAD v532(0x40)
0x537: v537 = ADD v534 v531
0x538: v538(0x40) = CONST 
0x53a: MSTORE v538(0x40) v537
0x541: MSTORE v534 v524
0x542: v542(0x20) = CONST 
0x544: v544 = ADD v542(0x20) v534
0x547: v547 = SLOAD v510(0x3)
0x548: v548(0x1) = CONST 
0x54b: v54b(0x1) = CONST 
0x54d: v54d = AND v54b(0x1) v547
0x54e: v54e = ISZERO v54d
0x54f: v54f(0x100) = CONST 
0x552: v552 = MUL v54f(0x100) v54e
0x553: v553 = SUB v552 v548(0x1)
0x554: v554 = AND v553 v547
0x555: v555(0x2) = CONST 
0x558: v558 = DIV v554 v555(0x2)
0x55a: v55a = ISZERO v558
0x55b: v55b(0x5a5) = CONST 
0x55e: JUMPI v55b(0x5a5) v55a
----------------------------------

Begin block 0x55f
prev = {'0x50d'}, next = {'0x567', '0x57a'}
----------------------------------
Block 0x55f
0x560: v560(0x1f) = CONST 
0x562: v562 = LT v560(0x1f) v558
0x563: v563(0x57a) = CONST 
0x566: JUMPI v563(0x57a) v562
----------------------------------

Begin block 0x567
prev = {'0x55f'}, next = {'0x5a5'}
----------------------------------
Block 0x567
0x567: v567(0x100) = CONST 
0x56c: v56c = SLOAD v510(0x3)
0x56d: v56d = DIV v56c v567(0x100)
0x56e: v56e = MUL v56d v567(0x100)
0x570: MSTORE v544 v56e
0x572: v572(0x20) = CONST 
0x574: v574 = ADD v572(0x20) v544
0x576: v576(0x5a5) = CONST 
0x579: JUMP v576(0x5a5)
----------------------------------

Begin block 0x57a
prev = {'0x55f'}, next = {'0x588'}
----------------------------------
Block 0x57a
0x57c: v57c = ADD v544 v558
0x57f: v57f(0x0) = CONST 
0x581: MSTORE v57f(0x0) v510(0x3)
0x582: v582(0x20) = CONST 
0x584: v584(0x0) = CONST 
0x586: v586 = SHA3 v584(0x0) v582(0x20)
----------------------------------

Begin block 0x588
prev = {'0x57a', '0x588'}, next = {'0x59c', '0x588'}
----------------------------------
Block 0x588
0x588_0x0: v588_0 = PHI v544 v594
0x588_0x1: v588_1 = PHI v586 v590
0x58a: v58a = SLOAD v588_1
0x58c: MSTORE v588_0 v58a
0x58e: v58e(0x1) = CONST 
0x590: v590 = ADD v58e(0x1) v588_1
0x592: v592(0x20) = CONST 
0x594: v594 = ADD v592(0x20) v588_0
0x597: v597 = GT v57c v594
0x598: v598(0x588) = CONST 
0x59b: JUMPI v598(0x588) v597
----------------------------------

Begin block 0x59c
prev = {'0x588'}, next = {'0x5a5'}
----------------------------------
Block 0x59c
0x59e: v59e = SUB v594 v57c
0x59f: v59f(0x1f) = CONST 
0x5a1: v5a1 = AND v59f(0x1f) v59e
0x5a3: v5a3 = ADD v57c v5a1
----------------------------------

Begin block 0x5a5
prev = {'0x567', '0x50d', '0x59c'}, next = {'0xc1'}
----------------------------------
Block 0x5a5
0x5ae: JUMP vba(0xc1)
----------------------------------

Begin block 0x5af
prev = {'0x152'}, next = {'0x5bc'}
----------------------------------
Block 0x5af
0x5b0: v5b0(0x0) = CONST 
0x5b2: v5b2(0x5bc) = CONST 
0x5b5: v5b5 = CALLER 
0x5b8: v5b8(0x970) = CONST 
0x5bb: CALLPRIVATE v5b8(0x970) v178 v16e v5b5 v5b2(0x5bc)
----------------------------------

Begin block 0x5bc
prev = {'0x5af'}, next = {'0x188'}
----------------------------------
Block 0x5bc
0x5bd: v5bd(0x1) = CONST 
0x5c5: JUMP v13d(0x188)
----------------------------------

Begin block 0x5c6
prev = {'0x1a2'}, next = {'0x1aa'}
----------------------------------
Block 0x5c6
0x5c7: v5c7(0x0) = CONST 
0x5c9: v5c9(0x2) = CONST 
0x5cb: v5cb = SLOAD v5c9(0x2)
0x5cf: JUMP v1a3(0x1aa)
----------------------------------

Begin block 0x5d0
prev = {'0x1d6'}, next = {'0x5dd'}
----------------------------------
Block 0x5d0
0x5d1: v5d1(0x0) = CONST 
0x5d3: v5d3(0x5dd) = CONST 
0x5d9: v5d9(0xacf) = CONST 
0x5dc: CALLPRIVATE v5d9(0xacf) v21c v212 v1f2 v5d3(0x5dd)
----------------------------------

Begin block 0x5dd
prev = {'0x5d0'}, next = {'0x671'}
----------------------------------
Block 0x5dd
0x5de: v5de(0x676) = CONST 
0x5e2: v5e2 = CALLER 
0x5e3: v5e3(0x671) = CONST 
0x5e7: v5e7(0x1) = CONST 
0x5e9: v5e9(0x0) = CONST 
0x5ec: v5ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x601: v601 = AND v5ec(0xffffffffffffffffffffffffffffffffffffffff) v1f2
0x602: v602(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x617: v617 = AND v602(0xffffffffffffffffffffffffffffffffffffffff) v601
0x619: MSTORE v5e9(0x0) v617
0x61a: v61a(0x20) = CONST 
0x61c: v61c(0x20) = ADD v61a(0x20) v5e9(0x0)
0x61f: MSTORE v61c(0x20) v5e7(0x1)
0x620: v620(0x20) = CONST 
0x622: v622(0x40) = ADD v620(0x20) v61c(0x20)
0x623: v623(0x0) = CONST 
0x625: v625 = SHA3 v623(0x0) v622(0x40)
0x626: v626(0x0) = CONST 
0x628: v628 = CALLER 
0x629: v629(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x63e: v63e = AND v629(0xffffffffffffffffffffffffffffffffffffffff) v628
0x63f: v63f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x654: v654 = AND v63f(0xffffffffffffffffffffffffffffffffffffffff) v63e
0x656: MSTORE v626(0x0) v654
0x657: v657(0x20) = CONST 
0x659: v659(0x20) = ADD v657(0x20) v626(0x0)
0x65c: MSTORE v659(0x20) v625
0x65d: v65d(0x20) = CONST 
0x65f: v65f(0x40) = ADD v65d(0x20) v659(0x20)
0x660: v660(0x0) = CONST 
0x662: v662 = SHA3 v660(0x0) v65f(0x40)
0x663: v663 = SLOAD v662
0x664: v664(0xc99) = CONST 
0x66a: v66a(0xffffffff) = CONST 
0x66f: v66f(0xc99) = AND v66a(0xffffffff) v664(0xc99)
0x670: v670_0 = CALLPRIVATE v66f(0xc99) v21c v663 v5e3(0x671)
----------------------------------

Begin block 0x671
prev = {'0x5dd'}, next = {'0x676'}
----------------------------------
Block 0x671
0x672: v672(0x970) = CONST 
0x675: CALLPRIVATE v672(0x970) v670_0 v5e2 v1f2 v5de(0x676)
----------------------------------

Begin block 0x676
prev = {'0x671'}, next = {'0x22c'}
----------------------------------
Block 0x676
0x677: v677(0x1) = CONST 
0x680: JUMP v1c1(0x22c)
----------------------------------

Begin block 0x681
prev = {'0x246'}, next = {'0x24e'}
----------------------------------
Block 0x681
0x682: v682(0x0) = CONST 
0x684: v684(0x5) = CONST 
0x686: v686(0x0) = CONST 
0x689: v689 = SLOAD v684(0x5)
0x68b: v68b(0x100) = CONST 
0x68e: v68e(0x1) = EXP v68b(0x100) v686(0x0)
0x690: v690 = DIV v689 v68e(0x1)
0x691: v691(0xff) = CONST 
0x693: v693 = AND v691(0xff) v690
0x697: JUMP v247(0x24e)
----------------------------------

Begin block 0x698
prev = {'0x26a'}, next = {'0x272'}
----------------------------------
Block 0x698
0x699: v699(0x9) = CONST 
0x69b: v69b = SLOAD v699(0x9)
0x69d: JUMP v26b(0x272)
----------------------------------

Begin block 0x69e
prev = {'0x29e'}, next = {'0x734'}
----------------------------------
Block 0x69e
0x69f: v69f(0x0) = CONST 
0x6a1: v6a1(0x739) = CONST 
0x6a4: v6a4 = CALLER 
0x6a6: v6a6(0x734) = CONST 
0x6aa: v6aa(0x1) = CONST 
0x6ac: v6ac(0x0) = CONST 
0x6ae: v6ae = CALLER 
0x6af: v6af(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c4: v6c4 = AND v6af(0xffffffffffffffffffffffffffffffffffffffff) v6ae
0x6c5: v6c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6da: v6da = AND v6c5(0xffffffffffffffffffffffffffffffffffffffff) v6c4
0x6dc: MSTORE v6ac(0x0) v6da
0x6dd: v6dd(0x20) = CONST 
0x6df: v6df(0x20) = ADD v6dd(0x20) v6ac(0x0)
0x6e2: MSTORE v6df(0x20) v6aa(0x1)
0x6e3: v6e3(0x20) = CONST 
0x6e5: v6e5(0x40) = ADD v6e3(0x20) v6df(0x20)
0x6e6: v6e6(0x0) = CONST 
0x6e8: v6e8 = SHA3 v6e6(0x0) v6e5(0x40)
0x6e9: v6e9(0x0) = CONST 
0x6ec: v6ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x701: v701 = AND v6ec(0xffffffffffffffffffffffffffffffffffffffff) v2ba
0x702: v702(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x717: v717 = AND v702(0xffffffffffffffffffffffffffffffffffffffff) v701
0x719: MSTORE v6e9(0x0) v717
0x71a: v71a(0x20) = CONST 
0x71c: v71c(0x20) = ADD v71a(0x20) v6e9(0x0)
0x71f: MSTORE v71c(0x20) v6e8
0x720: v720(0x20) = CONST 
0x722: v722(0x40) = ADD v720(0x20) v71c(0x20)
0x723: v723(0x0) = CONST 
0x725: v725 = SHA3 v723(0x0) v722(0x40)
0x726: v726 = SLOAD v725
0x727: v727(0xcb9) = CONST 
0x72d: v72d(0xffffffff) = CONST 
0x732: v732(0xcb9) = AND v72d(0xffffffff) v727(0xcb9)
0x733: v733_0 = CALLPRIVATE v732(0xcb9) v2c4 v726 v6a6(0x734)
----------------------------------

Begin block 0x734
prev = {'0x69e'}, next = {'0x739'}
----------------------------------
Block 0x734
0x735: v735(0x970) = CONST 
0x738: CALLPRIVATE v735(0x970) v733_0 v2ba v6a4 v6a1(0x739)
----------------------------------

Begin block 0x739
prev = {'0x734'}, next = {'0x2d4'}
----------------------------------
Block 0x739
0x73a: v73a(0x1) = CONST 
0x742: JUMP v289(0x2d4)
----------------------------------

Begin block 0x743
prev = {'0x304'}, next = {'0x330'}
----------------------------------
Block 0x743
0x744: v744(0x0) = CONST 
0x747: v747(0x0) = CONST 
0x74a: v74a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75f: v75f = AND v74a(0xffffffffffffffffffffffffffffffffffffffff) v320
0x760: v760(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x775: v775 = AND v760(0xffffffffffffffffffffffffffffffffffffffff) v75f
0x777: MSTORE v747(0x0) v775
0x778: v778(0x20) = CONST 
0x77a: v77a(0x20) = ADD v778(0x20) v747(0x0)
0x77d: MSTORE v77a(0x20) v744(0x0)
0x77e: v77e(0x20) = CONST 
0x780: v780(0x40) = ADD v77e(0x20) v77a(0x20)
0x781: v781(0x0) = CONST 
0x783: v783 = SHA3 v781(0x0) v780(0x40)
0x784: v784 = SLOAD v783
0x78a: JUMP v2ef(0x330)
----------------------------------

Begin block 0x78b
prev = {'0x346'}, next = {'0x823', '0x7dd'}
----------------------------------
Block 0x78b
0x78c: v78c(0x60) = CONST 
0x78e: v78e(0x4) = CONST 
0x791: v791 = SLOAD v78e(0x4)
0x792: v792(0x1) = CONST 
0x795: v795(0x1) = CONST 
0x797: v797 = AND v795(0x1) v791
0x798: v798 = ISZERO v797
0x799: v799(0x100) = CONST 
0x79c: v79c = MUL v799(0x100) v798
0x79d: v79d = SUB v79c v792(0x1)
0x79e: v79e = AND v79d v791
0x79f: v79f(0x2) = CONST 
0x7a2: v7a2 = DIV v79e v79f(0x2)
0x7a4: v7a4(0x1f) = CONST 
0x7a6: v7a6 = ADD v7a4(0x1f) v7a2
0x7a7: v7a7(0x20) = CONST 
0x7ab: v7ab = DIV v7a6 v7a7(0x20)
0x7ac: v7ac = MUL v7ab v7a7(0x20)
0x7ad: v7ad(0x20) = CONST 
0x7af: v7af = ADD v7ad(0x20) v7ac
0x7b0: v7b0(0x40) = CONST 
0x7b2: v7b2 = MLOAD v7b0(0x40)
0x7b5: v7b5 = ADD v7b2 v7af
0x7b6: v7b6(0x40) = CONST 
0x7b8: MSTORE v7b6(0x40) v7b5
0x7bf: MSTORE v7b2 v7a2
0x7c0: v7c0(0x20) = CONST 
0x7c2: v7c2 = ADD v7c0(0x20) v7b2
0x7c5: v7c5 = SLOAD v78e(0x4)
0x7c6: v7c6(0x1) = CONST 
0x7c9: v7c9(0x1) = CONST 
0x7cb: v7cb = AND v7c9(0x1) v7c5
0x7cc: v7cc = ISZERO v7cb
0x7cd: v7cd(0x100) = CONST 
0x7d0: v7d0 = MUL v7cd(0x100) v7cc
0x7d1: v7d1 = SUB v7d0 v7c6(0x1)
0x7d2: v7d2 = AND v7d1 v7c5
0x7d3: v7d3(0x2) = CONST 
0x7d6: v7d6 = DIV v7d2 v7d3(0x2)
0x7d8: v7d8 = ISZERO v7d6
0x7d9: v7d9(0x823) = CONST 
0x7dc: JUMPI v7d9(0x823) v7d8
----------------------------------

Begin block 0x7dd
prev = {'0x78b'}, next = {'0x7f8', '0x7e5'}
----------------------------------
Block 0x7dd
0x7de: v7de(0x1f) = CONST 
0x7e0: v7e0 = LT v7de(0x1f) v7d6
0x7e1: v7e1(0x7f8) = CONST 
0x7e4: JUMPI v7e1(0x7f8) v7e0
----------------------------------

Begin block 0x7e5
prev = {'0x7dd'}, next = {'0x823'}
----------------------------------
Block 0x7e5
0x7e5: v7e5(0x100) = CONST 
0x7ea: v7ea = SLOAD v78e(0x4)
0x7eb: v7eb = DIV v7ea v7e5(0x100)
0x7ec: v7ec = MUL v7eb v7e5(0x100)
0x7ee: MSTORE v7c2 v7ec
0x7f0: v7f0(0x20) = CONST 
0x7f2: v7f2 = ADD v7f0(0x20) v7c2
0x7f4: v7f4(0x823) = CONST 
0x7f7: JUMP v7f4(0x823)
----------------------------------

Begin block 0x7f8
prev = {'0x7dd'}, next = {'0x806'}
----------------------------------
Block 0x7f8
0x7fa: v7fa = ADD v7c2 v7d6
0x7fd: v7fd(0x0) = CONST 
0x7ff: MSTORE v7fd(0x0) v78e(0x4)
0x800: v800(0x20) = CONST 
0x802: v802(0x0) = CONST 
0x804: v804 = SHA3 v802(0x0) v800(0x20)
----------------------------------

Begin block 0x806
prev = {'0x806', '0x7f8'}, next = {'0x81a', '0x806'}
----------------------------------
Block 0x806
0x806_0x0: v806_0 = PHI v7c2 v812
0x806_0x1: v806_1 = PHI v804 v80e
0x808: v808 = SLOAD v806_1
0x80a: MSTORE v806_0 v808
0x80c: v80c(0x1) = CONST 
0x80e: v80e = ADD v80c(0x1) v806_1
0x810: v810(0x20) = CONST 
0x812: v812 = ADD v810(0x20) v806_0
0x815: v815 = GT v7fa v812
0x816: v816(0x806) = CONST 
0x819: JUMPI v816(0x806) v815
----------------------------------

Begin block 0x81a
prev = {'0x806'}, next = {'0x823'}
----------------------------------
Block 0x81a
0x81c: v81c = SUB v812 v7fa
0x81d: v81d(0x1f) = CONST 
0x81f: v81f = AND v81d(0x1f) v81c
0x821: v821 = ADD v7fa v81f
----------------------------------

Begin block 0x823
prev = {'0x81a', '0x78b', '0x7e5'}, next = {'0x34e'}
----------------------------------
Block 0x823
0x82c: JUMP v347(0x34e)
----------------------------------

Begin block 0x82d
prev = {'0x3df'}, next = {'0x8c3'}
----------------------------------
Block 0x82d
0x82e: v82e(0x0) = CONST 
0x830: v830(0x8c8) = CONST 
0x833: v833 = CALLER 
0x835: v835(0x8c3) = CONST 
0x839: v839(0x1) = CONST 
0x83b: v83b(0x0) = CONST 
0x83d: v83d = CALLER 
0x83e: v83e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x853: v853 = AND v83e(0xffffffffffffffffffffffffffffffffffffffff) v83d
0x854: v854(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x869: v869 = AND v854(0xffffffffffffffffffffffffffffffffffffffff) v853
0x86b: MSTORE v83b(0x0) v869
0x86c: v86c(0x20) = CONST 
0x86e: v86e(0x20) = ADD v86c(0x20) v83b(0x0)
0x871: MSTORE v86e(0x20) v839(0x1)
0x872: v872(0x20) = CONST 
0x874: v874(0x40) = ADD v872(0x20) v86e(0x20)
0x875: v875(0x0) = CONST 
0x877: v877 = SHA3 v875(0x0) v874(0x40)
0x878: v878(0x0) = CONST 
0x87b: v87b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x890: v890 = AND v87b(0xffffffffffffffffffffffffffffffffffffffff) v3fb
0x891: v891(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a6: v8a6 = AND v891(0xffffffffffffffffffffffffffffffffffffffff) v890
0x8a8: MSTORE v878(0x0) v8a6
0x8a9: v8a9(0x20) = CONST 
0x8ab: v8ab(0x20) = ADD v8a9(0x20) v878(0x0)
0x8ae: MSTORE v8ab(0x20) v877
0x8af: v8af(0x20) = CONST 
0x8b1: v8b1(0x40) = ADD v8af(0x20) v8ab(0x20)
0x8b2: v8b2(0x0) = CONST 
0x8b4: v8b4 = SHA3 v8b2(0x0) v8b1(0x40)
0x8b5: v8b5 = SLOAD v8b4
0x8b6: v8b6(0xc99) = CONST 
0x8bc: v8bc(0xffffffff) = CONST 
0x8c1: v8c1(0xc99) = AND v8bc(0xffffffff) v8b6(0xc99)
0x8c2: v8c2_0 = CALLPRIVATE v8c1(0xc99) v405 v8b5 v835(0x8c3)
----------------------------------

Begin block 0x8c3
prev = {'0x82d'}, next = {'0x8c8'}
----------------------------------
Block 0x8c3
0x8c4: v8c4(0x970) = CONST 
0x8c7: CALLPRIVATE v8c4(0x970) v8c2_0 v3fb v833 v830(0x8c8)
----------------------------------

Begin block 0x8c8
prev = {'0x8c3'}, next = {'0x415'}
----------------------------------
Block 0x8c8
0x8c9: v8c9(0x1) = CONST 
0x8d1: JUMP v3ca(0x415)
----------------------------------

Begin block 0x8d2
prev = {'0x445'}, next = {'0x8df'}
----------------------------------
Block 0x8d2
0x8d3: v8d3(0x0) = CONST 
0x8d5: v8d5(0x8df) = CONST 
0x8d8: v8d8 = CALLER 
0x8db: v8db(0xacf) = CONST 
0x8de: CALLPRIVATE v8db(0xacf) v46b v461 v8d8 v8d5(0x8df)
----------------------------------

Begin block 0x8df
prev = {'0x8d2'}, next = {'0x47b'}
----------------------------------
Block 0x8df
0x8e0: v8e0(0x1) = CONST 
0x8e8: JUMP v430(0x47b)
----------------------------------

Begin block 0x8e9
prev = {'0x4ab'}, next = {'0x4f7'}
----------------------------------
Block 0x8e9
0x8ea: v8ea(0x0) = CONST 
0x8ec: v8ec(0x1) = CONST 
0x8ee: v8ee(0x0) = CONST 
0x8f1: v8f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x906: v906 = AND v8f1(0xffffffffffffffffffffffffffffffffffffffff) v4c7
0x907: v907(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x91c: v91c = AND v907(0xffffffffffffffffffffffffffffffffffffffff) v906
0x91e: MSTORE v8ee(0x0) v91c
0x91f: v91f(0x20) = CONST 
0x921: v921(0x20) = ADD v91f(0x20) v8ee(0x0)
0x924: MSTORE v921(0x20) v8ec(0x1)
0x925: v925(0x20) = CONST 
0x927: v927(0x40) = ADD v925(0x20) v921(0x20)
0x928: v928(0x0) = CONST 
0x92a: v92a = SHA3 v928(0x0) v927(0x40)
0x92b: v92b(0x0) = CONST 
0x92e: v92e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x943: v943 = AND v92e(0xffffffffffffffffffffffffffffffffffffffff) v4e7
0x944: v944(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x959: v959 = AND v944(0xffffffffffffffffffffffffffffffffffffffff) v943
0x95b: MSTORE v92b(0x0) v959
0x95c: v95c(0x20) = CONST 
0x95e: v95e(0x20) = ADD v95c(0x20) v92b(0x0)
0x961: MSTORE v95e(0x20) v92a
0x962: v962(0x20) = CONST 
0x964: v964(0x40) = ADD v962(0x20) v95e(0x20)
0x965: v965(0x0) = CONST 
0x967: v967 = SHA3 v965(0x0) v964(0x40)
0x968: v968 = SLOAD v967
0x96f: JUMP v496(0x4f7)
----------------------------------

Begin block 0x970
prev = {}, next = {'0x9a6', '0x9aa'}
----------------------------------
function 0x970(v970arg0, v970arg1, v970arg2, v970arg3)
Block 0x970
0x971: v971(0x0) = CONST 
0x973: v973(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x988: v988(0x0) = AND v973(0xffffffffffffffffffffffffffffffffffffffff) v971(0x0)
0x98a: v98a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x99f: v99f = AND v98a(0xffffffffffffffffffffffffffffffffffffffff) v970arg1
0x9a0: v9a0 = EQ v99f v988(0x0)
0x9a1: v9a1 = ISZERO v9a0
0x9a2: v9a2(0x9aa) = CONST 
0x9a5: JUMPI v9a2(0x9aa) v9a1
----------------------------------

Begin block 0x9a6
prev = {'0x970'}, next = {}
----------------------------------
Block 0x9a6
0x9a6: v9a6(0x0) = CONST 
0x9a9: REVERT v9a6(0x0) v9a6(0x0)
----------------------------------

Begin block 0x9aa
prev = {'0x970'}, next = {'0x9e4', '0x9e0'}
----------------------------------
Block 0x9aa
0x9ab: v9ab(0x0) = CONST 
0x9ad: v9ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9c2: v9c2(0x0) = AND v9ad(0xffffffffffffffffffffffffffffffffffffffff) v9ab(0x0)
0x9c4: v9c4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d9: v9d9 = AND v9c4(0xffffffffffffffffffffffffffffffffffffffff) v970arg2
0x9da: v9da = EQ v9d9 v9c2(0x0)
0x9db: v9db = ISZERO v9da
0x9dc: v9dc(0x9e4) = CONST 
0x9df: JUMPI v9dc(0x9e4) v9db
----------------------------------

Begin block 0x9e0
prev = {'0x9aa'}, next = {}
----------------------------------
Block 0x9e0
0x9e0: v9e0(0x0) = CONST 
0x9e3: REVERT v9e0(0x0) v9e0(0x0)
----------------------------------

Begin block 0x9e4
prev = {'0x9aa'}, next = {}
----------------------------------
Block 0x9e4
0x9e6: v9e6(0x1) = CONST 
0x9e8: v9e8(0x0) = CONST 
0x9eb: v9eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa00: va00 = AND v9eb(0xffffffffffffffffffffffffffffffffffffffff) v970arg2
0xa01: va01(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa16: va16 = AND va01(0xffffffffffffffffffffffffffffffffffffffff) va00
0xa18: MSTORE v9e8(0x0) va16
0xa19: va19(0x20) = CONST 
0xa1b: va1b(0x20) = ADD va19(0x20) v9e8(0x0)
0xa1e: MSTORE va1b(0x20) v9e6(0x1)
0xa1f: va1f(0x20) = CONST 
0xa21: va21(0x40) = ADD va1f(0x20) va1b(0x20)
0xa22: va22(0x0) = CONST 
0xa24: va24 = SHA3 va22(0x0) va21(0x40)
0xa25: va25(0x0) = CONST 
0xa28: va28(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa3d: va3d = AND va28(0xffffffffffffffffffffffffffffffffffffffff) v970arg1
0xa3e: va3e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa53: va53 = AND va3e(0xffffffffffffffffffffffffffffffffffffffff) va3d
0xa55: MSTORE va25(0x0) va53
0xa56: va56(0x20) = CONST 
0xa58: va58(0x20) = ADD va56(0x20) va25(0x0)
0xa5b: MSTORE va58(0x20) va24
0xa5c: va5c(0x20) = CONST 
0xa5e: va5e(0x40) = ADD va5c(0x20) va58(0x20)
0xa5f: va5f(0x0) = CONST 
0xa61: va61 = SHA3 va5f(0x0) va5e(0x40)
0xa64: SSTORE va61 v970arg0
0xa67: va67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7c: va7c = AND va67(0xffffffffffffffffffffffffffffffffffffffff) v970arg1
0xa7e: va7e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa93: va93 = AND va7e(0xffffffffffffffffffffffffffffffffffffffff) v970arg2
0xa94: va94(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xab6: vab6(0x40) = CONST 
0xab8: vab8 = MLOAD vab6(0x40)
0xabc: MSTORE vab8 v970arg0
0xabd: vabd(0x20) = CONST 
0xabf: vabf = ADD vabd(0x20) vab8
0xac3: vac3(0x40) = CONST 
0xac5: vac5 = MLOAD vac3(0x40)
0xac8: vac8 = SUB vabf vac5
0xaca: LOG3 vac5 vac8 va94(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va93 va7c
0xace: RETURNPRIVATE v970arg3
----------------------------------

Begin block 0xacf
prev = {}, next = {'0xb05', '0xb09'}
----------------------------------
function 0xacf(vacfarg0, vacfarg1, vacfarg2, vacfarg3)
Block 0xacf
0xad0: vad0(0x0) = CONST 
0xad2: vad2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xae7: vae7(0x0) = AND vad2(0xffffffffffffffffffffffffffffffffffffffff) vad0(0x0)
0xae9: vae9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xafe: vafe = AND vae9(0xffffffffffffffffffffffffffffffffffffffff) vacfarg1
0xaff: vaff = EQ vafe vae7(0x0)
0xb00: vb00 = ISZERO vaff
0xb01: vb01(0xb09) = CONST 
0xb04: JUMPI vb01(0xb09) vb00
----------------------------------

Begin block 0xb05
prev = {'0xacf'}, next = {}
----------------------------------
Block 0xb05
0xb05: vb05(0x0) = CONST 
0xb08: REVERT vb05(0x0) vb05(0x0)
----------------------------------

Begin block 0xb09
prev = {'0xacf'}, next = {'0xb5a'}
----------------------------------
Block 0xb09
0xb0a: vb0a(0xb5a) = CONST 
0xb0e: vb0e(0x0) = CONST 
0xb12: vb12(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb27: vb27 = AND vb12(0xffffffffffffffffffffffffffffffffffffffff) vacfarg2
0xb28: vb28(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb3d: vb3d = AND vb28(0xffffffffffffffffffffffffffffffffffffffff) vb27
0xb3f: MSTORE vb0e(0x0) vb3d
0xb40: vb40(0x20) = CONST 
0xb42: vb42(0x20) = ADD vb40(0x20) vb0e(0x0)
0xb45: MSTORE vb42(0x20) vb0e(0x0)
0xb46: vb46(0x20) = CONST 
0xb48: vb48(0x40) = ADD vb46(0x20) vb42(0x20)
0xb49: vb49(0x0) = CONST 
0xb4b: vb4b = SHA3 vb49(0x0) vb48(0x40)
0xb4c: vb4c = SLOAD vb4b
0xb4d: vb4d(0xc99) = CONST 
0xb53: vb53(0xffffffff) = CONST 
0xb58: vb58(0xc99) = AND vb53(0xffffffff) vb4d(0xc99)
0xb59: vb59_0 = CALLPRIVATE vb58(0xc99) vacfarg0 vb4c vb0a(0xb5a)
----------------------------------

Begin block 0xb5a
prev = {'0xb09'}, next = {'0xbed'}
----------------------------------
Block 0xb5a
0xb5b: vb5b(0x0) = CONST 
0xb5f: vb5f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb74: vb74 = AND vb5f(0xffffffffffffffffffffffffffffffffffffffff) vacfarg2
0xb75: vb75(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb8a: vb8a = AND vb75(0xffffffffffffffffffffffffffffffffffffffff) vb74
0xb8c: MSTORE vb5b(0x0) vb8a
0xb8d: vb8d(0x20) = CONST 
0xb8f: vb8f(0x20) = ADD vb8d(0x20) vb5b(0x0)
0xb92: MSTORE vb8f(0x20) vb5b(0x0)
0xb93: vb93(0x20) = CONST 
0xb95: vb95(0x40) = ADD vb93(0x20) vb8f(0x20)
0xb96: vb96(0x0) = CONST 
0xb98: vb98 = SHA3 vb96(0x0) vb95(0x40)
0xb9b: SSTORE vb98 vb59_0
0xb9d: vb9d(0xbed) = CONST 
0xba1: vba1(0x0) = CONST 
0xba5: vba5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbba: vbba = AND vba5(0xffffffffffffffffffffffffffffffffffffffff) vacfarg1
0xbbb: vbbb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbd0: vbd0 = AND vbbb(0xffffffffffffffffffffffffffffffffffffffff) vbba
0xbd2: MSTORE vba1(0x0) vbd0
0xbd3: vbd3(0x20) = CONST 
0xbd5: vbd5(0x20) = ADD vbd3(0x20) vba1(0x0)
0xbd8: MSTORE vbd5(0x20) vba1(0x0)
0xbd9: vbd9(0x20) = CONST 
0xbdb: vbdb(0x40) = ADD vbd9(0x20) vbd5(0x20)
0xbdc: vbdc(0x0) = CONST 
0xbde: vbde = SHA3 vbdc(0x0) vbdb(0x40)
0xbdf: vbdf = SLOAD vbde
0xbe0: vbe0(0xcb9) = CONST 
0xbe6: vbe6(0xffffffff) = CONST 
0xbeb: vbeb(0xcb9) = AND vbe6(0xffffffff) vbe0(0xcb9)
0xbec: vbec_0 = CALLPRIVATE vbeb(0xcb9) vacfarg0 vbdf vb9d(0xbed)
----------------------------------

Begin block 0xbed
prev = {'0xb5a'}, next = {}
----------------------------------
Block 0xbed
0xbee: vbee(0x0) = CONST 
0xbf2: vbf2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc07: vc07 = AND vbf2(0xffffffffffffffffffffffffffffffffffffffff) vacfarg1
0xc08: vc08(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc1d: vc1d = AND vc08(0xffffffffffffffffffffffffffffffffffffffff) vc07
0xc1f: MSTORE vbee(0x0) vc1d
0xc20: vc20(0x20) = CONST 
0xc22: vc22(0x20) = ADD vc20(0x20) vbee(0x0)
0xc25: MSTORE vc22(0x20) vbee(0x0)
0xc26: vc26(0x20) = CONST 
0xc28: vc28(0x40) = ADD vc26(0x20) vc22(0x20)
0xc29: vc29(0x0) = CONST 
0xc2b: vc2b = SHA3 vc29(0x0) vc28(0x40)
0xc2e: SSTORE vc2b vbec_0
0xc31: vc31(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc46: vc46 = AND vc31(0xffffffffffffffffffffffffffffffffffffffff) vacfarg1
0xc48: vc48(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5d: vc5d = AND vc48(0xffffffffffffffffffffffffffffffffffffffff) vacfarg2
0xc5e: vc5e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xc80: vc80(0x40) = CONST 
0xc82: vc82 = MLOAD vc80(0x40)
0xc86: MSTORE vc82 vacfarg0
0xc87: vc87(0x20) = CONST 
0xc89: vc89 = ADD vc87(0x20) vc82
0xc8d: vc8d(0x40) = CONST 
0xc8f: vc8f = MLOAD vc8d(0x40)
0xc92: vc92 = SUB vc89 vc8f
0xc94: LOG3 vc8f vc92 vc5e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vc5d vc46
0xc98: RETURNPRIVATE vacfarg3
----------------------------------

Begin block 0xc99
prev = {}, next = {'0xca8', '0xca4'}
----------------------------------
function 0xc99(vc99arg0, vc99arg1, vc99arg2)
Block 0xc99
0xc9a: vc9a(0x0) = CONST 
0xc9e: vc9e = GT vc99arg0 vc99arg1
0xc9f: vc9f = ISZERO vc9e
0xca0: vca0(0xca8) = CONST 
0xca3: JUMPI vca0(0xca8) vc9f
----------------------------------

Begin block 0xca4
prev = {'0xc99'}, next = {}
----------------------------------
Block 0xca4
0xca4: vca4(0x0) = CONST 
0xca7: REVERT vca4(0x0) vca4(0x0)
----------------------------------

Begin block 0xca8
prev = {'0xc99'}, next = {}
----------------------------------
Block 0xca8
0xca9: vca9(0x0) = CONST 
0xcad: vcad = SUB vc99arg1 vc99arg0
0xcb8: RETURNPRIVATE vc99arg2 vcad
----------------------------------

Begin block 0xcb9
prev = {}, next = {'0xcca', '0xcce'}
----------------------------------
function 0xcb9(vcb9arg0, vcb9arg1, vcb9arg2)
Block 0xcb9
0xcba: vcba(0x0) = CONST 
0xcbf: vcbf = ADD vcb9arg1 vcb9arg0
0xcc4: vcc4 = LT vcbf vcb9arg1
0xcc5: vcc5 = ISZERO vcc4
0xcc6: vcc6(0xcce) = CONST 
0xcc9: JUMPI vcc6(0xcce) vcc5
----------------------------------

Begin block 0xcca
prev = {'0xcb9'}, next = {}
----------------------------------
Block 0xcca
0xcca: vcca(0x0) = CONST 
0xccd: REVERT vcca(0x0) vcca(0x0)
----------------------------------

Begin block 0xcce
prev = {'0xcb9'}, next = {}
----------------------------------
Block 0xcce
0xcd7: RETURNPRIVATE vcb9arg2 vcbf
----------------------------------

Begin block 0xd27
prev = {'0x10', '0xa9'}, next = {'0xb40x0'}
----------------------------------
Block 0xd27
0xd28: vd28(0xb4) = CONST 
0xd29: CALLPRIVATE vd28(0xb4)
----------------------------------

Begin block 0xd2a
prev = {'0x71'}, next = {}
----------------------------------
Block 0xd2a
0xd2b: vd2b(0xb9) = CONST 
0xd2c: CALLPRIVATE vd2b(0xb9)
----------------------------------

Begin block 0xd2d
prev = {'0x7d'}, next = {}
----------------------------------
Block 0xd2d
0xd2e: vd2e(0x13c) = CONST 
0xd2f: CALLPRIVATE vd2e(0x13c)
----------------------------------

Begin block 0xd30
prev = {'0x88'}, next = {}
----------------------------------
Block 0xd30
0xd31: vd31(0x1a2) = CONST 
0xd32: CALLPRIVATE vd31(0x1a2)
----------------------------------

Begin block 0xd33
prev = {'0x93'}, next = {}
----------------------------------
Block 0xd33
0xd34: vd34(0x1c0) = CONST 
0xd35: CALLPRIVATE vd34(0x1c0)
----------------------------------

Begin block 0xd36
prev = {'0x9e'}, next = {}
----------------------------------
Block 0xd36
0xd37: vd37(0x246) = CONST 
0xd38: CALLPRIVATE vd37(0x246)
----------------------------------

Begin block 0xd39
prev = {'0xa9'}, next = {}
----------------------------------
Block 0xd39
0xd3a: vd3a(0x26a) = CONST 
0xd3b: CALLPRIVATE vd3a(0x26a)
----------------------------------

Begin block 0xd3c
prev = {'0x2b'}, next = {}
----------------------------------
Block 0xd3c
0xd3d: vd3d(0x288) = CONST 
0xd3e: CALLPRIVATE vd3d(0x288)
----------------------------------

Begin block 0xd3f
prev = {'0x36'}, next = {}
----------------------------------
Block 0xd3f
0xd40: vd40(0x2ee) = CONST 
0xd41: CALLPRIVATE vd40(0x2ee)
----------------------------------

Begin block 0xd42
prev = {'0x41'}, next = {}
----------------------------------
Block 0xd42
0xd43: vd43(0x346) = CONST 
0xd44: CALLPRIVATE vd43(0x346)
----------------------------------

Begin block 0xd45
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xd45
0xd46: vd46(0x3c9) = CONST 
0xd47: CALLPRIVATE vd46(0x3c9)
----------------------------------

Begin block 0xd48
prev = {'0x57'}, next = {}
----------------------------------
Block 0xd48
0xd49: vd49(0x42f) = CONST 
0xd4a: CALLPRIVATE vd49(0x42f)
----------------------------------

Begin block 0xd4b
prev = {'0x62'}, next = {}
----------------------------------
Block 0xd4b
0xd4c: vd4c(0x495) = CONST 
0xd4d: CALLPRIVATE vd4c(0x495)
----------------------------------
