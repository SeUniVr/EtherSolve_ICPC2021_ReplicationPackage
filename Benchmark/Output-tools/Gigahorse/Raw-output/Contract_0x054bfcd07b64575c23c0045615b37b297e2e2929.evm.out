
Begin block 0x0
prev = {}, next = {'0xb', '0xb8'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0xb8) = CONST 
0xa: JUMPI v7(0xb8) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0x3f', '0x1074'}
----------------------------------
Block 0xb
0xb: vb(0x0) = CONST 
0xd: vd = CALLDATALOAD vb(0x0)
0xe: ve(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2d: v2d = DIV vd ve(0x100000000000000000000000000000000000000000000000000000000)
0x2e: v2e(0xffffffff) = CONST 
0x33: v33 = AND v2e(0xffffffff) v2d
0x35: v35(0x6fdde03) = CONST 
0x3a: v3a = EQ v35(0x6fdde03) v33
0x105c: v105c(0x1074) = CONST 
0x105d: JUMPI v105c(0x1074) v3a
----------------------------------

Begin block 0x3f
prev = {'0xb'}, next = {'0x1077', '0x4a'}
----------------------------------
Block 0x3f
0x40: v40(0x95ea7b3) = CONST 
0x45: v45 = EQ v40(0x95ea7b3) v33
0x105e: v105e(0x1077) = CONST 
0x105f: JUMPI v105e(0x1077) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x55', '0x107a'}
----------------------------------
Block 0x4a
0x4b: v4b(0x18160ddd) = CONST 
0x50: v50 = EQ v4b(0x18160ddd) v33
0x1060: v1060(0x107a) = CONST 
0x1061: JUMPI v1060(0x107a) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x107d', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0x23b872dd) = CONST 
0x5b: v5b = EQ v56(0x23b872dd) v33
0x1062: v1062(0x107d) = CONST 
0x1063: JUMPI v1062(0x107d) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x1080', '0x6b'}
----------------------------------
Block 0x60
0x61: v61(0x313ce567) = CONST 
0x66: v66 = EQ v61(0x313ce567) v33
0x1064: v1064(0x1080) = CONST 
0x1065: JUMPI v1064(0x1080) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x1083', '0x76'}
----------------------------------
Block 0x6b
0x6c: v6c(0x42966c68) = CONST 
0x71: v71 = EQ v6c(0x42966c68) v33
0x1066: v1066(0x1083) = CONST 
0x1067: JUMPI v1066(0x1083) v71
----------------------------------

Begin block 0x76
prev = {'0x6b'}, next = {'0x1086', '0x81'}
----------------------------------
Block 0x76
0x77: v77(0x70a08231) = CONST 
0x7c: v7c = EQ v77(0x70a08231) v33
0x1068: v1068(0x1086) = CONST 
0x1069: JUMPI v1068(0x1086) v7c
----------------------------------

Begin block 0x81
prev = {'0x76'}, next = {'0x1089', '0x8c'}
----------------------------------
Block 0x81
0x82: v82(0x79cc6790) = CONST 
0x87: v87 = EQ v82(0x79cc6790) v33
0x106a: v106a(0x1089) = CONST 
0x106b: JUMPI v106a(0x1089) v87
----------------------------------

Begin block 0x8c
prev = {'0x81'}, next = {'0x108c', '0x97'}
----------------------------------
Block 0x8c
0x8d: v8d(0x95d89b41) = CONST 
0x92: v92 = EQ v8d(0x95d89b41) v33
0x106c: v106c(0x108c) = CONST 
0x106d: JUMPI v106c(0x108c) v92
----------------------------------

Begin block 0x97
prev = {'0x8c'}, next = {'0x108f', '0xa2'}
----------------------------------
Block 0x97
0x98: v98(0xa9059cbb) = CONST 
0x9d: v9d = EQ v98(0xa9059cbb) v33
0x106e: v106e(0x108f) = CONST 
0x106f: JUMPI v106e(0x108f) v9d
----------------------------------

Begin block 0xa2
prev = {'0x97'}, next = {'0xad', '0x1092'}
----------------------------------
Block 0xa2
0xa3: va3(0xcae9ca51) = CONST 
0xa8: va8 = EQ va3(0xcae9ca51) v33
0x1070: v1070(0x1092) = CONST 
0x1071: JUMPI v1070(0x1092) va8
----------------------------------

Begin block 0xad
prev = {'0xa2'}, next = {'0xb8', '0x1095'}
----------------------------------
Block 0xad
0xae: vae(0xdd62ed3e) = CONST 
0xb3: vb3 = EQ vae(0xdd62ed3e) v33
0x1072: v1072(0x1095) = CONST 
0x1073: JUMPI v1072(0x1095) vb3
----------------------------------

Begin block 0xb8
prev = {'0x0', '0xad'}, next = {}
----------------------------------
Block 0xb8
0xb9: vb9(0x0) = CONST 
0xbc: REVERT vb9(0x0) vb9(0x0)
----------------------------------

Begin block 0xbd
prev = {}, next = {'0xc8', '0xc4'}
----------------------------------
function name()()
Block 0xbd
0xbe: vbe = CALLVALUE 
0xbf: vbf = ISZERO vbe
0xc0: vc0(0xc8) = CONST 
0xc3: JUMPI vc0(0xc8) vbf
----------------------------------

Begin block 0xc4
prev = {'0xbd'}, next = {}
----------------------------------
Block 0xc4
0xc4: vc4(0x0) = CONST 
0xc7: REVERT vc4(0x0) vc4(0x0)
----------------------------------

Begin block 0xc8
prev = {'0xbd'}, next = {'0x533'}
----------------------------------
Block 0xc8
0xc9: vc9(0xd0) = CONST 
0xcc: vcc(0x533) = CONST 
0xcf: JUMP vcc(0x533)
----------------------------------

Begin block 0xd0
prev = {'0x5c9'}, next = {'0xf5'}
----------------------------------
Block 0xd0
0xd1: vd1(0x40) = CONST 
0xd3: vd3 = MLOAD vd1(0x40)
0xd6: vd6(0x20) = CONST 
0xd8: vd8 = ADD vd6(0x20) vd3
0xdb: vdb = SUB vd8 vd3
0xdd: MSTORE vd3 vdb
0xe1: ve1 = MLOAD v558
0xe3: MSTORE vd8 ve1
0xe4: ve4(0x20) = CONST 
0xe6: ve6 = ADD ve4(0x20) vd8
0xea: vea = MLOAD v558
0xec: vec(0x20) = CONST 
0xee: vee = ADD vec(0x20) v558
0xf3: vf3(0x0) = CONST 
----------------------------------

Begin block 0xf5
prev = {'0x106', '0xd0'}, next = {'0x111', '0xfe'}
----------------------------------
Block 0xf5
0xf5_0x0: vf5_0 = PHI vf3(0x0) v10a
0xf8: vf8 = LT vf5_0 vea
0xf9: vf9 = ISZERO vf8
0xfa: vfa(0x111) = CONST 
0xfd: JUMPI vfa(0x111) vf9
----------------------------------

Begin block 0xfe
prev = {'0xf5'}, next = {'0x106'}
----------------------------------
Block 0xfe
0xfe_0x0: vfe_0 = PHI vf3(0x0) v10a
0x100: v100 = ADD vee vfe_0
0x101: v101 = MLOAD v100
0x104: v104 = ADD ve6 vfe_0
0x105: MSTORE v104 v101
----------------------------------

Begin block 0x106
prev = {'0xfe'}, next = {'0xf5'}
----------------------------------
Block 0x106
0x106_0x0: v106_0 = PHI vf3(0x0) v10a
0x107: v107(0x20) = CONST 
0x10a: v10a = ADD v106_0 v107(0x20)
0x10d: v10d(0xf5) = CONST 
0x110: JUMP v10d(0xf5)
----------------------------------

Begin block 0x111
prev = {'0xf5'}, next = {'0x13e', '0x125'}
----------------------------------
Block 0x111
0x11a: v11a = ADD vea ve6
0x11c: v11c(0x1f) = CONST 
0x11e: v11e = AND v11c(0x1f) vea
0x120: v120 = ISZERO v11e
0x121: v121(0x13e) = CONST 
0x124: JUMPI v121(0x13e) v120
----------------------------------

Begin block 0x125
prev = {'0x111'}, next = {'0x13e'}
----------------------------------
Block 0x125
0x127: v127 = SUB v11a v11e
0x129: v129 = MLOAD v127
0x12a: v12a(0x1) = CONST 
0x12d: v12d(0x20) = CONST 
0x12f: v12f = SUB v12d(0x20) v11e
0x130: v130(0x100) = CONST 
0x133: v133 = EXP v130(0x100) v12f
0x134: v134 = SUB v133 v12a(0x1)
0x135: v135 = NOT v134
0x136: v136 = AND v135 v129
0x138: MSTORE v127 v136
0x139: v139(0x20) = CONST 
0x13b: v13b = ADD v139(0x20) v127
----------------------------------

Begin block 0x13e
prev = {'0x111', '0x125'}, next = {}
----------------------------------
Block 0x13e
0x13e_0x1: v13e_1 = PHI v11a v13b
0x144: v144(0x40) = CONST 
0x146: v146 = MLOAD v144(0x40)
0x149: v149 = SUB v13e_1 v146
0x14b: RETURN v146 v149
----------------------------------

Begin block 0x14c
prev = {}, next = {'0x157', '0x153'}
----------------------------------
function approve(address,uint256)()
Block 0x14c
0x14d: v14d = CALLVALUE 
0x14e: v14e = ISZERO v14d
0x14f: v14f(0x157) = CONST 
0x152: JUMPI v14f(0x157) v14e
----------------------------------

Begin block 0x153
prev = {'0x14c'}, next = {}
----------------------------------
Block 0x153
0x153: v153(0x0) = CONST 
0x156: REVERT v153(0x0) v153(0x0)
----------------------------------

Begin block 0x157
prev = {'0x14c'}, next = {'0x18c'}
----------------------------------
Block 0x157
0x158: v158(0x18c) = CONST 
0x15b: v15b(0x4) = CONST 
0x15f: v15f = CALLDATALOAD v15b(0x4)
0x160: v160(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x175: v175 = AND v160(0xffffffffffffffffffffffffffffffffffffffff) v15f
0x177: v177(0x20) = CONST 
0x179: v179(0x24) = ADD v177(0x20) v15b(0x4)
0x17e: v17e = CALLDATALOAD v179(0x24)
0x180: v180(0x20) = CONST 
0x182: v182(0x44) = ADD v180(0x20) v179(0x24)
0x188: v188(0x5d1) = CONST 
0x18b: v18b_0 = CALLPRIVATE v188(0x5d1) v17e v175 v158(0x18c)
----------------------------------

Begin block 0x18c
prev = {'0x157'}, next = {}
----------------------------------
Block 0x18c
0x18d: v18d(0x40) = CONST 
0x18f: v18f = MLOAD v18d(0x40)
0x192: v192 = ISZERO v18b_0
0x193: v193 = ISZERO v192
0x194: v194 = ISZERO v193
0x195: v195 = ISZERO v194
0x197: MSTORE v18f v195
0x198: v198(0x20) = CONST 
0x19a: v19a = ADD v198(0x20) v18f
0x19e: v19e(0x40) = CONST 
0x1a0: v1a0 = MLOAD v19e(0x40)
0x1a3: v1a3 = SUB v19a v1a0
0x1a5: RETURN v1a0 v1a3
----------------------------------

Begin block 0x1a6
prev = {}, next = {'0x1b1', '0x1ad'}
----------------------------------
function totalSupply()()
Block 0x1a6
0x1a7: v1a7 = CALLVALUE 
0x1a8: v1a8 = ISZERO v1a7
0x1a9: v1a9(0x1b1) = CONST 
0x1ac: JUMPI v1a9(0x1b1) v1a8
----------------------------------

Begin block 0x1ad
prev = {'0x1a6'}, next = {}
----------------------------------
Block 0x1ad
0x1ad: v1ad(0x0) = CONST 
0x1b0: REVERT v1ad(0x0) v1ad(0x0)
----------------------------------

Begin block 0x1b1
prev = {'0x1a6'}, next = {'0x65f'}
----------------------------------
Block 0x1b1
0x1b2: v1b2(0x1b9) = CONST 
0x1b5: v1b5(0x65f) = CONST 
0x1b8: JUMP v1b5(0x65f)
----------------------------------

Begin block 0x1b9
prev = {'0x65f'}, next = {}
----------------------------------
Block 0x1b9
0x1ba: v1ba(0x40) = CONST 
0x1bc: v1bc = MLOAD v1ba(0x40)
0x1c0: MSTORE v1bc v662
0x1c1: v1c1(0x20) = CONST 
0x1c3: v1c3 = ADD v1c1(0x20) v1bc
0x1c7: v1c7(0x40) = CONST 
0x1c9: v1c9 = MLOAD v1c7(0x40)
0x1cc: v1cc = SUB v1c3 v1c9
0x1ce: RETURN v1c9 v1cc
----------------------------------

Begin block 0x1cf
prev = {}, next = {'0x1da', '0x1d6'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1cf
0x1d0: v1d0 = CALLVALUE 
0x1d1: v1d1 = ISZERO v1d0
0x1d2: v1d2(0x1da) = CONST 
0x1d5: JUMPI v1d2(0x1da) v1d1
----------------------------------

Begin block 0x1d6
prev = {'0x1cf'}, next = {}
----------------------------------
Block 0x1d6
0x1d6: v1d6(0x0) = CONST 
0x1d9: REVERT v1d6(0x0) v1d6(0x0)
----------------------------------

Begin block 0x1da
prev = {'0x1cf'}, next = {'0x665'}
----------------------------------
Block 0x1da
0x1db: v1db(0x22e) = CONST 
0x1de: v1de(0x4) = CONST 
0x1e2: v1e2 = CALLDATALOAD v1de(0x4)
0x1e3: v1e3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f8: v1f8 = AND v1e3(0xffffffffffffffffffffffffffffffffffffffff) v1e2
0x1fa: v1fa(0x20) = CONST 
0x1fc: v1fc(0x24) = ADD v1fa(0x20) v1de(0x4)
0x201: v201 = CALLDATALOAD v1fc(0x24)
0x202: v202(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x217: v217 = AND v202(0xffffffffffffffffffffffffffffffffffffffff) v201
0x219: v219(0x20) = CONST 
0x21b: v21b(0x44) = ADD v219(0x20) v1fc(0x24)
0x220: v220 = CALLDATALOAD v21b(0x44)
0x222: v222(0x20) = CONST 
0x224: v224(0x64) = ADD v222(0x20) v21b(0x44)
0x22a: v22a(0x665) = CONST 
0x22d: JUMP v22a(0x665)
----------------------------------

Begin block 0x22e
prev = {'0x78c'}, next = {}
----------------------------------
Block 0x22e
0x22f: v22f(0x40) = CONST 
0x231: v231 = MLOAD v22f(0x40)
0x234: v234 = ISZERO v788(0x1)
0x235: v235 = ISZERO v234
0x236: v236 = ISZERO v235
0x237: v237 = ISZERO v236
0x239: MSTORE v231 v237
0x23a: v23a(0x20) = CONST 
0x23c: v23c = ADD v23a(0x20) v231
0x240: v240(0x40) = CONST 
0x242: v242 = MLOAD v240(0x40)
0x245: v245 = SUB v23c v242
0x247: RETURN v242 v245
----------------------------------

Begin block 0x248
prev = {}, next = {'0x24f', '0x253'}
----------------------------------
function decimals()()
Block 0x248
0x249: v249 = CALLVALUE 
0x24a: v24a = ISZERO v249
0x24b: v24b(0x253) = CONST 
0x24e: JUMPI v24b(0x253) v24a
----------------------------------

Begin block 0x24f
prev = {'0x248'}, next = {}
----------------------------------
Block 0x24f
0x24f: v24f(0x0) = CONST 
0x252: REVERT v24f(0x0) v24f(0x0)
----------------------------------

Begin block 0x253
prev = {'0x248'}, next = {'0x793'}
----------------------------------
Block 0x253
0x254: v254(0x25b) = CONST 
0x257: v257(0x793) = CONST 
0x25a: JUMP v257(0x793)
----------------------------------

Begin block 0x25b
prev = {'0x793'}, next = {}
----------------------------------
Block 0x25b
0x25c: v25c(0x40) = CONST 
0x25e: v25e = MLOAD v25c(0x40)
0x261: v261(0xff) = CONST 
0x263: v263 = AND v261(0xff) v7a3
0x264: v264(0xff) = CONST 
0x266: v266 = AND v264(0xff) v263
0x268: MSTORE v25e v266
0x269: v269(0x20) = CONST 
0x26b: v26b = ADD v269(0x20) v25e
0x26f: v26f(0x40) = CONST 
0x271: v271 = MLOAD v26f(0x40)
0x274: v274 = SUB v26b v271
0x276: RETURN v271 v274
----------------------------------

Begin block 0x277
prev = {}, next = {'0x282', '0x27e'}
----------------------------------
function burn(uint256)()
Block 0x277
0x278: v278 = CALLVALUE 
0x279: v279 = ISZERO v278
0x27a: v27a(0x282) = CONST 
0x27d: JUMPI v27a(0x282) v279
----------------------------------

Begin block 0x27e
prev = {'0x277'}, next = {}
----------------------------------
Block 0x27e
0x27e: v27e(0x0) = CONST 
0x281: REVERT v27e(0x0) v27e(0x0)
----------------------------------

Begin block 0x282
prev = {'0x277'}, next = {'0x7a6'}
----------------------------------
Block 0x282
0x283: v283(0x298) = CONST 
0x286: v286(0x4) = CONST 
0x28a: v28a = CALLDATALOAD v286(0x4)
0x28c: v28c(0x20) = CONST 
0x28e: v28e(0x24) = ADD v28c(0x20) v286(0x4)
0x294: v294(0x7a6) = CONST 
0x297: JUMP v294(0x7a6)
----------------------------------

Begin block 0x298
prev = {'0x8a6'}, next = {}
----------------------------------
Block 0x298
0x299: v299(0x40) = CONST 
0x29b: v29b = MLOAD v299(0x40)
0x29e: v29e = ISZERO v8a2(0x1)
0x29f: v29f = ISZERO v29e
0x2a0: v2a0 = ISZERO v29f
0x2a1: v2a1 = ISZERO v2a0
0x2a3: MSTORE v29b v2a1
0x2a4: v2a4(0x20) = CONST 
0x2a6: v2a6 = ADD v2a4(0x20) v29b
0x2aa: v2aa(0x40) = CONST 
0x2ac: v2ac = MLOAD v2aa(0x40)
0x2af: v2af = SUB v2a6 v2ac
0x2b1: RETURN v2ac v2af
----------------------------------

Begin block 0x2b2
prev = {}, next = {'0x2bd', '0x2b9'}
----------------------------------
function balanceOf(address)()
Block 0x2b2
0x2b3: v2b3 = CALLVALUE 
0x2b4: v2b4 = ISZERO v2b3
0x2b5: v2b5(0x2bd) = CONST 
0x2b8: JUMPI v2b5(0x2bd) v2b4
----------------------------------

Begin block 0x2b9
prev = {'0x2b2'}, next = {}
----------------------------------
Block 0x2b9
0x2b9: v2b9(0x0) = CONST 
0x2bc: REVERT v2b9(0x0) v2b9(0x0)
----------------------------------

Begin block 0x2bd
prev = {'0x2b2'}, next = {'0x8ab'}
----------------------------------
Block 0x2bd
0x2be: v2be(0x2e9) = CONST 
0x2c1: v2c1(0x4) = CONST 
0x2c5: v2c5 = CALLDATALOAD v2c1(0x4)
0x2c6: v2c6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2db: v2db = AND v2c6(0xffffffffffffffffffffffffffffffffffffffff) v2c5
0x2dd: v2dd(0x20) = CONST 
0x2df: v2df(0x24) = ADD v2dd(0x20) v2c1(0x4)
0x2e5: v2e5(0x8ab) = CONST 
0x2e8: JUMP v2e5(0x8ab)
----------------------------------

Begin block 0x2e9
prev = {'0x8ab'}, next = {}
----------------------------------
Block 0x2e9
0x2ea: v2ea(0x40) = CONST 
0x2ec: v2ec = MLOAD v2ea(0x40)
0x2f0: MSTORE v2ec v8c0
0x2f1: v2f1(0x20) = CONST 
0x2f3: v2f3 = ADD v2f1(0x20) v2ec
0x2f7: v2f7(0x40) = CONST 
0x2f9: v2f9 = MLOAD v2f7(0x40)
0x2fc: v2fc = SUB v2f3 v2f9
0x2fe: RETURN v2f9 v2fc
----------------------------------

Begin block 0x2ff
prev = {}, next = {'0x306', '0x30a'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x2ff
0x300: v300 = CALLVALUE 
0x301: v301 = ISZERO v300
0x302: v302(0x30a) = CONST 
0x305: JUMPI v302(0x30a) v301
----------------------------------

Begin block 0x306
prev = {'0x2ff'}, next = {}
----------------------------------
Block 0x306
0x306: v306(0x0) = CONST 
0x309: REVERT v306(0x0) v306(0x0)
----------------------------------

Begin block 0x30a
prev = {'0x2ff'}, next = {'0x8c3'}
----------------------------------
Block 0x30a
0x30b: v30b(0x33f) = CONST 
0x30e: v30e(0x4) = CONST 
0x312: v312 = CALLDATALOAD v30e(0x4)
0x313: v313(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x328: v328 = AND v313(0xffffffffffffffffffffffffffffffffffffffff) v312
0x32a: v32a(0x20) = CONST 
0x32c: v32c(0x24) = ADD v32a(0x20) v30e(0x4)
0x331: v331 = CALLDATALOAD v32c(0x24)
0x333: v333(0x20) = CONST 
0x335: v335(0x44) = ADD v333(0x20) v32c(0x24)
0x33b: v33b(0x8c3) = CONST 
0x33e: JUMP v33b(0x8c3)
----------------------------------

Begin block 0x33f
prev = {'0xad8'}, next = {}
----------------------------------
Block 0x33f
0x340: v340(0x40) = CONST 
0x342: v342 = MLOAD v340(0x40)
0x345: v345 = ISZERO vad4(0x1)
0x346: v346 = ISZERO v345
0x347: v347 = ISZERO v346
0x348: v348 = ISZERO v347
0x34a: MSTORE v342 v348
0x34b: v34b(0x20) = CONST 
0x34d: v34d = ADD v34b(0x20) v342
0x351: v351(0x40) = CONST 
0x353: v353 = MLOAD v351(0x40)
0x356: v356 = SUB v34d v353
0x358: RETURN v353 v356
----------------------------------

Begin block 0x359
prev = {}, next = {'0x364', '0x360'}
----------------------------------
function symbol()()
Block 0x359
0x35a: v35a = CALLVALUE 
0x35b: v35b = ISZERO v35a
0x35c: v35c(0x364) = CONST 
0x35f: JUMPI v35c(0x364) v35b
----------------------------------

Begin block 0x360
prev = {'0x359'}, next = {}
----------------------------------
Block 0x360
0x360: v360(0x0) = CONST 
0x363: REVERT v360(0x0) v360(0x0)
----------------------------------

Begin block 0x364
prev = {'0x359'}, next = {'0xade'}
----------------------------------
Block 0x364
0x365: v365(0x36c) = CONST 
0x368: v368(0xade) = CONST 
0x36b: JUMP v368(0xade)
----------------------------------

Begin block 0x36c
prev = {'0xb74'}, next = {'0x391'}
----------------------------------
Block 0x36c
0x36d: v36d(0x40) = CONST 
0x36f: v36f = MLOAD v36d(0x40)
0x372: v372(0x20) = CONST 
0x374: v374 = ADD v372(0x20) v36f
0x377: v377 = SUB v374 v36f
0x379: MSTORE v36f v377
0x37d: v37d = MLOAD vb03
0x37f: MSTORE v374 v37d
0x380: v380(0x20) = CONST 
0x382: v382 = ADD v380(0x20) v374
0x386: v386 = MLOAD vb03
0x388: v388(0x20) = CONST 
0x38a: v38a = ADD v388(0x20) vb03
0x38f: v38f(0x0) = CONST 
----------------------------------

Begin block 0x391
prev = {'0x36c', '0x3a2'}, next = {'0x39a', '0x3ad'}
----------------------------------
Block 0x391
0x391_0x0: v391_0 = PHI v38f(0x0) v3a6
0x394: v394 = LT v391_0 v386
0x395: v395 = ISZERO v394
0x396: v396(0x3ad) = CONST 
0x399: JUMPI v396(0x3ad) v395
----------------------------------

Begin block 0x39a
prev = {'0x391'}, next = {'0x3a2'}
----------------------------------
Block 0x39a
0x39a_0x0: v39a_0 = PHI v38f(0x0) v3a6
0x39c: v39c = ADD v38a v39a_0
0x39d: v39d = MLOAD v39c
0x3a0: v3a0 = ADD v382 v39a_0
0x3a1: MSTORE v3a0 v39d
----------------------------------

Begin block 0x3a2
prev = {'0x39a'}, next = {'0x391'}
----------------------------------
Block 0x3a2
0x3a2_0x0: v3a2_0 = PHI v38f(0x0) v3a6
0x3a3: v3a3(0x20) = CONST 
0x3a6: v3a6 = ADD v3a2_0 v3a3(0x20)
0x3a9: v3a9(0x391) = CONST 
0x3ac: JUMP v3a9(0x391)
----------------------------------

Begin block 0x3ad
prev = {'0x391'}, next = {'0x3da', '0x3c1'}
----------------------------------
Block 0x3ad
0x3b6: v3b6 = ADD v386 v382
0x3b8: v3b8(0x1f) = CONST 
0x3ba: v3ba = AND v3b8(0x1f) v386
0x3bc: v3bc = ISZERO v3ba
0x3bd: v3bd(0x3da) = CONST 
0x3c0: JUMPI v3bd(0x3da) v3bc
----------------------------------

Begin block 0x3c1
prev = {'0x3ad'}, next = {'0x3da'}
----------------------------------
Block 0x3c1
0x3c3: v3c3 = SUB v3b6 v3ba
0x3c5: v3c5 = MLOAD v3c3
0x3c6: v3c6(0x1) = CONST 
0x3c9: v3c9(0x20) = CONST 
0x3cb: v3cb = SUB v3c9(0x20) v3ba
0x3cc: v3cc(0x100) = CONST 
0x3cf: v3cf = EXP v3cc(0x100) v3cb
0x3d0: v3d0 = SUB v3cf v3c6(0x1)
0x3d1: v3d1 = NOT v3d0
0x3d2: v3d2 = AND v3d1 v3c5
0x3d4: MSTORE v3c3 v3d2
0x3d5: v3d5(0x20) = CONST 
0x3d7: v3d7 = ADD v3d5(0x20) v3c3
----------------------------------

Begin block 0x3da
prev = {'0x3ad', '0x3c1'}, next = {}
----------------------------------
Block 0x3da
0x3da_0x1: v3da_1 = PHI v3b6 v3d7
0x3e0: v3e0(0x40) = CONST 
0x3e2: v3e2 = MLOAD v3e0(0x40)
0x3e5: v3e5 = SUB v3da_1 v3e2
0x3e7: RETURN v3e2 v3e5
----------------------------------

Begin block 0x3e8
prev = {}, next = {'0x3f3', '0x3ef'}
----------------------------------
function transfer(address,uint256)()
Block 0x3e8
0x3e9: v3e9 = CALLVALUE 
0x3ea: v3ea = ISZERO v3e9
0x3eb: v3eb(0x3f3) = CONST 
0x3ee: JUMPI v3eb(0x3f3) v3ea
----------------------------------

Begin block 0x3ef
prev = {'0x3e8'}, next = {}
----------------------------------
Block 0x3ef
0x3ef: v3ef(0x0) = CONST 
0x3f2: REVERT v3ef(0x0) v3ef(0x0)
----------------------------------

Begin block 0x3f3
prev = {'0x3e8'}, next = {'0xb7c'}
----------------------------------
Block 0x3f3
0x3f4: v3f4(0x428) = CONST 
0x3f7: v3f7(0x4) = CONST 
0x3fb: v3fb = CALLDATALOAD v3f7(0x4)
0x3fc: v3fc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x411: v411 = AND v3fc(0xffffffffffffffffffffffffffffffffffffffff) v3fb
0x413: v413(0x20) = CONST 
0x415: v415(0x24) = ADD v413(0x20) v3f7(0x4)
0x41a: v41a = CALLDATALOAD v415(0x24)
0x41c: v41c(0x20) = CONST 
0x41e: v41e(0x44) = ADD v41c(0x20) v415(0x24)
0x424: v424(0xb7c) = CONST 
0x427: JUMP v424(0xb7c)
----------------------------------

Begin block 0x428
prev = {'0xb88'}, next = {}
----------------------------------
Block 0x428
0x429: STOP 
----------------------------------

Begin block 0x42a
prev = {}, next = {'0x431', '0x435'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x42a
0x42b: v42b = CALLVALUE 
0x42c: v42c = ISZERO v42b
0x42d: v42d(0x435) = CONST 
0x430: JUMPI v42d(0x435) v42c
----------------------------------

Begin block 0x431
prev = {'0x42a'}, next = {}
----------------------------------
Block 0x431
0x431: v431(0x0) = CONST 
0x434: REVERT v431(0x0) v431(0x0)
----------------------------------

Begin block 0x435
prev = {'0x42a'}, next = {'0xb8c'}
----------------------------------
Block 0x435
0x436: v436(0x4ad) = CONST 
0x439: v439(0x4) = CONST 
0x43d: v43d = CALLDATALOAD v439(0x4)
0x43e: v43e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x453: v453 = AND v43e(0xffffffffffffffffffffffffffffffffffffffff) v43d
0x455: v455(0x20) = CONST 
0x457: v457(0x24) = ADD v455(0x20) v439(0x4)
0x45c: v45c = CALLDATALOAD v457(0x24)
0x45e: v45e(0x20) = CONST 
0x460: v460(0x44) = ADD v45e(0x20) v457(0x24)
0x465: v465 = CALLDATALOAD v460(0x44)
0x467: v467(0x20) = CONST 
0x469: v469(0x64) = ADD v467(0x20) v460(0x44)
0x46c: v46c = ADD v439(0x4) v465
0x46e: v46e = CALLDATALOAD v46c
0x470: v470(0x20) = CONST 
0x472: v472 = ADD v470(0x20) v46c
0x476: v476(0x1f) = CONST 
0x478: v478 = ADD v476(0x1f) v46e
0x479: v479(0x20) = CONST 
0x47d: v47d = DIV v478 v479(0x20)
0x47e: v47e = MUL v47d v479(0x20)
0x47f: v47f(0x20) = CONST 
0x481: v481 = ADD v47f(0x20) v47e
0x482: v482(0x40) = CONST 
0x484: v484 = MLOAD v482(0x40)
0x487: v487 = ADD v484 v481
0x488: v488(0x40) = CONST 
0x48a: MSTORE v488(0x40) v487
0x492: MSTORE v484 v46e
0x493: v493(0x20) = CONST 
0x495: v495 = ADD v493(0x20) v484
0x49b: CALLDATACOPY v495 v472 v46e
0x49d: v49d = ADD v495 v46e
0x4a9: v4a9(0xb8c) = CONST 
0x4ac: JUMP v4a9(0xb8c)
----------------------------------

Begin block 0x4ad
prev = {'0xd03'}, next = {}
----------------------------------
Block 0x4ad
0x4ad_0x0: v4ad_0 = PHI vb8d(0x0) vcfa(0x1)
0x4ae: v4ae(0x40) = CONST 
0x4b0: v4b0 = MLOAD v4ae(0x40)
0x4b3: v4b3 = ISZERO v4ad_0
0x4b4: v4b4 = ISZERO v4b3
0x4b5: v4b5 = ISZERO v4b4
0x4b6: v4b6 = ISZERO v4b5
0x4b8: MSTORE v4b0 v4b6
0x4b9: v4b9(0x20) = CONST 
0x4bb: v4bb = ADD v4b9(0x20) v4b0
0x4bf: v4bf(0x40) = CONST 
0x4c1: v4c1 = MLOAD v4bf(0x40)
0x4c4: v4c4 = SUB v4bb v4c1
0x4c6: RETURN v4c1 v4c4
----------------------------------

Begin block 0x4c7
prev = {}, next = {'0x4d2', '0x4ce'}
----------------------------------
function allowance(address,address)()
Block 0x4c7
0x4c8: v4c8 = CALLVALUE 
0x4c9: v4c9 = ISZERO v4c8
0x4ca: v4ca(0x4d2) = CONST 
0x4cd: JUMPI v4ca(0x4d2) v4c9
----------------------------------

Begin block 0x4ce
prev = {'0x4c7'}, next = {}
----------------------------------
Block 0x4ce
0x4ce: v4ce(0x0) = CONST 
0x4d1: REVERT v4ce(0x0) v4ce(0x0)
----------------------------------

Begin block 0x4d2
prev = {'0x4c7'}, next = {'0xd0b'}
----------------------------------
Block 0x4d2
0x4d3: v4d3(0x51d) = CONST 
0x4d6: v4d6(0x4) = CONST 
0x4da: v4da = CALLDATALOAD v4d6(0x4)
0x4db: v4db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4f0: v4f0 = AND v4db(0xffffffffffffffffffffffffffffffffffffffff) v4da
0x4f2: v4f2(0x20) = CONST 
0x4f4: v4f4(0x24) = ADD v4f2(0x20) v4d6(0x4)
0x4f9: v4f9 = CALLDATALOAD v4f4(0x24)
0x4fa: v4fa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x50f: v50f = AND v4fa(0xffffffffffffffffffffffffffffffffffffffff) v4f9
0x511: v511(0x20) = CONST 
0x513: v513(0x44) = ADD v511(0x20) v4f4(0x24)
0x519: v519(0xd0b) = CONST 
0x51c: JUMP v519(0xd0b)
----------------------------------

Begin block 0x51d
prev = {'0xd0b'}, next = {}
----------------------------------
Block 0x51d
0x51e: v51e(0x40) = CONST 
0x520: v520 = MLOAD v51e(0x40)
0x524: MSTORE v520 vd2d
0x525: v525(0x20) = CONST 
0x527: v527 = ADD v525(0x20) v520
0x52b: v52b(0x40) = CONST 
0x52d: v52d = MLOAD v52b(0x40)
0x530: v530 = SUB v527 v52d
0x532: RETURN v52d v530
----------------------------------

Begin block 0x533
prev = {'0xc8'}, next = {'0x5c9', '0x583'}
----------------------------------
Block 0x533
0x534: v534(0x0) = CONST 
0x537: v537 = SLOAD v534(0x0)
0x538: v538(0x1) = CONST 
0x53b: v53b(0x1) = CONST 
0x53d: v53d = AND v53b(0x1) v537
0x53e: v53e = ISZERO v53d
0x53f: v53f(0x100) = CONST 
0x542: v542 = MUL v53f(0x100) v53e
0x543: v543 = SUB v542 v538(0x1)
0x544: v544 = AND v543 v537
0x545: v545(0x2) = CONST 
0x548: v548 = DIV v544 v545(0x2)
0x54a: v54a(0x1f) = CONST 
0x54c: v54c = ADD v54a(0x1f) v548
0x54d: v54d(0x20) = CONST 
0x551: v551 = DIV v54c v54d(0x20)
0x552: v552 = MUL v551 v54d(0x20)
0x553: v553(0x20) = CONST 
0x555: v555 = ADD v553(0x20) v552
0x556: v556(0x40) = CONST 
0x558: v558 = MLOAD v556(0x40)
0x55b: v55b = ADD v558 v555
0x55c: v55c(0x40) = CONST 
0x55e: MSTORE v55c(0x40) v55b
0x565: MSTORE v558 v548
0x566: v566(0x20) = CONST 
0x568: v568 = ADD v566(0x20) v558
0x56b: v56b = SLOAD v534(0x0)
0x56c: v56c(0x1) = CONST 
0x56f: v56f(0x1) = CONST 
0x571: v571 = AND v56f(0x1) v56b
0x572: v572 = ISZERO v571
0x573: v573(0x100) = CONST 
0x576: v576 = MUL v573(0x100) v572
0x577: v577 = SUB v576 v56c(0x1)
0x578: v578 = AND v577 v56b
0x579: v579(0x2) = CONST 
0x57c: v57c = DIV v578 v579(0x2)
0x57e: v57e = ISZERO v57c
0x57f: v57f(0x5c9) = CONST 
0x582: JUMPI v57f(0x5c9) v57e
----------------------------------

Begin block 0x583
prev = {'0x533'}, next = {'0x59e', '0x58b'}
----------------------------------
Block 0x583
0x584: v584(0x1f) = CONST 
0x586: v586 = LT v584(0x1f) v57c
0x587: v587(0x59e) = CONST 
0x58a: JUMPI v587(0x59e) v586
----------------------------------

Begin block 0x58b
prev = {'0x583'}, next = {'0x5c9'}
----------------------------------
Block 0x58b
0x58b: v58b(0x100) = CONST 
0x590: v590 = SLOAD v534(0x0)
0x591: v591 = DIV v590 v58b(0x100)
0x592: v592 = MUL v591 v58b(0x100)
0x594: MSTORE v568 v592
0x596: v596(0x20) = CONST 
0x598: v598 = ADD v596(0x20) v568
0x59a: v59a(0x5c9) = CONST 
0x59d: JUMP v59a(0x5c9)
----------------------------------

Begin block 0x59e
prev = {'0x583'}, next = {'0x5ac'}
----------------------------------
Block 0x59e
0x5a0: v5a0 = ADD v568 v57c
0x5a3: v5a3(0x0) = CONST 
0x5a5: MSTORE v5a3(0x0) v534(0x0)
0x5a6: v5a6(0x20) = CONST 
0x5a8: v5a8(0x0) = CONST 
0x5aa: v5aa = SHA3 v5a8(0x0) v5a6(0x20)
----------------------------------

Begin block 0x5ac
prev = {'0x5ac', '0x59e'}, next = {'0x5c0', '0x5ac'}
----------------------------------
Block 0x5ac
0x5ac_0x0: v5ac_0 = PHI v568 v5b8
0x5ac_0x1: v5ac_1 = PHI v5aa v5b4
0x5ae: v5ae = SLOAD v5ac_1
0x5b0: MSTORE v5ac_0 v5ae
0x5b2: v5b2(0x1) = CONST 
0x5b4: v5b4 = ADD v5b2(0x1) v5ac_1
0x5b6: v5b6(0x20) = CONST 
0x5b8: v5b8 = ADD v5b6(0x20) v5ac_0
0x5bb: v5bb = GT v5a0 v5b8
0x5bc: v5bc(0x5ac) = CONST 
0x5bf: JUMPI v5bc(0x5ac) v5bb
----------------------------------

Begin block 0x5c0
prev = {'0x5ac'}, next = {'0x5c9'}
----------------------------------
Block 0x5c0
0x5c2: v5c2 = SUB v5b8 v5a0
0x5c3: v5c3(0x1f) = CONST 
0x5c5: v5c5 = AND v5c3(0x1f) v5c2
0x5c7: v5c7 = ADD v5a0 v5c5
----------------------------------

Begin block 0x5c9
prev = {'0x5c0', '0x533', '0x58b'}, next = {'0xd0'}
----------------------------------
Block 0x5c9
0x5d0: JUMP vc9(0xd0)
----------------------------------

Begin block 0x5d1
prev = {}, next = {'0x659'}
----------------------------------
function 0x5d1(v5d1arg0, v5d1arg1, v5d1arg2)
Block 0x5d1
0x5d2: v5d2(0x0) = CONST 
0x5d5: v5d5(0x5) = CONST 
0x5d7: v5d7(0x0) = CONST 
0x5d9: v5d9 = CALLER 
0x5da: v5da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5ef: v5ef = AND v5da(0xffffffffffffffffffffffffffffffffffffffff) v5d9
0x5f0: v5f0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x605: v605 = AND v5f0(0xffffffffffffffffffffffffffffffffffffffff) v5ef
0x607: MSTORE v5d7(0x0) v605
0x608: v608(0x20) = CONST 
0x60a: v60a(0x20) = ADD v608(0x20) v5d7(0x0)
0x60d: MSTORE v60a(0x20) v5d5(0x5)
0x60e: v60e(0x20) = CONST 
0x610: v610(0x40) = ADD v60e(0x20) v60a(0x20)
0x611: v611(0x0) = CONST 
0x613: v613 = SHA3 v611(0x0) v610(0x40)
0x614: v614(0x0) = CONST 
0x617: v617(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x62c: v62c = AND v617(0xffffffffffffffffffffffffffffffffffffffff) v5d1arg1
0x62d: v62d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x642: v642 = AND v62d(0xffffffffffffffffffffffffffffffffffffffff) v62c
0x644: MSTORE v614(0x0) v642
0x645: v645(0x20) = CONST 
0x647: v647(0x20) = ADD v645(0x20) v614(0x0)
0x64a: MSTORE v647(0x20) v613
0x64b: v64b(0x20) = CONST 
0x64d: v64d(0x40) = ADD v64b(0x20) v647(0x20)
0x64e: v64e(0x0) = CONST 
0x650: v650 = SHA3 v64e(0x0) v64d(0x40)
0x653: SSTORE v650 v5d1arg0
0x655: v655(0x1) = CONST 
----------------------------------

Begin block 0x659
prev = {'0x5d1'}, next = {}
----------------------------------
Block 0x659
0x65e: RETURNPRIVATE v5d1arg2 v655(0x1)
----------------------------------

Begin block 0x65f
prev = {'0x1b1'}, next = {'0x1b9'}
----------------------------------
Block 0x65f
0x660: v660(0x3) = CONST 
0x662: v662 = SLOAD v660(0x3)
0x664: JUMP v1b2(0x1b9)
----------------------------------

Begin block 0x665
prev = {'0x1da'}, next = {'0x6f2', '0x6ee'}
----------------------------------
Block 0x665
0x666: v666(0x0) = CONST 
0x668: v668(0x5) = CONST 
0x66a: v66a(0x0) = CONST 
0x66d: v66d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x682: v682 = AND v66d(0xffffffffffffffffffffffffffffffffffffffff) v1f8
0x683: v683(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x698: v698 = AND v683(0xffffffffffffffffffffffffffffffffffffffff) v682
0x69a: MSTORE v66a(0x0) v698
0x69b: v69b(0x20) = CONST 
0x69d: v69d(0x20) = ADD v69b(0x20) v66a(0x0)
0x6a0: MSTORE v69d(0x20) v668(0x5)
0x6a1: v6a1(0x20) = CONST 
0x6a3: v6a3(0x40) = ADD v6a1(0x20) v69d(0x20)
0x6a4: v6a4(0x0) = CONST 
0x6a6: v6a6 = SHA3 v6a4(0x0) v6a3(0x40)
0x6a7: v6a7(0x0) = CONST 
0x6a9: v6a9 = CALLER 
0x6aa: v6aa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6bf: v6bf = AND v6aa(0xffffffffffffffffffffffffffffffffffffffff) v6a9
0x6c0: v6c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6d5: v6d5 = AND v6c0(0xffffffffffffffffffffffffffffffffffffffff) v6bf
0x6d7: MSTORE v6a7(0x0) v6d5
0x6d8: v6d8(0x20) = CONST 
0x6da: v6da(0x20) = ADD v6d8(0x20) v6a7(0x0)
0x6dd: MSTORE v6da(0x20) v6a6
0x6de: v6de(0x20) = CONST 
0x6e0: v6e0(0x40) = ADD v6de(0x20) v6da(0x20)
0x6e1: v6e1(0x0) = CONST 
0x6e3: v6e3 = SHA3 v6e1(0x0) v6e0(0x40)
0x6e4: v6e4 = SLOAD v6e3
0x6e6: v6e6 = GT v220 v6e4
0x6e7: v6e7 = ISZERO v6e6
0x6e8: v6e8 = ISZERO v6e7
0x6e9: v6e9 = ISZERO v6e8
0x6ea: v6ea(0x6f2) = CONST 
0x6ed: JUMPI v6ea(0x6f2) v6e9
----------------------------------

Begin block 0x6ee
prev = {'0x665'}, next = {}
----------------------------------
Block 0x6ee
0x6ee: v6ee(0x0) = CONST 
0x6f1: REVERT v6ee(0x0) v6ee(0x0)
----------------------------------

Begin block 0x6f2
prev = {'0x665'}, next = {'0x787'}
----------------------------------
Block 0x6f2
0x6f4: v6f4(0x5) = CONST 
0x6f6: v6f6(0x0) = CONST 
0x6f9: v6f9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x70e: v70e = AND v6f9(0xffffffffffffffffffffffffffffffffffffffff) v1f8
0x70f: v70f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x724: v724 = AND v70f(0xffffffffffffffffffffffffffffffffffffffff) v70e
0x726: MSTORE v6f6(0x0) v724
0x727: v727(0x20) = CONST 
0x729: v729(0x20) = ADD v727(0x20) v6f6(0x0)
0x72c: MSTORE v729(0x20) v6f4(0x5)
0x72d: v72d(0x20) = CONST 
0x72f: v72f(0x40) = ADD v72d(0x20) v729(0x20)
0x730: v730(0x0) = CONST 
0x732: v732 = SHA3 v730(0x0) v72f(0x40)
0x733: v733(0x0) = CONST 
0x735: v735 = CALLER 
0x736: v736(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x74b: v74b = AND v736(0xffffffffffffffffffffffffffffffffffffffff) v735
0x74c: v74c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x761: v761 = AND v74c(0xffffffffffffffffffffffffffffffffffffffff) v74b
0x763: MSTORE v733(0x0) v761
0x764: v764(0x20) = CONST 
0x766: v766(0x20) = ADD v764(0x20) v733(0x0)
0x769: MSTORE v766(0x20) v732
0x76a: v76a(0x20) = CONST 
0x76c: v76c(0x40) = ADD v76a(0x20) v766(0x20)
0x76d: v76d(0x0) = CONST 
0x76f: v76f = SHA3 v76d(0x0) v76c(0x40)
0x770: v770(0x0) = CONST 
0x774: v774 = SLOAD v76f
0x775: v775 = SUB v774 v220
0x77b: SSTORE v76f v775
0x77d: v77d(0x787) = CONST 
0x783: v783(0xd30) = CONST 
0x786: CALLPRIVATE v783(0xd30) v220 v217 v1f8 v77d(0x787)
----------------------------------

Begin block 0x787
prev = {'0x6f2'}, next = {'0x78c'}
----------------------------------
Block 0x787
0x788: v788(0x1) = CONST 
----------------------------------

Begin block 0x78c
prev = {'0x787'}, next = {'0x22e'}
----------------------------------
Block 0x78c
0x792: JUMP v1db(0x22e)
----------------------------------

Begin block 0x793
prev = {'0x253'}, next = {'0x25b'}
----------------------------------
Block 0x793
0x794: v794(0x2) = CONST 
0x796: v796(0x0) = CONST 
0x799: v799 = SLOAD v794(0x2)
0x79b: v79b(0x100) = CONST 
0x79e: v79e(0x1) = EXP v79b(0x100) v796(0x0)
0x7a0: v7a0 = DIV v799 v79e(0x1)
0x7a1: v7a1(0xff) = CONST 
0x7a3: v7a3 = AND v7a1(0xff) v7a0
0x7a5: JUMP v254(0x25b)
----------------------------------

Begin block 0x7a6
prev = {'0x282'}, next = {'0x7f6', '0x7f2'}
----------------------------------
Block 0x7a6
0x7a7: v7a7(0x0) = CONST 
0x7aa: v7aa(0x4) = CONST 
0x7ac: v7ac(0x0) = CONST 
0x7ae: v7ae = CALLER 
0x7af: v7af(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c4: v7c4 = AND v7af(0xffffffffffffffffffffffffffffffffffffffff) v7ae
0x7c5: v7c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7da: v7da = AND v7c5(0xffffffffffffffffffffffffffffffffffffffff) v7c4
0x7dc: MSTORE v7ac(0x0) v7da
0x7dd: v7dd(0x20) = CONST 
0x7df: v7df(0x20) = ADD v7dd(0x20) v7ac(0x0)
0x7e2: MSTORE v7df(0x20) v7aa(0x4)
0x7e3: v7e3(0x20) = CONST 
0x7e5: v7e5(0x40) = ADD v7e3(0x20) v7df(0x20)
0x7e6: v7e6(0x0) = CONST 
0x7e8: v7e8 = SHA3 v7e6(0x0) v7e5(0x40)
0x7e9: v7e9 = SLOAD v7e8
0x7ea: v7ea = LT v7e9 v28a
0x7eb: v7eb = ISZERO v7ea
0x7ec: v7ec = ISZERO v7eb
0x7ed: v7ed = ISZERO v7ec
0x7ee: v7ee(0x7f6) = CONST 
0x7f1: JUMPI v7ee(0x7f6) v7ed
----------------------------------

Begin block 0x7f2
prev = {'0x7a6'}, next = {}
----------------------------------
Block 0x7f2
0x7f2: v7f2(0x0) = CONST 
0x7f5: REVERT v7f2(0x0) v7f2(0x0)
----------------------------------

Begin block 0x7f6
prev = {'0x7a6'}, next = {'0x8a6'}
----------------------------------
Block 0x7f6
0x7f8: v7f8(0x4) = CONST 
0x7fa: v7fa(0x0) = CONST 
0x7fc: v7fc = CALLER 
0x7fd: v7fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x812: v812 = AND v7fd(0xffffffffffffffffffffffffffffffffffffffff) v7fc
0x813: v813(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x828: v828 = AND v813(0xffffffffffffffffffffffffffffffffffffffff) v812
0x82a: MSTORE v7fa(0x0) v828
0x82b: v82b(0x20) = CONST 
0x82d: v82d(0x20) = ADD v82b(0x20) v7fa(0x0)
0x830: MSTORE v82d(0x20) v7f8(0x4)
0x831: v831(0x20) = CONST 
0x833: v833(0x40) = ADD v831(0x20) v82d(0x20)
0x834: v834(0x0) = CONST 
0x836: v836 = SHA3 v834(0x0) v833(0x40)
0x837: v837(0x0) = CONST 
0x83b: v83b = SLOAD v836
0x83c: v83c = SUB v83b v28a
0x842: SSTORE v836 v83c
0x845: v845(0x3) = CONST 
0x847: v847(0x0) = CONST 
0x84b: v84b = SLOAD v845(0x3)
0x84c: v84c = SUB v84b v28a
0x852: SSTORE v845(0x3) v84c
0x854: v854 = CALLER 
0x855: v855(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86a: v86a = AND v855(0xffffffffffffffffffffffffffffffffffffffff) v854
0x86b: v86b(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x88d: v88d(0x40) = CONST 
0x88f: v88f = MLOAD v88d(0x40)
0x893: MSTORE v88f v28a
0x894: v894(0x20) = CONST 
0x896: v896 = ADD v894(0x20) v88f
0x89a: v89a(0x40) = CONST 
0x89c: v89c = MLOAD v89a(0x40)
0x89f: v89f = SUB v896 v89c
0x8a1: LOG2 v89c v89f v86b(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v86a
0x8a2: v8a2(0x1) = CONST 
----------------------------------

Begin block 0x8a6
prev = {'0x7f6'}, next = {'0x298'}
----------------------------------
Block 0x8a6
0x8aa: JUMP v283(0x298)
----------------------------------

Begin block 0x8ab
prev = {'0x2bd'}, next = {'0x2e9'}
----------------------------------
Block 0x8ab
0x8ac: v8ac(0x4) = CONST 
0x8ae: v8ae(0x20) = CONST 
0x8b0: MSTORE v8ae(0x20) v8ac(0x4)
0x8b2: v8b2(0x0) = CONST 
0x8b4: MSTORE v8b2(0x0) v2db
0x8b5: v8b5(0x40) = CONST 
0x8b7: v8b7(0x0) = CONST 
0x8b9: v8b9 = SHA3 v8b7(0x0) v8b5(0x40)
0x8ba: v8ba(0x0) = CONST 
0x8c0: v8c0 = SLOAD v8b9
0x8c2: JUMP v2be(0x2e9)
----------------------------------

Begin block 0x8c3
prev = {'0x30a'}, next = {'0x90f', '0x913'}
----------------------------------
Block 0x8c3
0x8c4: v8c4(0x0) = CONST 
0x8c7: v8c7(0x4) = CONST 
0x8c9: v8c9(0x0) = CONST 
0x8cc: v8cc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8e1: v8e1 = AND v8cc(0xffffffffffffffffffffffffffffffffffffffff) v328
0x8e2: v8e2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f7: v8f7 = AND v8e2(0xffffffffffffffffffffffffffffffffffffffff) v8e1
0x8f9: MSTORE v8c9(0x0) v8f7
0x8fa: v8fa(0x20) = CONST 
0x8fc: v8fc(0x20) = ADD v8fa(0x20) v8c9(0x0)
0x8ff: MSTORE v8fc(0x20) v8c7(0x4)
0x900: v900(0x20) = CONST 
0x902: v902(0x40) = ADD v900(0x20) v8fc(0x20)
0x903: v903(0x0) = CONST 
0x905: v905 = SHA3 v903(0x0) v902(0x40)
0x906: v906 = SLOAD v905
0x907: v907 = LT v906 v331
0x908: v908 = ISZERO v907
0x909: v909 = ISZERO v908
0x90a: v90a = ISZERO v909
0x90b: v90b(0x913) = CONST 
0x90e: JUMPI v90b(0x913) v90a
----------------------------------

Begin block 0x90f
prev = {'0x8c3'}, next = {}
----------------------------------
Block 0x90f
0x90f: v90f(0x0) = CONST 
0x912: REVERT v90f(0x0) v90f(0x0)
----------------------------------

Begin block 0x913
prev = {'0x8c3'}, next = {'0x99a', '0x99e'}
----------------------------------
Block 0x913
0x914: v914(0x5) = CONST 
0x916: v916(0x0) = CONST 
0x919: v919(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x92e: v92e = AND v919(0xffffffffffffffffffffffffffffffffffffffff) v328
0x92f: v92f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x944: v944 = AND v92f(0xffffffffffffffffffffffffffffffffffffffff) v92e
0x946: MSTORE v916(0x0) v944
0x947: v947(0x20) = CONST 
0x949: v949(0x20) = ADD v947(0x20) v916(0x0)
0x94c: MSTORE v949(0x20) v914(0x5)
0x94d: v94d(0x20) = CONST 
0x94f: v94f(0x40) = ADD v94d(0x20) v949(0x20)
0x950: v950(0x0) = CONST 
0x952: v952 = SHA3 v950(0x0) v94f(0x40)
0x953: v953(0x0) = CONST 
0x955: v955 = CALLER 
0x956: v956(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x96b: v96b = AND v956(0xffffffffffffffffffffffffffffffffffffffff) v955
0x96c: v96c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x981: v981 = AND v96c(0xffffffffffffffffffffffffffffffffffffffff) v96b
0x983: MSTORE v953(0x0) v981
0x984: v984(0x20) = CONST 
0x986: v986(0x20) = ADD v984(0x20) v953(0x0)
0x989: MSTORE v986(0x20) v952
0x98a: v98a(0x20) = CONST 
0x98c: v98c(0x40) = ADD v98a(0x20) v986(0x20)
0x98d: v98d(0x0) = CONST 
0x98f: v98f = SHA3 v98d(0x0) v98c(0x40)
0x990: v990 = SLOAD v98f
0x992: v992 = GT v331 v990
0x993: v993 = ISZERO v992
0x994: v994 = ISZERO v993
0x995: v995 = ISZERO v994
0x996: v996(0x99e) = CONST 
0x999: JUMPI v996(0x99e) v995
----------------------------------

Begin block 0x99a
prev = {'0x913'}, next = {}
----------------------------------
Block 0x99a
0x99a: v99a(0x0) = CONST 
0x99d: REVERT v99a(0x0) v99a(0x0)
----------------------------------

Begin block 0x99e
prev = {'0x913'}, next = {'0xad8'}
----------------------------------
Block 0x99e
0x9a0: v9a0(0x4) = CONST 
0x9a2: v9a2(0x0) = CONST 
0x9a5: v9a5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ba: v9ba = AND v9a5(0xffffffffffffffffffffffffffffffffffffffff) v328
0x9bb: v9bb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d0: v9d0 = AND v9bb(0xffffffffffffffffffffffffffffffffffffffff) v9ba
0x9d2: MSTORE v9a2(0x0) v9d0
0x9d3: v9d3(0x20) = CONST 
0x9d5: v9d5(0x20) = ADD v9d3(0x20) v9a2(0x0)
0x9d8: MSTORE v9d5(0x20) v9a0(0x4)
0x9d9: v9d9(0x20) = CONST 
0x9db: v9db(0x40) = ADD v9d9(0x20) v9d5(0x20)
0x9dc: v9dc(0x0) = CONST 
0x9de: v9de = SHA3 v9dc(0x0) v9db(0x40)
0x9df: v9df(0x0) = CONST 
0x9e3: v9e3 = SLOAD v9de
0x9e4: v9e4 = SUB v9e3 v331
0x9ea: SSTORE v9de v9e4
0x9ed: v9ed(0x5) = CONST 
0x9ef: v9ef(0x0) = CONST 
0x9f2: v9f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa07: va07 = AND v9f2(0xffffffffffffffffffffffffffffffffffffffff) v328
0xa08: va08(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa1d: va1d = AND va08(0xffffffffffffffffffffffffffffffffffffffff) va07
0xa1f: MSTORE v9ef(0x0) va1d
0xa20: va20(0x20) = CONST 
0xa22: va22(0x20) = ADD va20(0x20) v9ef(0x0)
0xa25: MSTORE va22(0x20) v9ed(0x5)
0xa26: va26(0x20) = CONST 
0xa28: va28(0x40) = ADD va26(0x20) va22(0x20)
0xa29: va29(0x0) = CONST 
0xa2b: va2b = SHA3 va29(0x0) va28(0x40)
0xa2c: va2c(0x0) = CONST 
0xa2e: va2e = CALLER 
0xa2f: va2f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa44: va44 = AND va2f(0xffffffffffffffffffffffffffffffffffffffff) va2e
0xa45: va45(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa5a: va5a = AND va45(0xffffffffffffffffffffffffffffffffffffffff) va44
0xa5c: MSTORE va2c(0x0) va5a
0xa5d: va5d(0x20) = CONST 
0xa5f: va5f(0x20) = ADD va5d(0x20) va2c(0x0)
0xa62: MSTORE va5f(0x20) va2b
0xa63: va63(0x20) = CONST 
0xa65: va65(0x40) = ADD va63(0x20) va5f(0x20)
0xa66: va66(0x0) = CONST 
0xa68: va68 = SHA3 va66(0x0) va65(0x40)
0xa69: va69(0x0) = CONST 
0xa6d: va6d = SLOAD va68
0xa6e: va6e = SUB va6d v331
0xa74: SSTORE va68 va6e
0xa77: va77(0x3) = CONST 
0xa79: va79(0x0) = CONST 
0xa7d: va7d = SLOAD va77(0x3)
0xa7e: va7e = SUB va7d v331
0xa84: SSTORE va77(0x3) va7e
0xa87: va87(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa9c: va9c = AND va87(0xffffffffffffffffffffffffffffffffffffffff) v328
0xa9d: va9d(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0xabf: vabf(0x40) = CONST 
0xac1: vac1 = MLOAD vabf(0x40)
0xac5: MSTORE vac1 v331
0xac6: vac6(0x20) = CONST 
0xac8: vac8 = ADD vac6(0x20) vac1
0xacc: vacc(0x40) = CONST 
0xace: vace = MLOAD vacc(0x40)
0xad1: vad1 = SUB vac8 vace
0xad3: LOG2 vace vad1 va9d(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) va9c
0xad4: vad4(0x1) = CONST 
----------------------------------

Begin block 0xad8
prev = {'0x99e'}, next = {'0x33f'}
----------------------------------
Block 0xad8
0xadd: JUMP v30b(0x33f)
----------------------------------

Begin block 0xade
prev = {'0x364'}, next = {'0xb2e', '0xb74'}
----------------------------------
Block 0xade
0xadf: vadf(0x1) = CONST 
0xae2: vae2 = SLOAD vadf(0x1)
0xae3: vae3(0x1) = CONST 
0xae6: vae6(0x1) = CONST 
0xae8: vae8 = AND vae6(0x1) vae2
0xae9: vae9 = ISZERO vae8
0xaea: vaea(0x100) = CONST 
0xaed: vaed = MUL vaea(0x100) vae9
0xaee: vaee = SUB vaed vae3(0x1)
0xaef: vaef = AND vaee vae2
0xaf0: vaf0(0x2) = CONST 
0xaf3: vaf3 = DIV vaef vaf0(0x2)
0xaf5: vaf5(0x1f) = CONST 
0xaf7: vaf7 = ADD vaf5(0x1f) vaf3
0xaf8: vaf8(0x20) = CONST 
0xafc: vafc = DIV vaf7 vaf8(0x20)
0xafd: vafd = MUL vafc vaf8(0x20)
0xafe: vafe(0x20) = CONST 
0xb00: vb00 = ADD vafe(0x20) vafd
0xb01: vb01(0x40) = CONST 
0xb03: vb03 = MLOAD vb01(0x40)
0xb06: vb06 = ADD vb03 vb00
0xb07: vb07(0x40) = CONST 
0xb09: MSTORE vb07(0x40) vb06
0xb10: MSTORE vb03 vaf3
0xb11: vb11(0x20) = CONST 
0xb13: vb13 = ADD vb11(0x20) vb03
0xb16: vb16 = SLOAD vadf(0x1)
0xb17: vb17(0x1) = CONST 
0xb1a: vb1a(0x1) = CONST 
0xb1c: vb1c = AND vb1a(0x1) vb16
0xb1d: vb1d = ISZERO vb1c
0xb1e: vb1e(0x100) = CONST 
0xb21: vb21 = MUL vb1e(0x100) vb1d
0xb22: vb22 = SUB vb21 vb17(0x1)
0xb23: vb23 = AND vb22 vb16
0xb24: vb24(0x2) = CONST 
0xb27: vb27 = DIV vb23 vb24(0x2)
0xb29: vb29 = ISZERO vb27
0xb2a: vb2a(0xb74) = CONST 
0xb2d: JUMPI vb2a(0xb74) vb29
----------------------------------

Begin block 0xb2e
prev = {'0xade'}, next = {'0xb49', '0xb36'}
----------------------------------
Block 0xb2e
0xb2f: vb2f(0x1f) = CONST 
0xb31: vb31 = LT vb2f(0x1f) vb27
0xb32: vb32(0xb49) = CONST 
0xb35: JUMPI vb32(0xb49) vb31
----------------------------------

Begin block 0xb36
prev = {'0xb2e'}, next = {'0xb74'}
----------------------------------
Block 0xb36
0xb36: vb36(0x100) = CONST 
0xb3b: vb3b = SLOAD vadf(0x1)
0xb3c: vb3c = DIV vb3b vb36(0x100)
0xb3d: vb3d = MUL vb3c vb36(0x100)
0xb3f: MSTORE vb13 vb3d
0xb41: vb41(0x20) = CONST 
0xb43: vb43 = ADD vb41(0x20) vb13
0xb45: vb45(0xb74) = CONST 
0xb48: JUMP vb45(0xb74)
----------------------------------

Begin block 0xb49
prev = {'0xb2e'}, next = {'0xb57'}
----------------------------------
Block 0xb49
0xb4b: vb4b = ADD vb13 vb27
0xb4e: vb4e(0x0) = CONST 
0xb50: MSTORE vb4e(0x0) vadf(0x1)
0xb51: vb51(0x20) = CONST 
0xb53: vb53(0x0) = CONST 
0xb55: vb55 = SHA3 vb53(0x0) vb51(0x20)
----------------------------------

Begin block 0xb57
prev = {'0xb49', '0xb57'}, next = {'0xb6b', '0xb57'}
----------------------------------
Block 0xb57
0xb57_0x0: vb57_0 = PHI vb13 vb63
0xb57_0x1: vb57_1 = PHI vb55 vb5f
0xb59: vb59 = SLOAD vb57_1
0xb5b: MSTORE vb57_0 vb59
0xb5d: vb5d(0x1) = CONST 
0xb5f: vb5f = ADD vb5d(0x1) vb57_1
0xb61: vb61(0x20) = CONST 
0xb63: vb63 = ADD vb61(0x20) vb57_0
0xb66: vb66 = GT vb4b vb63
0xb67: vb67(0xb57) = CONST 
0xb6a: JUMPI vb67(0xb57) vb66
----------------------------------

Begin block 0xb6b
prev = {'0xb57'}, next = {'0xb74'}
----------------------------------
Block 0xb6b
0xb6d: vb6d = SUB vb63 vb4b
0xb6e: vb6e(0x1f) = CONST 
0xb70: vb70 = AND vb6e(0x1f) vb6d
0xb72: vb72 = ADD vb4b vb70
----------------------------------

Begin block 0xb74
prev = {'0xade', '0xb6b', '0xb36'}, next = {'0x36c'}
----------------------------------
Block 0xb74
0xb7b: JUMP v365(0x36c)
----------------------------------

Begin block 0xb7c
prev = {'0x3f3'}, next = {'0xb87'}
----------------------------------
Block 0xb7c
0xb7d: vb7d(0xb87) = CONST 
0xb80: vb80 = CALLER 
0xb83: vb83(0xd30) = CONST 
0xb86: CALLPRIVATE vb83(0xd30) v41a v411 vb80 vb7d(0xb87)
----------------------------------

Begin block 0xb87
prev = {'0xb7c'}, next = {'0xb88'}
----------------------------------
Block 0xb87
----------------------------------

Begin block 0xb88
prev = {'0xb87'}, next = {'0x428'}
----------------------------------
Block 0xb88
0xb8b: JUMP v3f4(0x428)
----------------------------------

Begin block 0xb8c
prev = {'0x435'}, next = {'0xb9c'}
----------------------------------
Block 0xb8c
0xb8d: vb8d(0x0) = CONST 
0xb93: vb93(0xb9c) = CONST 
0xb98: vb98(0x5d1) = CONST 
0xb9b: vb9b_0 = CALLPRIVATE vb98(0x5d1) v45c v453 vb93(0xb9c)
----------------------------------

Begin block 0xb9c
prev = {'0xb8c'}, next = {'0xba2', '0xd02'}
----------------------------------
Block 0xb9c
0xb9d: vb9d = ISZERO vb9b_0
0xb9e: vb9e(0xd02) = CONST 
0xba1: JUMPI vb9e(0xd02) vb9d
----------------------------------

Begin block 0xba2
prev = {'0xb9c'}, next = {'0xc7b'}
----------------------------------
Block 0xba2
0xba3: vba3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbb8: vbb8 = AND vba3(0xffffffffffffffffffffffffffffffffffffffff) v453
0xbb9: vbb9(0x8f4ffcb1) = CONST 
0xbbe: vbbe = CALLER 
0xbc0: vbc0 = ADDRESS 
0xbc2: vbc2(0x40) = CONST 
0xbc4: vbc4 = MLOAD vbc2(0x40)
0xbc6: vbc6(0xffffffff) = CONST 
0xbcb: vbcb(0x8f4ffcb1) = AND vbc6(0xffffffff) vbb9(0x8f4ffcb1)
0xbcc: vbcc(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xbea: vbea(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL vbcc(0x100000000000000000000000000000000000000000000000000000000) vbcb(0x8f4ffcb1)
0xbec: MSTORE vbc4 vbea(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0xbed: vbed(0x4) = CONST 
0xbef: vbef = ADD vbed(0x4) vbc4
0xbf2: vbf2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc07: vc07 = AND vbf2(0xffffffffffffffffffffffffffffffffffffffff) vbbe
0xc08: vc08(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc1d: vc1d = AND vc08(0xffffffffffffffffffffffffffffffffffffffff) vc07
0xc1f: MSTORE vbef vc1d
0xc20: vc20(0x20) = CONST 
0xc22: vc22 = ADD vc20(0x20) vbef
0xc25: MSTORE vc22 v45c
0xc26: vc26(0x20) = CONST 
0xc28: vc28 = ADD vc26(0x20) vc22
0xc2a: vc2a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc3f: vc3f = AND vc2a(0xffffffffffffffffffffffffffffffffffffffff) vbc0
0xc40: vc40(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc55: vc55 = AND vc40(0xffffffffffffffffffffffffffffffffffffffff) vc3f
0xc57: MSTORE vc28 vc55
0xc58: vc58(0x20) = CONST 
0xc5a: vc5a = ADD vc58(0x20) vc28
0xc5c: vc5c(0x20) = CONST 
0xc5e: vc5e = ADD vc5c(0x20) vc5a
0xc61: vc61 = SUB vc5e vbef
0xc63: MSTORE vc5a vc61
0xc67: vc67 = MLOAD v484
0xc69: MSTORE vc5e vc67
0xc6a: vc6a(0x20) = CONST 
0xc6c: vc6c = ADD vc6a(0x20) vc5e
0xc70: vc70 = MLOAD v484
0xc72: vc72(0x20) = CONST 
0xc74: vc74 = ADD vc72(0x20) v484
0xc79: vc79(0x0) = CONST 
----------------------------------

Begin block 0xc7b
prev = {'0xc8c', '0xba2'}, next = {'0xc84', '0xc97'}
----------------------------------
Block 0xc7b
0xc7b_0x0: vc7b_0 = PHI vc79(0x0) vc90
0xc7e: vc7e = LT vc7b_0 vc70
0xc7f: vc7f = ISZERO vc7e
0xc80: vc80(0xc97) = CONST 
0xc83: JUMPI vc80(0xc97) vc7f
----------------------------------

Begin block 0xc84
prev = {'0xc7b'}, next = {'0xc8c'}
----------------------------------
Block 0xc84
0xc84_0x0: vc84_0 = PHI vc79(0x0) vc90
0xc86: vc86 = ADD vc74 vc84_0
0xc87: vc87 = MLOAD vc86
0xc8a: vc8a = ADD vc6c vc84_0
0xc8b: MSTORE vc8a vc87
----------------------------------

Begin block 0xc8c
prev = {'0xc84'}, next = {'0xc7b'}
----------------------------------
Block 0xc8c
0xc8c_0x0: vc8c_0 = PHI vc79(0x0) vc90
0xc8d: vc8d(0x20) = CONST 
0xc90: vc90 = ADD vc8c_0 vc8d(0x20)
0xc93: vc93(0xc7b) = CONST 
0xc96: JUMP vc93(0xc7b)
----------------------------------

Begin block 0xc97
prev = {'0xc7b'}, next = {'0xcab', '0xcc4'}
----------------------------------
Block 0xc97
0xca0: vca0 = ADD vc70 vc6c
0xca2: vca2(0x1f) = CONST 
0xca4: vca4 = AND vca2(0x1f) vc70
0xca6: vca6 = ISZERO vca4
0xca7: vca7(0xcc4) = CONST 
0xcaa: JUMPI vca7(0xcc4) vca6
----------------------------------

Begin block 0xcab
prev = {'0xc97'}, next = {'0xcc4'}
----------------------------------
Block 0xcab
0xcad: vcad = SUB vca0 vca4
0xcaf: vcaf = MLOAD vcad
0xcb0: vcb0(0x1) = CONST 
0xcb3: vcb3(0x20) = CONST 
0xcb5: vcb5 = SUB vcb3(0x20) vca4
0xcb6: vcb6(0x100) = CONST 
0xcb9: vcb9 = EXP vcb6(0x100) vcb5
0xcba: vcba = SUB vcb9 vcb0(0x1)
0xcbb: vcbb = NOT vcba
0xcbc: vcbc = AND vcbb vcaf
0xcbe: MSTORE vcad vcbc
0xcbf: vcbf(0x20) = CONST 
0xcc1: vcc1 = ADD vcbf(0x20) vcad
----------------------------------

Begin block 0xcc4
prev = {'0xc97', '0xcab'}, next = {'0xce5', '0xce1'}
----------------------------------
Block 0xcc4
0xcc4_0x1: vcc4_1 = PHI vca0 vcc1
0xccd: vccd(0x0) = CONST 
0xccf: vccf(0x40) = CONST 
0xcd1: vcd1 = MLOAD vccf(0x40)
0xcd4: vcd4 = SUB vcc4_1 vcd1
0xcd6: vcd6(0x0) = CONST 
0xcda: vcda = EXTCODESIZE vbb8
0xcdb: vcdb = ISZERO vcda
0xcdc: vcdc = ISZERO vcdb
0xcdd: vcdd(0xce5) = CONST 
0xce0: JUMPI vcdd(0xce5) vcdc
----------------------------------

Begin block 0xce1
prev = {'0xcc4'}, next = {}
----------------------------------
Block 0xce1
0xce1: vce1(0x0) = CONST 
0xce4: REVERT vce1(0x0) vce1(0x0)
----------------------------------

Begin block 0xce5
prev = {'0xcc4'}, next = {'0xcf2', '0xcf6'}
----------------------------------
Block 0xce5
0xce6: vce6(0x2c6) = CONST 
0xce9: vce9 = GAS 
0xcea: vcea = SUB vce9 vce6(0x2c6)
0xceb: vceb = CALL vcea vbb8 vcd6(0x0) vcd1 vcd4 vcd1 vccd(0x0)
0xcec: vcec = ISZERO vceb
0xced: vced = ISZERO vcec
0xcee: vcee(0xcf6) = CONST 
0xcf1: JUMPI vcee(0xcf6) vced
----------------------------------

Begin block 0xcf2
prev = {'0xce5'}, next = {}
----------------------------------
Block 0xcf2
0xcf2: vcf2(0x0) = CONST 
0xcf5: REVERT vcf2(0x0) vcf2(0x0)
----------------------------------

Begin block 0xcf6
prev = {'0xce5'}, next = {'0xd03'}
----------------------------------
Block 0xcf6
0xcfa: vcfa(0x1) = CONST 
0xcfe: vcfe(0xd03) = CONST 
0xd01: JUMP vcfe(0xd03)
----------------------------------

Begin block 0xd02
prev = {'0xb9c'}, next = {'0xd03'}
----------------------------------
Block 0xd02
----------------------------------

Begin block 0xd03
prev = {'0xd02', '0xcf6'}, next = {'0x4ad'}
----------------------------------
Block 0xd03
0xd0a: JUMP v436(0x4ad)
----------------------------------

Begin block 0xd0b
prev = {'0x4d2'}, next = {'0x51d'}
----------------------------------
Block 0xd0b
0xd0c: vd0c(0x5) = CONST 
0xd0e: vd0e(0x20) = CONST 
0xd10: MSTORE vd0e(0x20) vd0c(0x5)
0xd12: vd12(0x0) = CONST 
0xd14: MSTORE vd12(0x0) v4f0
0xd15: vd15(0x40) = CONST 
0xd17: vd17(0x0) = CONST 
0xd19: vd19 = SHA3 vd17(0x0) vd15(0x40)
0xd1a: vd1a(0x20) = CONST 
0xd1c: MSTORE vd1a(0x20) vd19
0xd1e: vd1e(0x0) = CONST 
0xd20: MSTORE vd1e(0x0) v50f
0xd21: vd21(0x40) = CONST 
0xd23: vd23(0x0) = CONST 
0xd25: vd25 = SHA3 vd23(0x0) vd21(0x40)
0xd26: vd26(0x0) = CONST 
0xd2d: vd2d = SLOAD vd25
0xd2f: JUMP v4d3(0x51d)
----------------------------------

Begin block 0xd30
prev = {}, next = {'0xd53', '0xd57'}
----------------------------------
function 0xd30(vd30arg0, vd30arg1, vd30arg2, vd30arg3)
Block 0xd30
0xd31: vd31(0x0) = CONST 
0xd35: vd35(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4a: vd4a = AND vd35(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xd4b: vd4b = EQ vd4a vd31(0x0)
0xd4c: vd4c = ISZERO vd4b
0xd4d: vd4d = ISZERO vd4c
0xd4e: vd4e = ISZERO vd4d
0xd4f: vd4f(0xd57) = CONST 
0xd52: JUMPI vd4f(0xd57) vd4e
----------------------------------

Begin block 0xd53
prev = {'0xd30'}, next = {}
----------------------------------
Block 0xd53
0xd53: vd53(0x0) = CONST 
0xd56: REVERT vd53(0x0) vd53(0x0)
----------------------------------

Begin block 0xd57
prev = {'0xd30'}, next = {'0xda5', '0xda1'}
----------------------------------
Block 0xd57
0xd59: vd59(0x4) = CONST 
0xd5b: vd5b(0x0) = CONST 
0xd5e: vd5e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd73: vd73 = AND vd5e(0xffffffffffffffffffffffffffffffffffffffff) vd30arg2
0xd74: vd74(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd89: vd89 = AND vd74(0xffffffffffffffffffffffffffffffffffffffff) vd73
0xd8b: MSTORE vd5b(0x0) vd89
0xd8c: vd8c(0x20) = CONST 
0xd8e: vd8e(0x20) = ADD vd8c(0x20) vd5b(0x0)
0xd91: MSTORE vd8e(0x20) vd59(0x4)
0xd92: vd92(0x20) = CONST 
0xd94: vd94(0x40) = ADD vd92(0x20) vd8e(0x20)
0xd95: vd95(0x0) = CONST 
0xd97: vd97 = SHA3 vd95(0x0) vd94(0x40)
0xd98: vd98 = SLOAD vd97
0xd99: vd99 = LT vd98 vd30arg0
0xd9a: vd9a = ISZERO vd99
0xd9b: vd9b = ISZERO vd9a
0xd9c: vd9c = ISZERO vd9b
0xd9d: vd9d(0xda5) = CONST 
0xda0: JUMPI vd9d(0xda5) vd9c
----------------------------------

Begin block 0xda1
prev = {'0xd57'}, next = {}
----------------------------------
Block 0xda1
0xda1: vda1(0x0) = CONST 
0xda4: REVERT vda1(0x0) vda1(0x0)
----------------------------------

Begin block 0xda5
prev = {'0xd57'}, next = {'0xe2f', '0xe33'}
----------------------------------
Block 0xda5
0xda6: vda6(0x4) = CONST 
0xda8: vda8(0x0) = CONST 
0xdab: vdab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc0: vdc0 = AND vdab(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xdc1: vdc1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdd6: vdd6 = AND vdc1(0xffffffffffffffffffffffffffffffffffffffff) vdc0
0xdd8: MSTORE vda8(0x0) vdd6
0xdd9: vdd9(0x20) = CONST 
0xddb: vddb(0x20) = ADD vdd9(0x20) vda8(0x0)
0xdde: MSTORE vddb(0x20) vda6(0x4)
0xddf: vddf(0x20) = CONST 
0xde1: vde1(0x40) = ADD vddf(0x20) vddb(0x20)
0xde2: vde2(0x0) = CONST 
0xde4: vde4 = SHA3 vde2(0x0) vde1(0x40)
0xde5: vde5 = SLOAD vde4
0xde7: vde7(0x4) = CONST 
0xde9: vde9(0x0) = CONST 
0xdec: vdec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe01: ve01 = AND vdec(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xe02: ve02(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe17: ve17 = AND ve02(0xffffffffffffffffffffffffffffffffffffffff) ve01
0xe19: MSTORE vde9(0x0) ve17
0xe1a: ve1a(0x20) = CONST 
0xe1c: ve1c(0x20) = ADD ve1a(0x20) vde9(0x0)
0xe1f: MSTORE ve1c(0x20) vde7(0x4)
0xe20: ve20(0x20) = CONST 
0xe22: ve22(0x40) = ADD ve20(0x20) ve1c(0x20)
0xe23: ve23(0x0) = CONST 
0xe25: ve25 = SHA3 ve23(0x0) ve22(0x40)
0xe26: ve26 = SLOAD ve25
0xe27: ve27 = ADD ve26 vd30arg0
0xe28: ve28 = GT ve27 vde5
0xe29: ve29 = ISZERO ve28
0xe2a: ve2a = ISZERO ve29
0xe2b: ve2b(0xe33) = CONST 
0xe2e: JUMPI ve2b(0xe33) ve2a
----------------------------------

Begin block 0xe2f
prev = {'0xda5'}, next = {}
----------------------------------
Block 0xe2f
0xe2f: ve2f(0x0) = CONST 
0xe32: REVERT ve2f(0x0) ve2f(0x0)
----------------------------------

Begin block 0xe33
prev = {'0xda5'}, next = {'0x103f', '0x1040'}
----------------------------------
Block 0xe33
0xe34: ve34(0x4) = CONST 
0xe36: ve36(0x0) = CONST 
0xe39: ve39(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe4e: ve4e = AND ve39(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xe4f: ve4f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe64: ve64 = AND ve4f(0xffffffffffffffffffffffffffffffffffffffff) ve4e
0xe66: MSTORE ve36(0x0) ve64
0xe67: ve67(0x20) = CONST 
0xe69: ve69(0x20) = ADD ve67(0x20) ve36(0x0)
0xe6c: MSTORE ve69(0x20) ve34(0x4)
0xe6d: ve6d(0x20) = CONST 
0xe6f: ve6f(0x40) = ADD ve6d(0x20) ve69(0x20)
0xe70: ve70(0x0) = CONST 
0xe72: ve72 = SHA3 ve70(0x0) ve6f(0x40)
0xe73: ve73 = SLOAD ve72
0xe74: ve74(0x4) = CONST 
0xe76: ve76(0x0) = CONST 
0xe79: ve79(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe8e: ve8e = AND ve79(0xffffffffffffffffffffffffffffffffffffffff) vd30arg2
0xe8f: ve8f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xea4: vea4 = AND ve8f(0xffffffffffffffffffffffffffffffffffffffff) ve8e
0xea6: MSTORE ve76(0x0) vea4
0xea7: vea7(0x20) = CONST 
0xea9: vea9(0x20) = ADD vea7(0x20) ve76(0x0)
0xeac: MSTORE vea9(0x20) ve74(0x4)
0xead: vead(0x20) = CONST 
0xeaf: veaf(0x40) = ADD vead(0x20) vea9(0x20)
0xeb0: veb0(0x0) = CONST 
0xeb2: veb2 = SHA3 veb0(0x0) veaf(0x40)
0xeb3: veb3 = SLOAD veb2
0xeb4: veb4 = ADD veb3 ve73
0xeb8: veb8(0x4) = CONST 
0xeba: veba(0x0) = CONST 
0xebd: vebd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xed2: ved2 = AND vebd(0xffffffffffffffffffffffffffffffffffffffff) vd30arg2
0xed3: ved3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xee8: vee8 = AND ved3(0xffffffffffffffffffffffffffffffffffffffff) ved2
0xeea: MSTORE veba(0x0) vee8
0xeeb: veeb(0x20) = CONST 
0xeed: veed(0x20) = ADD veeb(0x20) veba(0x0)
0xef0: MSTORE veed(0x20) veb8(0x4)
0xef1: vef1(0x20) = CONST 
0xef3: vef3(0x40) = ADD vef1(0x20) veed(0x20)
0xef4: vef4(0x0) = CONST 
0xef6: vef6 = SHA3 vef4(0x0) vef3(0x40)
0xef7: vef7(0x0) = CONST 
0xefb: vefb = SLOAD vef6
0xefc: vefc = SUB vefb vd30arg0
0xf02: SSTORE vef6 vefc
0xf05: vf05(0x4) = CONST 
0xf07: vf07(0x0) = CONST 
0xf0a: vf0a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1f: vf1f = AND vf0a(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xf20: vf20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf35: vf35 = AND vf20(0xffffffffffffffffffffffffffffffffffffffff) vf1f
0xf37: MSTORE vf07(0x0) vf35
0xf38: vf38(0x20) = CONST 
0xf3a: vf3a(0x20) = ADD vf38(0x20) vf07(0x0)
0xf3d: MSTORE vf3a(0x20) vf05(0x4)
0xf3e: vf3e(0x20) = CONST 
0xf40: vf40(0x40) = ADD vf3e(0x20) vf3a(0x20)
0xf41: vf41(0x0) = CONST 
0xf43: vf43 = SHA3 vf41(0x0) vf40(0x40)
0xf44: vf44(0x0) = CONST 
0xf48: vf48 = SLOAD vf43
0xf49: vf49 = ADD vf48 vd30arg0
0xf4f: SSTORE vf43 vf49
0xf52: vf52(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf67: vf67 = AND vf52(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xf69: vf69(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf7e: vf7e = AND vf69(0xffffffffffffffffffffffffffffffffffffffff) vd30arg2
0xf7f: vf7f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xfa1: vfa1(0x40) = CONST 
0xfa3: vfa3 = MLOAD vfa1(0x40)
0xfa7: MSTORE vfa3 vd30arg0
0xfa8: vfa8(0x20) = CONST 
0xfaa: vfaa = ADD vfa8(0x20) vfa3
0xfae: vfae(0x40) = CONST 
0xfb0: vfb0 = MLOAD vfae(0x40)
0xfb3: vfb3 = SUB vfaa vfb0
0xfb5: LOG3 vfb0 vfb3 vf7f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vf7e vf67
0xfb7: vfb7(0x4) = CONST 
0xfb9: vfb9(0x0) = CONST 
0xfbc: vfbc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfd1: vfd1 = AND vfbc(0xffffffffffffffffffffffffffffffffffffffff) vd30arg1
0xfd2: vfd2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfe7: vfe7 = AND vfd2(0xffffffffffffffffffffffffffffffffffffffff) vfd1
0xfe9: MSTORE vfb9(0x0) vfe7
0xfea: vfea(0x20) = CONST 
0xfec: vfec(0x20) = ADD vfea(0x20) vfb9(0x0)
0xfef: MSTORE vfec(0x20) vfb7(0x4)
0xff0: vff0(0x20) = CONST 
0xff2: vff2(0x40) = ADD vff0(0x20) vfec(0x20)
0xff3: vff3(0x0) = CONST 
0xff5: vff5 = SHA3 vff3(0x0) vff2(0x40)
0xff6: vff6 = SLOAD vff5
0xff7: vff7(0x4) = CONST 
0xff9: vff9(0x0) = CONST 
0xffc: vffc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1011: v1011 = AND vffc(0xffffffffffffffffffffffffffffffffffffffff) vd30arg2
0x1012: v1012(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1027: v1027 = AND v1012(0xffffffffffffffffffffffffffffffffffffffff) v1011
0x1029: MSTORE vff9(0x0) v1027
0x102a: v102a(0x20) = CONST 
0x102c: v102c(0x20) = ADD v102a(0x20) vff9(0x0)
0x102f: MSTORE v102c(0x20) vff7(0x4)
0x1030: v1030(0x20) = CONST 
0x1032: v1032(0x40) = ADD v1030(0x20) v102c(0x20)
0x1033: v1033(0x0) = CONST 
0x1035: v1035 = SHA3 v1033(0x0) v1032(0x40)
0x1036: v1036 = SLOAD v1035
0x1037: v1037 = ADD v1036 vff6
0x1038: v1038 = EQ v1037 veb4
0x1039: v1039 = ISZERO v1038
0x103a: v103a = ISZERO v1039
0x103b: v103b(0x1040) = CONST 
0x103e: JUMPI v103b(0x1040) v103a
----------------------------------

Begin block 0x103f
prev = {'0xe33'}, next = {}
----------------------------------
Block 0x103f
0x103f: THROW 
----------------------------------

Begin block 0x1040
prev = {'0xe33'}, next = {'0x1041'}
----------------------------------
Block 0x1040
----------------------------------

Begin block 0x1041
prev = {'0x1040'}, next = {}
----------------------------------
Block 0x1041
0x1046: RETURNPRIVATE vd30arg3
----------------------------------

Begin block 0x1074
prev = {'0xb'}, next = {}
----------------------------------
Block 0x1074
0x1075: v1075(0xbd) = CONST 
0x1076: CALLPRIVATE v1075(0xbd)
----------------------------------

Begin block 0x1077
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x1077
0x1078: v1078(0x14c) = CONST 
0x1079: CALLPRIVATE v1078(0x14c)
----------------------------------

Begin block 0x107a
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x107a
0x107b: v107b(0x1a6) = CONST 
0x107c: CALLPRIVATE v107b(0x1a6)
----------------------------------

Begin block 0x107d
prev = {'0x55'}, next = {}
----------------------------------
Block 0x107d
0x107e: v107e(0x1cf) = CONST 
0x107f: CALLPRIVATE v107e(0x1cf)
----------------------------------

Begin block 0x1080
prev = {'0x60'}, next = {}
----------------------------------
Block 0x1080
0x1081: v1081(0x248) = CONST 
0x1082: CALLPRIVATE v1081(0x248)
----------------------------------

Begin block 0x1083
prev = {'0x6b'}, next = {}
----------------------------------
Block 0x1083
0x1084: v1084(0x277) = CONST 
0x1085: CALLPRIVATE v1084(0x277)
----------------------------------

Begin block 0x1086
prev = {'0x76'}, next = {}
----------------------------------
Block 0x1086
0x1087: v1087(0x2b2) = CONST 
0x1088: CALLPRIVATE v1087(0x2b2)
----------------------------------

Begin block 0x1089
prev = {'0x81'}, next = {}
----------------------------------
Block 0x1089
0x108a: v108a(0x2ff) = CONST 
0x108b: CALLPRIVATE v108a(0x2ff)
----------------------------------

Begin block 0x108c
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x108c
0x108d: v108d(0x359) = CONST 
0x108e: CALLPRIVATE v108d(0x359)
----------------------------------

Begin block 0x108f
prev = {'0x97'}, next = {}
----------------------------------
Block 0x108f
0x1090: v1090(0x3e8) = CONST 
0x1091: CALLPRIVATE v1090(0x3e8)
----------------------------------

Begin block 0x1092
prev = {'0xa2'}, next = {}
----------------------------------
Block 0x1092
0x1093: v1093(0x42a) = CONST 
0x1094: CALLPRIVATE v1093(0x42a)
----------------------------------

Begin block 0x1095
prev = {'0xad'}, next = {}
----------------------------------
Block 0x1095
0x1096: v1096(0x4c7) = CONST 
0x1097: CALLPRIVATE v1096(0x4c7)
----------------------------------
