
Begin block 0x0
prev = {}, next = {'0xd', '0x19d9'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x19b5: v19b5(0x19d9) = CONST 
0x19b6: JUMPI v19b5(0x19d9) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1e', '0x95'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0x8da5cb5b) = CONST 
0x19: v19 = GT v14(0x8da5cb5b) v12
0x1a: v1a(0x95) = CONST 
0x1d: JUMPI v1a(0x95) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0x29', '0x64'}
----------------------------------
Block 0x1e
0x1f: v1f(0xa9059cbb) = CONST 
0x24: v24 = GT v1f(0xa9059cbb) v12
0x25: v25(0x64) = CONST 
0x28: JUMPI v25(0x64) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0x1a00'}
----------------------------------
Block 0x29
0x2a: v2a(0xa9059cbb) = CONST 
0x2f: v2f = EQ v2a(0xa9059cbb) v12
0x19b7: v19b7(0x1a00) = CONST 
0x19b8: JUMPI v19b7(0x1a00) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0x3f', '0x1a03'}
----------------------------------
Block 0x34
0x35: v35(0xcae9ca51) = CONST 
0x3a: v3a = EQ v35(0xcae9ca51) v12
0x19b9: v19b9(0x1a03) = CONST 
0x19ba: JUMPI v19b9(0x1a03) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x4a', '0x1a06'}
----------------------------------
Block 0x3f
0x40: v40(0xd4ee1d90) = CONST 
0x45: v45 = EQ v40(0xd4ee1d90) v12
0x19bb: v19bb(0x1a06) = CONST 
0x19bc: JUMPI v19bb(0x1a06) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x1a09', '0x55'}
----------------------------------
Block 0x4a
0x4b: v4b(0xdd62ed3e) = CONST 
0x50: v50 = EQ v4b(0xdd62ed3e) v12
0x19bd: v19bd(0x1a09) = CONST 
0x19be: JUMPI v19bd(0x1a09) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x1a0c', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0xf2fde38b) = CONST 
0x5b: v5b = EQ v56(0xf2fde38b) v12
0x19bf: v19bf(0x1a0c) = CONST 
0x19c0: JUMPI v19bf(0x1a0c) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0xfe0x0'}
----------------------------------
Block 0x60
0x60: v60(0xfe) = CONST 
0x63: JUMP v60(0xfe)
----------------------------------

Begin block 0x64
prev = {'0x1e'}, next = {'0x70', '0x19f4'}
----------------------------------
Block 0x64
0x66: v66(0x8da5cb5b) = CONST 
0x6b: v6b = EQ v66(0x8da5cb5b) v12
0x19c1: v19c1(0x19f4) = CONST 
0x19c2: JUMPI v19c1(0x19f4) v6b
----------------------------------

Begin block 0x70
prev = {'0x64'}, next = {'0x19f7', '0x7b'}
----------------------------------
Block 0x70
0x71: v71(0x95d89b41) = CONST 
0x76: v76 = EQ v71(0x95d89b41) v12
0x19c3: v19c3(0x19f7) = CONST 
0x19c4: JUMPI v19c3(0x19f7) v76
----------------------------------

Begin block 0x7b
prev = {'0x70'}, next = {'0x19fa', '0x86'}
----------------------------------
Block 0x7b
0x7c: v7c(0x988c8f1d) = CONST 
0x81: v81 = EQ v7c(0x988c8f1d) v12
0x19c5: v19c5(0x19fa) = CONST 
0x19c6: JUMPI v19c5(0x19fa) v81
----------------------------------

Begin block 0x86
prev = {'0x7b'}, next = {'0x19fd', '0x91'}
----------------------------------
Block 0x86
0x87: v87(0x9dc29fac) = CONST 
0x8c: v8c = EQ v87(0x9dc29fac) v12
0x19c7: v19c7(0x19fd) = CONST 
0x19c8: JUMPI v19c7(0x19fd) v8c
----------------------------------

Begin block 0x91
prev = {'0x86'}, next = {'0xfe0x0'}
----------------------------------
Block 0x91
0x91: v91(0xfe) = CONST 
0x94: JUMP v91(0xfe)
----------------------------------

Begin block 0x95
prev = {'0xd'}, next = {'0xa1', '0xd1'}
----------------------------------
Block 0x95
0x97: v97(0x313ce567) = CONST 
0x9c: v9c = GT v97(0x313ce567) v12
0x9d: v9d(0xd1) = CONST 
0xa0: JUMPI v9d(0xd1) v9c
----------------------------------

Begin block 0xa1
prev = {'0x95'}, next = {'0x19e8', '0xac'}
----------------------------------
Block 0xa1
0xa2: va2(0x313ce567) = CONST 
0xa7: va7 = EQ va2(0x313ce567) v12
0x19c9: v19c9(0x19e8) = CONST 
0x19ca: JUMPI v19c9(0x19e8) va7
----------------------------------

Begin block 0xac
prev = {'0xa1'}, next = {'0x19eb', '0xb7'}
----------------------------------
Block 0xac
0xad: vad(0x40c10f19) = CONST 
0xb2: vb2 = EQ vad(0x40c10f19) v12
0x19cb: v19cb(0x19eb) = CONST 
0x19cc: JUMPI v19cb(0x19eb) vb2
----------------------------------

Begin block 0xb7
prev = {'0xac'}, next = {'0x19ee', '0xc2'}
----------------------------------
Block 0xb7
0xb8: vb8(0x70a08231) = CONST 
0xbd: vbd = EQ vb8(0x70a08231) v12
0x19cd: v19cd(0x19ee) = CONST 
0x19ce: JUMPI v19cd(0x19ee) vbd
----------------------------------

Begin block 0xc2
prev = {'0xb7'}, next = {'0x19f1', '0xcd'}
----------------------------------
Block 0xc2
0xc3: vc3(0x79ba5097) = CONST 
0xc8: vc8 = EQ vc3(0x79ba5097) v12
0x19cf: v19cf(0x19f1) = CONST 
0x19d0: JUMPI v19cf(0x19f1) vc8
----------------------------------

Begin block 0xcd
prev = {'0xc2'}, next = {'0xfe0x0'}
----------------------------------
Block 0xcd
0xcd: vcd(0xfe) = CONST 
0xd0: JUMP vcd(0xfe)
----------------------------------

Begin block 0xd1
prev = {'0x95'}, next = {'0xdd', '0x19dc'}
----------------------------------
Block 0xd1
0xd3: vd3(0x6fdde03) = CONST 
0xd8: vd8 = EQ vd3(0x6fdde03) v12
0x19d1: v19d1(0x19dc) = CONST 
0x19d2: JUMPI v19d1(0x19dc) vd8
----------------------------------

Begin block 0xdd
prev = {'0xd1'}, next = {'0xe8', '0x19df'}
----------------------------------
Block 0xdd
0xde: vde(0x95ea7b3) = CONST 
0xe3: ve3 = EQ vde(0x95ea7b3) v12
0x19d3: v19d3(0x19df) = CONST 
0x19d4: JUMPI v19d3(0x19df) ve3
----------------------------------

Begin block 0xe8
prev = {'0xdd'}, next = {'0xf3', '0x19e2'}
----------------------------------
Block 0xe8
0xe9: ve9(0x18160ddd) = CONST 
0xee: vee = EQ ve9(0x18160ddd) v12
0x19d5: v19d5(0x19e2) = CONST 
0x19d6: JUMPI v19d5(0x19e2) vee
----------------------------------

Begin block 0xf3
prev = {'0xe8'}, next = {'0x19d9', '0x19e5'}
----------------------------------
Block 0xf3
0xf4: vf4(0x23b872dd) = CONST 
0xf9: vf9 = EQ vf4(0x23b872dd) v12
0x19d7: v19d7(0x19e5) = CONST 
0x19d8: JUMPI v19d7(0x19e5) vf9
----------------------------------

Begin block 0xfe
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xfe
0xff: vff(0x0) = CONST 
0x102: REVERT vff(0x0) vff(0x0)
----------------------------------

Begin block 0xfe0x0
prev = {'0xcd', '0x19d9', '0x60', '0x91'}, next = {}
----------------------------------
Block 0xfe0x0
0xff0x0: v0ff(0x0) = CONST 
0x1020x0: REVERT v0ff(0x0) v0ff(0x0)
----------------------------------

Begin block 0x103
prev = {}, next = {'0x10f', '0x10b'}
----------------------------------
function name()()
Block 0x103
0x104: v104 = CALLVALUE 
0x106: v106 = ISZERO v104
0x107: v107(0x10f) = CONST 
0x10a: JUMPI v107(0x10f) v106
----------------------------------

Begin block 0x10b
prev = {'0x103'}, next = {}
----------------------------------
Block 0x10b
0x10b: v10b(0x0) = CONST 
0x10e: REVERT v10b(0x0) v10b(0x0)
----------------------------------

Begin block 0x10f
prev = {'0x103'}, next = {'0x85b'}
----------------------------------
Block 0x10f
0x111: v111(0x118) = CONST 
0x114: v114(0x85b) = CONST 
0x117: JUMP v114(0x85b)
----------------------------------

Begin block 0x118
prev = {'0x8f1'}, next = {'0x13d'}
----------------------------------
Block 0x118
0x119: v119(0x40) = CONST 
0x11b: v11b = MLOAD v119(0x40)
0x11e: v11e(0x20) = CONST 
0x120: v120 = ADD v11e(0x20) v11b
0x123: v123 = SUB v120 v11b
0x125: MSTORE v11b v123
0x129: v129 = MLOAD v880
0x12b: MSTORE v120 v129
0x12c: v12c(0x20) = CONST 
0x12e: v12e = ADD v12c(0x20) v120
0x132: v132 = MLOAD v880
0x134: v134(0x20) = CONST 
0x136: v136 = ADD v134(0x20) v880
0x13b: v13b(0x0) = CONST 
----------------------------------

Begin block 0x13d
prev = {'0x118', '0x146'}, next = {'0x158', '0x146'}
----------------------------------
Block 0x13d
0x13d_0x0: v13d_0 = PHI v13b(0x0) v151
0x140: v140 = LT v13d_0 v132
0x141: v141 = ISZERO v140
0x142: v142(0x158) = CONST 
0x145: JUMPI v142(0x158) v141
----------------------------------

Begin block 0x146
prev = {'0x13d'}, next = {'0x13d'}
----------------------------------
Block 0x146
0x146_0x0: v146_0 = PHI v13b(0x0) v151
0x148: v148 = ADD v136 v146_0
0x149: v149 = MLOAD v148
0x14c: v14c = ADD v12e v146_0
0x14d: MSTORE v14c v149
0x14e: v14e(0x20) = CONST 
0x151: v151 = ADD v146_0 v14e(0x20)
0x154: v154(0x13d) = CONST 
0x157: JUMP v154(0x13d)
----------------------------------

Begin block 0x158
prev = {'0x13d'}, next = {'0x16c', '0x185'}
----------------------------------
Block 0x158
0x161: v161 = ADD v132 v12e
0x163: v163(0x1f) = CONST 
0x165: v165 = AND v163(0x1f) v132
0x167: v167 = ISZERO v165
0x168: v168(0x185) = CONST 
0x16b: JUMPI v168(0x185) v167
----------------------------------

Begin block 0x16c
prev = {'0x158'}, next = {'0x185'}
----------------------------------
Block 0x16c
0x16e: v16e = SUB v161 v165
0x170: v170 = MLOAD v16e
0x171: v171(0x1) = CONST 
0x174: v174(0x20) = CONST 
0x176: v176 = SUB v174(0x20) v165
0x177: v177(0x100) = CONST 
0x17a: v17a = EXP v177(0x100) v176
0x17b: v17b = SUB v17a v171(0x1)
0x17c: v17c = NOT v17b
0x17d: v17d = AND v17c v170
0x17f: MSTORE v16e v17d
0x180: v180(0x20) = CONST 
0x182: v182 = ADD v180(0x20) v16e
----------------------------------

Begin block 0x185
prev = {'0x158', '0x16c'}, next = {}
----------------------------------
Block 0x185
0x185_0x1: v185_1 = PHI v161 v182
0x18b: v18b(0x40) = CONST 
0x18d: v18d = MLOAD v18b(0x40)
0x190: v190 = SUB v185_1 v18d
0x192: RETURN v18d v190
----------------------------------

Begin block 0x193
prev = {}, next = {'0x19b', '0x19f'}
----------------------------------
function approve(address,uint256)()
Block 0x193
0x194: v194 = CALLVALUE 
0x196: v196 = ISZERO v194
0x197: v197(0x19f) = CONST 
0x19a: JUMPI v197(0x19f) v196
----------------------------------

Begin block 0x19b
prev = {'0x193'}, next = {}
----------------------------------
Block 0x19b
0x19b: v19b(0x0) = CONST 
0x19e: REVERT v19b(0x0) v19b(0x0)
----------------------------------

Begin block 0x19f
prev = {'0x193'}, next = {'0x1b2', '0x1b6'}
----------------------------------
Block 0x19f
0x1a1: v1a1(0x1ec) = CONST 
0x1a4: v1a4(0x4) = CONST 
0x1a7: v1a7 = CALLDATASIZE 
0x1a8: v1a8 = SUB v1a7 v1a4(0x4)
0x1a9: v1a9(0x40) = CONST 
0x1ac: v1ac = LT v1a8 v1a9(0x40)
0x1ad: v1ad = ISZERO v1ac
0x1ae: v1ae(0x1b6) = CONST 
0x1b1: JUMPI v1ae(0x1b6) v1ad
----------------------------------

Begin block 0x1b2
prev = {'0x19f'}, next = {}
----------------------------------
Block 0x1b2
0x1b2: v1b2(0x0) = CONST 
0x1b5: REVERT v1b2(0x0) v1b2(0x0)
----------------------------------

Begin block 0x1b6
prev = {'0x19f'}, next = {'0x8f9'}
----------------------------------
Block 0x1b6
0x1b8: v1b8 = ADD v1a4(0x4) v1a8
0x1bc: v1bc = CALLDATALOAD v1a4(0x4)
0x1bd: v1bd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1d2: v1d2 = AND v1bd(0xffffffffffffffffffffffffffffffffffffffff) v1bc
0x1d4: v1d4(0x20) = CONST 
0x1d6: v1d6 = ADD v1d4(0x20) v1a4(0x4)
0x1dc: v1dc = CALLDATALOAD v1d6
0x1de: v1de(0x20) = CONST 
0x1e0: v1e0 = ADD v1de(0x20) v1d6
0x1e8: v1e8(0x8f9) = CONST 
0x1eb: JUMP v1e8(0x8f9)
----------------------------------

Begin block 0x1ec
prev = {'0x8f9'}, next = {}
----------------------------------
Block 0x1ec
0x1ed: v1ed(0x40) = CONST 
0x1ef: v1ef = MLOAD v1ed(0x40)
0x1f2: v1f2 = ISZERO v9e2(0x1)
0x1f3: v1f3 = ISZERO v1f2
0x1f4: v1f4 = ISZERO v1f3
0x1f5: v1f5 = ISZERO v1f4
0x1f7: MSTORE v1ef v1f5
0x1f8: v1f8(0x20) = CONST 
0x1fa: v1fa = ADD v1f8(0x20) v1ef
0x1fe: v1fe(0x40) = CONST 
0x200: v200 = MLOAD v1fe(0x40)
0x203: v203 = SUB v1fa v200
0x205: RETURN v200 v203
----------------------------------

Begin block 0x206
prev = {}, next = {'0x212', '0x20e'}
----------------------------------
function totalSupply()()
Block 0x206
0x207: v207 = CALLVALUE 
0x209: v209 = ISZERO v207
0x20a: v20a(0x212) = CONST 
0x20d: JUMPI v20a(0x212) v209
----------------------------------

Begin block 0x20e
prev = {'0x206'}, next = {}
----------------------------------
Block 0x20e
0x20e: v20e(0x0) = CONST 
0x211: REVERT v20e(0x0) v20e(0x0)
----------------------------------

Begin block 0x212
prev = {'0x206'}, next = {'0x9eb'}
----------------------------------
Block 0x212
0x214: v214(0x21b) = CONST 
0x217: v217(0x9eb) = CONST 
0x21a: JUMP v217(0x9eb)
----------------------------------

Begin block 0x21b
prev = {'0xa41'}, next = {}
----------------------------------
Block 0x21b
0x21c: v21c(0x40) = CONST 
0x21e: v21e = MLOAD v21c(0x40)
0x222: MSTORE v21e va40_0
0x223: v223(0x20) = CONST 
0x225: v225 = ADD v223(0x20) v21e
0x229: v229(0x40) = CONST 
0x22b: v22b = MLOAD v229(0x40)
0x22e: v22e = SUB v225 v22b
0x230: RETURN v22b v22e
----------------------------------

Begin block 0x231
prev = {}, next = {'0x239', '0x23d'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x231
0x232: v232 = CALLVALUE 
0x234: v234 = ISZERO v232
0x235: v235(0x23d) = CONST 
0x238: JUMPI v235(0x23d) v234
----------------------------------

Begin block 0x239
prev = {'0x231'}, next = {}
----------------------------------
Block 0x239
0x239: v239(0x0) = CONST 
0x23c: REVERT v239(0x0) v239(0x0)
----------------------------------

Begin block 0x23d
prev = {'0x231'}, next = {'0x250', '0x254'}
----------------------------------
Block 0x23d
0x23f: v23f(0x2aa) = CONST 
0x242: v242(0x4) = CONST 
0x245: v245 = CALLDATASIZE 
0x246: v246 = SUB v245 v242(0x4)
0x247: v247(0x60) = CONST 
0x24a: v24a = LT v246 v247(0x60)
0x24b: v24b = ISZERO v24a
0x24c: v24c(0x254) = CONST 
0x24f: JUMPI v24c(0x254) v24b
----------------------------------

Begin block 0x250
prev = {'0x23d'}, next = {}
----------------------------------
Block 0x250
0x250: v250(0x0) = CONST 
0x253: REVERT v250(0x0) v250(0x0)
----------------------------------

Begin block 0x254
prev = {'0x23d'}, next = {'0xa46'}
----------------------------------
Block 0x254
0x256: v256 = ADD v242(0x4) v246
0x25a: v25a = CALLDATALOAD v242(0x4)
0x25b: v25b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x270: v270 = AND v25b(0xffffffffffffffffffffffffffffffffffffffff) v25a
0x272: v272(0x20) = CONST 
0x274: v274 = ADD v272(0x20) v242(0x4)
0x27a: v27a = CALLDATALOAD v274
0x27b: v27b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x290: v290 = AND v27b(0xffffffffffffffffffffffffffffffffffffffff) v27a
0x292: v292(0x20) = CONST 
0x294: v294 = ADD v292(0x20) v274
0x29a: v29a = CALLDATALOAD v294
0x29c: v29c(0x20) = CONST 
0x29e: v29e = ADD v29c(0x20) v294
0x2a6: v2a6(0xa46) = CONST 
0x2a9: JUMP v2a6(0xa46)
----------------------------------

Begin block 0x2aa
prev = {'0xc3e'}, next = {}
----------------------------------
Block 0x2aa
0x2ab: v2ab(0x40) = CONST 
0x2ad: v2ad = MLOAD v2ab(0x40)
0x2b0: v2b0 = ISZERO vce7(0x1)
0x2b1: v2b1 = ISZERO v2b0
0x2b2: v2b2 = ISZERO v2b1
0x2b3: v2b3 = ISZERO v2b2
0x2b5: MSTORE v2ad v2b3
0x2b6: v2b6(0x20) = CONST 
0x2b8: v2b8 = ADD v2b6(0x20) v2ad
0x2bc: v2bc(0x40) = CONST 
0x2be: v2be = MLOAD v2bc(0x40)
0x2c1: v2c1 = SUB v2b8 v2be
0x2c3: RETURN v2be v2c1
----------------------------------

Begin block 0x2c4
prev = {}, next = {'0x2cc', '0x2d0'}
----------------------------------
function decimals()()
Block 0x2c4
0x2c5: v2c5 = CALLVALUE 
0x2c7: v2c7 = ISZERO v2c5
0x2c8: v2c8(0x2d0) = CONST 
0x2cb: JUMPI v2c8(0x2d0) v2c7
----------------------------------

Begin block 0x2cc
prev = {'0x2c4'}, next = {}
----------------------------------
Block 0x2cc
0x2cc: v2cc(0x0) = CONST 
0x2cf: REVERT v2cc(0x0) v2cc(0x0)
----------------------------------

Begin block 0x2d0
prev = {'0x2c4'}, next = {'0xcf1'}
----------------------------------
Block 0x2d0
0x2d2: v2d2(0x2d9) = CONST 
0x2d5: v2d5(0xcf1) = CONST 
0x2d8: JUMP v2d5(0xcf1)
----------------------------------

Begin block 0x2d9
prev = {'0xcf1'}, next = {}
----------------------------------
Block 0x2d9
0x2da: v2da(0x40) = CONST 
0x2dc: v2dc = MLOAD v2da(0x40)
0x2df: v2df(0xff) = CONST 
0x2e1: v2e1 = AND v2df(0xff) vd01
0x2e2: v2e2(0xff) = CONST 
0x2e4: v2e4 = AND v2e2(0xff) v2e1
0x2e6: MSTORE v2dc v2e4
0x2e7: v2e7(0x20) = CONST 
0x2e9: v2e9 = ADD v2e7(0x20) v2dc
0x2ed: v2ed(0x40) = CONST 
0x2ef: v2ef = MLOAD v2ed(0x40)
0x2f2: v2f2 = SUB v2e9 v2ef
0x2f4: RETURN v2ef v2f2
----------------------------------

Begin block 0x2f5
prev = {}, next = {'0x301', '0x2fd'}
----------------------------------
function mint(address,uint256)()
Block 0x2f5
0x2f6: v2f6 = CALLVALUE 
0x2f8: v2f8 = ISZERO v2f6
0x2f9: v2f9(0x301) = CONST 
0x2fc: JUMPI v2f9(0x301) v2f8
----------------------------------

Begin block 0x2fd
prev = {'0x2f5'}, next = {}
----------------------------------
Block 0x2fd
0x2fd: v2fd(0x0) = CONST 
0x300: REVERT v2fd(0x0) v2fd(0x0)
----------------------------------

Begin block 0x301
prev = {'0x2f5'}, next = {'0x314', '0x318'}
----------------------------------
Block 0x301
0x303: v303(0x34e) = CONST 
0x306: v306(0x4) = CONST 
0x309: v309 = CALLDATASIZE 
0x30a: v30a = SUB v309 v306(0x4)
0x30b: v30b(0x40) = CONST 
0x30e: v30e = LT v30a v30b(0x40)
0x30f: v30f = ISZERO v30e
0x310: v310(0x318) = CONST 
0x313: JUMPI v310(0x318) v30f
----------------------------------

Begin block 0x314
prev = {'0x301'}, next = {}
----------------------------------
Block 0x314
0x314: v314(0x0) = CONST 
0x317: REVERT v314(0x0) v314(0x0)
----------------------------------

Begin block 0x318
prev = {'0x301'}, next = {'0xd04'}
----------------------------------
Block 0x318
0x31a: v31a = ADD v306(0x4) v30a
0x31e: v31e = CALLDATALOAD v306(0x4)
0x31f: v31f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x334: v334 = AND v31f(0xffffffffffffffffffffffffffffffffffffffff) v31e
0x336: v336(0x20) = CONST 
0x338: v338 = ADD v336(0x20) v306(0x4)
0x33e: v33e = CALLDATALOAD v338
0x340: v340(0x20) = CONST 
0x342: v342 = ADD v340(0x20) v338
0x34a: v34a(0xd04) = CONST 
0x34d: JUMP v34a(0xd04)
----------------------------------

Begin block 0x34e
prev = {'0xd7c'}, next = {}
----------------------------------
Block 0x34e
0x34e_0x0: v34e_0 = PHI vd6f(0x1) vd78(0x0)
0x34f: v34f(0x40) = CONST 
0x351: v351 = MLOAD v34f(0x40)
0x354: v354 = ISZERO v34e_0
0x355: v355 = ISZERO v354
0x356: v356 = ISZERO v355
0x357: v357 = ISZERO v356
0x359: MSTORE v351 v357
0x35a: v35a(0x20) = CONST 
0x35c: v35c = ADD v35a(0x20) v351
0x360: v360(0x40) = CONST 
0x362: v362 = MLOAD v360(0x40)
0x365: v365 = SUB v35c v362
0x367: RETURN v362 v365
----------------------------------

Begin block 0x368
prev = {}, next = {'0x374', '0x370'}
----------------------------------
function balanceOf(address)()
Block 0x368
0x369: v369 = CALLVALUE 
0x36b: v36b = ISZERO v369
0x36c: v36c(0x374) = CONST 
0x36f: JUMPI v36c(0x374) v36b
----------------------------------

Begin block 0x370
prev = {'0x368'}, next = {}
----------------------------------
Block 0x370
0x370: v370(0x0) = CONST 
0x373: REVERT v370(0x0) v370(0x0)
----------------------------------

Begin block 0x374
prev = {'0x368'}, next = {'0x387', '0x38b'}
----------------------------------
Block 0x374
0x376: v376(0x3b7) = CONST 
0x379: v379(0x4) = CONST 
0x37c: v37c = CALLDATASIZE 
0x37d: v37d = SUB v37c v379(0x4)
0x37e: v37e(0x20) = CONST 
0x381: v381 = LT v37d v37e(0x20)
0x382: v382 = ISZERO v381
0x383: v383(0x38b) = CONST 
0x386: JUMPI v383(0x38b) v382
----------------------------------

Begin block 0x387
prev = {'0x374'}, next = {}
----------------------------------
Block 0x387
0x387: v387(0x0) = CONST 
0x38a: REVERT v387(0x0) v387(0x0)
----------------------------------

Begin block 0x38b
prev = {'0x374'}, next = {'0xd82'}
----------------------------------
Block 0x38b
0x38d: v38d = ADD v379(0x4) v37d
0x391: v391 = CALLDATALOAD v379(0x4)
0x392: v392(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3a7: v3a7 = AND v392(0xffffffffffffffffffffffffffffffffffffffff) v391
0x3a9: v3a9(0x20) = CONST 
0x3ab: v3ab = ADD v3a9(0x20) v379(0x4)
0x3b3: v3b3(0xd82) = CONST 
0x3b6: JUMP v3b3(0xd82)
----------------------------------

Begin block 0x3b7
prev = {'0xd82'}, next = {}
----------------------------------
Block 0x3b7
0x3b8: v3b8(0x40) = CONST 
0x3ba: v3ba = MLOAD v3b8(0x40)
0x3be: MSTORE v3ba vdc4
0x3bf: v3bf(0x20) = CONST 
0x3c1: v3c1 = ADD v3bf(0x20) v3ba
0x3c5: v3c5(0x40) = CONST 
0x3c7: v3c7 = MLOAD v3c5(0x40)
0x3ca: v3ca = SUB v3c1 v3c7
0x3cc: RETURN v3c7 v3ca
----------------------------------

Begin block 0x3cd
prev = {}, next = {'0x3d5', '0x3d9'}
----------------------------------
function acceptOwnership()()
Block 0x3cd
0x3ce: v3ce = CALLVALUE 
0x3d0: v3d0 = ISZERO v3ce
0x3d1: v3d1(0x3d9) = CONST 
0x3d4: JUMPI v3d1(0x3d9) v3d0
----------------------------------

Begin block 0x3d5
prev = {'0x3cd'}, next = {}
----------------------------------
Block 0x3d5
0x3d5: v3d5(0x0) = CONST 
0x3d8: REVERT v3d5(0x0) v3d5(0x0)
----------------------------------

Begin block 0x3d9
prev = {'0x3cd'}, next = {'0xdcb'}
----------------------------------
Block 0x3d9
0x3db: v3db(0x3e2) = CONST 
0x3de: v3de(0xdcb) = CONST 
0x3e1: JUMP v3de(0xdcb)
----------------------------------

Begin block 0x3e2
prev = {'0xe25'}, next = {}
----------------------------------
Block 0x3e2
0x3e3: STOP 
----------------------------------

Begin block 0x3e4
prev = {}, next = {'0x3ec', '0x3f0'}
----------------------------------
function owner()()
Block 0x3e4
0x3e5: v3e5 = CALLVALUE 
0x3e7: v3e7 = ISZERO v3e5
0x3e8: v3e8(0x3f0) = CONST 
0x3eb: JUMPI v3e8(0x3f0) v3e7
----------------------------------

Begin block 0x3ec
prev = {'0x3e4'}, next = {}
----------------------------------
Block 0x3ec
0x3ec: v3ec(0x0) = CONST 
0x3ef: REVERT v3ec(0x0) v3ec(0x0)
----------------------------------

Begin block 0x3f0
prev = {'0x3e4'}, next = {'0xf68'}
----------------------------------
Block 0x3f0
0x3f2: v3f2(0x3f9) = CONST 
0x3f5: v3f5(0xf68) = CONST 
0x3f8: JUMP v3f5(0xf68)
----------------------------------

Begin block 0x3f9
prev = {'0xf68'}, next = {}
----------------------------------
Block 0x3f9
0x3fa: v3fa(0x40) = CONST 
0x3fc: v3fc = MLOAD v3fa(0x40)
0x3ff: v3ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x414: v414 = AND v3ff(0xffffffffffffffffffffffffffffffffffffffff) vf8a
0x415: v415(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x42a: v42a = AND v415(0xffffffffffffffffffffffffffffffffffffffff) v414
0x42c: MSTORE v3fc v42a
0x42d: v42d(0x20) = CONST 
0x42f: v42f = ADD v42d(0x20) v3fc
0x433: v433(0x40) = CONST 
0x435: v435 = MLOAD v433(0x40)
0x438: v438 = SUB v42f v435
0x43a: RETURN v435 v438
----------------------------------

Begin block 0x43b
prev = {}, next = {'0x443', '0x447'}
----------------------------------
function symbol()()
Block 0x43b
0x43c: v43c = CALLVALUE 
0x43e: v43e = ISZERO v43c
0x43f: v43f(0x447) = CONST 
0x442: JUMPI v43f(0x447) v43e
----------------------------------

Begin block 0x443
prev = {'0x43b'}, next = {}
----------------------------------
Block 0x443
0x443: v443(0x0) = CONST 
0x446: REVERT v443(0x0) v443(0x0)
----------------------------------

Begin block 0x447
prev = {'0x43b'}, next = {'0xf8d'}
----------------------------------
Block 0x447
0x449: v449(0x450) = CONST 
0x44c: v44c(0xf8d) = CONST 
0x44f: JUMP v44c(0xf8d)
----------------------------------

Begin block 0x450
prev = {'0x1023'}, next = {'0x475'}
----------------------------------
Block 0x450
0x451: v451(0x40) = CONST 
0x453: v453 = MLOAD v451(0x40)
0x456: v456(0x20) = CONST 
0x458: v458 = ADD v456(0x20) v453
0x45b: v45b = SUB v458 v453
0x45d: MSTORE v453 v45b
0x461: v461 = MLOAD vfb2
0x463: MSTORE v458 v461
0x464: v464(0x20) = CONST 
0x466: v466 = ADD v464(0x20) v458
0x46a: v46a = MLOAD vfb2
0x46c: v46c(0x20) = CONST 
0x46e: v46e = ADD v46c(0x20) vfb2
0x473: v473(0x0) = CONST 
----------------------------------

Begin block 0x475
prev = {'0x47e', '0x450'}, next = {'0x490', '0x47e'}
----------------------------------
Block 0x475
0x475_0x0: v475_0 = PHI v473(0x0) v489
0x478: v478 = LT v475_0 v46a
0x479: v479 = ISZERO v478
0x47a: v47a(0x490) = CONST 
0x47d: JUMPI v47a(0x490) v479
----------------------------------

Begin block 0x47e
prev = {'0x475'}, next = {'0x475'}
----------------------------------
Block 0x47e
0x47e_0x0: v47e_0 = PHI v473(0x0) v489
0x480: v480 = ADD v46e v47e_0
0x481: v481 = MLOAD v480
0x484: v484 = ADD v466 v47e_0
0x485: MSTORE v484 v481
0x486: v486(0x20) = CONST 
0x489: v489 = ADD v47e_0 v486(0x20)
0x48c: v48c(0x475) = CONST 
0x48f: JUMP v48c(0x475)
----------------------------------

Begin block 0x490
prev = {'0x475'}, next = {'0x4bd', '0x4a4'}
----------------------------------
Block 0x490
0x499: v499 = ADD v46a v466
0x49b: v49b(0x1f) = CONST 
0x49d: v49d = AND v49b(0x1f) v46a
0x49f: v49f = ISZERO v49d
0x4a0: v4a0(0x4bd) = CONST 
0x4a3: JUMPI v4a0(0x4bd) v49f
----------------------------------

Begin block 0x4a4
prev = {'0x490'}, next = {'0x4bd'}
----------------------------------
Block 0x4a4
0x4a6: v4a6 = SUB v499 v49d
0x4a8: v4a8 = MLOAD v4a6
0x4a9: v4a9(0x1) = CONST 
0x4ac: v4ac(0x20) = CONST 
0x4ae: v4ae = SUB v4ac(0x20) v49d
0x4af: v4af(0x100) = CONST 
0x4b2: v4b2 = EXP v4af(0x100) v4ae
0x4b3: v4b3 = SUB v4b2 v4a9(0x1)
0x4b4: v4b4 = NOT v4b3
0x4b5: v4b5 = AND v4b4 v4a8
0x4b7: MSTORE v4a6 v4b5
0x4b8: v4b8(0x20) = CONST 
0x4ba: v4ba = ADD v4b8(0x20) v4a6
----------------------------------

Begin block 0x4bd
prev = {'0x490', '0x4a4'}, next = {}
----------------------------------
Block 0x4bd
0x4bd_0x1: v4bd_1 = PHI v499 v4ba
0x4c3: v4c3(0x40) = CONST 
0x4c5: v4c5 = MLOAD v4c3(0x40)
0x4c8: v4c8 = SUB v4bd_1 v4c5
0x4ca: RETURN v4c5 v4c8
----------------------------------

Begin block 0x4cb
prev = {}, next = {'0x4d3', '0x4d7'}
----------------------------------
function transferAny(address,uint256)()
Block 0x4cb
0x4cc: v4cc = CALLVALUE 
0x4ce: v4ce = ISZERO v4cc
0x4cf: v4cf(0x4d7) = CONST 
0x4d2: JUMPI v4cf(0x4d7) v4ce
----------------------------------

Begin block 0x4d3
prev = {'0x4cb'}, next = {}
----------------------------------
Block 0x4d3
0x4d3: v4d3(0x0) = CONST 
0x4d6: REVERT v4d3(0x0) v4d3(0x0)
----------------------------------

Begin block 0x4d7
prev = {'0x4cb'}, next = {'0x4ee', '0x4ea'}
----------------------------------
Block 0x4d7
0x4d9: v4d9(0x524) = CONST 
0x4dc: v4dc(0x4) = CONST 
0x4df: v4df = CALLDATASIZE 
0x4e0: v4e0 = SUB v4df v4dc(0x4)
0x4e1: v4e1(0x40) = CONST 
0x4e4: v4e4 = LT v4e0 v4e1(0x40)
0x4e5: v4e5 = ISZERO v4e4
0x4e6: v4e6(0x4ee) = CONST 
0x4e9: JUMPI v4e6(0x4ee) v4e5
----------------------------------

Begin block 0x4ea
prev = {'0x4d7'}, next = {}
----------------------------------
Block 0x4ea
0x4ea: v4ea(0x0) = CONST 
0x4ed: REVERT v4ea(0x0) v4ea(0x0)
----------------------------------

Begin block 0x4ee
prev = {'0x4d7'}, next = {'0x102b'}
----------------------------------
Block 0x4ee
0x4f0: v4f0 = ADD v4dc(0x4) v4e0
0x4f4: v4f4 = CALLDATALOAD v4dc(0x4)
0x4f5: v4f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x50a: v50a = AND v4f5(0xffffffffffffffffffffffffffffffffffffffff) v4f4
0x50c: v50c(0x20) = CONST 
0x50e: v50e = ADD v50c(0x20) v4dc(0x4)
0x514: v514 = CALLDATALOAD v50e
0x516: v516(0x20) = CONST 
0x518: v518 = ADD v516(0x20) v50e
0x520: v520(0x102b) = CONST 
0x523: JUMP v520(0x102b)
----------------------------------

Begin block 0x524
prev = {'0x1158'}, next = {}
----------------------------------
Block 0x524
0x525: v525(0x40) = CONST 
0x527: v527 = MLOAD v525(0x40)
0x52a: v52a = ISZERO v115e
0x52b: v52b = ISZERO v52a
0x52c: v52c = ISZERO v52b
0x52d: v52d = ISZERO v52c
0x52f: MSTORE v527 v52d
0x530: v530(0x20) = CONST 
0x532: v532 = ADD v530(0x20) v527
0x536: v536(0x40) = CONST 
0x538: v538 = MLOAD v536(0x40)
0x53b: v53b = SUB v532 v538
0x53d: RETURN v538 v53b
----------------------------------

Begin block 0x53e
prev = {}, next = {'0x54a', '0x546'}
----------------------------------
function burn(address,uint256)()
Block 0x53e
0x53f: v53f = CALLVALUE 
0x541: v541 = ISZERO v53f
0x542: v542(0x54a) = CONST 
0x545: JUMPI v542(0x54a) v541
----------------------------------

Begin block 0x546
prev = {'0x53e'}, next = {}
----------------------------------
Block 0x546
0x546: v546(0x0) = CONST 
0x549: REVERT v546(0x0) v546(0x0)
----------------------------------

Begin block 0x54a
prev = {'0x53e'}, next = {'0x561', '0x55d'}
----------------------------------
Block 0x54a
0x54c: v54c(0x597) = CONST 
0x54f: v54f(0x4) = CONST 
0x552: v552 = CALLDATASIZE 
0x553: v553 = SUB v552 v54f(0x4)
0x554: v554(0x40) = CONST 
0x557: v557 = LT v553 v554(0x40)
0x558: v558 = ISZERO v557
0x559: v559(0x561) = CONST 
0x55c: JUMPI v559(0x561) v558
----------------------------------

Begin block 0x55d
prev = {'0x54a'}, next = {}
----------------------------------
Block 0x55d
0x55d: v55d(0x0) = CONST 
0x560: REVERT v55d(0x0) v55d(0x0)
----------------------------------

Begin block 0x561
prev = {'0x54a'}, next = {'0x1171'}
----------------------------------
Block 0x561
0x563: v563 = ADD v54f(0x4) v553
0x567: v567 = CALLDATALOAD v54f(0x4)
0x568: v568(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x57d: v57d = AND v568(0xffffffffffffffffffffffffffffffffffffffff) v567
0x57f: v57f(0x20) = CONST 
0x581: v581 = ADD v57f(0x20) v54f(0x4)
0x587: v587 = CALLDATALOAD v581
0x589: v589(0x20) = CONST 
0x58b: v58b = ADD v589(0x20) v581
0x593: v593(0x1171) = CONST 
0x596: JUMP v593(0x1171)
----------------------------------

Begin block 0x597
prev = {'0x11e9'}, next = {}
----------------------------------
Block 0x597
0x597_0x0: v597_0 = PHI v11dc(0x1) v11e5(0x0)
0x598: v598(0x40) = CONST 
0x59a: v59a = MLOAD v598(0x40)
0x59d: v59d = ISZERO v597_0
0x59e: v59e = ISZERO v59d
0x59f: v59f = ISZERO v59e
0x5a0: v5a0 = ISZERO v59f
0x5a2: MSTORE v59a v5a0
0x5a3: v5a3(0x20) = CONST 
0x5a5: v5a5 = ADD v5a3(0x20) v59a
0x5a9: v5a9(0x40) = CONST 
0x5ab: v5ab = MLOAD v5a9(0x40)
0x5ae: v5ae = SUB v5a5 v5ab
0x5b0: RETURN v5ab v5ae
----------------------------------

Begin block 0x5b1
prev = {}, next = {'0x5b9', '0x5bd'}
----------------------------------
function transfer(address,uint256)()
Block 0x5b1
0x5b2: v5b2 = CALLVALUE 
0x5b4: v5b4 = ISZERO v5b2
0x5b5: v5b5(0x5bd) = CONST 
0x5b8: JUMPI v5b5(0x5bd) v5b4
----------------------------------

Begin block 0x5b9
prev = {'0x5b1'}, next = {}
----------------------------------
Block 0x5b9
0x5b9: v5b9(0x0) = CONST 
0x5bc: REVERT v5b9(0x0) v5b9(0x0)
----------------------------------

Begin block 0x5bd
prev = {'0x5b1'}, next = {'0x5d0', '0x5d4'}
----------------------------------
Block 0x5bd
0x5bf: v5bf(0x60a) = CONST 
0x5c2: v5c2(0x4) = CONST 
0x5c5: v5c5 = CALLDATASIZE 
0x5c6: v5c6 = SUB v5c5 v5c2(0x4)
0x5c7: v5c7(0x40) = CONST 
0x5ca: v5ca = LT v5c6 v5c7(0x40)
0x5cb: v5cb = ISZERO v5ca
0x5cc: v5cc(0x5d4) = CONST 
0x5cf: JUMPI v5cc(0x5d4) v5cb
----------------------------------

Begin block 0x5d0
prev = {'0x5bd'}, next = {}
----------------------------------
Block 0x5d0
0x5d0: v5d0(0x0) = CONST 
0x5d3: REVERT v5d0(0x0) v5d0(0x0)
----------------------------------

Begin block 0x5d4
prev = {'0x5bd'}, next = {'0x11ef'}
----------------------------------
Block 0x5d4
0x5d6: v5d6 = ADD v5c2(0x4) v5c6
0x5da: v5da = CALLDATALOAD v5c2(0x4)
0x5db: v5db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5f0: v5f0 = AND v5db(0xffffffffffffffffffffffffffffffffffffffff) v5da
0x5f2: v5f2(0x20) = CONST 
0x5f4: v5f4 = ADD v5f2(0x20) v5c2(0x4)
0x5fa: v5fa = CALLDATALOAD v5f4
0x5fc: v5fc(0x20) = CONST 
0x5fe: v5fe = ADD v5fc(0x20) v5f4
0x606: v606(0x11ef) = CONST 
0x609: JUMP v606(0x11ef)
----------------------------------

Begin block 0x60a
prev = {'0x12d8'}, next = {}
----------------------------------
Block 0x60a
0x60b: v60b(0x40) = CONST 
0x60d: v60d = MLOAD v60b(0x40)
0x610: v610 = ISZERO v1381(0x1)
0x611: v611 = ISZERO v610
0x612: v612 = ISZERO v611
0x613: v613 = ISZERO v612
0x615: MSTORE v60d v613
0x616: v616(0x20) = CONST 
0x618: v618 = ADD v616(0x20) v60d
0x61c: v61c(0x40) = CONST 
0x61e: v61e = MLOAD v61c(0x40)
0x621: v621 = SUB v618 v61e
0x623: RETURN v61e v621
----------------------------------

Begin block 0x624
prev = {}, next = {'0x62c', '0x630'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x624
0x625: v625 = CALLVALUE 
0x627: v627 = ISZERO v625
0x628: v628(0x630) = CONST 
0x62b: JUMPI v628(0x630) v627
----------------------------------

Begin block 0x62c
prev = {'0x624'}, next = {}
----------------------------------
Block 0x62c
0x62c: v62c(0x0) = CONST 
0x62f: REVERT v62c(0x0) v62c(0x0)
----------------------------------

Begin block 0x630
prev = {'0x624'}, next = {'0x643', '0x647'}
----------------------------------
Block 0x630
0x632: v632(0x714) = CONST 
0x635: v635(0x4) = CONST 
0x638: v638 = CALLDATASIZE 
0x639: v639 = SUB v638 v635(0x4)
0x63a: v63a(0x60) = CONST 
0x63d: v63d = LT v639 v63a(0x60)
0x63e: v63e = ISZERO v63d
0x63f: v63f(0x647) = CONST 
0x642: JUMPI v63f(0x647) v63e
----------------------------------

Begin block 0x643
prev = {'0x630'}, next = {}
----------------------------------
Block 0x643
0x643: v643(0x0) = CONST 
0x646: REVERT v643(0x0) v643(0x0)
----------------------------------

Begin block 0x647
prev = {'0x630'}, next = {'0x68a', '0x68e'}
----------------------------------
Block 0x647
0x649: v649 = ADD v635(0x4) v639
0x64d: v64d = CALLDATALOAD v635(0x4)
0x64e: v64e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x663: v663 = AND v64e(0xffffffffffffffffffffffffffffffffffffffff) v64d
0x665: v665(0x20) = CONST 
0x667: v667 = ADD v665(0x20) v635(0x4)
0x66d: v66d = CALLDATALOAD v667
0x66f: v66f(0x20) = CONST 
0x671: v671 = ADD v66f(0x20) v667
0x677: v677 = CALLDATALOAD v671
0x679: v679(0x20) = CONST 
0x67b: v67b = ADD v679(0x20) v671
0x67d: v67d(0x100000000) = CONST 
0x684: v684 = GT v677 v67d(0x100000000)
0x685: v685 = ISZERO v684
0x686: v686(0x68e) = CONST 
0x689: JUMPI v686(0x68e) v685
----------------------------------

Begin block 0x68a
prev = {'0x647'}, next = {}
----------------------------------
Block 0x68a
0x68a: v68a(0x0) = CONST 
0x68d: REVERT v68a(0x0) v68a(0x0)
----------------------------------

Begin block 0x68e
prev = {'0x647'}, next = {'0x6a0', '0x69c'}
----------------------------------
Block 0x68e
0x690: v690 = ADD v635(0x4) v677
0x692: v692(0x20) = CONST 
0x695: v695 = ADD v690 v692(0x20)
0x696: v696 = GT v695 v649
0x697: v697 = ISZERO v696
0x698: v698(0x6a0) = CONST 
0x69b: JUMPI v698(0x6a0) v697
----------------------------------

Begin block 0x69c
prev = {'0x68e'}, next = {}
----------------------------------
Block 0x69c
0x69c: v69c(0x0) = CONST 
0x69f: REVERT v69c(0x0) v69c(0x0)
----------------------------------

Begin block 0x6a0
prev = {'0x68e'}, next = {'0x6be', '0x6c2'}
----------------------------------
Block 0x6a0
0x6a2: v6a2 = CALLDATALOAD v690
0x6a4: v6a4(0x20) = CONST 
0x6a6: v6a6 = ADD v6a4(0x20) v690
0x6a9: v6a9(0x1) = CONST 
0x6ac: v6ac = MUL v6a2 v6a9(0x1)
0x6ae: v6ae = ADD v6a6 v6ac
0x6af: v6af = GT v6ae v649
0x6b0: v6b0(0x100000000) = CONST 
0x6b7: v6b7 = GT v6a2 v6b0(0x100000000)
0x6b8: v6b8 = OR v6b7 v6af
0x6b9: v6b9 = ISZERO v6b8
0x6ba: v6ba(0x6c2) = CONST 
0x6bd: JUMPI v6ba(0x6c2) v6b9
----------------------------------

Begin block 0x6be
prev = {'0x6a0'}, next = {}
----------------------------------
Block 0x6be
0x6be: v6be(0x0) = CONST 
0x6c1: REVERT v6be(0x0) v6be(0x0)
----------------------------------

Begin block 0x6c2
prev = {'0x6a0'}, next = {'0x138a'}
----------------------------------
Block 0x6c2
0x6c7: v6c7(0x1f) = CONST 
0x6c9: v6c9 = ADD v6c7(0x1f) v6a2
0x6ca: v6ca(0x20) = CONST 
0x6ce: v6ce = DIV v6c9 v6ca(0x20)
0x6cf: v6cf = MUL v6ce v6ca(0x20)
0x6d0: v6d0(0x20) = CONST 
0x6d2: v6d2 = ADD v6d0(0x20) v6cf
0x6d3: v6d3(0x40) = CONST 
0x6d5: v6d5 = MLOAD v6d3(0x40)
0x6d8: v6d8 = ADD v6d5 v6d2
0x6d9: v6d9(0x40) = CONST 
0x6db: MSTORE v6d9(0x40) v6d8
0x6e3: MSTORE v6d5 v6a2
0x6e4: v6e4(0x20) = CONST 
0x6e6: v6e6 = ADD v6e4(0x20) v6d5
0x6ec: CALLDATACOPY v6e6 v6a6 v6a2
0x6ed: v6ed(0x0) = CONST 
0x6f1: v6f1 = ADD v6e6 v6a2
0x6f2: MSTORE v6f1 v6ed(0x0)
0x6f3: v6f3(0x1f) = CONST 
0x6f5: v6f5(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v6f3(0x1f)
0x6f6: v6f6(0x1f) = CONST 
0x6f9: v6f9 = ADD v6a2 v6f6(0x1f)
0x6fa: v6fa = AND v6f9 v6f5(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
0x6ff: v6ff = ADD v6e6 v6fa
0x710: v710(0x138a) = CONST 
0x713: JUMP v710(0x138a)
----------------------------------

Begin block 0x714
prev = {'0x15ae'}, next = {}
----------------------------------
Block 0x714
0x715: v715(0x40) = CONST 
0x717: v717 = MLOAD v715(0x40)
0x71a: v71a = ISZERO v15b3(0x1)
0x71b: v71b = ISZERO v71a
0x71c: v71c = ISZERO v71b
0x71d: v71d = ISZERO v71c
0x71f: MSTORE v717 v71d
0x720: v720(0x20) = CONST 
0x722: v722 = ADD v720(0x20) v717
0x726: v726(0x40) = CONST 
0x728: v728 = MLOAD v726(0x40)
0x72b: v72b = SUB v722 v728
0x72d: RETURN v728 v72b
----------------------------------

Begin block 0x72e
prev = {}, next = {'0x736', '0x73a'}
----------------------------------
function newOwner()()
Block 0x72e
0x72f: v72f = CALLVALUE 
0x731: v731 = ISZERO v72f
0x732: v732(0x73a) = CONST 
0x735: JUMPI v732(0x73a) v731
----------------------------------

Begin block 0x736
prev = {'0x72e'}, next = {}
----------------------------------
Block 0x736
0x736: v736(0x0) = CONST 
0x739: REVERT v736(0x0) v736(0x0)
----------------------------------

Begin block 0x73a
prev = {'0x72e'}, next = {'0x15bd'}
----------------------------------
Block 0x73a
0x73c: v73c(0x743) = CONST 
0x73f: v73f(0x15bd) = CONST 
0x742: JUMP v73f(0x15bd)
----------------------------------

Begin block 0x743
prev = {'0x15bd'}, next = {}
----------------------------------
Block 0x743
0x744: v744(0x40) = CONST 
0x746: v746 = MLOAD v744(0x40)
0x749: v749(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75e: v75e = AND v749(0xffffffffffffffffffffffffffffffffffffffff) v15e0
0x75f: v75f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x774: v774 = AND v75f(0xffffffffffffffffffffffffffffffffffffffff) v75e
0x776: MSTORE v746 v774
0x777: v777(0x20) = CONST 
0x779: v779 = ADD v777(0x20) v746
0x77d: v77d(0x40) = CONST 
0x77f: v77f = MLOAD v77d(0x40)
0x782: v782 = SUB v779 v77f
0x784: RETURN v77f v782
----------------------------------

Begin block 0x785
prev = {}, next = {'0x791', '0x78d'}
----------------------------------
function allowance(address,address)()
Block 0x785
0x786: v786 = CALLVALUE 
0x788: v788 = ISZERO v786
0x789: v789(0x791) = CONST 
0x78c: JUMPI v789(0x791) v788
----------------------------------

Begin block 0x78d
prev = {'0x785'}, next = {}
----------------------------------
Block 0x78d
0x78d: v78d(0x0) = CONST 
0x790: REVERT v78d(0x0) v78d(0x0)
----------------------------------

Begin block 0x791
prev = {'0x785'}, next = {'0x7a8', '0x7a4'}
----------------------------------
Block 0x791
0x793: v793(0x7f4) = CONST 
0x796: v796(0x4) = CONST 
0x799: v799 = CALLDATASIZE 
0x79a: v79a = SUB v799 v796(0x4)
0x79b: v79b(0x40) = CONST 
0x79e: v79e = LT v79a v79b(0x40)
0x79f: v79f = ISZERO v79e
0x7a0: v7a0(0x7a8) = CONST 
0x7a3: JUMPI v7a0(0x7a8) v79f
----------------------------------

Begin block 0x7a4
prev = {'0x791'}, next = {}
----------------------------------
Block 0x7a4
0x7a4: v7a4(0x0) = CONST 
0x7a7: REVERT v7a4(0x0) v7a4(0x0)
----------------------------------

Begin block 0x7a8
prev = {'0x791'}, next = {'0x15e3'}
----------------------------------
Block 0x7a8
0x7aa: v7aa = ADD v796(0x4) v79a
0x7ae: v7ae = CALLDATALOAD v796(0x4)
0x7af: v7af(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c4: v7c4 = AND v7af(0xffffffffffffffffffffffffffffffffffffffff) v7ae
0x7c6: v7c6(0x20) = CONST 
0x7c8: v7c8 = ADD v7c6(0x20) v796(0x4)
0x7ce: v7ce = CALLDATALOAD v7c8
0x7cf: v7cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e4: v7e4 = AND v7cf(0xffffffffffffffffffffffffffffffffffffffff) v7ce
0x7e6: v7e6(0x20) = CONST 
0x7e8: v7e8 = ADD v7e6(0x20) v7c8
0x7f0: v7f0(0x15e3) = CONST 
0x7f3: JUMP v7f0(0x15e3)
----------------------------------

Begin block 0x7f4
prev = {'0x15e3'}, next = {}
----------------------------------
Block 0x7f4
0x7f5: v7f5(0x40) = CONST 
0x7f7: v7f7 = MLOAD v7f5(0x40)
0x7fb: MSTORE v7f7 v1662
0x7fc: v7fc(0x20) = CONST 
0x7fe: v7fe = ADD v7fc(0x20) v7f7
0x802: v802(0x40) = CONST 
0x804: v804 = MLOAD v802(0x40)
0x807: v807 = SUB v7fe v804
0x809: RETURN v804 v807
----------------------------------

Begin block 0x80a
prev = {}, next = {'0x816', '0x812'}
----------------------------------
function transferOwnership(address)()
Block 0x80a
0x80b: v80b = CALLVALUE 
0x80d: v80d = ISZERO v80b
0x80e: v80e(0x816) = CONST 
0x811: JUMPI v80e(0x816) v80d
----------------------------------

Begin block 0x812
prev = {'0x80a'}, next = {}
----------------------------------
Block 0x812
0x812: v812(0x0) = CONST 
0x815: REVERT v812(0x0) v812(0x0)
----------------------------------

Begin block 0x816
prev = {'0x80a'}, next = {'0x82d', '0x829'}
----------------------------------
Block 0x816
0x818: v818(0x859) = CONST 
0x81b: v81b(0x4) = CONST 
0x81e: v81e = CALLDATASIZE 
0x81f: v81f = SUB v81e v81b(0x4)
0x820: v820(0x20) = CONST 
0x823: v823 = LT v81f v820(0x20)
0x824: v824 = ISZERO v823
0x825: v825(0x82d) = CONST 
0x828: JUMPI v825(0x82d) v824
----------------------------------

Begin block 0x829
prev = {'0x816'}, next = {}
----------------------------------
Block 0x829
0x829: v829(0x0) = CONST 
0x82c: REVERT v829(0x0) v829(0x0)
----------------------------------

Begin block 0x82d
prev = {'0x816'}, next = {'0x166a'}
----------------------------------
Block 0x82d
0x82f: v82f = ADD v81b(0x4) v81f
0x833: v833 = CALLDATALOAD v81b(0x4)
0x834: v834(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x849: v849 = AND v834(0xffffffffffffffffffffffffffffffffffffffff) v833
0x84b: v84b(0x20) = CONST 
0x84d: v84d = ADD v84b(0x20) v81b(0x4)
0x855: v855(0x166a) = CONST 
0x858: JUMP v855(0x166a)
----------------------------------

Begin block 0x859
prev = {'0x16c3'}, next = {}
----------------------------------
Block 0x859
0x85a: STOP 
----------------------------------

Begin block 0x85b
prev = {'0x10f'}, next = {'0x8ab', '0x8f1'}
----------------------------------
Block 0x85b
0x85c: v85c(0x3) = CONST 
0x85f: v85f = SLOAD v85c(0x3)
0x860: v860(0x1) = CONST 
0x863: v863(0x1) = CONST 
0x865: v865 = AND v863(0x1) v85f
0x866: v866 = ISZERO v865
0x867: v867(0x100) = CONST 
0x86a: v86a = MUL v867(0x100) v866
0x86b: v86b = SUB v86a v860(0x1)
0x86c: v86c = AND v86b v85f
0x86d: v86d(0x2) = CONST 
0x870: v870 = DIV v86c v86d(0x2)
0x872: v872(0x1f) = CONST 
0x874: v874 = ADD v872(0x1f) v870
0x875: v875(0x20) = CONST 
0x879: v879 = DIV v874 v875(0x20)
0x87a: v87a = MUL v879 v875(0x20)
0x87b: v87b(0x20) = CONST 
0x87d: v87d = ADD v87b(0x20) v87a
0x87e: v87e(0x40) = CONST 
0x880: v880 = MLOAD v87e(0x40)
0x883: v883 = ADD v880 v87d
0x884: v884(0x40) = CONST 
0x886: MSTORE v884(0x40) v883
0x88d: MSTORE v880 v870
0x88e: v88e(0x20) = CONST 
0x890: v890 = ADD v88e(0x20) v880
0x893: v893 = SLOAD v85c(0x3)
0x894: v894(0x1) = CONST 
0x897: v897(0x1) = CONST 
0x899: v899 = AND v897(0x1) v893
0x89a: v89a = ISZERO v899
0x89b: v89b(0x100) = CONST 
0x89e: v89e = MUL v89b(0x100) v89a
0x89f: v89f = SUB v89e v894(0x1)
0x8a0: v8a0 = AND v89f v893
0x8a1: v8a1(0x2) = CONST 
0x8a4: v8a4 = DIV v8a0 v8a1(0x2)
0x8a6: v8a6 = ISZERO v8a4
0x8a7: v8a7(0x8f1) = CONST 
0x8aa: JUMPI v8a7(0x8f1) v8a6
----------------------------------

Begin block 0x8ab
prev = {'0x85b'}, next = {'0x8c6', '0x8b3'}
----------------------------------
Block 0x8ab
0x8ac: v8ac(0x1f) = CONST 
0x8ae: v8ae = LT v8ac(0x1f) v8a4
0x8af: v8af(0x8c6) = CONST 
0x8b2: JUMPI v8af(0x8c6) v8ae
----------------------------------

Begin block 0x8b3
prev = {'0x8ab'}, next = {'0x8f1'}
----------------------------------
Block 0x8b3
0x8b3: v8b3(0x100) = CONST 
0x8b8: v8b8 = SLOAD v85c(0x3)
0x8b9: v8b9 = DIV v8b8 v8b3(0x100)
0x8ba: v8ba = MUL v8b9 v8b3(0x100)
0x8bc: MSTORE v890 v8ba
0x8be: v8be(0x20) = CONST 
0x8c0: v8c0 = ADD v8be(0x20) v890
0x8c2: v8c2(0x8f1) = CONST 
0x8c5: JUMP v8c2(0x8f1)
----------------------------------

Begin block 0x8c6
prev = {'0x8ab'}, next = {'0x8d4'}
----------------------------------
Block 0x8c6
0x8c8: v8c8 = ADD v890 v8a4
0x8cb: v8cb(0x0) = CONST 
0x8cd: MSTORE v8cb(0x0) v85c(0x3)
0x8ce: v8ce(0x20) = CONST 
0x8d0: v8d0(0x0) = CONST 
0x8d2: v8d2 = SHA3 v8d0(0x0) v8ce(0x20)
----------------------------------

Begin block 0x8d4
prev = {'0x8c6', '0x8d4'}, next = {'0x8e8', '0x8d4'}
----------------------------------
Block 0x8d4
0x8d4_0x0: v8d4_0 = PHI v890 v8e0
0x8d4_0x1: v8d4_1 = PHI v8d2 v8dc
0x8d6: v8d6 = SLOAD v8d4_1
0x8d8: MSTORE v8d4_0 v8d6
0x8da: v8da(0x1) = CONST 
0x8dc: v8dc = ADD v8da(0x1) v8d4_1
0x8de: v8de(0x20) = CONST 
0x8e0: v8e0 = ADD v8de(0x20) v8d4_0
0x8e3: v8e3 = GT v8c8 v8e0
0x8e4: v8e4(0x8d4) = CONST 
0x8e7: JUMPI v8e4(0x8d4) v8e3
----------------------------------

Begin block 0x8e8
prev = {'0x8d4'}, next = {'0x8f1'}
----------------------------------
Block 0x8e8
0x8ea: v8ea = SUB v8e0 v8c8
0x8eb: v8eb(0x1f) = CONST 
0x8ed: v8ed = AND v8eb(0x1f) v8ea
0x8ef: v8ef = ADD v8c8 v8ed
----------------------------------

Begin block 0x8f1
prev = {'0x8e8', '0x8b3', '0x85b'}, next = {'0x118'}
----------------------------------
Block 0x8f1
0x8f8: JUMP v111(0x118)
----------------------------------

Begin block 0x8f9
prev = {'0x1b6'}, next = {'0x1ec'}
----------------------------------
Block 0x8f9
0x8fa: v8fa(0x0) = CONST 
0x8fd: v8fd(0x7) = CONST 
0x8ff: v8ff(0x0) = CONST 
0x901: v901 = CALLER 
0x902: v902(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x917: v917 = AND v902(0xffffffffffffffffffffffffffffffffffffffff) v901
0x918: v918(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x92d: v92d = AND v918(0xffffffffffffffffffffffffffffffffffffffff) v917
0x92f: MSTORE v8ff(0x0) v92d
0x930: v930(0x20) = CONST 
0x932: v932(0x20) = ADD v930(0x20) v8ff(0x0)
0x935: MSTORE v932(0x20) v8fd(0x7)
0x936: v936(0x20) = CONST 
0x938: v938(0x40) = ADD v936(0x20) v932(0x20)
0x939: v939(0x0) = CONST 
0x93b: v93b = SHA3 v939(0x0) v938(0x40)
0x93c: v93c(0x0) = CONST 
0x93f: v93f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x954: v954 = AND v93f(0xffffffffffffffffffffffffffffffffffffffff) v1d2
0x955: v955(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x96a: v96a = AND v955(0xffffffffffffffffffffffffffffffffffffffff) v954
0x96c: MSTORE v93c(0x0) v96a
0x96d: v96d(0x20) = CONST 
0x96f: v96f(0x20) = ADD v96d(0x20) v93c(0x0)
0x972: MSTORE v96f(0x20) v93b
0x973: v973(0x20) = CONST 
0x975: v975(0x40) = ADD v973(0x20) v96f(0x20)
0x976: v976(0x0) = CONST 
0x978: v978 = SHA3 v976(0x0) v975(0x40)
0x97b: SSTORE v978 v1dc
0x97e: v97e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x993: v993 = AND v97e(0xffffffffffffffffffffffffffffffffffffffff) v1d2
0x994: v994 = CALLER 
0x995: v995(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9aa: v9aa = AND v995(0xffffffffffffffffffffffffffffffffffffffff) v994
0x9ab: v9ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x9cd: v9cd(0x40) = CONST 
0x9cf: v9cf = MLOAD v9cd(0x40)
0x9d3: MSTORE v9cf v1dc
0x9d4: v9d4(0x20) = CONST 
0x9d6: v9d6 = ADD v9d4(0x20) v9cf
0x9da: v9da(0x40) = CONST 
0x9dc: v9dc = MLOAD v9da(0x40)
0x9df: v9df = SUB v9d6 v9dc
0x9e1: LOG3 v9dc v9df v9ab(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v9aa v993
0x9e2: v9e2(0x1) = CONST 
0x9ea: JUMP v1a1(0x1ec)
----------------------------------

Begin block 0x9eb
prev = {'0x212'}, next = {'0xa41'}
----------------------------------
Block 0x9eb
0x9ec: v9ec(0x0) = CONST 
0x9ee: v9ee(0xa41) = CONST 
0x9f1: v9f1(0x6) = CONST 
0x9f3: v9f3(0x0) = CONST 
0x9f6: v9f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa0b: va0b(0x0) = AND v9f6(0xffffffffffffffffffffffffffffffffffffffff) v9f3(0x0)
0xa0c: va0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa21: va21(0x0) = AND va0c(0xffffffffffffffffffffffffffffffffffffffff) va0b(0x0)
0xa23: MSTORE v9f3(0x0) va21(0x0)
0xa24: va24(0x20) = CONST 
0xa26: va26(0x20) = ADD va24(0x20) v9f3(0x0)
0xa29: MSTORE va26(0x20) v9f1(0x6)
0xa2a: va2a(0x20) = CONST 
0xa2c: va2c(0x40) = ADD va2a(0x20) va26(0x20)
0xa2d: va2d(0x0) = CONST 
0xa2f: va2f = SHA3 va2d(0x0) va2c(0x40)
0xa30: va30 = SLOAD va2f
0xa31: va31(0x5) = CONST 
0xa33: va33 = SLOAD va31(0x5)
0xa34: va34(0x1707) = CONST 
0xa3a: va3a(0xffffffff) = CONST 
0xa3f: va3f(0x1707) = AND va3a(0xffffffff) va34(0x1707)
0xa40: va40_0 = CALLPRIVATE va3f(0x1707) va30 va33 v9ee(0xa41)
----------------------------------

Begin block 0xa41
prev = {'0x9eb'}, next = {'0x21b'}
----------------------------------
Block 0xa41
0xa45: JUMP v214(0x21b)
----------------------------------

Begin block 0xa46
prev = {'0x254'}, next = {'0xa9a'}
----------------------------------
Block 0xa46
0xa47: va47(0x0) = CONST 
0xa49: va49(0xa9a) = CONST 
0xa4d: va4d(0x6) = CONST 
0xa4f: va4f(0x0) = CONST 
0xa52: va52(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa67: va67 = AND va52(0xffffffffffffffffffffffffffffffffffffffff) v270
0xa68: va68(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7d: va7d = AND va68(0xffffffffffffffffffffffffffffffffffffffff) va67
0xa7f: MSTORE va4f(0x0) va7d
0xa80: va80(0x20) = CONST 
0xa82: va82(0x20) = ADD va80(0x20) va4f(0x0)
0xa85: MSTORE va82(0x20) va4d(0x6)
0xa86: va86(0x20) = CONST 
0xa88: va88(0x40) = ADD va86(0x20) va82(0x20)
0xa89: va89(0x0) = CONST 
0xa8b: va8b = SHA3 va89(0x0) va88(0x40)
0xa8c: va8c = SLOAD va8b
0xa8d: va8d(0x1707) = CONST 
0xa93: va93(0xffffffff) = CONST 
0xa98: va98(0x1707) = AND va93(0xffffffff) va8d(0x1707)
0xa99: va99_0 = CALLPRIVATE va98(0x1707) v29a va8c va49(0xa9a)
----------------------------------

Begin block 0xa9a
prev = {'0xa46'}, next = {'0xb6c'}
----------------------------------
Block 0xa9a
0xa9b: va9b(0x6) = CONST 
0xa9d: va9d(0x0) = CONST 
0xaa0: vaa0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab5: vab5 = AND vaa0(0xffffffffffffffffffffffffffffffffffffffff) v270
0xab6: vab6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xacb: vacb = AND vab6(0xffffffffffffffffffffffffffffffffffffffff) vab5
0xacd: MSTORE va9d(0x0) vacb
0xace: vace(0x20) = CONST 
0xad0: vad0(0x20) = ADD vace(0x20) va9d(0x0)
0xad3: MSTORE vad0(0x20) va9b(0x6)
0xad4: vad4(0x20) = CONST 
0xad6: vad6(0x40) = ADD vad4(0x20) vad0(0x20)
0xad7: vad7(0x0) = CONST 
0xad9: vad9 = SHA3 vad7(0x0) vad6(0x40)
0xadc: SSTORE vad9 va99_0
0xade: vade(0xb6c) = CONST 
0xae2: vae2(0x7) = CONST 
0xae4: vae4(0x0) = CONST 
0xae7: vae7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xafc: vafc = AND vae7(0xffffffffffffffffffffffffffffffffffffffff) v270
0xafd: vafd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb12: vb12 = AND vafd(0xffffffffffffffffffffffffffffffffffffffff) vafc
0xb14: MSTORE vae4(0x0) vb12
0xb15: vb15(0x20) = CONST 
0xb17: vb17(0x20) = ADD vb15(0x20) vae4(0x0)
0xb1a: MSTORE vb17(0x20) vae2(0x7)
0xb1b: vb1b(0x20) = CONST 
0xb1d: vb1d(0x40) = ADD vb1b(0x20) vb17(0x20)
0xb1e: vb1e(0x0) = CONST 
0xb20: vb20 = SHA3 vb1e(0x0) vb1d(0x40)
0xb21: vb21(0x0) = CONST 
0xb23: vb23 = CALLER 
0xb24: vb24(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb39: vb39 = AND vb24(0xffffffffffffffffffffffffffffffffffffffff) vb23
0xb3a: vb3a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb4f: vb4f = AND vb3a(0xffffffffffffffffffffffffffffffffffffffff) vb39
0xb51: MSTORE vb21(0x0) vb4f
0xb52: vb52(0x20) = CONST 
0xb54: vb54(0x20) = ADD vb52(0x20) vb21(0x0)
0xb57: MSTORE vb54(0x20) vb20
0xb58: vb58(0x20) = CONST 
0xb5a: vb5a(0x40) = ADD vb58(0x20) vb54(0x20)
0xb5b: vb5b(0x0) = CONST 
0xb5d: vb5d = SHA3 vb5b(0x0) vb5a(0x40)
0xb5e: vb5e = SLOAD vb5d
0xb5f: vb5f(0x1707) = CONST 
0xb65: vb65(0xffffffff) = CONST 
0xb6a: vb6a(0x1707) = AND vb65(0xffffffff) vb5f(0x1707)
0xb6b: vb6b_0 = CALLPRIVATE vb6a(0x1707) v29a vb5e vade(0xb6c)
----------------------------------

Begin block 0xb6c
prev = {'0xa9a'}, next = {'0xc3e'}
----------------------------------
Block 0xb6c
0xb6d: vb6d(0x7) = CONST 
0xb6f: vb6f(0x0) = CONST 
0xb72: vb72(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb87: vb87 = AND vb72(0xffffffffffffffffffffffffffffffffffffffff) v270
0xb88: vb88(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9d: vb9d = AND vb88(0xffffffffffffffffffffffffffffffffffffffff) vb87
0xb9f: MSTORE vb6f(0x0) vb9d
0xba0: vba0(0x20) = CONST 
0xba2: vba2(0x20) = ADD vba0(0x20) vb6f(0x0)
0xba5: MSTORE vba2(0x20) vb6d(0x7)
0xba6: vba6(0x20) = CONST 
0xba8: vba8(0x40) = ADD vba6(0x20) vba2(0x20)
0xba9: vba9(0x0) = CONST 
0xbab: vbab = SHA3 vba9(0x0) vba8(0x40)
0xbac: vbac(0x0) = CONST 
0xbae: vbae = CALLER 
0xbaf: vbaf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbc4: vbc4 = AND vbaf(0xffffffffffffffffffffffffffffffffffffffff) vbae
0xbc5: vbc5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbda: vbda = AND vbc5(0xffffffffffffffffffffffffffffffffffffffff) vbc4
0xbdc: MSTORE vbac(0x0) vbda
0xbdd: vbdd(0x20) = CONST 
0xbdf: vbdf(0x20) = ADD vbdd(0x20) vbac(0x0)
0xbe2: MSTORE vbdf(0x20) vbab
0xbe3: vbe3(0x20) = CONST 
0xbe5: vbe5(0x40) = ADD vbe3(0x20) vbdf(0x20)
0xbe6: vbe6(0x0) = CONST 
0xbe8: vbe8 = SHA3 vbe6(0x0) vbe5(0x40)
0xbeb: SSTORE vbe8 vb6b_0
0xbed: vbed(0xc3e) = CONST 
0xbf1: vbf1(0x6) = CONST 
0xbf3: vbf3(0x0) = CONST 
0xbf6: vbf6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0b: vc0b = AND vbf6(0xffffffffffffffffffffffffffffffffffffffff) v290
0xc0c: vc0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc21: vc21 = AND vc0c(0xffffffffffffffffffffffffffffffffffffffff) vc0b
0xc23: MSTORE vbf3(0x0) vc21
0xc24: vc24(0x20) = CONST 
0xc26: vc26(0x20) = ADD vc24(0x20) vbf3(0x0)
0xc29: MSTORE vc26(0x20) vbf1(0x6)
0xc2a: vc2a(0x20) = CONST 
0xc2c: vc2c(0x40) = ADD vc2a(0x20) vc26(0x20)
0xc2d: vc2d(0x0) = CONST 
0xc2f: vc2f = SHA3 vc2d(0x0) vc2c(0x40)
0xc30: vc30 = SLOAD vc2f
0xc31: vc31(0x1721) = CONST 
0xc37: vc37(0xffffffff) = CONST 
0xc3c: vc3c(0x1721) = AND vc37(0xffffffff) vc31(0x1721)
0xc3d: vc3d_0 = CALLPRIVATE vc3c(0x1721) v29a vc30 vbed(0xc3e)
----------------------------------

Begin block 0xc3e
prev = {'0xb6c'}, next = {'0x2aa'}
----------------------------------
Block 0xc3e
0xc3f: vc3f(0x6) = CONST 
0xc41: vc41(0x0) = CONST 
0xc44: vc44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc59: vc59 = AND vc44(0xffffffffffffffffffffffffffffffffffffffff) v290
0xc5a: vc5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6f: vc6f = AND vc5a(0xffffffffffffffffffffffffffffffffffffffff) vc59
0xc71: MSTORE vc41(0x0) vc6f
0xc72: vc72(0x20) = CONST 
0xc74: vc74(0x20) = ADD vc72(0x20) vc41(0x0)
0xc77: MSTORE vc74(0x20) vc3f(0x6)
0xc78: vc78(0x20) = CONST 
0xc7a: vc7a(0x40) = ADD vc78(0x20) vc74(0x20)
0xc7b: vc7b(0x0) = CONST 
0xc7d: vc7d = SHA3 vc7b(0x0) vc7a(0x40)
0xc80: SSTORE vc7d vc3d_0
0xc83: vc83(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc98: vc98 = AND vc83(0xffffffffffffffffffffffffffffffffffffffff) v290
0xc9a: vc9a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcaf: vcaf = AND vc9a(0xffffffffffffffffffffffffffffffffffffffff) v270
0xcb0: vcb0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xcd2: vcd2(0x40) = CONST 
0xcd4: vcd4 = MLOAD vcd2(0x40)
0xcd8: MSTORE vcd4 v29a
0xcd9: vcd9(0x20) = CONST 
0xcdb: vcdb = ADD vcd9(0x20) vcd4
0xcdf: vcdf(0x40) = CONST 
0xce1: vce1 = MLOAD vcdf(0x40)
0xce4: vce4 = SUB vcdb vce1
0xce6: LOG3 vce1 vce4 vcb0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vcaf vc98
0xce7: vce7(0x1) = CONST 
0xcf0: JUMP v23f(0x2aa)
----------------------------------

Begin block 0xcf1
prev = {'0x2d0'}, next = {'0x2d9'}
----------------------------------
Block 0xcf1
0xcf2: vcf2(0x4) = CONST 
0xcf4: vcf4(0x0) = CONST 
0xcf7: vcf7 = SLOAD vcf2(0x4)
0xcf9: vcf9(0x100) = CONST 
0xcfc: vcfc(0x1) = EXP vcf9(0x100) vcf4(0x0)
0xcfe: vcfe = DIV vcf7 vcfc(0x1)
0xcff: vcff(0xff) = CONST 
0xd01: vd01 = AND vcff(0xff) vcfe
0xd03: JUMP v2d2(0x2d9)
----------------------------------

Begin block 0xd04
prev = {'0x318'}, next = {'0xd5f', '0xd5b'}
----------------------------------
Block 0xd04
0xd05: vd05(0x0) = CONST 
0xd08: vd08(0x0) = CONST 
0xd0b: vd0b = SLOAD vd05(0x0)
0xd0d: vd0d(0x100) = CONST 
0xd10: vd10(0x1) = EXP vd0d(0x100) vd08(0x0)
0xd12: vd12 = DIV vd0b vd10(0x1)
0xd13: vd13(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd28: vd28 = AND vd13(0xffffffffffffffffffffffffffffffffffffffff) vd12
0xd29: vd29(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd3e: vd3e = AND vd29(0xffffffffffffffffffffffffffffffffffffffff) vd28
0xd3f: vd3f = CALLER 
0xd40: vd40(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd55: vd55 = AND vd40(0xffffffffffffffffffffffffffffffffffffffff) vd3f
0xd56: vd56 = EQ vd55 vd3e
0xd57: vd57(0xd5f) = CONST 
0xd5a: JUMPI vd57(0xd5f) vd56
----------------------------------

Begin block 0xd5b
prev = {'0xd04'}, next = {}
----------------------------------
Block 0xd5b
0xd5b: vd5b(0x0) = CONST 
0xd5e: REVERT vd5b(0x0) vd5b(0x0)
----------------------------------

Begin block 0xd5f
prev = {'0xd04'}, next = {'0x173b'}
----------------------------------
Block 0xd5f
0xd60: vd60(0xd69) = CONST 
0xd65: vd65(0x173b) = CONST 
0xd68: JUMP vd65(0x173b)
----------------------------------

Begin block 0xd69
prev = {'0x17f3'}, next = {'0xd77', '0xd6f'}
----------------------------------
Block 0xd69
0xd6a: vd6a = ISZERO v1860(0x1)
0xd6b: vd6b(0xd77) = CONST 
0xd6e: JUMPI vd6b(0xd77) vd6a
----------------------------------

Begin block 0xd6f
prev = {'0xd69'}, next = {'0xd7c'}
----------------------------------
Block 0xd6f
0xd6f: vd6f(0x1) = CONST 
0xd73: vd73(0xd7c) = CONST 
0xd76: JUMP vd73(0xd7c)
----------------------------------

Begin block 0xd77
prev = {'0xd69'}, next = {'0xd7c'}
----------------------------------
Block 0xd77
0xd78: vd78(0x0) = CONST 
----------------------------------

Begin block 0xd7c
prev = {'0xd77', '0xd6f'}, next = {'0x34e'}
----------------------------------
Block 0xd7c
0xd81: JUMP v303(0x34e)
----------------------------------

Begin block 0xd82
prev = {'0x38b'}, next = {'0x3b7'}
----------------------------------
Block 0xd82
0xd83: vd83(0x0) = CONST 
0xd85: vd85(0x6) = CONST 
0xd87: vd87(0x0) = CONST 
0xd8a: vd8a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd9f: vd9f = AND vd8a(0xffffffffffffffffffffffffffffffffffffffff) v3a7
0xda0: vda0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdb5: vdb5 = AND vda0(0xffffffffffffffffffffffffffffffffffffffff) vd9f
0xdb7: MSTORE vd87(0x0) vdb5
0xdb8: vdb8(0x20) = CONST 
0xdba: vdba(0x20) = ADD vdb8(0x20) vd87(0x0)
0xdbd: MSTORE vdba(0x20) vd85(0x6)
0xdbe: vdbe(0x20) = CONST 
0xdc0: vdc0(0x40) = ADD vdbe(0x20) vdba(0x20)
0xdc1: vdc1(0x0) = CONST 
0xdc3: vdc3 = SHA3 vdc1(0x0) vdc0(0x40)
0xdc4: vdc4 = SLOAD vdc3
0xdca: JUMP v376(0x3b7)
----------------------------------

Begin block 0xdcb
prev = {'0x3d9'}, next = {'0xe25', '0xe21'}
----------------------------------
Block 0xdcb
0xdcc: vdcc(0x1) = CONST 
0xdce: vdce(0x0) = CONST 
0xdd1: vdd1 = SLOAD vdcc(0x1)
0xdd3: vdd3(0x100) = CONST 
0xdd6: vdd6(0x1) = EXP vdd3(0x100) vdce(0x0)
0xdd8: vdd8 = DIV vdd1 vdd6(0x1)
0xdd9: vdd9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdee: vdee = AND vdd9(0xffffffffffffffffffffffffffffffffffffffff) vdd8
0xdef: vdef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe04: ve04 = AND vdef(0xffffffffffffffffffffffffffffffffffffffff) vdee
0xe05: ve05 = CALLER 
0xe06: ve06(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe1b: ve1b = AND ve06(0xffffffffffffffffffffffffffffffffffffffff) ve05
0xe1c: ve1c = EQ ve1b ve04
0xe1d: ve1d(0xe25) = CONST 
0xe20: JUMPI ve1d(0xe25) ve1c
----------------------------------

Begin block 0xe21
prev = {'0xdcb'}, next = {}
----------------------------------
Block 0xe21
0xe21: ve21(0x0) = CONST 
0xe24: REVERT ve21(0x0) ve21(0x0)
----------------------------------

Begin block 0xe25
prev = {'0xdcb'}, next = {'0x3e2'}
----------------------------------
Block 0xe25
0xe26: ve26(0x1) = CONST 
0xe28: ve28(0x0) = CONST 
0xe2b: ve2b = SLOAD ve26(0x1)
0xe2d: ve2d(0x100) = CONST 
0xe30: ve30(0x1) = EXP ve2d(0x100) ve28(0x0)
0xe32: ve32 = DIV ve2b ve30(0x1)
0xe33: ve33(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe48: ve48 = AND ve33(0xffffffffffffffffffffffffffffffffffffffff) ve32
0xe49: ve49(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe5e: ve5e = AND ve49(0xffffffffffffffffffffffffffffffffffffffff) ve48
0xe5f: ve5f(0x0) = CONST 
0xe63: ve63 = SLOAD ve5f(0x0)
0xe65: ve65(0x100) = CONST 
0xe68: ve68(0x1) = EXP ve65(0x100) ve5f(0x0)
0xe6a: ve6a = DIV ve63 ve68(0x1)
0xe6b: ve6b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe80: ve80 = AND ve6b(0xffffffffffffffffffffffffffffffffffffffff) ve6a
0xe81: ve81(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe96: ve96 = AND ve81(0xffffffffffffffffffffffffffffffffffffffff) ve80
0xe97: ve97(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xeb8: veb8(0x40) = CONST 
0xeba: veba = MLOAD veb8(0x40)
0xebb: vebb(0x40) = CONST 
0xebd: vebd = MLOAD vebb(0x40)
0xec0: vec0 = SUB veba vebd
0xec2: LOG3 vebd vec0 ve97(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) ve96 ve5e
0xec3: vec3(0x1) = CONST 
0xec5: vec5(0x0) = CONST 
0xec8: vec8 = SLOAD vec3(0x1)
0xeca: veca(0x100) = CONST 
0xecd: vecd(0x1) = EXP veca(0x100) vec5(0x0)
0xecf: vecf = DIV vec8 vecd(0x1)
0xed0: ved0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xee5: vee5 = AND ved0(0xffffffffffffffffffffffffffffffffffffffff) vecf
0xee6: vee6(0x0) = CONST 
0xee9: vee9(0x100) = CONST 
0xeec: veec(0x1) = EXP vee9(0x100) vee6(0x0)
0xeee: veee = SLOAD vee6(0x0)
0xef0: vef0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf05: vf05(0xffffffffffffffffffffffffffffffffffffffff) = MUL vef0(0xffffffffffffffffffffffffffffffffffffffff) veec(0x1)
0xf06: vf06(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf05(0xffffffffffffffffffffffffffffffffffffffff)
0xf07: vf07 = AND vf06(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) veee
0xf0a: vf0a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1f: vf1f = AND vf0a(0xffffffffffffffffffffffffffffffffffffffff) vee5
0xf20: vf20 = MUL vf1f veec(0x1)
0xf21: vf21 = OR vf20 vf07
0xf23: SSTORE vee6(0x0) vf21
0xf25: vf25(0x0) = CONST 
0xf27: vf27(0x1) = CONST 
0xf29: vf29(0x0) = CONST 
0xf2b: vf2b(0x100) = CONST 
0xf2e: vf2e(0x1) = EXP vf2b(0x100) vf29(0x0)
0xf30: vf30 = SLOAD vf27(0x1)
0xf32: vf32(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf47: vf47(0xffffffffffffffffffffffffffffffffffffffff) = MUL vf32(0xffffffffffffffffffffffffffffffffffffffff) vf2e(0x1)
0xf48: vf48(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf47(0xffffffffffffffffffffffffffffffffffffffff)
0xf49: vf49 = AND vf48(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf30
0xf4c: vf4c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf61: vf61(0x0) = AND vf4c(0xffffffffffffffffffffffffffffffffffffffff) vf25(0x0)
0xf62: vf62(0x0) = MUL vf61(0x0) vf2e(0x1)
0xf63: vf63 = OR vf62(0x0) vf49
0xf65: SSTORE vf27(0x1) vf63
0xf67: JUMP v3db(0x3e2)
----------------------------------

Begin block 0xf68
prev = {'0x3f0'}, next = {'0x3f9'}
----------------------------------
Block 0xf68
0xf69: vf69(0x0) = CONST 
0xf6d: vf6d = SLOAD vf69(0x0)
0xf6f: vf6f(0x100) = CONST 
0xf72: vf72(0x1) = EXP vf6f(0x100) vf69(0x0)
0xf74: vf74 = DIV vf6d vf72(0x1)
0xf75: vf75(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf8a: vf8a = AND vf75(0xffffffffffffffffffffffffffffffffffffffff) vf74
0xf8c: JUMP v3f2(0x3f9)
----------------------------------

Begin block 0xf8d
prev = {'0x447'}, next = {'0xfdd', '0x1023'}
----------------------------------
Block 0xf8d
0xf8e: vf8e(0x2) = CONST 
0xf91: vf91 = SLOAD vf8e(0x2)
0xf92: vf92(0x1) = CONST 
0xf95: vf95(0x1) = CONST 
0xf97: vf97 = AND vf95(0x1) vf91
0xf98: vf98 = ISZERO vf97
0xf99: vf99(0x100) = CONST 
0xf9c: vf9c = MUL vf99(0x100) vf98
0xf9d: vf9d = SUB vf9c vf92(0x1)
0xf9e: vf9e = AND vf9d vf91
0xf9f: vf9f(0x2) = CONST 
0xfa2: vfa2 = DIV vf9e vf9f(0x2)
0xfa4: vfa4(0x1f) = CONST 
0xfa6: vfa6 = ADD vfa4(0x1f) vfa2
0xfa7: vfa7(0x20) = CONST 
0xfab: vfab = DIV vfa6 vfa7(0x20)
0xfac: vfac = MUL vfab vfa7(0x20)
0xfad: vfad(0x20) = CONST 
0xfaf: vfaf = ADD vfad(0x20) vfac
0xfb0: vfb0(0x40) = CONST 
0xfb2: vfb2 = MLOAD vfb0(0x40)
0xfb5: vfb5 = ADD vfb2 vfaf
0xfb6: vfb6(0x40) = CONST 
0xfb8: MSTORE vfb6(0x40) vfb5
0xfbf: MSTORE vfb2 vfa2
0xfc0: vfc0(0x20) = CONST 
0xfc2: vfc2 = ADD vfc0(0x20) vfb2
0xfc5: vfc5 = SLOAD vf8e(0x2)
0xfc6: vfc6(0x1) = CONST 
0xfc9: vfc9(0x1) = CONST 
0xfcb: vfcb = AND vfc9(0x1) vfc5
0xfcc: vfcc = ISZERO vfcb
0xfcd: vfcd(0x100) = CONST 
0xfd0: vfd0 = MUL vfcd(0x100) vfcc
0xfd1: vfd1 = SUB vfd0 vfc6(0x1)
0xfd2: vfd2 = AND vfd1 vfc5
0xfd3: vfd3(0x2) = CONST 
0xfd6: vfd6 = DIV vfd2 vfd3(0x2)
0xfd8: vfd8 = ISZERO vfd6
0xfd9: vfd9(0x1023) = CONST 
0xfdc: JUMPI vfd9(0x1023) vfd8
----------------------------------

Begin block 0xfdd
prev = {'0xf8d'}, next = {'0xff8', '0xfe5'}
----------------------------------
Block 0xfdd
0xfde: vfde(0x1f) = CONST 
0xfe0: vfe0 = LT vfde(0x1f) vfd6
0xfe1: vfe1(0xff8) = CONST 
0xfe4: JUMPI vfe1(0xff8) vfe0
----------------------------------

Begin block 0xfe5
prev = {'0xfdd'}, next = {'0x1023'}
----------------------------------
Block 0xfe5
0xfe5: vfe5(0x100) = CONST 
0xfea: vfea = SLOAD vf8e(0x2)
0xfeb: vfeb = DIV vfea vfe5(0x100)
0xfec: vfec = MUL vfeb vfe5(0x100)
0xfee: MSTORE vfc2 vfec
0xff0: vff0(0x20) = CONST 
0xff2: vff2 = ADD vff0(0x20) vfc2
0xff4: vff4(0x1023) = CONST 
0xff7: JUMP vff4(0x1023)
----------------------------------

Begin block 0xff8
prev = {'0xfdd'}, next = {'0x1006'}
----------------------------------
Block 0xff8
0xffa: vffa = ADD vfc2 vfd6
0xffd: vffd(0x0) = CONST 
0xfff: MSTORE vffd(0x0) vf8e(0x2)
0x1000: v1000(0x20) = CONST 
0x1002: v1002(0x0) = CONST 
0x1004: v1004 = SHA3 v1002(0x0) v1000(0x20)
----------------------------------

Begin block 0x1006
prev = {'0xff8', '0x1006'}, next = {'0x1006', '0x101a'}
----------------------------------
Block 0x1006
0x1006_0x0: v1006_0 = PHI vfc2 v1012
0x1006_0x1: v1006_1 = PHI v1004 v100e
0x1008: v1008 = SLOAD v1006_1
0x100a: MSTORE v1006_0 v1008
0x100c: v100c(0x1) = CONST 
0x100e: v100e = ADD v100c(0x1) v1006_1
0x1010: v1010(0x20) = CONST 
0x1012: v1012 = ADD v1010(0x20) v1006_0
0x1015: v1015 = GT vffa v1012
0x1016: v1016(0x1006) = CONST 
0x1019: JUMPI v1016(0x1006) v1015
----------------------------------

Begin block 0x101a
prev = {'0x1006'}, next = {'0x1023'}
----------------------------------
Block 0x101a
0x101c: v101c = SUB v1012 vffa
0x101d: v101d(0x1f) = CONST 
0x101f: v101f = AND v101d(0x1f) v101c
0x1021: v1021 = ADD vffa v101f
----------------------------------

Begin block 0x1023
prev = {'0xf8d', '0xfe5', '0x101a'}, next = {'0x450'}
----------------------------------
Block 0x1023
0x102a: JUMP v449(0x450)
----------------------------------

Begin block 0x102b
prev = {'0x4ee'}, next = {'0x1086', '0x1082'}
----------------------------------
Block 0x102b
0x102c: v102c(0x0) = CONST 
0x102f: v102f(0x0) = CONST 
0x1032: v1032 = SLOAD v102c(0x0)
0x1034: v1034(0x100) = CONST 
0x1037: v1037(0x1) = EXP v1034(0x100) v102f(0x0)
0x1039: v1039 = DIV v1032 v1037(0x1)
0x103a: v103a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x104f: v104f = AND v103a(0xffffffffffffffffffffffffffffffffffffffff) v1039
0x1050: v1050(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1065: v1065 = AND v1050(0xffffffffffffffffffffffffffffffffffffffff) v104f
0x1066: v1066 = CALLER 
0x1067: v1067(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x107c: v107c = AND v1067(0xffffffffffffffffffffffffffffffffffffffff) v1066
0x107d: v107d = EQ v107c v1065
0x107e: v107e(0x1086) = CONST 
0x1081: JUMPI v107e(0x1086) v107d
----------------------------------

Begin block 0x1082
prev = {'0x102b'}, next = {}
----------------------------------
Block 0x1082
0x1082: v1082(0x0) = CONST 
0x1085: REVERT v1082(0x0) v1082(0x0)
----------------------------------

Begin block 0x1086
prev = {'0x102b'}, next = {'0x112e', '0x112a'}
----------------------------------
Block 0x1086
0x1088: v1088(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x109d: v109d = AND v1088(0xffffffffffffffffffffffffffffffffffffffff) v50a
0x109e: v109e(0xa9059cbb) = CONST 
0x10a3: v10a3(0x0) = CONST 
0x10a7: v10a7 = SLOAD v10a3(0x0)
0x10a9: v10a9(0x100) = CONST 
0x10ac: v10ac(0x1) = EXP v10a9(0x100) v10a3(0x0)
0x10ae: v10ae = DIV v10a7 v10ac(0x1)
0x10af: v10af(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c4: v10c4 = AND v10af(0xffffffffffffffffffffffffffffffffffffffff) v10ae
0x10c6: v10c6(0x40) = CONST 
0x10c8: v10c8 = MLOAD v10c6(0x40)
0x10ca: v10ca(0xffffffff) = CONST 
0x10cf: v10cf(0xa9059cbb) = AND v10ca(0xffffffff) v109e(0xa9059cbb)
0x10d0: v10d0(0xe0) = CONST 
0x10d2: v10d2(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v10d0(0xe0) v10cf(0xa9059cbb)
0x10d4: MSTORE v10c8 v10d2(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x10d5: v10d5(0x4) = CONST 
0x10d7: v10d7 = ADD v10d5(0x4) v10c8
0x10da: v10da(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10ef: v10ef = AND v10da(0xffffffffffffffffffffffffffffffffffffffff) v10c4
0x10f0: v10f0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1105: v1105 = AND v10f0(0xffffffffffffffffffffffffffffffffffffffff) v10ef
0x1107: MSTORE v10d7 v1105
0x1108: v1108(0x20) = CONST 
0x110a: v110a = ADD v1108(0x20) v10d7
0x110d: MSTORE v110a v514
0x110e: v110e(0x20) = CONST 
0x1110: v1110 = ADD v110e(0x20) v110a
0x1115: v1115(0x20) = CONST 
0x1117: v1117(0x40) = CONST 
0x1119: v1119 = MLOAD v1117(0x40)
0x111c: v111c = SUB v1110 v1119
0x111e: v111e(0x0) = CONST 
0x1122: v1122 = EXTCODESIZE v109d
0x1123: v1123 = ISZERO v1122
0x1125: v1125 = ISZERO v1123
0x1126: v1126(0x112e) = CONST 
0x1129: JUMPI v1126(0x112e) v1125
----------------------------------

Begin block 0x112a
prev = {'0x1086'}, next = {}
----------------------------------
Block 0x112a
0x112a: v112a(0x0) = CONST 
0x112d: REVERT v112a(0x0) v112a(0x0)
----------------------------------

Begin block 0x112e
prev = {'0x1086'}, next = {'0x1139', '0x1142'}
----------------------------------
Block 0x112e
0x1130: v1130 = GAS 
0x1131: v1131 = CALL v1130 v109d v111e(0x0) v1119 v111c v1119 v1115(0x20)
0x1132: v1132 = ISZERO v1131
0x1134: v1134 = ISZERO v1132
0x1135: v1135(0x1142) = CONST 
0x1138: JUMPI v1135(0x1142) v1134
----------------------------------

Begin block 0x1139
prev = {'0x112e'}, next = {}
----------------------------------
Block 0x1139
0x1139: v1139 = RETURNDATASIZE 
0x113a: v113a(0x0) = CONST 
0x113d: RETURNDATACOPY v113a(0x0) v113a(0x0) v1139
0x113e: v113e = RETURNDATASIZE 
0x113f: v113f(0x0) = CONST 
0x1141: REVERT v113f(0x0) v113e
----------------------------------

Begin block 0x1142
prev = {'0x112e'}, next = {'0x1158', '0x1154'}
----------------------------------
Block 0x1142
0x1147: v1147(0x40) = CONST 
0x1149: v1149 = MLOAD v1147(0x40)
0x114a: v114a = RETURNDATASIZE 
0x114b: v114b(0x20) = CONST 
0x114e: v114e = LT v114a v114b(0x20)
0x114f: v114f = ISZERO v114e
0x1150: v1150(0x1158) = CONST 
0x1153: JUMPI v1150(0x1158) v114f
----------------------------------

Begin block 0x1154
prev = {'0x1142'}, next = {}
----------------------------------
Block 0x1154
0x1154: v1154(0x0) = CONST 
0x1157: REVERT v1154(0x0) v1154(0x0)
----------------------------------

Begin block 0x1158
prev = {'0x1142'}, next = {'0x524'}
----------------------------------
Block 0x1158
0x115a: v115a = ADD v1149 v114a
0x115e: v115e = MLOAD v1149
0x1160: v1160(0x20) = CONST 
0x1162: v1162 = ADD v1160(0x20) v1149
0x1170: JUMP v4d9(0x524)
----------------------------------

Begin block 0x1171
prev = {'0x561'}, next = {'0x11cc', '0x11c8'}
----------------------------------
Block 0x1171
0x1172: v1172(0x0) = CONST 
0x1175: v1175(0x0) = CONST 
0x1178: v1178 = SLOAD v1172(0x0)
0x117a: v117a(0x100) = CONST 
0x117d: v117d(0x1) = EXP v117a(0x100) v1175(0x0)
0x117f: v117f = DIV v1178 v117d(0x1)
0x1180: v1180(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1195: v1195 = AND v1180(0xffffffffffffffffffffffffffffffffffffffff) v117f
0x1196: v1196(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11ab: v11ab = AND v1196(0xffffffffffffffffffffffffffffffffffffffff) v1195
0x11ac: v11ac = CALLER 
0x11ad: v11ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11c2: v11c2 = AND v11ad(0xffffffffffffffffffffffffffffffffffffffff) v11ac
0x11c3: v11c3 = EQ v11c2 v11ab
0x11c4: v11c4(0x11cc) = CONST 
0x11c7: JUMPI v11c4(0x11cc) v11c3
----------------------------------

Begin block 0x11c8
prev = {'0x1171'}, next = {}
----------------------------------
Block 0x11c8
0x11c8: v11c8(0x0) = CONST 
0x11cb: REVERT v11c8(0x0) v11c8(0x0)
----------------------------------

Begin block 0x11cc
prev = {'0x1171'}, next = {'0x1869'}
----------------------------------
Block 0x11cc
0x11cd: v11cd(0x11d6) = CONST 
0x11d2: v11d2(0x1869) = CONST 
0x11d5: JUMP v11d2(0x1869)
----------------------------------

Begin block 0x11d6
prev = {'0x1924'}, next = {'0x11e4', '0x11dc'}
----------------------------------
Block 0x11d6
0x11d7: v11d7 = ISZERO v1991(0x1)
0x11d8: v11d8(0x11e4) = CONST 
0x11db: JUMPI v11d8(0x11e4) v11d7
----------------------------------

Begin block 0x11dc
prev = {'0x11d6'}, next = {'0x11e9'}
----------------------------------
Block 0x11dc
0x11dc: v11dc(0x1) = CONST 
0x11e0: v11e0(0x11e9) = CONST 
0x11e3: JUMP v11e0(0x11e9)
----------------------------------

Begin block 0x11e4
prev = {'0x11d6'}, next = {'0x11e9'}
----------------------------------
Block 0x11e4
0x11e5: v11e5(0x0) = CONST 
----------------------------------

Begin block 0x11e9
prev = {'0x11e4', '0x11dc'}, next = {'0x597'}
----------------------------------
Block 0x11e9
0x11ee: JUMP v54c(0x597)
----------------------------------

Begin block 0x11ef
prev = {'0x5d4'}, next = {'0x1243'}
----------------------------------
Block 0x11ef
0x11f0: v11f0(0x0) = CONST 
0x11f2: v11f2(0x1243) = CONST 
0x11f6: v11f6(0x6) = CONST 
0x11f8: v11f8(0x0) = CONST 
0x11fa: v11fa = CALLER 
0x11fb: v11fb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1210: v1210 = AND v11fb(0xffffffffffffffffffffffffffffffffffffffff) v11fa
0x1211: v1211(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1226: v1226 = AND v1211(0xffffffffffffffffffffffffffffffffffffffff) v1210
0x1228: MSTORE v11f8(0x0) v1226
0x1229: v1229(0x20) = CONST 
0x122b: v122b(0x20) = ADD v1229(0x20) v11f8(0x0)
0x122e: MSTORE v122b(0x20) v11f6(0x6)
0x122f: v122f(0x20) = CONST 
0x1231: v1231(0x40) = ADD v122f(0x20) v122b(0x20)
0x1232: v1232(0x0) = CONST 
0x1234: v1234 = SHA3 v1232(0x0) v1231(0x40)
0x1235: v1235 = SLOAD v1234
0x1236: v1236(0x1707) = CONST 
0x123c: v123c(0xffffffff) = CONST 
0x1241: v1241(0x1707) = AND v123c(0xffffffff) v1236(0x1707)
0x1242: v1242_0 = CALLPRIVATE v1241(0x1707) v5fa v1235 v11f2(0x1243)
----------------------------------

Begin block 0x1243
prev = {'0x11ef'}, next = {'0x12d8'}
----------------------------------
Block 0x1243
0x1244: v1244(0x6) = CONST 
0x1246: v1246(0x0) = CONST 
0x1248: v1248 = CALLER 
0x1249: v1249(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x125e: v125e = AND v1249(0xffffffffffffffffffffffffffffffffffffffff) v1248
0x125f: v125f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1274: v1274 = AND v125f(0xffffffffffffffffffffffffffffffffffffffff) v125e
0x1276: MSTORE v1246(0x0) v1274
0x1277: v1277(0x20) = CONST 
0x1279: v1279(0x20) = ADD v1277(0x20) v1246(0x0)
0x127c: MSTORE v1279(0x20) v1244(0x6)
0x127d: v127d(0x20) = CONST 
0x127f: v127f(0x40) = ADD v127d(0x20) v1279(0x20)
0x1280: v1280(0x0) = CONST 
0x1282: v1282 = SHA3 v1280(0x0) v127f(0x40)
0x1285: SSTORE v1282 v1242_0
0x1287: v1287(0x12d8) = CONST 
0x128b: v128b(0x6) = CONST 
0x128d: v128d(0x0) = CONST 
0x1290: v1290(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12a5: v12a5 = AND v1290(0xffffffffffffffffffffffffffffffffffffffff) v5f0
0x12a6: v12a6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12bb: v12bb = AND v12a6(0xffffffffffffffffffffffffffffffffffffffff) v12a5
0x12bd: MSTORE v128d(0x0) v12bb
0x12be: v12be(0x20) = CONST 
0x12c0: v12c0(0x20) = ADD v12be(0x20) v128d(0x0)
0x12c3: MSTORE v12c0(0x20) v128b(0x6)
0x12c4: v12c4(0x20) = CONST 
0x12c6: v12c6(0x40) = ADD v12c4(0x20) v12c0(0x20)
0x12c7: v12c7(0x0) = CONST 
0x12c9: v12c9 = SHA3 v12c7(0x0) v12c6(0x40)
0x12ca: v12ca = SLOAD v12c9
0x12cb: v12cb(0x1721) = CONST 
0x12d1: v12d1(0xffffffff) = CONST 
0x12d6: v12d6(0x1721) = AND v12d1(0xffffffff) v12cb(0x1721)
0x12d7: v12d7_0 = CALLPRIVATE v12d6(0x1721) v5fa v12ca v1287(0x12d8)
----------------------------------

Begin block 0x12d8
prev = {'0x1243'}, next = {'0x60a'}
----------------------------------
Block 0x12d8
0x12d9: v12d9(0x6) = CONST 
0x12db: v12db(0x0) = CONST 
0x12de: v12de(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12f3: v12f3 = AND v12de(0xffffffffffffffffffffffffffffffffffffffff) v5f0
0x12f4: v12f4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1309: v1309 = AND v12f4(0xffffffffffffffffffffffffffffffffffffffff) v12f3
0x130b: MSTORE v12db(0x0) v1309
0x130c: v130c(0x20) = CONST 
0x130e: v130e(0x20) = ADD v130c(0x20) v12db(0x0)
0x1311: MSTORE v130e(0x20) v12d9(0x6)
0x1312: v1312(0x20) = CONST 
0x1314: v1314(0x40) = ADD v1312(0x20) v130e(0x20)
0x1315: v1315(0x0) = CONST 
0x1317: v1317 = SHA3 v1315(0x0) v1314(0x40)
0x131a: SSTORE v1317 v12d7_0
0x131d: v131d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1332: v1332 = AND v131d(0xffffffffffffffffffffffffffffffffffffffff) v5f0
0x1333: v1333 = CALLER 
0x1334: v1334(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1349: v1349 = AND v1334(0xffffffffffffffffffffffffffffffffffffffff) v1333
0x134a: v134a(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x136c: v136c(0x40) = CONST 
0x136e: v136e = MLOAD v136c(0x40)
0x1372: MSTORE v136e v5fa
0x1373: v1373(0x20) = CONST 
0x1375: v1375 = ADD v1373(0x20) v136e
0x1379: v1379(0x40) = CONST 
0x137b: v137b = MLOAD v1379(0x40)
0x137e: v137e = SUB v1375 v137b
0x1380: LOG3 v137b v137e v134a(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1349 v1332
0x1381: v1381(0x1) = CONST 
0x1389: JUMP v5bf(0x60a)
----------------------------------

Begin block 0x138a
prev = {'0x6c2'}, next = {'0x1530'}
----------------------------------
Block 0x138a
0x138b: v138b(0x0) = CONST 
0x138e: v138e(0x7) = CONST 
0x1390: v1390(0x0) = CONST 
0x1392: v1392 = CALLER 
0x1393: v1393(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13a8: v13a8 = AND v1393(0xffffffffffffffffffffffffffffffffffffffff) v1392
0x13a9: v13a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13be: v13be = AND v13a9(0xffffffffffffffffffffffffffffffffffffffff) v13a8
0x13c0: MSTORE v1390(0x0) v13be
0x13c1: v13c1(0x20) = CONST 
0x13c3: v13c3(0x20) = ADD v13c1(0x20) v1390(0x0)
0x13c6: MSTORE v13c3(0x20) v138e(0x7)
0x13c7: v13c7(0x20) = CONST 
0x13c9: v13c9(0x40) = ADD v13c7(0x20) v13c3(0x20)
0x13ca: v13ca(0x0) = CONST 
0x13cc: v13cc = SHA3 v13ca(0x0) v13c9(0x40)
0x13cd: v13cd(0x0) = CONST 
0x13d0: v13d0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13e5: v13e5 = AND v13d0(0xffffffffffffffffffffffffffffffffffffffff) v663
0x13e6: v13e6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13fb: v13fb = AND v13e6(0xffffffffffffffffffffffffffffffffffffffff) v13e5
0x13fd: MSTORE v13cd(0x0) v13fb
0x13fe: v13fe(0x20) = CONST 
0x1400: v1400(0x20) = ADD v13fe(0x20) v13cd(0x0)
0x1403: MSTORE v1400(0x20) v13cc
0x1404: v1404(0x20) = CONST 
0x1406: v1406(0x40) = ADD v1404(0x20) v1400(0x20)
0x1407: v1407(0x0) = CONST 
0x1409: v1409 = SHA3 v1407(0x0) v1406(0x40)
0x140c: SSTORE v1409 v66d
0x140f: v140f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1424: v1424 = AND v140f(0xffffffffffffffffffffffffffffffffffffffff) v663
0x1425: v1425 = CALLER 
0x1426: v1426(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x143b: v143b = AND v1426(0xffffffffffffffffffffffffffffffffffffffff) v1425
0x143c: v143c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x145e: v145e(0x40) = CONST 
0x1460: v1460 = MLOAD v145e(0x40)
0x1464: MSTORE v1460 v66d
0x1465: v1465(0x20) = CONST 
0x1467: v1467 = ADD v1465(0x20) v1460
0x146b: v146b(0x40) = CONST 
0x146d: v146d = MLOAD v146b(0x40)
0x1470: v1470 = SUB v1467 v146d
0x1472: LOG3 v146d v1470 v143c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v143b v1424
0x1474: v1474(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1489: v1489 = AND v1474(0xffffffffffffffffffffffffffffffffffffffff) v663
0x148a: v148a(0x8f4ffcb1) = CONST 
0x148f: v148f = CALLER 
0x1491: v1491 = ADDRESS 
0x1493: v1493(0x40) = CONST 
0x1495: v1495 = MLOAD v1493(0x40)
0x1497: v1497(0xffffffff) = CONST 
0x149c: v149c(0x8f4ffcb1) = AND v1497(0xffffffff) v148a(0x8f4ffcb1)
0x149d: v149d(0xe0) = CONST 
0x149f: v149f(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = SHL v149d(0xe0) v149c(0x8f4ffcb1)
0x14a1: MSTORE v1495 v149f(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x14a2: v14a2(0x4) = CONST 
0x14a4: v14a4 = ADD v14a2(0x4) v1495
0x14a7: v14a7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14bc: v14bc = AND v14a7(0xffffffffffffffffffffffffffffffffffffffff) v148f
0x14bd: v14bd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14d2: v14d2 = AND v14bd(0xffffffffffffffffffffffffffffffffffffffff) v14bc
0x14d4: MSTORE v14a4 v14d2
0x14d5: v14d5(0x20) = CONST 
0x14d7: v14d7 = ADD v14d5(0x20) v14a4
0x14da: MSTORE v14d7 v66d
0x14db: v14db(0x20) = CONST 
0x14dd: v14dd = ADD v14db(0x20) v14d7
0x14df: v14df(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14f4: v14f4 = AND v14df(0xffffffffffffffffffffffffffffffffffffffff) v1491
0x14f5: v14f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x150a: v150a = AND v14f5(0xffffffffffffffffffffffffffffffffffffffff) v14f4
0x150c: MSTORE v14dd v150a
0x150d: v150d(0x20) = CONST 
0x150f: v150f = ADD v150d(0x20) v14dd
0x1511: v1511(0x20) = CONST 
0x1513: v1513 = ADD v1511(0x20) v150f
0x1516: v1516 = SUB v1513 v14a4
0x1518: MSTORE v150f v1516
0x151c: v151c = MLOAD v6d5
0x151e: MSTORE v1513 v151c
0x151f: v151f(0x20) = CONST 
0x1521: v1521 = ADD v151f(0x20) v1513
0x1525: v1525 = MLOAD v6d5
0x1527: v1527(0x20) = CONST 
0x1529: v1529 = ADD v1527(0x20) v6d5
0x152e: v152e(0x0) = CONST 
----------------------------------

Begin block 0x1530
prev = {'0x138a', '0x1539'}, next = {'0x154b', '0x1539'}
----------------------------------
Block 0x1530
0x1530_0x0: v1530_0 = PHI v152e(0x0) v1544
0x1533: v1533 = LT v1530_0 v1525
0x1534: v1534 = ISZERO v1533
0x1535: v1535(0x154b) = CONST 
0x1538: JUMPI v1535(0x154b) v1534
----------------------------------

Begin block 0x1539
prev = {'0x1530'}, next = {'0x1530'}
----------------------------------
Block 0x1539
0x1539_0x0: v1539_0 = PHI v152e(0x0) v1544
0x153b: v153b = ADD v1529 v1539_0
0x153c: v153c = MLOAD v153b
0x153f: v153f = ADD v1521 v1539_0
0x1540: MSTORE v153f v153c
0x1541: v1541(0x20) = CONST 
0x1544: v1544 = ADD v1539_0 v1541(0x20)
0x1547: v1547(0x1530) = CONST 
0x154a: JUMP v1547(0x1530)
----------------------------------

Begin block 0x154b
prev = {'0x1530'}, next = {'0x155f', '0x1578'}
----------------------------------
Block 0x154b
0x1554: v1554 = ADD v1525 v1521
0x1556: v1556(0x1f) = CONST 
0x1558: v1558 = AND v1556(0x1f) v1525
0x155a: v155a = ISZERO v1558
0x155b: v155b(0x1578) = CONST 
0x155e: JUMPI v155b(0x1578) v155a
----------------------------------

Begin block 0x155f
prev = {'0x154b'}, next = {'0x1578'}
----------------------------------
Block 0x155f
0x1561: v1561 = SUB v1554 v1558
0x1563: v1563 = MLOAD v1561
0x1564: v1564(0x1) = CONST 
0x1567: v1567(0x20) = CONST 
0x1569: v1569 = SUB v1567(0x20) v1558
0x156a: v156a(0x100) = CONST 
0x156d: v156d = EXP v156a(0x100) v1569
0x156e: v156e = SUB v156d v1564(0x1)
0x156f: v156f = NOT v156e
0x1570: v1570 = AND v156f v1563
0x1572: MSTORE v1561 v1570
0x1573: v1573(0x20) = CONST 
0x1575: v1575 = ADD v1573(0x20) v1561
----------------------------------

Begin block 0x1578
prev = {'0x154b', '0x155f'}, next = {'0x159a', '0x1596'}
----------------------------------
Block 0x1578
0x1578_0x1: v1578_1 = PHI v1554 v1575
0x1581: v1581(0x0) = CONST 
0x1583: v1583(0x40) = CONST 
0x1585: v1585 = MLOAD v1583(0x40)
0x1588: v1588 = SUB v1578_1 v1585
0x158a: v158a(0x0) = CONST 
0x158e: v158e = EXTCODESIZE v1489
0x158f: v158f = ISZERO v158e
0x1591: v1591 = ISZERO v158f
0x1592: v1592(0x159a) = CONST 
0x1595: JUMPI v1592(0x159a) v1591
----------------------------------

Begin block 0x1596
prev = {'0x1578'}, next = {}
----------------------------------
Block 0x1596
0x1596: v1596(0x0) = CONST 
0x1599: REVERT v1596(0x0) v1596(0x0)
----------------------------------

Begin block 0x159a
prev = {'0x1578'}, next = {'0x15a5', '0x15ae'}
----------------------------------
Block 0x159a
0x159c: v159c = GAS 
0x159d: v159d = CALL v159c v1489 v158a(0x0) v1585 v1588 v1585 v1581(0x0)
0x159e: v159e = ISZERO v159d
0x15a0: v15a0 = ISZERO v159e
0x15a1: v15a1(0x15ae) = CONST 
0x15a4: JUMPI v15a1(0x15ae) v15a0
----------------------------------

Begin block 0x15a5
prev = {'0x159a'}, next = {}
----------------------------------
Block 0x15a5
0x15a5: v15a5 = RETURNDATASIZE 
0x15a6: v15a6(0x0) = CONST 
0x15a9: RETURNDATACOPY v15a6(0x0) v15a6(0x0) v15a5
0x15aa: v15aa = RETURNDATASIZE 
0x15ab: v15ab(0x0) = CONST 
0x15ad: REVERT v15ab(0x0) v15aa
----------------------------------

Begin block 0x15ae
prev = {'0x159a'}, next = {'0x714'}
----------------------------------
Block 0x15ae
0x15b3: v15b3(0x1) = CONST 
0x15bc: JUMP v632(0x714)
----------------------------------

Begin block 0x15bd
prev = {'0x73a'}, next = {'0x743'}
----------------------------------
Block 0x15bd
0x15be: v15be(0x1) = CONST 
0x15c0: v15c0(0x0) = CONST 
0x15c3: v15c3 = SLOAD v15be(0x1)
0x15c5: v15c5(0x100) = CONST 
0x15c8: v15c8(0x1) = EXP v15c5(0x100) v15c0(0x0)
0x15ca: v15ca = DIV v15c3 v15c8(0x1)
0x15cb: v15cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15e0: v15e0 = AND v15cb(0xffffffffffffffffffffffffffffffffffffffff) v15ca
0x15e2: JUMP v73c(0x743)
----------------------------------

Begin block 0x15e3
prev = {'0x7a8'}, next = {'0x7f4'}
----------------------------------
Block 0x15e3
0x15e4: v15e4(0x0) = CONST 
0x15e6: v15e6(0x7) = CONST 
0x15e8: v15e8(0x0) = CONST 
0x15eb: v15eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1600: v1600 = AND v15eb(0xffffffffffffffffffffffffffffffffffffffff) v7c4
0x1601: v1601(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1616: v1616 = AND v1601(0xffffffffffffffffffffffffffffffffffffffff) v1600
0x1618: MSTORE v15e8(0x0) v1616
0x1619: v1619(0x20) = CONST 
0x161b: v161b(0x20) = ADD v1619(0x20) v15e8(0x0)
0x161e: MSTORE v161b(0x20) v15e6(0x7)
0x161f: v161f(0x20) = CONST 
0x1621: v1621(0x40) = ADD v161f(0x20) v161b(0x20)
0x1622: v1622(0x0) = CONST 
0x1624: v1624 = SHA3 v1622(0x0) v1621(0x40)
0x1625: v1625(0x0) = CONST 
0x1628: v1628(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x163d: v163d = AND v1628(0xffffffffffffffffffffffffffffffffffffffff) v7e4
0x163e: v163e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1653: v1653 = AND v163e(0xffffffffffffffffffffffffffffffffffffffff) v163d
0x1655: MSTORE v1625(0x0) v1653
0x1656: v1656(0x20) = CONST 
0x1658: v1658(0x20) = ADD v1656(0x20) v1625(0x0)
0x165b: MSTORE v1658(0x20) v1624
0x165c: v165c(0x20) = CONST 
0x165e: v165e(0x40) = ADD v165c(0x20) v1658(0x20)
0x165f: v165f(0x0) = CONST 
0x1661: v1661 = SHA3 v165f(0x0) v165e(0x40)
0x1662: v1662 = SLOAD v1661
0x1669: JUMP v793(0x7f4)
----------------------------------

Begin block 0x166a
prev = {'0x82d'}, next = {'0x16c3', '0x16bf'}
----------------------------------
Block 0x166a
0x166b: v166b(0x0) = CONST 
0x166f: v166f = SLOAD v166b(0x0)
0x1671: v1671(0x100) = CONST 
0x1674: v1674(0x1) = EXP v1671(0x100) v166b(0x0)
0x1676: v1676 = DIV v166f v1674(0x1)
0x1677: v1677(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x168c: v168c = AND v1677(0xffffffffffffffffffffffffffffffffffffffff) v1676
0x168d: v168d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16a2: v16a2 = AND v168d(0xffffffffffffffffffffffffffffffffffffffff) v168c
0x16a3: v16a3 = CALLER 
0x16a4: v16a4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16b9: v16b9 = AND v16a4(0xffffffffffffffffffffffffffffffffffffffff) v16a3
0x16ba: v16ba = EQ v16b9 v16a2
0x16bb: v16bb(0x16c3) = CONST 
0x16be: JUMPI v16bb(0x16c3) v16ba
----------------------------------

Begin block 0x16bf
prev = {'0x166a'}, next = {}
----------------------------------
Block 0x16bf
0x16bf: v16bf(0x0) = CONST 
0x16c2: REVERT v16bf(0x0) v16bf(0x0)
----------------------------------

Begin block 0x16c3
prev = {'0x166a'}, next = {'0x859'}
----------------------------------
Block 0x16c3
0x16c5: v16c5(0x1) = CONST 
0x16c7: v16c7(0x0) = CONST 
0x16c9: v16c9(0x100) = CONST 
0x16cc: v16cc(0x1) = EXP v16c9(0x100) v16c7(0x0)
0x16ce: v16ce = SLOAD v16c5(0x1)
0x16d0: v16d0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16e5: v16e5(0xffffffffffffffffffffffffffffffffffffffff) = MUL v16d0(0xffffffffffffffffffffffffffffffffffffffff) v16cc(0x1)
0x16e6: v16e6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v16e5(0xffffffffffffffffffffffffffffffffffffffff)
0x16e7: v16e7 = AND v16e6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v16ce
0x16ea: v16ea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16ff: v16ff = AND v16ea(0xffffffffffffffffffffffffffffffffffffffff) v849
0x1700: v1700 = MUL v16ff v16cc(0x1)
0x1701: v1701 = OR v1700 v16e7
0x1703: SSTORE v16c5(0x1) v1701
0x1706: JUMP v818(0x859)
----------------------------------

Begin block 0x1707
prev = {}, next = {'0x1712', '0x1716'}
----------------------------------
function 0x1707(v1707arg0, v1707arg1, v1707arg2)
Block 0x1707
0x1708: v1708(0x0) = CONST 
0x170c: v170c = GT v1707arg0 v1707arg1
0x170d: v170d = ISZERO v170c
0x170e: v170e(0x1716) = CONST 
0x1711: JUMPI v170e(0x1716) v170d
----------------------------------

Begin block 0x1712
prev = {'0x1707'}, next = {}
----------------------------------
Block 0x1712
0x1712: v1712(0x0) = CONST 
0x1715: REVERT v1712(0x0) v1712(0x0)
----------------------------------

Begin block 0x1716
prev = {'0x1707'}, next = {}
----------------------------------
Block 0x1716
0x1719: v1719 = SUB v1707arg1 v1707arg0
0x1720: RETURNPRIVATE v1707arg2 v1719
----------------------------------

Begin block 0x1721
prev = {}, next = {'0x1735', '0x1731'}
----------------------------------
function 0x1721(v1721arg0, v1721arg1, v1721arg2)
Block 0x1721
0x1722: v1722(0x0) = CONST 
0x1726: v1726 = ADD v1721arg1 v1721arg0
0x172b: v172b = LT v1726 v1721arg1
0x172c: v172c = ISZERO v172b
0x172d: v172d(0x1735) = CONST 
0x1730: JUMPI v172d(0x1735) v172c
----------------------------------

Begin block 0x1731
prev = {'0x1721'}, next = {}
----------------------------------
Block 0x1731
0x1731: v1731(0x0) = CONST 
0x1734: REVERT v1731(0x0) v1731(0x0)
----------------------------------

Begin block 0x1735
prev = {'0x1721'}, next = {}
----------------------------------
Block 0x1735
0x173a: RETURNPRIVATE v1721arg2 v1726
----------------------------------

Begin block 0x173b
prev = {'0xd5f'}, next = {'0x1745', '0x1749'}
----------------------------------
Block 0x173b
0x173c: v173c(0x0) = CONST 
0x1740: v1740 = GT v33e v173c(0x0)
0x1741: v1741(0x1749) = CONST 
0x1744: JUMPI v1741(0x1749) v1740
----------------------------------

Begin block 0x1745
prev = {'0x173b'}, next = {}
----------------------------------
Block 0x1745
0x1745: v1745(0x0) = CONST 
0x1748: REVERT v1745(0x0) v1745(0x0)
----------------------------------

Begin block 0x1749
prev = {'0x173b'}, next = {'0x179b'}
----------------------------------
Block 0x1749
0x174a: v174a(0x179b) = CONST 
0x174e: v174e(0x6) = CONST 
0x1750: v1750(0x0) = CONST 
0x1753: v1753(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1768: v1768 = AND v1753(0xffffffffffffffffffffffffffffffffffffffff) v334
0x1769: v1769(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x177e: v177e = AND v1769(0xffffffffffffffffffffffffffffffffffffffff) v1768
0x1780: MSTORE v1750(0x0) v177e
0x1781: v1781(0x20) = CONST 
0x1783: v1783(0x20) = ADD v1781(0x20) v1750(0x0)
0x1786: MSTORE v1783(0x20) v174e(0x6)
0x1787: v1787(0x20) = CONST 
0x1789: v1789(0x40) = ADD v1787(0x20) v1783(0x20)
0x178a: v178a(0x0) = CONST 
0x178c: v178c = SHA3 v178a(0x0) v1789(0x40)
0x178d: v178d = SLOAD v178c
0x178e: v178e(0x1721) = CONST 
0x1794: v1794(0xffffffff) = CONST 
0x1799: v1799(0x1721) = AND v1794(0xffffffff) v178e(0x1721)
0x179a: v179a_0 = CALLPRIVATE v1799(0x1721) v33e v178d v174a(0x179b)
----------------------------------

Begin block 0x179b
prev = {'0x1749'}, next = {'0x17f3'}
----------------------------------
Block 0x179b
0x179c: v179c(0x6) = CONST 
0x179e: v179e(0x0) = CONST 
0x17a1: v17a1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17b6: v17b6 = AND v17a1(0xffffffffffffffffffffffffffffffffffffffff) v334
0x17b7: v17b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17cc: v17cc = AND v17b7(0xffffffffffffffffffffffffffffffffffffffff) v17b6
0x17ce: MSTORE v179e(0x0) v17cc
0x17cf: v17cf(0x20) = CONST 
0x17d1: v17d1(0x20) = ADD v17cf(0x20) v179e(0x0)
0x17d4: MSTORE v17d1(0x20) v179c(0x6)
0x17d5: v17d5(0x20) = CONST 
0x17d7: v17d7(0x40) = ADD v17d5(0x20) v17d1(0x20)
0x17d8: v17d8(0x0) = CONST 
0x17da: v17da = SHA3 v17d8(0x0) v17d7(0x40)
0x17dd: SSTORE v17da v179a_0
0x17df: v17df(0x17f3) = CONST 
0x17e3: v17e3(0x5) = CONST 
0x17e5: v17e5 = SLOAD v17e3(0x5)
0x17e6: v17e6(0x1721) = CONST 
0x17ec: v17ec(0xffffffff) = CONST 
0x17f1: v17f1(0x1721) = AND v17ec(0xffffffff) v17e6(0x1721)
0x17f2: v17f2_0 = CALLPRIVATE v17f1(0x1721) v33e v17e5 v17df(0x17f3)
----------------------------------

Begin block 0x17f3
prev = {'0x179b'}, next = {'0xd69'}
----------------------------------
Block 0x17f3
0x17f4: v17f4(0x5) = CONST 
0x17f8: SSTORE v17f4(0x5) v17f2_0
0x17fb: v17fb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1810: v1810 = AND v17fb(0xffffffffffffffffffffffffffffffffffffffff) v334
0x1811: v1811(0x0) = CONST 
0x1813: v1813(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1828: v1828(0x0) = AND v1813(0xffffffffffffffffffffffffffffffffffffffff) v1811(0x0)
0x1829: v1829(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x184b: v184b(0x40) = CONST 
0x184d: v184d = MLOAD v184b(0x40)
0x1851: MSTORE v184d v33e
0x1852: v1852(0x20) = CONST 
0x1854: v1854 = ADD v1852(0x20) v184d
0x1858: v1858(0x40) = CONST 
0x185a: v185a = MLOAD v1858(0x40)
0x185d: v185d = SUB v1854 v185a
0x185f: LOG3 v185a v185d v1829(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1828(0x0) v1810
0x1860: v1860(0x1) = CONST 
0x1868: JUMP vd60(0xd69)
----------------------------------

Begin block 0x1869
prev = {'0x11cc'}, next = {'0x187a', '0x1876'}
----------------------------------
Block 0x1869
0x186a: v186a(0x0) = CONST 
0x186c: v186c(0x5) = CONST 
0x186e: v186e = SLOAD v186c(0x5)
0x1870: v1870 = GT v587 v186e
0x1871: v1871 = ISZERO v1870
0x1872: v1872(0x187a) = CONST 
0x1875: JUMPI v1872(0x187a) v1871
----------------------------------

Begin block 0x1876
prev = {'0x1869'}, next = {}
----------------------------------
Block 0x1876
0x1876: v1876(0x0) = CONST 
0x1879: REVERT v1876(0x0) v1876(0x0)
----------------------------------

Begin block 0x187a
prev = {'0x1869'}, next = {'0x18cc'}
----------------------------------
Block 0x187a
0x187b: v187b(0x18cc) = CONST 
0x187f: v187f(0x6) = CONST 
0x1881: v1881(0x0) = CONST 
0x1884: v1884(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1899: v1899 = AND v1884(0xffffffffffffffffffffffffffffffffffffffff) v57d
0x189a: v189a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x18af: v18af = AND v189a(0xffffffffffffffffffffffffffffffffffffffff) v1899
0x18b1: MSTORE v1881(0x0) v18af
0x18b2: v18b2(0x20) = CONST 
0x18b4: v18b4(0x20) = ADD v18b2(0x20) v1881(0x0)
0x18b7: MSTORE v18b4(0x20) v187f(0x6)
0x18b8: v18b8(0x20) = CONST 
0x18ba: v18ba(0x40) = ADD v18b8(0x20) v18b4(0x20)
0x18bb: v18bb(0x0) = CONST 
0x18bd: v18bd = SHA3 v18bb(0x0) v18ba(0x40)
0x18be: v18be = SLOAD v18bd
0x18bf: v18bf(0x1707) = CONST 
0x18c5: v18c5(0xffffffff) = CONST 
0x18ca: v18ca(0x1707) = AND v18c5(0xffffffff) v18bf(0x1707)
0x18cb: v18cb_0 = CALLPRIVATE v18ca(0x1707) v587 v18be v187b(0x18cc)
----------------------------------

Begin block 0x18cc
prev = {'0x187a'}, next = {'0x1924'}
----------------------------------
Block 0x18cc
0x18cd: v18cd(0x6) = CONST 
0x18cf: v18cf(0x0) = CONST 
0x18d2: v18d2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x18e7: v18e7 = AND v18d2(0xffffffffffffffffffffffffffffffffffffffff) v57d
0x18e8: v18e8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x18fd: v18fd = AND v18e8(0xffffffffffffffffffffffffffffffffffffffff) v18e7
0x18ff: MSTORE v18cf(0x0) v18fd
0x1900: v1900(0x20) = CONST 
0x1902: v1902(0x20) = ADD v1900(0x20) v18cf(0x0)
0x1905: MSTORE v1902(0x20) v18cd(0x6)
0x1906: v1906(0x20) = CONST 
0x1908: v1908(0x40) = ADD v1906(0x20) v1902(0x20)
0x1909: v1909(0x0) = CONST 
0x190b: v190b = SHA3 v1909(0x0) v1908(0x40)
0x190e: SSTORE v190b v18cb_0
0x1910: v1910(0x1924) = CONST 
0x1914: v1914(0x5) = CONST 
0x1916: v1916 = SLOAD v1914(0x5)
0x1917: v1917(0x1707) = CONST 
0x191d: v191d(0xffffffff) = CONST 
0x1922: v1922(0x1707) = AND v191d(0xffffffff) v1917(0x1707)
0x1923: v1923_0 = CALLPRIVATE v1922(0x1707) v587 v1916 v1910(0x1924)
----------------------------------

Begin block 0x1924
prev = {'0x18cc'}, next = {'0x11d6'}
----------------------------------
Block 0x1924
0x1925: v1925(0x5) = CONST 
0x1929: SSTORE v1925(0x5) v1923_0
0x192b: v192b(0x0) = CONST 
0x192d: v192d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1942: v1942(0x0) = AND v192d(0xffffffffffffffffffffffffffffffffffffffff) v192b(0x0)
0x1944: v1944(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1959: v1959 = AND v1944(0xffffffffffffffffffffffffffffffffffffffff) v57d
0x195a: v195a(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x197c: v197c(0x40) = CONST 
0x197e: v197e = MLOAD v197c(0x40)
0x1982: MSTORE v197e v587
0x1983: v1983(0x20) = CONST 
0x1985: v1985 = ADD v1983(0x20) v197e
0x1989: v1989(0x40) = CONST 
0x198b: v198b = MLOAD v1989(0x40)
0x198e: v198e = SUB v1985 v198b
0x1990: LOG3 v198b v198e v195a(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1959 v1942(0x0)
0x1991: v1991(0x1) = CONST 
0x1999: JUMP v11cd(0x11d6)
----------------------------------

Begin block 0x19d9
prev = {'0xf3', '0x0'}, next = {'0xfe0x0'}
----------------------------------
Block 0x19d9
0x19da: v19da(0xfe) = CONST 
0x19db: CALLPRIVATE v19da(0xfe)
----------------------------------

Begin block 0x19dc
prev = {'0xd1'}, next = {}
----------------------------------
Block 0x19dc
0x19dd: v19dd(0x103) = CONST 
0x19de: CALLPRIVATE v19dd(0x103)
----------------------------------

Begin block 0x19df
prev = {'0xdd'}, next = {}
----------------------------------
Block 0x19df
0x19e0: v19e0(0x193) = CONST 
0x19e1: CALLPRIVATE v19e0(0x193)
----------------------------------

Begin block 0x19e2
prev = {'0xe8'}, next = {}
----------------------------------
Block 0x19e2
0x19e3: v19e3(0x206) = CONST 
0x19e4: CALLPRIVATE v19e3(0x206)
----------------------------------

Begin block 0x19e5
prev = {'0xf3'}, next = {}
----------------------------------
Block 0x19e5
0x19e6: v19e6(0x231) = CONST 
0x19e7: CALLPRIVATE v19e6(0x231)
----------------------------------

Begin block 0x19e8
prev = {'0xa1'}, next = {}
----------------------------------
Block 0x19e8
0x19e9: v19e9(0x2c4) = CONST 
0x19ea: CALLPRIVATE v19e9(0x2c4)
----------------------------------

Begin block 0x19eb
prev = {'0xac'}, next = {}
----------------------------------
Block 0x19eb
0x19ec: v19ec(0x2f5) = CONST 
0x19ed: CALLPRIVATE v19ec(0x2f5)
----------------------------------

Begin block 0x19ee
prev = {'0xb7'}, next = {}
----------------------------------
Block 0x19ee
0x19ef: v19ef(0x368) = CONST 
0x19f0: CALLPRIVATE v19ef(0x368)
----------------------------------

Begin block 0x19f1
prev = {'0xc2'}, next = {}
----------------------------------
Block 0x19f1
0x19f2: v19f2(0x3cd) = CONST 
0x19f3: CALLPRIVATE v19f2(0x3cd)
----------------------------------

Begin block 0x19f4
prev = {'0x64'}, next = {}
----------------------------------
Block 0x19f4
0x19f5: v19f5(0x3e4) = CONST 
0x19f6: CALLPRIVATE v19f5(0x3e4)
----------------------------------

Begin block 0x19f7
prev = {'0x70'}, next = {}
----------------------------------
Block 0x19f7
0x19f8: v19f8(0x43b) = CONST 
0x19f9: CALLPRIVATE v19f8(0x43b)
----------------------------------

Begin block 0x19fa
prev = {'0x7b'}, next = {}
----------------------------------
Block 0x19fa
0x19fb: v19fb(0x4cb) = CONST 
0x19fc: CALLPRIVATE v19fb(0x4cb)
----------------------------------

Begin block 0x19fd
prev = {'0x86'}, next = {}
----------------------------------
Block 0x19fd
0x19fe: v19fe(0x53e) = CONST 
0x19ff: CALLPRIVATE v19fe(0x53e)
----------------------------------

Begin block 0x1a00
prev = {'0x29'}, next = {}
----------------------------------
Block 0x1a00
0x1a01: v1a01(0x5b1) = CONST 
0x1a02: CALLPRIVATE v1a01(0x5b1)
----------------------------------

Begin block 0x1a03
prev = {'0x34'}, next = {}
----------------------------------
Block 0x1a03
0x1a04: v1a04(0x624) = CONST 
0x1a05: CALLPRIVATE v1a04(0x624)
----------------------------------

Begin block 0x1a06
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x1a06
0x1a07: v1a07(0x72e) = CONST 
0x1a08: CALLPRIVATE v1a07(0x72e)
----------------------------------

Begin block 0x1a09
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x1a09
0x1a0a: v1a0a(0x785) = CONST 
0x1a0b: CALLPRIVATE v1a0a(0x785)
----------------------------------

Begin block 0x1a0c
prev = {'0x55'}, next = {}
----------------------------------
Block 0x1a0c
0x1a0d: v1a0d(0x80a) = CONST 
0x1a0e: CALLPRIVATE v1a0d(0x80a)
----------------------------------
