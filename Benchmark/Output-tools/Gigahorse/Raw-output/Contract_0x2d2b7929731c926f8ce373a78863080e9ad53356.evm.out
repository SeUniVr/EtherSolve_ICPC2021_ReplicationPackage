
Begin block 0x0
prev = {}, next = {'0xd', '0xb62'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xb3c: vb3c(0xb62) = CONST 
0xb3d: JUMPI vb3c(0xb62) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xb65', '0x40'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0xb3e: vb3e(0xb65) = CONST 
0xb3f: JUMPI vb3e(0xb65) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0x4b', '0xb68'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0xb40: vb40(0xb68) = CONST 
0xb41: JUMPI vb40(0xb68) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0x56', '0xb6b'}
----------------------------------
Block 0x4b
0x4c: v4c(0x18160ddd) = CONST 
0x51: v51 = EQ v4c(0x18160ddd) v34
0xb42: vb42(0xb6b) = CONST 
0xb43: JUMPI vb42(0xb6b) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x61', '0xb6e'}
----------------------------------
Block 0x56
0x57: v57(0x23b872dd) = CONST 
0x5c: v5c = EQ v57(0x23b872dd) v34
0xb44: vb44(0xb6e) = CONST 
0xb45: JUMPI vb44(0xb6e) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0xb71', '0x6c'}
----------------------------------
Block 0x61
0x62: v62(0x27e235e3) = CONST 
0x67: v67 = EQ v62(0x27e235e3) v34
0xb46: vb46(0xb71) = CONST 
0xb47: JUMPI vb46(0xb71) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0x77', '0xb74'}
----------------------------------
Block 0x6c
0x6d: v6d(0x313ce567) = CONST 
0x72: v72 = EQ v6d(0x313ce567) v34
0xb48: vb48(0xb74) = CONST 
0xb49: JUMPI vb48(0xb74) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0xb77', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x42966c68) = CONST 
0x7d: v7d = EQ v78(0x42966c68) v34
0xb4a: vb4a(0xb77) = CONST 
0xb4b: JUMPI vb4a(0xb77) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0xb7a', '0x8d'}
----------------------------------
Block 0x82
0x83: v83(0x5c658165) = CONST 
0x88: v88 = EQ v83(0x5c658165) v34
0xb4c: vb4c(0xb7a) = CONST 
0xb4d: JUMPI vb4c(0xb7a) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0xb7d', '0x98'}
----------------------------------
Block 0x8d
0x8e: v8e(0x70a08231) = CONST 
0x93: v93 = EQ v8e(0x70a08231) v34
0xb4e: vb4e(0xb7d) = CONST 
0xb4f: JUMPI vb4e(0xb7d) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0xa3', '0xb80'}
----------------------------------
Block 0x98
0x99: v99(0x79ba5097) = CONST 
0x9e: v9e = EQ v99(0x79ba5097) v34
0xb50: vb50(0xb80) = CONST 
0xb51: JUMPI vb50(0xb80) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0xae', '0xb83'}
----------------------------------
Block 0xa3
0xa4: va4(0x79cc6790) = CONST 
0xa9: va9 = EQ va4(0x79cc6790) v34
0xb52: vb52(0xb83) = CONST 
0xb53: JUMPI vb52(0xb83) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0xb86'}
----------------------------------
Block 0xae
0xaf: vaf(0x8da5cb5b) = CONST 
0xb4: vb4 = EQ vaf(0x8da5cb5b) v34
0xb54: vb54(0xb86) = CONST 
0xb55: JUMPI vb54(0xb86) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0xb89'}
----------------------------------
Block 0xb9
0xba: vba(0x95d89b41) = CONST 
0xbf: vbf = EQ vba(0x95d89b41) v34
0xb56: vb56(0xb89) = CONST 
0xb57: JUMPI vb56(0xb89) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0xb8c', '0xcf'}
----------------------------------
Block 0xc4
0xc5: vc5(0xa9059cbb) = CONST 
0xca: vca = EQ vc5(0xa9059cbb) v34
0xb58: vb58(0xb8c) = CONST 
0xb59: JUMPI vb58(0xb8c) vca
----------------------------------

Begin block 0xcf
prev = {'0xc4'}, next = {'0xda', '0xb8f'}
----------------------------------
Block 0xcf
0xd0: vd0(0xcae9ca51) = CONST 
0xd5: vd5 = EQ vd0(0xcae9ca51) v34
0xb5a: vb5a(0xb8f) = CONST 
0xb5b: JUMPI vb5a(0xb8f) vd5
----------------------------------

Begin block 0xda
prev = {'0xcf'}, next = {'0xb92', '0xe5'}
----------------------------------
Block 0xda
0xdb: vdb(0xd4ee1d90) = CONST 
0xe0: ve0 = EQ vdb(0xd4ee1d90) v34
0xb5c: vb5c(0xb92) = CONST 
0xb5d: JUMPI vb5c(0xb92) ve0
----------------------------------

Begin block 0xe5
prev = {'0xda'}, next = {'0xb95', '0xf0'}
----------------------------------
Block 0xe5
0xe6: ve6(0xdd62ed3e) = CONST 
0xeb: veb = EQ ve6(0xdd62ed3e) v34
0xb5e: vb5e(0xb95) = CONST 
0xb5f: JUMPI vb5e(0xb95) veb
----------------------------------

Begin block 0xf0
prev = {'0xe5'}, next = {'0xb98', '0xb62'}
----------------------------------
Block 0xf0
0xf1: vf1(0xf2fde38b) = CONST 
0xf6: vf6 = EQ vf1(0xf2fde38b) v34
0xb60: vb60(0xb98) = CONST 
0xb61: JUMPI vb60(0xb98) vf6
----------------------------------

Begin block 0xfb
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xfb
0xfc: vfc(0x0) = CONST 
0xff: REVERT vfc(0x0) vfc(0x0)
----------------------------------

Begin block 0x100
prev = {}, next = {'0x107', '0x10b'}
----------------------------------
function name()()
Block 0x100
0x101: v101 = CALLVALUE 
0x102: v102 = ISZERO v101
0x103: v103(0x10b) = CONST 
0x106: JUMPI v103(0x10b) v102
----------------------------------

Begin block 0x107
prev = {'0x100'}, next = {}
----------------------------------
Block 0x107
0x107: v107(0x0) = CONST 
0x10a: REVERT v107(0x0) v107(0x0)
----------------------------------

Begin block 0x10b
prev = {'0x100'}, next = {'0x1130x100'}
----------------------------------
Block 0x10b
0x10c: v10c(0x113) = CONST 
0x10f: v10f(0x406) = CONST 
0x112: v112_0, v112_1 = CALLPRIVATE v10f(0x406) v10c(0x113)
----------------------------------

Begin block 0x1130x100
prev = {'0x10b'}, next = {'0x1370x100'}
----------------------------------
Block 0x1130x100
0x1140x100: v100114(0x40) = CONST 
0x1160x100: v100116 = MLOAD v100114(0x40)
0x1170x100: v100117(0x20) = CONST 
0x11b0x100: MSTORE v100116 v100117(0x20)
0x11f0x100: v10011f = ADD v100116 v100117(0x20)
0x1230x100: v100123 = MLOAD v112_0
0x1250x100: MSTORE v10011f v100123
0x1260x100: v100126(0x20) = CONST 
0x1280x100: v100128 = ADD v100126(0x20) v10011f
0x12c0x100: v10012c = MLOAD v112_0
0x12e0x100: v10012e(0x20) = CONST 
0x1300x100: v100130 = ADD v10012e(0x20) v112_0
0x1350x100: v100135(0x0) = CONST 
----------------------------------

Begin block 0x1130x315
prev = {'0x320'}, next = {'0x1370x315'}
----------------------------------
Block 0x1130x315
0x1140x315: v315114(0x40) = CONST 
0x1160x315: v315116 = MLOAD v315114(0x40)
0x1170x315: v315117(0x20) = CONST 
0x11b0x315: MSTORE v315116 v315117(0x20)
0x11f0x315: v31511f = ADD v315116 v315117(0x20)
0x1230x315: v315123 = MLOAD v327_0
0x1250x315: MSTORE v31511f v315123
0x1260x315: v315126(0x20) = CONST 
0x1280x315: v315128 = ADD v315126(0x20) v31511f
0x12c0x315: v31512c = MLOAD v327_0
0x12e0x315: v31512e(0x20) = CONST 
0x1300x315: v315130 = ADD v31512e(0x20) v327_0
0x1350x315: v315135(0x0) = CONST 
----------------------------------

Begin block 0x1370x100
prev = {'0x1400x100', '0x1130x100'}, next = {'0x1400x100', '0x14f0x100'}
----------------------------------
Block 0x1370x100
0x1370x100_0x0: v137100_0 = PHI v100135(0x0) v10014a
0x13a0x100: v10013a = LT v137100_0 v10012c
0x13b0x100: v10013b = ISZERO v10013a
0x13c0x100: v10013c(0x14f) = CONST 
0x13f0x100: JUMPI v10013c(0x14f) v10013b
----------------------------------

Begin block 0x1370x315
prev = {'0x1400x315', '0x1130x315'}, next = {'0x1400x315', '0x14f0x315'}
----------------------------------
Block 0x1370x315
0x1370x315_0x0: v137315_0 = PHI v315135(0x0) v31514a
0x13a0x315: v31513a = LT v137315_0 v31512c
0x13b0x315: v31513b = ISZERO v31513a
0x13c0x315: v31513c(0x14f) = CONST 
0x13f0x315: JUMPI v31513c(0x14f) v31513b
----------------------------------

Begin block 0x1400x100
prev = {'0x1370x100'}, next = {'0x1370x100'}
----------------------------------
Block 0x1400x100
0x1400x100_0x0: v140100_0 = PHI v100135(0x0) v10014a
0x1420x100: v100142 = ADD v100130 v140100_0
0x1430x100: v100143 = MLOAD v100142
0x1460x100: v100146 = ADD v140100_0 v100128
0x1470x100: MSTORE v100146 v100143
0x1480x100: v100148(0x20) = CONST 
0x14a0x100: v10014a = ADD v100148(0x20) v140100_0
0x14b0x100: v10014b(0x137) = CONST 
0x14e0x100: JUMP v10014b(0x137)
----------------------------------

Begin block 0x1400x315
prev = {'0x1370x315'}, next = {'0x1370x315'}
----------------------------------
Block 0x1400x315
0x1400x315_0x0: v140315_0 = PHI v315135(0x0) v31514a
0x1420x315: v315142 = ADD v315130 v140315_0
0x1430x315: v315143 = MLOAD v315142
0x1460x315: v315146 = ADD v140315_0 v315128
0x1470x315: MSTORE v315146 v315143
0x1480x315: v315148(0x20) = CONST 
0x14a0x315: v31514a = ADD v315148(0x20) v140315_0
0x14b0x315: v31514b(0x137) = CONST 
0x14e0x315: JUMP v31514b(0x137)
----------------------------------

Begin block 0x14f0x100
prev = {'0x1370x100'}, next = {'0x17c0x100', '0x1630x100'}
----------------------------------
Block 0x14f0x100
0x1580x100: v100158 = ADD v10012c v100128
0x15a0x100: v10015a(0x1f) = CONST 
0x15c0x100: v10015c = AND v10015a(0x1f) v10012c
0x15e0x100: v10015e = ISZERO v10015c
0x15f0x100: v10015f(0x17c) = CONST 
0x1620x100: JUMPI v10015f(0x17c) v10015e
----------------------------------

Begin block 0x14f0x315
prev = {'0x1370x315'}, next = {'0x17c0x315', '0x1630x315'}
----------------------------------
Block 0x14f0x315
0x1580x315: v315158 = ADD v31512c v315128
0x15a0x315: v31515a(0x1f) = CONST 
0x15c0x315: v31515c = AND v31515a(0x1f) v31512c
0x15e0x315: v31515e = ISZERO v31515c
0x15f0x315: v31515f(0x17c) = CONST 
0x1620x315: JUMPI v31515f(0x17c) v31515e
----------------------------------

Begin block 0x1630x100
prev = {'0x14f0x100'}, next = {'0x17c0x100'}
----------------------------------
Block 0x1630x100
0x1650x100: v100165 = SUB v100158 v10015c
0x1670x100: v100167 = MLOAD v100165
0x1680x100: v100168(0x1) = CONST 
0x16b0x100: v10016b(0x20) = CONST 
0x16d0x100: v10016d = SUB v10016b(0x20) v10015c
0x16e0x100: v10016e(0x100) = CONST 
0x1710x100: v100171 = EXP v10016e(0x100) v10016d
0x1720x100: v100172 = SUB v100171 v100168(0x1)
0x1730x100: v100173 = NOT v100172
0x1740x100: v100174 = AND v100173 v100167
0x1760x100: MSTORE v100165 v100174
0x1770x100: v100177(0x20) = CONST 
0x1790x100: v100179 = ADD v100177(0x20) v100165
----------------------------------

Begin block 0x1630x315
prev = {'0x14f0x315'}, next = {'0x17c0x315'}
----------------------------------
Block 0x1630x315
0x1650x315: v315165 = SUB v315158 v31515c
0x1670x315: v315167 = MLOAD v315165
0x1680x315: v315168(0x1) = CONST 
0x16b0x315: v31516b(0x20) = CONST 
0x16d0x315: v31516d = SUB v31516b(0x20) v31515c
0x16e0x315: v31516e(0x100) = CONST 
0x1710x315: v315171 = EXP v31516e(0x100) v31516d
0x1720x315: v315172 = SUB v315171 v315168(0x1)
0x1730x315: v315173 = NOT v315172
0x1740x315: v315174 = AND v315173 v315167
0x1760x315: MSTORE v315165 v315174
0x1770x315: v315177(0x20) = CONST 
0x1790x315: v315179 = ADD v315177(0x20) v315165
----------------------------------

Begin block 0x17c0x100
prev = {'0x1630x100', '0x14f0x100'}, next = {}
----------------------------------
Block 0x17c0x100
0x17c0x100_0x1: v17c100_1 = PHI v100158 v100179
0x1820x100: v100182(0x40) = CONST 
0x1840x100: v100184 = MLOAD v100182(0x40)
0x1870x100: v100187 = SUB v17c100_1 v100184
0x1890x100: RETURN v100184 v100187
----------------------------------

Begin block 0x17c0x315
prev = {'0x14f0x315', '0x1630x315'}, next = {}
----------------------------------
Block 0x17c0x315
0x17c0x315_0x1: v17c315_1 = PHI v315158 v315179
0x1820x315: v315182(0x40) = CONST 
0x1840x315: v315184 = MLOAD v315182(0x40)
0x1870x315: v315187 = SUB v17c315_1 v315184
0x1890x315: RETURN v315184 v315187
----------------------------------

Begin block 0x18a
prev = {}, next = {'0x195', '0x191'}
----------------------------------
function approve(address,uint256)()
Block 0x18a
0x18b: v18b = CALLVALUE 
0x18c: v18c = ISZERO v18b
0x18d: v18d(0x195) = CONST 
0x190: JUMPI v18d(0x195) v18c
----------------------------------

Begin block 0x191
prev = {'0x18a'}, next = {}
----------------------------------
Block 0x191
0x191: v191(0x0) = CONST 
0x194: REVERT v191(0x0) v191(0x0)
----------------------------------

Begin block 0x195
prev = {'0x18a'}, next = {'0x1ac0x18a'}
----------------------------------
Block 0x195
0x196: v196(0x1ac) = CONST 
0x199: v199(0x1) = CONST 
0x19b: v19b(0xa0) = CONST 
0x19d: v19d(0x2) = CONST 
0x19f: v19f(0x10000000000000000000000000000000000000000) = EXP v19d(0x2) v19b(0xa0)
0x1a0: v1a0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v19f(0x10000000000000000000000000000000000000000) v199(0x1)
0x1a1: v1a1(0x4) = CONST 
0x1a3: v1a3 = CALLDATALOAD v1a1(0x4)
0x1a4: v1a4 = AND v1a3 v1a0(0xffffffffffffffffffffffffffffffffffffffff)
0x1a5: v1a5(0x24) = CONST 
0x1a7: v1a7 = CALLDATALOAD v1a5(0x24)
0x1a8: v1a8(0x4a4) = CONST 
0x1ab: v1ab_0 = CALLPRIVATE v1a8(0x4a4) v1a7 v1a4 v196(0x1ac)
----------------------------------

Begin block 0x1ac0x18a
prev = {'0x195'}, next = {}
----------------------------------
Block 0x1ac0x18a
0x1ad0x18a: v18a1ad(0x40) = CONST 
0x1af0x18a: v18a1af = MLOAD v18a1ad(0x40)
0x1b10x18a: v18a1b1 = ISZERO v1ab_0
0x1b20x18a: v18a1b2 = ISZERO v18a1b1
0x1b40x18a: MSTORE v18a1af v18a1b2
0x1b50x18a: v18a1b5(0x20) = CONST 
0x1b70x18a: v18a1b7 = ADD v18a1b5(0x20) v18a1af
0x1b80x18a: v18a1b8(0x40) = CONST 
0x1ba0x18a: v18a1ba = MLOAD v18a1b8(0x40)
0x1bd0x18a: v18a1bd = SUB v18a1b7 v18a1ba
0x1bf0x18a: RETURN v18a1ba v18a1bd
----------------------------------

Begin block 0x1ac0x1e5
prev = {'0x583'}, next = {}
----------------------------------
Block 0x1ac0x1e5
0x1ad0x1e5: v1e51ad(0x40) = CONST 
0x1af0x1e5: v1e51af = MLOAD v1e51ad(0x40)
0x1b10x1e5: v1e51b1 = ISZERO v585(0x1)
0x1b20x1e5: v1e51b2 = ISZERO v1e51b1
0x1b40x1e5: MSTORE v1e51af v1e51b2
0x1b50x1e5: v1e51b5(0x20) = CONST 
0x1b70x1e5: v1e51b7 = ADD v1e51b5(0x20) v1e51af
0x1b80x1e5: v1e51b8(0x40) = CONST 
0x1ba0x1e5: v1e51ba = MLOAD v1e51b8(0x40)
0x1bd0x1e5: v1e51bd = SUB v1e51b7 v1e51ba
0x1bf0x1e5: RETURN v1e51ba v1e51bd
----------------------------------

Begin block 0x1ac0x255
prev = {'0x5ce'}, next = {}
----------------------------------
Block 0x1ac0x255
0x1ad0x255: v2551ad(0x40) = CONST 
0x1af0x255: v2551af = MLOAD v2551ad(0x40)
0x1b10x255: v2551b1 = ISZERO v62d(0x1)
0x1b20x255: v2551b2 = ISZERO v2551b1
0x1b40x255: MSTORE v2551af v2551b2
0x1b50x255: v2551b5(0x20) = CONST 
0x1b70x255: v2551b7 = ADD v2551b5(0x20) v2551af
0x1b80x255: v2551b8(0x40) = CONST 
0x1ba0x255: v2551ba = MLOAD v2551b8(0x40)
0x1bd0x255: v2551bd = SUB v2551b7 v2551ba
0x1bf0x255: RETURN v2551ba v2551bd
----------------------------------

Begin block 0x1ac0x2c4
prev = {'0x752'}, next = {}
----------------------------------
Block 0x1ac0x2c4
0x1ad0x2c4: v2c41ad(0x40) = CONST 
0x1af0x2c4: v2c41af = MLOAD v2c41ad(0x40)
0x1b10x2c4: v2c41b1 = ISZERO v7ce(0x1)
0x1b20x2c4: v2c41b2 = ISZERO v2c41b1
0x1b40x2c4: MSTORE v2c41af v2c41b2
0x1b50x2c4: v2c41b5(0x20) = CONST 
0x1b70x2c4: v2c41b7 = ADD v2c41b5(0x20) v2c41af
0x1b80x2c4: v2c41b8(0x40) = CONST 
0x1ba0x2c4: v2c41ba = MLOAD v2c41b8(0x40)
0x1bd0x2c4: v2c41bd = SUB v2c41b7 v2c41ba
0x1bf0x2c4: RETURN v2c41ba v2c41bd
----------------------------------

Begin block 0x1ac0x328
prev = {'0x85c'}, next = {}
----------------------------------
Block 0x1ac0x328
0x1ad0x328: v3281ad(0x40) = CONST 
0x1af0x328: v3281af = MLOAD v3281ad(0x40)
0x1b10x328: v3281b1 = ISZERO v85e(0x1)
0x1b20x328: v3281b2 = ISZERO v3281b1
0x1b40x328: MSTORE v3281af v3281b2
0x1b50x328: v3281b5(0x20) = CONST 
0x1b70x328: v3281b7 = ADD v3281b5(0x20) v3281af
0x1b80x328: v3281b8(0x40) = CONST 
0x1ba0x328: v3281ba = MLOAD v3281b8(0x40)
0x1bd0x328: v3281bd = SUB v3281b7 v3281ba
0x1bf0x328: RETURN v3281ba v3281bd
----------------------------------

Begin block 0x1ac0x34a
prev = {'0x97f'}, next = {}
----------------------------------
Block 0x1ac0x34a
0x1ad0x34a: v34a1ad(0x40) = CONST 
0x1af0x34a: v34a1af = MLOAD v34a1ad(0x40)
0x1b10x34a: v34a1b1 = ISZERO v981(0x1)
0x1b20x34a: v34a1b2 = ISZERO v34a1b1
0x1b40x34a: MSTORE v34a1af v34a1b2
0x1b50x34a: v34a1b5(0x20) = CONST 
0x1b70x34a: v34a1b7 = ADD v34a1b5(0x20) v34a1af
0x1b80x34a: v34a1b8(0x40) = CONST 
0x1ba0x34a: v34a1ba = MLOAD v34a1b8(0x40)
0x1bd0x34a: v34a1bd = SUB v34a1b7 v34a1ba
0x1bf0x34a: RETURN v34a1ba v34a1bd
----------------------------------

Begin block 0x1c0
prev = {}, next = {'0x1c7', '0x1cb'}
----------------------------------
function totalSupply()()
Block 0x1c0
0x1c1: v1c1 = CALLVALUE 
0x1c2: v1c2 = ISZERO v1c1
0x1c3: v1c3(0x1cb) = CONST 
0x1c6: JUMPI v1c3(0x1cb) v1c2
----------------------------------

Begin block 0x1c7
prev = {'0x1c0'}, next = {}
----------------------------------
Block 0x1c7
0x1c7: v1c7(0x0) = CONST 
0x1ca: REVERT v1c7(0x0) v1c7(0x0)
----------------------------------

Begin block 0x1cb
prev = {'0x1c0'}, next = {'0x510'}
----------------------------------
Block 0x1cb
0x1cc: v1cc(0x1d3) = CONST 
0x1cf: v1cf(0x510) = CONST 
0x1d2: JUMP v1cf(0x510)
----------------------------------

Begin block 0x1d30x1c0
prev = {'0x510'}, next = {}
----------------------------------
Block 0x1d30x1c0
0x1d40x1c0: v1c01d4(0x40) = CONST 
0x1d60x1c0: v1c01d6 = MLOAD v1c01d4(0x40)
0x1d90x1c0: MSTORE v1c01d6 v513
0x1da0x1c0: v1c01da(0x20) = CONST 
0x1dc0x1c0: v1c01dc = ADD v1c01da(0x20) v1c01d6
0x1dd0x1c0: v1c01dd(0x40) = CONST 
0x1df0x1c0: v1c01df = MLOAD v1c01dd(0x40)
0x1e20x1c0: v1c01e2 = SUB v1c01dc v1c01df
0x1e40x1c0: RETURN v1c01df v1c01e2
----------------------------------

Begin block 0x1d30x20d
prev = {'0x58d'}, next = {}
----------------------------------
Block 0x1d30x20d
0x1d40x20d: v20d1d4(0x40) = CONST 
0x1d60x20d: v20d1d6 = MLOAD v20d1d4(0x40)
0x1d90x20d: MSTORE v20d1d6 v59c
0x1da0x20d: v20d1da(0x20) = CONST 
0x1dc0x20d: v20d1dc = ADD v20d1da(0x20) v20d1d6
0x1dd0x20d: v20d1dd(0x40) = CONST 
0x1df0x20d: v20d1df = MLOAD v20d1dd(0x40)
0x1e20x20d: v20d1e2 = SUB v20d1dc v20d1df
0x1e40x20d: RETURN v20d1df v20d1e2
----------------------------------

Begin block 0x1d30x26b
prev = {'0x633'}, next = {}
----------------------------------
Block 0x1d30x26b
0x1d40x26b: v26b1d4(0x40) = CONST 
0x1d60x26b: v26b1d6 = MLOAD v26b1d4(0x40)
0x1d90x26b: MSTORE v26b1d6 v64d
0x1da0x26b: v26b1da(0x20) = CONST 
0x1dc0x26b: v26b1dc = ADD v26b1da(0x20) v26b1d6
0x1dd0x26b: v26b1dd(0x40) = CONST 
0x1df0x26b: v26b1df = MLOAD v26b1dd(0x40)
0x1e20x26b: v26b1e2 = SUB v26b1dc v26b1df
0x1e40x26b: RETURN v26b1df v26b1e2
----------------------------------

Begin block 0x1d30x290
prev = {'0x650'}, next = {}
----------------------------------
Block 0x1d30x290
0x1d40x290: v2901d4(0x40) = CONST 
0x1d60x290: v2901d6 = MLOAD v2901d4(0x40)
0x1d90x290: MSTORE v2901d6 v668
0x1da0x290: v2901da(0x20) = CONST 
0x1dc0x290: v2901dc = ADD v2901da(0x20) v2901d6
0x1dd0x290: v2901dd(0x40) = CONST 
0x1df0x290: v2901df = MLOAD v2901dd(0x40)
0x1e20x290: v2901e2 = SUB v2901dc v2901df
0x1e40x290: RETURN v2901df v2901e2
----------------------------------

Begin block 0x1d30x3c2
prev = {'0x99c'}, next = {}
----------------------------------
Block 0x1d30x3c2
0x1d40x3c2: v3c21d4(0x40) = CONST 
0x1d60x3c2: v3c21d6 = MLOAD v3c21d4(0x40)
0x1d90x3c2: MSTORE v3c21d6 v9c4
0x1da0x3c2: v3c21da(0x20) = CONST 
0x1dc0x3c2: v3c21dc = ADD v3c21da(0x20) v3c21d6
0x1dd0x3c2: v3c21dd(0x40) = CONST 
0x1df0x3c2: v3c21df = MLOAD v3c21dd(0x40)
0x1e20x3c2: v3c21e2 = SUB v3c21dc v3c21df
0x1e40x3c2: RETURN v3c21df v3c21e2
----------------------------------

Begin block 0x1e5
prev = {}, next = {'0x1f0', '0x1ec'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1e5
0x1e6: v1e6 = CALLVALUE 
0x1e7: v1e7 = ISZERO v1e6
0x1e8: v1e8(0x1f0) = CONST 
0x1eb: JUMPI v1e8(0x1f0) v1e7
----------------------------------

Begin block 0x1ec
prev = {'0x1e5'}, next = {}
----------------------------------
Block 0x1ec
0x1ec: v1ec(0x0) = CONST 
0x1ef: REVERT v1ec(0x0) v1ec(0x0)
----------------------------------

Begin block 0x1f0
prev = {'0x1e5'}, next = {'0x516'}
----------------------------------
Block 0x1f0
0x1f1: v1f1(0x1ac) = CONST 
0x1f4: v1f4(0x1) = CONST 
0x1f6: v1f6(0xa0) = CONST 
0x1f8: v1f8(0x2) = CONST 
0x1fa: v1fa(0x10000000000000000000000000000000000000000) = EXP v1f8(0x2) v1f6(0xa0)
0x1fb: v1fb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1fa(0x10000000000000000000000000000000000000000) v1f4(0x1)
0x1fc: v1fc(0x4) = CONST 
0x1fe: v1fe = CALLDATALOAD v1fc(0x4)
0x200: v200 = AND v1fb(0xffffffffffffffffffffffffffffffffffffffff) v1fe
0x202: v202(0x24) = CONST 
0x204: v204 = CALLDATALOAD v202(0x24)
0x205: v205 = AND v204 v1fb(0xffffffffffffffffffffffffffffffffffffffff)
0x206: v206(0x44) = CONST 
0x208: v208 = CALLDATALOAD v206(0x44)
0x209: v209(0x516) = CONST 
0x20c: JUMP v209(0x516)
----------------------------------

Begin block 0x20d
prev = {}, next = {'0x214', '0x218'}
----------------------------------
function balances(address)()
Block 0x20d
0x20e: v20e = CALLVALUE 
0x20f: v20f = ISZERO v20e
0x210: v210(0x218) = CONST 
0x213: JUMPI v210(0x218) v20f
----------------------------------

Begin block 0x214
prev = {'0x20d'}, next = {}
----------------------------------
Block 0x214
0x214: v214(0x0) = CONST 
0x217: REVERT v214(0x0) v214(0x0)
----------------------------------

Begin block 0x218
prev = {'0x20d'}, next = {'0x58d'}
----------------------------------
Block 0x218
0x219: v219(0x1d3) = CONST 
0x21c: v21c(0x1) = CONST 
0x21e: v21e(0xa0) = CONST 
0x220: v220(0x2) = CONST 
0x222: v222(0x10000000000000000000000000000000000000000) = EXP v220(0x2) v21e(0xa0)
0x223: v223(0xffffffffffffffffffffffffffffffffffffffff) = SUB v222(0x10000000000000000000000000000000000000000) v21c(0x1)
0x224: v224(0x4) = CONST 
0x226: v226 = CALLDATALOAD v224(0x4)
0x227: v227 = AND v226 v223(0xffffffffffffffffffffffffffffffffffffffff)
0x228: v228(0x58d) = CONST 
0x22b: JUMP v228(0x58d)
----------------------------------

Begin block 0x22c
prev = {}, next = {'0x237', '0x233'}
----------------------------------
function decimals()()
Block 0x22c
0x22d: v22d = CALLVALUE 
0x22e: v22e = ISZERO v22d
0x22f: v22f(0x237) = CONST 
0x232: JUMPI v22f(0x237) v22e
----------------------------------

Begin block 0x233
prev = {'0x22c'}, next = {}
----------------------------------
Block 0x233
0x233: v233(0x0) = CONST 
0x236: REVERT v233(0x0) v233(0x0)
----------------------------------

Begin block 0x237
prev = {'0x22c'}, next = {'0x59f'}
----------------------------------
Block 0x237
0x238: v238(0x23f) = CONST 
0x23b: v23b(0x59f) = CONST 
0x23e: JUMP v23b(0x59f)
----------------------------------

Begin block 0x23f
prev = {'0x59f'}, next = {}
----------------------------------
Block 0x23f
0x240: v240(0x40) = CONST 
0x242: v242 = MLOAD v240(0x40)
0x243: v243(0xff) = CONST 
0x247: v247 = AND v5a5 v243(0xff)
0x249: MSTORE v242 v247
0x24a: v24a(0x20) = CONST 
0x24c: v24c = ADD v24a(0x20) v242
0x24d: v24d(0x40) = CONST 
0x24f: v24f = MLOAD v24d(0x40)
0x252: v252 = SUB v24c v24f
0x254: RETURN v24f v252
----------------------------------

Begin block 0x255
prev = {}, next = {'0x25c', '0x260'}
----------------------------------
function burn(uint256)()
Block 0x255
0x256: v256 = CALLVALUE 
0x257: v257 = ISZERO v256
0x258: v258(0x260) = CONST 
0x25b: JUMPI v258(0x260) v257
----------------------------------

Begin block 0x25c
prev = {'0x255'}, next = {}
----------------------------------
Block 0x25c
0x25c: v25c(0x0) = CONST 
0x25f: REVERT v25c(0x0) v25c(0x0)
----------------------------------

Begin block 0x260
prev = {'0x255'}, next = {'0x5a8'}
----------------------------------
Block 0x260
0x261: v261(0x1ac) = CONST 
0x264: v264(0x4) = CONST 
0x266: v266 = CALLDATALOAD v264(0x4)
0x267: v267(0x5a8) = CONST 
0x26a: JUMP v267(0x5a8)
----------------------------------

Begin block 0x26b
prev = {}, next = {'0x272', '0x276'}
----------------------------------
function allowed(address,address)()
Block 0x26b
0x26c: v26c = CALLVALUE 
0x26d: v26d = ISZERO v26c
0x26e: v26e(0x276) = CONST 
0x271: JUMPI v26e(0x276) v26d
----------------------------------

Begin block 0x272
prev = {'0x26b'}, next = {}
----------------------------------
Block 0x272
0x272: v272(0x0) = CONST 
0x275: REVERT v272(0x0) v272(0x0)
----------------------------------

Begin block 0x276
prev = {'0x26b'}, next = {'0x633'}
----------------------------------
Block 0x276
0x277: v277(0x1d3) = CONST 
0x27a: v27a(0x1) = CONST 
0x27c: v27c(0xa0) = CONST 
0x27e: v27e(0x2) = CONST 
0x280: v280(0x10000000000000000000000000000000000000000) = EXP v27e(0x2) v27c(0xa0)
0x281: v281(0xffffffffffffffffffffffffffffffffffffffff) = SUB v280(0x10000000000000000000000000000000000000000) v27a(0x1)
0x282: v282(0x4) = CONST 
0x284: v284 = CALLDATALOAD v282(0x4)
0x286: v286 = AND v281(0xffffffffffffffffffffffffffffffffffffffff) v284
0x288: v288(0x24) = CONST 
0x28a: v28a = CALLDATALOAD v288(0x24)
0x28b: v28b = AND v28a v281(0xffffffffffffffffffffffffffffffffffffffff)
0x28c: v28c(0x633) = CONST 
0x28f: JUMP v28c(0x633)
----------------------------------

Begin block 0x290
prev = {}, next = {'0x297', '0x29b'}
----------------------------------
function balanceOf(address)()
Block 0x290
0x291: v291 = CALLVALUE 
0x292: v292 = ISZERO v291
0x293: v293(0x29b) = CONST 
0x296: JUMPI v293(0x29b) v292
----------------------------------

Begin block 0x297
prev = {'0x290'}, next = {}
----------------------------------
Block 0x297
0x297: v297(0x0) = CONST 
0x29a: REVERT v297(0x0) v297(0x0)
----------------------------------

Begin block 0x29b
prev = {'0x290'}, next = {'0x650'}
----------------------------------
Block 0x29b
0x29c: v29c(0x1d3) = CONST 
0x29f: v29f(0x1) = CONST 
0x2a1: v2a1(0xa0) = CONST 
0x2a3: v2a3(0x2) = CONST 
0x2a5: v2a5(0x10000000000000000000000000000000000000000) = EXP v2a3(0x2) v2a1(0xa0)
0x2a6: v2a6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a5(0x10000000000000000000000000000000000000000) v29f(0x1)
0x2a7: v2a7(0x4) = CONST 
0x2a9: v2a9 = CALLDATALOAD v2a7(0x4)
0x2aa: v2aa = AND v2a9 v2a6(0xffffffffffffffffffffffffffffffffffffffff)
0x2ab: v2ab(0x650) = CONST 
0x2ae: JUMP v2ab(0x650)
----------------------------------

Begin block 0x2af
prev = {}, next = {'0x2b6', '0x2ba'}
----------------------------------
function acceptOwnership()()
Block 0x2af
0x2b0: v2b0 = CALLVALUE 
0x2b1: v2b1 = ISZERO v2b0
0x2b2: v2b2(0x2ba) = CONST 
0x2b5: JUMPI v2b2(0x2ba) v2b1
----------------------------------

Begin block 0x2b6
prev = {'0x2af'}, next = {}
----------------------------------
Block 0x2b6
0x2b6: v2b6(0x0) = CONST 
0x2b9: REVERT v2b6(0x0) v2b6(0x0)
----------------------------------

Begin block 0x2ba
prev = {'0x2af'}, next = {'0x66b'}
----------------------------------
Block 0x2ba
0x2bb: v2bb(0x2c2) = CONST 
0x2be: v2be(0x66b) = CONST 
0x2c1: JUMP v2be(0x66b)
----------------------------------

Begin block 0x2c20x2af
prev = {'0x686'}, next = {}
----------------------------------
Block 0x2c20x2af
0x2c30x2af: STOP 
----------------------------------

Begin block 0x2c20x3e7
prev = {'0x9e2'}, next = {}
----------------------------------
Block 0x2c20x3e7
0x2c30x3e7: STOP 
----------------------------------

Begin block 0x2c4
prev = {}, next = {'0x2cf', '0x2cb'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x2c4
0x2c5: v2c5 = CALLVALUE 
0x2c6: v2c6 = ISZERO v2c5
0x2c7: v2c7(0x2cf) = CONST 
0x2ca: JUMPI v2c7(0x2cf) v2c6
----------------------------------

Begin block 0x2cb
prev = {'0x2c4'}, next = {}
----------------------------------
Block 0x2cb
0x2cb: v2cb(0x0) = CONST 
0x2ce: REVERT v2cb(0x0) v2cb(0x0)
----------------------------------

Begin block 0x2cf
prev = {'0x2c4'}, next = {'0x6f9'}
----------------------------------
Block 0x2cf
0x2d0: v2d0(0x1ac) = CONST 
0x2d3: v2d3(0x1) = CONST 
0x2d5: v2d5(0xa0) = CONST 
0x2d7: v2d7(0x2) = CONST 
0x2d9: v2d9(0x10000000000000000000000000000000000000000) = EXP v2d7(0x2) v2d5(0xa0)
0x2da: v2da(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2d9(0x10000000000000000000000000000000000000000) v2d3(0x1)
0x2db: v2db(0x4) = CONST 
0x2dd: v2dd = CALLDATALOAD v2db(0x4)
0x2de: v2de = AND v2dd v2da(0xffffffffffffffffffffffffffffffffffffffff)
0x2df: v2df(0x24) = CONST 
0x2e1: v2e1 = CALLDATALOAD v2df(0x24)
0x2e2: v2e2(0x6f9) = CONST 
0x2e5: JUMP v2e2(0x6f9)
----------------------------------

Begin block 0x2e6
prev = {}, next = {'0x2ed', '0x2f1'}
----------------------------------
function owner()()
Block 0x2e6
0x2e7: v2e7 = CALLVALUE 
0x2e8: v2e8 = ISZERO v2e7
0x2e9: v2e9(0x2f1) = CONST 
0x2ec: JUMPI v2e9(0x2f1) v2e8
----------------------------------

Begin block 0x2ed
prev = {'0x2e6'}, next = {}
----------------------------------
Block 0x2ed
0x2ed: v2ed(0x0) = CONST 
0x2f0: REVERT v2ed(0x0) v2ed(0x0)
----------------------------------

Begin block 0x2f1
prev = {'0x2e6'}, next = {'0x7d5'}
----------------------------------
Block 0x2f1
0x2f2: v2f2(0x2f9) = CONST 
0x2f5: v2f5(0x7d5) = CONST 
0x2f8: JUMP v2f5(0x7d5)
----------------------------------

Begin block 0x2f90x2e6
prev = {'0x7d5'}, next = {}
----------------------------------
Block 0x2f90x2e6
0x2fa0x2e6: v2e62fa(0x40) = CONST 
0x2fc0x2e6: v2e62fc = MLOAD v2e62fa(0x40)
0x2fd0x2e6: v2e62fd(0x1) = CONST 
0x2ff0x2e6: v2e62ff(0xa0) = CONST 
0x3010x2e6: v2e6301(0x2) = CONST 
0x3030x2e6: v2e6303(0x10000000000000000000000000000000000000000) = EXP v2e6301(0x2) v2e62ff(0xa0)
0x3040x2e6: v2e6304(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2e6303(0x10000000000000000000000000000000000000000) v2e62fd(0x1)
0x3070x2e6: v2e6307 = AND v7e1 v2e6304(0xffffffffffffffffffffffffffffffffffffffff)
0x3090x2e6: MSTORE v2e62fc v2e6307
0x30a0x2e6: v2e630a(0x20) = CONST 
0x30c0x2e6: v2e630c = ADD v2e630a(0x20) v2e62fc
0x30d0x2e6: v2e630d(0x40) = CONST 
0x30f0x2e6: v2e630f = MLOAD v2e630d(0x40)
0x3120x2e6: v2e6312 = SUB v2e630c v2e630f
0x3140x2e6: RETURN v2e630f v2e6312
----------------------------------

Begin block 0x2f90x3af
prev = {'0x98d'}, next = {}
----------------------------------
Block 0x2f90x3af
0x2fa0x3af: v3af2fa(0x40) = CONST 
0x2fc0x3af: v3af2fc = MLOAD v3af2fa(0x40)
0x2fd0x3af: v3af2fd(0x1) = CONST 
0x2ff0x3af: v3af2ff(0xa0) = CONST 
0x3010x3af: v3af301(0x2) = CONST 
0x3030x3af: v3af303(0x10000000000000000000000000000000000000000) = EXP v3af301(0x2) v3af2ff(0xa0)
0x3040x3af: v3af304(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3af303(0x10000000000000000000000000000000000000000) v3af2fd(0x1)
0x3070x3af: v3af307 = AND v999 v3af304(0xffffffffffffffffffffffffffffffffffffffff)
0x3090x3af: MSTORE v3af2fc v3af307
0x30a0x3af: v3af30a(0x20) = CONST 
0x30c0x3af: v3af30c = ADD v3af30a(0x20) v3af2fc
0x30d0x3af: v3af30d(0x40) = CONST 
0x30f0x3af: v3af30f = MLOAD v3af30d(0x40)
0x3120x3af: v3af312 = SUB v3af30c v3af30f
0x3140x3af: RETURN v3af30f v3af312
----------------------------------

Begin block 0x315
prev = {}, next = {'0x31c', '0x320'}
----------------------------------
function symbol()()
Block 0x315
0x316: v316 = CALLVALUE 
0x317: v317 = ISZERO v316
0x318: v318(0x320) = CONST 
0x31b: JUMPI v318(0x320) v317
----------------------------------

Begin block 0x31c
prev = {'0x315'}, next = {}
----------------------------------
Block 0x31c
0x31c: v31c(0x0) = CONST 
0x31f: REVERT v31c(0x0) v31c(0x0)
----------------------------------

Begin block 0x320
prev = {'0x315'}, next = {'0x1130x315'}
----------------------------------
Block 0x320
0x321: v321(0x113) = CONST 
0x324: v324(0x7e4) = CONST 
0x327: v327_0, v327_1 = CALLPRIVATE v324(0x7e4) v321(0x113)
----------------------------------

Begin block 0x328
prev = {}, next = {'0x333', '0x32f'}
----------------------------------
function transfer(address,uint256)()
Block 0x328
0x329: v329 = CALLVALUE 
0x32a: v32a = ISZERO v329
0x32b: v32b(0x333) = CONST 
0x32e: JUMPI v32b(0x333) v32a
----------------------------------

Begin block 0x32f
prev = {'0x328'}, next = {}
----------------------------------
Block 0x32f
0x32f: v32f(0x0) = CONST 
0x332: REVERT v32f(0x0) v32f(0x0)
----------------------------------

Begin block 0x333
prev = {'0x328'}, next = {'0x84f'}
----------------------------------
Block 0x333
0x334: v334(0x1ac) = CONST 
0x337: v337(0x1) = CONST 
0x339: v339(0xa0) = CONST 
0x33b: v33b(0x2) = CONST 
0x33d: v33d(0x10000000000000000000000000000000000000000) = EXP v33b(0x2) v339(0xa0)
0x33e: v33e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33d(0x10000000000000000000000000000000000000000) v337(0x1)
0x33f: v33f(0x4) = CONST 
0x341: v341 = CALLDATALOAD v33f(0x4)
0x342: v342 = AND v341 v33e(0xffffffffffffffffffffffffffffffffffffffff)
0x343: v343(0x24) = CONST 
0x345: v345 = CALLDATALOAD v343(0x24)
0x346: v346(0x84f) = CONST 
0x349: JUMP v346(0x84f)
----------------------------------

Begin block 0x34a
prev = {}, next = {'0x355', '0x351'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x34a
0x34b: v34b = CALLVALUE 
0x34c: v34c = ISZERO v34b
0x34d: v34d(0x355) = CONST 
0x350: JUMPI v34d(0x355) v34c
----------------------------------

Begin block 0x351
prev = {'0x34a'}, next = {}
----------------------------------
Block 0x351
0x351: v351(0x0) = CONST 
0x354: REVERT v351(0x0) v351(0x0)
----------------------------------

Begin block 0x355
prev = {'0x34a'}, next = {'0x865'}
----------------------------------
Block 0x355
0x356: v356(0x1ac) = CONST 
0x359: v359(0x4) = CONST 
0x35c: v35c = CALLDATALOAD v359(0x4)
0x35d: v35d(0x1) = CONST 
0x35f: v35f(0xa0) = CONST 
0x361: v361(0x2) = CONST 
0x363: v363(0x10000000000000000000000000000000000000000) = EXP v361(0x2) v35f(0xa0)
0x364: v364(0xffffffffffffffffffffffffffffffffffffffff) = SUB v363(0x10000000000000000000000000000000000000000) v35d(0x1)
0x365: v365 = AND v364(0xffffffffffffffffffffffffffffffffffffffff) v35c
0x367: v367(0x24) = CONST 
0x36a: v36a = CALLDATALOAD v367(0x24)
0x36d: v36d(0x64) = CONST 
0x370: v370(0x44) = CONST 
0x372: v372 = CALLDATALOAD v370(0x44)
0x375: v375 = ADD v372 v367(0x24)
0x378: v378 = ADD v359(0x4) v372
0x379: v379 = CALLDATALOAD v378
0x37b: v37b(0x20) = CONST 
0x37d: v37d(0x1f) = CONST 
0x380: v380 = ADD v379 v37d(0x1f)
0x383: v383 = DIV v380 v37b(0x20)
0x385: v385 = MUL v37b(0x20) v383
0x386: v386 = ADD v385 v37b(0x20)
0x387: v387(0x40) = CONST 
0x389: v389 = MLOAD v387(0x40)
0x38c: v38c = ADD v389 v386
0x38d: v38d(0x40) = CONST 
0x38f: MSTORE v38d(0x40) v38c
0x392: MSTORE v389 v379
0x396: v396(0x20) = CONST 
0x399: v399 = ADD v389 v396(0x20)
0x39f: CALLDATACOPY v399 v375 v379
0x3a4: v3a4(0x865) = CONST 
0x3ae: JUMP v3a4(0x865)
----------------------------------

Begin block 0x3af
prev = {}, next = {'0x3ba', '0x3b6'}
----------------------------------
function newOwner()()
Block 0x3af
0x3b0: v3b0 = CALLVALUE 
0x3b1: v3b1 = ISZERO v3b0
0x3b2: v3b2(0x3ba) = CONST 
0x3b5: JUMPI v3b2(0x3ba) v3b1
----------------------------------

Begin block 0x3b6
prev = {'0x3af'}, next = {}
----------------------------------
Block 0x3b6
0x3b6: v3b6(0x0) = CONST 
0x3b9: REVERT v3b6(0x0) v3b6(0x0)
----------------------------------

Begin block 0x3ba
prev = {'0x3af'}, next = {'0x98d'}
----------------------------------
Block 0x3ba
0x3bb: v3bb(0x2f9) = CONST 
0x3be: v3be(0x98d) = CONST 
0x3c1: JUMP v3be(0x98d)
----------------------------------

Begin block 0x3c2
prev = {}, next = {'0x3c9', '0x3cd'}
----------------------------------
function allowance(address,address)()
Block 0x3c2
0x3c3: v3c3 = CALLVALUE 
0x3c4: v3c4 = ISZERO v3c3
0x3c5: v3c5(0x3cd) = CONST 
0x3c8: JUMPI v3c5(0x3cd) v3c4
----------------------------------

Begin block 0x3c9
prev = {'0x3c2'}, next = {}
----------------------------------
Block 0x3c9
0x3c9: v3c9(0x0) = CONST 
0x3cc: REVERT v3c9(0x0) v3c9(0x0)
----------------------------------

Begin block 0x3cd
prev = {'0x3c2'}, next = {'0x99c'}
----------------------------------
Block 0x3cd
0x3ce: v3ce(0x1d3) = CONST 
0x3d1: v3d1(0x1) = CONST 
0x3d3: v3d3(0xa0) = CONST 
0x3d5: v3d5(0x2) = CONST 
0x3d7: v3d7(0x10000000000000000000000000000000000000000) = EXP v3d5(0x2) v3d3(0xa0)
0x3d8: v3d8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3d7(0x10000000000000000000000000000000000000000) v3d1(0x1)
0x3d9: v3d9(0x4) = CONST 
0x3db: v3db = CALLDATALOAD v3d9(0x4)
0x3dd: v3dd = AND v3d8(0xffffffffffffffffffffffffffffffffffffffff) v3db
0x3df: v3df(0x24) = CONST 
0x3e1: v3e1 = CALLDATALOAD v3df(0x24)
0x3e2: v3e2 = AND v3e1 v3d8(0xffffffffffffffffffffffffffffffffffffffff)
0x3e3: v3e3(0x99c) = CONST 
0x3e6: JUMP v3e3(0x99c)
----------------------------------

Begin block 0x3e7
prev = {}, next = {'0x3f2', '0x3ee'}
----------------------------------
function transferOwnership(address)()
Block 0x3e7
0x3e8: v3e8 = CALLVALUE 
0x3e9: v3e9 = ISZERO v3e8
0x3ea: v3ea(0x3f2) = CONST 
0x3ed: JUMPI v3ea(0x3f2) v3e9
----------------------------------

Begin block 0x3ee
prev = {'0x3e7'}, next = {}
----------------------------------
Block 0x3ee
0x3ee: v3ee(0x0) = CONST 
0x3f1: REVERT v3ee(0x0) v3ee(0x0)
----------------------------------

Begin block 0x3f2
prev = {'0x3e7'}, next = {'0x9c7'}
----------------------------------
Block 0x3f2
0x3f3: v3f3(0x2c2) = CONST 
0x3f6: v3f6(0x1) = CONST 
0x3f8: v3f8(0xa0) = CONST 
0x3fa: v3fa(0x2) = CONST 
0x3fc: v3fc(0x10000000000000000000000000000000000000000) = EXP v3fa(0x2) v3f8(0xa0)
0x3fd: v3fd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3fc(0x10000000000000000000000000000000000000000) v3f6(0x1)
0x3fe: v3fe(0x4) = CONST 
0x400: v400 = CALLDATALOAD v3fe(0x4)
0x401: v401 = AND v400 v3fd(0xffffffffffffffffffffffffffffffffffffffff)
0x402: v402(0x9c7) = CONST 
0x405: JUMP v402(0x9c7)
----------------------------------

Begin block 0x406
prev = {}, next = {'0x456', '0x49c0x406'}
----------------------------------
function 0x406(v406arg0)
Block 0x406
0x407: v407(0x0) = CONST 
0x40a: v40a = SLOAD v407(0x0)
0x40b: v40b(0x1) = CONST 
0x40e: v40e(0x1) = CONST 
0x410: v410 = AND v40e(0x1) v40a
0x411: v411 = ISZERO v410
0x412: v412(0x100) = CONST 
0x415: v415 = MUL v412(0x100) v411
0x416: v416 = SUB v415 v40b(0x1)
0x417: v417 = AND v416 v40a
0x418: v418(0x2) = CONST 
0x41b: v41b = DIV v417 v418(0x2)
0x41d: v41d(0x1f) = CONST 
0x41f: v41f = ADD v41d(0x1f) v41b
0x420: v420(0x20) = CONST 
0x424: v424 = DIV v41f v420(0x20)
0x425: v425 = MUL v424 v420(0x20)
0x426: v426(0x20) = CONST 
0x428: v428 = ADD v426(0x20) v425
0x429: v429(0x40) = CONST 
0x42b: v42b = MLOAD v429(0x40)
0x42e: v42e = ADD v42b v428
0x42f: v42f(0x40) = CONST 
0x431: MSTORE v42f(0x40) v42e
0x438: MSTORE v42b v41b
0x439: v439(0x20) = CONST 
0x43b: v43b = ADD v439(0x20) v42b
0x43e: v43e = SLOAD v407(0x0)
0x43f: v43f(0x1) = CONST 
0x442: v442(0x1) = CONST 
0x444: v444 = AND v442(0x1) v43e
0x445: v445 = ISZERO v444
0x446: v446(0x100) = CONST 
0x449: v449 = MUL v446(0x100) v445
0x44a: v44a = SUB v449 v43f(0x1)
0x44b: v44b = AND v44a v43e
0x44c: v44c(0x2) = CONST 
0x44f: v44f = DIV v44b v44c(0x2)
0x451: v451 = ISZERO v44f
0x452: v452(0x49c) = CONST 
0x455: JUMPI v452(0x49c) v451
----------------------------------

Begin block 0x456
prev = {'0x406'}, next = {'0x45e', '0x4710x406'}
----------------------------------
Block 0x456
0x457: v457(0x1f) = CONST 
0x459: v459 = LT v457(0x1f) v44f
0x45a: v45a(0x471) = CONST 
0x45d: JUMPI v45a(0x471) v459
----------------------------------

Begin block 0x45e
prev = {'0x456'}, next = {'0x49c0x406'}
----------------------------------
Block 0x45e
0x45e: v45e(0x100) = CONST 
0x463: v463 = SLOAD v407(0x0)
0x464: v464 = DIV v463 v45e(0x100)
0x465: v465 = MUL v464 v45e(0x100)
0x467: MSTORE v43b v465
0x469: v469(0x20) = CONST 
0x46b: v46b = ADD v469(0x20) v43b
0x46d: v46d(0x49c) = CONST 
0x470: JUMP v46d(0x49c)
----------------------------------

Begin block 0x4710x406
prev = {'0x456'}, next = {'0x47f0x406'}
----------------------------------
Block 0x4710x406
0x4730x406: v406473 = ADD v43b v44f
0x4760x406: v406476(0x0) = CONST 
0x4780x406: MSTORE v406476(0x0) v407(0x0)
0x4790x406: v406479(0x20) = CONST 
0x47b0x406: v40647b(0x0) = CONST 
0x47d0x406: v40647d = SHA3 v40647b(0x0) v406479(0x20)
----------------------------------

Begin block 0x4710x7e4
prev = {'0x834'}, next = {'0x47f0x7e4'}
----------------------------------
Block 0x4710x7e4
0x4730x7e4: v7e4473 = ADD v819 v82d
0x4760x7e4: v7e4476(0x0) = CONST 
0x4780x7e4: MSTORE v7e4476(0x0) v7e5(0x1)
0x4790x7e4: v7e4479(0x20) = CONST 
0x47b0x7e4: v7e447b(0x0) = CONST 
0x47d0x7e4: v7e447d = SHA3 v7e447b(0x0) v7e4479(0x20)
----------------------------------

Begin block 0x47f0x406
prev = {'0x47f0x406', '0x4710x406'}, next = {'0x47f0x406', '0x4930x406'}
----------------------------------
Block 0x47f0x406
0x47f0x406_0x0: v47f406_0 = PHI v43b v40648b
0x47f0x406_0x1: v47f406_1 = PHI v406487 v40647d
0x4810x406: v406481 = SLOAD v47f406_1
0x4830x406: MSTORE v47f406_0 v406481
0x4850x406: v406485(0x1) = CONST 
0x4870x406: v406487 = ADD v406485(0x1) v47f406_1
0x4890x406: v406489(0x20) = CONST 
0x48b0x406: v40648b = ADD v406489(0x20) v47f406_0
0x48e0x406: v40648e = GT v406473 v40648b
0x48f0x406: v40648f(0x47f) = CONST 
0x4920x406: JUMPI v40648f(0x47f) v40648e
----------------------------------

Begin block 0x47f0x7e4
prev = {'0x4710x7e4', '0x47f0x7e4'}, next = {'0x4930x7e4', '0x47f0x7e4'}
----------------------------------
Block 0x47f0x7e4
0x47f0x7e4_0x0: v47f7e4_0 = PHI v819 v7e448b
0x47f0x7e4_0x1: v47f7e4_1 = PHI v7e4487 v7e447d
0x4810x7e4: v7e4481 = SLOAD v47f7e4_1
0x4830x7e4: MSTORE v47f7e4_0 v7e4481
0x4850x7e4: v7e4485(0x1) = CONST 
0x4870x7e4: v7e4487 = ADD v7e4485(0x1) v47f7e4_1
0x4890x7e4: v7e4489(0x20) = CONST 
0x48b0x7e4: v7e448b = ADD v7e4489(0x20) v47f7e4_0
0x48e0x7e4: v7e448e = GT v7e4473 v7e448b
0x48f0x7e4: v7e448f(0x47f) = CONST 
0x4920x7e4: JUMPI v7e448f(0x47f) v7e448e
----------------------------------

Begin block 0x4930x406
prev = {'0x47f0x406'}, next = {'0x49c0x406'}
----------------------------------
Block 0x4930x406
0x4950x406: v406495 = SUB v40648b v406473
0x4960x406: v406496(0x1f) = CONST 
0x4980x406: v406498 = AND v406496(0x1f) v406495
0x49a0x406: v40649a = ADD v406473 v406498
----------------------------------

Begin block 0x4930x7e4
prev = {'0x47f0x7e4'}, next = {'0x49c0x7e4'}
----------------------------------
Block 0x4930x7e4
0x4950x7e4: v7e4495 = SUB v7e448b v7e4473
0x4960x7e4: v7e4496(0x1f) = CONST 
0x4980x7e4: v7e4498 = AND v7e4496(0x1f) v7e4495
0x49a0x7e4: v7e449a = ADD v7e4473 v7e4498
----------------------------------

Begin block 0x49c0x406
prev = {'0x4930x406', '0x45e', '0x406'}, next = {}
----------------------------------
Block 0x49c0x406
0x4a30x406: RETURNPRIVATE v406arg0 v42b v406arg0
----------------------------------

Begin block 0x49c0x7e4
prev = {'0x4930x7e4', '0x83c', '0x7e4'}, next = {}
----------------------------------
Block 0x49c0x7e4
0x4a30x7e4: RETURNPRIVATE v7e4arg0 v809 v7e4arg0
----------------------------------

Begin block 0x4a4
prev = {}, next = {}
----------------------------------
function 0x4a4(v4a4arg0, v4a4arg1, v4a4arg2)
Block 0x4a4
0x4a5: v4a5(0x1) = CONST 
0x4a7: v4a7(0xa0) = CONST 
0x4a9: v4a9(0x2) = CONST 
0x4ab: v4ab(0x10000000000000000000000000000000000000000) = EXP v4a9(0x2) v4a7(0xa0)
0x4ac: v4ac(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ab(0x10000000000000000000000000000000000000000) v4a5(0x1)
0x4ad: v4ad = CALLER 
0x4af: v4af = AND v4ac(0xffffffffffffffffffffffffffffffffffffffff) v4ad
0x4b0: v4b0(0x0) = CONST 
0x4b4: MSTORE v4b0(0x0) v4af
0x4b5: v4b5(0x7) = CONST 
0x4b7: v4b7(0x20) = CONST 
0x4bb: MSTORE v4b7(0x20) v4b5(0x7)
0x4bc: v4bc(0x40) = CONST 
0x4c0: v4c0 = SHA3 v4b0(0x0) v4bc(0x40)
0x4c3: v4c3 = AND v4a4arg1 v4ac(0xffffffffffffffffffffffffffffffffffffffff)
0x4c6: MSTORE v4b0(0x0) v4c3
0x4ca: MSTORE v4b7(0x20) v4c0
0x4cd: v4cd = SHA3 v4b0(0x0) v4bc(0x40)
0x4d0: SSTORE v4cd v4a4arg0
0x4d5: v4d5(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x4f9: v4f9 = MLOAD v4bc(0x40)
0x4fc: MSTORE v4f9 v4a4arg0
0x4fd: v4fd(0x20) = CONST 
0x4ff: v4ff = ADD v4fd(0x20) v4f9
0x500: v500(0x40) = CONST 
0x502: v502 = MLOAD v500(0x40)
0x505: v505 = SUB v4ff v502
0x507: LOG3 v502 v505 v4d5(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v4af v4c3
0x509: v509(0x1) = CONST 
0x50f: RETURNPRIVATE v4a4arg2 v509(0x1)
----------------------------------

Begin block 0x510
prev = {'0x1cb'}, next = {'0x1d30x1c0'}
----------------------------------
Block 0x510
0x511: v511(0x3) = CONST 
0x513: v513 = SLOAD v511(0x3)
0x515: JUMP v1cc(0x1d3)
----------------------------------

Begin block 0x516
prev = {'0x1f0'}, next = {'0x54b', '0x547'}
----------------------------------
Block 0x516
0x517: v517(0x1) = CONST 
0x519: v519(0xa0) = CONST 
0x51b: v51b(0x2) = CONST 
0x51d: v51d(0x10000000000000000000000000000000000000000) = EXP v51b(0x2) v519(0xa0)
0x51e: v51e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v51d(0x10000000000000000000000000000000000000000) v517(0x1)
0x521: v521 = AND v200 v51e(0xffffffffffffffffffffffffffffffffffffffff)
0x522: v522(0x0) = CONST 
0x526: MSTORE v522(0x0) v521
0x527: v527(0x7) = CONST 
0x529: v529(0x20) = CONST 
0x52d: MSTORE v529(0x20) v527(0x7)
0x52e: v52e(0x40) = CONST 
0x532: v532 = SHA3 v522(0x0) v52e(0x40)
0x533: v533 = CALLER 
0x536: v536 = AND v51e(0xffffffffffffffffffffffffffffffffffffffff) v533
0x538: MSTORE v522(0x0) v536
0x53b: MSTORE v529(0x20) v532
0x53e: v53e = SHA3 v522(0x0) v52e(0x40)
0x53f: v53f = SLOAD v53e
0x541: v541 = GT v208 v53f
0x542: v542 = ISZERO v541
0x543: v543(0x54b) = CONST 
0x546: JUMPI v543(0x54b) v542
----------------------------------

Begin block 0x547
prev = {'0x516'}, next = {}
----------------------------------
Block 0x547
0x547: v547(0x0) = CONST 
0x54a: REVERT v547(0x0) v547(0x0)
----------------------------------

Begin block 0x54b
prev = {'0x516'}, next = {'0x583'}
----------------------------------
Block 0x54b
0x54c: v54c(0x1) = CONST 
0x54e: v54e(0xa0) = CONST 
0x550: v550(0x2) = CONST 
0x552: v552(0x10000000000000000000000000000000000000000) = EXP v550(0x2) v54e(0xa0)
0x553: v553(0xffffffffffffffffffffffffffffffffffffffff) = SUB v552(0x10000000000000000000000000000000000000000) v54c(0x1)
0x556: v556 = AND v200 v553(0xffffffffffffffffffffffffffffffffffffffff)
0x557: v557(0x0) = CONST 
0x55b: MSTORE v557(0x0) v556
0x55c: v55c(0x7) = CONST 
0x55e: v55e(0x20) = CONST 
0x562: MSTORE v55e(0x20) v55c(0x7)
0x563: v563(0x40) = CONST 
0x567: v567 = SHA3 v557(0x0) v563(0x40)
0x568: v568 = CALLER 
0x56b: v56b = AND v553(0xffffffffffffffffffffffffffffffffffffffff) v568
0x56d: MSTORE v557(0x0) v56b
0x570: MSTORE v55e(0x20) v567
0x571: v571 = SHA3 v557(0x0) v563(0x40)
0x573: v573 = SLOAD v571
0x576: v576 = SUB v573 v208
0x578: SSTORE v571 v576
0x579: v579(0x583) = CONST 
0x57f: v57f(0xa11) = CONST 
0x582: CALLPRIVATE v57f(0xa11) v208 v205 v200 v579(0x583)
----------------------------------

Begin block 0x583
prev = {'0x54b'}, next = {'0x1ac0x1e5'}
----------------------------------
Block 0x583
0x585: v585(0x1) = CONST 
0x58c: JUMP v1f1(0x1ac)
----------------------------------

Begin block 0x58d
prev = {'0x218'}, next = {'0x1d30x20d'}
----------------------------------
Block 0x58d
0x58e: v58e(0x6) = CONST 
0x590: v590(0x20) = CONST 
0x592: MSTORE v590(0x20) v58e(0x6)
0x593: v593(0x0) = CONST 
0x597: MSTORE v593(0x0) v227
0x598: v598(0x40) = CONST 
0x59b: v59b = SHA3 v593(0x0) v598(0x40)
0x59c: v59c = SLOAD v59b
0x59e: JUMP v219(0x1d3)
----------------------------------

Begin block 0x59f
prev = {'0x237'}, next = {'0x23f'}
----------------------------------
Block 0x59f
0x5a0: v5a0(0x2) = CONST 
0x5a2: v5a2 = SLOAD v5a0(0x2)
0x5a3: v5a3(0xff) = CONST 
0x5a5: v5a5 = AND v5a3(0xff) v5a2
0x5a7: JUMP v238(0x23f)
----------------------------------

Begin block 0x5a8
prev = {'0x260'}, next = {'0x5ce', '0x5ca'}
----------------------------------
Block 0x5a8
0x5a9: v5a9(0x1) = CONST 
0x5ab: v5ab(0xa0) = CONST 
0x5ad: v5ad(0x2) = CONST 
0x5af: v5af(0x10000000000000000000000000000000000000000) = EXP v5ad(0x2) v5ab(0xa0)
0x5b0: v5b0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5af(0x10000000000000000000000000000000000000000) v5a9(0x1)
0x5b1: v5b1 = CALLER 
0x5b2: v5b2 = AND v5b1 v5b0(0xffffffffffffffffffffffffffffffffffffffff)
0x5b3: v5b3(0x0) = CONST 
0x5b7: MSTORE v5b3(0x0) v5b2
0x5b8: v5b8(0x6) = CONST 
0x5ba: v5ba(0x20) = CONST 
0x5bc: MSTORE v5ba(0x20) v5b8(0x6)
0x5bd: v5bd(0x40) = CONST 
0x5c0: v5c0 = SHA3 v5b3(0x0) v5bd(0x40)
0x5c1: v5c1 = SLOAD v5c0
0x5c4: v5c4 = LT v5c1 v266
0x5c5: v5c5 = ISZERO v5c4
0x5c6: v5c6(0x5ce) = CONST 
0x5c9: JUMPI v5c6(0x5ce) v5c5
----------------------------------

Begin block 0x5ca
prev = {'0x5a8'}, next = {}
----------------------------------
Block 0x5ca
0x5ca: v5ca(0x0) = CONST 
0x5cd: REVERT v5ca(0x0) v5ca(0x0)
----------------------------------

Begin block 0x5ce
prev = {'0x5a8'}, next = {'0x1ac0x255'}
----------------------------------
Block 0x5ce
0x5cf: v5cf(0x1) = CONST 
0x5d1: v5d1(0xa0) = CONST 
0x5d3: v5d3(0x2) = CONST 
0x5d5: v5d5(0x10000000000000000000000000000000000000000) = EXP v5d3(0x2) v5d1(0xa0)
0x5d6: v5d6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d5(0x10000000000000000000000000000000000000000) v5cf(0x1)
0x5d7: v5d7 = CALLER 
0x5d8: v5d8 = AND v5d7 v5d6(0xffffffffffffffffffffffffffffffffffffffff)
0x5d9: v5d9(0x0) = CONST 
0x5dd: MSTORE v5d9(0x0) v5d8
0x5de: v5de(0x6) = CONST 
0x5e0: v5e0(0x20) = CONST 
0x5e2: MSTORE v5e0(0x20) v5de(0x6)
0x5e3: v5e3(0x40) = CONST 
0x5e8: v5e8 = SHA3 v5d9(0x0) v5e3(0x40)
0x5ea: v5ea = SLOAD v5e8
0x5ed: v5ed = SUB v5ea v266
0x5ef: SSTORE v5e8 v5ed
0x5f0: v5f0(0x3) = CONST 
0x5f3: v5f3 = SLOAD v5f0(0x3)
0x5f6: v5f6 = SUB v5f3 v266
0x5f8: SSTORE v5f0(0x3) v5f6
0x5f9: v5f9(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x61d: v61d = MLOAD v5e3(0x40)
0x620: MSTORE v61d v266
0x621: v621(0x20) = CONST 
0x623: v623 = ADD v621(0x20) v61d
0x624: v624(0x40) = CONST 
0x626: v626 = MLOAD v624(0x40)
0x629: v629 = SUB v623 v626
0x62b: LOG2 v626 v629 v5f9(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v5d8
0x62d: v62d(0x1) = CONST 
0x632: JUMP v261(0x1ac)
----------------------------------

Begin block 0x633
prev = {'0x276'}, next = {'0x1d30x26b'}
----------------------------------
Block 0x633
0x634: v634(0x7) = CONST 
0x636: v636(0x20) = CONST 
0x63a: MSTORE v636(0x20) v634(0x7)
0x63b: v63b(0x0) = CONST 
0x63f: MSTORE v63b(0x0) v286
0x640: v640(0x40) = CONST 
0x644: v644 = SHA3 v63b(0x0) v640(0x40)
0x647: MSTORE v636(0x20) v644
0x64a: MSTORE v63b(0x0) v28b
0x64c: v64c = SHA3 v63b(0x0) v640(0x40)
0x64d: v64d = SLOAD v64c
0x64f: JUMP v277(0x1d3)
----------------------------------

Begin block 0x650
prev = {'0x29b'}, next = {'0x1d30x290'}
----------------------------------
Block 0x650
0x651: v651(0x1) = CONST 
0x653: v653(0xa0) = CONST 
0x655: v655(0x2) = CONST 
0x657: v657(0x10000000000000000000000000000000000000000) = EXP v655(0x2) v653(0xa0)
0x658: v658(0xffffffffffffffffffffffffffffffffffffffff) = SUB v657(0x10000000000000000000000000000000000000000) v651(0x1)
0x659: v659 = AND v658(0xffffffffffffffffffffffffffffffffffffffff) v2aa
0x65a: v65a(0x0) = CONST 
0x65e: MSTORE v65a(0x0) v659
0x65f: v65f(0x6) = CONST 
0x661: v661(0x20) = CONST 
0x663: MSTORE v661(0x20) v65f(0x6)
0x664: v664(0x40) = CONST 
0x667: v667 = SHA3 v65a(0x0) v664(0x40)
0x668: v668 = SLOAD v667
0x66a: JUMP v29c(0x1d3)
----------------------------------

Begin block 0x66b
prev = {'0x2ba'}, next = {'0x686', '0x682'}
----------------------------------
Block 0x66b
0x66c: v66c(0x5) = CONST 
0x66e: v66e = SLOAD v66c(0x5)
0x66f: v66f = CALLER 
0x670: v670(0x1) = CONST 
0x672: v672(0xa0) = CONST 
0x674: v674(0x2) = CONST 
0x676: v676(0x10000000000000000000000000000000000000000) = EXP v674(0x2) v672(0xa0)
0x677: v677(0xffffffffffffffffffffffffffffffffffffffff) = SUB v676(0x10000000000000000000000000000000000000000) v670(0x1)
0x67a: v67a = AND v677(0xffffffffffffffffffffffffffffffffffffffff) v66f
0x67c: v67c = AND v66e v677(0xffffffffffffffffffffffffffffffffffffffff)
0x67d: v67d = EQ v67c v67a
0x67e: v67e(0x686) = CONST 
0x681: JUMPI v67e(0x686) v67d
----------------------------------

Begin block 0x682
prev = {'0x66b'}, next = {}
----------------------------------
Block 0x682
0x682: v682(0x0) = CONST 
0x685: REVERT v682(0x0) v682(0x0)
----------------------------------

Begin block 0x686
prev = {'0x66b'}, next = {'0x2c20x2af'}
----------------------------------
Block 0x686
0x687: v687(0x5) = CONST 
0x689: v689 = SLOAD v687(0x5)
0x68a: v68a(0x4) = CONST 
0x68c: v68c = SLOAD v68a(0x4)
0x68d: v68d(0x1) = CONST 
0x68f: v68f(0xa0) = CONST 
0x691: v691(0x2) = CONST 
0x693: v693(0x10000000000000000000000000000000000000000) = EXP v691(0x2) v68f(0xa0)
0x694: v694(0xffffffffffffffffffffffffffffffffffffffff) = SUB v693(0x10000000000000000000000000000000000000000) v68d(0x1)
0x697: v697 = AND v694(0xffffffffffffffffffffffffffffffffffffffff) v689
0x699: v699 = AND v694(0xffffffffffffffffffffffffffffffffffffffff) v68c
0x69a: v69a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x6bb: v6bb(0x40) = CONST 
0x6bd: v6bd = MLOAD v6bb(0x40)
0x6be: v6be(0x40) = CONST 
0x6c0: v6c0 = MLOAD v6be(0x40)
0x6c3: v6c3 = SUB v6bd v6c0
0x6c5: LOG3 v6c0 v6c3 v69a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v699 v697
0x6c6: v6c6(0x5) = CONST 
0x6c9: v6c9 = SLOAD v6c6(0x5)
0x6ca: v6ca(0x4) = CONST 
0x6cd: v6cd = SLOAD v6ca(0x4)
0x6ce: v6ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e3: v6e3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6ce(0xffffffffffffffffffffffffffffffffffffffff)
0x6e6: v6e6 = AND v6e3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v6cd
0x6e7: v6e7(0x1) = CONST 
0x6e9: v6e9(0xa0) = CONST 
0x6eb: v6eb(0x2) = CONST 
0x6ed: v6ed(0x10000000000000000000000000000000000000000) = EXP v6eb(0x2) v6e9(0xa0)
0x6ee: v6ee(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6ed(0x10000000000000000000000000000000000000000) v6e7(0x1)
0x6f0: v6f0 = AND v6c9 v6ee(0xffffffffffffffffffffffffffffffffffffffff)
0x6f1: v6f1 = OR v6f0 v6e6
0x6f4: SSTORE v6ca(0x4) v6f1
0x6f5: v6f5 = AND v6e3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v6c9
0x6f7: SSTORE v6c6(0x5) v6f5
0x6f8: JUMP v2bb(0x2c2)
----------------------------------

Begin block 0x6f9
prev = {'0x2cf'}, next = {'0x71f', '0x71b'}
----------------------------------
Block 0x6f9
0x6fa: v6fa(0x1) = CONST 
0x6fc: v6fc(0xa0) = CONST 
0x6fe: v6fe(0x2) = CONST 
0x700: v700(0x10000000000000000000000000000000000000000) = EXP v6fe(0x2) v6fc(0xa0)
0x701: v701(0xffffffffffffffffffffffffffffffffffffffff) = SUB v700(0x10000000000000000000000000000000000000000) v6fa(0x1)
0x703: v703 = AND v2de v701(0xffffffffffffffffffffffffffffffffffffffff)
0x704: v704(0x0) = CONST 
0x708: MSTORE v704(0x0) v703
0x709: v709(0x6) = CONST 
0x70b: v70b(0x20) = CONST 
0x70d: MSTORE v70b(0x20) v709(0x6)
0x70e: v70e(0x40) = CONST 
0x711: v711 = SHA3 v704(0x0) v70e(0x40)
0x712: v712 = SLOAD v711
0x715: v715 = LT v712 v2e1
0x716: v716 = ISZERO v715
0x717: v717(0x71f) = CONST 
0x71a: JUMPI v717(0x71f) v716
----------------------------------

Begin block 0x71b
prev = {'0x6f9'}, next = {}
----------------------------------
Block 0x71b
0x71b: v71b(0x0) = CONST 
0x71e: REVERT v71b(0x0) v71b(0x0)
----------------------------------

Begin block 0x71f
prev = {'0x6f9'}, next = {'0x752', '0x74e'}
----------------------------------
Block 0x71f
0x720: v720(0x1) = CONST 
0x722: v722(0xa0) = CONST 
0x724: v724(0x2) = CONST 
0x726: v726(0x10000000000000000000000000000000000000000) = EXP v724(0x2) v722(0xa0)
0x727: v727(0xffffffffffffffffffffffffffffffffffffffff) = SUB v726(0x10000000000000000000000000000000000000000) v720(0x1)
0x72a: v72a = AND v2de v727(0xffffffffffffffffffffffffffffffffffffffff)
0x72b: v72b(0x0) = CONST 
0x72f: MSTORE v72b(0x0) v72a
0x730: v730(0x7) = CONST 
0x732: v732(0x20) = CONST 
0x736: MSTORE v732(0x20) v730(0x7)
0x737: v737(0x40) = CONST 
0x73b: v73b = SHA3 v72b(0x0) v737(0x40)
0x73c: v73c = CALLER 
0x73f: v73f = AND v727(0xffffffffffffffffffffffffffffffffffffffff) v73c
0x741: MSTORE v72b(0x0) v73f
0x744: MSTORE v732(0x20) v73b
0x745: v745 = SHA3 v72b(0x0) v737(0x40)
0x746: v746 = SLOAD v745
0x748: v748 = GT v2e1 v746
0x749: v749 = ISZERO v748
0x74a: v74a(0x752) = CONST 
0x74d: JUMPI v74a(0x752) v749
----------------------------------

Begin block 0x74e
prev = {'0x71f'}, next = {}
----------------------------------
Block 0x74e
0x74e: v74e(0x0) = CONST 
0x751: REVERT v74e(0x0) v74e(0x0)
----------------------------------

Begin block 0x752
prev = {'0x71f'}, next = {'0x1ac0x2c4'}
----------------------------------
Block 0x752
0x753: v753(0x1) = CONST 
0x755: v755(0xa0) = CONST 
0x757: v757(0x2) = CONST 
0x759: v759(0x10000000000000000000000000000000000000000) = EXP v757(0x2) v755(0xa0)
0x75a: v75a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v759(0x10000000000000000000000000000000000000000) v753(0x1)
0x75d: v75d = AND v2de v75a(0xffffffffffffffffffffffffffffffffffffffff)
0x75e: v75e(0x0) = CONST 
0x762: MSTORE v75e(0x0) v75d
0x763: v763(0x6) = CONST 
0x765: v765(0x20) = CONST 
0x769: MSTORE v765(0x20) v763(0x6)
0x76a: v76a(0x40) = CONST 
0x76e: v76e = SHA3 v75e(0x0) v76a(0x40)
0x770: v770 = SLOAD v76e
0x773: v773 = SUB v770 v2e1
0x775: SSTORE v76e v773
0x776: v776(0x7) = CONST 
0x779: MSTORE v765(0x20) v776(0x7)
0x77c: v77c = SHA3 v75e(0x0) v76a(0x40)
0x77d: v77d = CALLER 
0x780: v780 = AND v75a(0xffffffffffffffffffffffffffffffffffffffff) v77d
0x782: MSTORE v75e(0x0) v780
0x785: MSTORE v765(0x20) v77c
0x788: v788 = SHA3 v75e(0x0) v76a(0x40)
0x78a: v78a = SLOAD v788
0x78d: v78d = SUB v78a v2e1
0x78f: SSTORE v788 v78d
0x790: v790(0x3) = CONST 
0x793: v793 = SLOAD v790(0x3)
0x796: v796 = SUB v793 v2e1
0x798: SSTORE v790(0x3) v796
0x79a: v79a(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x7be: v7be = MLOAD v76a(0x40)
0x7c1: MSTORE v7be v2e1
0x7c2: v7c2(0x20) = CONST 
0x7c4: v7c4 = ADD v7c2(0x20) v7be
0x7c5: v7c5(0x40) = CONST 
0x7c7: v7c7 = MLOAD v7c5(0x40)
0x7ca: v7ca = SUB v7c4 v7c7
0x7cc: LOG2 v7c7 v7ca v79a(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v75d
0x7ce: v7ce(0x1) = CONST 
0x7d4: JUMP v2d0(0x1ac)
----------------------------------

Begin block 0x7d5
prev = {'0x2f1'}, next = {'0x2f90x2e6'}
----------------------------------
Block 0x7d5
0x7d6: v7d6(0x4) = CONST 
0x7d8: v7d8 = SLOAD v7d6(0x4)
0x7d9: v7d9(0x1) = CONST 
0x7db: v7db(0xa0) = CONST 
0x7dd: v7dd(0x2) = CONST 
0x7df: v7df(0x10000000000000000000000000000000000000000) = EXP v7dd(0x2) v7db(0xa0)
0x7e0: v7e0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7df(0x10000000000000000000000000000000000000000) v7d9(0x1)
0x7e1: v7e1 = AND v7e0(0xffffffffffffffffffffffffffffffffffffffff) v7d8
0x7e3: JUMP v2f2(0x2f9)
----------------------------------

Begin block 0x7e4
prev = {}, next = {'0x834', '0x49c0x7e4'}
----------------------------------
function 0x7e4(v7e4arg0)
Block 0x7e4
0x7e5: v7e5(0x1) = CONST 
0x7e8: v7e8 = SLOAD v7e5(0x1)
0x7e9: v7e9(0x1) = CONST 
0x7ec: v7ec(0x1) = CONST 
0x7ee: v7ee = AND v7ec(0x1) v7e8
0x7ef: v7ef = ISZERO v7ee
0x7f0: v7f0(0x100) = CONST 
0x7f3: v7f3 = MUL v7f0(0x100) v7ef
0x7f4: v7f4 = SUB v7f3 v7e9(0x1)
0x7f5: v7f5 = AND v7f4 v7e8
0x7f6: v7f6(0x2) = CONST 
0x7f9: v7f9 = DIV v7f5 v7f6(0x2)
0x7fb: v7fb(0x1f) = CONST 
0x7fd: v7fd = ADD v7fb(0x1f) v7f9
0x7fe: v7fe(0x20) = CONST 
0x802: v802 = DIV v7fd v7fe(0x20)
0x803: v803 = MUL v802 v7fe(0x20)
0x804: v804(0x20) = CONST 
0x806: v806 = ADD v804(0x20) v803
0x807: v807(0x40) = CONST 
0x809: v809 = MLOAD v807(0x40)
0x80c: v80c = ADD v809 v806
0x80d: v80d(0x40) = CONST 
0x80f: MSTORE v80d(0x40) v80c
0x816: MSTORE v809 v7f9
0x817: v817(0x20) = CONST 
0x819: v819 = ADD v817(0x20) v809
0x81c: v81c = SLOAD v7e5(0x1)
0x81d: v81d(0x1) = CONST 
0x820: v820(0x1) = CONST 
0x822: v822 = AND v820(0x1) v81c
0x823: v823 = ISZERO v822
0x824: v824(0x100) = CONST 
0x827: v827 = MUL v824(0x100) v823
0x828: v828 = SUB v827 v81d(0x1)
0x829: v829 = AND v828 v81c
0x82a: v82a(0x2) = CONST 
0x82d: v82d = DIV v829 v82a(0x2)
0x82f: v82f = ISZERO v82d
0x830: v830(0x49c) = CONST 
0x833: JUMPI v830(0x49c) v82f
----------------------------------

Begin block 0x834
prev = {'0x7e4'}, next = {'0x4710x7e4', '0x83c'}
----------------------------------
Block 0x834
0x835: v835(0x1f) = CONST 
0x837: v837 = LT v835(0x1f) v82d
0x838: v838(0x471) = CONST 
0x83b: JUMPI v838(0x471) v837
----------------------------------

Begin block 0x83c
prev = {'0x834'}, next = {'0x49c0x7e4'}
----------------------------------
Block 0x83c
0x83c: v83c(0x100) = CONST 
0x841: v841 = SLOAD v7e5(0x1)
0x842: v842 = DIV v841 v83c(0x100)
0x843: v843 = MUL v842 v83c(0x100)
0x845: MSTORE v819 v843
0x847: v847(0x20) = CONST 
0x849: v849 = ADD v847(0x20) v819
0x84b: v84b(0x49c) = CONST 
0x84e: JUMP v84b(0x49c)
----------------------------------

Begin block 0x84f
prev = {'0x333'}, next = {'0x85c'}
----------------------------------
Block 0x84f
0x850: v850(0x0) = CONST 
0x852: v852(0x85c) = CONST 
0x855: v855 = CALLER 
0x858: v858(0xa11) = CONST 
0x85b: CALLPRIVATE v858(0xa11) v345 v342 v855 v852(0x85c)
----------------------------------

Begin block 0x85c
prev = {'0x84f'}, next = {'0x1ac0x328'}
----------------------------------
Block 0x85c
0x85e: v85e(0x1) = CONST 
0x864: JUMP v334(0x1ac)
----------------------------------

Begin block 0x865
prev = {'0x355'}, next = {'0x872'}
----------------------------------
Block 0x865
0x866: v866(0x0) = CONST 
0x869: v869(0x872) = CONST 
0x86e: v86e(0x4a4) = CONST 
0x871: v871_0 = CALLPRIVATE v86e(0x4a4) v36a v365 v869(0x872)
----------------------------------

Begin block 0x872
prev = {'0x865'}, next = {'0x90c'}
----------------------------------
Block 0x872
0x875: v875(0x1) = CONST 
0x877: v877(0xa0) = CONST 
0x879: v879(0x2) = CONST 
0x87b: v87b(0x10000000000000000000000000000000000000000) = EXP v879(0x2) v877(0xa0)
0x87c: v87c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v87b(0x10000000000000000000000000000000000000000) v875(0x1)
0x87d: v87d = AND v87c(0xffffffffffffffffffffffffffffffffffffffff) v365
0x87e: v87e(0x8f4ffcb1) = CONST 
0x883: v883 = CALLER 
0x885: v885 = ADDRESS 
0x887: v887(0x40) = CONST 
0x889: v889 = MLOAD v887(0x40)
0x88b: v88b(0xffffffff) = CONST 
0x890: v890(0x8f4ffcb1) = AND v88b(0xffffffff) v87e(0x8f4ffcb1)
0x891: v891(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x8af: v8af(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v891(0x100000000000000000000000000000000000000000000000000000000) v890(0x8f4ffcb1)
0x8b1: MSTORE v889 v8af(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x8b2: v8b2(0x4) = CONST 
0x8b4: v8b4 = ADD v8b2(0x4) v889
0x8b7: v8b7(0x1) = CONST 
0x8b9: v8b9(0xa0) = CONST 
0x8bb: v8bb(0x2) = CONST 
0x8bd: v8bd(0x10000000000000000000000000000000000000000) = EXP v8bb(0x2) v8b9(0xa0)
0x8be: v8be(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8bd(0x10000000000000000000000000000000000000000) v8b7(0x1)
0x8bf: v8bf = AND v8be(0xffffffffffffffffffffffffffffffffffffffff) v883
0x8c0: v8c0(0x1) = CONST 
0x8c2: v8c2(0xa0) = CONST 
0x8c4: v8c4(0x2) = CONST 
0x8c6: v8c6(0x10000000000000000000000000000000000000000) = EXP v8c4(0x2) v8c2(0xa0)
0x8c7: v8c7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8c6(0x10000000000000000000000000000000000000000) v8c0(0x1)
0x8c8: v8c8 = AND v8c7(0xffffffffffffffffffffffffffffffffffffffff) v8bf
0x8ca: MSTORE v8b4 v8c8
0x8cb: v8cb(0x20) = CONST 
0x8cd: v8cd = ADD v8cb(0x20) v8b4
0x8d0: MSTORE v8cd v36a
0x8d1: v8d1(0x20) = CONST 
0x8d3: v8d3 = ADD v8d1(0x20) v8cd
0x8d5: v8d5(0x1) = CONST 
0x8d7: v8d7(0xa0) = CONST 
0x8d9: v8d9(0x2) = CONST 
0x8db: v8db(0x10000000000000000000000000000000000000000) = EXP v8d9(0x2) v8d7(0xa0)
0x8dc: v8dc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8db(0x10000000000000000000000000000000000000000) v8d5(0x1)
0x8dd: v8dd = AND v8dc(0xffffffffffffffffffffffffffffffffffffffff) v885
0x8de: v8de(0x1) = CONST 
0x8e0: v8e0(0xa0) = CONST 
0x8e2: v8e2(0x2) = CONST 
0x8e4: v8e4(0x10000000000000000000000000000000000000000) = EXP v8e2(0x2) v8e0(0xa0)
0x8e5: v8e5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8e4(0x10000000000000000000000000000000000000000) v8de(0x1)
0x8e6: v8e6 = AND v8e5(0xffffffffffffffffffffffffffffffffffffffff) v8dd
0x8e8: MSTORE v8d3 v8e6
0x8e9: v8e9(0x20) = CONST 
0x8eb: v8eb = ADD v8e9(0x20) v8d3
0x8ed: v8ed(0x20) = CONST 
0x8ef: v8ef = ADD v8ed(0x20) v8eb
0x8f2: v8f2 = SUB v8ef v8b4
0x8f4: MSTORE v8eb v8f2
0x8f8: v8f8 = MLOAD v389
0x8fa: MSTORE v8ef v8f8
0x8fb: v8fb(0x20) = CONST 
0x8fd: v8fd = ADD v8fb(0x20) v8ef
0x901: v901 = MLOAD v389
0x903: v903(0x20) = CONST 
0x905: v905 = ADD v903(0x20) v389
0x90a: v90a(0x0) = CONST 
----------------------------------

Begin block 0x90c
prev = {'0x915', '0x872'}, next = {'0x924', '0x915'}
----------------------------------
Block 0x90c
0x90c_0x0: v90c_0 = PHI v90a(0x0) v91f
0x90f: v90f = LT v90c_0 v901
0x910: v910 = ISZERO v90f
0x911: v911(0x924) = CONST 
0x914: JUMPI v911(0x924) v910
----------------------------------

Begin block 0x915
prev = {'0x90c'}, next = {'0x90c'}
----------------------------------
Block 0x915
0x915_0x0: v915_0 = PHI v90a(0x0) v91f
0x917: v917 = ADD v905 v915_0
0x918: v918 = MLOAD v917
0x91b: v91b = ADD v915_0 v8fd
0x91c: MSTORE v91b v918
0x91d: v91d(0x20) = CONST 
0x91f: v91f = ADD v91d(0x20) v915_0
0x920: v920(0x90c) = CONST 
0x923: JUMP v920(0x90c)
----------------------------------

Begin block 0x924
prev = {'0x90c'}, next = {'0x951', '0x938'}
----------------------------------
Block 0x924
0x92d: v92d = ADD v901 v8fd
0x92f: v92f(0x1f) = CONST 
0x931: v931 = AND v92f(0x1f) v901
0x933: v933 = ISZERO v931
0x934: v934(0x951) = CONST 
0x937: JUMPI v934(0x951) v933
----------------------------------

Begin block 0x938
prev = {'0x924'}, next = {'0x951'}
----------------------------------
Block 0x938
0x93a: v93a = SUB v92d v931
0x93c: v93c = MLOAD v93a
0x93d: v93d(0x1) = CONST 
0x940: v940(0x20) = CONST 
0x942: v942 = SUB v940(0x20) v931
0x943: v943(0x100) = CONST 
0x946: v946 = EXP v943(0x100) v942
0x947: v947 = SUB v946 v93d(0x1)
0x948: v948 = NOT v947
0x949: v949 = AND v948 v93c
0x94b: MSTORE v93a v949
0x94c: v94c(0x20) = CONST 
0x94e: v94e = ADD v94c(0x20) v93a
----------------------------------

Begin block 0x951
prev = {'0x924', '0x938'}, next = {'0x972', '0x96e'}
----------------------------------
Block 0x951
0x951_0x1: v951_1 = PHI v92d v94e
0x95a: v95a(0x0) = CONST 
0x95c: v95c(0x40) = CONST 
0x95e: v95e = MLOAD v95c(0x40)
0x961: v961 = SUB v951_1 v95e
0x963: v963(0x0) = CONST 
0x967: v967 = EXTCODESIZE v87d
0x968: v968 = ISZERO v967
0x969: v969 = ISZERO v968
0x96a: v96a(0x972) = CONST 
0x96d: JUMPI v96a(0x972) v969
----------------------------------

Begin block 0x96e
prev = {'0x951'}, next = {}
----------------------------------
Block 0x96e
0x96e: v96e(0x0) = CONST 
0x971: REVERT v96e(0x0) v96e(0x0)
----------------------------------

Begin block 0x972
prev = {'0x951'}, next = {'0x97f', '0x97b'}
----------------------------------
Block 0x972
0x973: v973 = GAS 
0x974: v974 = CALL v973 v87d v963(0x0) v95e v961 v95e v95a(0x0)
0x975: v975 = ISZERO v974
0x976: v976 = ISZERO v975
0x977: v977(0x97f) = CONST 
0x97a: JUMPI v977(0x97f) v976
----------------------------------

Begin block 0x97b
prev = {'0x972'}, next = {}
----------------------------------
Block 0x97b
0x97b: v97b(0x0) = CONST 
0x97e: REVERT v97b(0x0) v97b(0x0)
----------------------------------

Begin block 0x97f
prev = {'0x972'}, next = {'0x1ac0x34a'}
----------------------------------
Block 0x97f
0x981: v981(0x1) = CONST 
0x98c: JUMP v356(0x1ac)
----------------------------------

Begin block 0x98d
prev = {'0x3ba'}, next = {'0x2f90x3af'}
----------------------------------
Block 0x98d
0x98e: v98e(0x5) = CONST 
0x990: v990 = SLOAD v98e(0x5)
0x991: v991(0x1) = CONST 
0x993: v993(0xa0) = CONST 
0x995: v995(0x2) = CONST 
0x997: v997(0x10000000000000000000000000000000000000000) = EXP v995(0x2) v993(0xa0)
0x998: v998(0xffffffffffffffffffffffffffffffffffffffff) = SUB v997(0x10000000000000000000000000000000000000000) v991(0x1)
0x999: v999 = AND v998(0xffffffffffffffffffffffffffffffffffffffff) v990
0x99b: JUMP v3bb(0x2f9)
----------------------------------

Begin block 0x99c
prev = {'0x3cd'}, next = {'0x1d30x3c2'}
----------------------------------
Block 0x99c
0x99d: v99d(0x1) = CONST 
0x99f: v99f(0xa0) = CONST 
0x9a1: v9a1(0x2) = CONST 
0x9a3: v9a3(0x10000000000000000000000000000000000000000) = EXP v9a1(0x2) v99f(0xa0)
0x9a4: v9a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9a3(0x10000000000000000000000000000000000000000) v99d(0x1)
0x9a7: v9a7 = AND v9a4(0xffffffffffffffffffffffffffffffffffffffff) v3dd
0x9a8: v9a8(0x0) = CONST 
0x9ac: MSTORE v9a8(0x0) v9a7
0x9ad: v9ad(0x7) = CONST 
0x9af: v9af(0x20) = CONST 
0x9b3: MSTORE v9af(0x20) v9ad(0x7)
0x9b4: v9b4(0x40) = CONST 
0x9b8: v9b8 = SHA3 v9a8(0x0) v9b4(0x40)
0x9bc: v9bc = AND v9a4(0xffffffffffffffffffffffffffffffffffffffff) v3e2
0x9be: MSTORE v9a8(0x0) v9bc
0x9c2: MSTORE v9af(0x20) v9b8
0x9c3: v9c3 = SHA3 v9a8(0x0) v9b4(0x40)
0x9c4: v9c4 = SLOAD v9c3
0x9c6: JUMP v3ce(0x1d3)
----------------------------------

Begin block 0x9c7
prev = {'0x3f2'}, next = {'0x9e2', '0x9de'}
----------------------------------
Block 0x9c7
0x9c8: v9c8(0x4) = CONST 
0x9ca: v9ca = SLOAD v9c8(0x4)
0x9cb: v9cb = CALLER 
0x9cc: v9cc(0x1) = CONST 
0x9ce: v9ce(0xa0) = CONST 
0x9d0: v9d0(0x2) = CONST 
0x9d2: v9d2(0x10000000000000000000000000000000000000000) = EXP v9d0(0x2) v9ce(0xa0)
0x9d3: v9d3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9d2(0x10000000000000000000000000000000000000000) v9cc(0x1)
0x9d6: v9d6 = AND v9d3(0xffffffffffffffffffffffffffffffffffffffff) v9cb
0x9d8: v9d8 = AND v9ca v9d3(0xffffffffffffffffffffffffffffffffffffffff)
0x9d9: v9d9 = EQ v9d8 v9d6
0x9da: v9da(0x9e2) = CONST 
0x9dd: JUMPI v9da(0x9e2) v9d9
----------------------------------

Begin block 0x9de
prev = {'0x9c7'}, next = {}
----------------------------------
Block 0x9de
0x9de: v9de(0x0) = CONST 
0x9e1: REVERT v9de(0x0) v9de(0x0)
----------------------------------

Begin block 0x9e2
prev = {'0x9c7'}, next = {'0x2c20x3e7'}
----------------------------------
Block 0x9e2
0x9e3: v9e3(0x5) = CONST 
0x9e6: v9e6 = SLOAD v9e3(0x5)
0x9e7: v9e7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9fc: v9fc(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v9e7(0xffffffffffffffffffffffffffffffffffffffff)
0x9fd: v9fd = AND v9fc(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v9e6
0x9fe: v9fe(0x1) = CONST 
0xa00: va00(0xa0) = CONST 
0xa02: va02(0x2) = CONST 
0xa04: va04(0x10000000000000000000000000000000000000000) = EXP va02(0x2) va00(0xa0)
0xa05: va05(0xffffffffffffffffffffffffffffffffffffffff) = SUB va04(0x10000000000000000000000000000000000000000) v9fe(0x1)
0xa09: va09 = AND va05(0xffffffffffffffffffffffffffffffffffffffff) v401
0xa0d: va0d = OR va09 v9fd
0xa0f: SSTORE v9e3(0x5) va0d
0xa10: JUMP v3f3(0x2c2)
----------------------------------

Begin block 0xa11
prev = {}, next = {'0xa24', '0xa28'}
----------------------------------
function 0xa11(va11arg0, va11arg1, va11arg2, va11arg3)
Block 0xa11
0xa12: va12(0x0) = CONST 
0xa14: va14(0x1) = CONST 
0xa16: va16(0xa0) = CONST 
0xa18: va18(0x2) = CONST 
0xa1a: va1a(0x10000000000000000000000000000000000000000) = EXP va18(0x2) va16(0xa0)
0xa1b: va1b(0xffffffffffffffffffffffffffffffffffffffff) = SUB va1a(0x10000000000000000000000000000000000000000) va14(0x1)
0xa1d: va1d = AND va11arg1 va1b(0xffffffffffffffffffffffffffffffffffffffff)
0xa1e: va1e = ISZERO va1d
0xa1f: va1f = ISZERO va1e
0xa20: va20(0xa28) = CONST 
0xa23: JUMPI va20(0xa28) va1f
----------------------------------

Begin block 0xa24
prev = {'0xa11'}, next = {}
----------------------------------
Block 0xa24
0xa24: va24(0x0) = CONST 
0xa27: REVERT va24(0x0) va24(0x0)
----------------------------------

Begin block 0xa28
prev = {'0xa11'}, next = {'0xa4a', '0xa4e'}
----------------------------------
Block 0xa28
0xa29: va29(0x1) = CONST 
0xa2b: va2b(0xa0) = CONST 
0xa2d: va2d(0x2) = CONST 
0xa2f: va2f(0x10000000000000000000000000000000000000000) = EXP va2d(0x2) va2b(0xa0)
0xa30: va30(0xffffffffffffffffffffffffffffffffffffffff) = SUB va2f(0x10000000000000000000000000000000000000000) va29(0x1)
0xa32: va32 = AND va11arg2 va30(0xffffffffffffffffffffffffffffffffffffffff)
0xa33: va33(0x0) = CONST 
0xa37: MSTORE va33(0x0) va32
0xa38: va38(0x6) = CONST 
0xa3a: va3a(0x20) = CONST 
0xa3c: MSTORE va3a(0x20) va38(0x6)
0xa3d: va3d(0x40) = CONST 
0xa40: va40 = SHA3 va33(0x0) va3d(0x40)
0xa41: va41 = SLOAD va40
0xa44: va44 = LT va41 va11arg0
0xa45: va45 = ISZERO va44
0xa46: va46(0xa4e) = CONST 
0xa49: JUMPI va46(0xa4e) va45
----------------------------------

Begin block 0xa4a
prev = {'0xa28'}, next = {}
----------------------------------
Block 0xa4a
0xa4a: va4a(0x0) = CONST 
0xa4d: REVERT va4a(0x0) va4a(0x0)
----------------------------------

Begin block 0xa4e
prev = {'0xa28'}, next = {'0xa74', '0xa70'}
----------------------------------
Block 0xa4e
0xa4f: va4f(0x1) = CONST 
0xa51: va51(0xa0) = CONST 
0xa53: va53(0x2) = CONST 
0xa55: va55(0x10000000000000000000000000000000000000000) = EXP va53(0x2) va51(0xa0)
0xa56: va56(0xffffffffffffffffffffffffffffffffffffffff) = SUB va55(0x10000000000000000000000000000000000000000) va4f(0x1)
0xa58: va58 = AND va11arg1 va56(0xffffffffffffffffffffffffffffffffffffffff)
0xa59: va59(0x0) = CONST 
0xa5d: MSTORE va59(0x0) va58
0xa5e: va5e(0x6) = CONST 
0xa60: va60(0x20) = CONST 
0xa62: MSTORE va60(0x20) va5e(0x6)
0xa63: va63(0x40) = CONST 
0xa66: va66 = SHA3 va59(0x0) va63(0x40)
0xa67: va67 = SLOAD va66
0xa6a: va6a = ADD va67 va11arg0
0xa6b: va6b = GT va6a va67
0xa6c: va6c(0xa74) = CONST 
0xa6f: JUMPI va6c(0xa74) va6b
----------------------------------

Begin block 0xa70
prev = {'0xa4e'}, next = {}
----------------------------------
Block 0xa70
0xa70: va70(0x0) = CONST 
0xa73: REVERT va70(0x0) va70(0x0)
----------------------------------

Begin block 0xa74
prev = {'0xa4e'}, next = {'0xb10', '0xb11'}
----------------------------------
Block 0xa74
0xa76: va76(0x1) = CONST 
0xa78: va78(0xa0) = CONST 
0xa7a: va7a(0x2) = CONST 
0xa7c: va7c(0x10000000000000000000000000000000000000000) = EXP va7a(0x2) va78(0xa0)
0xa7d: va7d(0xffffffffffffffffffffffffffffffffffffffff) = SUB va7c(0x10000000000000000000000000000000000000000) va76(0x1)
0xa80: va80 = AND va11arg1 va7d(0xffffffffffffffffffffffffffffffffffffffff)
0xa81: va81(0x0) = CONST 
0xa85: MSTORE va81(0x0) va80
0xa86: va86(0x6) = CONST 
0xa88: va88(0x20) = CONST 
0xa8a: MSTORE va88(0x20) va86(0x6)
0xa8b: va8b(0x40) = CONST 
0xa8f: va8f = SHA3 va81(0x0) va8b(0x40)
0xa91: va91 = SLOAD va8f
0xa94: va94 = AND va11arg2 va7d(0xffffffffffffffffffffffffffffffffffffffff)
0xa97: MSTORE va81(0x0) va94
0xa9a: va9a = SHA3 va81(0x0) va8b(0x40)
0xa9c: va9c = SLOAD va9a
0xa9f: va9f = SUB va9c va11arg0
0xaa2: SSTORE va9a va9f
0xaa6: MSTORE va81(0x0) va80
0xaa8: vaa8 = SLOAD va8f
0xaaa: vaaa = ADD va11arg0 vaa8
0xaad: SSTORE va8f vaaa
0xab1: vab1 = ADD va91 va9c
0xab3: vab3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xad7: vad7 = MLOAD va8b(0x40)
0xada: MSTORE vad7 va11arg0
0xadb: vadb(0x20) = CONST 
0xadd: vadd = ADD vadb(0x20) vad7
0xade: vade(0x40) = CONST 
0xae0: vae0 = MLOAD vade(0x40)
0xae3: vae3 = SUB vadd vae0
0xae5: LOG3 vae0 vae3 vab3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) va94 va80
0xae6: vae6(0x1) = CONST 
0xae8: vae8(0xa0) = CONST 
0xaea: vaea(0x2) = CONST 
0xaec: vaec(0x10000000000000000000000000000000000000000) = EXP vaea(0x2) vae8(0xa0)
0xaed: vaed(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaec(0x10000000000000000000000000000000000000000) vae6(0x1)
0xaf0: vaf0 = AND va11arg1 vaed(0xffffffffffffffffffffffffffffffffffffffff)
0xaf1: vaf1(0x0) = CONST 
0xaf5: MSTORE vaf1(0x0) vaf0
0xaf6: vaf6(0x6) = CONST 
0xaf8: vaf8(0x20) = CONST 
0xafa: MSTORE vaf8(0x20) vaf6(0x6)
0xafb: vafb(0x40) = CONST 
0xaff: vaff = SHA3 vaf1(0x0) vafb(0x40)
0xb00: vb00 = SLOAD vaff
0xb03: vb03 = AND va11arg2 vaed(0xffffffffffffffffffffffffffffffffffffffff)
0xb05: MSTORE vaf1(0x0) vb03
0xb07: vb07 = SHA3 vaf1(0x0) vafb(0x40)
0xb08: vb08 = SLOAD vb07
0xb09: vb09 = ADD vb08 vb00
0xb0b: vb0b = EQ vab1 vb09
0xb0c: vb0c(0xb11) = CONST 
0xb0f: JUMPI vb0c(0xb11) vb0b
----------------------------------

Begin block 0xb10
prev = {'0xa74'}, next = {}
----------------------------------
Block 0xb10
0xb10: THROW 
----------------------------------

Begin block 0xb11
prev = {'0xa74'}, next = {}
----------------------------------
Block 0xb11
0xb16: RETURNPRIVATE va11arg3
----------------------------------

Begin block 0xb62
prev = {'0xf0', '0x0'}, next = {}
----------------------------------
Block 0xb62
0xb63: vb63(0xfb) = CONST 
0xb64: CALLPRIVATE vb63(0xfb)
----------------------------------

Begin block 0xb65
prev = {'0xd'}, next = {}
----------------------------------
Block 0xb65
0xb66: vb66(0x100) = CONST 
0xb67: CALLPRIVATE vb66(0x100)
----------------------------------

Begin block 0xb68
prev = {'0x40'}, next = {}
----------------------------------
Block 0xb68
0xb69: vb69(0x18a) = CONST 
0xb6a: CALLPRIVATE vb69(0x18a)
----------------------------------

Begin block 0xb6b
prev = {'0x4b'}, next = {}
----------------------------------
Block 0xb6b
0xb6c: vb6c(0x1c0) = CONST 
0xb6d: CALLPRIVATE vb6c(0x1c0)
----------------------------------

Begin block 0xb6e
prev = {'0x56'}, next = {}
----------------------------------
Block 0xb6e
0xb6f: vb6f(0x1e5) = CONST 
0xb70: CALLPRIVATE vb6f(0x1e5)
----------------------------------

Begin block 0xb71
prev = {'0x61'}, next = {}
----------------------------------
Block 0xb71
0xb72: vb72(0x20d) = CONST 
0xb73: CALLPRIVATE vb72(0x20d)
----------------------------------

Begin block 0xb74
prev = {'0x6c'}, next = {}
----------------------------------
Block 0xb74
0xb75: vb75(0x22c) = CONST 
0xb76: CALLPRIVATE vb75(0x22c)
----------------------------------

Begin block 0xb77
prev = {'0x77'}, next = {}
----------------------------------
Block 0xb77
0xb78: vb78(0x255) = CONST 
0xb79: CALLPRIVATE vb78(0x255)
----------------------------------

Begin block 0xb7a
prev = {'0x82'}, next = {}
----------------------------------
Block 0xb7a
0xb7b: vb7b(0x26b) = CONST 
0xb7c: CALLPRIVATE vb7b(0x26b)
----------------------------------

Begin block 0xb7d
prev = {'0x8d'}, next = {}
----------------------------------
Block 0xb7d
0xb7e: vb7e(0x290) = CONST 
0xb7f: CALLPRIVATE vb7e(0x290)
----------------------------------

Begin block 0xb80
prev = {'0x98'}, next = {}
----------------------------------
Block 0xb80
0xb81: vb81(0x2af) = CONST 
0xb82: CALLPRIVATE vb81(0x2af)
----------------------------------

Begin block 0xb83
prev = {'0xa3'}, next = {}
----------------------------------
Block 0xb83
0xb84: vb84(0x2c4) = CONST 
0xb85: CALLPRIVATE vb84(0x2c4)
----------------------------------

Begin block 0xb86
prev = {'0xae'}, next = {}
----------------------------------
Block 0xb86
0xb87: vb87(0x2e6) = CONST 
0xb88: CALLPRIVATE vb87(0x2e6)
----------------------------------

Begin block 0xb89
prev = {'0xb9'}, next = {}
----------------------------------
Block 0xb89
0xb8a: vb8a(0x315) = CONST 
0xb8b: CALLPRIVATE vb8a(0x315)
----------------------------------

Begin block 0xb8c
prev = {'0xc4'}, next = {}
----------------------------------
Block 0xb8c
0xb8d: vb8d(0x328) = CONST 
0xb8e: CALLPRIVATE vb8d(0x328)
----------------------------------

Begin block 0xb8f
prev = {'0xcf'}, next = {}
----------------------------------
Block 0xb8f
0xb90: vb90(0x34a) = CONST 
0xb91: CALLPRIVATE vb90(0x34a)
----------------------------------

Begin block 0xb92
prev = {'0xda'}, next = {}
----------------------------------
Block 0xb92
0xb93: vb93(0x3af) = CONST 
0xb94: CALLPRIVATE vb93(0x3af)
----------------------------------

Begin block 0xb95
prev = {'0xe5'}, next = {}
----------------------------------
Block 0xb95
0xb96: vb96(0x3c2) = CONST 
0xb97: CALLPRIVATE vb96(0x3c2)
----------------------------------

Begin block 0xb98
prev = {'0xf0'}, next = {}
----------------------------------
Block 0xb98
0xb99: vb99(0x3e7) = CONST 
0xb9a: CALLPRIVATE vb99(0x3e7)
----------------------------------
