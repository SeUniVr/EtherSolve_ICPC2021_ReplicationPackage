
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1a', '0x698'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0x68a: v68a(0x698) = CONST 
0x68b: JUMPI v68a(0x698) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x2b', '0x69b'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x6247f6f2) = CONST 
0x26: v26 = EQ v21(0x6247f6f2) v1f
0x68c: v68c(0x69b) = CONST 
0x68d: JUMPI v68c(0x69b) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0x36', '0x69e'}
----------------------------------
Block 0x2b
0x2c: v2c(0x67969383) = CONST 
0x31: v31 = EQ v2c(0x67969383) v1f
0x68e: v68e(0x69e) = CONST 
0x68f: JUMPI v68e(0x69e) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x6a1', '0x41'}
----------------------------------
Block 0x36
0x37: v37(0x753d7563) = CONST 
0x3c: v3c = EQ v37(0x753d7563) v1f
0x690: v690(0x6a1) = CONST 
0x691: JUMPI v690(0x6a1) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0x4c', '0x6a4'}
----------------------------------
Block 0x41
0x42: v42(0x9532b6ab) = CONST 
0x47: v47 = EQ v42(0x9532b6ab) v1f
0x692: v692(0x6a4) = CONST 
0x693: JUMPI v692(0x6a4) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x6a7'}
----------------------------------
Block 0x4c
0x4d: v4d(0xabff0110) = CONST 
0x52: v52 = EQ v4d(0xabff0110) v1f
0x694: v694(0x6a7) = CONST 
0x695: JUMPI v694(0x6a7) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x698', '0x6aa'}
----------------------------------
Block 0x57
0x58: v58(0xd627d25e) = CONST 
0x5d: v5d = EQ v58(0xd627d25e) v1f
0x696: v696(0x6aa) = CONST 
0x697: JUMPI v696(0x6aa) v5d
----------------------------------

Begin block 0x62
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x62
0x63: v63(0x0) = CONST 
0x66: REVERT v63(0x0) v63(0x0)
----------------------------------

Begin block 0x67
prev = {}, next = {'0x79', '0x7d'}
----------------------------------
function whitelistToken(address)()
Block 0x67
0x68: v68(0x8d) = CONST 
0x6b: v6b(0x4) = CONST 
0x6e: v6e = CALLDATASIZE 
0x6f: v6f = SUB v6e v6b(0x4)
0x70: v70(0x20) = CONST 
0x73: v73 = LT v6f v70(0x20)
0x74: v74 = ISZERO v73
0x75: v75(0x7d) = CONST 
0x78: JUMPI v75(0x7d) v74
----------------------------------

Begin block 0x79
prev = {'0x67'}, next = {}
----------------------------------
Block 0x79
0x79: v79(0x0) = CONST 
0x7c: REVERT v79(0x0) v79(0x0)
----------------------------------

Begin block 0x7d
prev = {'0x67'}, next = {'0x15f'}
----------------------------------
Block 0x7d
0x7f: v7f = CALLDATALOAD v6b(0x4)
0x80: v80(0x1) = CONST 
0x82: v82(0x1) = CONST 
0x84: v84(0xa0) = CONST 
0x86: v86(0x10000000000000000000000000000000000000000) = SHL v84(0xa0) v82(0x1)
0x87: v87(0xffffffffffffffffffffffffffffffffffffffff) = SUB v86(0x10000000000000000000000000000000000000000) v80(0x1)
0x88: v88 = AND v87(0xffffffffffffffffffffffffffffffffffffffff) v7f
0x89: v89(0x15f) = CONST 
0x8c: JUMP v89(0x15f)
----------------------------------

Begin block 0x8d0x67
prev = {'0x314'}, next = {}
----------------------------------
Block 0x8d0x67
0x8e0x67: STOP 
----------------------------------

Begin block 0x8d0x8f
prev = {'0x3e2'}, next = {}
----------------------------------
Block 0x8d0x8f
0x8e0x8f: STOP 
----------------------------------

Begin block 0x8d0xef
prev = {'0x476'}, next = {}
----------------------------------
Block 0x8d0xef
0x8e0xef: STOP 
----------------------------------

Begin block 0x8d0x139
prev = {'0x634'}, next = {}
----------------------------------
Block 0x8d0x139
0x8e0x139: STOP 
----------------------------------

Begin block 0x8f
prev = {}, next = {'0xa5', '0xa1'}
----------------------------------
function initializeBroker(address)()
Block 0x8f
0x90: v90(0x8d) = CONST 
0x93: v93(0x4) = CONST 
0x96: v96 = CALLDATASIZE 
0x97: v97 = SUB v96 v93(0x4)
0x98: v98(0x20) = CONST 
0x9b: v9b = LT v97 v98(0x20)
0x9c: v9c = ISZERO v9b
0x9d: v9d(0xa5) = CONST 
0xa0: JUMPI v9d(0xa5) v9c
----------------------------------

Begin block 0xa1
prev = {'0x8f'}, next = {}
----------------------------------
Block 0xa1
0xa1: va1(0x0) = CONST 
0xa4: REVERT va1(0x0) va1(0x0)
----------------------------------

Begin block 0xa5
prev = {'0x8f'}, next = {'0x33b'}
----------------------------------
Block 0xa5
0xa7: va7 = CALLDATALOAD v93(0x4)
0xa8: va8(0x1) = CONST 
0xaa: vaa(0x1) = CONST 
0xac: vac(0xa0) = CONST 
0xae: vae(0x10000000000000000000000000000000000000000) = SHL vac(0xa0) vaa(0x1)
0xaf: vaf(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae(0x10000000000000000000000000000000000000000) va8(0x1)
0xb0: vb0 = AND vaf(0xffffffffffffffffffffffffffffffffffffffff) va7
0xb1: vb1(0x33b) = CONST 
0xb4: JUMP vb1(0x33b)
----------------------------------

Begin block 0xb5
prev = {}, next = {'0xc7', '0xcb'}
----------------------------------
function tokenWhitelist(address)()
Block 0xb5
0xb6: vb6(0xdb) = CONST 
0xb9: vb9(0x4) = CONST 
0xbc: vbc = CALLDATASIZE 
0xbd: vbd = SUB vbc vb9(0x4)
0xbe: vbe(0x20) = CONST 
0xc1: vc1 = LT vbd vbe(0x20)
0xc2: vc2 = ISZERO vc1
0xc3: vc3(0xcb) = CONST 
0xc6: JUMPI vc3(0xcb) vc2
----------------------------------

Begin block 0xc7
prev = {'0xb5'}, next = {}
----------------------------------
Block 0xc7
0xc7: vc7(0x0) = CONST 
0xca: REVERT vc7(0x0) vc7(0x0)
----------------------------------

Begin block 0xcb
prev = {'0xb5'}, next = {'0x404'}
----------------------------------
Block 0xcb
0xcd: vcd = CALLDATALOAD vb9(0x4)
0xce: vce(0x1) = CONST 
0xd0: vd0(0x1) = CONST 
0xd2: vd2(0xa0) = CONST 
0xd4: vd4(0x10000000000000000000000000000000000000000) = SHL vd2(0xa0) vd0(0x1)
0xd5: vd5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd4(0x10000000000000000000000000000000000000000) vce(0x1)
0xd6: vd6 = AND vd5(0xffffffffffffffffffffffffffffffffffffffff) vcd
0xd7: vd7(0x404) = CONST 
0xda: JUMP vd7(0x404)
----------------------------------

Begin block 0xdb
prev = {'0x404'}, next = {}
----------------------------------
Block 0xdb
0xdc: vdc(0x40) = CONST 
0xdf: vdf = MLOAD vdc(0x40)
0xe1: ve1 = ISZERO v416
0xe2: ve2 = ISZERO ve1
0xe4: MSTORE vdf ve2
0xe5: ve5 = MLOAD vdc(0x40)
0xe9: ve9 = SUB vdf ve5
0xea: vea(0x20) = CONST 
0xec: vec = ADD vea(0x20) ve9
0xee: RETURN ve5 vec
----------------------------------

Begin block 0xef
prev = {}, next = {'0x101', '0x105'}
----------------------------------
function validateToken(address)()
Block 0xef
0xf0: vf0(0x8d) = CONST 
0xf3: vf3(0x4) = CONST 
0xf6: vf6 = CALLDATASIZE 
0xf7: vf7 = SUB vf6 vf3(0x4)
0xf8: vf8(0x20) = CONST 
0xfb: vfb = LT vf7 vf8(0x20)
0xfc: vfc = ISZERO vfb
0xfd: vfd(0x105) = CONST 
0x100: JUMPI vfd(0x105) vfc
----------------------------------

Begin block 0x101
prev = {'0xef'}, next = {}
----------------------------------
Block 0x101
0x101: v101(0x0) = CONST 
0x104: REVERT v101(0x0) v101(0x0)
----------------------------------

Begin block 0x105
prev = {'0xef'}, next = {'0x419'}
----------------------------------
Block 0x105
0x107: v107 = CALLDATALOAD vf3(0x4)
0x108: v108(0x1) = CONST 
0x10a: v10a(0x1) = CONST 
0x10c: v10c(0xa0) = CONST 
0x10e: v10e(0x10000000000000000000000000000000000000000) = SHL v10c(0xa0) v10a(0x1)
0x10f: v10f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10e(0x10000000000000000000000000000000000000000) v108(0x1)
0x110: v110 = AND v10f(0xffffffffffffffffffffffffffffffffffffffff) v107
0x111: v111(0x419) = CONST 
0x114: JUMP v111(0x419)
----------------------------------

Begin block 0x115
prev = {}, next = {'0x479'}
----------------------------------
function broker()()
Block 0x115
0x116: v116(0x11d) = CONST 
0x119: v119(0x479) = CONST 
0x11c: JUMP v119(0x479)
----------------------------------

Begin block 0x11d
prev = {'0x479'}, next = {}
----------------------------------
Block 0x11d
0x11e: v11e(0x40) = CONST 
0x121: v121 = MLOAD v11e(0x40)
0x122: v122(0x1) = CONST 
0x124: v124(0x1) = CONST 
0x126: v126(0xa0) = CONST 
0x128: v128(0x10000000000000000000000000000000000000000) = SHL v126(0xa0) v124(0x1)
0x129: v129(0xffffffffffffffffffffffffffffffffffffffff) = SUB v128(0x10000000000000000000000000000000000000000) v122(0x1)
0x12c: v12c = AND v485 v129(0xffffffffffffffffffffffffffffffffffffffff)
0x12e: MSTORE v121 v12c
0x12f: v12f = MLOAD v11e(0x40)
0x133: v133 = SUB v121 v12f
0x134: v134(0x20) = CONST 
0x136: v136 = ADD v134(0x20) v133
0x138: RETURN v12f v136
----------------------------------

Begin block 0x139
prev = {}, next = {'0x14f', '0x14b'}
----------------------------------
function unwhitelistToken(address)()
Block 0x139
0x13a: v13a(0x8d) = CONST 
0x13d: v13d(0x4) = CONST 
0x140: v140 = CALLDATASIZE 
0x141: v141 = SUB v140 v13d(0x4)
0x142: v142(0x20) = CONST 
0x145: v145 = LT v141 v142(0x20)
0x146: v146 = ISZERO v145
0x147: v147(0x14f) = CONST 
0x14a: JUMPI v147(0x14f) v146
----------------------------------

Begin block 0x14b
prev = {'0x139'}, next = {}
----------------------------------
Block 0x14b
0x14b: v14b(0x0) = CONST 
0x14e: REVERT v14b(0x0) v14b(0x0)
----------------------------------

Begin block 0x14f
prev = {'0x139'}, next = {'0x488'}
----------------------------------
Block 0x14f
0x151: v151 = CALLDATALOAD v13d(0x4)
0x152: v152(0x1) = CONST 
0x154: v154(0x1) = CONST 
0x156: v156(0xa0) = CONST 
0x158: v158(0x10000000000000000000000000000000000000000) = SHL v156(0xa0) v154(0x1)
0x159: v159(0xffffffffffffffffffffffffffffffffffffffff) = SUB v158(0x10000000000000000000000000000000000000000) v152(0x1)
0x15a: v15a = AND v159(0xffffffffffffffffffffffffffffffffffffffff) v151
0x15b: v15b(0x488) = CONST 
0x15e: JUMP v15b(0x488)
----------------------------------

Begin block 0x15f
prev = {'0x7d'}, next = {'0x1b8', '0x1b4'}
----------------------------------
Block 0x15f
0x160: v160 = CALLER 
0x161: v161(0x1) = CONST 
0x163: v163(0x1) = CONST 
0x165: v165(0xa0) = CONST 
0x167: v167(0x10000000000000000000000000000000000000000) = SHL v165(0xa0) v163(0x1)
0x168: v168(0xffffffffffffffffffffffffffffffffffffffff) = SUB v167(0x10000000000000000000000000000000000000000) v161(0x1)
0x169: v169 = AND v168(0xffffffffffffffffffffffffffffffffffffffff) v160
0x16a: v16a(0x0) = CONST 
0x16e: v16e = SLOAD v16a(0x0)
0x170: v170(0x100) = CONST 
0x173: v173(0x1) = EXP v170(0x100) v16a(0x0)
0x175: v175 = DIV v16e v173(0x1)
0x176: v176(0x1) = CONST 
0x178: v178(0x1) = CONST 
0x17a: v17a(0xa0) = CONST 
0x17c: v17c(0x10000000000000000000000000000000000000000) = SHL v17a(0xa0) v178(0x1)
0x17d: v17d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v17c(0x10000000000000000000000000000000000000000) v176(0x1)
0x17e: v17e = AND v17d(0xffffffffffffffffffffffffffffffffffffffff) v175
0x17f: v17f(0x1) = CONST 
0x181: v181(0x1) = CONST 
0x183: v183(0xa0) = CONST 
0x185: v185(0x10000000000000000000000000000000000000000) = SHL v183(0xa0) v181(0x1)
0x186: v186(0xffffffffffffffffffffffffffffffffffffffff) = SUB v185(0x10000000000000000000000000000000000000000) v17f(0x1)
0x187: v187 = AND v186(0xffffffffffffffffffffffffffffffffffffffff) v17e
0x188: v188(0x8da5cb5b) = CONST 
0x18d: v18d(0x40) = CONST 
0x18f: v18f = MLOAD v18d(0x40)
0x191: v191(0xffffffff) = CONST 
0x196: v196(0x8da5cb5b) = AND v191(0xffffffff) v188(0x8da5cb5b)
0x197: v197(0xe0) = CONST 
0x199: v199(0x8da5cb5b00000000000000000000000000000000000000000000000000000000) = SHL v197(0xe0) v196(0x8da5cb5b)
0x19b: MSTORE v18f v199(0x8da5cb5b00000000000000000000000000000000000000000000000000000000)
0x19c: v19c(0x4) = CONST 
0x19e: v19e = ADD v19c(0x4) v18f
0x19f: v19f(0x20) = CONST 
0x1a1: v1a1(0x40) = CONST 
0x1a3: v1a3 = MLOAD v1a1(0x40)
0x1a6: v1a6 = SUB v19e v1a3
0x1a8: v1a8(0x0) = CONST 
0x1ac: v1ac = EXTCODESIZE v187
0x1ad: v1ad = ISZERO v1ac
0x1af: v1af = ISZERO v1ad
0x1b0: v1b0(0x1b8) = CONST 
0x1b3: JUMPI v1b0(0x1b8) v1af
----------------------------------

Begin block 0x1b4
prev = {'0x15f'}, next = {}
----------------------------------
Block 0x1b4
0x1b4: v1b4(0x0) = CONST 
0x1b7: REVERT v1b4(0x0) v1b4(0x0)
----------------------------------

Begin block 0x1b8
prev = {'0x15f'}, next = {'0x1c3', '0x1cc'}
----------------------------------
Block 0x1b8
0x1ba: v1ba = GAS 
0x1bb: v1bb = CALL v1ba v187 v1a8(0x0) v1a3 v1a6 v1a3 v19f(0x20)
0x1bc: v1bc = ISZERO v1bb
0x1be: v1be = ISZERO v1bc
0x1bf: v1bf(0x1cc) = CONST 
0x1c2: JUMPI v1bf(0x1cc) v1be
----------------------------------

Begin block 0x1c3
prev = {'0x1b8'}, next = {}
----------------------------------
Block 0x1c3
0x1c3: v1c3 = RETURNDATASIZE 
0x1c4: v1c4(0x0) = CONST 
0x1c7: RETURNDATACOPY v1c4(0x0) v1c4(0x0) v1c3
0x1c8: v1c8 = RETURNDATASIZE 
0x1c9: v1c9(0x0) = CONST 
0x1cb: REVERT v1c9(0x0) v1c8
----------------------------------

Begin block 0x1cc
prev = {'0x1b8'}, next = {'0x1de', '0x1e2'}
----------------------------------
Block 0x1cc
0x1d1: v1d1(0x40) = CONST 
0x1d3: v1d3 = MLOAD v1d1(0x40)
0x1d4: v1d4 = RETURNDATASIZE 
0x1d5: v1d5(0x20) = CONST 
0x1d8: v1d8 = LT v1d4 v1d5(0x20)
0x1d9: v1d9 = ISZERO v1d8
0x1da: v1da(0x1e2) = CONST 
0x1dd: JUMPI v1da(0x1e2) v1d9
----------------------------------

Begin block 0x1de
prev = {'0x1cc'}, next = {}
----------------------------------
Block 0x1de
0x1de: v1de(0x0) = CONST 
0x1e1: REVERT v1de(0x0) v1de(0x0)
----------------------------------

Begin block 0x1e2
prev = {'0x1cc'}, next = {'0x1f3', '0x234'}
----------------------------------
Block 0x1e2
0x1e4: v1e4 = MLOAD v1d3
0x1e5: v1e5(0x1) = CONST 
0x1e7: v1e7(0x1) = CONST 
0x1e9: v1e9(0xa0) = CONST 
0x1eb: v1eb(0x10000000000000000000000000000000000000000) = SHL v1e9(0xa0) v1e7(0x1)
0x1ec: v1ec(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1eb(0x10000000000000000000000000000000000000000) v1e5(0x1)
0x1ed: v1ed = AND v1ec(0xffffffffffffffffffffffffffffffffffffffff) v1e4
0x1ee: v1ee = EQ v1ed v169
0x1ef: v1ef(0x234) = CONST 
0x1f2: JUMPI v1ef(0x234) v1ee
----------------------------------

Begin block 0x1f3
prev = {'0x1e2'}, next = {}
----------------------------------
Block 0x1f3
0x1f3: v1f3(0x40) = CONST 
0x1f6: v1f6 = MLOAD v1f3(0x40)
0x1f7: v1f7(0x461bcd) = CONST 
0x1fb: v1fb(0xe5) = CONST 
0x1fd: v1fd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1fb(0xe5) v1f7(0x461bcd)
0x1ff: MSTORE v1f6 v1fd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x200: v200(0x20) = CONST 
0x202: v202(0x4) = CONST 
0x205: v205 = ADD v1f6 v202(0x4)
0x206: MSTORE v205 v200(0x20)
0x207: v207(0x12) = CONST 
0x209: v209(0x24) = CONST 
0x20c: v20c = ADD v1f6 v209(0x24)
0x20d: MSTORE v20c v207(0x12)
0x20e: v20e(0x24b73b30b634b21036b9b39739b2b73232b9) = CONST 
0x221: v221(0x71) = CONST 
0x223: v223(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000) = SHL v221(0x71) v20e(0x24b73b30b634b21036b9b39739b2b73232b9)
0x224: v224(0x44) = CONST 
0x227: v227 = ADD v1f6 v224(0x44)
0x228: MSTORE v227 v223(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000)
0x22a: v22a = MLOAD v1f3(0x40)
0x22e: v22e = SUB v1f6 v22a
0x22f: v22f(0x64) = CONST 
0x231: v231 = ADD v22f(0x64) v22e
0x233: REVERT v22a v231
----------------------------------

Begin block 0x234
prev = {'0x1e2'}, next = {'0x28e', '0x28a'}
----------------------------------
Block 0x234
0x235: v235(0x40) = CONST 
0x238: v238 = MLOAD v235(0x40)
0x239: v239(0x2f471853) = CONST 
0x23e: v23e(0xe1) = CONST 
0x240: v240(0x5e8e30a600000000000000000000000000000000000000000000000000000000) = SHL v23e(0xe1) v239(0x2f471853)
0x242: MSTORE v238 v240(0x5e8e30a600000000000000000000000000000000000000000000000000000000)
0x243: v243(0x1) = CONST 
0x245: v245(0x1) = CONST 
0x247: v247(0xa0) = CONST 
0x249: v249(0x10000000000000000000000000000000000000000) = SHL v247(0xa0) v245(0x1)
0x24a: v24a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v249(0x10000000000000000000000000000000000000000) v243(0x1)
0x24c: v24c = AND v88 v24a(0xffffffffffffffffffffffffffffffffffffffff)
0x24d: v24d(0x4) = CONST 
0x250: v250 = ADD v238 v24d(0x4)
0x251: MSTORE v250 v24c
0x253: v253 = MLOAD v235(0x40)
0x254: v254(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4) = CONST 
0x26a: v26a(0x5e8e30a6) = CONST 
0x270: v270(0x24) = CONST 
0x274: v274 = ADD v238 v270(0x24)
0x276: v276(0x0) = CONST 
0x27d: v27d = SUB v238 v253
0x27e: v27e = ADD v27d v270(0x24)
0x282: v282 = EXTCODESIZE v254(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4)
0x283: v283 = ISZERO v282
0x285: v285 = ISZERO v283
0x286: v286(0x28e) = CONST 
0x289: JUMPI v286(0x28e) v285
----------------------------------

Begin block 0x28a
prev = {'0x234'}, next = {}
----------------------------------
Block 0x28a
0x28a: v28a(0x0) = CONST 
0x28d: REVERT v28a(0x0) v28a(0x0)
----------------------------------

Begin block 0x28e
prev = {'0x234'}, next = {'0x2a2', '0x299'}
----------------------------------
Block 0x28e
0x290: v290 = GAS 
0x291: v291 = DELEGATECALL v290 v254(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4) v253 v27e v253 v276(0x0)
0x292: v292 = ISZERO v291
0x294: v294 = ISZERO v292
0x295: v295(0x2a2) = CONST 
0x298: JUMPI v295(0x2a2) v294
----------------------------------

Begin block 0x299
prev = {'0x28e'}, next = {}
----------------------------------
Block 0x299
0x299: v299 = RETURNDATASIZE 
0x29a: v29a(0x0) = CONST 
0x29d: RETURNDATACOPY v29a(0x0) v29a(0x0) v299
0x29e: v29e = RETURNDATASIZE 
0x29f: v29f(0x0) = CONST 
0x2a1: REVERT v29f(0x0) v29e
----------------------------------

Begin block 0x2a2
prev = {'0x28e'}, next = {'0x314', '0x2c8'}
----------------------------------
Block 0x2a2
0x2a7: v2a7(0x1) = CONST 
0x2a9: v2a9(0x1) = CONST 
0x2ab: v2ab(0xa0) = CONST 
0x2ad: v2ad(0x10000000000000000000000000000000000000000) = SHL v2ab(0xa0) v2a9(0x1)
0x2ae: v2ae(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2ad(0x10000000000000000000000000000000000000000) v2a7(0x1)
0x2b0: v2b0 = AND v88 v2ae(0xffffffffffffffffffffffffffffffffffffffff)
0x2b1: v2b1(0x0) = CONST 
0x2b5: MSTORE v2b1(0x0) v2b0
0x2b6: v2b6(0x1) = CONST 
0x2b8: v2b8(0x20) = CONST 
0x2ba: MSTORE v2b8(0x20) v2b6(0x1)
0x2bb: v2bb(0x40) = CONST 
0x2be: v2be = SHA3 v2b1(0x0) v2bb(0x40)
0x2bf: v2bf = SLOAD v2be
0x2c0: v2c0(0xff) = CONST 
0x2c2: v2c2 = AND v2c0(0xff) v2bf
0x2c3: v2c3 = ISZERO v2c2
0x2c4: v2c4(0x314) = CONST 
0x2c7: JUMPI v2c4(0x314) v2c3
----------------------------------

Begin block 0x2c8
prev = {'0x2a2'}, next = {}
----------------------------------
Block 0x2c8
0x2c8: v2c8(0x40) = CONST 
0x2cb: v2cb = MLOAD v2c8(0x40)
0x2cc: v2cc(0x461bcd) = CONST 
0x2d0: v2d0(0xe5) = CONST 
0x2d2: v2d2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2d0(0xe5) v2cc(0x461bcd)
0x2d4: MSTORE v2cb v2d2(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x2d5: v2d5(0x20) = CONST 
0x2d7: v2d7(0x4) = CONST 
0x2da: v2da = ADD v2cb v2d7(0x4)
0x2db: MSTORE v2da v2d5(0x20)
0x2dc: v2dc(0x19) = CONST 
0x2de: v2de(0x24) = CONST 
0x2e1: v2e1 = ADD v2cb v2de(0x24)
0x2e2: MSTORE v2e1 v2dc(0x19)
0x2e3: v2e3(0x546f6b656e20616c72656164792077686974656c697374656400000000000000) = CONST 
0x304: v304(0x44) = CONST 
0x307: v307 = ADD v2cb v304(0x44)
0x308: MSTORE v307 v2e3(0x546f6b656e20616c72656164792077686974656c697374656400000000000000)
0x30a: v30a = MLOAD v2c8(0x40)
0x30e: v30e = SUB v2cb v30a
0x30f: v30f(0x64) = CONST 
0x311: v311 = ADD v30f(0x64) v30e
0x313: REVERT v30a v311
----------------------------------

Begin block 0x314
prev = {'0x2a2'}, next = {'0x8d0x67'}
----------------------------------
Block 0x314
0x315: v315(0x1) = CONST 
0x317: v317(0x1) = CONST 
0x319: v319(0xa0) = CONST 
0x31b: v31b(0x10000000000000000000000000000000000000000) = SHL v319(0xa0) v317(0x1)
0x31c: v31c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v31b(0x10000000000000000000000000000000000000000) v315(0x1)
0x31d: v31d = AND v31c(0xffffffffffffffffffffffffffffffffffffffff) v88
0x31e: v31e(0x0) = CONST 
0x322: MSTORE v31e(0x0) v31d
0x323: v323(0x1) = CONST 
0x325: v325(0x20) = CONST 
0x329: MSTORE v325(0x20) v323(0x1)
0x32a: v32a(0x40) = CONST 
0x32e: v32e = SHA3 v31e(0x0) v32a(0x40)
0x330: v330 = SLOAD v32e
0x331: v331(0xff) = CONST 
0x333: v333(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v331(0xff)
0x334: v334 = AND v333(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v330
0x337: v337 = OR v323(0x1) v334
0x339: SSTORE v32e v337
0x33a: JUMP v68(0x8d)
----------------------------------

Begin block 0x33b
prev = {'0xa5'}, next = {'0x38f', '0x34a'}
----------------------------------
Block 0x33b
0x33c: v33c(0x1) = CONST 
0x33e: v33e(0x1) = CONST 
0x340: v340(0xa0) = CONST 
0x342: v342(0x10000000000000000000000000000000000000000) = SHL v340(0xa0) v33e(0x1)
0x343: v343(0xffffffffffffffffffffffffffffffffffffffff) = SUB v342(0x10000000000000000000000000000000000000000) v33c(0x1)
0x345: v345 = AND vb0 v343(0xffffffffffffffffffffffffffffffffffffffff)
0x346: v346(0x38f) = CONST 
0x349: JUMPI v346(0x38f) v345
----------------------------------

Begin block 0x34a
prev = {'0x33b'}, next = {}
----------------------------------
Block 0x34a
0x34a: v34a(0x40) = CONST 
0x34d: v34d = MLOAD v34a(0x40)
0x34e: v34e(0x461bcd) = CONST 
0x352: v352(0xe5) = CONST 
0x354: v354(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v352(0xe5) v34e(0x461bcd)
0x356: MSTORE v34d v354(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x357: v357(0x20) = CONST 
0x359: v359(0x4) = CONST 
0x35c: v35c = ADD v34d v359(0x4)
0x35d: MSTORE v35c v357(0x20)
0x35e: v35e(0x16) = CONST 
0x360: v360(0x24) = CONST 
0x363: v363 = ADD v34d v360(0x24)
0x364: MSTORE v363 v35e(0x16)
0x365: v365(0x496e76616c6964205f62726f6b657241646472657373) = CONST 
0x37c: v37c(0x50) = CONST 
0x37e: v37e(0x496e76616c6964205f62726f6b65724164647265737300000000000000000000) = SHL v37c(0x50) v365(0x496e76616c6964205f62726f6b657241646472657373)
0x37f: v37f(0x44) = CONST 
0x382: v382 = ADD v34d v37f(0x44)
0x383: MSTORE v382 v37e(0x496e76616c6964205f62726f6b65724164647265737300000000000000000000)
0x385: v385 = MLOAD v34a(0x40)
0x389: v389 = SUB v34d v385
0x38a: v38a(0x64) = CONST 
0x38c: v38c = ADD v38a(0x64) v389
0x38e: REVERT v385 v38c
----------------------------------

Begin block 0x38f
prev = {'0x33b'}, next = {'0x3e2', '0x3a1'}
----------------------------------
Block 0x38f
0x390: v390(0x0) = CONST 
0x392: v392 = SLOAD v390(0x0)
0x393: v393(0x1) = CONST 
0x395: v395(0x1) = CONST 
0x397: v397(0xa0) = CONST 
0x399: v399(0x10000000000000000000000000000000000000000) = SHL v397(0xa0) v395(0x1)
0x39a: v39a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v399(0x10000000000000000000000000000000000000000) v393(0x1)
0x39b: v39b = AND v39a(0xffffffffffffffffffffffffffffffffffffffff) v392
0x39c: v39c = ISZERO v39b
0x39d: v39d(0x3e2) = CONST 
0x3a0: JUMPI v39d(0x3e2) v39c
----------------------------------

Begin block 0x3a1
prev = {'0x38f'}, next = {}
----------------------------------
Block 0x3a1
0x3a1: v3a1(0x40) = CONST 
0x3a4: v3a4 = MLOAD v3a1(0x40)
0x3a5: v3a5(0x461bcd) = CONST 
0x3a9: v3a9(0xe5) = CONST 
0x3ab: v3ab(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v3a9(0xe5) v3a5(0x461bcd)
0x3ad: MSTORE v3a4 v3ab(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x3ae: v3ae(0x20) = CONST 
0x3b0: v3b0(0x4) = CONST 
0x3b3: v3b3 = ADD v3a4 v3b0(0x4)
0x3b4: MSTORE v3b3 v3ae(0x20)
0x3b5: v3b5(0x12) = CONST 
0x3b7: v3b7(0x24) = CONST 
0x3ba: v3ba = ADD v3a4 v3b7(0x24)
0x3bb: MSTORE v3ba v3b5(0x12)
0x3bc: v3bc(0x109c9bdad95c88185b1c9958591e481cd95d) = CONST 
0x3cf: v3cf(0x72) = CONST 
0x3d1: v3d1(0x42726f6b657220616c7265616479207365740000000000000000000000000000) = SHL v3cf(0x72) v3bc(0x109c9bdad95c88185b1c9958591e481cd95d)
0x3d2: v3d2(0x44) = CONST 
0x3d5: v3d5 = ADD v3a4 v3d2(0x44)
0x3d6: MSTORE v3d5 v3d1(0x42726f6b657220616c7265616479207365740000000000000000000000000000)
0x3d8: v3d8 = MLOAD v3a1(0x40)
0x3dc: v3dc = SUB v3a4 v3d8
0x3dd: v3dd(0x64) = CONST 
0x3df: v3df = ADD v3dd(0x64) v3dc
0x3e1: REVERT v3d8 v3df
----------------------------------

Begin block 0x3e2
prev = {'0x38f'}, next = {'0x8d0x8f'}
----------------------------------
Block 0x3e2
0x3e3: v3e3(0x0) = CONST 
0x3e6: v3e6 = SLOAD v3e3(0x0)
0x3e7: v3e7(0x1) = CONST 
0x3e9: v3e9(0x1) = CONST 
0x3eb: v3eb(0xa0) = CONST 
0x3ed: v3ed(0x10000000000000000000000000000000000000000) = SHL v3eb(0xa0) v3e9(0x1)
0x3ee: v3ee(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ed(0x10000000000000000000000000000000000000000) v3e7(0x1)
0x3ef: v3ef(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v3ee(0xffffffffffffffffffffffffffffffffffffffff)
0x3f0: v3f0 = AND v3ef(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v3e6
0x3f1: v3f1(0x1) = CONST 
0x3f3: v3f3(0x1) = CONST 
0x3f5: v3f5(0xa0) = CONST 
0x3f7: v3f7(0x10000000000000000000000000000000000000000) = SHL v3f5(0xa0) v3f3(0x1)
0x3f8: v3f8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f7(0x10000000000000000000000000000000000000000) v3f1(0x1)
0x3fc: v3fc = AND v3f8(0xffffffffffffffffffffffffffffffffffffffff) vb0
0x400: v400 = OR v3fc v3f0
0x402: SSTORE v3e3(0x0) v400
0x403: JUMP v90(0x8d)
----------------------------------

Begin block 0x404
prev = {'0xcb'}, next = {'0xdb'}
----------------------------------
Block 0x404
0x405: v405(0x1) = CONST 
0x407: v407(0x20) = CONST 
0x409: MSTORE v407(0x20) v405(0x1)
0x40a: v40a(0x0) = CONST 
0x40e: MSTORE v40a(0x0) vd6
0x40f: v40f(0x40) = CONST 
0x412: v412 = SHA3 v40a(0x0) v40f(0x40)
0x413: v413 = SLOAD v412
0x414: v414(0xff) = CONST 
0x416: v416 = AND v414(0xff) v413
0x418: JUMP vb6(0xdb)
----------------------------------

Begin block 0x419
prev = {'0x105'}, next = {'0x43a', '0x476'}
----------------------------------
Block 0x419
0x41a: v41a(0x1) = CONST 
0x41c: v41c(0x1) = CONST 
0x41e: v41e(0xa0) = CONST 
0x420: v420(0x10000000000000000000000000000000000000000) = SHL v41e(0xa0) v41c(0x1)
0x421: v421(0xffffffffffffffffffffffffffffffffffffffff) = SUB v420(0x10000000000000000000000000000000000000000) v41a(0x1)
0x423: v423 = AND v110 v421(0xffffffffffffffffffffffffffffffffffffffff)
0x424: v424(0x0) = CONST 
0x428: MSTORE v424(0x0) v423
0x429: v429(0x1) = CONST 
0x42b: v42b(0x20) = CONST 
0x42d: MSTORE v42b(0x20) v429(0x1)
0x42e: v42e(0x40) = CONST 
0x431: v431 = SHA3 v424(0x0) v42e(0x40)
0x432: v432 = SLOAD v431
0x433: v433(0xff) = CONST 
0x435: v435 = AND v433(0xff) v432
0x436: v436(0x476) = CONST 
0x439: JUMPI v436(0x476) v435
----------------------------------

Begin block 0x43a
prev = {'0x419'}, next = {}
----------------------------------
Block 0x43a
0x43a: v43a(0x40) = CONST 
0x43d: v43d = MLOAD v43a(0x40)
0x43e: v43e(0x461bcd) = CONST 
0x442: v442(0xe5) = CONST 
0x444: v444(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v442(0xe5) v43e(0x461bcd)
0x446: MSTORE v43d v444(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x447: v447(0x20) = CONST 
0x449: v449(0x4) = CONST 
0x44c: v44c = ADD v43d v449(0x4)
0x44d: MSTORE v44c v447(0x20)
0x44e: v44e(0xd) = CONST 
0x450: v450(0x24) = CONST 
0x453: v453 = ADD v43d v450(0x24)
0x454: MSTORE v453 v44e(0xd)
0x455: v455(0x24b73b30b634b2103a37b5b2b7) = CONST 
0x463: v463(0x99) = CONST 
0x465: v465(0x496e76616c696420746f6b656e00000000000000000000000000000000000000) = SHL v463(0x99) v455(0x24b73b30b634b2103a37b5b2b7)
0x466: v466(0x44) = CONST 
0x469: v469 = ADD v43d v466(0x44)
0x46a: MSTORE v469 v465(0x496e76616c696420746f6b656e00000000000000000000000000000000000000)
0x46c: v46c = MLOAD v43a(0x40)
0x470: v470 = SUB v43d v46c
0x471: v471(0x64) = CONST 
0x473: v473 = ADD v471(0x64) v470
0x475: REVERT v46c v473
----------------------------------

Begin block 0x476
prev = {'0x419'}, next = {'0x8d0xef'}
----------------------------------
Block 0x476
0x478: JUMP vf0(0x8d)
----------------------------------

Begin block 0x479
prev = {'0x115'}, next = {'0x11d'}
----------------------------------
Block 0x479
0x47a: v47a(0x0) = CONST 
0x47c: v47c = SLOAD v47a(0x0)
0x47d: v47d(0x1) = CONST 
0x47f: v47f(0x1) = CONST 
0x481: v481(0xa0) = CONST 
0x483: v483(0x10000000000000000000000000000000000000000) = SHL v481(0xa0) v47f(0x1)
0x484: v484(0xffffffffffffffffffffffffffffffffffffffff) = SUB v483(0x10000000000000000000000000000000000000000) v47d(0x1)
0x485: v485 = AND v484(0xffffffffffffffffffffffffffffffffffffffff) v47c
0x487: JUMP v116(0x11d)
----------------------------------

Begin block 0x488
prev = {'0x14f'}, next = {'0x4dd', '0x4e1'}
----------------------------------
Block 0x488
0x489: v489 = CALLER 
0x48a: v48a(0x1) = CONST 
0x48c: v48c(0x1) = CONST 
0x48e: v48e(0xa0) = CONST 
0x490: v490(0x10000000000000000000000000000000000000000) = SHL v48e(0xa0) v48c(0x1)
0x491: v491(0xffffffffffffffffffffffffffffffffffffffff) = SUB v490(0x10000000000000000000000000000000000000000) v48a(0x1)
0x492: v492 = AND v491(0xffffffffffffffffffffffffffffffffffffffff) v489
0x493: v493(0x0) = CONST 
0x497: v497 = SLOAD v493(0x0)
0x499: v499(0x100) = CONST 
0x49c: v49c(0x1) = EXP v499(0x100) v493(0x0)
0x49e: v49e = DIV v497 v49c(0x1)
0x49f: v49f(0x1) = CONST 
0x4a1: v4a1(0x1) = CONST 
0x4a3: v4a3(0xa0) = CONST 
0x4a5: v4a5(0x10000000000000000000000000000000000000000) = SHL v4a3(0xa0) v4a1(0x1)
0x4a6: v4a6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4a5(0x10000000000000000000000000000000000000000) v49f(0x1)
0x4a7: v4a7 = AND v4a6(0xffffffffffffffffffffffffffffffffffffffff) v49e
0x4a8: v4a8(0x1) = CONST 
0x4aa: v4aa(0x1) = CONST 
0x4ac: v4ac(0xa0) = CONST 
0x4ae: v4ae(0x10000000000000000000000000000000000000000) = SHL v4ac(0xa0) v4aa(0x1)
0x4af: v4af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ae(0x10000000000000000000000000000000000000000) v4a8(0x1)
0x4b0: v4b0 = AND v4af(0xffffffffffffffffffffffffffffffffffffffff) v4a7
0x4b1: v4b1(0x8da5cb5b) = CONST 
0x4b6: v4b6(0x40) = CONST 
0x4b8: v4b8 = MLOAD v4b6(0x40)
0x4ba: v4ba(0xffffffff) = CONST 
0x4bf: v4bf(0x8da5cb5b) = AND v4ba(0xffffffff) v4b1(0x8da5cb5b)
0x4c0: v4c0(0xe0) = CONST 
0x4c2: v4c2(0x8da5cb5b00000000000000000000000000000000000000000000000000000000) = SHL v4c0(0xe0) v4bf(0x8da5cb5b)
0x4c4: MSTORE v4b8 v4c2(0x8da5cb5b00000000000000000000000000000000000000000000000000000000)
0x4c5: v4c5(0x4) = CONST 
0x4c7: v4c7 = ADD v4c5(0x4) v4b8
0x4c8: v4c8(0x20) = CONST 
0x4ca: v4ca(0x40) = CONST 
0x4cc: v4cc = MLOAD v4ca(0x40)
0x4cf: v4cf = SUB v4c7 v4cc
0x4d1: v4d1(0x0) = CONST 
0x4d5: v4d5 = EXTCODESIZE v4b0
0x4d6: v4d6 = ISZERO v4d5
0x4d8: v4d8 = ISZERO v4d6
0x4d9: v4d9(0x4e1) = CONST 
0x4dc: JUMPI v4d9(0x4e1) v4d8
----------------------------------

Begin block 0x4dd
prev = {'0x488'}, next = {}
----------------------------------
Block 0x4dd
0x4dd: v4dd(0x0) = CONST 
0x4e0: REVERT v4dd(0x0) v4dd(0x0)
----------------------------------

Begin block 0x4e1
prev = {'0x488'}, next = {'0x4f5', '0x4ec'}
----------------------------------
Block 0x4e1
0x4e3: v4e3 = GAS 
0x4e4: v4e4 = CALL v4e3 v4b0 v4d1(0x0) v4cc v4cf v4cc v4c8(0x20)
0x4e5: v4e5 = ISZERO v4e4
0x4e7: v4e7 = ISZERO v4e5
0x4e8: v4e8(0x4f5) = CONST 
0x4eb: JUMPI v4e8(0x4f5) v4e7
----------------------------------

Begin block 0x4ec
prev = {'0x4e1'}, next = {}
----------------------------------
Block 0x4ec
0x4ec: v4ec = RETURNDATASIZE 
0x4ed: v4ed(0x0) = CONST 
0x4f0: RETURNDATACOPY v4ed(0x0) v4ed(0x0) v4ec
0x4f1: v4f1 = RETURNDATASIZE 
0x4f2: v4f2(0x0) = CONST 
0x4f4: REVERT v4f2(0x0) v4f1
----------------------------------

Begin block 0x4f5
prev = {'0x4e1'}, next = {'0x507', '0x50b'}
----------------------------------
Block 0x4f5
0x4fa: v4fa(0x40) = CONST 
0x4fc: v4fc = MLOAD v4fa(0x40)
0x4fd: v4fd = RETURNDATASIZE 
0x4fe: v4fe(0x20) = CONST 
0x501: v501 = LT v4fd v4fe(0x20)
0x502: v502 = ISZERO v501
0x503: v503(0x50b) = CONST 
0x506: JUMPI v503(0x50b) v502
----------------------------------

Begin block 0x507
prev = {'0x4f5'}, next = {}
----------------------------------
Block 0x507
0x507: v507(0x0) = CONST 
0x50a: REVERT v507(0x0) v507(0x0)
----------------------------------

Begin block 0x50b
prev = {'0x4f5'}, next = {'0x51c', '0x55d'}
----------------------------------
Block 0x50b
0x50d: v50d = MLOAD v4fc
0x50e: v50e(0x1) = CONST 
0x510: v510(0x1) = CONST 
0x512: v512(0xa0) = CONST 
0x514: v514(0x10000000000000000000000000000000000000000) = SHL v512(0xa0) v510(0x1)
0x515: v515(0xffffffffffffffffffffffffffffffffffffffff) = SUB v514(0x10000000000000000000000000000000000000000) v50e(0x1)
0x516: v516 = AND v515(0xffffffffffffffffffffffffffffffffffffffff) v50d
0x517: v517 = EQ v516 v492
0x518: v518(0x55d) = CONST 
0x51b: JUMPI v518(0x55d) v517
----------------------------------

Begin block 0x51c
prev = {'0x50b'}, next = {}
----------------------------------
Block 0x51c
0x51c: v51c(0x40) = CONST 
0x51f: v51f = MLOAD v51c(0x40)
0x520: v520(0x461bcd) = CONST 
0x524: v524(0xe5) = CONST 
0x526: v526(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v524(0xe5) v520(0x461bcd)
0x528: MSTORE v51f v526(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x529: v529(0x20) = CONST 
0x52b: v52b(0x4) = CONST 
0x52e: v52e = ADD v51f v52b(0x4)
0x52f: MSTORE v52e v529(0x20)
0x530: v530(0x12) = CONST 
0x532: v532(0x24) = CONST 
0x535: v535 = ADD v51f v532(0x24)
0x536: MSTORE v535 v530(0x12)
0x537: v537(0x24b73b30b634b21036b9b39739b2b73232b9) = CONST 
0x54a: v54a(0x71) = CONST 
0x54c: v54c(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000) = SHL v54a(0x71) v537(0x24b73b30b634b21036b9b39739b2b73232b9)
0x54d: v54d(0x44) = CONST 
0x550: v550 = ADD v51f v54d(0x44)
0x551: MSTORE v550 v54c(0x496e76616c6964206d73672e73656e6465720000000000000000000000000000)
0x553: v553 = MLOAD v51c(0x40)
0x557: v557 = SUB v51f v553
0x558: v558(0x64) = CONST 
0x55a: v55a = ADD v558(0x64) v557
0x55c: REVERT v553 v55a
----------------------------------

Begin block 0x55d
prev = {'0x50b'}, next = {'0x5b7', '0x5b3'}
----------------------------------
Block 0x55d
0x55e: v55e(0x40) = CONST 
0x561: v561 = MLOAD v55e(0x40)
0x562: v562(0x2f471853) = CONST 
0x567: v567(0xe1) = CONST 
0x569: v569(0x5e8e30a600000000000000000000000000000000000000000000000000000000) = SHL v567(0xe1) v562(0x2f471853)
0x56b: MSTORE v561 v569(0x5e8e30a600000000000000000000000000000000000000000000000000000000)
0x56c: v56c(0x1) = CONST 
0x56e: v56e(0x1) = CONST 
0x570: v570(0xa0) = CONST 
0x572: v572(0x10000000000000000000000000000000000000000) = SHL v570(0xa0) v56e(0x1)
0x573: v573(0xffffffffffffffffffffffffffffffffffffffff) = SUB v572(0x10000000000000000000000000000000000000000) v56c(0x1)
0x575: v575 = AND v15a v573(0xffffffffffffffffffffffffffffffffffffffff)
0x576: v576(0x4) = CONST 
0x579: v579 = ADD v561 v576(0x4)
0x57a: MSTORE v579 v575
0x57c: v57c = MLOAD v55e(0x40)
0x57d: v57d(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4) = CONST 
0x593: v593(0x5e8e30a6) = CONST 
0x599: v599(0x24) = CONST 
0x59d: v59d = ADD v561 v599(0x24)
0x59f: v59f(0x0) = CONST 
0x5a6: v5a6 = SUB v561 v57c
0x5a7: v5a7 = ADD v5a6 v599(0x24)
0x5ab: v5ab = EXTCODESIZE v57d(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4)
0x5ac: v5ac = ISZERO v5ab
0x5ae: v5ae = ISZERO v5ac
0x5af: v5af(0x5b7) = CONST 
0x5b2: JUMPI v5af(0x5b7) v5ae
----------------------------------

Begin block 0x5b3
prev = {'0x55d'}, next = {}
----------------------------------
Block 0x5b3
0x5b3: v5b3(0x0) = CONST 
0x5b6: REVERT v5b3(0x0) v5b3(0x0)
----------------------------------

Begin block 0x5b7
prev = {'0x55d'}, next = {'0x5c2', '0x5cb'}
----------------------------------
Block 0x5b7
0x5b9: v5b9 = GAS 
0x5ba: v5ba = DELEGATECALL v5b9 v57d(0x93d4c213c6d6d9978fb1cb5052f8bae693fdb9a4) v57c v5a7 v57c v59f(0x0)
0x5bb: v5bb = ISZERO v5ba
0x5bd: v5bd = ISZERO v5bb
0x5be: v5be(0x5cb) = CONST 
0x5c1: JUMPI v5be(0x5cb) v5bd
----------------------------------

Begin block 0x5c2
prev = {'0x5b7'}, next = {}
----------------------------------
Block 0x5c2
0x5c2: v5c2 = RETURNDATASIZE 
0x5c3: v5c3(0x0) = CONST 
0x5c6: RETURNDATACOPY v5c3(0x0) v5c3(0x0) v5c2
0x5c7: v5c7 = RETURNDATASIZE 
0x5c8: v5c8(0x0) = CONST 
0x5ca: REVERT v5c8(0x0) v5c7
----------------------------------

Begin block 0x5cb
prev = {'0x5b7'}, next = {'0x634', '0x5f0'}
----------------------------------
Block 0x5cb
0x5d0: v5d0(0x1) = CONST 
0x5d2: v5d2(0x1) = CONST 
0x5d4: v5d4(0xa0) = CONST 
0x5d6: v5d6(0x10000000000000000000000000000000000000000) = SHL v5d4(0xa0) v5d2(0x1)
0x5d7: v5d7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d6(0x10000000000000000000000000000000000000000) v5d0(0x1)
0x5d9: v5d9 = AND v15a v5d7(0xffffffffffffffffffffffffffffffffffffffff)
0x5da: v5da(0x0) = CONST 
0x5de: MSTORE v5da(0x0) v5d9
0x5df: v5df(0x1) = CONST 
0x5e1: v5e1(0x20) = CONST 
0x5e3: MSTORE v5e1(0x20) v5df(0x1)
0x5e4: v5e4(0x40) = CONST 
0x5e7: v5e7 = SHA3 v5da(0x0) v5e4(0x40)
0x5e8: v5e8 = SLOAD v5e7
0x5e9: v5e9(0xff) = CONST 
0x5eb: v5eb = AND v5e9(0xff) v5e8
0x5ec: v5ec(0x634) = CONST 
0x5ef: JUMPI v5ec(0x634) v5eb
----------------------------------

Begin block 0x5f0
prev = {'0x5cb'}, next = {}
----------------------------------
Block 0x5f0
0x5f0: v5f0(0x40) = CONST 
0x5f3: v5f3 = MLOAD v5f0(0x40)
0x5f4: v5f4(0x461bcd) = CONST 
0x5f8: v5f8(0xe5) = CONST 
0x5fa: v5fa(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v5f8(0xe5) v5f4(0x461bcd)
0x5fc: MSTORE v5f3 v5fa(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x5fd: v5fd(0x20) = CONST 
0x5ff: v5ff(0x4) = CONST 
0x602: v602 = ADD v5f3 v5ff(0x4)
0x603: MSTORE v602 v5fd(0x20)
0x604: v604(0x15) = CONST 
0x606: v606(0x24) = CONST 
0x609: v609 = ADD v5f3 v606(0x24)
0x60a: MSTORE v609 v604(0x15)
0x60b: v60b(0x151bdad95b881b9bdd081dda1a5d195b1a5cdd1959) = CONST 
0x621: v621(0x5a) = CONST 
0x623: v623(0x546f6b656e206e6f742077686974656c69737465640000000000000000000000) = SHL v621(0x5a) v60b(0x151bdad95b881b9bdd081dda1a5d195b1a5cdd1959)
0x624: v624(0x44) = CONST 
0x627: v627 = ADD v5f3 v624(0x44)
0x628: MSTORE v627 v623(0x546f6b656e206e6f742077686974656c69737465640000000000000000000000)
0x62a: v62a = MLOAD v5f0(0x40)
0x62e: v62e = SUB v5f3 v62a
0x62f: v62f(0x64) = CONST 
0x631: v631 = ADD v62f(0x64) v62e
0x633: REVERT v62a v631
----------------------------------

Begin block 0x634
prev = {'0x5cb'}, next = {'0x8d0x139'}
----------------------------------
Block 0x634
0x635: v635(0x1) = CONST 
0x637: v637(0x1) = CONST 
0x639: v639(0xa0) = CONST 
0x63b: v63b(0x10000000000000000000000000000000000000000) = SHL v639(0xa0) v637(0x1)
0x63c: v63c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v63b(0x10000000000000000000000000000000000000000) v635(0x1)
0x63d: v63d = AND v63c(0xffffffffffffffffffffffffffffffffffffffff) v15a
0x63e: v63e(0x0) = CONST 
0x642: MSTORE v63e(0x0) v63d
0x643: v643(0x1) = CONST 
0x645: v645(0x20) = CONST 
0x647: MSTORE v645(0x20) v643(0x1)
0x648: v648(0x40) = CONST 
0x64b: v64b = SHA3 v63e(0x0) v648(0x40)
0x64d: v64d = SLOAD v64b
0x64e: v64e(0xff) = CONST 
0x650: v650(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v64e(0xff)
0x651: v651 = AND v650(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v64d
0x653: SSTORE v64b v651
0x654: JUMP v13a(0x8d)
----------------------------------

Begin block 0x698
prev = {'0x10', '0x57'}, next = {}
----------------------------------
Block 0x698
0x699: v699(0x62) = CONST 
0x69a: CALLPRIVATE v699(0x62)
----------------------------------

Begin block 0x69b
prev = {'0x1a'}, next = {}
----------------------------------
Block 0x69b
0x69c: v69c(0x67) = CONST 
0x69d: CALLPRIVATE v69c(0x67)
----------------------------------

Begin block 0x69e
prev = {'0x2b'}, next = {}
----------------------------------
Block 0x69e
0x69f: v69f(0x8f) = CONST 
0x6a0: CALLPRIVATE v69f(0x8f)
----------------------------------

Begin block 0x6a1
prev = {'0x36'}, next = {}
----------------------------------
Block 0x6a1
0x6a2: v6a2(0xb5) = CONST 
0x6a3: CALLPRIVATE v6a2(0xb5)
----------------------------------

Begin block 0x6a4
prev = {'0x41'}, next = {}
----------------------------------
Block 0x6a4
0x6a5: v6a5(0xef) = CONST 
0x6a6: CALLPRIVATE v6a5(0xef)
----------------------------------

Begin block 0x6a7
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x6a7
0x6a8: v6a8(0x115) = CONST 
0x6a9: CALLPRIVATE v6a8(0x115)
----------------------------------

Begin block 0x6aa
prev = {'0x57'}, next = {}
----------------------------------
Block 0x6aa
0x6ab: v6ab(0x139) = CONST 
0x6ac: CALLPRIVATE v6ab(0x139)
----------------------------------
