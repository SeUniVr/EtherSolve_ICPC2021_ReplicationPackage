
Begin block 0x0
prev = {}, next = {'0xd', '0x10d1'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x10b7: v10b7(0x10d1) = CONST 
0x10b8: JUMPI v10b7(0x10d1) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x41', '0x10d4'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x10b9: v10b9(0x10d4) = CONST 
0x10ba: JUMPI v10b9(0x10d4) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x10d7', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x10bb: v10bb(0x10d7) = CONST 
0x10bc: JUMPI v10bb(0x10d7) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x10da'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x10bd: v10bd(0x10da) = CONST 
0x10be: JUMPI v10bd(0x10da) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x10dd', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0x10bf: v10bf(0x10dd) = CONST 
0x10c0: JUMPI v10bf(0x10dd) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0x10e0'}
----------------------------------
Block 0x62
0x63: v63(0x313ce567) = CONST 
0x68: v68 = EQ v63(0x313ce567) v35
0x10c1: v10c1(0x10e0) = CONST 
0x10c2: JUMPI v10c1(0x10e0) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x10e3', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x42966c68) = CONST 
0x73: v73 = EQ v6e(0x42966c68) v35
0x10c3: v10c3(0x10e3) = CONST 
0x10c4: JUMPI v10c3(0x10e3) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x83', '0x10e6'}
----------------------------------
Block 0x78
0x79: v79(0x70a08231) = CONST 
0x7e: v7e = EQ v79(0x70a08231) v35
0x10c5: v10c5(0x10e6) = CONST 
0x10c6: JUMPI v10c5(0x10e6) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x10e9', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x79cc6790) = CONST 
0x89: v89 = EQ v84(0x79cc6790) v35
0x10c7: v10c7(0x10e9) = CONST 
0x10c8: JUMPI v10c7(0x10e9) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x99', '0x10ec'}
----------------------------------
Block 0x8e
0x8f: v8f(0x95d89b41) = CONST 
0x94: v94 = EQ v8f(0x95d89b41) v35
0x10c9: v10c9(0x10ec) = CONST 
0x10ca: JUMPI v10c9(0x10ec) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xa4', '0x10ef'}
----------------------------------
Block 0x99
0x9a: v9a(0xa9059cbb) = CONST 
0x9f: v9f = EQ v9a(0xa9059cbb) v35
0x10cb: v10cb(0x10ef) = CONST 
0x10cc: JUMPI v10cb(0x10ef) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0x10f2', '0xaf'}
----------------------------------
Block 0xa4
0xa5: va5(0xcae9ca51) = CONST 
0xaa: vaa = EQ va5(0xcae9ca51) v35
0x10cd: v10cd(0x10f2) = CONST 
0x10ce: JUMPI v10cd(0x10f2) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0x10f5', '0x10d1'}
----------------------------------
Block 0xaf
0xb0: vb0(0xdd62ed3e) = CONST 
0xb5: vb5 = EQ vb0(0xdd62ed3e) v35
0x10cf: v10cf(0x10f5) = CONST 
0x10d0: JUMPI v10cf(0x10f5) vb5
----------------------------------

Begin block 0xba
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xba
0xbb: vbb(0x0) = CONST 
0xbe: REVERT vbb(0x0) vbb(0x0)
----------------------------------

Begin block 0xbf
prev = {}, next = {'0xc7', '0xcb'}
----------------------------------
function name()()
Block 0xbf
0xc0: vc0 = CALLVALUE 
0xc2: vc2 = ISZERO vc0
0xc3: vc3(0xcb) = CONST 
0xc6: JUMPI vc3(0xcb) vc2
----------------------------------

Begin block 0xc7
prev = {'0xbf'}, next = {}
----------------------------------
Block 0xc7
0xc7: vc7(0x0) = CONST 
0xca: REVERT vc7(0x0) vc7(0x0)
----------------------------------

Begin block 0xcb
prev = {'0xbf'}, next = {'0x595'}
----------------------------------
Block 0xcb
0xcd: vcd(0xd4) = CONST 
0xd0: vd0(0x595) = CONST 
0xd3: JUMP vd0(0x595)
----------------------------------

Begin block 0xd4
prev = {'0x62b'}, next = {'0xf9'}
----------------------------------
Block 0xd4
0xd5: vd5(0x40) = CONST 
0xd7: vd7 = MLOAD vd5(0x40)
0xda: vda(0x20) = CONST 
0xdc: vdc = ADD vda(0x20) vd7
0xdf: vdf = SUB vdc vd7
0xe1: MSTORE vd7 vdf
0xe5: ve5 = MLOAD v5ba
0xe7: MSTORE vdc ve5
0xe8: ve8(0x20) = CONST 
0xea: vea = ADD ve8(0x20) vdc
0xee: vee = MLOAD v5ba
0xf0: vf0(0x20) = CONST 
0xf2: vf2 = ADD vf0(0x20) v5ba
0xf7: vf7(0x0) = CONST 
----------------------------------

Begin block 0xf9
prev = {'0x102', '0xd4'}, next = {'0x102', '0x114'}
----------------------------------
Block 0xf9
0xf9_0x0: vf9_0 = PHI vf7(0x0) v10d
0xfc: vfc = LT vf9_0 vee
0xfd: vfd = ISZERO vfc
0xfe: vfe(0x114) = CONST 
0x101: JUMPI vfe(0x114) vfd
----------------------------------

Begin block 0x102
prev = {'0xf9'}, next = {'0xf9'}
----------------------------------
Block 0x102
0x102_0x0: v102_0 = PHI vf7(0x0) v10d
0x104: v104 = ADD vf2 v102_0
0x105: v105 = MLOAD v104
0x108: v108 = ADD vea v102_0
0x109: MSTORE v108 v105
0x10a: v10a(0x20) = CONST 
0x10d: v10d = ADD v102_0 v10a(0x20)
0x110: v110(0xf9) = CONST 
0x113: JUMP v110(0xf9)
----------------------------------

Begin block 0x114
prev = {'0xf9'}, next = {'0x128', '0x141'}
----------------------------------
Block 0x114
0x11d: v11d = ADD vee vea
0x11f: v11f(0x1f) = CONST 
0x121: v121 = AND v11f(0x1f) vee
0x123: v123 = ISZERO v121
0x124: v124(0x141) = CONST 
0x127: JUMPI v124(0x141) v123
----------------------------------

Begin block 0x128
prev = {'0x114'}, next = {'0x141'}
----------------------------------
Block 0x128
0x12a: v12a = SUB v11d v121
0x12c: v12c = MLOAD v12a
0x12d: v12d(0x1) = CONST 
0x130: v130(0x20) = CONST 
0x132: v132 = SUB v130(0x20) v121
0x133: v133(0x100) = CONST 
0x136: v136 = EXP v133(0x100) v132
0x137: v137 = SUB v136 v12d(0x1)
0x138: v138 = NOT v137
0x139: v139 = AND v138 v12c
0x13b: MSTORE v12a v139
0x13c: v13c(0x20) = CONST 
0x13e: v13e = ADD v13c(0x20) v12a
----------------------------------

Begin block 0x141
prev = {'0x128', '0x114'}, next = {}
----------------------------------
Block 0x141
0x141_0x1: v141_1 = PHI v11d v13e
0x147: v147(0x40) = CONST 
0x149: v149 = MLOAD v147(0x40)
0x14c: v14c = SUB v141_1 v149
0x14e: RETURN v149 v14c
----------------------------------

Begin block 0x14f
prev = {}, next = {'0x15b', '0x157'}
----------------------------------
function approve(address,uint256)()
Block 0x14f
0x150: v150 = CALLVALUE 
0x152: v152 = ISZERO v150
0x153: v153(0x15b) = CONST 
0x156: JUMPI v153(0x15b) v152
----------------------------------

Begin block 0x157
prev = {'0x14f'}, next = {}
----------------------------------
Block 0x157
0x157: v157(0x0) = CONST 
0x15a: REVERT v157(0x0) v157(0x0)
----------------------------------

Begin block 0x15b
prev = {'0x14f'}, next = {'0x19a'}
----------------------------------
Block 0x15b
0x15d: v15d(0x19a) = CONST 
0x160: v160(0x4) = CONST 
0x163: v163 = CALLDATASIZE 
0x164: v164 = SUB v163 v160(0x4)
0x166: v166 = ADD v160(0x4) v164
0x16a: v16a = CALLDATALOAD v160(0x4)
0x16b: v16b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x180: v180 = AND v16b(0xffffffffffffffffffffffffffffffffffffffff) v16a
0x182: v182(0x20) = CONST 
0x184: v184(0x24) = ADD v182(0x20) v160(0x4)
0x18a: v18a = CALLDATALOAD v184(0x24)
0x18c: v18c(0x20) = CONST 
0x18e: v18e(0x44) = ADD v18c(0x20) v184(0x24)
0x196: v196(0x633) = CONST 
0x199: v199_0 = CALLPRIVATE v196(0x633) v18a v180 v15d(0x19a)
----------------------------------

Begin block 0x19a
prev = {'0x15b'}, next = {}
----------------------------------
Block 0x19a
0x19b: v19b(0x40) = CONST 
0x19d: v19d = MLOAD v19b(0x40)
0x1a0: v1a0 = ISZERO v199_0
0x1a1: v1a1 = ISZERO v1a0
0x1a2: v1a2 = ISZERO v1a1
0x1a3: v1a3 = ISZERO v1a2
0x1a5: MSTORE v19d v1a3
0x1a6: v1a6(0x20) = CONST 
0x1a8: v1a8 = ADD v1a6(0x20) v19d
0x1ac: v1ac(0x40) = CONST 
0x1ae: v1ae = MLOAD v1ac(0x40)
0x1b1: v1b1 = SUB v1a8 v1ae
0x1b3: RETURN v1ae v1b1
----------------------------------

Begin block 0x1b4
prev = {}, next = {'0x1c0', '0x1bc'}
----------------------------------
function totalSupply()()
Block 0x1b4
0x1b5: v1b5 = CALLVALUE 
0x1b7: v1b7 = ISZERO v1b5
0x1b8: v1b8(0x1c0) = CONST 
0x1bb: JUMPI v1b8(0x1c0) v1b7
----------------------------------

Begin block 0x1bc
prev = {'0x1b4'}, next = {}
----------------------------------
Block 0x1bc
0x1bc: v1bc(0x0) = CONST 
0x1bf: REVERT v1bc(0x0) v1bc(0x0)
----------------------------------

Begin block 0x1c0
prev = {'0x1b4'}, next = {'0x6c0'}
----------------------------------
Block 0x1c0
0x1c2: v1c2(0x1c9) = CONST 
0x1c5: v1c5(0x6c0) = CONST 
0x1c8: JUMP v1c5(0x6c0)
----------------------------------

Begin block 0x1c9
prev = {'0x6c0'}, next = {}
----------------------------------
Block 0x1c9
0x1ca: v1ca(0x40) = CONST 
0x1cc: v1cc = MLOAD v1ca(0x40)
0x1d0: MSTORE v1cc v6c3
0x1d1: v1d1(0x20) = CONST 
0x1d3: v1d3 = ADD v1d1(0x20) v1cc
0x1d7: v1d7(0x40) = CONST 
0x1d9: v1d9 = MLOAD v1d7(0x40)
0x1dc: v1dc = SUB v1d3 v1d9
0x1de: RETURN v1d9 v1dc
----------------------------------

Begin block 0x1df
prev = {}, next = {'0x1eb', '0x1e7'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1df
0x1e0: v1e0 = CALLVALUE 
0x1e2: v1e2 = ISZERO v1e0
0x1e3: v1e3(0x1eb) = CONST 
0x1e6: JUMPI v1e3(0x1eb) v1e2
----------------------------------

Begin block 0x1e7
prev = {'0x1df'}, next = {}
----------------------------------
Block 0x1e7
0x1e7: v1e7(0x0) = CONST 
0x1ea: REVERT v1e7(0x0) v1e7(0x0)
----------------------------------

Begin block 0x1eb
prev = {'0x1df'}, next = {'0x6c6'}
----------------------------------
Block 0x1eb
0x1ed: v1ed(0x24a) = CONST 
0x1f0: v1f0(0x4) = CONST 
0x1f3: v1f3 = CALLDATASIZE 
0x1f4: v1f4 = SUB v1f3 v1f0(0x4)
0x1f6: v1f6 = ADD v1f0(0x4) v1f4
0x1fa: v1fa = CALLDATALOAD v1f0(0x4)
0x1fb: v1fb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x210: v210 = AND v1fb(0xffffffffffffffffffffffffffffffffffffffff) v1fa
0x212: v212(0x20) = CONST 
0x214: v214(0x24) = ADD v212(0x20) v1f0(0x4)
0x21a: v21a = CALLDATALOAD v214(0x24)
0x21b: v21b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x230: v230 = AND v21b(0xffffffffffffffffffffffffffffffffffffffff) v21a
0x232: v232(0x20) = CONST 
0x234: v234(0x44) = ADD v232(0x20) v214(0x24)
0x23a: v23a = CALLDATALOAD v234(0x44)
0x23c: v23c(0x20) = CONST 
0x23e: v23e(0x64) = ADD v23c(0x20) v234(0x44)
0x246: v246(0x6c6) = CONST 
0x249: JUMP v246(0x6c6)
----------------------------------

Begin block 0x24a
prev = {'0x7e8'}, next = {}
----------------------------------
Block 0x24a
0x24b: v24b(0x40) = CONST 
0x24d: v24d = MLOAD v24b(0x40)
0x250: v250 = ISZERO v7e9(0x1)
0x251: v251 = ISZERO v250
0x252: v252 = ISZERO v251
0x253: v253 = ISZERO v252
0x255: MSTORE v24d v253
0x256: v256(0x20) = CONST 
0x258: v258 = ADD v256(0x20) v24d
0x25c: v25c(0x40) = CONST 
0x25e: v25e = MLOAD v25c(0x40)
0x261: v261 = SUB v258 v25e
0x263: RETURN v25e v261
----------------------------------

Begin block 0x264
prev = {}, next = {'0x270', '0x26c'}
----------------------------------
function decimals()()
Block 0x264
0x265: v265 = CALLVALUE 
0x267: v267 = ISZERO v265
0x268: v268(0x270) = CONST 
0x26b: JUMPI v268(0x270) v267
----------------------------------

Begin block 0x26c
prev = {'0x264'}, next = {}
----------------------------------
Block 0x26c
0x26c: v26c(0x0) = CONST 
0x26f: REVERT v26c(0x0) v26c(0x0)
----------------------------------

Begin block 0x270
prev = {'0x264'}, next = {'0x7f3'}
----------------------------------
Block 0x270
0x272: v272(0x279) = CONST 
0x275: v275(0x7f3) = CONST 
0x278: JUMP v275(0x7f3)
----------------------------------

Begin block 0x279
prev = {'0x7f3'}, next = {}
----------------------------------
Block 0x279
0x27a: v27a(0x40) = CONST 
0x27c: v27c = MLOAD v27a(0x40)
0x27f: v27f(0xff) = CONST 
0x281: v281 = AND v27f(0xff) v803
0x282: v282(0xff) = CONST 
0x284: v284 = AND v282(0xff) v281
0x286: MSTORE v27c v284
0x287: v287(0x20) = CONST 
0x289: v289 = ADD v287(0x20) v27c
0x28d: v28d(0x40) = CONST 
0x28f: v28f = MLOAD v28d(0x40)
0x292: v292 = SUB v289 v28f
0x294: RETURN v28f v292
----------------------------------

Begin block 0x295
prev = {}, next = {'0x2a1', '0x29d'}
----------------------------------
function burn(uint256)()
Block 0x295
0x296: v296 = CALLVALUE 
0x298: v298 = ISZERO v296
0x299: v299(0x2a1) = CONST 
0x29c: JUMPI v299(0x2a1) v298
----------------------------------

Begin block 0x29d
prev = {'0x295'}, next = {}
----------------------------------
Block 0x29d
0x29d: v29d(0x0) = CONST 
0x2a0: REVERT v29d(0x0) v29d(0x0)
----------------------------------

Begin block 0x2a1
prev = {'0x295'}, next = {'0x806'}
----------------------------------
Block 0x2a1
0x2a3: v2a3(0x2c0) = CONST 
0x2a6: v2a6(0x4) = CONST 
0x2a9: v2a9 = CALLDATASIZE 
0x2aa: v2aa = SUB v2a9 v2a6(0x4)
0x2ac: v2ac = ADD v2a6(0x4) v2aa
0x2b0: v2b0 = CALLDATALOAD v2a6(0x4)
0x2b2: v2b2(0x20) = CONST 
0x2b4: v2b4(0x24) = ADD v2b2(0x20) v2a6(0x4)
0x2bc: v2bc(0x806) = CONST 
0x2bf: JUMP v2bc(0x806)
----------------------------------

Begin block 0x2c0
prev = {'0x856'}, next = {}
----------------------------------
Block 0x2c0
0x2c1: v2c1(0x40) = CONST 
0x2c3: v2c3 = MLOAD v2c1(0x40)
0x2c6: v2c6 = ISZERO v902(0x1)
0x2c7: v2c7 = ISZERO v2c6
0x2c8: v2c8 = ISZERO v2c7
0x2c9: v2c9 = ISZERO v2c8
0x2cb: MSTORE v2c3 v2c9
0x2cc: v2cc(0x20) = CONST 
0x2ce: v2ce = ADD v2cc(0x20) v2c3
0x2d2: v2d2(0x40) = CONST 
0x2d4: v2d4 = MLOAD v2d2(0x40)
0x2d7: v2d7 = SUB v2ce v2d4
0x2d9: RETURN v2d4 v2d7
----------------------------------

Begin block 0x2da
prev = {}, next = {'0x2e2', '0x2e6'}
----------------------------------
function balanceOf(address)()
Block 0x2da
0x2db: v2db = CALLVALUE 
0x2dd: v2dd = ISZERO v2db
0x2de: v2de(0x2e6) = CONST 
0x2e1: JUMPI v2de(0x2e6) v2dd
----------------------------------

Begin block 0x2e2
prev = {'0x2da'}, next = {}
----------------------------------
Block 0x2e2
0x2e2: v2e2(0x0) = CONST 
0x2e5: REVERT v2e2(0x0) v2e2(0x0)
----------------------------------

Begin block 0x2e6
prev = {'0x2da'}, next = {'0x90a'}
----------------------------------
Block 0x2e6
0x2e8: v2e8(0x31b) = CONST 
0x2eb: v2eb(0x4) = CONST 
0x2ee: v2ee = CALLDATASIZE 
0x2ef: v2ef = SUB v2ee v2eb(0x4)
0x2f1: v2f1 = ADD v2eb(0x4) v2ef
0x2f5: v2f5 = CALLDATALOAD v2eb(0x4)
0x2f6: v2f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x30b: v30b = AND v2f6(0xffffffffffffffffffffffffffffffffffffffff) v2f5
0x30d: v30d(0x20) = CONST 
0x30f: v30f(0x24) = ADD v30d(0x20) v2eb(0x4)
0x317: v317(0x90a) = CONST 
0x31a: JUMP v317(0x90a)
----------------------------------

Begin block 0x31b
prev = {'0x90a'}, next = {}
----------------------------------
Block 0x31b
0x31c: v31c(0x40) = CONST 
0x31e: v31e = MLOAD v31c(0x40)
0x322: MSTORE v31e v91f
0x323: v323(0x20) = CONST 
0x325: v325 = ADD v323(0x20) v31e
0x329: v329(0x40) = CONST 
0x32b: v32b = MLOAD v329(0x40)
0x32e: v32e = SUB v325 v32b
0x330: RETURN v32b v32e
----------------------------------

Begin block 0x331
prev = {}, next = {'0x33d', '0x339'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x331
0x332: v332 = CALLVALUE 
0x334: v334 = ISZERO v332
0x335: v335(0x33d) = CONST 
0x338: JUMPI v335(0x33d) v334
----------------------------------

Begin block 0x339
prev = {'0x331'}, next = {}
----------------------------------
Block 0x339
0x339: v339(0x0) = CONST 
0x33c: REVERT v339(0x0) v339(0x0)
----------------------------------

Begin block 0x33d
prev = {'0x331'}, next = {'0x922'}
----------------------------------
Block 0x33d
0x33f: v33f(0x37c) = CONST 
0x342: v342(0x4) = CONST 
0x345: v345 = CALLDATASIZE 
0x346: v346 = SUB v345 v342(0x4)
0x348: v348 = ADD v342(0x4) v346
0x34c: v34c = CALLDATALOAD v342(0x4)
0x34d: v34d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x362: v362 = AND v34d(0xffffffffffffffffffffffffffffffffffffffff) v34c
0x364: v364(0x20) = CONST 
0x366: v366(0x24) = ADD v364(0x20) v342(0x4)
0x36c: v36c = CALLDATALOAD v366(0x24)
0x36e: v36e(0x20) = CONST 
0x370: v370(0x44) = ADD v36e(0x20) v366(0x24)
0x378: v378(0x922) = CONST 
0x37b: JUMP v378(0x922)
----------------------------------

Begin block 0x37c
prev = {'0x9fd'}, next = {}
----------------------------------
Block 0x37c
0x37d: v37d(0x40) = CONST 
0x37f: v37f = MLOAD v37d(0x40)
0x382: v382 = ISZERO vb33(0x1)
0x383: v383 = ISZERO v382
0x384: v384 = ISZERO v383
0x385: v385 = ISZERO v384
0x387: MSTORE v37f v385
0x388: v388(0x20) = CONST 
0x38a: v38a = ADD v388(0x20) v37f
0x38e: v38e(0x40) = CONST 
0x390: v390 = MLOAD v38e(0x40)
0x393: v393 = SUB v38a v390
0x395: RETURN v390 v393
----------------------------------

Begin block 0x396
prev = {}, next = {'0x3a2', '0x39e'}
----------------------------------
function symbol()()
Block 0x396
0x397: v397 = CALLVALUE 
0x399: v399 = ISZERO v397
0x39a: v39a(0x3a2) = CONST 
0x39d: JUMPI v39a(0x3a2) v399
----------------------------------

Begin block 0x39e
prev = {'0x396'}, next = {}
----------------------------------
Block 0x39e
0x39e: v39e(0x0) = CONST 
0x3a1: REVERT v39e(0x0) v39e(0x0)
----------------------------------

Begin block 0x3a2
prev = {'0x396'}, next = {'0xb3c'}
----------------------------------
Block 0x3a2
0x3a4: v3a4(0x3ab) = CONST 
0x3a7: v3a7(0xb3c) = CONST 
0x3aa: JUMP v3a7(0xb3c)
----------------------------------

Begin block 0x3ab
prev = {'0xbd2'}, next = {'0x3d0'}
----------------------------------
Block 0x3ab
0x3ac: v3ac(0x40) = CONST 
0x3ae: v3ae = MLOAD v3ac(0x40)
0x3b1: v3b1(0x20) = CONST 
0x3b3: v3b3 = ADD v3b1(0x20) v3ae
0x3b6: v3b6 = SUB v3b3 v3ae
0x3b8: MSTORE v3ae v3b6
0x3bc: v3bc = MLOAD vb61
0x3be: MSTORE v3b3 v3bc
0x3bf: v3bf(0x20) = CONST 
0x3c1: v3c1 = ADD v3bf(0x20) v3b3
0x3c5: v3c5 = MLOAD vb61
0x3c7: v3c7(0x20) = CONST 
0x3c9: v3c9 = ADD v3c7(0x20) vb61
0x3ce: v3ce(0x0) = CONST 
----------------------------------

Begin block 0x3d0
prev = {'0x3d9', '0x3ab'}, next = {'0x3d9', '0x3eb'}
----------------------------------
Block 0x3d0
0x3d0_0x0: v3d0_0 = PHI v3ce(0x0) v3e4
0x3d3: v3d3 = LT v3d0_0 v3c5
0x3d4: v3d4 = ISZERO v3d3
0x3d5: v3d5(0x3eb) = CONST 
0x3d8: JUMPI v3d5(0x3eb) v3d4
----------------------------------

Begin block 0x3d9
prev = {'0x3d0'}, next = {'0x3d0'}
----------------------------------
Block 0x3d9
0x3d9_0x0: v3d9_0 = PHI v3ce(0x0) v3e4
0x3db: v3db = ADD v3c9 v3d9_0
0x3dc: v3dc = MLOAD v3db
0x3df: v3df = ADD v3c1 v3d9_0
0x3e0: MSTORE v3df v3dc
0x3e1: v3e1(0x20) = CONST 
0x3e4: v3e4 = ADD v3d9_0 v3e1(0x20)
0x3e7: v3e7(0x3d0) = CONST 
0x3ea: JUMP v3e7(0x3d0)
----------------------------------

Begin block 0x3eb
prev = {'0x3d0'}, next = {'0x3ff', '0x418'}
----------------------------------
Block 0x3eb
0x3f4: v3f4 = ADD v3c5 v3c1
0x3f6: v3f6(0x1f) = CONST 
0x3f8: v3f8 = AND v3f6(0x1f) v3c5
0x3fa: v3fa = ISZERO v3f8
0x3fb: v3fb(0x418) = CONST 
0x3fe: JUMPI v3fb(0x418) v3fa
----------------------------------

Begin block 0x3ff
prev = {'0x3eb'}, next = {'0x418'}
----------------------------------
Block 0x3ff
0x401: v401 = SUB v3f4 v3f8
0x403: v403 = MLOAD v401
0x404: v404(0x1) = CONST 
0x407: v407(0x20) = CONST 
0x409: v409 = SUB v407(0x20) v3f8
0x40a: v40a(0x100) = CONST 
0x40d: v40d = EXP v40a(0x100) v409
0x40e: v40e = SUB v40d v404(0x1)
0x40f: v40f = NOT v40e
0x410: v410 = AND v40f v403
0x412: MSTORE v401 v410
0x413: v413(0x20) = CONST 
0x415: v415 = ADD v413(0x20) v401
----------------------------------

Begin block 0x418
prev = {'0x3eb', '0x3ff'}, next = {}
----------------------------------
Block 0x418
0x418_0x1: v418_1 = PHI v3f4 v415
0x41e: v41e(0x40) = CONST 
0x420: v420 = MLOAD v41e(0x40)
0x423: v423 = SUB v418_1 v420
0x425: RETURN v420 v423
----------------------------------

Begin block 0x426
prev = {}, next = {'0x432', '0x42e'}
----------------------------------
function transfer(address,uint256)()
Block 0x426
0x427: v427 = CALLVALUE 
0x429: v429 = ISZERO v427
0x42a: v42a(0x432) = CONST 
0x42d: JUMPI v42a(0x432) v429
----------------------------------

Begin block 0x42e
prev = {'0x426'}, next = {}
----------------------------------
Block 0x42e
0x42e: v42e(0x0) = CONST 
0x431: REVERT v42e(0x0) v42e(0x0)
----------------------------------

Begin block 0x432
prev = {'0x426'}, next = {'0xbda'}
----------------------------------
Block 0x432
0x434: v434(0x471) = CONST 
0x437: v437(0x4) = CONST 
0x43a: v43a = CALLDATASIZE 
0x43b: v43b = SUB v43a v437(0x4)
0x43d: v43d = ADD v437(0x4) v43b
0x441: v441 = CALLDATALOAD v437(0x4)
0x442: v442(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x457: v457 = AND v442(0xffffffffffffffffffffffffffffffffffffffff) v441
0x459: v459(0x20) = CONST 
0x45b: v45b(0x24) = ADD v459(0x20) v437(0x4)
0x461: v461 = CALLDATALOAD v45b(0x24)
0x463: v463(0x20) = CONST 
0x465: v465(0x44) = ADD v463(0x20) v45b(0x24)
0x46d: v46d(0xbda) = CONST 
0x470: JUMP v46d(0xbda)
----------------------------------

Begin block 0x471
prev = {'0xbe5'}, next = {}
----------------------------------
Block 0x471
0x472: STOP 
----------------------------------

Begin block 0x473
prev = {}, next = {'0x47b', '0x47f'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x473
0x474: v474 = CALLVALUE 
0x476: v476 = ISZERO v474
0x477: v477(0x47f) = CONST 
0x47a: JUMPI v477(0x47f) v476
----------------------------------

Begin block 0x47b
prev = {'0x473'}, next = {}
----------------------------------
Block 0x47b
0x47b: v47b(0x0) = CONST 
0x47e: REVERT v47b(0x0) v47b(0x0)
----------------------------------

Begin block 0x47f
prev = {'0x473'}, next = {'0xbe9'}
----------------------------------
Block 0x47f
0x481: v481(0x504) = CONST 
0x484: v484(0x4) = CONST 
0x487: v487 = CALLDATASIZE 
0x488: v488 = SUB v487 v484(0x4)
0x48a: v48a = ADD v484(0x4) v488
0x48e: v48e = CALLDATALOAD v484(0x4)
0x48f: v48f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4a4: v4a4 = AND v48f(0xffffffffffffffffffffffffffffffffffffffff) v48e
0x4a6: v4a6(0x20) = CONST 
0x4a8: v4a8(0x24) = ADD v4a6(0x20) v484(0x4)
0x4ae: v4ae = CALLDATALOAD v4a8(0x24)
0x4b0: v4b0(0x20) = CONST 
0x4b2: v4b2(0x44) = ADD v4b0(0x20) v4a8(0x24)
0x4b8: v4b8 = CALLDATALOAD v4b2(0x44)
0x4ba: v4ba(0x20) = CONST 
0x4bc: v4bc(0x64) = ADD v4ba(0x20) v4b2(0x44)
0x4bf: v4bf = ADD v484(0x4) v4b8
0x4c1: v4c1 = CALLDATALOAD v4bf
0x4c3: v4c3(0x20) = CONST 
0x4c5: v4c5 = ADD v4c3(0x20) v4bf
0x4c9: v4c9(0x1f) = CONST 
0x4cb: v4cb = ADD v4c9(0x1f) v4c1
0x4cc: v4cc(0x20) = CONST 
0x4d0: v4d0 = DIV v4cb v4cc(0x20)
0x4d1: v4d1 = MUL v4d0 v4cc(0x20)
0x4d2: v4d2(0x20) = CONST 
0x4d4: v4d4 = ADD v4d2(0x20) v4d1
0x4d5: v4d5(0x40) = CONST 
0x4d7: v4d7 = MLOAD v4d5(0x40)
0x4da: v4da = ADD v4d7 v4d4
0x4db: v4db(0x40) = CONST 
0x4dd: MSTORE v4db(0x40) v4da
0x4e5: MSTORE v4d7 v4c1
0x4e6: v4e6(0x20) = CONST 
0x4e8: v4e8 = ADD v4e6(0x20) v4d7
0x4ee: CALLDATACOPY v4e8 v4c5 v4c1
0x4f0: v4f0 = ADD v4e8 v4c1
0x500: v500(0xbe9) = CONST 
0x503: JUMP v500(0xbe9)
----------------------------------

Begin block 0x504
prev = {'0xd64'}, next = {}
----------------------------------
Block 0x504
0x504_0x0: v504_0 = PHI vbea(0x0) vd5b(0x1)
0x505: v505(0x40) = CONST 
0x507: v507 = MLOAD v505(0x40)
0x50a: v50a = ISZERO v504_0
0x50b: v50b = ISZERO v50a
0x50c: v50c = ISZERO v50b
0x50d: v50d = ISZERO v50c
0x50f: MSTORE v507 v50d
0x510: v510(0x20) = CONST 
0x512: v512 = ADD v510(0x20) v507
0x516: v516(0x40) = CONST 
0x518: v518 = MLOAD v516(0x40)
0x51b: v51b = SUB v512 v518
0x51d: RETURN v518 v51b
----------------------------------

Begin block 0x51e
prev = {}, next = {'0x52a', '0x526'}
----------------------------------
function allowance(address,address)()
Block 0x51e
0x51f: v51f = CALLVALUE 
0x521: v521 = ISZERO v51f
0x522: v522(0x52a) = CONST 
0x525: JUMPI v522(0x52a) v521
----------------------------------

Begin block 0x526
prev = {'0x51e'}, next = {}
----------------------------------
Block 0x526
0x526: v526(0x0) = CONST 
0x529: REVERT v526(0x0) v526(0x0)
----------------------------------

Begin block 0x52a
prev = {'0x51e'}, next = {'0xd6c'}
----------------------------------
Block 0x52a
0x52c: v52c(0x57f) = CONST 
0x52f: v52f(0x4) = CONST 
0x532: v532 = CALLDATASIZE 
0x533: v533 = SUB v532 v52f(0x4)
0x535: v535 = ADD v52f(0x4) v533
0x539: v539 = CALLDATALOAD v52f(0x4)
0x53a: v53a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x54f: v54f = AND v53a(0xffffffffffffffffffffffffffffffffffffffff) v539
0x551: v551(0x20) = CONST 
0x553: v553(0x24) = ADD v551(0x20) v52f(0x4)
0x559: v559 = CALLDATALOAD v553(0x24)
0x55a: v55a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x56f: v56f = AND v55a(0xffffffffffffffffffffffffffffffffffffffff) v559
0x571: v571(0x20) = CONST 
0x573: v573(0x44) = ADD v571(0x20) v553(0x24)
0x57b: v57b(0xd6c) = CONST 
0x57e: JUMP v57b(0xd6c)
----------------------------------

Begin block 0x57f
prev = {'0xd6c'}, next = {}
----------------------------------
Block 0x57f
0x580: v580(0x40) = CONST 
0x582: v582 = MLOAD v580(0x40)
0x586: MSTORE v582 vd8e
0x587: v587(0x20) = CONST 
0x589: v589 = ADD v587(0x20) v582
0x58d: v58d(0x40) = CONST 
0x58f: v58f = MLOAD v58d(0x40)
0x592: v592 = SUB v589 v58f
0x594: RETURN v58f v592
----------------------------------

Begin block 0x595
prev = {'0xcb'}, next = {'0x5e5', '0x62b'}
----------------------------------
Block 0x595
0x596: v596(0x0) = CONST 
0x599: v599 = SLOAD v596(0x0)
0x59a: v59a(0x1) = CONST 
0x59d: v59d(0x1) = CONST 
0x59f: v59f = AND v59d(0x1) v599
0x5a0: v5a0 = ISZERO v59f
0x5a1: v5a1(0x100) = CONST 
0x5a4: v5a4 = MUL v5a1(0x100) v5a0
0x5a5: v5a5 = SUB v5a4 v59a(0x1)
0x5a6: v5a6 = AND v5a5 v599
0x5a7: v5a7(0x2) = CONST 
0x5aa: v5aa = DIV v5a6 v5a7(0x2)
0x5ac: v5ac(0x1f) = CONST 
0x5ae: v5ae = ADD v5ac(0x1f) v5aa
0x5af: v5af(0x20) = CONST 
0x5b3: v5b3 = DIV v5ae v5af(0x20)
0x5b4: v5b4 = MUL v5b3 v5af(0x20)
0x5b5: v5b5(0x20) = CONST 
0x5b7: v5b7 = ADD v5b5(0x20) v5b4
0x5b8: v5b8(0x40) = CONST 
0x5ba: v5ba = MLOAD v5b8(0x40)
0x5bd: v5bd = ADD v5ba v5b7
0x5be: v5be(0x40) = CONST 
0x5c0: MSTORE v5be(0x40) v5bd
0x5c7: MSTORE v5ba v5aa
0x5c8: v5c8(0x20) = CONST 
0x5ca: v5ca = ADD v5c8(0x20) v5ba
0x5cd: v5cd = SLOAD v596(0x0)
0x5ce: v5ce(0x1) = CONST 
0x5d1: v5d1(0x1) = CONST 
0x5d3: v5d3 = AND v5d1(0x1) v5cd
0x5d4: v5d4 = ISZERO v5d3
0x5d5: v5d5(0x100) = CONST 
0x5d8: v5d8 = MUL v5d5(0x100) v5d4
0x5d9: v5d9 = SUB v5d8 v5ce(0x1)
0x5da: v5da = AND v5d9 v5cd
0x5db: v5db(0x2) = CONST 
0x5de: v5de = DIV v5da v5db(0x2)
0x5e0: v5e0 = ISZERO v5de
0x5e1: v5e1(0x62b) = CONST 
0x5e4: JUMPI v5e1(0x62b) v5e0
----------------------------------

Begin block 0x5e5
prev = {'0x595'}, next = {'0x5ed', '0x600'}
----------------------------------
Block 0x5e5
0x5e6: v5e6(0x1f) = CONST 
0x5e8: v5e8 = LT v5e6(0x1f) v5de
0x5e9: v5e9(0x600) = CONST 
0x5ec: JUMPI v5e9(0x600) v5e8
----------------------------------

Begin block 0x5ed
prev = {'0x5e5'}, next = {'0x62b'}
----------------------------------
Block 0x5ed
0x5ed: v5ed(0x100) = CONST 
0x5f2: v5f2 = SLOAD v596(0x0)
0x5f3: v5f3 = DIV v5f2 v5ed(0x100)
0x5f4: v5f4 = MUL v5f3 v5ed(0x100)
0x5f6: MSTORE v5ca v5f4
0x5f8: v5f8(0x20) = CONST 
0x5fa: v5fa = ADD v5f8(0x20) v5ca
0x5fc: v5fc(0x62b) = CONST 
0x5ff: JUMP v5fc(0x62b)
----------------------------------

Begin block 0x600
prev = {'0x5e5'}, next = {'0x60e'}
----------------------------------
Block 0x600
0x602: v602 = ADD v5ca v5de
0x605: v605(0x0) = CONST 
0x607: MSTORE v605(0x0) v596(0x0)
0x608: v608(0x20) = CONST 
0x60a: v60a(0x0) = CONST 
0x60c: v60c = SHA3 v60a(0x0) v608(0x20)
----------------------------------

Begin block 0x60e
prev = {'0x60e', '0x600'}, next = {'0x622', '0x60e'}
----------------------------------
Block 0x60e
0x60e_0x0: v60e_0 = PHI v5ca v61a
0x60e_0x1: v60e_1 = PHI v60c v616
0x610: v610 = SLOAD v60e_1
0x612: MSTORE v60e_0 v610
0x614: v614(0x1) = CONST 
0x616: v616 = ADD v614(0x1) v60e_1
0x618: v618(0x20) = CONST 
0x61a: v61a = ADD v618(0x20) v60e_0
0x61d: v61d = GT v602 v61a
0x61e: v61e(0x60e) = CONST 
0x621: JUMPI v61e(0x60e) v61d
----------------------------------

Begin block 0x622
prev = {'0x60e'}, next = {'0x62b'}
----------------------------------
Block 0x622
0x624: v624 = SUB v61a v602
0x625: v625(0x1f) = CONST 
0x627: v627 = AND v625(0x1f) v624
0x629: v629 = ADD v602 v627
----------------------------------

Begin block 0x62b
prev = {'0x622', '0x5ed', '0x595'}, next = {'0xd4'}
----------------------------------
Block 0x62b
0x632: JUMP vcd(0xd4)
----------------------------------

Begin block 0x633
prev = {}, next = {}
----------------------------------
function 0x633(v633arg0, v633arg1, v633arg2)
Block 0x633
0x634: v634(0x0) = CONST 
0x637: v637(0x5) = CONST 
0x639: v639(0x0) = CONST 
0x63b: v63b = CALLER 
0x63c: v63c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x651: v651 = AND v63c(0xffffffffffffffffffffffffffffffffffffffff) v63b
0x652: v652(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x667: v667 = AND v652(0xffffffffffffffffffffffffffffffffffffffff) v651
0x669: MSTORE v639(0x0) v667
0x66a: v66a(0x20) = CONST 
0x66c: v66c(0x20) = ADD v66a(0x20) v639(0x0)
0x66f: MSTORE v66c(0x20) v637(0x5)
0x670: v670(0x20) = CONST 
0x672: v672(0x40) = ADD v670(0x20) v66c(0x20)
0x673: v673(0x0) = CONST 
0x675: v675 = SHA3 v673(0x0) v672(0x40)
0x676: v676(0x0) = CONST 
0x679: v679(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x68e: v68e = AND v679(0xffffffffffffffffffffffffffffffffffffffff) v633arg1
0x68f: v68f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6a4: v6a4 = AND v68f(0xffffffffffffffffffffffffffffffffffffffff) v68e
0x6a6: MSTORE v676(0x0) v6a4
0x6a7: v6a7(0x20) = CONST 
0x6a9: v6a9(0x20) = ADD v6a7(0x20) v676(0x0)
0x6ac: MSTORE v6a9(0x20) v675
0x6ad: v6ad(0x20) = CONST 
0x6af: v6af(0x40) = ADD v6ad(0x20) v6a9(0x20)
0x6b0: v6b0(0x0) = CONST 
0x6b2: v6b2 = SHA3 v6b0(0x0) v6af(0x40)
0x6b5: SSTORE v6b2 v633arg0
0x6b7: v6b7(0x1) = CONST 
0x6bf: RETURNPRIVATE v633arg2 v6b7(0x1)
----------------------------------

Begin block 0x6c0
prev = {'0x1c0'}, next = {'0x1c9'}
----------------------------------
Block 0x6c0
0x6c1: v6c1(0x3) = CONST 
0x6c3: v6c3 = SLOAD v6c1(0x3)
0x6c5: JUMP v1c2(0x1c9)
----------------------------------

Begin block 0x6c6
prev = {'0x1eb'}, next = {'0x753', '0x74f'}
----------------------------------
Block 0x6c6
0x6c7: v6c7(0x0) = CONST 
0x6c9: v6c9(0x5) = CONST 
0x6cb: v6cb(0x0) = CONST 
0x6ce: v6ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e3: v6e3 = AND v6ce(0xffffffffffffffffffffffffffffffffffffffff) v210
0x6e4: v6e4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6f9: v6f9 = AND v6e4(0xffffffffffffffffffffffffffffffffffffffff) v6e3
0x6fb: MSTORE v6cb(0x0) v6f9
0x6fc: v6fc(0x20) = CONST 
0x6fe: v6fe(0x20) = ADD v6fc(0x20) v6cb(0x0)
0x701: MSTORE v6fe(0x20) v6c9(0x5)
0x702: v702(0x20) = CONST 
0x704: v704(0x40) = ADD v702(0x20) v6fe(0x20)
0x705: v705(0x0) = CONST 
0x707: v707 = SHA3 v705(0x0) v704(0x40)
0x708: v708(0x0) = CONST 
0x70a: v70a = CALLER 
0x70b: v70b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x720: v720 = AND v70b(0xffffffffffffffffffffffffffffffffffffffff) v70a
0x721: v721(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x736: v736 = AND v721(0xffffffffffffffffffffffffffffffffffffffff) v720
0x738: MSTORE v708(0x0) v736
0x739: v739(0x20) = CONST 
0x73b: v73b(0x20) = ADD v739(0x20) v708(0x0)
0x73e: MSTORE v73b(0x20) v707
0x73f: v73f(0x20) = CONST 
0x741: v741(0x40) = ADD v73f(0x20) v73b(0x20)
0x742: v742(0x0) = CONST 
0x744: v744 = SHA3 v742(0x0) v741(0x40)
0x745: v745 = SLOAD v744
0x747: v747 = GT v23a v745
0x748: v748 = ISZERO v747
0x749: v749 = ISZERO v748
0x74a: v74a = ISZERO v749
0x74b: v74b(0x753) = CONST 
0x74e: JUMPI v74b(0x753) v74a
----------------------------------

Begin block 0x74f
prev = {'0x6c6'}, next = {}
----------------------------------
Block 0x74f
0x74f: v74f(0x0) = CONST 
0x752: REVERT v74f(0x0) v74f(0x0)
----------------------------------

Begin block 0x753
prev = {'0x6c6'}, next = {'0x7e8'}
----------------------------------
Block 0x753
0x755: v755(0x5) = CONST 
0x757: v757(0x0) = CONST 
0x75a: v75a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x76f: v76f = AND v75a(0xffffffffffffffffffffffffffffffffffffffff) v210
0x770: v770(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x785: v785 = AND v770(0xffffffffffffffffffffffffffffffffffffffff) v76f
0x787: MSTORE v757(0x0) v785
0x788: v788(0x20) = CONST 
0x78a: v78a(0x20) = ADD v788(0x20) v757(0x0)
0x78d: MSTORE v78a(0x20) v755(0x5)
0x78e: v78e(0x20) = CONST 
0x790: v790(0x40) = ADD v78e(0x20) v78a(0x20)
0x791: v791(0x0) = CONST 
0x793: v793 = SHA3 v791(0x0) v790(0x40)
0x794: v794(0x0) = CONST 
0x796: v796 = CALLER 
0x797: v797(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ac: v7ac = AND v797(0xffffffffffffffffffffffffffffffffffffffff) v796
0x7ad: v7ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c2: v7c2 = AND v7ad(0xffffffffffffffffffffffffffffffffffffffff) v7ac
0x7c4: MSTORE v794(0x0) v7c2
0x7c5: v7c5(0x20) = CONST 
0x7c7: v7c7(0x20) = ADD v7c5(0x20) v794(0x0)
0x7ca: MSTORE v7c7(0x20) v793
0x7cb: v7cb(0x20) = CONST 
0x7cd: v7cd(0x40) = ADD v7cb(0x20) v7c7(0x20)
0x7ce: v7ce(0x0) = CONST 
0x7d0: v7d0 = SHA3 v7ce(0x0) v7cd(0x40)
0x7d1: v7d1(0x0) = CONST 
0x7d5: v7d5 = SLOAD v7d0
0x7d6: v7d6 = SUB v7d5 v23a
0x7dc: SSTORE v7d0 v7d6
0x7de: v7de(0x7e8) = CONST 
0x7e4: v7e4(0xd91) = CONST 
0x7e7: CALLPRIVATE v7e4(0xd91) v23a v230 v210 v7de(0x7e8)
----------------------------------

Begin block 0x7e8
prev = {'0x753'}, next = {'0x24a'}
----------------------------------
Block 0x7e8
0x7e9: v7e9(0x1) = CONST 
0x7f2: JUMP v1ed(0x24a)
----------------------------------

Begin block 0x7f3
prev = {'0x270'}, next = {'0x279'}
----------------------------------
Block 0x7f3
0x7f4: v7f4(0x2) = CONST 
0x7f6: v7f6(0x0) = CONST 
0x7f9: v7f9 = SLOAD v7f4(0x2)
0x7fb: v7fb(0x100) = CONST 
0x7fe: v7fe(0x1) = EXP v7fb(0x100) v7f6(0x0)
0x800: v800 = DIV v7f9 v7fe(0x1)
0x801: v801(0xff) = CONST 
0x803: v803 = AND v801(0xff) v800
0x805: JUMP v272(0x279)
----------------------------------

Begin block 0x806
prev = {'0x2a1'}, next = {'0x852', '0x856'}
----------------------------------
Block 0x806
0x807: v807(0x0) = CONST 
0x80a: v80a(0x4) = CONST 
0x80c: v80c(0x0) = CONST 
0x80e: v80e = CALLER 
0x80f: v80f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x824: v824 = AND v80f(0xffffffffffffffffffffffffffffffffffffffff) v80e
0x825: v825(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x83a: v83a = AND v825(0xffffffffffffffffffffffffffffffffffffffff) v824
0x83c: MSTORE v80c(0x0) v83a
0x83d: v83d(0x20) = CONST 
0x83f: v83f(0x20) = ADD v83d(0x20) v80c(0x0)
0x842: MSTORE v83f(0x20) v80a(0x4)
0x843: v843(0x20) = CONST 
0x845: v845(0x40) = ADD v843(0x20) v83f(0x20)
0x846: v846(0x0) = CONST 
0x848: v848 = SHA3 v846(0x0) v845(0x40)
0x849: v849 = SLOAD v848
0x84a: v84a = LT v849 v2b0
0x84b: v84b = ISZERO v84a
0x84c: v84c = ISZERO v84b
0x84d: v84d = ISZERO v84c
0x84e: v84e(0x856) = CONST 
0x851: JUMPI v84e(0x856) v84d
----------------------------------

Begin block 0x852
prev = {'0x806'}, next = {}
----------------------------------
Block 0x852
0x852: v852(0x0) = CONST 
0x855: REVERT v852(0x0) v852(0x0)
----------------------------------

Begin block 0x856
prev = {'0x806'}, next = {'0x2c0'}
----------------------------------
Block 0x856
0x858: v858(0x4) = CONST 
0x85a: v85a(0x0) = CONST 
0x85c: v85c = CALLER 
0x85d: v85d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x872: v872 = AND v85d(0xffffffffffffffffffffffffffffffffffffffff) v85c
0x873: v873(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x888: v888 = AND v873(0xffffffffffffffffffffffffffffffffffffffff) v872
0x88a: MSTORE v85a(0x0) v888
0x88b: v88b(0x20) = CONST 
0x88d: v88d(0x20) = ADD v88b(0x20) v85a(0x0)
0x890: MSTORE v88d(0x20) v858(0x4)
0x891: v891(0x20) = CONST 
0x893: v893(0x40) = ADD v891(0x20) v88d(0x20)
0x894: v894(0x0) = CONST 
0x896: v896 = SHA3 v894(0x0) v893(0x40)
0x897: v897(0x0) = CONST 
0x89b: v89b = SLOAD v896
0x89c: v89c = SUB v89b v2b0
0x8a2: SSTORE v896 v89c
0x8a5: v8a5(0x3) = CONST 
0x8a7: v8a7(0x0) = CONST 
0x8ab: v8ab = SLOAD v8a5(0x3)
0x8ac: v8ac = SUB v8ab v2b0
0x8b2: SSTORE v8a5(0x3) v8ac
0x8b4: v8b4 = CALLER 
0x8b5: v8b5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8ca: v8ca = AND v8b5(0xffffffffffffffffffffffffffffffffffffffff) v8b4
0x8cb: v8cb(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x8ed: v8ed(0x40) = CONST 
0x8ef: v8ef = MLOAD v8ed(0x40)
0x8f3: MSTORE v8ef v2b0
0x8f4: v8f4(0x20) = CONST 
0x8f6: v8f6 = ADD v8f4(0x20) v8ef
0x8fa: v8fa(0x40) = CONST 
0x8fc: v8fc = MLOAD v8fa(0x40)
0x8ff: v8ff = SUB v8f6 v8fc
0x901: LOG2 v8fc v8ff v8cb(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v8ca
0x902: v902(0x1) = CONST 
0x909: JUMP v2a3(0x2c0)
----------------------------------

Begin block 0x90a
prev = {'0x2e6'}, next = {'0x31b'}
----------------------------------
Block 0x90a
0x90b: v90b(0x4) = CONST 
0x90d: v90d(0x20) = CONST 
0x90f: MSTORE v90d(0x20) v90b(0x4)
0x911: v911(0x0) = CONST 
0x913: MSTORE v911(0x0) v30b
0x914: v914(0x40) = CONST 
0x916: v916(0x0) = CONST 
0x918: v918 = SHA3 v916(0x0) v914(0x40)
0x919: v919(0x0) = CONST 
0x91f: v91f = SLOAD v918
0x921: JUMP v2e8(0x31b)
----------------------------------

Begin block 0x922
prev = {'0x33d'}, next = {'0x972', '0x96e'}
----------------------------------
Block 0x922
0x923: v923(0x0) = CONST 
0x926: v926(0x4) = CONST 
0x928: v928(0x0) = CONST 
0x92b: v92b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x940: v940 = AND v92b(0xffffffffffffffffffffffffffffffffffffffff) v362
0x941: v941(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x956: v956 = AND v941(0xffffffffffffffffffffffffffffffffffffffff) v940
0x958: MSTORE v928(0x0) v956
0x959: v959(0x20) = CONST 
0x95b: v95b(0x20) = ADD v959(0x20) v928(0x0)
0x95e: MSTORE v95b(0x20) v926(0x4)
0x95f: v95f(0x20) = CONST 
0x961: v961(0x40) = ADD v95f(0x20) v95b(0x20)
0x962: v962(0x0) = CONST 
0x964: v964 = SHA3 v962(0x0) v961(0x40)
0x965: v965 = SLOAD v964
0x966: v966 = LT v965 v36c
0x967: v967 = ISZERO v966
0x968: v968 = ISZERO v967
0x969: v969 = ISZERO v968
0x96a: v96a(0x972) = CONST 
0x96d: JUMPI v96a(0x972) v969
----------------------------------

Begin block 0x96e
prev = {'0x922'}, next = {}
----------------------------------
Block 0x96e
0x96e: v96e(0x0) = CONST 
0x971: REVERT v96e(0x0) v96e(0x0)
----------------------------------

Begin block 0x972
prev = {'0x922'}, next = {'0x9fd', '0x9f9'}
----------------------------------
Block 0x972
0x973: v973(0x5) = CONST 
0x975: v975(0x0) = CONST 
0x978: v978(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x98d: v98d = AND v978(0xffffffffffffffffffffffffffffffffffffffff) v362
0x98e: v98e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9a3: v9a3 = AND v98e(0xffffffffffffffffffffffffffffffffffffffff) v98d
0x9a5: MSTORE v975(0x0) v9a3
0x9a6: v9a6(0x20) = CONST 
0x9a8: v9a8(0x20) = ADD v9a6(0x20) v975(0x0)
0x9ab: MSTORE v9a8(0x20) v973(0x5)
0x9ac: v9ac(0x20) = CONST 
0x9ae: v9ae(0x40) = ADD v9ac(0x20) v9a8(0x20)
0x9af: v9af(0x0) = CONST 
0x9b1: v9b1 = SHA3 v9af(0x0) v9ae(0x40)
0x9b2: v9b2(0x0) = CONST 
0x9b4: v9b4 = CALLER 
0x9b5: v9b5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ca: v9ca = AND v9b5(0xffffffffffffffffffffffffffffffffffffffff) v9b4
0x9cb: v9cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e0: v9e0 = AND v9cb(0xffffffffffffffffffffffffffffffffffffffff) v9ca
0x9e2: MSTORE v9b2(0x0) v9e0
0x9e3: v9e3(0x20) = CONST 
0x9e5: v9e5(0x20) = ADD v9e3(0x20) v9b2(0x0)
0x9e8: MSTORE v9e5(0x20) v9b1
0x9e9: v9e9(0x20) = CONST 
0x9eb: v9eb(0x40) = ADD v9e9(0x20) v9e5(0x20)
0x9ec: v9ec(0x0) = CONST 
0x9ee: v9ee = SHA3 v9ec(0x0) v9eb(0x40)
0x9ef: v9ef = SLOAD v9ee
0x9f1: v9f1 = GT v36c v9ef
0x9f2: v9f2 = ISZERO v9f1
0x9f3: v9f3 = ISZERO v9f2
0x9f4: v9f4 = ISZERO v9f3
0x9f5: v9f5(0x9fd) = CONST 
0x9f8: JUMPI v9f5(0x9fd) v9f4
----------------------------------

Begin block 0x9f9
prev = {'0x972'}, next = {}
----------------------------------
Block 0x9f9
0x9f9: v9f9(0x0) = CONST 
0x9fc: REVERT v9f9(0x0) v9f9(0x0)
----------------------------------

Begin block 0x9fd
prev = {'0x972'}, next = {'0x37c'}
----------------------------------
Block 0x9fd
0x9ff: v9ff(0x4) = CONST 
0xa01: va01(0x0) = CONST 
0xa04: va04(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa19: va19 = AND va04(0xffffffffffffffffffffffffffffffffffffffff) v362
0xa1a: va1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa2f: va2f = AND va1a(0xffffffffffffffffffffffffffffffffffffffff) va19
0xa31: MSTORE va01(0x0) va2f
0xa32: va32(0x20) = CONST 
0xa34: va34(0x20) = ADD va32(0x20) va01(0x0)
0xa37: MSTORE va34(0x20) v9ff(0x4)
0xa38: va38(0x20) = CONST 
0xa3a: va3a(0x40) = ADD va38(0x20) va34(0x20)
0xa3b: va3b(0x0) = CONST 
0xa3d: va3d = SHA3 va3b(0x0) va3a(0x40)
0xa3e: va3e(0x0) = CONST 
0xa42: va42 = SLOAD va3d
0xa43: va43 = SUB va42 v36c
0xa49: SSTORE va3d va43
0xa4c: va4c(0x5) = CONST 
0xa4e: va4e(0x0) = CONST 
0xa51: va51(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa66: va66 = AND va51(0xffffffffffffffffffffffffffffffffffffffff) v362
0xa67: va67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7c: va7c = AND va67(0xffffffffffffffffffffffffffffffffffffffff) va66
0xa7e: MSTORE va4e(0x0) va7c
0xa7f: va7f(0x20) = CONST 
0xa81: va81(0x20) = ADD va7f(0x20) va4e(0x0)
0xa84: MSTORE va81(0x20) va4c(0x5)
0xa85: va85(0x20) = CONST 
0xa87: va87(0x40) = ADD va85(0x20) va81(0x20)
0xa88: va88(0x0) = CONST 
0xa8a: va8a = SHA3 va88(0x0) va87(0x40)
0xa8b: va8b(0x0) = CONST 
0xa8d: va8d = CALLER 
0xa8e: va8e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa3: vaa3 = AND va8e(0xffffffffffffffffffffffffffffffffffffffff) va8d
0xaa4: vaa4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab9: vab9 = AND vaa4(0xffffffffffffffffffffffffffffffffffffffff) vaa3
0xabb: MSTORE va8b(0x0) vab9
0xabc: vabc(0x20) = CONST 
0xabe: vabe(0x20) = ADD vabc(0x20) va8b(0x0)
0xac1: MSTORE vabe(0x20) va8a
0xac2: vac2(0x20) = CONST 
0xac4: vac4(0x40) = ADD vac2(0x20) vabe(0x20)
0xac5: vac5(0x0) = CONST 
0xac7: vac7 = SHA3 vac5(0x0) vac4(0x40)
0xac8: vac8(0x0) = CONST 
0xacc: vacc = SLOAD vac7
0xacd: vacd = SUB vacc v36c
0xad3: SSTORE vac7 vacd
0xad6: vad6(0x3) = CONST 
0xad8: vad8(0x0) = CONST 
0xadc: vadc = SLOAD vad6(0x3)
0xadd: vadd = SUB vadc v36c
0xae3: SSTORE vad6(0x3) vadd
0xae6: vae6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xafb: vafb = AND vae6(0xffffffffffffffffffffffffffffffffffffffff) v362
0xafc: vafc(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0xb1e: vb1e(0x40) = CONST 
0xb20: vb20 = MLOAD vb1e(0x40)
0xb24: MSTORE vb20 v36c
0xb25: vb25(0x20) = CONST 
0xb27: vb27 = ADD vb25(0x20) vb20
0xb2b: vb2b(0x40) = CONST 
0xb2d: vb2d = MLOAD vb2b(0x40)
0xb30: vb30 = SUB vb27 vb2d
0xb32: LOG2 vb2d vb30 vafc(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) vafb
0xb33: vb33(0x1) = CONST 
0xb3b: JUMP v33f(0x37c)
----------------------------------

Begin block 0xb3c
prev = {'0x3a2'}, next = {'0xb8c', '0xbd2'}
----------------------------------
Block 0xb3c
0xb3d: vb3d(0x1) = CONST 
0xb40: vb40 = SLOAD vb3d(0x1)
0xb41: vb41(0x1) = CONST 
0xb44: vb44(0x1) = CONST 
0xb46: vb46 = AND vb44(0x1) vb40
0xb47: vb47 = ISZERO vb46
0xb48: vb48(0x100) = CONST 
0xb4b: vb4b = MUL vb48(0x100) vb47
0xb4c: vb4c = SUB vb4b vb41(0x1)
0xb4d: vb4d = AND vb4c vb40
0xb4e: vb4e(0x2) = CONST 
0xb51: vb51 = DIV vb4d vb4e(0x2)
0xb53: vb53(0x1f) = CONST 
0xb55: vb55 = ADD vb53(0x1f) vb51
0xb56: vb56(0x20) = CONST 
0xb5a: vb5a = DIV vb55 vb56(0x20)
0xb5b: vb5b = MUL vb5a vb56(0x20)
0xb5c: vb5c(0x20) = CONST 
0xb5e: vb5e = ADD vb5c(0x20) vb5b
0xb5f: vb5f(0x40) = CONST 
0xb61: vb61 = MLOAD vb5f(0x40)
0xb64: vb64 = ADD vb61 vb5e
0xb65: vb65(0x40) = CONST 
0xb67: MSTORE vb65(0x40) vb64
0xb6e: MSTORE vb61 vb51
0xb6f: vb6f(0x20) = CONST 
0xb71: vb71 = ADD vb6f(0x20) vb61
0xb74: vb74 = SLOAD vb3d(0x1)
0xb75: vb75(0x1) = CONST 
0xb78: vb78(0x1) = CONST 
0xb7a: vb7a = AND vb78(0x1) vb74
0xb7b: vb7b = ISZERO vb7a
0xb7c: vb7c(0x100) = CONST 
0xb7f: vb7f = MUL vb7c(0x100) vb7b
0xb80: vb80 = SUB vb7f vb75(0x1)
0xb81: vb81 = AND vb80 vb74
0xb82: vb82(0x2) = CONST 
0xb85: vb85 = DIV vb81 vb82(0x2)
0xb87: vb87 = ISZERO vb85
0xb88: vb88(0xbd2) = CONST 
0xb8b: JUMPI vb88(0xbd2) vb87
----------------------------------

Begin block 0xb8c
prev = {'0xb3c'}, next = {'0xba7', '0xb94'}
----------------------------------
Block 0xb8c
0xb8d: vb8d(0x1f) = CONST 
0xb8f: vb8f = LT vb8d(0x1f) vb85
0xb90: vb90(0xba7) = CONST 
0xb93: JUMPI vb90(0xba7) vb8f
----------------------------------

Begin block 0xb94
prev = {'0xb8c'}, next = {'0xbd2'}
----------------------------------
Block 0xb94
0xb94: vb94(0x100) = CONST 
0xb99: vb99 = SLOAD vb3d(0x1)
0xb9a: vb9a = DIV vb99 vb94(0x100)
0xb9b: vb9b = MUL vb9a vb94(0x100)
0xb9d: MSTORE vb71 vb9b
0xb9f: vb9f(0x20) = CONST 
0xba1: vba1 = ADD vb9f(0x20) vb71
0xba3: vba3(0xbd2) = CONST 
0xba6: JUMP vba3(0xbd2)
----------------------------------

Begin block 0xba7
prev = {'0xb8c'}, next = {'0xbb5'}
----------------------------------
Block 0xba7
0xba9: vba9 = ADD vb71 vb85
0xbac: vbac(0x0) = CONST 
0xbae: MSTORE vbac(0x0) vb3d(0x1)
0xbaf: vbaf(0x20) = CONST 
0xbb1: vbb1(0x0) = CONST 
0xbb3: vbb3 = SHA3 vbb1(0x0) vbaf(0x20)
----------------------------------

Begin block 0xbb5
prev = {'0xba7', '0xbb5'}, next = {'0xbc9', '0xbb5'}
----------------------------------
Block 0xbb5
0xbb5_0x0: vbb5_0 = PHI vb71 vbc1
0xbb5_0x1: vbb5_1 = PHI vbb3 vbbd
0xbb7: vbb7 = SLOAD vbb5_1
0xbb9: MSTORE vbb5_0 vbb7
0xbbb: vbbb(0x1) = CONST 
0xbbd: vbbd = ADD vbbb(0x1) vbb5_1
0xbbf: vbbf(0x20) = CONST 
0xbc1: vbc1 = ADD vbbf(0x20) vbb5_0
0xbc4: vbc4 = GT vba9 vbc1
0xbc5: vbc5(0xbb5) = CONST 
0xbc8: JUMPI vbc5(0xbb5) vbc4
----------------------------------

Begin block 0xbc9
prev = {'0xbb5'}, next = {'0xbd2'}
----------------------------------
Block 0xbc9
0xbcb: vbcb = SUB vbc1 vba9
0xbcc: vbcc(0x1f) = CONST 
0xbce: vbce = AND vbcc(0x1f) vbcb
0xbd0: vbd0 = ADD vba9 vbce
----------------------------------

Begin block 0xbd2
prev = {'0xb94', '0xbc9', '0xb3c'}, next = {'0x3ab'}
----------------------------------
Block 0xbd2
0xbd9: JUMP v3a4(0x3ab)
----------------------------------

Begin block 0xbda
prev = {'0x432'}, next = {'0xbe5'}
----------------------------------
Block 0xbda
0xbdb: vbdb(0xbe5) = CONST 
0xbde: vbde = CALLER 
0xbe1: vbe1(0xd91) = CONST 
0xbe4: CALLPRIVATE vbe1(0xd91) v461 v457 vbde vbdb(0xbe5)
----------------------------------

Begin block 0xbe5
prev = {'0xbda'}, next = {'0x471'}
----------------------------------
Block 0xbe5
0xbe8: JUMP v434(0x471)
----------------------------------

Begin block 0xbe9
prev = {'0x47f'}, next = {'0xbf9'}
----------------------------------
Block 0xbe9
0xbea: vbea(0x0) = CONST 
0xbf0: vbf0(0xbf9) = CONST 
0xbf5: vbf5(0x633) = CONST 
0xbf8: vbf8_0 = CALLPRIVATE vbf5(0x633) v4ae v4a4 vbf0(0xbf9)
----------------------------------

Begin block 0xbf9
prev = {'0xbe9'}, next = {'0xbff', '0xd63'}
----------------------------------
Block 0xbf9
0xbfa: vbfa = ISZERO vbf8_0
0xbfb: vbfb(0xd63) = CONST 
0xbfe: JUMPI vbfb(0xd63) vbfa
----------------------------------

Begin block 0xbff
prev = {'0xbf9'}, next = {'0xcd8'}
----------------------------------
Block 0xbff
0xc00: vc00(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc15: vc15 = AND vc00(0xffffffffffffffffffffffffffffffffffffffff) v4a4
0xc16: vc16(0x8f4ffcb1) = CONST 
0xc1b: vc1b = CALLER 
0xc1d: vc1d = ADDRESS 
0xc1f: vc1f(0x40) = CONST 
0xc21: vc21 = MLOAD vc1f(0x40)
0xc23: vc23(0xffffffff) = CONST 
0xc28: vc28(0x8f4ffcb1) = AND vc23(0xffffffff) vc16(0x8f4ffcb1)
0xc29: vc29(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xc47: vc47(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL vc29(0x100000000000000000000000000000000000000000000000000000000) vc28(0x8f4ffcb1)
0xc49: MSTORE vc21 vc47(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0xc4a: vc4a(0x4) = CONST 
0xc4c: vc4c = ADD vc4a(0x4) vc21
0xc4f: vc4f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc64: vc64 = AND vc4f(0xffffffffffffffffffffffffffffffffffffffff) vc1b
0xc65: vc65(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc7a: vc7a = AND vc65(0xffffffffffffffffffffffffffffffffffffffff) vc64
0xc7c: MSTORE vc4c vc7a
0xc7d: vc7d(0x20) = CONST 
0xc7f: vc7f = ADD vc7d(0x20) vc4c
0xc82: MSTORE vc7f v4ae
0xc83: vc83(0x20) = CONST 
0xc85: vc85 = ADD vc83(0x20) vc7f
0xc87: vc87(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc9c: vc9c = AND vc87(0xffffffffffffffffffffffffffffffffffffffff) vc1d
0xc9d: vc9d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcb2: vcb2 = AND vc9d(0xffffffffffffffffffffffffffffffffffffffff) vc9c
0xcb4: MSTORE vc85 vcb2
0xcb5: vcb5(0x20) = CONST 
0xcb7: vcb7 = ADD vcb5(0x20) vc85
0xcb9: vcb9(0x20) = CONST 
0xcbb: vcbb = ADD vcb9(0x20) vcb7
0xcbe: vcbe = SUB vcbb vc4c
0xcc0: MSTORE vcb7 vcbe
0xcc4: vcc4 = MLOAD v4d7
0xcc6: MSTORE vcbb vcc4
0xcc7: vcc7(0x20) = CONST 
0xcc9: vcc9 = ADD vcc7(0x20) vcbb
0xccd: vccd = MLOAD v4d7
0xccf: vccf(0x20) = CONST 
0xcd1: vcd1 = ADD vccf(0x20) v4d7
0xcd6: vcd6(0x0) = CONST 
----------------------------------

Begin block 0xcd8
prev = {'0xbff', '0xce1'}, next = {'0xcf3', '0xce1'}
----------------------------------
Block 0xcd8
0xcd8_0x0: vcd8_0 = PHI vcd6(0x0) vcec
0xcdb: vcdb = LT vcd8_0 vccd
0xcdc: vcdc = ISZERO vcdb
0xcdd: vcdd(0xcf3) = CONST 
0xce0: JUMPI vcdd(0xcf3) vcdc
----------------------------------

Begin block 0xce1
prev = {'0xcd8'}, next = {'0xcd8'}
----------------------------------
Block 0xce1
0xce1_0x0: vce1_0 = PHI vcd6(0x0) vcec
0xce3: vce3 = ADD vcd1 vce1_0
0xce4: vce4 = MLOAD vce3
0xce7: vce7 = ADD vcc9 vce1_0
0xce8: MSTORE vce7 vce4
0xce9: vce9(0x20) = CONST 
0xcec: vcec = ADD vce1_0 vce9(0x20)
0xcef: vcef(0xcd8) = CONST 
0xcf2: JUMP vcef(0xcd8)
----------------------------------

Begin block 0xcf3
prev = {'0xcd8'}, next = {'0xd20', '0xd07'}
----------------------------------
Block 0xcf3
0xcfc: vcfc = ADD vccd vcc9
0xcfe: vcfe(0x1f) = CONST 
0xd00: vd00 = AND vcfe(0x1f) vccd
0xd02: vd02 = ISZERO vd00
0xd03: vd03(0xd20) = CONST 
0xd06: JUMPI vd03(0xd20) vd02
----------------------------------

Begin block 0xd07
prev = {'0xcf3'}, next = {'0xd20'}
----------------------------------
Block 0xd07
0xd09: vd09 = SUB vcfc vd00
0xd0b: vd0b = MLOAD vd09
0xd0c: vd0c(0x1) = CONST 
0xd0f: vd0f(0x20) = CONST 
0xd11: vd11 = SUB vd0f(0x20) vd00
0xd12: vd12(0x100) = CONST 
0xd15: vd15 = EXP vd12(0x100) vd11
0xd16: vd16 = SUB vd15 vd0c(0x1)
0xd17: vd17 = NOT vd16
0xd18: vd18 = AND vd17 vd0b
0xd1a: MSTORE vd09 vd18
0xd1b: vd1b(0x20) = CONST 
0xd1d: vd1d = ADD vd1b(0x20) vd09
----------------------------------

Begin block 0xd20
prev = {'0xcf3', '0xd07'}, next = {'0xd3e', '0xd42'}
----------------------------------
Block 0xd20
0xd20_0x1: vd20_1 = PHI vcfc vd1d
0xd29: vd29(0x0) = CONST 
0xd2b: vd2b(0x40) = CONST 
0xd2d: vd2d = MLOAD vd2b(0x40)
0xd30: vd30 = SUB vd20_1 vd2d
0xd32: vd32(0x0) = CONST 
0xd36: vd36 = EXTCODESIZE vc15
0xd37: vd37 = ISZERO vd36
0xd39: vd39 = ISZERO vd37
0xd3a: vd3a(0xd42) = CONST 
0xd3d: JUMPI vd3a(0xd42) vd39
----------------------------------

Begin block 0xd3e
prev = {'0xd20'}, next = {}
----------------------------------
Block 0xd3e
0xd3e: vd3e(0x0) = CONST 
0xd41: REVERT vd3e(0x0) vd3e(0x0)
----------------------------------

Begin block 0xd42
prev = {'0xd20'}, next = {'0xd4d', '0xd56'}
----------------------------------
Block 0xd42
0xd44: vd44 = GAS 
0xd45: vd45 = CALL vd44 vc15 vd32(0x0) vd2d vd30 vd2d vd29(0x0)
0xd46: vd46 = ISZERO vd45
0xd48: vd48 = ISZERO vd46
0xd49: vd49(0xd56) = CONST 
0xd4c: JUMPI vd49(0xd56) vd48
----------------------------------

Begin block 0xd4d
prev = {'0xd42'}, next = {}
----------------------------------
Block 0xd4d
0xd4d: vd4d = RETURNDATASIZE 
0xd4e: vd4e(0x0) = CONST 
0xd51: RETURNDATACOPY vd4e(0x0) vd4e(0x0) vd4d
0xd52: vd52 = RETURNDATASIZE 
0xd53: vd53(0x0) = CONST 
0xd55: REVERT vd53(0x0) vd52
----------------------------------

Begin block 0xd56
prev = {'0xd42'}, next = {'0xd64'}
----------------------------------
Block 0xd56
0xd5b: vd5b(0x1) = CONST 
0xd5f: vd5f(0xd64) = CONST 
0xd62: JUMP vd5f(0xd64)
----------------------------------

Begin block 0xd63
prev = {'0xbf9'}, next = {'0xd64'}
----------------------------------
Block 0xd63
----------------------------------

Begin block 0xd64
prev = {'0xd63', '0xd56'}, next = {'0x504'}
----------------------------------
Block 0xd64
0xd6b: JUMP v481(0x504)
----------------------------------

Begin block 0xd6c
prev = {'0x52a'}, next = {'0x57f'}
----------------------------------
Block 0xd6c
0xd6d: vd6d(0x5) = CONST 
0xd6f: vd6f(0x20) = CONST 
0xd71: MSTORE vd6f(0x20) vd6d(0x5)
0xd73: vd73(0x0) = CONST 
0xd75: MSTORE vd73(0x0) v54f
0xd76: vd76(0x40) = CONST 
0xd78: vd78(0x0) = CONST 
0xd7a: vd7a = SHA3 vd78(0x0) vd76(0x40)
0xd7b: vd7b(0x20) = CONST 
0xd7d: MSTORE vd7b(0x20) vd7a
0xd7f: vd7f(0x0) = CONST 
0xd81: MSTORE vd7f(0x0) v56f
0xd82: vd82(0x40) = CONST 
0xd84: vd84(0x0) = CONST 
0xd86: vd86 = SHA3 vd84(0x0) vd82(0x40)
0xd87: vd87(0x0) = CONST 
0xd8e: vd8e = SLOAD vd86
0xd90: JUMP v52c(0x57f)
----------------------------------

Begin block 0xd91
prev = {}, next = {'0xdb4', '0xdb8'}
----------------------------------
function 0xd91(vd91arg0, vd91arg1, vd91arg2, vd91arg3)
Block 0xd91
0xd92: vd92(0x0) = CONST 
0xd96: vd96(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdab: vdab = AND vd96(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xdac: vdac = EQ vdab vd92(0x0)
0xdad: vdad = ISZERO vdac
0xdae: vdae = ISZERO vdad
0xdaf: vdaf = ISZERO vdae
0xdb0: vdb0(0xdb8) = CONST 
0xdb3: JUMPI vdb0(0xdb8) vdaf
----------------------------------

Begin block 0xdb4
prev = {'0xd91'}, next = {}
----------------------------------
Block 0xdb4
0xdb4: vdb4(0x0) = CONST 
0xdb7: REVERT vdb4(0x0) vdb4(0x0)
----------------------------------

Begin block 0xdb8
prev = {'0xd91'}, next = {'0xe02', '0xe06'}
----------------------------------
Block 0xdb8
0xdba: vdba(0x4) = CONST 
0xdbc: vdbc(0x0) = CONST 
0xdbf: vdbf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdd4: vdd4 = AND vdbf(0xffffffffffffffffffffffffffffffffffffffff) vd91arg2
0xdd5: vdd5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdea: vdea = AND vdd5(0xffffffffffffffffffffffffffffffffffffffff) vdd4
0xdec: MSTORE vdbc(0x0) vdea
0xded: vded(0x20) = CONST 
0xdef: vdef(0x20) = ADD vded(0x20) vdbc(0x0)
0xdf2: MSTORE vdef(0x20) vdba(0x4)
0xdf3: vdf3(0x20) = CONST 
0xdf5: vdf5(0x40) = ADD vdf3(0x20) vdef(0x20)
0xdf6: vdf6(0x0) = CONST 
0xdf8: vdf8 = SHA3 vdf6(0x0) vdf5(0x40)
0xdf9: vdf9 = SLOAD vdf8
0xdfa: vdfa = LT vdf9 vd91arg0
0xdfb: vdfb = ISZERO vdfa
0xdfc: vdfc = ISZERO vdfb
0xdfd: vdfd = ISZERO vdfc
0xdfe: vdfe(0xe06) = CONST 
0xe01: JUMPI vdfe(0xe06) vdfd
----------------------------------

Begin block 0xe02
prev = {'0xdb8'}, next = {}
----------------------------------
Block 0xe02
0xe02: ve02(0x0) = CONST 
0xe05: REVERT ve02(0x0) ve02(0x0)
----------------------------------

Begin block 0xe06
prev = {'0xdb8'}, next = {'0xe94', '0xe90'}
----------------------------------
Block 0xe06
0xe07: ve07(0x4) = CONST 
0xe09: ve09(0x0) = CONST 
0xe0c: ve0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe21: ve21 = AND ve0c(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xe22: ve22(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe37: ve37 = AND ve22(0xffffffffffffffffffffffffffffffffffffffff) ve21
0xe39: MSTORE ve09(0x0) ve37
0xe3a: ve3a(0x20) = CONST 
0xe3c: ve3c(0x20) = ADD ve3a(0x20) ve09(0x0)
0xe3f: MSTORE ve3c(0x20) ve07(0x4)
0xe40: ve40(0x20) = CONST 
0xe42: ve42(0x40) = ADD ve40(0x20) ve3c(0x20)
0xe43: ve43(0x0) = CONST 
0xe45: ve45 = SHA3 ve43(0x0) ve42(0x40)
0xe46: ve46 = SLOAD ve45
0xe48: ve48(0x4) = CONST 
0xe4a: ve4a(0x0) = CONST 
0xe4d: ve4d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe62: ve62 = AND ve4d(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xe63: ve63(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe78: ve78 = AND ve63(0xffffffffffffffffffffffffffffffffffffffff) ve62
0xe7a: MSTORE ve4a(0x0) ve78
0xe7b: ve7b(0x20) = CONST 
0xe7d: ve7d(0x20) = ADD ve7b(0x20) ve4a(0x0)
0xe80: MSTORE ve7d(0x20) ve48(0x4)
0xe81: ve81(0x20) = CONST 
0xe83: ve83(0x40) = ADD ve81(0x20) ve7d(0x20)
0xe84: ve84(0x0) = CONST 
0xe86: ve86 = SHA3 ve84(0x0) ve83(0x40)
0xe87: ve87 = SLOAD ve86
0xe88: ve88 = ADD ve87 vd91arg0
0xe89: ve89 = GT ve88 ve46
0xe8a: ve8a = ISZERO ve89
0xe8b: ve8b = ISZERO ve8a
0xe8c: ve8c(0xe94) = CONST 
0xe8f: JUMPI ve8c(0xe94) ve8b
----------------------------------

Begin block 0xe90
prev = {'0xe06'}, next = {}
----------------------------------
Block 0xe90
0xe90: ve90(0x0) = CONST 
0xe93: REVERT ve90(0x0) ve90(0x0)
----------------------------------

Begin block 0xe94
prev = {'0xe06'}, next = {'0x10a0', '0x10a1'}
----------------------------------
Block 0xe94
0xe95: ve95(0x4) = CONST 
0xe97: ve97(0x0) = CONST 
0xe9a: ve9a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeaf: veaf = AND ve9a(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xeb0: veb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xec5: vec5 = AND veb0(0xffffffffffffffffffffffffffffffffffffffff) veaf
0xec7: MSTORE ve97(0x0) vec5
0xec8: vec8(0x20) = CONST 
0xeca: veca(0x20) = ADD vec8(0x20) ve97(0x0)
0xecd: MSTORE veca(0x20) ve95(0x4)
0xece: vece(0x20) = CONST 
0xed0: ved0(0x40) = ADD vece(0x20) veca(0x20)
0xed1: ved1(0x0) = CONST 
0xed3: ved3 = SHA3 ved1(0x0) ved0(0x40)
0xed4: ved4 = SLOAD ved3
0xed5: ved5(0x4) = CONST 
0xed7: ved7(0x0) = CONST 
0xeda: veda(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeef: veef = AND veda(0xffffffffffffffffffffffffffffffffffffffff) vd91arg2
0xef0: vef0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf05: vf05 = AND vef0(0xffffffffffffffffffffffffffffffffffffffff) veef
0xf07: MSTORE ved7(0x0) vf05
0xf08: vf08(0x20) = CONST 
0xf0a: vf0a(0x20) = ADD vf08(0x20) ved7(0x0)
0xf0d: MSTORE vf0a(0x20) ved5(0x4)
0xf0e: vf0e(0x20) = CONST 
0xf10: vf10(0x40) = ADD vf0e(0x20) vf0a(0x20)
0xf11: vf11(0x0) = CONST 
0xf13: vf13 = SHA3 vf11(0x0) vf10(0x40)
0xf14: vf14 = SLOAD vf13
0xf15: vf15 = ADD vf14 ved4
0xf19: vf19(0x4) = CONST 
0xf1b: vf1b(0x0) = CONST 
0xf1e: vf1e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf33: vf33 = AND vf1e(0xffffffffffffffffffffffffffffffffffffffff) vd91arg2
0xf34: vf34(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf49: vf49 = AND vf34(0xffffffffffffffffffffffffffffffffffffffff) vf33
0xf4b: MSTORE vf1b(0x0) vf49
0xf4c: vf4c(0x20) = CONST 
0xf4e: vf4e(0x20) = ADD vf4c(0x20) vf1b(0x0)
0xf51: MSTORE vf4e(0x20) vf19(0x4)
0xf52: vf52(0x20) = CONST 
0xf54: vf54(0x40) = ADD vf52(0x20) vf4e(0x20)
0xf55: vf55(0x0) = CONST 
0xf57: vf57 = SHA3 vf55(0x0) vf54(0x40)
0xf58: vf58(0x0) = CONST 
0xf5c: vf5c = SLOAD vf57
0xf5d: vf5d = SUB vf5c vd91arg0
0xf63: SSTORE vf57 vf5d
0xf66: vf66(0x4) = CONST 
0xf68: vf68(0x0) = CONST 
0xf6b: vf6b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf80: vf80 = AND vf6b(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xf81: vf81(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf96: vf96 = AND vf81(0xffffffffffffffffffffffffffffffffffffffff) vf80
0xf98: MSTORE vf68(0x0) vf96
0xf99: vf99(0x20) = CONST 
0xf9b: vf9b(0x20) = ADD vf99(0x20) vf68(0x0)
0xf9e: MSTORE vf9b(0x20) vf66(0x4)
0xf9f: vf9f(0x20) = CONST 
0xfa1: vfa1(0x40) = ADD vf9f(0x20) vf9b(0x20)
0xfa2: vfa2(0x0) = CONST 
0xfa4: vfa4 = SHA3 vfa2(0x0) vfa1(0x40)
0xfa5: vfa5(0x0) = CONST 
0xfa9: vfa9 = SLOAD vfa4
0xfaa: vfaa = ADD vfa9 vd91arg0
0xfb0: SSTORE vfa4 vfaa
0xfb3: vfb3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfc8: vfc8 = AND vfb3(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0xfca: vfca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfdf: vfdf = AND vfca(0xffffffffffffffffffffffffffffffffffffffff) vd91arg2
0xfe0: vfe0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1002: v1002(0x40) = CONST 
0x1004: v1004 = MLOAD v1002(0x40)
0x1008: MSTORE v1004 vd91arg0
0x1009: v1009(0x20) = CONST 
0x100b: v100b = ADD v1009(0x20) v1004
0x100f: v100f(0x40) = CONST 
0x1011: v1011 = MLOAD v100f(0x40)
0x1014: v1014 = SUB v100b v1011
0x1016: LOG3 v1011 v1014 vfe0(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vfdf vfc8
0x1018: v1018(0x4) = CONST 
0x101a: v101a(0x0) = CONST 
0x101d: v101d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1032: v1032 = AND v101d(0xffffffffffffffffffffffffffffffffffffffff) vd91arg1
0x1033: v1033(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1048: v1048 = AND v1033(0xffffffffffffffffffffffffffffffffffffffff) v1032
0x104a: MSTORE v101a(0x0) v1048
0x104b: v104b(0x20) = CONST 
0x104d: v104d(0x20) = ADD v104b(0x20) v101a(0x0)
0x1050: MSTORE v104d(0x20) v1018(0x4)
0x1051: v1051(0x20) = CONST 
0x1053: v1053(0x40) = ADD v1051(0x20) v104d(0x20)
0x1054: v1054(0x0) = CONST 
0x1056: v1056 = SHA3 v1054(0x0) v1053(0x40)
0x1057: v1057 = SLOAD v1056
0x1058: v1058(0x4) = CONST 
0x105a: v105a(0x0) = CONST 
0x105d: v105d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1072: v1072 = AND v105d(0xffffffffffffffffffffffffffffffffffffffff) vd91arg2
0x1073: v1073(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1088: v1088 = AND v1073(0xffffffffffffffffffffffffffffffffffffffff) v1072
0x108a: MSTORE v105a(0x0) v1088
0x108b: v108b(0x20) = CONST 
0x108d: v108d(0x20) = ADD v108b(0x20) v105a(0x0)
0x1090: MSTORE v108d(0x20) v1058(0x4)
0x1091: v1091(0x20) = CONST 
0x1093: v1093(0x40) = ADD v1091(0x20) v108d(0x20)
0x1094: v1094(0x0) = CONST 
0x1096: v1096 = SHA3 v1094(0x0) v1093(0x40)
0x1097: v1097 = SLOAD v1096
0x1098: v1098 = ADD v1097 v1057
0x1099: v1099 = EQ v1098 vf15
0x109a: v109a = ISZERO v1099
0x109b: v109b = ISZERO v109a
0x109c: v109c(0x10a1) = CONST 
0x109f: JUMPI v109c(0x10a1) v109b
----------------------------------

Begin block 0x10a0
prev = {'0xe94'}, next = {}
----------------------------------
Block 0x10a0
0x10a0: THROW 
----------------------------------

Begin block 0x10a1
prev = {'0xe94'}, next = {}
----------------------------------
Block 0x10a1
0x10a6: RETURNPRIVATE vd91arg3
----------------------------------

Begin block 0x10d1
prev = {'0x0', '0xaf'}, next = {}
----------------------------------
Block 0x10d1
0x10d2: v10d2(0xba) = CONST 
0x10d3: CALLPRIVATE v10d2(0xba)
----------------------------------

Begin block 0x10d4
prev = {'0xd'}, next = {}
----------------------------------
Block 0x10d4
0x10d5: v10d5(0xbf) = CONST 
0x10d6: CALLPRIVATE v10d5(0xbf)
----------------------------------

Begin block 0x10d7
prev = {'0x41'}, next = {}
----------------------------------
Block 0x10d7
0x10d8: v10d8(0x14f) = CONST 
0x10d9: CALLPRIVATE v10d8(0x14f)
----------------------------------

Begin block 0x10da
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x10da
0x10db: v10db(0x1b4) = CONST 
0x10dc: CALLPRIVATE v10db(0x1b4)
----------------------------------

Begin block 0x10dd
prev = {'0x57'}, next = {}
----------------------------------
Block 0x10dd
0x10de: v10de(0x1df) = CONST 
0x10df: CALLPRIVATE v10de(0x1df)
----------------------------------

Begin block 0x10e0
prev = {'0x62'}, next = {}
----------------------------------
Block 0x10e0
0x10e1: v10e1(0x264) = CONST 
0x10e2: CALLPRIVATE v10e1(0x264)
----------------------------------

Begin block 0x10e3
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x10e3
0x10e4: v10e4(0x295) = CONST 
0x10e5: CALLPRIVATE v10e4(0x295)
----------------------------------

Begin block 0x10e6
prev = {'0x78'}, next = {}
----------------------------------
Block 0x10e6
0x10e7: v10e7(0x2da) = CONST 
0x10e8: CALLPRIVATE v10e7(0x2da)
----------------------------------

Begin block 0x10e9
prev = {'0x83'}, next = {}
----------------------------------
Block 0x10e9
0x10ea: v10ea(0x331) = CONST 
0x10eb: CALLPRIVATE v10ea(0x331)
----------------------------------

Begin block 0x10ec
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x10ec
0x10ed: v10ed(0x396) = CONST 
0x10ee: CALLPRIVATE v10ed(0x396)
----------------------------------

Begin block 0x10ef
prev = {'0x99'}, next = {}
----------------------------------
Block 0x10ef
0x10f0: v10f0(0x426) = CONST 
0x10f1: CALLPRIVATE v10f0(0x426)
----------------------------------

Begin block 0x10f2
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x10f2
0x10f3: v10f3(0x473) = CONST 
0x10f4: CALLPRIVATE v10f3(0x473)
----------------------------------

Begin block 0x10f5
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x10f5
0x10f6: v10f6(0x51e) = CONST 
0x10f7: CALLPRIVATE v10f6(0x51e)
----------------------------------
