
Begin block 0x0
prev = {}, next = {'0x1379', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x1349: v1349(0x1379) = CONST 
0x134a: JUMPI v1349(0x1379) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x137c', '0x40'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0x134b: v134b(0x137c) = CONST 
0x134c: JUMPI v134b(0x137c) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0x4b', '0x137f'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0x134d: v134d(0x137f) = CONST 
0x134e: JUMPI v134d(0x137f) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0x56', '0x1382'}
----------------------------------
Block 0x4b
0x4c: v4c(0x1525ee4e) = CONST 
0x51: v51 = EQ v4c(0x1525ee4e) v34
0x134f: v134f(0x1382) = CONST 
0x1350: JUMPI v134f(0x1382) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x1385', '0x61'}
----------------------------------
Block 0x56
0x57: v57(0x18160ddd) = CONST 
0x5c: v5c = EQ v57(0x18160ddd) v34
0x1351: v1351(0x1385) = CONST 
0x1352: JUMPI v1351(0x1385) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x6c', '0x1388'}
----------------------------------
Block 0x61
0x62: v62(0x1e50cfbd) = CONST 
0x67: v67 = EQ v62(0x1e50cfbd) v34
0x1353: v1353(0x1388) = CONST 
0x1354: JUMPI v1353(0x1388) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0x77', '0x138b'}
----------------------------------
Block 0x6c
0x6d: v6d(0x23b872dd) = CONST 
0x72: v72 = EQ v6d(0x23b872dd) v34
0x1355: v1355(0x138b) = CONST 
0x1356: JUMPI v1355(0x138b) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0x138e', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x313ce567) = CONST 
0x7d: v7d = EQ v78(0x313ce567) v34
0x1357: v1357(0x138e) = CONST 
0x1358: JUMPI v1357(0x138e) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0x8d', '0x1391'}
----------------------------------
Block 0x82
0x83: v83(0x3336dbf3) = CONST 
0x88: v88 = EQ v83(0x3336dbf3) v34
0x1359: v1359(0x1391) = CONST 
0x135a: JUMPI v1359(0x1391) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x1394', '0x98'}
----------------------------------
Block 0x8d
0x8e: v8e(0x39509351) = CONST 
0x93: v93 = EQ v8e(0x39509351) v34
0x135b: v135b(0x1394) = CONST 
0x135c: JUMPI v135b(0x1394) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0xa3', '0x1397'}
----------------------------------
Block 0x98
0x99: v99(0x40c10f19) = CONST 
0x9e: v9e = EQ v99(0x40c10f19) v34
0x135d: v135d(0x1397) = CONST 
0x135e: JUMPI v135d(0x1397) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0x139a', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0x42966c68) = CONST 
0xa9: va9 = EQ va4(0x42966c68) v34
0x135f: v135f(0x139a) = CONST 
0x1360: JUMPI v135f(0x139a) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0x139d'}
----------------------------------
Block 0xae
0xaf: vaf(0x4334614a) = CONST 
0xb4: vb4 = EQ vaf(0x4334614a) v34
0x1361: v1361(0x139d) = CONST 
0x1362: JUMPI v1361(0x139d) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0x13a0', '0xc4'}
----------------------------------
Block 0xb9
0xba: vba(0x70a08231) = CONST 
0xbf: vbf = EQ vba(0x70a08231) v34
0x1363: v1363(0x13a0) = CONST 
0x1364: JUMPI v1363(0x13a0) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0x13a3', '0xcf'}
----------------------------------
Block 0xc4
0xc5: vc5(0x79cc6790) = CONST 
0xca: vca = EQ vc5(0x79cc6790) v34
0x1365: v1365(0x13a3) = CONST 
0x1366: JUMPI v1365(0x13a3) vca
----------------------------------

Begin block 0xcf
prev = {'0xc4'}, next = {'0x13a6', '0xda'}
----------------------------------
Block 0xcf
0xd0: vd0(0x95d89b41) = CONST 
0xd5: vd5 = EQ vd0(0x95d89b41) v34
0x1367: v1367(0x13a6) = CONST 
0x1368: JUMPI v1367(0x13a6) vd5
----------------------------------

Begin block 0xda
prev = {'0xcf'}, next = {'0x13a9', '0xe5'}
----------------------------------
Block 0xda
0xdb: vdb(0x983b2d56) = CONST 
0xe0: ve0 = EQ vdb(0x983b2d56) v34
0x1369: v1369(0x13a9) = CONST 
0x136a: JUMPI v1369(0x13a9) ve0
----------------------------------

Begin block 0xe5
prev = {'0xda'}, next = {'0xf0', '0x13ac'}
----------------------------------
Block 0xe5
0xe6: ve6(0x98650275) = CONST 
0xeb: veb = EQ ve6(0x98650275) v34
0x136b: v136b(0x13ac) = CONST 
0x136c: JUMPI v136b(0x13ac) veb
----------------------------------

Begin block 0xf0
prev = {'0xe5'}, next = {'0x13af', '0xfb'}
----------------------------------
Block 0xf0
0xf1: vf1(0xa457c2d7) = CONST 
0xf6: vf6 = EQ vf1(0xa457c2d7) v34
0x136d: v136d(0x13af) = CONST 
0x136e: JUMPI v136d(0x13af) vf6
----------------------------------

Begin block 0xfb
prev = {'0xf0'}, next = {'0x106', '0x13b2'}
----------------------------------
Block 0xfb
0xfc: vfc(0xa9059cbb) = CONST 
0x101: v101 = EQ vfc(0xa9059cbb) v34
0x136f: v136f(0x13b2) = CONST 
0x1370: JUMPI v136f(0x13b2) v101
----------------------------------

Begin block 0x106
prev = {'0xfb'}, next = {'0x13b5', '0x111'}
----------------------------------
Block 0x106
0x107: v107(0xaa271e1a) = CONST 
0x10c: v10c = EQ v107(0xaa271e1a) v34
0x1371: v1371(0x13b5) = CONST 
0x1372: JUMPI v1371(0x13b5) v10c
----------------------------------

Begin block 0x111
prev = {'0x106'}, next = {'0x11c', '0x13b8'}
----------------------------------
Block 0x111
0x112: v112(0xdd62ed3e) = CONST 
0x117: v117 = EQ v112(0xdd62ed3e) v34
0x1373: v1373(0x13b8) = CONST 
0x1374: JUMPI v1373(0x13b8) v117
----------------------------------

Begin block 0x11c
prev = {'0x111'}, next = {'0x13bb', '0x127'}
----------------------------------
Block 0x11c
0x11d: v11d(0xe9ec9e8b) = CONST 
0x122: v122 = EQ v11d(0xe9ec9e8b) v34
0x1375: v1375(0x13bb) = CONST 
0x1376: JUMPI v1375(0x13bb) v122
----------------------------------

Begin block 0x127
prev = {'0x11c'}, next = {'0x1379', '0x13be'}
----------------------------------
Block 0x127
0x128: v128(0xf44637ba) = CONST 
0x12d: v12d = EQ v128(0xf44637ba) v34
0x1377: v1377(0x13be) = CONST 
0x1378: JUMPI v1377(0x13be) v12d
----------------------------------

Begin block 0x132
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x132
0x133: v133(0x0) = CONST 
0x136: REVERT v133(0x0) v133(0x0)
----------------------------------

Begin block 0x137
prev = {}, next = {'0x13f', '0x143'}
----------------------------------
function name()()
Block 0x137
0x138: v138 = CALLVALUE 
0x13a: v13a = ISZERO v138
0x13b: v13b(0x143) = CONST 
0x13e: JUMPI v13b(0x143) v13a
----------------------------------

Begin block 0x13f
prev = {'0x137'}, next = {}
----------------------------------
Block 0x13f
0x13f: v13f(0x0) = CONST 
0x142: REVERT v13f(0x0) v13f(0x0)
----------------------------------

Begin block 0x143
prev = {'0x137'}, next = {'0x14c0x137'}
----------------------------------
Block 0x143
0x145: v145(0x14c) = CONST 
0x148: v148(0x612) = CONST 
0x14b: v14b_0 = CALLPRIVATE v148(0x612) v145(0x14c)
----------------------------------

Begin block 0x14c0x137
prev = {'0x143'}, next = {'0x16e0x137'}
----------------------------------
Block 0x14c0x137
0x14d0x137: v13714d(0x40) = CONST 
0x1500x137: v137150 = MLOAD v13714d(0x40)
0x1510x137: v137151(0x20) = CONST 
0x1550x137: MSTORE v137150 v137151(0x20)
0x1570x137: v137157 = MLOAD v14b_0
0x15a0x137: v13715a = ADD v137150 v137151(0x20)
0x15b0x137: MSTORE v13715a v137157
0x15d0x137: v13715d = MLOAD v14b_0
0x1640x137: v137164 = ADD v137150 v13714d(0x40)
0x1670x137: v137167 = ADD v14b_0 v137151(0x20)
0x16c0x137: v13716c(0x0) = CONST 
----------------------------------

Begin block 0x14c0x48b
prev = {'0x497'}, next = {'0x16e0x48b'}
----------------------------------
Block 0x14c0x48b
0x14d0x48b: v48b14d(0x40) = CONST 
0x1500x48b: v48b150 = MLOAD v48b14d(0x40)
0x1510x48b: v48b151(0x20) = CONST 
0x1550x48b: MSTORE v48b150 v48b151(0x20)
0x1570x48b: v48b157 = MLOAD v49f_0
0x15a0x48b: v48b15a = ADD v48b150 v48b151(0x20)
0x15b0x48b: MSTORE v48b15a v48b157
0x15d0x48b: v48b15d = MLOAD v49f_0
0x1640x48b: v48b164 = ADD v48b150 v48b14d(0x40)
0x1670x48b: v48b167 = ADD v49f_0 v48b151(0x20)
0x16c0x48b: v48b16c(0x0) = CONST 
----------------------------------

Begin block 0x16e0x137
prev = {'0x1770x137', '0x14c0x137'}, next = {'0x1860x137', '0x1770x137'}
----------------------------------
Block 0x16e0x137
0x16e0x137_0x0: v16e137_0 = PHI v13716c(0x0) v137181
0x1710x137: v137171 = LT v16e137_0 v13715d
0x1720x137: v137172 = ISZERO v137171
0x1730x137: v137173(0x186) = CONST 
0x1760x137: JUMPI v137173(0x186) v137172
----------------------------------

Begin block 0x16e0x48b
prev = {'0x14c0x48b', '0x1770x48b'}, next = {'0x1860x48b', '0x1770x48b'}
----------------------------------
Block 0x16e0x48b
0x16e0x48b_0x0: v16e48b_0 = PHI v48b16c(0x0) v48b181
0x1710x48b: v48b171 = LT v16e48b_0 v48b15d
0x1720x48b: v48b172 = ISZERO v48b171
0x1730x48b: v48b173(0x186) = CONST 
0x1760x48b: JUMPI v48b173(0x186) v48b172
----------------------------------

Begin block 0x1770x137
prev = {'0x16e0x137'}, next = {'0x16e0x137'}
----------------------------------
Block 0x1770x137
0x1770x137_0x0: v177137_0 = PHI v13716c(0x0) v137181
0x1790x137: v137179 = ADD v177137_0 v137167
0x17a0x137: v13717a = MLOAD v137179
0x17d0x137: v13717d = ADD v177137_0 v137164
0x17e0x137: MSTORE v13717d v13717a
0x17f0x137: v13717f(0x20) = CONST 
0x1810x137: v137181 = ADD v13717f(0x20) v177137_0
0x1820x137: v137182(0x16e) = CONST 
0x1850x137: JUMP v137182(0x16e)
----------------------------------

Begin block 0x1770x48b
prev = {'0x16e0x48b'}, next = {'0x16e0x48b'}
----------------------------------
Block 0x1770x48b
0x1770x48b_0x0: v17748b_0 = PHI v48b16c(0x0) v48b181
0x1790x48b: v48b179 = ADD v17748b_0 v48b167
0x17a0x48b: v48b17a = MLOAD v48b179
0x17d0x48b: v48b17d = ADD v17748b_0 v48b164
0x17e0x48b: MSTORE v48b17d v48b17a
0x17f0x48b: v48b17f(0x20) = CONST 
0x1810x48b: v48b181 = ADD v48b17f(0x20) v17748b_0
0x1820x48b: v48b182(0x16e) = CONST 
0x1850x48b: JUMP v48b182(0x16e)
----------------------------------

Begin block 0x1860x137
prev = {'0x16e0x137'}, next = {'0x1b30x137', '0x19a0x137'}
----------------------------------
Block 0x1860x137
0x18f0x137: v13718f = ADD v13715d v137164
0x1910x137: v137191(0x1f) = CONST 
0x1930x137: v137193 = AND v137191(0x1f) v13715d
0x1950x137: v137195 = ISZERO v137193
0x1960x137: v137196(0x1b3) = CONST 
0x1990x137: JUMPI v137196(0x1b3) v137195
----------------------------------

Begin block 0x1860x48b
prev = {'0x16e0x48b'}, next = {'0x1b30x48b', '0x19a0x48b'}
----------------------------------
Block 0x1860x48b
0x18f0x48b: v48b18f = ADD v48b15d v48b164
0x1910x48b: v48b191(0x1f) = CONST 
0x1930x48b: v48b193 = AND v48b191(0x1f) v48b15d
0x1950x48b: v48b195 = ISZERO v48b193
0x1960x48b: v48b196(0x1b3) = CONST 
0x1990x48b: JUMPI v48b196(0x1b3) v48b195
----------------------------------

Begin block 0x19a0x137
prev = {'0x1860x137'}, next = {'0x1b30x137'}
----------------------------------
Block 0x19a0x137
0x19c0x137: v13719c = SUB v13718f v137193
0x19e0x137: v13719e = MLOAD v13719c
0x19f0x137: v13719f(0x1) = CONST 
0x1a20x137: v1371a2(0x20) = CONST 
0x1a40x137: v1371a4 = SUB v1371a2(0x20) v137193
0x1a50x137: v1371a5(0x100) = CONST 
0x1a80x137: v1371a8 = EXP v1371a5(0x100) v1371a4
0x1a90x137: v1371a9 = SUB v1371a8 v13719f(0x1)
0x1aa0x137: v1371aa = NOT v1371a9
0x1ab0x137: v1371ab = AND v1371aa v13719e
0x1ad0x137: MSTORE v13719c v1371ab
0x1ae0x137: v1371ae(0x20) = CONST 
0x1b00x137: v1371b0 = ADD v1371ae(0x20) v13719c
----------------------------------

Begin block 0x19a0x48b
prev = {'0x1860x48b'}, next = {'0x1b30x48b'}
----------------------------------
Block 0x19a0x48b
0x19c0x48b: v48b19c = SUB v48b18f v48b193
0x19e0x48b: v48b19e = MLOAD v48b19c
0x19f0x48b: v48b19f(0x1) = CONST 
0x1a20x48b: v48b1a2(0x20) = CONST 
0x1a40x48b: v48b1a4 = SUB v48b1a2(0x20) v48b193
0x1a50x48b: v48b1a5(0x100) = CONST 
0x1a80x48b: v48b1a8 = EXP v48b1a5(0x100) v48b1a4
0x1a90x48b: v48b1a9 = SUB v48b1a8 v48b19f(0x1)
0x1aa0x48b: v48b1aa = NOT v48b1a9
0x1ab0x48b: v48b1ab = AND v48b1aa v48b19e
0x1ad0x48b: MSTORE v48b19c v48b1ab
0x1ae0x48b: v48b1ae(0x20) = CONST 
0x1b00x48b: v48b1b0 = ADD v48b1ae(0x20) v48b19c
----------------------------------

Begin block 0x1b30x137
prev = {'0x1860x137', '0x19a0x137'}, next = {}
----------------------------------
Block 0x1b30x137
0x1b30x137_0x1: v1b3137_1 = PHI v13718f v1371b0
0x1b90x137: v1371b9(0x40) = CONST 
0x1bb0x137: v1371bb = MLOAD v1371b9(0x40)
0x1be0x137: v1371be = SUB v1b3137_1 v1371bb
0x1c00x137: RETURN v1371bb v1371be
----------------------------------

Begin block 0x1b30x48b
prev = {'0x1860x48b', '0x19a0x48b'}, next = {}
----------------------------------
Block 0x1b30x48b
0x1b30x48b_0x1: v1b348b_1 = PHI v48b18f v48b1b0
0x1b90x48b: v48b1b9(0x40) = CONST 
0x1bb0x48b: v48b1bb = MLOAD v48b1b9(0x40)
0x1be0x48b: v48b1be = SUB v1b348b_1 v48b1bb
0x1c00x48b: RETURN v48b1bb v48b1be
----------------------------------

Begin block 0x1c1
prev = {}, next = {'0x1c9', '0x1cd'}
----------------------------------
function approve(address,uint256)()
Block 0x1c1
0x1c2: v1c2 = CALLVALUE 
0x1c4: v1c4 = ISZERO v1c2
0x1c5: v1c5(0x1cd) = CONST 
0x1c8: JUMPI v1c5(0x1cd) v1c4
----------------------------------

Begin block 0x1c9
prev = {'0x1c1'}, next = {}
----------------------------------
Block 0x1c9
0x1c9: v1c9(0x0) = CONST 
0x1cc: REVERT v1c9(0x0) v1c9(0x0)
----------------------------------

Begin block 0x1cd
prev = {'0x1c1'}, next = {'0x1e4', '0x1e0'}
----------------------------------
Block 0x1cd
0x1cf: v1cf(0x1fa) = CONST 
0x1d2: v1d2(0x4) = CONST 
0x1d5: v1d5 = CALLDATASIZE 
0x1d6: v1d6 = SUB v1d5 v1d2(0x4)
0x1d7: v1d7(0x40) = CONST 
0x1da: v1da = LT v1d6 v1d7(0x40)
0x1db: v1db = ISZERO v1da
0x1dc: v1dc(0x1e4) = CONST 
0x1df: JUMPI v1dc(0x1e4) v1db
----------------------------------

Begin block 0x1e0
prev = {'0x1cd'}, next = {}
----------------------------------
Block 0x1e0
0x1e0: v1e0(0x0) = CONST 
0x1e3: REVERT v1e0(0x0) v1e0(0x0)
----------------------------------

Begin block 0x1e4
prev = {'0x1cd'}, next = {'0x6a8'}
----------------------------------
Block 0x1e4
0x1e6: v1e6(0x1) = CONST 
0x1e8: v1e8(0xa0) = CONST 
0x1ea: v1ea(0x2) = CONST 
0x1ec: v1ec(0x10000000000000000000000000000000000000000) = EXP v1ea(0x2) v1e8(0xa0)
0x1ed: v1ed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1ec(0x10000000000000000000000000000000000000000) v1e6(0x1)
0x1ef: v1ef = CALLDATALOAD v1d2(0x4)
0x1f0: v1f0 = AND v1ef v1ed(0xffffffffffffffffffffffffffffffffffffffff)
0x1f2: v1f2(0x20) = CONST 
0x1f4: v1f4 = ADD v1f2(0x20) v1d2(0x4)
0x1f5: v1f5 = CALLDATALOAD v1f4
0x1f6: v1f6(0x6a8) = CONST 
0x1f9: JUMP v1f6(0x6a8)
----------------------------------

Begin block 0x1fa0x1c1
prev = {'0x6bf'}, next = {}
----------------------------------
Block 0x1fa0x1c1
0x1fb0x1c1: v1c11fb(0x40) = CONST 
0x1fe0x1c1: v1c11fe = MLOAD v1c11fb(0x40)
0x2000x1c1: v1c1200 = ISZERO v71f(0x1)
0x2010x1c1: v1c1201 = ISZERO v1c1200
0x2030x1c1: MSTORE v1c11fe v1c1201
0x2040x1c1: v1c1204 = MLOAD v1c11fb(0x40)
0x2080x1c1: v1c1208 = SUB v1c11fe v1c1204
0x2090x1c1: v1c1209(0x20) = CONST 
0x20b0x1c1: v1c120b = ADD v1c1209(0x20) v1c1208
0x20d0x1c1: RETURN v1c1204 v1c120b
----------------------------------

Begin block 0x1fa0x270
prev = {'0x7ed0x270'}, next = {}
----------------------------------
Block 0x1fa0x270
0x1fb0x270: v2701fb(0x40) = CONST 
0x1fe0x270: v2701fe = MLOAD v2701fb(0x40)
0x2000x270: v270200 = ISZERO v27084b(0x1)
0x2010x270: v270201 = ISZERO v270200
0x2030x270: MSTORE v2701fe v270201
0x2040x270: v270204 = MLOAD v2701fb(0x40)
0x2080x270: v270208 = SUB v2701fe v270204
0x2090x270: v270209(0x20) = CONST 
0x20b0x270: v27020b = ADD v270209(0x20) v270208
0x20d0x270: RETURN v270204 v27020b
----------------------------------

Begin block 0x1fa0x2a9
prev = {'0x8b5'}, next = {}
----------------------------------
Block 0x1fa0x2a9
0x1fb0x2a9: v2a91fb(0x40) = CONST 
0x1fe0x2a9: v2a91fe = MLOAD v2a91fb(0x40)
0x2000x2a9: v2a9200 = ISZERO v913(0x1)
0x2010x2a9: v2a9201 = ISZERO v2a9200
0x2030x2a9: MSTORE v2a91fe v2a9201
0x2040x2a9: v2a9204 = MLOAD v2a91fb(0x40)
0x2080x2a9: v2a9208 = SUB v2a91fe v2a9204
0x2090x2a9: v2a9209(0x20) = CONST 
0x20b0x2a9: v2a920b = ADD v2a9209(0x20) v2a9208
0x20d0x2a9: RETURN v2a9204 v2a920b
----------------------------------

Begin block 0x1fa0x317
prev = {'0x7ed0x317'}, next = {}
----------------------------------
Block 0x1fa0x317
0x1fb0x317: v3171fb(0x40) = CONST 
0x1fe0x317: v3171fe = MLOAD v3171fb(0x40)
0x2000x317: v317200 = ISZERO v31784b(0x1)
0x2010x317: v317201 = ISZERO v317200
0x2030x317: MSTORE v3171fe v317201
0x2040x317: v317204 = MLOAD v3171fb(0x40)
0x2080x317: v317208 = SUB v3171fe v317204
0x2090x317: v317209(0x20) = CONST 
0x20b0x317: v31720b = ADD v317209(0x20) v317208
0x20d0x317: RETURN v317204 v31720b
----------------------------------

Begin block 0x1fa0x350
prev = {'0xa050x350'}, next = {}
----------------------------------
Block 0x1fa0x350
0x1fb0x350: v3501fb(0x40) = CONST 
0x1fe0x350: v3501fe = MLOAD v3501fb(0x40)
0x2000x350: v350200 = ISZERO v350a63(0x1)
0x2010x350: v350201 = ISZERO v350200
0x2030x350: MSTORE v3501fe v350201
0x2040x350: v350204 = MLOAD v3501fb(0x40)
0x2080x350: v350208 = SUB v3501fe v350204
0x2090x350: v350209(0x20) = CONST 
0x20b0x350: v35020b = ADD v350209(0x20) v350208
0x20d0x350: RETURN v350204 v35020b
----------------------------------

Begin block 0x1fa0x389
prev = {'0xa8a0x389'}, next = {}
----------------------------------
Block 0x1fa0x389
0x1fb0x389: v3891fb(0x40) = CONST 
0x1fe0x389: v3891fe = MLOAD v3891fb(0x40)
0x2000x389: v389200 = ISZERO v389a8c(0x1)
0x2010x389: v389201 = ISZERO v389200
0x2030x389: MSTORE v3891fe v389201
0x2040x389: v389204 = MLOAD v3891fb(0x40)
0x2080x389: v389208 = SUB v3891fe v389204
0x2090x389: v389209(0x20) = CONST 
0x20b0x389: v38920b = ADD v389209(0x20) v389208
0x20d0x389: RETURN v389204 v38920b
----------------------------------

Begin block 0x1fa0x3c2
prev = {'0xb24'}, next = {}
----------------------------------
Block 0x1fa0x3c2
0x1fb0x3c2: v3c21fb(0x40) = CONST 
0x1fe0x3c2: v3c21fe = MLOAD v3c21fb(0x40)
0x2000x3c2: v3c2200 = ISZERO vb26(0x1)
0x2010x3c2: v3c2201 = ISZERO v3c2200
0x2030x3c2: MSTORE v3c21fe v3c2201
0x2040x3c2: v3c2204 = MLOAD v3c21fb(0x40)
0x2080x3c2: v3c2208 = SUB v3c21fe v3c2204
0x2090x3c2: v3c2209(0x20) = CONST 
0x20b0x3c2: v3c220b = ADD v3c2209(0x20) v3c2208
0x20d0x3c2: RETURN v3c2204 v3c220b
----------------------------------

Begin block 0x1fa0x3ec
prev = {'0xb3f0x3ec'}, next = {}
----------------------------------
Block 0x1fa0x3ec
0x1fb0x3ec: v3ec1fb(0x40) = CONST 
0x1fe0x3ec: v3ec1fe = MLOAD v3ec1fb(0x40)
0x2000x3ec: v3ec200 = ISZERO v3ecb3e_0
0x2010x3ec: v3ec201 = ISZERO v3ec200
0x2030x3ec: MSTORE v3ec1fe v3ec201
0x2040x3ec: v3ec204 = MLOAD v3ec1fb(0x40)
0x2080x3ec: v3ec208 = SUB v3ec1fe v3ec204
0x2090x3ec: v3ec209(0x20) = CONST 
0x20b0x3ec: v3ec20b = ADD v3ec209(0x20) v3ec208
0x20d0x3ec: RETURN v3ec204 v3ec20b
----------------------------------

Begin block 0x1fa0x452
prev = {'0xcbd'}, next = {}
----------------------------------
Block 0x1fa0x452
0x1fb0x452: v4521fb(0x40) = CONST 
0x1fe0x452: v4521fe = MLOAD v4521fb(0x40)
0x2000x452: v452200 = ISZERO vd1b(0x1)
0x2010x452: v452201 = ISZERO v452200
0x2030x452: MSTORE v4521fe v452201
0x2040x452: v452204 = MLOAD v4521fb(0x40)
0x2080x452: v452208 = SUB v4521fe v452204
0x2090x452: v452209(0x20) = CONST 
0x20b0x452: v45220b = ADD v452209(0x20) v452208
0x20d0x452: RETURN v452204 v45220b
----------------------------------

Begin block 0x1fa0x4ea
prev = {'0xa050x4ea'}, next = {}
----------------------------------
Block 0x1fa0x4ea
0x1fb0x4ea: v4ea1fb(0x40) = CONST 
0x1fe0x4ea: v4ea1fe = MLOAD v4ea1fb(0x40)
0x2000x4ea: v4ea200 = ISZERO v4eaa63(0x1)
0x2010x4ea: v4ea201 = ISZERO v4ea200
0x2030x4ea: MSTORE v4ea1fe v4ea201
0x2040x4ea: v4ea204 = MLOAD v4ea1fb(0x40)
0x2080x4ea: v4ea208 = SUB v4ea1fe v4ea204
0x2090x4ea: v4ea209(0x20) = CONST 
0x20b0x4ea: v4ea20b = ADD v4ea209(0x20) v4ea208
0x20d0x4ea: RETURN v4ea204 v4ea20b
----------------------------------

Begin block 0x1fa0x523
prev = {'0xa8a0x523'}, next = {}
----------------------------------
Block 0x1fa0x523
0x1fb0x523: v5231fb(0x40) = CONST 
0x1fe0x523: v5231fe = MLOAD v5231fb(0x40)
0x2000x523: v523200 = ISZERO v523a8c(0x1)
0x2010x523: v523201 = ISZERO v523200
0x2030x523: MSTORE v5231fe v523201
0x2040x523: v523204 = MLOAD v5231fb(0x40)
0x2080x523: v523208 = SUB v5231fe v523204
0x2090x523: v523209(0x20) = CONST 
0x20b0x523: v52320b = ADD v523209(0x20) v523208
0x20d0x523: RETURN v523204 v52320b
----------------------------------

Begin block 0x1fa0x55c
prev = {'0xb3f0x55c'}, next = {}
----------------------------------
Block 0x1fa0x55c
0x1fb0x55c: v55c1fb(0x40) = CONST 
0x1fe0x55c: v55c1fe = MLOAD v55c1fb(0x40)
0x2000x55c: v55c200 = ISZERO v55ce1b_0
0x2010x55c: v55c201 = ISZERO v55c200
0x2030x55c: MSTORE v55c1fe v55c201
0x2040x55c: v55c204 = MLOAD v55c1fb(0x40)
0x2080x55c: v55c208 = SUB v55c1fe v55c204
0x2090x55c: v55c209(0x20) = CONST 
0x20b0x55c: v55c20b = ADD v55c209(0x20) v55c208
0x20d0x55c: RETURN v55c204 v55c20b
----------------------------------

Begin block 0x20e
prev = {}, next = {'0x21a', '0x216'}
----------------------------------
function burnAllowance(address,address)()
Block 0x20e
0x20f: v20f = CALLVALUE 
0x211: v211 = ISZERO v20f
0x212: v212(0x21a) = CONST 
0x215: JUMPI v212(0x21a) v211
----------------------------------

Begin block 0x216
prev = {'0x20e'}, next = {}
----------------------------------
Block 0x216
0x216: v216(0x0) = CONST 
0x219: REVERT v216(0x0) v216(0x0)
----------------------------------

Begin block 0x21a
prev = {'0x20e'}, next = {'0x22d', '0x231'}
----------------------------------
Block 0x21a
0x21c: v21c(0x249) = CONST 
0x21f: v21f(0x4) = CONST 
0x222: v222 = CALLDATASIZE 
0x223: v223 = SUB v222 v21f(0x4)
0x224: v224(0x40) = CONST 
0x227: v227 = LT v223 v224(0x40)
0x228: v228 = ISZERO v227
0x229: v229(0x231) = CONST 
0x22c: JUMPI v229(0x231) v228
----------------------------------

Begin block 0x22d
prev = {'0x21a'}, next = {}
----------------------------------
Block 0x22d
0x22d: v22d(0x0) = CONST 
0x230: REVERT v22d(0x0) v22d(0x0)
----------------------------------

Begin block 0x231
prev = {'0x21a'}, next = {'0x7260x20e'}
----------------------------------
Block 0x231
0x233: v233(0x1) = CONST 
0x235: v235(0xa0) = CONST 
0x237: v237(0x2) = CONST 
0x239: v239(0x10000000000000000000000000000000000000000) = EXP v237(0x2) v235(0xa0)
0x23a: v23a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v239(0x10000000000000000000000000000000000000000) v233(0x1)
0x23c: v23c = CALLDATALOAD v21f(0x4)
0x23e: v23e = AND v23a(0xffffffffffffffffffffffffffffffffffffffff) v23c
0x240: v240(0x20) = CONST 
0x242: v242 = ADD v240(0x20) v21f(0x4)
0x243: v243 = CALLDATALOAD v242
0x244: v244 = AND v243 v23a(0xffffffffffffffffffffffffffffffffffffffff)
0x245: v245(0x726) = CONST 
0x248: JUMP v245(0x726)
----------------------------------

Begin block 0x2490x20e
prev = {'0x7260x20e'}, next = {}
----------------------------------
Block 0x2490x20e
0x24a0x20e: v20e24a(0x40) = CONST 
0x24d0x20e: v20e24d = MLOAD v20e24a(0x40)
0x2500x20e: MSTORE v20e24d v20e74e
0x2510x20e: v20e251 = MLOAD v20e24a(0x40)
0x2550x20e: v20e255 = SUB v20e24d v20e251
0x2560x20e: v20e256(0x20) = CONST 
0x2580x20e: v20e258 = ADD v20e256(0x20) v20e255
0x25a0x20e: RETURN v20e251 v20e258
----------------------------------

Begin block 0x2490x25b
prev = {'0x751'}, next = {}
----------------------------------
Block 0x2490x25b
0x24a0x25b: v25b24a(0x40) = CONST 
0x24d0x25b: v25b24d = MLOAD v25b24a(0x40)
0x2500x25b: MSTORE v25b24d v754
0x2510x25b: v25b251 = MLOAD v25b24a(0x40)
0x2550x25b: v25b255 = SUB v25b24d v25b251
0x2560x25b: v25b256(0x20) = CONST 
0x2580x25b: v25b258 = ADD v25b256(0x20) v25b255
0x25a0x25b: RETURN v25b251 v25b258
----------------------------------

Begin block 0x2490x41f
prev = {'0xb45'}, next = {}
----------------------------------
Block 0x2490x41f
0x24a0x41f: v41f24a(0x40) = CONST 
0x24d0x41f: v41f24d = MLOAD v41f24a(0x40)
0x2500x41f: MSTORE v41f24d vb5d
0x2510x41f: v41f251 = MLOAD v41f24a(0x40)
0x2550x41f: v41f255 = SUB v41f24d v41f251
0x2560x41f: v41f256(0x20) = CONST 
0x2580x41f: v41f258 = ADD v41f256(0x20) v41f255
0x25a0x41f: RETURN v41f251 v41f258
----------------------------------

Begin block 0x2490x58f
prev = {'0xe1c'}, next = {}
----------------------------------
Block 0x2490x58f
0x24a0x58f: v58f24a(0x40) = CONST 
0x24d0x58f: v58f24d = MLOAD v58f24a(0x40)
0x2500x58f: MSTORE v58f24d ve44
0x2510x58f: v58f251 = MLOAD v58f24a(0x40)
0x2550x58f: v58f255 = SUB v58f24d v58f251
0x2560x58f: v58f256(0x20) = CONST 
0x2580x58f: v58f258 = ADD v58f256(0x20) v58f255
0x25a0x58f: RETURN v58f251 v58f258
----------------------------------

Begin block 0x25b
prev = {}, next = {'0x267', '0x263'}
----------------------------------
function totalSupply()()
Block 0x25b
0x25c: v25c = CALLVALUE 
0x25e: v25e = ISZERO v25c
0x25f: v25f(0x267) = CONST 
0x262: JUMPI v25f(0x267) v25e
----------------------------------

Begin block 0x263
prev = {'0x25b'}, next = {}
----------------------------------
Block 0x263
0x263: v263(0x0) = CONST 
0x266: REVERT v263(0x0) v263(0x0)
----------------------------------

Begin block 0x267
prev = {'0x25b'}, next = {'0x751'}
----------------------------------
Block 0x267
0x269: v269(0x249) = CONST 
0x26c: v26c(0x751) = CONST 
0x26f: JUMP v26c(0x751)
----------------------------------

Begin block 0x270
prev = {}, next = {'0x27c', '0x278'}
----------------------------------
function increaseBurnAllowance(address,uint256)()
Block 0x270
0x271: v271 = CALLVALUE 
0x273: v273 = ISZERO v271
0x274: v274(0x27c) = CONST 
0x277: JUMPI v274(0x27c) v273
----------------------------------

Begin block 0x278
prev = {'0x270'}, next = {}
----------------------------------
Block 0x278
0x278: v278(0x0) = CONST 
0x27b: REVERT v278(0x0) v278(0x0)
----------------------------------

Begin block 0x27c
prev = {'0x270'}, next = {'0x293', '0x28f'}
----------------------------------
Block 0x27c
0x27e: v27e(0x1fa) = CONST 
0x281: v281(0x4) = CONST 
0x284: v284 = CALLDATASIZE 
0x285: v285 = SUB v284 v281(0x4)
0x286: v286(0x40) = CONST 
0x289: v289 = LT v285 v286(0x40)
0x28a: v28a = ISZERO v289
0x28b: v28b(0x293) = CONST 
0x28e: JUMPI v28b(0x293) v28a
----------------------------------

Begin block 0x28f
prev = {'0x27c'}, next = {}
----------------------------------
Block 0x28f
0x28f: v28f(0x0) = CONST 
0x292: REVERT v28f(0x0) v28f(0x0)
----------------------------------

Begin block 0x293
prev = {'0x27c'}, next = {'0x757'}
----------------------------------
Block 0x293
0x295: v295(0x1) = CONST 
0x297: v297(0xa0) = CONST 
0x299: v299(0x2) = CONST 
0x29b: v29b(0x10000000000000000000000000000000000000000) = EXP v299(0x2) v297(0xa0)
0x29c: v29c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v29b(0x10000000000000000000000000000000000000000) v295(0x1)
0x29e: v29e = CALLDATALOAD v281(0x4)
0x29f: v29f = AND v29e v29c(0xffffffffffffffffffffffffffffffffffffffff)
0x2a1: v2a1(0x20) = CONST 
0x2a3: v2a3 = ADD v2a1(0x20) v281(0x4)
0x2a4: v2a4 = CALLDATALOAD v2a3
0x2a5: v2a5(0x757) = CONST 
0x2a8: JUMP v2a5(0x757)
----------------------------------

Begin block 0x2a9
prev = {}, next = {'0x2b1', '0x2b5'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x2a9
0x2aa: v2aa = CALLVALUE 
0x2ac: v2ac = ISZERO v2aa
0x2ad: v2ad(0x2b5) = CONST 
0x2b0: JUMPI v2ad(0x2b5) v2ac
----------------------------------

Begin block 0x2b1
prev = {'0x2a9'}, next = {}
----------------------------------
Block 0x2b1
0x2b1: v2b1(0x0) = CONST 
0x2b4: REVERT v2b1(0x0) v2b1(0x0)
----------------------------------

Begin block 0x2b5
prev = {'0x2a9'}, next = {'0x2c8', '0x2cc'}
----------------------------------
Block 0x2b5
0x2b7: v2b7(0x1fa) = CONST 
0x2ba: v2ba(0x4) = CONST 
0x2bd: v2bd = CALLDATASIZE 
0x2be: v2be = SUB v2bd v2ba(0x4)
0x2bf: v2bf(0x60) = CONST 
0x2c2: v2c2 = LT v2be v2bf(0x60)
0x2c3: v2c3 = ISZERO v2c2
0x2c4: v2c4(0x2cc) = CONST 
0x2c7: JUMPI v2c4(0x2cc) v2c3
----------------------------------

Begin block 0x2c8
prev = {'0x2b5'}, next = {}
----------------------------------
Block 0x2c8
0x2c8: v2c8(0x0) = CONST 
0x2cb: REVERT v2c8(0x0) v2c8(0x0)
----------------------------------

Begin block 0x2cc
prev = {'0x2b5'}, next = {'0x852'}
----------------------------------
Block 0x2cc
0x2ce: v2ce(0x1) = CONST 
0x2d0: v2d0(0xa0) = CONST 
0x2d2: v2d2(0x2) = CONST 
0x2d4: v2d4(0x10000000000000000000000000000000000000000) = EXP v2d2(0x2) v2d0(0xa0)
0x2d5: v2d5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2d4(0x10000000000000000000000000000000000000000) v2ce(0x1)
0x2d7: v2d7 = CALLDATALOAD v2ba(0x4)
0x2d9: v2d9 = AND v2d5(0xffffffffffffffffffffffffffffffffffffffff) v2d7
0x2db: v2db(0x20) = CONST 
0x2de: v2de = ADD v2ba(0x4) v2db(0x20)
0x2df: v2df = CALLDATALOAD v2de
0x2e2: v2e2 = AND v2d5(0xffffffffffffffffffffffffffffffffffffffff) v2df
0x2e4: v2e4(0x40) = CONST 
0x2e6: v2e6 = ADD v2e4(0x40) v2ba(0x4)
0x2e7: v2e7 = CALLDATALOAD v2e6
0x2e8: v2e8(0x852) = CONST 
0x2eb: JUMP v2e8(0x852)
----------------------------------

Begin block 0x2ec
prev = {}, next = {'0x2f4', '0x2f8'}
----------------------------------
function decimals()()
Block 0x2ec
0x2ed: v2ed = CALLVALUE 
0x2ef: v2ef = ISZERO v2ed
0x2f0: v2f0(0x2f8) = CONST 
0x2f3: JUMPI v2f0(0x2f8) v2ef
----------------------------------

Begin block 0x2f4
prev = {'0x2ec'}, next = {}
----------------------------------
Block 0x2f4
0x2f4: v2f4(0x0) = CONST 
0x2f7: REVERT v2f4(0x0) v2f4(0x0)
----------------------------------

Begin block 0x2f8
prev = {'0x2ec'}, next = {'0x91b'}
----------------------------------
Block 0x2f8
0x2fa: v2fa(0x301) = CONST 
0x2fd: v2fd(0x91b) = CONST 
0x300: JUMP v2fd(0x91b)
----------------------------------

Begin block 0x301
prev = {'0x91b'}, next = {}
----------------------------------
Block 0x301
0x302: v302(0x40) = CONST 
0x305: v305 = MLOAD v302(0x40)
0x306: v306(0xff) = CONST 
0x30a: v30a = AND v921 v306(0xff)
0x30c: MSTORE v305 v30a
0x30d: v30d = MLOAD v302(0x40)
0x311: v311 = SUB v305 v30d
0x312: v312(0x20) = CONST 
0x314: v314 = ADD v312(0x20) v311
0x316: RETURN v30d v314
----------------------------------

Begin block 0x317
prev = {}, next = {'0x323', '0x31f'}
----------------------------------
function decreaseBurnAllowance(address,uint256)()
Block 0x317
0x318: v318 = CALLVALUE 
0x31a: v31a = ISZERO v318
0x31b: v31b(0x323) = CONST 
0x31e: JUMPI v31b(0x323) v31a
----------------------------------

Begin block 0x31f
prev = {'0x317'}, next = {}
----------------------------------
Block 0x31f
0x31f: v31f(0x0) = CONST 
0x322: REVERT v31f(0x0) v31f(0x0)
----------------------------------

Begin block 0x323
prev = {'0x317'}, next = {'0x336', '0x33a'}
----------------------------------
Block 0x323
0x325: v325(0x1fa) = CONST 
0x328: v328(0x4) = CONST 
0x32b: v32b = CALLDATASIZE 
0x32c: v32c = SUB v32b v328(0x4)
0x32d: v32d(0x40) = CONST 
0x330: v330 = LT v32c v32d(0x40)
0x331: v331 = ISZERO v330
0x332: v332(0x33a) = CONST 
0x335: JUMPI v332(0x33a) v331
----------------------------------

Begin block 0x336
prev = {'0x323'}, next = {}
----------------------------------
Block 0x336
0x336: v336(0x0) = CONST 
0x339: REVERT v336(0x0) v336(0x0)
----------------------------------

Begin block 0x33a
prev = {'0x323'}, next = {'0x924'}
----------------------------------
Block 0x33a
0x33c: v33c(0x1) = CONST 
0x33e: v33e(0xa0) = CONST 
0x340: v340(0x2) = CONST 
0x342: v342(0x10000000000000000000000000000000000000000) = EXP v340(0x2) v33e(0xa0)
0x343: v343(0xffffffffffffffffffffffffffffffffffffffff) = SUB v342(0x10000000000000000000000000000000000000000) v33c(0x1)
0x345: v345 = CALLDATALOAD v328(0x4)
0x346: v346 = AND v345 v343(0xffffffffffffffffffffffffffffffffffffffff)
0x348: v348(0x20) = CONST 
0x34a: v34a = ADD v348(0x20) v328(0x4)
0x34b: v34b = CALLDATALOAD v34a
0x34c: v34c(0x924) = CONST 
0x34f: JUMP v34c(0x924)
----------------------------------

Begin block 0x350
prev = {}, next = {'0x358', '0x35c'}
----------------------------------
function increaseAllowance(address,uint256)()
Block 0x350
0x351: v351 = CALLVALUE 
0x353: v353 = ISZERO v351
0x354: v354(0x35c) = CONST 
0x357: JUMPI v354(0x35c) v353
----------------------------------

Begin block 0x358
prev = {'0x350'}, next = {}
----------------------------------
Block 0x358
0x358: v358(0x0) = CONST 
0x35b: REVERT v358(0x0) v358(0x0)
----------------------------------

Begin block 0x35c
prev = {'0x350'}, next = {'0x36f', '0x373'}
----------------------------------
Block 0x35c
0x35e: v35e(0x1fa) = CONST 
0x361: v361(0x4) = CONST 
0x364: v364 = CALLDATASIZE 
0x365: v365 = SUB v364 v361(0x4)
0x366: v366(0x40) = CONST 
0x369: v369 = LT v365 v366(0x40)
0x36a: v36a = ISZERO v369
0x36b: v36b(0x373) = CONST 
0x36e: JUMPI v36b(0x373) v36a
----------------------------------

Begin block 0x36f
prev = {'0x35c'}, next = {}
----------------------------------
Block 0x36f
0x36f: v36f(0x0) = CONST 
0x372: REVERT v36f(0x0) v36f(0x0)
----------------------------------

Begin block 0x373
prev = {'0x35c'}, next = {'0x9ba'}
----------------------------------
Block 0x373
0x375: v375(0x1) = CONST 
0x377: v377(0xa0) = CONST 
0x379: v379(0x2) = CONST 
0x37b: v37b(0x10000000000000000000000000000000000000000) = EXP v379(0x2) v377(0xa0)
0x37c: v37c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v37b(0x10000000000000000000000000000000000000000) v375(0x1)
0x37e: v37e = CALLDATALOAD v361(0x4)
0x37f: v37f = AND v37e v37c(0xffffffffffffffffffffffffffffffffffffffff)
0x381: v381(0x20) = CONST 
0x383: v383 = ADD v381(0x20) v361(0x4)
0x384: v384 = CALLDATALOAD v383
0x385: v385(0x9ba) = CONST 
0x388: JUMP v385(0x9ba)
----------------------------------

Begin block 0x389
prev = {}, next = {'0x395', '0x391'}
----------------------------------
function mint(address,uint256)()
Block 0x389
0x38a: v38a = CALLVALUE 
0x38c: v38c = ISZERO v38a
0x38d: v38d(0x395) = CONST 
0x390: JUMPI v38d(0x395) v38c
----------------------------------

Begin block 0x391
prev = {'0x389'}, next = {}
----------------------------------
Block 0x391
0x391: v391(0x0) = CONST 
0x394: REVERT v391(0x0) v391(0x0)
----------------------------------

Begin block 0x395
prev = {'0x389'}, next = {'0x3a8', '0x3ac'}
----------------------------------
Block 0x395
0x397: v397(0x1fa) = CONST 
0x39a: v39a(0x4) = CONST 
0x39d: v39d = CALLDATASIZE 
0x39e: v39e = SUB v39d v39a(0x4)
0x39f: v39f(0x40) = CONST 
0x3a2: v3a2 = LT v39e v39f(0x40)
0x3a3: v3a3 = ISZERO v3a2
0x3a4: v3a4(0x3ac) = CONST 
0x3a7: JUMPI v3a4(0x3ac) v3a3
----------------------------------

Begin block 0x3a8
prev = {'0x395'}, next = {}
----------------------------------
Block 0x3a8
0x3a8: v3a8(0x0) = CONST 
0x3ab: REVERT v3a8(0x0) v3a8(0x0)
----------------------------------

Begin block 0x3ac
prev = {'0x395'}, next = {'0xa6a'}
----------------------------------
Block 0x3ac
0x3ae: v3ae(0x1) = CONST 
0x3b0: v3b0(0xa0) = CONST 
0x3b2: v3b2(0x2) = CONST 
0x3b4: v3b4(0x10000000000000000000000000000000000000000) = EXP v3b2(0x2) v3b0(0xa0)
0x3b5: v3b5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b4(0x10000000000000000000000000000000000000000) v3ae(0x1)
0x3b7: v3b7 = CALLDATALOAD v39a(0x4)
0x3b8: v3b8 = AND v3b7 v3b5(0xffffffffffffffffffffffffffffffffffffffff)
0x3ba: v3ba(0x20) = CONST 
0x3bc: v3bc = ADD v3ba(0x20) v39a(0x4)
0x3bd: v3bd = CALLDATALOAD v3bc
0x3be: v3be(0xa6a) = CONST 
0x3c1: JUMP v3be(0xa6a)
----------------------------------

Begin block 0x3c2
prev = {}, next = {'0x3ce', '0x3ca'}
----------------------------------
function burn(uint256)()
Block 0x3c2
0x3c3: v3c3 = CALLVALUE 
0x3c5: v3c5 = ISZERO v3c3
0x3c6: v3c6(0x3ce) = CONST 
0x3c9: JUMPI v3c6(0x3ce) v3c5
----------------------------------

Begin block 0x3ca
prev = {'0x3c2'}, next = {}
----------------------------------
Block 0x3ca
0x3ca: v3ca(0x0) = CONST 
0x3cd: REVERT v3ca(0x0) v3ca(0x0)
----------------------------------

Begin block 0x3ce
prev = {'0x3c2'}, next = {'0x3e1', '0x3e5'}
----------------------------------
Block 0x3ce
0x3d0: v3d0(0x1fa) = CONST 
0x3d3: v3d3(0x4) = CONST 
0x3d6: v3d6 = CALLDATASIZE 
0x3d7: v3d7 = SUB v3d6 v3d3(0x4)
0x3d8: v3d8(0x20) = CONST 
0x3db: v3db = LT v3d7 v3d8(0x20)
0x3dc: v3dc = ISZERO v3db
0x3dd: v3dd(0x3e5) = CONST 
0x3e0: JUMPI v3dd(0x3e5) v3dc
----------------------------------

Begin block 0x3e1
prev = {'0x3ce'}, next = {}
----------------------------------
Block 0x3e1
0x3e1: v3e1(0x0) = CONST 
0x3e4: REVERT v3e1(0x0) v3e1(0x0)
----------------------------------

Begin block 0x3e5
prev = {'0x3ce'}, next = {'0xa93'}
----------------------------------
Block 0x3e5
0x3e7: v3e7 = CALLDATALOAD v3d3(0x4)
0x3e8: v3e8(0xa93) = CONST 
0x3eb: JUMP v3e8(0xa93)
----------------------------------

Begin block 0x3ec
prev = {}, next = {'0x3f4', '0x3f8'}
----------------------------------
function isBurner(address)()
Block 0x3ec
0x3ed: v3ed = CALLVALUE 
0x3ef: v3ef = ISZERO v3ed
0x3f0: v3f0(0x3f8) = CONST 
0x3f3: JUMPI v3f0(0x3f8) v3ef
----------------------------------

Begin block 0x3f4
prev = {'0x3ec'}, next = {}
----------------------------------
Block 0x3f4
0x3f4: v3f4(0x0) = CONST 
0x3f7: REVERT v3f4(0x0) v3f4(0x0)
----------------------------------

Begin block 0x3f8
prev = {'0x3ec'}, next = {'0x40f', '0x40b'}
----------------------------------
Block 0x3f8
0x3fa: v3fa(0x1fa) = CONST 
0x3fd: v3fd(0x4) = CONST 
0x400: v400 = CALLDATASIZE 
0x401: v401 = SUB v400 v3fd(0x4)
0x402: v402(0x20) = CONST 
0x405: v405 = LT v401 v402(0x20)
0x406: v406 = ISZERO v405
0x407: v407(0x40f) = CONST 
0x40a: JUMPI v407(0x40f) v406
----------------------------------

Begin block 0x40b
prev = {'0x3f8'}, next = {}
----------------------------------
Block 0x40b
0x40b: v40b(0x0) = CONST 
0x40e: REVERT v40b(0x0) v40b(0x0)
----------------------------------

Begin block 0x40f
prev = {'0x3f8'}, next = {'0xb2c0x3ec'}
----------------------------------
Block 0x40f
0x411: v411 = CALLDATALOAD v3fd(0x4)
0x412: v412(0x1) = CONST 
0x414: v414(0xa0) = CONST 
0x416: v416(0x2) = CONST 
0x418: v418(0x10000000000000000000000000000000000000000) = EXP v416(0x2) v414(0xa0)
0x419: v419(0xffffffffffffffffffffffffffffffffffffffff) = SUB v418(0x10000000000000000000000000000000000000000) v412(0x1)
0x41a: v41a = AND v419(0xffffffffffffffffffffffffffffffffffffffff) v411
0x41b: v41b(0xb2c) = CONST 
0x41e: JUMP v41b(0xb2c)
----------------------------------

Begin block 0x41f
prev = {}, next = {'0x42b', '0x427'}
----------------------------------
function balanceOf(address)()
Block 0x41f
0x420: v420 = CALLVALUE 
0x422: v422 = ISZERO v420
0x423: v423(0x42b) = CONST 
0x426: JUMPI v423(0x42b) v422
----------------------------------

Begin block 0x427
prev = {'0x41f'}, next = {}
----------------------------------
Block 0x427
0x427: v427(0x0) = CONST 
0x42a: REVERT v427(0x0) v427(0x0)
----------------------------------

Begin block 0x42b
prev = {'0x41f'}, next = {'0x43e', '0x442'}
----------------------------------
Block 0x42b
0x42d: v42d(0x249) = CONST 
0x430: v430(0x4) = CONST 
0x433: v433 = CALLDATASIZE 
0x434: v434 = SUB v433 v430(0x4)
0x435: v435(0x20) = CONST 
0x438: v438 = LT v434 v435(0x20)
0x439: v439 = ISZERO v438
0x43a: v43a(0x442) = CONST 
0x43d: JUMPI v43a(0x442) v439
----------------------------------

Begin block 0x43e
prev = {'0x42b'}, next = {}
----------------------------------
Block 0x43e
0x43e: v43e(0x0) = CONST 
0x441: REVERT v43e(0x0) v43e(0x0)
----------------------------------

Begin block 0x442
prev = {'0x42b'}, next = {'0xb45'}
----------------------------------
Block 0x442
0x444: v444 = CALLDATALOAD v430(0x4)
0x445: v445(0x1) = CONST 
0x447: v447(0xa0) = CONST 
0x449: v449(0x2) = CONST 
0x44b: v44b(0x10000000000000000000000000000000000000000) = EXP v449(0x2) v447(0xa0)
0x44c: v44c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v44b(0x10000000000000000000000000000000000000000) v445(0x1)
0x44d: v44d = AND v44c(0xffffffffffffffffffffffffffffffffffffffff) v444
0x44e: v44e(0xb45) = CONST 
0x451: JUMP v44e(0xb45)
----------------------------------

Begin block 0x452
prev = {}, next = {'0x45e', '0x45a'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x452
0x453: v453 = CALLVALUE 
0x455: v455 = ISZERO v453
0x456: v456(0x45e) = CONST 
0x459: JUMPI v456(0x45e) v455
----------------------------------

Begin block 0x45a
prev = {'0x452'}, next = {}
----------------------------------
Block 0x45a
0x45a: v45a(0x0) = CONST 
0x45d: REVERT v45a(0x0) v45a(0x0)
----------------------------------

Begin block 0x45e
prev = {'0x452'}, next = {'0x475', '0x471'}
----------------------------------
Block 0x45e
0x460: v460(0x1fa) = CONST 
0x463: v463(0x4) = CONST 
0x466: v466 = CALLDATASIZE 
0x467: v467 = SUB v466 v463(0x4)
0x468: v468(0x40) = CONST 
0x46b: v46b = LT v467 v468(0x40)
0x46c: v46c = ISZERO v46b
0x46d: v46d(0x475) = CONST 
0x470: JUMPI v46d(0x475) v46c
----------------------------------

Begin block 0x471
prev = {'0x45e'}, next = {}
----------------------------------
Block 0x471
0x471: v471(0x0) = CONST 
0x474: REVERT v471(0x0) v471(0x0)
----------------------------------

Begin block 0x475
prev = {'0x45e'}, next = {'0xb60'}
----------------------------------
Block 0x475
0x477: v477(0x1) = CONST 
0x479: v479(0xa0) = CONST 
0x47b: v47b(0x2) = CONST 
0x47d: v47d(0x10000000000000000000000000000000000000000) = EXP v47b(0x2) v479(0xa0)
0x47e: v47e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v47d(0x10000000000000000000000000000000000000000) v477(0x1)
0x480: v480 = CALLDATALOAD v463(0x4)
0x481: v481 = AND v480 v47e(0xffffffffffffffffffffffffffffffffffffffff)
0x483: v483(0x20) = CONST 
0x485: v485 = ADD v483(0x20) v463(0x4)
0x486: v486 = CALLDATALOAD v485
0x487: v487(0xb60) = CONST 
0x48a: JUMP v487(0xb60)
----------------------------------

Begin block 0x48b
prev = {}, next = {'0x497', '0x493'}
----------------------------------
function symbol()()
Block 0x48b
0x48c: v48c = CALLVALUE 
0x48e: v48e = ISZERO v48c
0x48f: v48f(0x497) = CONST 
0x492: JUMPI v48f(0x497) v48e
----------------------------------

Begin block 0x493
prev = {'0x48b'}, next = {}
----------------------------------
Block 0x493
0x493: v493(0x0) = CONST 
0x496: REVERT v493(0x0) v493(0x0)
----------------------------------

Begin block 0x497
prev = {'0x48b'}, next = {'0x14c0x48b'}
----------------------------------
Block 0x497
0x499: v499(0x14c) = CONST 
0x49c: v49c(0xd25) = CONST 
0x49f: v49f_0 = CALLPRIVATE v49c(0xd25) v499(0x14c)
----------------------------------

Begin block 0x4a0
prev = {}, next = {'0x4a8', '0x4ac'}
----------------------------------
function addMinter(address)()
Block 0x4a0
0x4a1: v4a1 = CALLVALUE 
0x4a3: v4a3 = ISZERO v4a1
0x4a4: v4a4(0x4ac) = CONST 
0x4a7: JUMPI v4a4(0x4ac) v4a3
----------------------------------

Begin block 0x4a8
prev = {'0x4a0'}, next = {}
----------------------------------
Block 0x4a8
0x4a8: v4a8(0x0) = CONST 
0x4ab: REVERT v4a8(0x0) v4a8(0x0)
----------------------------------

Begin block 0x4ac
prev = {'0x4a0'}, next = {'0x4bf', '0x4c3'}
----------------------------------
Block 0x4ac
0x4ae: v4ae(0x4d3) = CONST 
0x4b1: v4b1(0x4) = CONST 
0x4b4: v4b4 = CALLDATASIZE 
0x4b5: v4b5 = SUB v4b4 v4b1(0x4)
0x4b6: v4b6(0x20) = CONST 
0x4b9: v4b9 = LT v4b5 v4b6(0x20)
0x4ba: v4ba = ISZERO v4b9
0x4bb: v4bb(0x4c3) = CONST 
0x4be: JUMPI v4bb(0x4c3) v4ba
----------------------------------

Begin block 0x4bf
prev = {'0x4ac'}, next = {}
----------------------------------
Block 0x4bf
0x4bf: v4bf(0x0) = CONST 
0x4c2: REVERT v4bf(0x0) v4bf(0x0)
----------------------------------

Begin block 0x4c3
prev = {'0x4ac'}, next = {'0xd86'}
----------------------------------
Block 0x4c3
0x4c5: v4c5 = CALLDATALOAD v4b1(0x4)
0x4c6: v4c6(0x1) = CONST 
0x4c8: v4c8(0xa0) = CONST 
0x4ca: v4ca(0x2) = CONST 
0x4cc: v4cc(0x10000000000000000000000000000000000000000) = EXP v4ca(0x2) v4c8(0xa0)
0x4cd: v4cd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4cc(0x10000000000000000000000000000000000000000) v4c6(0x1)
0x4ce: v4ce = AND v4cd(0xffffffffffffffffffffffffffffffffffffffff) v4c5
0x4cf: v4cf(0xd86) = CONST 
0x4d2: JUMP v4cf(0xd86)
----------------------------------

Begin block 0x4d30x4a0
prev = {'0xda30x4a0'}, next = {}
----------------------------------
Block 0x4d30x4a0
0x4d40x4a0: STOP 
----------------------------------

Begin block 0x4d30x4d5
prev = {'0x4e1'}, next = {}
----------------------------------
Block 0x4d30x4d5
0x4d40x4d5: STOP 
----------------------------------

Begin block 0x4d30x5ca
prev = {'0x5d6'}, next = {}
----------------------------------
Block 0x4d30x5ca
0x4d40x5ca: STOP 
----------------------------------

Begin block 0x4d30x5df
prev = {'0xda30x5df'}, next = {}
----------------------------------
Block 0x4d30x5df
0x4d40x5df: STOP 
----------------------------------

Begin block 0x4d5
prev = {}, next = {'0x4e1', '0x4dd'}
----------------------------------
function renounceMinter()()
Block 0x4d5
0x4d6: v4d6 = CALLVALUE 
0x4d8: v4d8 = ISZERO v4d6
0x4d9: v4d9(0x4e1) = CONST 
0x4dc: JUMPI v4d9(0x4e1) v4d8
----------------------------------

Begin block 0x4dd
prev = {'0x4d5'}, next = {}
----------------------------------
Block 0x4dd
0x4dd: v4dd(0x0) = CONST 
0x4e0: REVERT v4dd(0x0) v4dd(0x0)
----------------------------------

Begin block 0x4e1
prev = {'0x4d5'}, next = {'0x4d30x4d5'}
----------------------------------
Block 0x4e1
0x4e3: v4e3(0x4d3) = CONST 
0x4e6: v4e6(0xda6) = CONST 
0x4e9: CALLPRIVATE v4e6(0xda6) v4e3(0x4d3)
----------------------------------

Begin block 0x4ea
prev = {}, next = {'0x4f6', '0x4f2'}
----------------------------------
function decreaseAllowance(address,uint256)()
Block 0x4ea
0x4eb: v4eb = CALLVALUE 
0x4ed: v4ed = ISZERO v4eb
0x4ee: v4ee(0x4f6) = CONST 
0x4f1: JUMPI v4ee(0x4f6) v4ed
----------------------------------

Begin block 0x4f2
prev = {'0x4ea'}, next = {}
----------------------------------
Block 0x4f2
0x4f2: v4f2(0x0) = CONST 
0x4f5: REVERT v4f2(0x0) v4f2(0x0)
----------------------------------

Begin block 0x4f6
prev = {'0x4ea'}, next = {'0x50d', '0x509'}
----------------------------------
Block 0x4f6
0x4f8: v4f8(0x1fa) = CONST 
0x4fb: v4fb(0x4) = CONST 
0x4fe: v4fe = CALLDATASIZE 
0x4ff: v4ff = SUB v4fe v4fb(0x4)
0x500: v500(0x40) = CONST 
0x503: v503 = LT v4ff v500(0x40)
0x504: v504 = ISZERO v503
0x505: v505(0x50d) = CONST 
0x508: JUMPI v505(0x50d) v504
----------------------------------

Begin block 0x509
prev = {'0x4f6'}, next = {}
----------------------------------
Block 0x509
0x509: v509(0x0) = CONST 
0x50c: REVERT v509(0x0) v509(0x0)
----------------------------------

Begin block 0x50d
prev = {'0x4f6'}, next = {'0xdb1'}
----------------------------------
Block 0x50d
0x50f: v50f(0x1) = CONST 
0x511: v511(0xa0) = CONST 
0x513: v513(0x2) = CONST 
0x515: v515(0x10000000000000000000000000000000000000000) = EXP v513(0x2) v511(0xa0)
0x516: v516(0xffffffffffffffffffffffffffffffffffffffff) = SUB v515(0x10000000000000000000000000000000000000000) v50f(0x1)
0x518: v518 = CALLDATALOAD v4fb(0x4)
0x519: v519 = AND v518 v516(0xffffffffffffffffffffffffffffffffffffffff)
0x51b: v51b(0x20) = CONST 
0x51d: v51d = ADD v51b(0x20) v4fb(0x4)
0x51e: v51e = CALLDATALOAD v51d
0x51f: v51f(0xdb1) = CONST 
0x522: JUMP v51f(0xdb1)
----------------------------------

Begin block 0x523
prev = {}, next = {'0x52b', '0x52f'}
----------------------------------
function transfer(address,uint256)()
Block 0x523
0x524: v524 = CALLVALUE 
0x526: v526 = ISZERO v524
0x527: v527(0x52f) = CONST 
0x52a: JUMPI v527(0x52f) v526
----------------------------------

Begin block 0x52b
prev = {'0x523'}, next = {}
----------------------------------
Block 0x52b
0x52b: v52b(0x0) = CONST 
0x52e: REVERT v52b(0x0) v52b(0x0)
----------------------------------

Begin block 0x52f
prev = {'0x523'}, next = {'0x542', '0x546'}
----------------------------------
Block 0x52f
0x531: v531(0x1fa) = CONST 
0x534: v534(0x4) = CONST 
0x537: v537 = CALLDATASIZE 
0x538: v538 = SUB v537 v534(0x4)
0x539: v539(0x40) = CONST 
0x53c: v53c = LT v538 v539(0x40)
0x53d: v53d = ISZERO v53c
0x53e: v53e(0x546) = CONST 
0x541: JUMPI v53e(0x546) v53d
----------------------------------

Begin block 0x542
prev = {'0x52f'}, next = {}
----------------------------------
Block 0x542
0x542: v542(0x0) = CONST 
0x545: REVERT v542(0x0) v542(0x0)
----------------------------------

Begin block 0x546
prev = {'0x52f'}, next = {'0xdfc'}
----------------------------------
Block 0x546
0x548: v548(0x1) = CONST 
0x54a: v54a(0xa0) = CONST 
0x54c: v54c(0x2) = CONST 
0x54e: v54e(0x10000000000000000000000000000000000000000) = EXP v54c(0x2) v54a(0xa0)
0x54f: v54f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v54e(0x10000000000000000000000000000000000000000) v548(0x1)
0x551: v551 = CALLDATALOAD v534(0x4)
0x552: v552 = AND v551 v54f(0xffffffffffffffffffffffffffffffffffffffff)
0x554: v554(0x20) = CONST 
0x556: v556 = ADD v554(0x20) v534(0x4)
0x557: v557 = CALLDATALOAD v556
0x558: v558(0xdfc) = CONST 
0x55b: JUMP v558(0xdfc)
----------------------------------

Begin block 0x55c
prev = {}, next = {'0x564', '0x568'}
----------------------------------
function isMinter(address)()
Block 0x55c
0x55d: v55d = CALLVALUE 
0x55f: v55f = ISZERO v55d
0x560: v560(0x568) = CONST 
0x563: JUMPI v560(0x568) v55f
----------------------------------

Begin block 0x564
prev = {'0x55c'}, next = {}
----------------------------------
Block 0x564
0x564: v564(0x0) = CONST 
0x567: REVERT v564(0x0) v564(0x0)
----------------------------------

Begin block 0x568
prev = {'0x55c'}, next = {'0x57f', '0x57b'}
----------------------------------
Block 0x568
0x56a: v56a(0x1fa) = CONST 
0x56d: v56d(0x4) = CONST 
0x570: v570 = CALLDATASIZE 
0x571: v571 = SUB v570 v56d(0x4)
0x572: v572(0x20) = CONST 
0x575: v575 = LT v571 v572(0x20)
0x576: v576 = ISZERO v575
0x577: v577(0x57f) = CONST 
0x57a: JUMPI v577(0x57f) v576
----------------------------------

Begin block 0x57b
prev = {'0x568'}, next = {}
----------------------------------
Block 0x57b
0x57b: v57b(0x0) = CONST 
0x57e: REVERT v57b(0x0) v57b(0x0)
----------------------------------

Begin block 0x57f
prev = {'0x568'}, next = {'0xe090x55c'}
----------------------------------
Block 0x57f
0x581: v581 = CALLDATALOAD v56d(0x4)
0x582: v582(0x1) = CONST 
0x584: v584(0xa0) = CONST 
0x586: v586(0x2) = CONST 
0x588: v588(0x10000000000000000000000000000000000000000) = EXP v586(0x2) v584(0xa0)
0x589: v589(0xffffffffffffffffffffffffffffffffffffffff) = SUB v588(0x10000000000000000000000000000000000000000) v582(0x1)
0x58a: v58a = AND v589(0xffffffffffffffffffffffffffffffffffffffff) v581
0x58b: v58b(0xe09) = CONST 
0x58e: JUMP v58b(0xe09)
----------------------------------

Begin block 0x58f
prev = {}, next = {'0x597', '0x59b'}
----------------------------------
function allowance(address,address)()
Block 0x58f
0x590: v590 = CALLVALUE 
0x592: v592 = ISZERO v590
0x593: v593(0x59b) = CONST 
0x596: JUMPI v593(0x59b) v592
----------------------------------

Begin block 0x597
prev = {'0x58f'}, next = {}
----------------------------------
Block 0x597
0x597: v597(0x0) = CONST 
0x59a: REVERT v597(0x0) v597(0x0)
----------------------------------

Begin block 0x59b
prev = {'0x58f'}, next = {'0x5b2', '0x5ae'}
----------------------------------
Block 0x59b
0x59d: v59d(0x249) = CONST 
0x5a0: v5a0(0x4) = CONST 
0x5a3: v5a3 = CALLDATASIZE 
0x5a4: v5a4 = SUB v5a3 v5a0(0x4)
0x5a5: v5a5(0x40) = CONST 
0x5a8: v5a8 = LT v5a4 v5a5(0x40)
0x5a9: v5a9 = ISZERO v5a8
0x5aa: v5aa(0x5b2) = CONST 
0x5ad: JUMPI v5aa(0x5b2) v5a9
----------------------------------

Begin block 0x5ae
prev = {'0x59b'}, next = {}
----------------------------------
Block 0x5ae
0x5ae: v5ae(0x0) = CONST 
0x5b1: REVERT v5ae(0x0) v5ae(0x0)
----------------------------------

Begin block 0x5b2
prev = {'0x59b'}, next = {'0xe1c'}
----------------------------------
Block 0x5b2
0x5b4: v5b4(0x1) = CONST 
0x5b6: v5b6(0xa0) = CONST 
0x5b8: v5b8(0x2) = CONST 
0x5ba: v5ba(0x10000000000000000000000000000000000000000) = EXP v5b8(0x2) v5b6(0xa0)
0x5bb: v5bb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5ba(0x10000000000000000000000000000000000000000) v5b4(0x1)
0x5bd: v5bd = CALLDATALOAD v5a0(0x4)
0x5bf: v5bf = AND v5bb(0xffffffffffffffffffffffffffffffffffffffff) v5bd
0x5c1: v5c1(0x20) = CONST 
0x5c3: v5c3 = ADD v5c1(0x20) v5a0(0x4)
0x5c4: v5c4 = CALLDATALOAD v5c3
0x5c5: v5c5 = AND v5c4 v5bb(0xffffffffffffffffffffffffffffffffffffffff)
0x5c6: v5c6(0xe1c) = CONST 
0x5c9: JUMP v5c6(0xe1c)
----------------------------------

Begin block 0x5ca
prev = {}, next = {'0x5d2', '0x5d6'}
----------------------------------
function renounceBurner()()
Block 0x5ca
0x5cb: v5cb = CALLVALUE 
0x5cd: v5cd = ISZERO v5cb
0x5ce: v5ce(0x5d6) = CONST 
0x5d1: JUMPI v5ce(0x5d6) v5cd
----------------------------------

Begin block 0x5d2
prev = {'0x5ca'}, next = {}
----------------------------------
Block 0x5d2
0x5d2: v5d2(0x0) = CONST 
0x5d5: REVERT v5d2(0x0) v5d2(0x0)
----------------------------------

Begin block 0x5d6
prev = {'0x5ca'}, next = {'0x4d30x5ca'}
----------------------------------
Block 0x5d6
0x5d8: v5d8(0x4d3) = CONST 
0x5db: v5db(0xe47) = CONST 
0x5de: CALLPRIVATE v5db(0xe47) v5d8(0x4d3)
----------------------------------

Begin block 0x5df
prev = {}, next = {'0x5e7', '0x5eb'}
----------------------------------
function addBurner(address)()
Block 0x5df
0x5e0: v5e0 = CALLVALUE 
0x5e2: v5e2 = ISZERO v5e0
0x5e3: v5e3(0x5eb) = CONST 
0x5e6: JUMPI v5e3(0x5eb) v5e2
----------------------------------

Begin block 0x5e7
prev = {'0x5df'}, next = {}
----------------------------------
Block 0x5e7
0x5e7: v5e7(0x0) = CONST 
0x5ea: REVERT v5e7(0x0) v5e7(0x0)
----------------------------------

Begin block 0x5eb
prev = {'0x5df'}, next = {'0x5fe', '0x602'}
----------------------------------
Block 0x5eb
0x5ed: v5ed(0x4d3) = CONST 
0x5f0: v5f0(0x4) = CONST 
0x5f3: v5f3 = CALLDATASIZE 
0x5f4: v5f4 = SUB v5f3 v5f0(0x4)
0x5f5: v5f5(0x20) = CONST 
0x5f8: v5f8 = LT v5f4 v5f5(0x20)
0x5f9: v5f9 = ISZERO v5f8
0x5fa: v5fa(0x602) = CONST 
0x5fd: JUMPI v5fa(0x602) v5f9
----------------------------------

Begin block 0x5fe
prev = {'0x5eb'}, next = {}
----------------------------------
Block 0x5fe
0x5fe: v5fe(0x0) = CONST 
0x601: REVERT v5fe(0x0) v5fe(0x0)
----------------------------------

Begin block 0x602
prev = {'0x5eb'}, next = {'0xe50'}
----------------------------------
Block 0x602
0x604: v604 = CALLDATALOAD v5f0(0x4)
0x605: v605(0x1) = CONST 
0x607: v607(0xa0) = CONST 
0x609: v609(0x2) = CONST 
0x60b: v60b(0x10000000000000000000000000000000000000000) = EXP v609(0x2) v607(0xa0)
0x60c: v60c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v60b(0x10000000000000000000000000000000000000000) v605(0x1)
0x60d: v60d = AND v60c(0xffffffffffffffffffffffffffffffffffffffff) v604
0x60e: v60e(0xe50) = CONST 
0x611: JUMP v60e(0xe50)
----------------------------------

Begin block 0x612
prev = {}, next = {'0x69e0x612', '0x658'}
----------------------------------
function 0x612(v612arg0)
Block 0x612
0x613: v613(0x3) = CONST 
0x616: v616 = SLOAD v613(0x3)
0x617: v617(0x40) = CONST 
0x61a: v61a = MLOAD v617(0x40)
0x61b: v61b(0x20) = CONST 
0x61d: v61d(0x1f) = CONST 
0x61f: v61f(0x2) = CONST 
0x621: v621(0x0) = CONST 
0x623: v623(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v621(0x0)
0x624: v624(0x100) = CONST 
0x627: v627(0x1) = CONST 
0x62a: v62a = AND v616 v627(0x1)
0x62b: v62b = ISZERO v62a
0x62c: v62c = MUL v62b v624(0x100)
0x62d: v62d = ADD v62c v623(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0x630: v630 = AND v616 v62d
0x634: v634 = DIV v630 v61f(0x2)
0x637: v637 = ADD v634 v61d(0x1f)
0x63a: v63a = DIV v637 v61b(0x20)
0x63c: v63c = MUL v61b(0x20) v63a
0x63e: v63e = ADD v61a v63c
0x640: v640 = ADD v61b(0x20) v63e
0x643: MSTORE v617(0x40) v640
0x646: MSTORE v61a v634
0x647: v647(0x60) = CONST 
0x64f: v64f = ADD v61a v61b(0x20)
0x653: v653 = ISZERO v634
0x654: v654(0x69e) = CONST 
0x657: JUMPI v654(0x69e) v653
----------------------------------

Begin block 0x658
prev = {'0x612'}, next = {'0x660', '0x6730x612'}
----------------------------------
Block 0x658
0x659: v659(0x1f) = CONST 
0x65b: v65b = LT v659(0x1f) v634
0x65c: v65c(0x673) = CONST 
0x65f: JUMPI v65c(0x673) v65b
----------------------------------

Begin block 0x660
prev = {'0x658'}, next = {'0x69e0x612'}
----------------------------------
Block 0x660
0x660: v660(0x100) = CONST 
0x665: v665 = SLOAD v613(0x3)
0x666: v666 = DIV v665 v660(0x100)
0x667: v667 = MUL v666 v660(0x100)
0x669: MSTORE v64f v667
0x66b: v66b(0x20) = CONST 
0x66d: v66d = ADD v66b(0x20) v64f
0x66f: v66f(0x69e) = CONST 
0x672: JUMP v66f(0x69e)
----------------------------------

Begin block 0x6730x612
prev = {'0x658'}, next = {'0x6810x612'}
----------------------------------
Block 0x6730x612
0x6750x612: v612675 = ADD v64f v634
0x6780x612: v612678(0x0) = CONST 
0x67a0x612: MSTORE v612678(0x0) v613(0x3)
0x67b0x612: v61267b(0x20) = CONST 
0x67d0x612: v61267d(0x0) = CONST 
0x67f0x612: v61267f = SHA3 v61267d(0x0) v61267b(0x20)
----------------------------------

Begin block 0x6730xd25
prev = {'0xd6b'}, next = {'0x6810xd25'}
----------------------------------
Block 0x6730xd25
0x6750xd25: vd25675 = ADD vd62 vd47
0x6780xd25: vd25678(0x0) = CONST 
0x67a0xd25: MSTORE vd25678(0x0) vd26(0x4)
0x67b0xd25: vd2567b(0x20) = CONST 
0x67d0xd25: vd2567d(0x0) = CONST 
0x67f0xd25: vd2567f = SHA3 vd2567d(0x0) vd2567b(0x20)
----------------------------------

Begin block 0x6810x612
prev = {'0x6810x612', '0x6730x612'}, next = {'0x6810x612', '0x6950x612'}
----------------------------------
Block 0x6810x612
0x6810x612_0x0: v681612_0 = PHI v64f v61268d
0x6810x612_0x1: v681612_1 = PHI v612689 v61267f
0x6830x612: v612683 = SLOAD v681612_1
0x6850x612: MSTORE v681612_0 v612683
0x6870x612: v612687(0x1) = CONST 
0x6890x612: v612689 = ADD v612687(0x1) v681612_1
0x68b0x612: v61268b(0x20) = CONST 
0x68d0x612: v61268d = ADD v61268b(0x20) v681612_0
0x6900x612: v612690 = GT v612675 v61268d
0x6910x612: v612691(0x681) = CONST 
0x6940x612: JUMPI v612691(0x681) v612690
----------------------------------

Begin block 0x6810xd25
prev = {'0x6810xd25', '0x6730xd25'}, next = {'0x6950xd25', '0x6810xd25'}
----------------------------------
Block 0x6810xd25
0x6810xd25_0x0: v681d25_0 = PHI vd62 vd2568d
0x6810xd25_0x1: v681d25_1 = PHI vd25689 vd2567f
0x6830xd25: vd25683 = SLOAD v681d25_1
0x6850xd25: MSTORE v681d25_0 vd25683
0x6870xd25: vd25687(0x1) = CONST 
0x6890xd25: vd25689 = ADD vd25687(0x1) v681d25_1
0x68b0xd25: vd2568b(0x20) = CONST 
0x68d0xd25: vd2568d = ADD vd2568b(0x20) v681d25_0
0x6900xd25: vd25690 = GT vd25675 vd2568d
0x6910xd25: vd25691(0x681) = CONST 
0x6940xd25: JUMPI vd25691(0x681) vd25690
----------------------------------

Begin block 0x6950x612
prev = {'0x6810x612'}, next = {'0x69e0x612'}
----------------------------------
Block 0x6950x612
0x6970x612: v612697 = SUB v61268d v612675
0x6980x612: v612698(0x1f) = CONST 
0x69a0x612: v61269a = AND v612698(0x1f) v612697
0x69c0x612: v61269c = ADD v612675 v61269a
----------------------------------

Begin block 0x6950xd25
prev = {'0x6810xd25'}, next = {'0x69e0xd25'}
----------------------------------
Block 0x6950xd25
0x6970xd25: vd25697 = SUB vd2568d vd25675
0x6980xd25: vd25698(0x1f) = CONST 
0x69a0xd25: vd2569a = AND vd25698(0x1f) vd25697
0x69c0xd25: vd2569c = ADD vd25675 vd2569a
----------------------------------

Begin block 0x69e0x612
prev = {'0x6950x612', '0x660', '0x612'}, next = {}
----------------------------------
Block 0x69e0x612
0x6a70x612: RETURNPRIVATE v612arg0 v61a
----------------------------------

Begin block 0x69e0xd25
prev = {'0xd73', '0x6950xd25', '0xd25'}, next = {}
----------------------------------
Block 0x69e0xd25
0x6a70xd25: RETURNPRIVATE vd25arg0 vd2d
----------------------------------

Begin block 0x6a8
prev = {'0x1e4'}, next = {'0x6bb', '0x6bf'}
----------------------------------
Block 0x6a8
0x6a9: v6a9(0x0) = CONST 
0x6ab: v6ab(0x1) = CONST 
0x6ad: v6ad(0xa0) = CONST 
0x6af: v6af(0x2) = CONST 
0x6b1: v6b1(0x10000000000000000000000000000000000000000) = EXP v6af(0x2) v6ad(0xa0)
0x6b2: v6b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6b1(0x10000000000000000000000000000000000000000) v6ab(0x1)
0x6b4: v6b4 = AND v1f0 v6b2(0xffffffffffffffffffffffffffffffffffffffff)
0x6b5: v6b5 = ISZERO v6b4
0x6b6: v6b6 = ISZERO v6b5
0x6b7: v6b7(0x6bf) = CONST 
0x6ba: JUMPI v6b7(0x6bf) v6b6
----------------------------------

Begin block 0x6bb
prev = {'0x6a8'}, next = {}
----------------------------------
Block 0x6bb
0x6bb: v6bb(0x0) = CONST 
0x6be: REVERT v6bb(0x0) v6bb(0x0)
----------------------------------

Begin block 0x6bf
prev = {'0x6a8'}, next = {'0x1fa0x1c1'}
----------------------------------
Block 0x6bf
0x6c0: v6c0 = CALLER 
0x6c1: v6c1(0x0) = CONST 
0x6c5: MSTORE v6c1(0x0) v6c0
0x6c6: v6c6(0x1) = CONST 
0x6c8: v6c8(0x20) = CONST 
0x6cc: MSTORE v6c8(0x20) v6c6(0x1)
0x6cd: v6cd(0x40) = CONST 
0x6d1: v6d1 = SHA3 v6c1(0x0) v6cd(0x40)
0x6d2: v6d2(0x1) = CONST 
0x6d4: v6d4(0xa0) = CONST 
0x6d6: v6d6(0x2) = CONST 
0x6d8: v6d8(0x10000000000000000000000000000000000000000) = EXP v6d6(0x2) v6d4(0xa0)
0x6d9: v6d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6d8(0x10000000000000000000000000000000000000000) v6d2(0x1)
0x6db: v6db = AND v1f0 v6d9(0xffffffffffffffffffffffffffffffffffffffff)
0x6de: MSTORE v6c1(0x0) v6db
0x6e1: MSTORE v6c8(0x20) v6d1
0x6e5: v6e5 = SHA3 v6c1(0x0) v6cd(0x40)
0x6e8: SSTORE v6e5 v1f5
0x6ea: v6ea = MLOAD v6cd(0x40)
0x6ed: MSTORE v6ea v1f5
0x6ef: v6ef = MLOAD v6cd(0x40)
0x6f3: v6f3(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x718: v718 = SUB v6ea v6ef
0x71b: v71b = ADD v6c8(0x20) v718
0x71d: LOG3 v6ef v71b v6f3(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v6c0 v6db
0x71f: v71f(0x1) = CONST 
0x725: JUMP v1cf(0x1fa)
----------------------------------

Begin block 0x7260x20e
prev = {'0x231'}, next = {'0x2490x20e'}
----------------------------------
Block 0x7260x20e
0x7270x20e: v20e727(0x1) = CONST 
0x7290x20e: v20e729(0xa0) = CONST 
0x72b0x20e: v20e72b(0x2) = CONST 
0x72d0x20e: v20e72d(0x10000000000000000000000000000000000000000) = EXP v20e72b(0x2) v20e729(0xa0)
0x72e0x20e: v20e72e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v20e72d(0x10000000000000000000000000000000000000000) v20e727(0x1)
0x7310x20e: v20e731 = AND v20e72e(0xffffffffffffffffffffffffffffffffffffffff) v23e
0x7320x20e: v20e732(0x0) = CONST 
0x7360x20e: MSTORE v20e732(0x0) v20e731
0x7370x20e: v20e737(0x8) = CONST 
0x7390x20e: v20e739(0x20) = CONST 
0x73d0x20e: MSTORE v20e739(0x20) v20e737(0x8)
0x73e0x20e: v20e73e(0x40) = CONST 
0x7420x20e: v20e742 = SHA3 v20e732(0x0) v20e73e(0x40)
0x7460x20e: v20e746 = AND v20e72e(0xffffffffffffffffffffffffffffffffffffffff) v244
0x7480x20e: MSTORE v20e732(0x0) v20e746
0x74c0x20e: MSTORE v20e739(0x20) v20e742
0x74d0x20e: v20e74d = SHA3 v20e732(0x0) v20e73e(0x40)
0x74e0x20e: v20e74e = SLOAD v20e74d
0x7500x20e: JUMP v21c(0x249)
----------------------------------

Begin block 0x7260x452
prev = {'0xbfb'}, next = {'0xc05'}
----------------------------------
Block 0x7260x452
0x7270x452: v452727(0x1) = CONST 
0x7290x452: v452729(0xa0) = CONST 
0x72b0x452: v45272b(0x2) = CONST 
0x72d0x452: v45272d(0x10000000000000000000000000000000000000000) = EXP v45272b(0x2) v452729(0xa0)
0x72e0x452: v45272e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v45272d(0x10000000000000000000000000000000000000000) v452727(0x1)
0x7310x452: v452731 = AND v45272e(0xffffffffffffffffffffffffffffffffffffffff) v481
0x7320x452: v452732(0x0) = CONST 
0x7360x452: MSTORE v452732(0x0) v452731
0x7370x452: v452737(0x8) = CONST 
0x7390x452: v452739(0x20) = CONST 
0x73d0x452: MSTORE v452739(0x20) v452737(0x8)
0x73e0x452: v45273e(0x40) = CONST 
0x7420x452: v452742 = SHA3 v452732(0x0) v45273e(0x40)
0x7460x452: v452746 = AND v45272e(0xffffffffffffffffffffffffffffffffffffffff) vbe8
0x7480x452: MSTORE v452732(0x0) v452746
0x74c0x452: MSTORE v452739(0x20) v452742
0x74d0x452: v45274d = SHA3 v452732(0x0) v45273e(0x40)
0x74e0x452: v45274e = SLOAD v45274d
0x7500x452: JUMP vbfc(0xc05)
----------------------------------

Begin block 0x751
prev = {'0x267'}, next = {'0x2490x25b'}
----------------------------------
Block 0x751
0x752: v752(0x2) = CONST 
0x754: v754 = SLOAD v752(0x2)
0x756: JUMP v269(0x249)
----------------------------------

Begin block 0x757
prev = {'0x293'}, next = {'0x76a', '0x7b9'}
----------------------------------
Block 0x757
0x758: v758(0x0) = CONST 
0x75a: v75a(0x1) = CONST 
0x75c: v75c(0xa0) = CONST 
0x75e: v75e(0x2) = CONST 
0x760: v760(0x10000000000000000000000000000000000000000) = EXP v75e(0x2) v75c(0xa0)
0x761: v761(0xffffffffffffffffffffffffffffffffffffffff) = SUB v760(0x10000000000000000000000000000000000000000) v75a(0x1)
0x763: v763 = AND v29f v761(0xffffffffffffffffffffffffffffffffffffffff)
0x764: v764 = ISZERO v763
0x765: v765 = ISZERO v764
0x766: v766(0x7b9) = CONST 
0x769: JUMPI v766(0x7b9) v765
----------------------------------

Begin block 0x76a
prev = {'0x757'}, next = {}
----------------------------------
Block 0x76a
0x76a: v76a(0x40) = CONST 
0x76d: v76d = MLOAD v76a(0x40)
0x76e: v76e(0xe5) = CONST 
0x770: v770(0x2) = CONST 
0x772: v772(0x2000000000000000000000000000000000000000000000000000000000) = EXP v770(0x2) v76e(0xe5)
0x773: v773(0x461bcd) = CONST 
0x777: v777(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v773(0x461bcd) v772(0x2000000000000000000000000000000000000000000000000000000000)
0x779: MSTORE v76d v777(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x77a: v77a(0x20) = CONST 
0x77c: v77c(0x4) = CONST 
0x77f: v77f = ADD v76d v77c(0x4)
0x780: MSTORE v77f v77a(0x20)
0x781: v781(0x16) = CONST 
0x783: v783(0x24) = CONST 
0x786: v786 = ADD v76d v783(0x24)
0x787: MSTORE v786 v781(0x16)
0x788: v788(0x496e76616c6964206275726e6572206164647265737300000000000000000000) = CONST 
0x7a9: v7a9(0x44) = CONST 
0x7ac: v7ac = ADD v76d v7a9(0x44)
0x7ad: MSTORE v7ac v788(0x496e76616c6964206275726e6572206164647265737300000000000000000000)
0x7af: v7af = MLOAD v76a(0x40)
0x7b3: v7b3 = SUB v76d v7af
0x7b4: v7b4(0x64) = CONST 
0x7b6: v7b6 = ADD v7b4(0x64) v7b3
0x7b8: REVERT v7af v7b6
----------------------------------

Begin block 0x7b9
prev = {'0x757'}, next = {'0x7ed0x270'}
----------------------------------
Block 0x7b9
0x7ba: v7ba = CALLER 
0x7bb: v7bb(0x0) = CONST 
0x7bf: MSTORE v7bb(0x0) v7ba
0x7c0: v7c0(0x8) = CONST 
0x7c2: v7c2(0x20) = CONST 
0x7c6: MSTORE v7c2(0x20) v7c0(0x8)
0x7c7: v7c7(0x40) = CONST 
0x7cb: v7cb = SHA3 v7bb(0x0) v7c7(0x40)
0x7cc: v7cc(0x1) = CONST 
0x7ce: v7ce(0xa0) = CONST 
0x7d0: v7d0(0x2) = CONST 
0x7d2: v7d2(0x10000000000000000000000000000000000000000) = EXP v7d0(0x2) v7ce(0xa0)
0x7d3: v7d3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7d2(0x10000000000000000000000000000000000000000) v7cc(0x1)
0x7d5: v7d5 = AND v29f v7d3(0xffffffffffffffffffffffffffffffffffffffff)
0x7d7: MSTORE v7bb(0x0) v7d5
0x7da: MSTORE v7c2(0x20) v7cb
0x7dc: v7dc = SHA3 v7bb(0x0) v7c7(0x40)
0x7dd: v7dd = SLOAD v7dc
0x7de: v7de(0x7ed) = CONST 
0x7e3: v7e3(0xffffffff) = CONST 
0x7e8: v7e8(0xede) = CONST 
0x7eb: v7eb(0xede) = AND v7e8(0xede) v7e3(0xffffffff)
0x7ec: v7ec_0 = CALLPRIVATE v7eb(0xede) v2a4 v7dd v7de(0x7ed)
----------------------------------

Begin block 0x7ed0x270
prev = {'0x7b9'}, next = {'0x1fa0x270'}
----------------------------------
Block 0x7ed0x270
0x7ee0x270: v2707ee = CALLER 
0x7ef0x270: v2707ef(0x0) = CONST 
0x7f30x270: MSTORE v2707ef(0x0) v2707ee
0x7f40x270: v2707f4(0x8) = CONST 
0x7f60x270: v2707f6(0x20) = CONST 
0x7fa0x270: MSTORE v2707f6(0x20) v2707f4(0x8)
0x7fb0x270: v2707fb(0x40) = CONST 
0x7ff0x270: v2707ff = SHA3 v2707ef(0x0) v2707fb(0x40)
0x8000x270: v270800(0x1) = CONST 
0x8020x270: v270802(0xa0) = CONST 
0x8040x270: v270804(0x2) = CONST 
0x8060x270: v270806(0x10000000000000000000000000000000000000000) = EXP v270804(0x2) v270802(0xa0)
0x8070x270: v270807(0xffffffffffffffffffffffffffffffffffffffff) = SUB v270806(0x10000000000000000000000000000000000000000) v270800(0x1)
0x8090x270: v270809 = AND v29f v270807(0xffffffffffffffffffffffffffffffffffffffff)
0x80c0x270: MSTORE v2707ef(0x0) v270809
0x80f0x270: MSTORE v2707f6(0x20) v2707ff
0x8130x270: v270813 = SHA3 v2707ef(0x0) v2707fb(0x40)
0x8160x270: SSTORE v270813 v7ec_0
0x8180x270: v270818 = MLOAD v2707fb(0x40)
0x81b0x270: MSTORE v270818 v7ec_0
0x81c0x270: v27081c = MLOAD v2707fb(0x40)
0x81f0x270: v27081f(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) = CONST 
0x8440x270: v270844 = SUB v270818 v27081c
0x8470x270: v270847 = ADD v2707f6(0x20) v270844
0x8490x270: LOG3 v27081c v270847 v27081f(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) v2707ee v270809
0x84b0x270: v27084b(0x1) = CONST 
0x8510x270: JUMP v27e(0x1fa)
----------------------------------

Begin block 0x7ed0x317
prev = {'0x986'}, next = {'0x1fa0x317'}
----------------------------------
Block 0x7ed0x317
0x7ee0x317: v3177ee = CALLER 
0x7ef0x317: v3177ef(0x0) = CONST 
0x7f30x317: MSTORE v3177ef(0x0) v3177ee
0x7f40x317: v3177f4(0x8) = CONST 
0x7f60x317: v3177f6(0x20) = CONST 
0x7fa0x317: MSTORE v3177f6(0x20) v3177f4(0x8)
0x7fb0x317: v3177fb(0x40) = CONST 
0x7ff0x317: v3177ff = SHA3 v3177ef(0x0) v3177fb(0x40)
0x8000x317: v317800(0x1) = CONST 
0x8020x317: v317802(0xa0) = CONST 
0x8040x317: v317804(0x2) = CONST 
0x8060x317: v317806(0x10000000000000000000000000000000000000000) = EXP v317804(0x2) v317802(0xa0)
0x8070x317: v317807(0xffffffffffffffffffffffffffffffffffffffff) = SUB v317806(0x10000000000000000000000000000000000000000) v317800(0x1)
0x8090x317: v317809 = AND v346 v317807(0xffffffffffffffffffffffffffffffffffffffff)
0x80c0x317: MSTORE v3177ef(0x0) v317809
0x80f0x317: MSTORE v3177f6(0x20) v3177ff
0x8130x317: v317813 = SHA3 v3177ef(0x0) v3177fb(0x40)
0x8160x317: SSTORE v317813 v9b9_0
0x8180x317: v317818 = MLOAD v3177fb(0x40)
0x81b0x317: MSTORE v317818 v9b9_0
0x81c0x317: v31781c = MLOAD v3177fb(0x40)
0x81f0x317: v31781f(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) = CONST 
0x8440x317: v317844 = SUB v317818 v31781c
0x8470x317: v317847 = ADD v3177f6(0x20) v317844
0x8490x317: LOG3 v31781c v317847 v31781f(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) v3177ee v317809
0x84b0x317: v31784b(0x1) = CONST 
0x8510x317: JUMP v325(0x1fa)
----------------------------------

Begin block 0x852
prev = {'0x2cc'}, next = {'0x886'}
----------------------------------
Block 0x852
0x853: v853(0x1) = CONST 
0x855: v855(0xa0) = CONST 
0x857: v857(0x2) = CONST 
0x859: v859(0x10000000000000000000000000000000000000000) = EXP v857(0x2) v855(0xa0)
0x85a: v85a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v859(0x10000000000000000000000000000000000000000) v853(0x1)
0x85c: v85c = AND v2d9 v85a(0xffffffffffffffffffffffffffffffffffffffff)
0x85d: v85d(0x0) = CONST 
0x861: MSTORE v85d(0x0) v85c
0x862: v862(0x1) = CONST 
0x864: v864(0x20) = CONST 
0x868: MSTORE v864(0x20) v862(0x1)
0x869: v869(0x40) = CONST 
0x86d: v86d = SHA3 v85d(0x0) v869(0x40)
0x86e: v86e = CALLER 
0x870: MSTORE v85d(0x0) v86e
0x873: MSTORE v864(0x20) v86d
0x875: v875 = SHA3 v85d(0x0) v869(0x40)
0x876: v876 = SLOAD v875
0x877: v877(0x886) = CONST 
0x87c: v87c(0xffffffff) = CONST 
0x881: v881(0xef7) = CONST 
0x884: v884(0xef7) = AND v881(0xef7) v87c(0xffffffff)
0x885: v885_0 = CALLPRIVATE v884(0xef7) v2e7 v876 v877(0x886)
----------------------------------

Begin block 0x886
prev = {'0x852'}, next = {'0x8b5'}
----------------------------------
Block 0x886
0x887: v887(0x1) = CONST 
0x889: v889(0xa0) = CONST 
0x88b: v88b(0x2) = CONST 
0x88d: v88d(0x10000000000000000000000000000000000000000) = EXP v88b(0x2) v889(0xa0)
0x88e: v88e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v88d(0x10000000000000000000000000000000000000000) v887(0x1)
0x890: v890 = AND v2d9 v88e(0xffffffffffffffffffffffffffffffffffffffff)
0x891: v891(0x0) = CONST 
0x895: MSTORE v891(0x0) v890
0x896: v896(0x1) = CONST 
0x898: v898(0x20) = CONST 
0x89c: MSTORE v898(0x20) v896(0x1)
0x89d: v89d(0x40) = CONST 
0x8a1: v8a1 = SHA3 v891(0x0) v89d(0x40)
0x8a2: v8a2 = CALLER 
0x8a4: MSTORE v891(0x0) v8a2
0x8a7: MSTORE v898(0x20) v8a1
0x8a9: v8a9 = SHA3 v891(0x0) v89d(0x40)
0x8aa: SSTORE v8a9 v885_0
0x8ab: v8ab(0x8b5) = CONST 
0x8b1: v8b1(0xf0c) = CONST 
0x8b4: CALLPRIVATE v8b1(0xf0c) v2e7 v2e2 v2d9 v8ab(0x8b5)
----------------------------------

Begin block 0x8b5
prev = {'0x886'}, next = {'0x1fa0x2a9'}
----------------------------------
Block 0x8b5
0x8b6: v8b6(0x1) = CONST 
0x8b8: v8b8(0xa0) = CONST 
0x8ba: v8ba(0x2) = CONST 
0x8bc: v8bc(0x10000000000000000000000000000000000000000) = EXP v8ba(0x2) v8b8(0xa0)
0x8bd: v8bd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8bc(0x10000000000000000000000000000000000000000) v8b6(0x1)
0x8bf: v8bf = AND v2d9 v8bd(0xffffffffffffffffffffffffffffffffffffffff)
0x8c0: v8c0(0x0) = CONST 
0x8c4: MSTORE v8c0(0x0) v8bf
0x8c5: v8c5(0x1) = CONST 
0x8c7: v8c7(0x20) = CONST 
0x8cb: MSTORE v8c7(0x20) v8c5(0x1)
0x8cc: v8cc(0x40) = CONST 
0x8d0: v8d0 = SHA3 v8c0(0x0) v8cc(0x40)
0x8d1: v8d1 = CALLER 
0x8d4: MSTORE v8c0(0x0) v8d1
0x8d7: MSTORE v8c7(0x20) v8d0
0x8db: v8db = SHA3 v8c0(0x0) v8cc(0x40)
0x8dc: v8dc = SLOAD v8db
0x8de: v8de = MLOAD v8cc(0x40)
0x8e1: MSTORE v8de v8dc
0x8e3: v8e3 = MLOAD v8cc(0x40)
0x8e7: v8e7(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x90c: v90c = SUB v8de v8e3
0x90f: v90f = ADD v8c7(0x20) v90c
0x911: LOG3 v8e3 v90f v8e7(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v8bf v8d1
0x913: v913(0x1) = CONST 
0x91a: JUMP v2b7(0x1fa)
----------------------------------

Begin block 0x91b
prev = {'0x2f8'}, next = {'0x301'}
----------------------------------
Block 0x91b
0x91c: v91c(0x5) = CONST 
0x91e: v91e = SLOAD v91c(0x5)
0x91f: v91f(0xff) = CONST 
0x921: v921 = AND v91f(0xff) v91e
0x923: JUMP v2fa(0x301)
----------------------------------

Begin block 0x924
prev = {'0x33a'}, next = {'0x986', '0x937'}
----------------------------------
Block 0x924
0x925: v925(0x0) = CONST 
0x927: v927(0x1) = CONST 
0x929: v929(0xa0) = CONST 
0x92b: v92b(0x2) = CONST 
0x92d: v92d(0x10000000000000000000000000000000000000000) = EXP v92b(0x2) v929(0xa0)
0x92e: v92e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v92d(0x10000000000000000000000000000000000000000) v927(0x1)
0x930: v930 = AND v346 v92e(0xffffffffffffffffffffffffffffffffffffffff)
0x931: v931 = ISZERO v930
0x932: v932 = ISZERO v931
0x933: v933(0x986) = CONST 
0x936: JUMPI v933(0x986) v932
----------------------------------

Begin block 0x937
prev = {'0x924'}, next = {}
----------------------------------
Block 0x937
0x937: v937(0x40) = CONST 
0x93a: v93a = MLOAD v937(0x40)
0x93b: v93b(0xe5) = CONST 
0x93d: v93d(0x2) = CONST 
0x93f: v93f(0x2000000000000000000000000000000000000000000000000000000000) = EXP v93d(0x2) v93b(0xe5)
0x940: v940(0x461bcd) = CONST 
0x944: v944(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL v940(0x461bcd) v93f(0x2000000000000000000000000000000000000000000000000000000000)
0x946: MSTORE v93a v944(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x947: v947(0x20) = CONST 
0x949: v949(0x4) = CONST 
0x94c: v94c = ADD v93a v949(0x4)
0x94d: MSTORE v94c v947(0x20)
0x94e: v94e(0x16) = CONST 
0x950: v950(0x24) = CONST 
0x953: v953 = ADD v93a v950(0x24)
0x954: MSTORE v953 v94e(0x16)
0x955: v955(0x496e76616c6964206275726e6572206164647265737300000000000000000000) = CONST 
0x976: v976(0x44) = CONST 
0x979: v979 = ADD v93a v976(0x44)
0x97a: MSTORE v979 v955(0x496e76616c6964206275726e6572206164647265737300000000000000000000)
0x97c: v97c = MLOAD v937(0x40)
0x980: v980 = SUB v93a v97c
0x981: v981(0x64) = CONST 
0x983: v983 = ADD v981(0x64) v980
0x985: REVERT v97c v983
----------------------------------

Begin block 0x986
prev = {'0x924'}, next = {'0x7ed0x317'}
----------------------------------
Block 0x986
0x987: v987 = CALLER 
0x988: v988(0x0) = CONST 
0x98c: MSTORE v988(0x0) v987
0x98d: v98d(0x8) = CONST 
0x98f: v98f(0x20) = CONST 
0x993: MSTORE v98f(0x20) v98d(0x8)
0x994: v994(0x40) = CONST 
0x998: v998 = SHA3 v988(0x0) v994(0x40)
0x999: v999(0x1) = CONST 
0x99b: v99b(0xa0) = CONST 
0x99d: v99d(0x2) = CONST 
0x99f: v99f(0x10000000000000000000000000000000000000000) = EXP v99d(0x2) v99b(0xa0)
0x9a0: v9a0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99f(0x10000000000000000000000000000000000000000) v999(0x1)
0x9a2: v9a2 = AND v346 v9a0(0xffffffffffffffffffffffffffffffffffffffff)
0x9a4: MSTORE v988(0x0) v9a2
0x9a7: MSTORE v98f(0x20) v998
0x9a9: v9a9 = SHA3 v988(0x0) v994(0x40)
0x9aa: v9aa = SLOAD v9a9
0x9ab: v9ab(0x7ed) = CONST 
0x9b0: v9b0(0xffffffff) = CONST 
0x9b5: v9b5(0xef7) = CONST 
0x9b8: v9b8(0xef7) = AND v9b5(0xef7) v9b0(0xffffffff)
0x9b9: v9b9_0 = CALLPRIVATE v9b8(0xef7) v34b v9aa v9ab(0x7ed)
----------------------------------

Begin block 0x9ba
prev = {'0x373'}, next = {'0x9d1', '0x9cd'}
----------------------------------
Block 0x9ba
0x9bb: v9bb(0x0) = CONST 
0x9bd: v9bd(0x1) = CONST 
0x9bf: v9bf(0xa0) = CONST 
0x9c1: v9c1(0x2) = CONST 
0x9c3: v9c3(0x10000000000000000000000000000000000000000) = EXP v9c1(0x2) v9bf(0xa0)
0x9c4: v9c4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9c3(0x10000000000000000000000000000000000000000) v9bd(0x1)
0x9c6: v9c6 = AND v37f v9c4(0xffffffffffffffffffffffffffffffffffffffff)
0x9c7: v9c7 = ISZERO v9c6
0x9c8: v9c8 = ISZERO v9c7
0x9c9: v9c9(0x9d1) = CONST 
0x9cc: JUMPI v9c9(0x9d1) v9c8
----------------------------------

Begin block 0x9cd
prev = {'0x9ba'}, next = {}
----------------------------------
Block 0x9cd
0x9cd: v9cd(0x0) = CONST 
0x9d0: REVERT v9cd(0x0) v9cd(0x0)
----------------------------------

Begin block 0x9d1
prev = {'0x9ba'}, next = {'0xa050x350'}
----------------------------------
Block 0x9d1
0x9d2: v9d2 = CALLER 
0x9d3: v9d3(0x0) = CONST 
0x9d7: MSTORE v9d3(0x0) v9d2
0x9d8: v9d8(0x1) = CONST 
0x9da: v9da(0x20) = CONST 
0x9de: MSTORE v9da(0x20) v9d8(0x1)
0x9df: v9df(0x40) = CONST 
0x9e3: v9e3 = SHA3 v9d3(0x0) v9df(0x40)
0x9e4: v9e4(0x1) = CONST 
0x9e6: v9e6(0xa0) = CONST 
0x9e8: v9e8(0x2) = CONST 
0x9ea: v9ea(0x10000000000000000000000000000000000000000) = EXP v9e8(0x2) v9e6(0xa0)
0x9eb: v9eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9ea(0x10000000000000000000000000000000000000000) v9e4(0x1)
0x9ed: v9ed = AND v37f v9eb(0xffffffffffffffffffffffffffffffffffffffff)
0x9ef: MSTORE v9d3(0x0) v9ed
0x9f2: MSTORE v9da(0x20) v9e3
0x9f4: v9f4 = SHA3 v9d3(0x0) v9df(0x40)
0x9f5: v9f5 = SLOAD v9f4
0x9f6: v9f6(0xa05) = CONST 
0x9fb: v9fb(0xffffffff) = CONST 
0xa00: va00(0xede) = CONST 
0xa03: va03(0xede) = AND va00(0xede) v9fb(0xffffffff)
0xa04: va04_0 = CALLPRIVATE va03(0xede) v384 v9f5 v9f6(0xa05)
----------------------------------

Begin block 0xa050x350
prev = {'0x9d1'}, next = {'0x1fa0x350'}
----------------------------------
Block 0xa050x350
0xa060x350: v350a06 = CALLER 
0xa070x350: v350a07(0x0) = CONST 
0xa0b0x350: MSTORE v350a07(0x0) v350a06
0xa0c0x350: v350a0c(0x1) = CONST 
0xa0e0x350: v350a0e(0x20) = CONST 
0xa120x350: MSTORE v350a0e(0x20) v350a0c(0x1)
0xa130x350: v350a13(0x40) = CONST 
0xa170x350: v350a17 = SHA3 v350a07(0x0) v350a13(0x40)
0xa180x350: v350a18(0x1) = CONST 
0xa1a0x350: v350a1a(0xa0) = CONST 
0xa1c0x350: v350a1c(0x2) = CONST 
0xa1e0x350: v350a1e(0x10000000000000000000000000000000000000000) = EXP v350a1c(0x2) v350a1a(0xa0)
0xa1f0x350: v350a1f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v350a1e(0x10000000000000000000000000000000000000000) v350a18(0x1)
0xa210x350: v350a21 = AND v37f v350a1f(0xffffffffffffffffffffffffffffffffffffffff)
0xa240x350: MSTORE v350a07(0x0) v350a21
0xa270x350: MSTORE v350a0e(0x20) v350a17
0xa2b0x350: v350a2b = SHA3 v350a07(0x0) v350a13(0x40)
0xa2e0x350: SSTORE v350a2b va04_0
0xa300x350: v350a30 = MLOAD v350a13(0x40)
0xa330x350: MSTORE v350a30 va04_0
0xa340x350: v350a34 = MLOAD v350a13(0x40)
0xa370x350: v350a37(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa5c0x350: v350a5c = SUB v350a30 v350a34
0xa5f0x350: v350a5f = ADD v350a0e(0x20) v350a5c
0xa610x350: LOG3 v350a34 v350a5f v350a37(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v350a06 v350a21
0xa630x350: v350a63(0x1) = CONST 
0xa690x350: JUMP v35e(0x1fa)
----------------------------------

Begin block 0xa050x4ea
prev = {'0xdc8'}, next = {'0x1fa0x4ea'}
----------------------------------
Block 0xa050x4ea
0xa060x4ea: v4eaa06 = CALLER 
0xa070x4ea: v4eaa07(0x0) = CONST 
0xa0b0x4ea: MSTORE v4eaa07(0x0) v4eaa06
0xa0c0x4ea: v4eaa0c(0x1) = CONST 
0xa0e0x4ea: v4eaa0e(0x20) = CONST 
0xa120x4ea: MSTORE v4eaa0e(0x20) v4eaa0c(0x1)
0xa130x4ea: v4eaa13(0x40) = CONST 
0xa170x4ea: v4eaa17 = SHA3 v4eaa07(0x0) v4eaa13(0x40)
0xa180x4ea: v4eaa18(0x1) = CONST 
0xa1a0x4ea: v4eaa1a(0xa0) = CONST 
0xa1c0x4ea: v4eaa1c(0x2) = CONST 
0xa1e0x4ea: v4eaa1e(0x10000000000000000000000000000000000000000) = EXP v4eaa1c(0x2) v4eaa1a(0xa0)
0xa1f0x4ea: v4eaa1f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4eaa1e(0x10000000000000000000000000000000000000000) v4eaa18(0x1)
0xa210x4ea: v4eaa21 = AND v519 v4eaa1f(0xffffffffffffffffffffffffffffffffffffffff)
0xa240x4ea: MSTORE v4eaa07(0x0) v4eaa21
0xa270x4ea: MSTORE v4eaa0e(0x20) v4eaa17
0xa2b0x4ea: v4eaa2b = SHA3 v4eaa07(0x0) v4eaa13(0x40)
0xa2e0x4ea: SSTORE v4eaa2b vdfb_0
0xa300x4ea: v4eaa30 = MLOAD v4eaa13(0x40)
0xa330x4ea: MSTORE v4eaa30 vdfb_0
0xa340x4ea: v4eaa34 = MLOAD v4eaa13(0x40)
0xa370x4ea: v4eaa37(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa5c0x4ea: v4eaa5c = SUB v4eaa30 v4eaa34
0xa5f0x4ea: v4eaa5f = ADD v4eaa0e(0x20) v4eaa5c
0xa610x4ea: LOG3 v4eaa34 v4eaa5f v4eaa37(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v4eaa06 v4eaa21
0xa630x4ea: v4eaa63(0x1) = CONST 
0xa690x4ea: JUMP v4f8(0x1fa)
----------------------------------

Begin block 0xa6a
prev = {'0x3ac'}, next = {'0xa75'}
----------------------------------
Block 0xa6a
0xa6b: va6b(0x0) = CONST 
0xa6d: va6d(0xa75) = CONST 
0xa70: va70 = CALLER 
0xa71: va71(0xe09) = CONST 
0xa74: va74_0 = CALLPRIVATE va71(0xe09) va70 va6d(0xa75)
----------------------------------

Begin block 0xa75
prev = {'0xa6a'}, next = {'0xa7c', '0xa80'}
----------------------------------
Block 0xa75
0xa76: va76 = ISZERO va74_0
0xa77: va77 = ISZERO va76
0xa78: va78(0xa80) = CONST 
0xa7b: JUMPI va78(0xa80) va77
----------------------------------

Begin block 0xa7c
prev = {'0xa75'}, next = {}
----------------------------------
Block 0xa7c
0xa7c: va7c(0x0) = CONST 
0xa7f: REVERT va7c(0x0) va7c(0x0)
----------------------------------

Begin block 0xa80
prev = {'0xa75'}, next = {'0xfd9'}
----------------------------------
Block 0xa80
0xa81: va81(0xa8a) = CONST 
0xa86: va86(0xfd9) = CONST 
0xa89: JUMP va86(0xfd9)
----------------------------------

Begin block 0xa8a0x389
prev = {'0x102d'}, next = {'0x1fa0x389'}
----------------------------------
Block 0xa8a0x389
0xa8c0x389: v389a8c(0x1) = CONST 
0xa920x389: JUMP v397(0x1fa)
----------------------------------

Begin block 0xa8a0x523
prev = {'0xdfc'}, next = {'0x1fa0x523'}
----------------------------------
Block 0xa8a0x523
0xa8c0x523: v523a8c(0x1) = CONST 
0xa920x523: JUMP v531(0x1fa)
----------------------------------

Begin block 0xa93
prev = {'0x3e5'}, next = {'0xa9e'}
----------------------------------
Block 0xa93
0xa94: va94(0x0) = CONST 
0xa96: va96(0xa9e) = CONST 
0xa99: va99 = CALLER 
0xa9a: va9a(0xb2c) = CONST 
0xa9d: va9d_0 = CALLPRIVATE va9a(0xb2c) va99 va96(0xa9e)
----------------------------------

Begin block 0xa9e
prev = {'0xa93'}, next = {'0xb1a', '0xaa5'}
----------------------------------
Block 0xa9e
0xa9f: va9f = ISZERO va9d_0
0xaa0: vaa0 = ISZERO va9f
0xaa1: vaa1(0xb1a) = CONST 
0xaa4: JUMPI vaa1(0xb1a) vaa0
----------------------------------

Begin block 0xaa5
prev = {'0xa9e'}, next = {}
----------------------------------
Block 0xaa5
0xaa5: vaa5(0x40) = CONST 
0xaa8: vaa8 = MLOAD vaa5(0x40)
0xaa9: vaa9(0xe5) = CONST 
0xaab: vaab(0x2) = CONST 
0xaad: vaad(0x2000000000000000000000000000000000000000000000000000000000) = EXP vaab(0x2) vaa9(0xe5)
0xaae: vaae(0x461bcd) = CONST 
0xab2: vab2(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vaae(0x461bcd) vaad(0x2000000000000000000000000000000000000000000000000000000000)
0xab4: MSTORE vaa8 vab2(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xab5: vab5(0x20) = CONST 
0xab7: vab7(0x4) = CONST 
0xaba: vaba = ADD vaa8 vab7(0x4)
0xabb: MSTORE vaba vab5(0x20)
0xabc: vabc(0x22) = CONST 
0xabe: vabe(0x24) = CONST 
0xac1: vac1 = ADD vaa8 vabe(0x24)
0xac2: MSTORE vac1 vabc(0x22)
0xac3: vac3(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f) = CONST 
0xae4: vae4(0x44) = CONST 
0xae7: vae7 = ADD vaa8 vae4(0x44)
0xae8: MSTORE vae7 vac3(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f)
0xae9: vae9(0x6c65000000000000000000000000000000000000000000000000000000000000) = CONST 
0xb0a: vb0a(0x64) = CONST 
0xb0d: vb0d = ADD vaa8 vb0a(0x64)
0xb0e: MSTORE vb0d vae9(0x6c65000000000000000000000000000000000000000000000000000000000000)
0xb10: vb10 = MLOAD vaa5(0x40)
0xb14: vb14 = SUB vaa8 vb10
0xb15: vb15(0x84) = CONST 
0xb17: vb17 = ADD vb15(0x84) vb14
0xb19: REVERT vb10 vb17
----------------------------------

Begin block 0xb1a
prev = {'0xa9e'}, next = {'0xb24'}
----------------------------------
Block 0xb1a
0xb1b: vb1b(0xb24) = CONST 
0xb1e: vb1e = CALLER 
0xb20: vb20(0x1083) = CONST 
0xb23: CALLPRIVATE vb20(0x1083) v3e7 vb1e vb1b(0xb24)
----------------------------------

Begin block 0xb24
prev = {'0xb1a'}, next = {'0x1fa0x3c2'}
----------------------------------
Block 0xb24
0xb26: vb26(0x1) = CONST 
0xb2b: JUMP v3d0(0x1fa)
----------------------------------

Begin block 0xb2c
prev = {}, next = {'0xb3f0xb2c'}
----------------------------------
function 0xb2c(vb2carg0, vb2carg1)
Block 0xb2c
0xb2d: vb2d(0x0) = CONST 
0xb2f: vb2f(0xb3f) = CONST 
0xb32: vb32(0x7) = CONST 
0xb35: vb35(0xffffffff) = CONST 
0xb3a: vb3a(0x112c) = CONST 
0xb3d: vb3d(0x112c) = AND vb3a(0x112c) vb35(0xffffffff)
0xb3e: vb3e_0 = CALLPRIVATE vb3d(0x112c) vb2carg0 vb32(0x7) vb2f(0xb3f)
----------------------------------

Begin block 0xb2c0x3ec
prev = {'0x40f'}, next = {'0xb3f0x3ec'}
----------------------------------
Block 0xb2c0x3ec
0xb2d0x3ec: v3ecb2d(0x0) = CONST 
0xb2f0x3ec: v3ecb2f(0xb3f) = CONST 
0xb320x3ec: v3ecb32(0x7) = CONST 
0xb350x3ec: v3ecb35(0xffffffff) = CONST 
0xb3a0x3ec: v3ecb3a(0x112c) = CONST 
0xb3d0x3ec: v3ecb3d(0x112c) = AND v3ecb3a(0x112c) v3ecb35(0xffffffff)
0xb3e0x3ec: v3ecb3e_0 = CALLPRIVATE v3ecb3d(0x112c) v41a v3ecb32(0x7) v3ecb2f(0xb3f)
----------------------------------

Begin block 0xb3f0x3ec
prev = {'0xb2c0x3ec'}, next = {'0x1fa0x3ec'}
----------------------------------
Block 0xb3f0x3ec
0xb440x3ec: JUMP v3fa(0x1fa)
----------------------------------

Begin block 0xb3f0x55c
prev = {'0xe090x55c'}, next = {'0x1fa0x55c'}
----------------------------------
Block 0xb3f0x55c
0xb440x55c: JUMP v56a(0x1fa)
----------------------------------

Begin block 0xb3f0xb2c
prev = {'0xb2c'}, next = {}
----------------------------------
Block 0xb3f0xb2c
0xb440xb2c: RETURNPRIVATE vb2carg1 vb3e_0
----------------------------------

Begin block 0xb3f0xe09
prev = {'0xe09'}, next = {}
----------------------------------
Block 0xb3f0xe09
0xb440xe09: RETURNPRIVATE ve09arg1 ve1b_0
----------------------------------

Begin block 0xb45
prev = {'0x442'}, next = {'0x2490x41f'}
----------------------------------
Block 0xb45
0xb46: vb46(0x1) = CONST 
0xb48: vb48(0xa0) = CONST 
0xb4a: vb4a(0x2) = CONST 
0xb4c: vb4c(0x10000000000000000000000000000000000000000) = EXP vb4a(0x2) vb48(0xa0)
0xb4d: vb4d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb4c(0x10000000000000000000000000000000000000000) vb46(0x1)
0xb4e: vb4e = AND vb4d(0xffffffffffffffffffffffffffffffffffffffff) v44d
0xb4f: vb4f(0x0) = CONST 
0xb53: MSTORE vb4f(0x0) vb4e
0xb54: vb54(0x20) = CONST 
0xb58: MSTORE vb54(0x20) vb4f(0x0)
0xb59: vb59(0x40) = CONST 
0xb5c: vb5c = SHA3 vb4f(0x0) vb59(0x40)
0xb5d: vb5d = SLOAD vb5c
0xb5f: JUMP v42d(0x249)
----------------------------------

Begin block 0xb60
prev = {'0x475'}, next = {'0xb6b'}
----------------------------------
Block 0xb60
0xb61: vb61(0x0) = CONST 
0xb63: vb63(0xb6b) = CONST 
0xb66: vb66 = CALLER 
0xb67: vb67(0xb2c) = CONST 
0xb6a: vb6a_0 = CALLPRIVATE vb67(0xb2c) vb66 vb63(0xb6b)
----------------------------------

Begin block 0xb6b
prev = {'0xb60'}, next = {'0xb72', '0xbe7'}
----------------------------------
Block 0xb6b
0xb6c: vb6c = ISZERO vb6a_0
0xb6d: vb6d = ISZERO vb6c
0xb6e: vb6e(0xbe7) = CONST 
0xb71: JUMPI vb6e(0xbe7) vb6d
----------------------------------

Begin block 0xb72
prev = {'0xb6b'}, next = {}
----------------------------------
Block 0xb72
0xb72: vb72(0x40) = CONST 
0xb75: vb75 = MLOAD vb72(0x40)
0xb76: vb76(0xe5) = CONST 
0xb78: vb78(0x2) = CONST 
0xb7a: vb7a(0x2000000000000000000000000000000000000000000000000000000000) = EXP vb78(0x2) vb76(0xe5)
0xb7b: vb7b(0x461bcd) = CONST 
0xb7f: vb7f(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vb7b(0x461bcd) vb7a(0x2000000000000000000000000000000000000000000000000000000000)
0xb81: MSTORE vb75 vb7f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xb82: vb82(0x20) = CONST 
0xb84: vb84(0x4) = CONST 
0xb87: vb87 = ADD vb75 vb84(0x4)
0xb88: MSTORE vb87 vb82(0x20)
0xb89: vb89(0x22) = CONST 
0xb8b: vb8b(0x24) = CONST 
0xb8e: vb8e = ADD vb75 vb8b(0x24)
0xb8f: MSTORE vb8e vb89(0x22)
0xb90: vb90(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f) = CONST 
0xbb1: vbb1(0x44) = CONST 
0xbb4: vbb4 = ADD vb75 vbb1(0x44)
0xbb5: MSTORE vbb4 vb90(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f)
0xbb6: vbb6(0x6c65000000000000000000000000000000000000000000000000000000000000) = CONST 
0xbd7: vbd7(0x64) = CONST 
0xbda: vbda = ADD vb75 vbd7(0x64)
0xbdb: MSTORE vbda vbb6(0x6c65000000000000000000000000000000000000000000000000000000000000)
0xbdd: vbdd = MLOAD vb72(0x40)
0xbe1: vbe1 = SUB vb75 vbdd
0xbe2: vbe2(0x84) = CONST 
0xbe4: vbe4 = ADD vbe2(0x84) vbe1
0xbe6: REVERT vbdd vbe4
----------------------------------

Begin block 0xbe7
prev = {'0xb6b'}, next = {'0xc5b', '0xbfb'}
----------------------------------
Block 0xbe7
0xbe8: vbe8 = CALLER 
0xbeb: vbeb(0x1) = CONST 
0xbed: vbed(0xa0) = CONST 
0xbef: vbef(0x2) = CONST 
0xbf1: vbf1(0x10000000000000000000000000000000000000000) = EXP vbef(0x2) vbed(0xa0)
0xbf2: vbf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbf1(0x10000000000000000000000000000000000000000) vbeb(0x1)
0xbf4: vbf4 = AND v481 vbf2(0xffffffffffffffffffffffffffffffffffffffff)
0xbf6: vbf6 = EQ vbe8 vbf4
0xbf7: vbf7(0xc5b) = CONST 
0xbfa: JUMPI vbf7(0xc5b) vbf6
----------------------------------

Begin block 0xbfb
prev = {'0xbe7'}, next = {'0x7260x452'}
----------------------------------
Block 0xbfb
0xbfc: vbfc(0xc05) = CONST 
0xc01: vc01(0x726) = CONST 
0xc04: JUMP vc01(0x726)
----------------------------------

Begin block 0xc05
prev = {'0x7260x452'}, next = {'0xc5b', '0xc0c'}
----------------------------------
Block 0xc05
0xc06: vc06 = LT v45274e v486
0xc07: vc07 = ISZERO vc06
0xc08: vc08(0xc5b) = CONST 
0xc0b: JUMPI vc08(0xc5b) vc07
----------------------------------

Begin block 0xc0c
prev = {'0xc05'}, next = {}
----------------------------------
Block 0xc0c
0xc0c: vc0c(0x40) = CONST 
0xc0f: vc0f = MLOAD vc0c(0x40)
0xc10: vc10(0xe5) = CONST 
0xc12: vc12(0x2) = CONST 
0xc14: vc14(0x2000000000000000000000000000000000000000000000000000000000) = EXP vc12(0x2) vc10(0xe5)
0xc15: vc15(0x461bcd) = CONST 
0xc19: vc19(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL vc15(0x461bcd) vc14(0x2000000000000000000000000000000000000000000000000000000000)
0xc1b: MSTORE vc0f vc19(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xc1c: vc1c(0x20) = CONST 
0xc1e: vc1e(0x4) = CONST 
0xc21: vc21 = ADD vc0f vc1e(0x4)
0xc22: MSTORE vc21 vc1c(0x20)
0xc23: vc23(0x19) = CONST 
0xc25: vc25(0x24) = CONST 
0xc28: vc28 = ADD vc0f vc25(0x24)
0xc29: MSTORE vc28 vc23(0x19)
0xc2a: vc2a(0x4e6f7420656e6f756768206275726e20616c6c6f77616e636500000000000000) = CONST 
0xc4b: vc4b(0x44) = CONST 
0xc4e: vc4e = ADD vc0f vc4b(0x44)
0xc4f: MSTORE vc4e vc2a(0x4e6f7420656e6f756768206275726e20616c6c6f77616e636500000000000000)
0xc51: vc51 = MLOAD vc0c(0x40)
0xc55: vc55 = SUB vc0f vc51
0xc56: vc56(0x64) = CONST 
0xc58: vc58 = ADD vc56(0x64) vc55
0xc5a: REVERT vc51 vc58
----------------------------------

Begin block 0xc5b
prev = {'0xbe7', '0xc05'}, next = {'0xc8f'}
----------------------------------
Block 0xc5b
0xc5c: vc5c(0x1) = CONST 
0xc5e: vc5e(0xa0) = CONST 
0xc60: vc60(0x2) = CONST 
0xc62: vc62(0x10000000000000000000000000000000000000000) = EXP vc60(0x2) vc5e(0xa0)
0xc63: vc63(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc62(0x10000000000000000000000000000000000000000) vc5c(0x1)
0xc65: vc65 = AND v481 vc63(0xffffffffffffffffffffffffffffffffffffffff)
0xc66: vc66(0x0) = CONST 
0xc6a: MSTORE vc66(0x0) vc65
0xc6b: vc6b(0x8) = CONST 
0xc6d: vc6d(0x20) = CONST 
0xc71: MSTORE vc6d(0x20) vc6b(0x8)
0xc72: vc72(0x40) = CONST 
0xc76: vc76 = SHA3 vc66(0x0) vc72(0x40)
0xc77: vc77 = CALLER 
0xc79: MSTORE vc66(0x0) vc77
0xc7c: MSTORE vc6d(0x20) vc76
0xc7e: vc7e = SHA3 vc66(0x0) vc72(0x40)
0xc7f: vc7f = SLOAD vc7e
0xc80: vc80(0xc8f) = CONST 
0xc85: vc85(0xffffffff) = CONST 
0xc8a: vc8a(0xef7) = CONST 
0xc8d: vc8d(0xef7) = AND vc8a(0xef7) vc85(0xffffffff)
0xc8e: vc8e_0 = CALLPRIVATE vc8d(0xef7) v486 vc7f vc80(0xc8f)
----------------------------------

Begin block 0xc8f
prev = {'0xc5b'}, next = {'0xcbd'}
----------------------------------
Block 0xc8f
0xc90: vc90(0x1) = CONST 
0xc92: vc92(0xa0) = CONST 
0xc94: vc94(0x2) = CONST 
0xc96: vc96(0x10000000000000000000000000000000000000000) = EXP vc94(0x2) vc92(0xa0)
0xc97: vc97(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc96(0x10000000000000000000000000000000000000000) vc90(0x1)
0xc99: vc99 = AND v481 vc97(0xffffffffffffffffffffffffffffffffffffffff)
0xc9a: vc9a(0x0) = CONST 
0xc9e: MSTORE vc9a(0x0) vc99
0xc9f: vc9f(0x8) = CONST 
0xca1: vca1(0x20) = CONST 
0xca5: MSTORE vca1(0x20) vc9f(0x8)
0xca6: vca6(0x40) = CONST 
0xcaa: vcaa = SHA3 vc9a(0x0) vca6(0x40)
0xcab: vcab = CALLER 
0xcad: MSTORE vc9a(0x0) vcab
0xcb0: MSTORE vca1(0x20) vcaa
0xcb2: vcb2 = SHA3 vc9a(0x0) vca6(0x40)
0xcb3: SSTORE vcb2 vc8e_0
0xcb4: vcb4(0xcbd) = CONST 
0xcb9: vcb9(0x1083) = CONST 
0xcbc: CALLPRIVATE vcb9(0x1083) v486 v481 vcb4(0xcbd)
----------------------------------

Begin block 0xcbd
prev = {'0xc8f'}, next = {'0x1fa0x452'}
----------------------------------
Block 0xcbd
0xcbe: vcbe(0x1) = CONST 
0xcc0: vcc0(0xa0) = CONST 
0xcc2: vcc2(0x2) = CONST 
0xcc4: vcc4(0x10000000000000000000000000000000000000000) = EXP vcc2(0x2) vcc0(0xa0)
0xcc5: vcc5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc4(0x10000000000000000000000000000000000000000) vcbe(0x1)
0xcc7: vcc7 = AND v481 vcc5(0xffffffffffffffffffffffffffffffffffffffff)
0xcc8: vcc8(0x0) = CONST 
0xccc: MSTORE vcc8(0x0) vcc7
0xccd: vccd(0x8) = CONST 
0xccf: vccf(0x20) = CONST 
0xcd3: MSTORE vccf(0x20) vccd(0x8)
0xcd4: vcd4(0x40) = CONST 
0xcd8: vcd8 = SHA3 vcc8(0x0) vcd4(0x40)
0xcd9: vcd9 = CALLER 
0xcdc: MSTORE vcc8(0x0) vcd9
0xcdf: MSTORE vccf(0x20) vcd8
0xce3: vce3 = SHA3 vcc8(0x0) vcd4(0x40)
0xce4: vce4 = SLOAD vce3
0xce6: vce6 = MLOAD vcd4(0x40)
0xce9: MSTORE vce6 vce4
0xceb: vceb = MLOAD vcd4(0x40)
0xcef: vcef(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) = CONST 
0xd14: vd14 = SUB vce6 vceb
0xd17: vd17 = ADD vccf(0x20) vd14
0xd19: LOG3 vceb vd17 vcef(0x7cf97656de28b2f9c34f8f8f50ddae38f357b7ed1962a845f2246640f1a9d811) vcc7 vcd9
0xd1b: vd1b(0x1) = CONST 
0xd24: JUMP v460(0x1fa)
----------------------------------

Begin block 0xd25
prev = {}, next = {'0x69e0xd25', '0xd6b'}
----------------------------------
function 0xd25(vd25arg0)
Block 0xd25
0xd26: vd26(0x4) = CONST 
0xd29: vd29 = SLOAD vd26(0x4)
0xd2a: vd2a(0x40) = CONST 
0xd2d: vd2d = MLOAD vd2a(0x40)
0xd2e: vd2e(0x20) = CONST 
0xd30: vd30(0x1f) = CONST 
0xd32: vd32(0x2) = CONST 
0xd34: vd34(0x0) = CONST 
0xd36: vd36(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT vd34(0x0)
0xd37: vd37(0x100) = CONST 
0xd3a: vd3a(0x1) = CONST 
0xd3d: vd3d = AND vd29 vd3a(0x1)
0xd3e: vd3e = ISZERO vd3d
0xd3f: vd3f = MUL vd3e vd37(0x100)
0xd40: vd40 = ADD vd3f vd36(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
0xd43: vd43 = AND vd29 vd40
0xd47: vd47 = DIV vd43 vd32(0x2)
0xd4a: vd4a = ADD vd47 vd30(0x1f)
0xd4d: vd4d = DIV vd4a vd2e(0x20)
0xd4f: vd4f = MUL vd2e(0x20) vd4d
0xd51: vd51 = ADD vd2d vd4f
0xd53: vd53 = ADD vd2e(0x20) vd51
0xd56: MSTORE vd2a(0x40) vd53
0xd59: MSTORE vd2d vd47
0xd5a: vd5a(0x60) = CONST 
0xd62: vd62 = ADD vd2d vd2e(0x20)
0xd66: vd66 = ISZERO vd47
0xd67: vd67(0x69e) = CONST 
0xd6a: JUMPI vd67(0x69e) vd66
----------------------------------

Begin block 0xd6b
prev = {'0xd25'}, next = {'0xd73', '0x6730xd25'}
----------------------------------
Block 0xd6b
0xd6c: vd6c(0x1f) = CONST 
0xd6e: vd6e = LT vd6c(0x1f) vd47
0xd6f: vd6f(0x673) = CONST 
0xd72: JUMPI vd6f(0x673) vd6e
----------------------------------

Begin block 0xd73
prev = {'0xd6b'}, next = {'0x69e0xd25'}
----------------------------------
Block 0xd73
0xd73: vd73(0x100) = CONST 
0xd78: vd78 = SLOAD vd26(0x4)
0xd79: vd79 = DIV vd78 vd73(0x100)
0xd7a: vd7a = MUL vd79 vd73(0x100)
0xd7c: MSTORE vd62 vd7a
0xd7e: vd7e(0x20) = CONST 
0xd80: vd80 = ADD vd7e(0x20) vd62
0xd82: vd82(0x69e) = CONST 
0xd85: JUMP vd82(0x69e)
----------------------------------

Begin block 0xd86
prev = {'0x4c3'}, next = {'0xd8f'}
----------------------------------
Block 0xd86
0xd87: vd87(0xd8f) = CONST 
0xd8a: vd8a = CALLER 
0xd8b: vd8b(0xe09) = CONST 
0xd8e: vd8e_0 = CALLPRIVATE vd8b(0xe09) vd8a vd87(0xd8f)
----------------------------------

Begin block 0xd8f
prev = {'0xd86'}, next = {'0xd9a', '0xd96'}
----------------------------------
Block 0xd8f
0xd90: vd90 = ISZERO vd8e_0
0xd91: vd91 = ISZERO vd90
0xd92: vd92(0xd9a) = CONST 
0xd95: JUMPI vd92(0xd9a) vd91
----------------------------------

Begin block 0xd96
prev = {'0xd8f'}, next = {}
----------------------------------
Block 0xd96
0xd96: vd96(0x0) = CONST 
0xd99: REVERT vd96(0x0) vd96(0x0)
----------------------------------

Begin block 0xd9a
prev = {'0xd8f'}, next = {'0x1163'}
----------------------------------
Block 0xd9a
0xd9b: vd9b(0xda3) = CONST 
0xd9f: vd9f(0x1163) = CONST 
0xda2: JUMP vd9f(0x1163)
----------------------------------

Begin block 0xda30x4a0
prev = {'0x1174'}, next = {'0x4d30x4a0'}
----------------------------------
Block 0xda30x4a0
0xda50x4a0: JUMP v4ae(0x4d3)
----------------------------------

Begin block 0xda30x5df
prev = {'0x124c'}, next = {'0x4d30x5df'}
----------------------------------
Block 0xda30x5df
0xda50x5df: JUMP v5ed(0x4d3)
----------------------------------

Begin block 0xda6
prev = {}, next = {'0x11ab'}
----------------------------------
function 0xda6(vda6arg0)
Block 0xda6
0xda7: vda7(0xdaf) = CONST 
0xdaa: vdaa = CALLER 
0xdab: vdab(0x11ab) = CONST 
0xdae: JUMP vdab(0x11ab)
----------------------------------

Begin block 0xdaf0xda6
prev = {'0x11bc'}, next = {}
----------------------------------
Block 0xdaf0xda6
0xdb00xda6: RETURNPRIVATE vda6arg0
----------------------------------

Begin block 0xdaf0xe47
prev = {'0x1204'}, next = {}
----------------------------------
Block 0xdaf0xe47
0xdb00xe47: RETURNPRIVATE ve47arg0
----------------------------------

Begin block 0xdb1
prev = {'0x50d'}, next = {'0xdc8', '0xdc4'}
----------------------------------
Block 0xdb1
0xdb2: vdb2(0x0) = CONST 
0xdb4: vdb4(0x1) = CONST 
0xdb6: vdb6(0xa0) = CONST 
0xdb8: vdb8(0x2) = CONST 
0xdba: vdba(0x10000000000000000000000000000000000000000) = EXP vdb8(0x2) vdb6(0xa0)
0xdbb: vdbb(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdba(0x10000000000000000000000000000000000000000) vdb4(0x1)
0xdbd: vdbd = AND v519 vdbb(0xffffffffffffffffffffffffffffffffffffffff)
0xdbe: vdbe = ISZERO vdbd
0xdbf: vdbf = ISZERO vdbe
0xdc0: vdc0(0xdc8) = CONST 
0xdc3: JUMPI vdc0(0xdc8) vdbf
----------------------------------

Begin block 0xdc4
prev = {'0xdb1'}, next = {}
----------------------------------
Block 0xdc4
0xdc4: vdc4(0x0) = CONST 
0xdc7: REVERT vdc4(0x0) vdc4(0x0)
----------------------------------

Begin block 0xdc8
prev = {'0xdb1'}, next = {'0xa050x4ea'}
----------------------------------
Block 0xdc8
0xdc9: vdc9 = CALLER 
0xdca: vdca(0x0) = CONST 
0xdce: MSTORE vdca(0x0) vdc9
0xdcf: vdcf(0x1) = CONST 
0xdd1: vdd1(0x20) = CONST 
0xdd5: MSTORE vdd1(0x20) vdcf(0x1)
0xdd6: vdd6(0x40) = CONST 
0xdda: vdda = SHA3 vdca(0x0) vdd6(0x40)
0xddb: vddb(0x1) = CONST 
0xddd: vddd(0xa0) = CONST 
0xddf: vddf(0x2) = CONST 
0xde1: vde1(0x10000000000000000000000000000000000000000) = EXP vddf(0x2) vddd(0xa0)
0xde2: vde2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vde1(0x10000000000000000000000000000000000000000) vddb(0x1)
0xde4: vde4 = AND v519 vde2(0xffffffffffffffffffffffffffffffffffffffff)
0xde6: MSTORE vdca(0x0) vde4
0xde9: MSTORE vdd1(0x20) vdda
0xdeb: vdeb = SHA3 vdca(0x0) vdd6(0x40)
0xdec: vdec = SLOAD vdeb
0xded: vded(0xa05) = CONST 
0xdf2: vdf2(0xffffffff) = CONST 
0xdf7: vdf7(0xef7) = CONST 
0xdfa: vdfa(0xef7) = AND vdf7(0xef7) vdf2(0xffffffff)
0xdfb: vdfb_0 = CALLPRIVATE vdfa(0xef7) v51e vdec vded(0xa05)
----------------------------------

Begin block 0xdfc
prev = {'0x546'}, next = {'0xa8a0x523'}
----------------------------------
Block 0xdfc
0xdfd: vdfd(0x0) = CONST 
0xdff: vdff(0xa8a) = CONST 
0xe02: ve02 = CALLER 
0xe05: ve05(0xf0c) = CONST 
0xe08: CALLPRIVATE ve05(0xf0c) v557 v552 ve02 vdff(0xa8a)
----------------------------------

Begin block 0xe09
prev = {}, next = {'0xb3f0xe09'}
----------------------------------
function 0xe09(ve09arg0, ve09arg1)
Block 0xe09
0xe0a: ve0a(0x0) = CONST 
0xe0c: ve0c(0xb3f) = CONST 
0xe0f: ve0f(0x6) = CONST 
0xe12: ve12(0xffffffff) = CONST 
0xe17: ve17(0x112c) = CONST 
0xe1a: ve1a(0x112c) = AND ve17(0x112c) ve12(0xffffffff)
0xe1b: ve1b_0 = CALLPRIVATE ve1a(0x112c) ve09arg0 ve0f(0x6) ve0c(0xb3f)
----------------------------------

Begin block 0xe090x55c
prev = {'0x57f'}, next = {'0xb3f0x55c'}
----------------------------------
Block 0xe090x55c
0xe0a0x55c: v55ce0a(0x0) = CONST 
0xe0c0x55c: v55ce0c(0xb3f) = CONST 
0xe0f0x55c: v55ce0f(0x6) = CONST 
0xe120x55c: v55ce12(0xffffffff) = CONST 
0xe170x55c: v55ce17(0x112c) = CONST 
0xe1a0x55c: v55ce1a(0x112c) = AND v55ce17(0x112c) v55ce12(0xffffffff)
0xe1b0x55c: v55ce1b_0 = CALLPRIVATE v55ce1a(0x112c) v58a v55ce0f(0x6) v55ce0c(0xb3f)
----------------------------------

Begin block 0xe1c
prev = {'0x5b2'}, next = {'0x2490x58f'}
----------------------------------
Block 0xe1c
0xe1d: ve1d(0x1) = CONST 
0xe1f: ve1f(0xa0) = CONST 
0xe21: ve21(0x2) = CONST 
0xe23: ve23(0x10000000000000000000000000000000000000000) = EXP ve21(0x2) ve1f(0xa0)
0xe24: ve24(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve23(0x10000000000000000000000000000000000000000) ve1d(0x1)
0xe27: ve27 = AND ve24(0xffffffffffffffffffffffffffffffffffffffff) v5bf
0xe28: ve28(0x0) = CONST 
0xe2c: MSTORE ve28(0x0) ve27
0xe2d: ve2d(0x1) = CONST 
0xe2f: ve2f(0x20) = CONST 
0xe33: MSTORE ve2f(0x20) ve2d(0x1)
0xe34: ve34(0x40) = CONST 
0xe38: ve38 = SHA3 ve28(0x0) ve34(0x40)
0xe3c: ve3c = AND ve24(0xffffffffffffffffffffffffffffffffffffffff) v5c5
0xe3e: MSTORE ve28(0x0) ve3c
0xe42: MSTORE ve2f(0x20) ve38
0xe43: ve43 = SHA3 ve28(0x0) ve34(0x40)
0xe44: ve44 = SLOAD ve43
0xe46: JUMP v59d(0x249)
----------------------------------

Begin block 0xe47
prev = {}, next = {'0x11f3'}
----------------------------------
function 0xe47(ve47arg0)
Block 0xe47
0xe48: ve48(0xdaf) = CONST 
0xe4b: ve4b = CALLER 
0xe4c: ve4c(0x11f3) = CONST 
0xe4f: JUMP ve4c(0x11f3)
----------------------------------

Begin block 0xe50
prev = {'0x602'}, next = {'0xe59'}
----------------------------------
Block 0xe50
0xe51: ve51(0xe59) = CONST 
0xe54: ve54 = CALLER 
0xe55: ve55(0xb2c) = CONST 
0xe58: ve58_0 = CALLPRIVATE ve55(0xb2c) ve54 ve51(0xe59)
----------------------------------

Begin block 0xe59
prev = {'0xe50'}, next = {'0xe60', '0xed5'}
----------------------------------
Block 0xe59
0xe5a: ve5a = ISZERO ve58_0
0xe5b: ve5b = ISZERO ve5a
0xe5c: ve5c(0xed5) = CONST 
0xe5f: JUMPI ve5c(0xed5) ve5b
----------------------------------

Begin block 0xe60
prev = {'0xe59'}, next = {}
----------------------------------
Block 0xe60
0xe60: ve60(0x40) = CONST 
0xe63: ve63 = MLOAD ve60(0x40)
0xe64: ve64(0xe5) = CONST 
0xe66: ve66(0x2) = CONST 
0xe68: ve68(0x2000000000000000000000000000000000000000000000000000000000) = EXP ve66(0x2) ve64(0xe5)
0xe69: ve69(0x461bcd) = CONST 
0xe6d: ve6d(0x8c379a000000000000000000000000000000000000000000000000000000000) = MUL ve69(0x461bcd) ve68(0x2000000000000000000000000000000000000000000000000000000000)
0xe6f: MSTORE ve63 ve6d(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xe70: ve70(0x20) = CONST 
0xe72: ve72(0x4) = CONST 
0xe75: ve75 = ADD ve63 ve72(0x4)
0xe76: MSTORE ve75 ve70(0x20)
0xe77: ve77(0x22) = CONST 
0xe79: ve79(0x24) = CONST 
0xe7c: ve7c = ADD ve63 ve79(0x24)
0xe7d: MSTORE ve7c ve77(0x22)
0xe7e: ve7e(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f) = CONST 
0xe9f: ve9f(0x44) = CONST 
0xea2: vea2 = ADD ve63 ve9f(0x44)
0xea3: MSTORE vea2 ve7e(0x53656e64657220646f6573206e6f7420686176652061206275726e657220726f)
0xea4: vea4(0x6c65000000000000000000000000000000000000000000000000000000000000) = CONST 
0xec5: vec5(0x64) = CONST 
0xec8: vec8 = ADD ve63 vec5(0x64)
0xec9: MSTORE vec8 vea4(0x6c65000000000000000000000000000000000000000000000000000000000000)
0xecb: vecb = MLOAD ve60(0x40)
0xecf: vecf = SUB ve63 vecb
0xed0: ved0(0x84) = CONST 
0xed2: ved2 = ADD ved0(0x84) vecf
0xed4: REVERT vecb ved2
----------------------------------

Begin block 0xed5
prev = {'0xe59'}, next = {'0x123b'}
----------------------------------
Block 0xed5
0xed6: ved6(0xda3) = CONST 
0xeda: veda(0x123b) = CONST 
0xedd: JUMP veda(0x123b)
----------------------------------

Begin block 0xede
prev = {}, next = {'0xeec', '0xef0'}
----------------------------------
function 0xede(vedearg0, vedearg1, vedearg2)
Block 0xede
0xedf: vedf(0x0) = CONST 
0xee3: vee3 = ADD vedearg0 vedearg1
0xee6: vee6 = LT vee3 vedearg1
0xee7: vee7 = ISZERO vee6
0xee8: vee8(0xef0) = CONST 
0xeeb: JUMPI vee8(0xef0) vee7
----------------------------------

Begin block 0xeec
prev = {'0xede'}, next = {}
----------------------------------
Block 0xeec
0xeec: veec(0x0) = CONST 
0xeef: REVERT veec(0x0) veec(0x0)
----------------------------------

Begin block 0xef0
prev = {'0xede'}, next = {}
----------------------------------
Block 0xef0
0xef6: RETURNPRIVATE vedearg2 vee3
----------------------------------

Begin block 0xef7
prev = {}, next = {'0xf02', '0xf06'}
----------------------------------
function 0xef7(vef7arg0, vef7arg1, vef7arg2)
Block 0xef7
0xef8: vef8(0x0) = CONST 
0xefc: vefc = GT vef7arg0 vef7arg1
0xefd: vefd = ISZERO vefc
0xefe: vefe(0xf06) = CONST 
0xf01: JUMPI vefe(0xf06) vefd
----------------------------------

Begin block 0xf02
prev = {'0xef7'}, next = {}
----------------------------------
Block 0xf02
0xf02: vf02(0x0) = CONST 
0xf05: REVERT vf02(0x0) vf02(0x0)
----------------------------------

Begin block 0xf06
prev = {'0xef7'}, next = {}
----------------------------------
Block 0xf06
0xf09: vf09 = SUB vef7arg1 vef7arg0
0xf0b: RETURNPRIVATE vef7arg2 vf09
----------------------------------

Begin block 0xf0c
prev = {}, next = {'0xf1d', '0xf21'}
----------------------------------
function 0xf0c(vf0carg0, vf0carg1, vf0carg2, vf0carg3)
Block 0xf0c
0xf0d: vf0d(0x1) = CONST 
0xf0f: vf0f(0xa0) = CONST 
0xf11: vf11(0x2) = CONST 
0xf13: vf13(0x10000000000000000000000000000000000000000) = EXP vf11(0x2) vf0f(0xa0)
0xf14: vf14(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf13(0x10000000000000000000000000000000000000000) vf0d(0x1)
0xf16: vf16 = AND vf0carg1 vf14(0xffffffffffffffffffffffffffffffffffffffff)
0xf17: vf17 = ISZERO vf16
0xf18: vf18 = ISZERO vf17
0xf19: vf19(0xf21) = CONST 
0xf1c: JUMPI vf19(0xf21) vf18
----------------------------------

Begin block 0xf1d
prev = {'0xf0c'}, next = {}
----------------------------------
Block 0xf1d
0xf1d: vf1d(0x0) = CONST 
0xf20: REVERT vf1d(0x0) vf1d(0x0)
----------------------------------

Begin block 0xf21
prev = {'0xf0c'}, next = {'0xf4a'}
----------------------------------
Block 0xf21
0xf22: vf22(0x1) = CONST 
0xf24: vf24(0xa0) = CONST 
0xf26: vf26(0x2) = CONST 
0xf28: vf28(0x10000000000000000000000000000000000000000) = EXP vf26(0x2) vf24(0xa0)
0xf29: vf29(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf28(0x10000000000000000000000000000000000000000) vf22(0x1)
0xf2b: vf2b = AND vf0carg2 vf29(0xffffffffffffffffffffffffffffffffffffffff)
0xf2c: vf2c(0x0) = CONST 
0xf30: MSTORE vf2c(0x0) vf2b
0xf31: vf31(0x20) = CONST 
0xf35: MSTORE vf31(0x20) vf2c(0x0)
0xf36: vf36(0x40) = CONST 
0xf39: vf39 = SHA3 vf2c(0x0) vf36(0x40)
0xf3a: vf3a = SLOAD vf39
0xf3b: vf3b(0xf4a) = CONST 
0xf40: vf40(0xffffffff) = CONST 
0xf45: vf45(0xef7) = CONST 
0xf48: vf48(0xef7) = AND vf45(0xef7) vf40(0xffffffff)
0xf49: vf49_0 = CALLPRIVATE vf48(0xef7) vf0carg0 vf3a vf3b(0xf4a)
----------------------------------

Begin block 0xf4a
prev = {'0xf21'}, next = {'0xf7f'}
----------------------------------
Block 0xf4a
0xf4b: vf4b(0x1) = CONST 
0xf4d: vf4d(0xa0) = CONST 
0xf4f: vf4f(0x2) = CONST 
0xf51: vf51(0x10000000000000000000000000000000000000000) = EXP vf4f(0x2) vf4d(0xa0)
0xf52: vf52(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf51(0x10000000000000000000000000000000000000000) vf4b(0x1)
0xf55: vf55 = AND vf0carg2 vf52(0xffffffffffffffffffffffffffffffffffffffff)
0xf56: vf56(0x0) = CONST 
0xf5a: MSTORE vf56(0x0) vf55
0xf5b: vf5b(0x20) = CONST 
0xf5f: MSTORE vf5b(0x20) vf56(0x0)
0xf60: vf60(0x40) = CONST 
0xf64: vf64 = SHA3 vf56(0x0) vf60(0x40)
0xf68: SSTORE vf64 vf49_0
0xf6b: vf6b = AND vf0carg1 vf52(0xffffffffffffffffffffffffffffffffffffffff)
0xf6d: MSTORE vf56(0x0) vf6b
0xf6e: vf6e = SHA3 vf56(0x0) vf60(0x40)
0xf6f: vf6f = SLOAD vf6e
0xf70: vf70(0xf7f) = CONST 
0xf75: vf75(0xffffffff) = CONST 
0xf7a: vf7a(0xede) = CONST 
0xf7d: vf7d(0xede) = AND vf7a(0xede) vf75(0xffffffff)
0xf7e: vf7e_0 = CALLPRIVATE vf7d(0xede) vf0carg0 vf6f vf70(0xf7f)
----------------------------------

Begin block 0xf7f
prev = {'0xf4a'}, next = {}
----------------------------------
Block 0xf7f
0xf80: vf80(0x1) = CONST 
0xf82: vf82(0xa0) = CONST 
0xf84: vf84(0x2) = CONST 
0xf86: vf86(0x10000000000000000000000000000000000000000) = EXP vf84(0x2) vf82(0xa0)
0xf87: vf87(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf86(0x10000000000000000000000000000000000000000) vf80(0x1)
0xf8a: vf8a = AND vf0carg1 vf87(0xffffffffffffffffffffffffffffffffffffffff)
0xf8b: vf8b(0x0) = CONST 
0xf8f: MSTORE vf8b(0x0) vf8a
0xf90: vf90(0x20) = CONST 
0xf94: MSTORE vf90(0x20) vf8b(0x0)
0xf95: vf95(0x40) = CONST 
0xf9a: vf9a = SHA3 vf8b(0x0) vf95(0x40)
0xf9e: SSTORE vf9a vf7e_0
0xfa0: vfa0 = MLOAD vf95(0x40)
0xfa3: MSTORE vfa0 vf0carg0
0xfa5: vfa5 = MLOAD vf95(0x40)
0xfaa: vfaa = AND vf0carg2 vf87(0xffffffffffffffffffffffffffffffffffffffff)
0xfac: vfac(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xfd1: vfd1 = SUB vfa0 vfa5
0xfd2: vfd2 = ADD vfd1 vf90(0x20)
0xfd4: LOG3 vfa5 vfd2 vfac(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vfaa vf8a
0xfd8: RETURNPRIVATE vf0carg3
----------------------------------

Begin block 0xfd9
prev = {'0xa80'}, next = {'0xfea', '0xfee'}
----------------------------------
Block 0xfd9
0xfda: vfda(0x1) = CONST 
0xfdc: vfdc(0xa0) = CONST 
0xfde: vfde(0x2) = CONST 
0xfe0: vfe0(0x10000000000000000000000000000000000000000) = EXP vfde(0x2) vfdc(0xa0)
0xfe1: vfe1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vfe0(0x10000000000000000000000000000000000000000) vfda(0x1)
0xfe3: vfe3 = AND v3b8 vfe1(0xffffffffffffffffffffffffffffffffffffffff)
0xfe4: vfe4 = ISZERO vfe3
0xfe5: vfe5 = ISZERO vfe4
0xfe6: vfe6(0xfee) = CONST 
0xfe9: JUMPI vfe6(0xfee) vfe5
----------------------------------

Begin block 0xfea
prev = {'0xfd9'}, next = {}
----------------------------------
Block 0xfea
0xfea: vfea(0x0) = CONST 
0xfed: REVERT vfea(0x0) vfea(0x0)
----------------------------------

Begin block 0xfee
prev = {'0xfd9'}, next = {'0x1001'}
----------------------------------
Block 0xfee
0xfef: vfef(0x2) = CONST 
0xff1: vff1 = SLOAD vfef(0x2)
0xff2: vff2(0x1001) = CONST 
0xff7: vff7(0xffffffff) = CONST 
0xffc: vffc(0xede) = CONST 
0xfff: vfff(0xede) = AND vffc(0xede) vff7(0xffffffff)
0x1000: v1000_0 = CALLPRIVATE vfff(0xede) v3bd vff1 vff2(0x1001)
----------------------------------

Begin block 0x1001
prev = {'0xfee'}, next = {'0x102d'}
----------------------------------
Block 0x1001
0x1002: v1002(0x2) = CONST 
0x1004: SSTORE v1002(0x2) v1000_0
0x1005: v1005(0x1) = CONST 
0x1007: v1007(0xa0) = CONST 
0x1009: v1009(0x2) = CONST 
0x100b: v100b(0x10000000000000000000000000000000000000000) = EXP v1009(0x2) v1007(0xa0)
0x100c: v100c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v100b(0x10000000000000000000000000000000000000000) v1005(0x1)
0x100e: v100e = AND v3b8 v100c(0xffffffffffffffffffffffffffffffffffffffff)
0x100f: v100f(0x0) = CONST 
0x1013: MSTORE v100f(0x0) v100e
0x1014: v1014(0x20) = CONST 
0x1018: MSTORE v1014(0x20) v100f(0x0)
0x1019: v1019(0x40) = CONST 
0x101c: v101c = SHA3 v100f(0x0) v1019(0x40)
0x101d: v101d = SLOAD v101c
0x101e: v101e(0x102d) = CONST 
0x1023: v1023(0xffffffff) = CONST 
0x1028: v1028(0xede) = CONST 
0x102b: v102b(0xede) = AND v1028(0xede) v1023(0xffffffff)
0x102c: v102c_0 = CALLPRIVATE v102b(0xede) v3bd v101d v101e(0x102d)
----------------------------------

Begin block 0x102d
prev = {'0x1001'}, next = {'0xa8a0x389'}
----------------------------------
Block 0x102d
0x102e: v102e(0x1) = CONST 
0x1030: v1030(0xa0) = CONST 
0x1032: v1032(0x2) = CONST 
0x1034: v1034(0x10000000000000000000000000000000000000000) = EXP v1032(0x2) v1030(0xa0)
0x1035: v1035(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1034(0x10000000000000000000000000000000000000000) v102e(0x1)
0x1037: v1037 = AND v3b8 v1035(0xffffffffffffffffffffffffffffffffffffffff)
0x1038: v1038(0x0) = CONST 
0x103c: MSTORE v1038(0x0) v1037
0x103d: v103d(0x20) = CONST 
0x1041: MSTORE v103d(0x20) v1038(0x0)
0x1042: v1042(0x40) = CONST 
0x1046: v1046 = SHA3 v1038(0x0) v1042(0x40)
0x104a: SSTORE v1046 v102c_0
0x104c: v104c = MLOAD v1042(0x40)
0x104f: MSTORE v104c v3bd
0x1051: v1051 = MLOAD v1042(0x40)
0x1056: v1056(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x107a: v107a = SUB v104c v1051
0x107d: v107d = ADD v103d(0x20) v107a
0x107f: LOG3 v1051 v107d v1056(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1038(0x0) v1037
0x1082: JUMP va81(0xa8a)
----------------------------------

Begin block 0x1083
prev = {}, next = {'0x1098', '0x1094'}
----------------------------------
function 0x1083(v1083arg0, v1083arg1, v1083arg2)
Block 0x1083
0x1084: v1084(0x1) = CONST 
0x1086: v1086(0xa0) = CONST 
0x1088: v1088(0x2) = CONST 
0x108a: v108a(0x10000000000000000000000000000000000000000) = EXP v1088(0x2) v1086(0xa0)
0x108b: v108b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v108a(0x10000000000000000000000000000000000000000) v1084(0x1)
0x108d: v108d = AND v1083arg1 v108b(0xffffffffffffffffffffffffffffffffffffffff)
0x108e: v108e = ISZERO v108d
0x108f: v108f = ISZERO v108e
0x1090: v1090(0x1098) = CONST 
0x1093: JUMPI v1090(0x1098) v108f
----------------------------------

Begin block 0x1094
prev = {'0x1083'}, next = {}
----------------------------------
Block 0x1094
0x1094: v1094(0x0) = CONST 
0x1097: REVERT v1094(0x0) v1094(0x0)
----------------------------------

Begin block 0x1098
prev = {'0x1083'}, next = {'0x10ab'}
----------------------------------
Block 0x1098
0x1099: v1099(0x2) = CONST 
0x109b: v109b = SLOAD v1099(0x2)
0x109c: v109c(0x10ab) = CONST 
0x10a1: v10a1(0xffffffff) = CONST 
0x10a6: v10a6(0xef7) = CONST 
0x10a9: v10a9(0xef7) = AND v10a6(0xef7) v10a1(0xffffffff)
0x10aa: v10aa_0 = CALLPRIVATE v10a9(0xef7) v1083arg0 v109b v109c(0x10ab)
----------------------------------

Begin block 0x10ab
prev = {'0x1098'}, next = {'0x10d7'}
----------------------------------
Block 0x10ab
0x10ac: v10ac(0x2) = CONST 
0x10ae: SSTORE v10ac(0x2) v10aa_0
0x10af: v10af(0x1) = CONST 
0x10b1: v10b1(0xa0) = CONST 
0x10b3: v10b3(0x2) = CONST 
0x10b5: v10b5(0x10000000000000000000000000000000000000000) = EXP v10b3(0x2) v10b1(0xa0)
0x10b6: v10b6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10b5(0x10000000000000000000000000000000000000000) v10af(0x1)
0x10b8: v10b8 = AND v1083arg1 v10b6(0xffffffffffffffffffffffffffffffffffffffff)
0x10b9: v10b9(0x0) = CONST 
0x10bd: MSTORE v10b9(0x0) v10b8
0x10be: v10be(0x20) = CONST 
0x10c2: MSTORE v10be(0x20) v10b9(0x0)
0x10c3: v10c3(0x40) = CONST 
0x10c6: v10c6 = SHA3 v10b9(0x0) v10c3(0x40)
0x10c7: v10c7 = SLOAD v10c6
0x10c8: v10c8(0x10d7) = CONST 
0x10cd: v10cd(0xffffffff) = CONST 
0x10d2: v10d2(0xef7) = CONST 
0x10d5: v10d5(0xef7) = AND v10d2(0xef7) v10cd(0xffffffff)
0x10d6: v10d6_0 = CALLPRIVATE v10d5(0xef7) v1083arg0 v10c7 v10c8(0x10d7)
----------------------------------

Begin block 0x10d7
prev = {'0x10ab'}, next = {}
----------------------------------
Block 0x10d7
0x10d8: v10d8(0x1) = CONST 
0x10da: v10da(0xa0) = CONST 
0x10dc: v10dc(0x2) = CONST 
0x10de: v10de(0x10000000000000000000000000000000000000000) = EXP v10dc(0x2) v10da(0xa0)
0x10df: v10df(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10de(0x10000000000000000000000000000000000000000) v10d8(0x1)
0x10e1: v10e1 = AND v1083arg1 v10df(0xffffffffffffffffffffffffffffffffffffffff)
0x10e2: v10e2(0x0) = CONST 
0x10e6: MSTORE v10e2(0x0) v10e1
0x10e7: v10e7(0x20) = CONST 
0x10eb: MSTORE v10e7(0x20) v10e2(0x0)
0x10ec: v10ec(0x40) = CONST 
0x10f0: v10f0 = SHA3 v10e2(0x0) v10ec(0x40)
0x10f4: SSTORE v10f0 v10d6_0
0x10f6: v10f6 = MLOAD v10ec(0x40)
0x10f9: MSTORE v10f6 v1083arg0
0x10fb: v10fb = MLOAD v10ec(0x40)
0x10fe: v10fe(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1123: v1123 = SUB v10f6 v10fb
0x1126: v1126 = ADD v10e7(0x20) v1123
0x1128: LOG3 v10fb v1126 v10fe(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v10e1 v10e2(0x0)
0x112b: RETURNPRIVATE v1083arg2
----------------------------------

Begin block 0x112c
prev = {}, next = {'0x113f', '0x1143'}
----------------------------------
function 0x112c(v112carg0, v112carg1, v112carg2)
Block 0x112c
0x112d: v112d(0x0) = CONST 
0x112f: v112f(0x1) = CONST 
0x1131: v1131(0xa0) = CONST 
0x1133: v1133(0x2) = CONST 
0x1135: v1135(0x10000000000000000000000000000000000000000) = EXP v1133(0x2) v1131(0xa0)
0x1136: v1136(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1135(0x10000000000000000000000000000000000000000) v112f(0x1)
0x1138: v1138 = AND v112carg0 v1136(0xffffffffffffffffffffffffffffffffffffffff)
0x1139: v1139 = ISZERO v1138
0x113a: v113a = ISZERO v1139
0x113b: v113b(0x1143) = CONST 
0x113e: JUMPI v113b(0x1143) v113a
----------------------------------

Begin block 0x113f
prev = {'0x112c'}, next = {}
----------------------------------
Block 0x113f
0x113f: v113f(0x0) = CONST 
0x1142: REVERT v113f(0x0) v113f(0x0)
----------------------------------

Begin block 0x1143
prev = {'0x112c'}, next = {}
----------------------------------
Block 0x1143
0x1145: v1145(0x1) = CONST 
0x1147: v1147(0xa0) = CONST 
0x1149: v1149(0x2) = CONST 
0x114b: v114b(0x10000000000000000000000000000000000000000) = EXP v1149(0x2) v1147(0xa0)
0x114c: v114c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v114b(0x10000000000000000000000000000000000000000) v1145(0x1)
0x114d: v114d = AND v114c(0xffffffffffffffffffffffffffffffffffffffff) v112carg0
0x114e: v114e(0x0) = CONST 
0x1152: MSTORE v114e(0x0) v114d
0x1153: v1153(0x20) = CONST 
0x1158: MSTORE v1153(0x20) v112carg1
0x1159: v1159(0x40) = CONST 
0x115c: v115c = SHA3 v114e(0x0) v1159(0x40)
0x115d: v115d = SLOAD v115c
0x115e: v115e(0xff) = CONST 
0x1160: v1160 = AND v115e(0xff) v115d
0x1162: RETURNPRIVATE v112carg2 v1160
----------------------------------

Begin block 0x1163
prev = {'0xd9a'}, next = {'0x1174'}
----------------------------------
Block 0x1163
0x1164: v1164(0x1174) = CONST 
0x1167: v1167(0x6) = CONST 
0x116a: v116a(0xffffffff) = CONST 
0x116f: v116f(0x1283) = CONST 
0x1172: v1172(0x1283) = AND v116f(0x1283) v116a(0xffffffff)
0x1173: CALLPRIVATE v1172(0x1283) v4ce v1167(0x6) v1164(0x1174)
----------------------------------

Begin block 0x1174
prev = {'0x1163'}, next = {'0xda30x4a0'}
----------------------------------
Block 0x1174
0x1175: v1175(0x40) = CONST 
0x1177: v1177 = MLOAD v1175(0x40)
0x1178: v1178(0x1) = CONST 
0x117a: v117a(0xa0) = CONST 
0x117c: v117c(0x2) = CONST 
0x117e: v117e(0x10000000000000000000000000000000000000000) = EXP v117c(0x2) v117a(0xa0)
0x117f: v117f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v117e(0x10000000000000000000000000000000000000000) v1178(0x1)
0x1181: v1181 = AND v4ce v117f(0xffffffffffffffffffffffffffffffffffffffff)
0x1183: v1183(0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6) = CONST 
0x11a5: v11a5(0x0) = CONST 
0x11a8: LOG2 v1177 v11a5(0x0) v1183(0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6) v1181
0x11aa: JUMP vd9b(0xda3)
----------------------------------

Begin block 0x11ab
prev = {'0xda6'}, next = {'0x11bc'}
----------------------------------
Block 0x11ab
0x11ac: v11ac(0x11bc) = CONST 
0x11af: v11af(0x6) = CONST 
0x11b2: v11b2(0xffffffff) = CONST 
0x11b7: v11b7(0x12d1) = CONST 
0x11ba: v11ba(0x12d1) = AND v11b7(0x12d1) v11b2(0xffffffff)
0x11bb: CALLPRIVATE v11ba(0x12d1) vdaa v11af(0x6) v11ac(0x11bc)
----------------------------------

Begin block 0x11bc
prev = {'0x11ab'}, next = {'0xdaf0xda6'}
----------------------------------
Block 0x11bc
0x11bd: v11bd(0x40) = CONST 
0x11bf: v11bf = MLOAD v11bd(0x40)
0x11c0: v11c0(0x1) = CONST 
0x11c2: v11c2(0xa0) = CONST 
0x11c4: v11c4(0x2) = CONST 
0x11c6: v11c6(0x10000000000000000000000000000000000000000) = EXP v11c4(0x2) v11c2(0xa0)
0x11c7: v11c7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v11c6(0x10000000000000000000000000000000000000000) v11c0(0x1)
0x11c9: v11c9 = AND vdaa v11c7(0xffffffffffffffffffffffffffffffffffffffff)
0x11cb: v11cb(0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692) = CONST 
0x11ed: v11ed(0x0) = CONST 
0x11f0: LOG2 v11bf v11ed(0x0) v11cb(0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692) v11c9
0x11f2: JUMP vda7(0xdaf)
----------------------------------

Begin block 0x11f3
prev = {'0xe47'}, next = {'0x1204'}
----------------------------------
Block 0x11f3
0x11f4: v11f4(0x1204) = CONST 
0x11f7: v11f7(0x7) = CONST 
0x11fa: v11fa(0xffffffff) = CONST 
0x11ff: v11ff(0x12d1) = CONST 
0x1202: v1202(0x12d1) = AND v11ff(0x12d1) v11fa(0xffffffff)
0x1203: CALLPRIVATE v1202(0x12d1) ve4b v11f7(0x7) v11f4(0x1204)
----------------------------------

Begin block 0x1204
prev = {'0x11f3'}, next = {'0xdaf0xe47'}
----------------------------------
Block 0x1204
0x1205: v1205(0x40) = CONST 
0x1207: v1207 = MLOAD v1205(0x40)
0x1208: v1208(0x1) = CONST 
0x120a: v120a(0xa0) = CONST 
0x120c: v120c(0x2) = CONST 
0x120e: v120e(0x10000000000000000000000000000000000000000) = EXP v120c(0x2) v120a(0xa0)
0x120f: v120f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v120e(0x10000000000000000000000000000000000000000) v1208(0x1)
0x1211: v1211 = AND ve4b v120f(0xffffffffffffffffffffffffffffffffffffffff)
0x1213: v1213(0x90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e) = CONST 
0x1235: v1235(0x0) = CONST 
0x1238: LOG2 v1207 v1235(0x0) v1213(0x90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e) v1211
0x123a: JUMP ve48(0xdaf)
----------------------------------

Begin block 0x123b
prev = {'0xed5'}, next = {'0x124c'}
----------------------------------
Block 0x123b
0x123c: v123c(0x124c) = CONST 
0x123f: v123f(0x7) = CONST 
0x1242: v1242(0xffffffff) = CONST 
0x1247: v1247(0x1283) = CONST 
0x124a: v124a(0x1283) = AND v1247(0x1283) v1242(0xffffffff)
0x124b: CALLPRIVATE v124a(0x1283) v60d v123f(0x7) v123c(0x124c)
----------------------------------

Begin block 0x124c
prev = {'0x123b'}, next = {'0xda30x5df'}
----------------------------------
Block 0x124c
0x124d: v124d(0x40) = CONST 
0x124f: v124f = MLOAD v124d(0x40)
0x1250: v1250(0x1) = CONST 
0x1252: v1252(0xa0) = CONST 
0x1254: v1254(0x2) = CONST 
0x1256: v1256(0x10000000000000000000000000000000000000000) = EXP v1254(0x2) v1252(0xa0)
0x1257: v1257(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1256(0x10000000000000000000000000000000000000000) v1250(0x1)
0x1259: v1259 = AND v60d v1257(0xffffffffffffffffffffffffffffffffffffffff)
0x125b: v125b(0x86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b94560) = CONST 
0x127d: v127d(0x0) = CONST 
0x1280: LOG2 v124f v127d(0x0) v125b(0x86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b94560) v1259
0x1282: JUMP ved6(0xda3)
----------------------------------

Begin block 0x1283
prev = {}, next = {'0x1298', '0x1294'}
----------------------------------
function 0x1283(v1283arg0, v1283arg1, v1283arg2)
Block 0x1283
0x1284: v1284(0x1) = CONST 
0x1286: v1286(0xa0) = CONST 
0x1288: v1288(0x2) = CONST 
0x128a: v128a(0x10000000000000000000000000000000000000000) = EXP v1288(0x2) v1286(0xa0)
0x128b: v128b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v128a(0x10000000000000000000000000000000000000000) v1284(0x1)
0x128d: v128d = AND v1283arg0 v128b(0xffffffffffffffffffffffffffffffffffffffff)
0x128e: v128e = ISZERO v128d
0x128f: v128f = ISZERO v128e
0x1290: v1290(0x1298) = CONST 
0x1293: JUMPI v1290(0x1298) v128f
----------------------------------

Begin block 0x1294
prev = {'0x1283'}, next = {}
----------------------------------
Block 0x1294
0x1294: v1294(0x0) = CONST 
0x1297: REVERT v1294(0x0) v1294(0x0)
----------------------------------

Begin block 0x1298
prev = {'0x1283'}, next = {'0x12a2'}
----------------------------------
Block 0x1298
0x1299: v1299(0x12a2) = CONST 
0x129e: v129e(0x112c) = CONST 
0x12a1: v12a1_0 = CALLPRIVATE v129e(0x112c) v1283arg0 v1283arg1 v1299(0x12a2)
----------------------------------

Begin block 0x12a2
prev = {'0x1298'}, next = {'0x12ac', '0x12a8'}
----------------------------------
Block 0x12a2
0x12a3: v12a3 = ISZERO v12a1_0
0x12a4: v12a4(0x12ac) = CONST 
0x12a7: JUMPI v12a4(0x12ac) v12a3
----------------------------------

Begin block 0x12a8
prev = {'0x12a2'}, next = {}
----------------------------------
Block 0x12a8
0x12a8: v12a8(0x0) = CONST 
0x12ab: REVERT v12a8(0x0) v12a8(0x0)
----------------------------------

Begin block 0x12ac
prev = {'0x12a2'}, next = {}
----------------------------------
Block 0x12ac
0x12ad: v12ad(0x1) = CONST 
0x12af: v12af(0xa0) = CONST 
0x12b1: v12b1(0x2) = CONST 
0x12b3: v12b3(0x10000000000000000000000000000000000000000) = EXP v12b1(0x2) v12af(0xa0)
0x12b4: v12b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v12b3(0x10000000000000000000000000000000000000000) v12ad(0x1)
0x12b5: v12b5 = AND v12b4(0xffffffffffffffffffffffffffffffffffffffff) v1283arg0
0x12b6: v12b6(0x0) = CONST 
0x12ba: MSTORE v12b6(0x0) v12b5
0x12bb: v12bb(0x20) = CONST 
0x12c0: MSTORE v12bb(0x20) v1283arg1
0x12c1: v12c1(0x40) = CONST 
0x12c4: v12c4 = SHA3 v12b6(0x0) v12c1(0x40)
0x12c6: v12c6 = SLOAD v12c4
0x12c7: v12c7(0xff) = CONST 
0x12c9: v12c9(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v12c7(0xff)
0x12ca: v12ca = AND v12c9(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v12c6
0x12cb: v12cb(0x1) = CONST 
0x12cd: v12cd = OR v12cb(0x1) v12ca
0x12cf: SSTORE v12c4 v12cd
0x12d0: RETURNPRIVATE v1283arg2
----------------------------------

Begin block 0x12d1
prev = {}, next = {'0x12e2', '0x12e6'}
----------------------------------
function 0x12d1(v12d1arg0, v12d1arg1, v12d1arg2)
Block 0x12d1
0x12d2: v12d2(0x1) = CONST 
0x12d4: v12d4(0xa0) = CONST 
0x12d6: v12d6(0x2) = CONST 
0x12d8: v12d8(0x10000000000000000000000000000000000000000) = EXP v12d6(0x2) v12d4(0xa0)
0x12d9: v12d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v12d8(0x10000000000000000000000000000000000000000) v12d2(0x1)
0x12db: v12db = AND v12d1arg0 v12d9(0xffffffffffffffffffffffffffffffffffffffff)
0x12dc: v12dc = ISZERO v12db
0x12dd: v12dd = ISZERO v12dc
0x12de: v12de(0x12e6) = CONST 
0x12e1: JUMPI v12de(0x12e6) v12dd
----------------------------------

Begin block 0x12e2
prev = {'0x12d1'}, next = {}
----------------------------------
Block 0x12e2
0x12e2: v12e2(0x0) = CONST 
0x12e5: REVERT v12e2(0x0) v12e2(0x0)
----------------------------------

Begin block 0x12e6
prev = {'0x12d1'}, next = {'0x12f0'}
----------------------------------
Block 0x12e6
0x12e7: v12e7(0x12f0) = CONST 
0x12ec: v12ec(0x112c) = CONST 
0x12ef: v12ef_0 = CALLPRIVATE v12ec(0x112c) v12d1arg0 v12d1arg1 v12e7(0x12f0)
----------------------------------

Begin block 0x12f0
prev = {'0x12e6'}, next = {'0x12f7', '0x12fb'}
----------------------------------
Block 0x12f0
0x12f1: v12f1 = ISZERO v12ef_0
0x12f2: v12f2 = ISZERO v12f1
0x12f3: v12f3(0x12fb) = CONST 
0x12f6: JUMPI v12f3(0x12fb) v12f2
----------------------------------

Begin block 0x12f7
prev = {'0x12f0'}, next = {}
----------------------------------
Block 0x12f7
0x12f7: v12f7(0x0) = CONST 
0x12fa: REVERT v12f7(0x0) v12f7(0x0)
----------------------------------

Begin block 0x12fb
prev = {'0x12f0'}, next = {}
----------------------------------
Block 0x12fb
0x12fc: v12fc(0x1) = CONST 
0x12fe: v12fe(0xa0) = CONST 
0x1300: v1300(0x2) = CONST 
0x1302: v1302(0x10000000000000000000000000000000000000000) = EXP v1300(0x2) v12fe(0xa0)
0x1303: v1303(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1302(0x10000000000000000000000000000000000000000) v12fc(0x1)
0x1304: v1304 = AND v1303(0xffffffffffffffffffffffffffffffffffffffff) v12d1arg0
0x1305: v1305(0x0) = CONST 
0x1309: MSTORE v1305(0x0) v1304
0x130a: v130a(0x20) = CONST 
0x130f: MSTORE v130a(0x20) v12d1arg1
0x1310: v1310(0x40) = CONST 
0x1313: v1313 = SHA3 v1305(0x0) v1310(0x40)
0x1315: v1315 = SLOAD v1313
0x1316: v1316(0xff) = CONST 
0x1318: v1318(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v1316(0xff)
0x1319: v1319 = AND v1318(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v1315
0x131b: SSTORE v1313 v1319
0x131c: RETURNPRIVATE v12d1arg2
----------------------------------

Begin block 0x1379
prev = {'0x0', '0x127'}, next = {}
----------------------------------
Block 0x1379
0x137a: v137a(0x132) = CONST 
0x137b: CALLPRIVATE v137a(0x132)
----------------------------------

Begin block 0x137c
prev = {'0xd'}, next = {}
----------------------------------
Block 0x137c
0x137d: v137d(0x137) = CONST 
0x137e: CALLPRIVATE v137d(0x137)
----------------------------------

Begin block 0x137f
prev = {'0x40'}, next = {}
----------------------------------
Block 0x137f
0x1380: v1380(0x1c1) = CONST 
0x1381: CALLPRIVATE v1380(0x1c1)
----------------------------------

Begin block 0x1382
prev = {'0x4b'}, next = {}
----------------------------------
Block 0x1382
0x1383: v1383(0x20e) = CONST 
0x1384: CALLPRIVATE v1383(0x20e)
----------------------------------

Begin block 0x1385
prev = {'0x56'}, next = {}
----------------------------------
Block 0x1385
0x1386: v1386(0x25b) = CONST 
0x1387: CALLPRIVATE v1386(0x25b)
----------------------------------

Begin block 0x1388
prev = {'0x61'}, next = {}
----------------------------------
Block 0x1388
0x1389: v1389(0x270) = CONST 
0x138a: CALLPRIVATE v1389(0x270)
----------------------------------

Begin block 0x138b
prev = {'0x6c'}, next = {}
----------------------------------
Block 0x138b
0x138c: v138c(0x2a9) = CONST 
0x138d: CALLPRIVATE v138c(0x2a9)
----------------------------------

Begin block 0x138e
prev = {'0x77'}, next = {}
----------------------------------
Block 0x138e
0x138f: v138f(0x2ec) = CONST 
0x1390: CALLPRIVATE v138f(0x2ec)
----------------------------------

Begin block 0x1391
prev = {'0x82'}, next = {}
----------------------------------
Block 0x1391
0x1392: v1392(0x317) = CONST 
0x1393: CALLPRIVATE v1392(0x317)
----------------------------------

Begin block 0x1394
prev = {'0x8d'}, next = {}
----------------------------------
Block 0x1394
0x1395: v1395(0x350) = CONST 
0x1396: CALLPRIVATE v1395(0x350)
----------------------------------

Begin block 0x1397
prev = {'0x98'}, next = {}
----------------------------------
Block 0x1397
0x1398: v1398(0x389) = CONST 
0x1399: CALLPRIVATE v1398(0x389)
----------------------------------

Begin block 0x139a
prev = {'0xa3'}, next = {}
----------------------------------
Block 0x139a
0x139b: v139b(0x3c2) = CONST 
0x139c: CALLPRIVATE v139b(0x3c2)
----------------------------------

Begin block 0x139d
prev = {'0xae'}, next = {}
----------------------------------
Block 0x139d
0x139e: v139e(0x3ec) = CONST 
0x139f: CALLPRIVATE v139e(0x3ec)
----------------------------------

Begin block 0x13a0
prev = {'0xb9'}, next = {}
----------------------------------
Block 0x13a0
0x13a1: v13a1(0x41f) = CONST 
0x13a2: CALLPRIVATE v13a1(0x41f)
----------------------------------

Begin block 0x13a3
prev = {'0xc4'}, next = {}
----------------------------------
Block 0x13a3
0x13a4: v13a4(0x452) = CONST 
0x13a5: CALLPRIVATE v13a4(0x452)
----------------------------------

Begin block 0x13a6
prev = {'0xcf'}, next = {}
----------------------------------
Block 0x13a6
0x13a7: v13a7(0x48b) = CONST 
0x13a8: CALLPRIVATE v13a7(0x48b)
----------------------------------

Begin block 0x13a9
prev = {'0xda'}, next = {}
----------------------------------
Block 0x13a9
0x13aa: v13aa(0x4a0) = CONST 
0x13ab: CALLPRIVATE v13aa(0x4a0)
----------------------------------

Begin block 0x13ac
prev = {'0xe5'}, next = {}
----------------------------------
Block 0x13ac
0x13ad: v13ad(0x4d5) = CONST 
0x13ae: CALLPRIVATE v13ad(0x4d5)
----------------------------------

Begin block 0x13af
prev = {'0xf0'}, next = {}
----------------------------------
Block 0x13af
0x13b0: v13b0(0x4ea) = CONST 
0x13b1: CALLPRIVATE v13b0(0x4ea)
----------------------------------

Begin block 0x13b2
prev = {'0xfb'}, next = {}
----------------------------------
Block 0x13b2
0x13b3: v13b3(0x523) = CONST 
0x13b4: CALLPRIVATE v13b3(0x523)
----------------------------------

Begin block 0x13b5
prev = {'0x106'}, next = {}
----------------------------------
Block 0x13b5
0x13b6: v13b6(0x55c) = CONST 
0x13b7: CALLPRIVATE v13b6(0x55c)
----------------------------------

Begin block 0x13b8
prev = {'0x111'}, next = {}
----------------------------------
Block 0x13b8
0x13b9: v13b9(0x58f) = CONST 
0x13ba: CALLPRIVATE v13b9(0x58f)
----------------------------------

Begin block 0x13bb
prev = {'0x11c'}, next = {}
----------------------------------
Block 0x13bb
0x13bc: v13bc(0x5ca) = CONST 
0x13bd: CALLPRIVATE v13bc(0x5ca)
----------------------------------

Begin block 0x13be
prev = {'0x127'}, next = {}
----------------------------------
Block 0x13be
0x13bf: v13bf(0x5df) = CONST 
0x13c0: CALLPRIVATE v13bf(0x5df)
----------------------------------
