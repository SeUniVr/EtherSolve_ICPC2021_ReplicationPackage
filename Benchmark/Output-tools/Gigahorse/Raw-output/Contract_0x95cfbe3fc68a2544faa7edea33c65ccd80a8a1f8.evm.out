
Begin block 0x0
prev = {}, next = {'0xd', '0x1919'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x18ed: v18ed(0x1919) = CONST 
0x18ee: JUMPI v18ed(0x1919) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x191c', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x18ef: v18ef(0x191c) = CONST 
0x18f0: JUMPI v18ef(0x191c) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x4c', '0x191f'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x18f1: v18f1(0x191f) = CONST 
0x18f2: JUMPI v18f1(0x191f) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x1922'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x18f3: v18f3(0x1922) = CONST 
0x18f4: JUMPI v18f3(0x1922) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x1925', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0x18f5: v18f5(0x1925) = CONST 
0x18f6: JUMPI v18f5(0x1925) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0x1928'}
----------------------------------
Block 0x62
0x63: v63(0x313ce567) = CONST 
0x68: v68 = EQ v63(0x313ce567) v35
0x18f7: v18f7(0x1928) = CONST 
0x18f8: JUMPI v18f7(0x1928) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x78', '0x192b'}
----------------------------------
Block 0x6d
0x6e: v6e(0x3eaaf86b) = CONST 
0x73: v73 = EQ v6e(0x3eaaf86b) v35
0x18f9: v18f9(0x192b) = CONST 
0x18fa: JUMPI v18f9(0x192b) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x192e', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x4affcdee) = CONST 
0x7e: v7e = EQ v79(0x4affcdee) v35
0x18fb: v18fb(0x192e) = CONST 
0x18fc: JUMPI v18fb(0x192e) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x1931', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x70a08231) = CONST 
0x89: v89 = EQ v84(0x70a08231) v35
0x18fd: v18fd(0x1931) = CONST 
0x18fe: JUMPI v18fd(0x1931) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x99', '0x1934'}
----------------------------------
Block 0x8e
0x8f: v8f(0x79ba5097) = CONST 
0x94: v94 = EQ v8f(0x79ba5097) v35
0x18ff: v18ff(0x1934) = CONST 
0x1900: JUMPI v18ff(0x1934) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0x1937', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x8da5cb5b) = CONST 
0x9f: v9f = EQ v9a(0x8da5cb5b) v35
0x1901: v1901(0x1937) = CONST 
0x1902: JUMPI v1901(0x1937) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0x193a', '0xaf'}
----------------------------------
Block 0xa4
0xa5: va5(0x95d89b41) = CONST 
0xaa: vaa = EQ va5(0x95d89b41) v35
0x1903: v1903(0x193a) = CONST 
0x1904: JUMPI v1903(0x193a) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0xba', '0x193d'}
----------------------------------
Block 0xaf
0xb0: vb0(0xa293d1e8) = CONST 
0xb5: vb5 = EQ vb0(0xa293d1e8) v35
0x1905: v1905(0x193d) = CONST 
0x1906: JUMPI v1905(0x193d) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0xc5', '0x1940'}
----------------------------------
Block 0xba
0xbb: vbb(0xa9059cbb) = CONST 
0xc0: vc0 = EQ vbb(0xa9059cbb) v35
0x1907: v1907(0x1940) = CONST 
0x1908: JUMPI v1907(0x1940) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0x1943', '0xd0'}
----------------------------------
Block 0xc5
0xc6: vc6(0xb5931f7c) = CONST 
0xcb: vcb = EQ vc6(0xb5931f7c) v35
0x1909: v1909(0x1943) = CONST 
0x190a: JUMPI v1909(0x1943) vcb
----------------------------------

Begin block 0xd0
prev = {'0xc5'}, next = {'0xdb', '0x1946'}
----------------------------------
Block 0xd0
0xd1: vd1(0xcae9ca51) = CONST 
0xd6: vd6 = EQ vd1(0xcae9ca51) v35
0x190b: v190b(0x1946) = CONST 
0x190c: JUMPI v190b(0x1946) vd6
----------------------------------

Begin block 0xdb
prev = {'0xd0'}, next = {'0xe6', '0x1949'}
----------------------------------
Block 0xdb
0xdc: vdc(0xd05c78da) = CONST 
0xe1: ve1 = EQ vdc(0xd05c78da) v35
0x190d: v190d(0x1949) = CONST 
0x190e: JUMPI v190d(0x1949) ve1
----------------------------------

Begin block 0xe6
prev = {'0xdb'}, next = {'0x194c', '0xf1'}
----------------------------------
Block 0xe6
0xe7: ve7(0xd4ee1d90) = CONST 
0xec: vec = EQ ve7(0xd4ee1d90) v35
0x190f: v190f(0x194c) = CONST 
0x1910: JUMPI v190f(0x194c) vec
----------------------------------

Begin block 0xf1
prev = {'0xe6'}, next = {'0x194f', '0xfc'}
----------------------------------
Block 0xf1
0xf2: vf2(0xdc39d06d) = CONST 
0xf7: vf7 = EQ vf2(0xdc39d06d) v35
0x1911: v1911(0x194f) = CONST 
0x1912: JUMPI v1911(0x194f) vf7
----------------------------------

Begin block 0xfc
prev = {'0xf1'}, next = {'0x107', '0x1952'}
----------------------------------
Block 0xfc
0xfd: vfd(0xdd62ed3e) = CONST 
0x102: v102 = EQ vfd(0xdd62ed3e) v35
0x1913: v1913(0x1952) = CONST 
0x1914: JUMPI v1913(0x1952) v102
----------------------------------

Begin block 0x107
prev = {'0xfc'}, next = {'0x1955', '0x112'}
----------------------------------
Block 0x107
0x108: v108(0xe6cb9013) = CONST 
0x10d: v10d = EQ v108(0xe6cb9013) v35
0x1915: v1915(0x1955) = CONST 
0x1916: JUMPI v1915(0x1955) v10d
----------------------------------

Begin block 0x112
prev = {'0x107'}, next = {'0x1958', '0x1919'}
----------------------------------
Block 0x112
0x113: v113(0xf2fde38b) = CONST 
0x118: v118 = EQ v113(0xf2fde38b) v35
0x1917: v1917(0x1958) = CONST 
0x1918: JUMPI v1917(0x1958) v118
----------------------------------

Begin block 0x11d
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x11d
0x11e: v11e(0x0) = CONST 
0x121: REVERT v11e(0x0) v11e(0x0)
----------------------------------

Begin block 0x122
prev = {}, next = {'0x12e', '0x12a'}
----------------------------------
function name()()
Block 0x122
0x123: v123 = CALLVALUE 
0x125: v125 = ISZERO v123
0x126: v126(0x12e) = CONST 
0x129: JUMPI v126(0x12e) v125
----------------------------------

Begin block 0x12a
prev = {'0x122'}, next = {}
----------------------------------
Block 0x12a
0x12a: v12a(0x0) = CONST 
0x12d: REVERT v12a(0x0) v12a(0x0)
----------------------------------

Begin block 0x12e
prev = {'0x122'}, next = {'0x841'}
----------------------------------
Block 0x12e
0x130: v130(0x137) = CONST 
0x133: v133(0x841) = CONST 
0x136: JUMP v133(0x841)
----------------------------------

Begin block 0x137
prev = {'0x8d7'}, next = {'0x15c'}
----------------------------------
Block 0x137
0x138: v138(0x40) = CONST 
0x13a: v13a = MLOAD v138(0x40)
0x13d: v13d(0x20) = CONST 
0x13f: v13f = ADD v13d(0x20) v13a
0x142: v142 = SUB v13f v13a
0x144: MSTORE v13a v142
0x148: v148 = MLOAD v866
0x14a: MSTORE v13f v148
0x14b: v14b(0x20) = CONST 
0x14d: v14d = ADD v14b(0x20) v13f
0x151: v151 = MLOAD v866
0x153: v153(0x20) = CONST 
0x155: v155 = ADD v153(0x20) v866
0x15a: v15a(0x0) = CONST 
----------------------------------

Begin block 0x15c
prev = {'0x165', '0x137'}, next = {'0x177', '0x165'}
----------------------------------
Block 0x15c
0x15c_0x0: v15c_0 = PHI v15a(0x0) v170
0x15f: v15f = LT v15c_0 v151
0x160: v160 = ISZERO v15f
0x161: v161(0x177) = CONST 
0x164: JUMPI v161(0x177) v160
----------------------------------

Begin block 0x165
prev = {'0x15c'}, next = {'0x15c'}
----------------------------------
Block 0x165
0x165_0x0: v165_0 = PHI v15a(0x0) v170
0x167: v167 = ADD v155 v165_0
0x168: v168 = MLOAD v167
0x16b: v16b = ADD v14d v165_0
0x16c: MSTORE v16b v168
0x16d: v16d(0x20) = CONST 
0x170: v170 = ADD v165_0 v16d(0x20)
0x173: v173(0x15c) = CONST 
0x176: JUMP v173(0x15c)
----------------------------------

Begin block 0x177
prev = {'0x15c'}, next = {'0x18b', '0x1a4'}
----------------------------------
Block 0x177
0x180: v180 = ADD v151 v14d
0x182: v182(0x1f) = CONST 
0x184: v184 = AND v182(0x1f) v151
0x186: v186 = ISZERO v184
0x187: v187(0x1a4) = CONST 
0x18a: JUMPI v187(0x1a4) v186
----------------------------------

Begin block 0x18b
prev = {'0x177'}, next = {'0x1a4'}
----------------------------------
Block 0x18b
0x18d: v18d = SUB v180 v184
0x18f: v18f = MLOAD v18d
0x190: v190(0x1) = CONST 
0x193: v193(0x20) = CONST 
0x195: v195 = SUB v193(0x20) v184
0x196: v196(0x100) = CONST 
0x199: v199 = EXP v196(0x100) v195
0x19a: v19a = SUB v199 v190(0x1)
0x19b: v19b = NOT v19a
0x19c: v19c = AND v19b v18f
0x19e: MSTORE v18d v19c
0x19f: v19f(0x20) = CONST 
0x1a1: v1a1 = ADD v19f(0x20) v18d
----------------------------------

Begin block 0x1a4
prev = {'0x177', '0x18b'}, next = {}
----------------------------------
Block 0x1a4
0x1a4_0x1: v1a4_1 = PHI v180 v1a1
0x1aa: v1aa(0x40) = CONST 
0x1ac: v1ac = MLOAD v1aa(0x40)
0x1af: v1af = SUB v1a4_1 v1ac
0x1b1: RETURN v1ac v1af
----------------------------------

Begin block 0x1b2
prev = {}, next = {'0x1be', '0x1ba'}
----------------------------------
function approve(address,uint256)()
Block 0x1b2
0x1b3: v1b3 = CALLVALUE 
0x1b5: v1b5 = ISZERO v1b3
0x1b6: v1b6(0x1be) = CONST 
0x1b9: JUMPI v1b6(0x1be) v1b5
----------------------------------

Begin block 0x1ba
prev = {'0x1b2'}, next = {}
----------------------------------
Block 0x1ba
0x1ba: v1ba(0x0) = CONST 
0x1bd: REVERT v1ba(0x0) v1ba(0x0)
----------------------------------

Begin block 0x1be
prev = {'0x1b2'}, next = {'0x8df'}
----------------------------------
Block 0x1be
0x1c0: v1c0(0x1fd) = CONST 
0x1c3: v1c3(0x4) = CONST 
0x1c6: v1c6 = CALLDATASIZE 
0x1c7: v1c7 = SUB v1c6 v1c3(0x4)
0x1c9: v1c9 = ADD v1c3(0x4) v1c7
0x1cd: v1cd = CALLDATALOAD v1c3(0x4)
0x1ce: v1ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1e3: v1e3 = AND v1ce(0xffffffffffffffffffffffffffffffffffffffff) v1cd
0x1e5: v1e5(0x20) = CONST 
0x1e7: v1e7(0x24) = ADD v1e5(0x20) v1c3(0x4)
0x1ed: v1ed = CALLDATALOAD v1e7(0x24)
0x1ef: v1ef(0x20) = CONST 
0x1f1: v1f1(0x44) = ADD v1ef(0x20) v1e7(0x24)
0x1f9: v1f9(0x8df) = CONST 
0x1fc: JUMP v1f9(0x8df)
----------------------------------

Begin block 0x1fd
prev = {'0x8df'}, next = {}
----------------------------------
Block 0x1fd
0x1fe: v1fe(0x40) = CONST 
0x200: v200 = MLOAD v1fe(0x40)
0x203: v203 = ISZERO v9c8(0x1)
0x204: v204 = ISZERO v203
0x205: v205 = ISZERO v204
0x206: v206 = ISZERO v205
0x208: MSTORE v200 v206
0x209: v209(0x20) = CONST 
0x20b: v20b = ADD v209(0x20) v200
0x20f: v20f(0x40) = CONST 
0x211: v211 = MLOAD v20f(0x40)
0x214: v214 = SUB v20b v211
0x216: RETURN v211 v214
----------------------------------

Begin block 0x217
prev = {}, next = {'0x21f', '0x223'}
----------------------------------
function totalSupply()()
Block 0x217
0x218: v218 = CALLVALUE 
0x21a: v21a = ISZERO v218
0x21b: v21b(0x223) = CONST 
0x21e: JUMPI v21b(0x223) v21a
----------------------------------

Begin block 0x21f
prev = {'0x217'}, next = {}
----------------------------------
Block 0x21f
0x21f: v21f(0x0) = CONST 
0x222: REVERT v21f(0x0) v21f(0x0)
----------------------------------

Begin block 0x223
prev = {'0x217'}, next = {'0x9d1'}
----------------------------------
Block 0x223
0x225: v225(0x22c) = CONST 
0x228: v228(0x9d1) = CONST 
0x22b: JUMP v228(0x9d1)
----------------------------------

Begin block 0x22c
prev = {'0x9d1'}, next = {}
----------------------------------
Block 0x22c
0x22d: v22d(0x40) = CONST 
0x22f: v22f = MLOAD v22d(0x40)
0x233: MSTORE v22f va17
0x234: v234(0x20) = CONST 
0x236: v236 = ADD v234(0x20) v22f
0x23a: v23a(0x40) = CONST 
0x23c: v23c = MLOAD v23a(0x40)
0x23f: v23f = SUB v236 v23c
0x241: RETURN v23c v23f
----------------------------------

Begin block 0x242
prev = {}, next = {'0x24e', '0x24a'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x242
0x243: v243 = CALLVALUE 
0x245: v245 = ISZERO v243
0x246: v246(0x24e) = CONST 
0x249: JUMPI v246(0x24e) v245
----------------------------------

Begin block 0x24a
prev = {'0x242'}, next = {}
----------------------------------
Block 0x24a
0x24a: v24a(0x0) = CONST 
0x24d: REVERT v24a(0x0) v24a(0x0)
----------------------------------

Begin block 0x24e
prev = {'0x242'}, next = {'0xa1c'}
----------------------------------
Block 0x24e
0x250: v250(0x2ad) = CONST 
0x253: v253(0x4) = CONST 
0x256: v256 = CALLDATASIZE 
0x257: v257 = SUB v256 v253(0x4)
0x259: v259 = ADD v253(0x4) v257
0x25d: v25d = CALLDATALOAD v253(0x4)
0x25e: v25e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x273: v273 = AND v25e(0xffffffffffffffffffffffffffffffffffffffff) v25d
0x275: v275(0x20) = CONST 
0x277: v277(0x24) = ADD v275(0x20) v253(0x4)
0x27d: v27d = CALLDATALOAD v277(0x24)
0x27e: v27e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x293: v293 = AND v27e(0xffffffffffffffffffffffffffffffffffffffff) v27d
0x295: v295(0x20) = CONST 
0x297: v297(0x44) = ADD v295(0x20) v277(0x24)
0x29d: v29d = CALLDATALOAD v297(0x44)
0x29f: v29f(0x20) = CONST 
0x2a1: v2a1(0x64) = ADD v29f(0x20) v297(0x44)
0x2a9: v2a9(0xa1c) = CONST 
0x2ac: JUMP v2a9(0xa1c)
----------------------------------

Begin block 0x2ad
prev = {'0xbf9'}, next = {}
----------------------------------
Block 0x2ad
0x2ae: v2ae(0x40) = CONST 
0x2b0: v2b0 = MLOAD v2ae(0x40)
0x2b3: v2b3 = ISZERO vca2(0x1)
0x2b4: v2b4 = ISZERO v2b3
0x2b5: v2b5 = ISZERO v2b4
0x2b6: v2b6 = ISZERO v2b5
0x2b8: MSTORE v2b0 v2b6
0x2b9: v2b9(0x20) = CONST 
0x2bb: v2bb = ADD v2b9(0x20) v2b0
0x2bf: v2bf(0x40) = CONST 
0x2c1: v2c1 = MLOAD v2bf(0x40)
0x2c4: v2c4 = SUB v2bb v2c1
0x2c6: RETURN v2c1 v2c4
----------------------------------

Begin block 0x2c7
prev = {}, next = {'0x2cf', '0x2d3'}
----------------------------------
function decimals()()
Block 0x2c7
0x2c8: v2c8 = CALLVALUE 
0x2ca: v2ca = ISZERO v2c8
0x2cb: v2cb(0x2d3) = CONST 
0x2ce: JUMPI v2cb(0x2d3) v2ca
----------------------------------

Begin block 0x2cf
prev = {'0x2c7'}, next = {}
----------------------------------
Block 0x2cf
0x2cf: v2cf(0x0) = CONST 
0x2d2: REVERT v2cf(0x0) v2cf(0x0)
----------------------------------

Begin block 0x2d3
prev = {'0x2c7'}, next = {'0xcac'}
----------------------------------
Block 0x2d3
0x2d5: v2d5(0x2dc) = CONST 
0x2d8: v2d8(0xcac) = CONST 
0x2db: JUMP v2d8(0xcac)
----------------------------------

Begin block 0x2dc
prev = {'0xcac'}, next = {}
----------------------------------
Block 0x2dc
0x2dd: v2dd(0x40) = CONST 
0x2df: v2df = MLOAD v2dd(0x40)
0x2e2: v2e2(0xff) = CONST 
0x2e4: v2e4 = AND v2e2(0xff) vcbc
0x2e5: v2e5(0xff) = CONST 
0x2e7: v2e7 = AND v2e5(0xff) v2e4
0x2e9: MSTORE v2df v2e7
0x2ea: v2ea(0x20) = CONST 
0x2ec: v2ec = ADD v2ea(0x20) v2df
0x2f0: v2f0(0x40) = CONST 
0x2f2: v2f2 = MLOAD v2f0(0x40)
0x2f5: v2f5 = SUB v2ec v2f2
0x2f7: RETURN v2f2 v2f5
----------------------------------

Begin block 0x2f8
prev = {}, next = {'0x304', '0x300'}
----------------------------------
function _totalSupply()()
Block 0x2f8
0x2f9: v2f9 = CALLVALUE 
0x2fb: v2fb = ISZERO v2f9
0x2fc: v2fc(0x304) = CONST 
0x2ff: JUMPI v2fc(0x304) v2fb
----------------------------------

Begin block 0x300
prev = {'0x2f8'}, next = {}
----------------------------------
Block 0x300
0x300: v300(0x0) = CONST 
0x303: REVERT v300(0x0) v300(0x0)
----------------------------------

Begin block 0x304
prev = {'0x2f8'}, next = {'0xcbf'}
----------------------------------
Block 0x304
0x306: v306(0x30d) = CONST 
0x309: v309(0xcbf) = CONST 
0x30c: JUMP v309(0xcbf)
----------------------------------

Begin block 0x30d
prev = {'0xcbf'}, next = {}
----------------------------------
Block 0x30d
0x30e: v30e(0x40) = CONST 
0x310: v310 = MLOAD v30e(0x40)
0x314: MSTORE v310 vcc2
0x315: v315(0x20) = CONST 
0x317: v317 = ADD v315(0x20) v310
0x31b: v31b(0x40) = CONST 
0x31d: v31d = MLOAD v31b(0x40)
0x320: v320 = SUB v317 v31d
0x322: RETURN v31d v320
----------------------------------

Begin block 0x323
prev = {}, next = {'0x32b', '0x32f'}
----------------------------------
function 0x4affcdee()
Block 0x323
0x324: v324 = CALLVALUE 
0x326: v326 = ISZERO v324
0x327: v327(0x32f) = CONST 
0x32a: JUMPI v327(0x32f) v326
----------------------------------

Begin block 0x32b
prev = {'0x323'}, next = {}
----------------------------------
Block 0x32b
0x32b: v32b(0x0) = CONST 
0x32e: REVERT v32b(0x0) v32b(0x0)
----------------------------------

Begin block 0x32f
prev = {'0x323'}, next = {'0xcc5'}
----------------------------------
Block 0x32f
0x331: v331(0x338) = CONST 
0x334: v334(0xcc5) = CONST 
0x337: JUMP v334(0xcc5)
----------------------------------

Begin block 0x338
prev = {'0xd5c'}, next = {}
----------------------------------
Block 0x338
0x339: STOP 
----------------------------------

Begin block 0x33a
prev = {}, next = {'0x346', '0x342'}
----------------------------------
function balanceOf(address)()
Block 0x33a
0x33b: v33b = CALLVALUE 
0x33d: v33d = ISZERO v33b
0x33e: v33e(0x346) = CONST 
0x341: JUMPI v33e(0x346) v33d
----------------------------------

Begin block 0x342
prev = {'0x33a'}, next = {}
----------------------------------
Block 0x342
0x342: v342(0x0) = CONST 
0x345: REVERT v342(0x0) v342(0x0)
----------------------------------

Begin block 0x346
prev = {'0x33a'}, next = {'0xe63'}
----------------------------------
Block 0x346
0x348: v348(0x37b) = CONST 
0x34b: v34b(0x4) = CONST 
0x34e: v34e = CALLDATASIZE 
0x34f: v34f = SUB v34e v34b(0x4)
0x351: v351 = ADD v34b(0x4) v34f
0x355: v355 = CALLDATALOAD v34b(0x4)
0x356: v356(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x36b: v36b = AND v356(0xffffffffffffffffffffffffffffffffffffffff) v355
0x36d: v36d(0x20) = CONST 
0x36f: v36f(0x24) = ADD v36d(0x20) v34b(0x4)
0x377: v377(0xe63) = CONST 
0x37a: JUMP v377(0xe63)
----------------------------------

Begin block 0x37b
prev = {'0xe63'}, next = {}
----------------------------------
Block 0x37b
0x37c: v37c(0x40) = CONST 
0x37e: v37e = MLOAD v37c(0x40)
0x382: MSTORE v37e vea5
0x383: v383(0x20) = CONST 
0x385: v385 = ADD v383(0x20) v37e
0x389: v389(0x40) = CONST 
0x38b: v38b = MLOAD v389(0x40)
0x38e: v38e = SUB v385 v38b
0x390: RETURN v38b v38e
----------------------------------

Begin block 0x391
prev = {}, next = {'0x39d', '0x399'}
----------------------------------
function acceptOwnership()()
Block 0x391
0x392: v392 = CALLVALUE 
0x394: v394 = ISZERO v392
0x395: v395(0x39d) = CONST 
0x398: JUMPI v395(0x39d) v394
----------------------------------

Begin block 0x399
prev = {'0x391'}, next = {}
----------------------------------
Block 0x399
0x399: v399(0x0) = CONST 
0x39c: REVERT v399(0x0) v399(0x0)
----------------------------------

Begin block 0x39d
prev = {'0x391'}, next = {'0xeac'}
----------------------------------
Block 0x39d
0x39f: v39f(0x3a6) = CONST 
0x3a2: v3a2(0xeac) = CONST 
0x3a5: JUMP v3a2(0xeac)
----------------------------------

Begin block 0x3a6
prev = {'0xf08'}, next = {}
----------------------------------
Block 0x3a6
0x3a7: STOP 
----------------------------------

Begin block 0x3a8
prev = {}, next = {'0x3b0', '0x3b4'}
----------------------------------
function owner()()
Block 0x3a8
0x3a9: v3a9 = CALLVALUE 
0x3ab: v3ab = ISZERO v3a9
0x3ac: v3ac(0x3b4) = CONST 
0x3af: JUMPI v3ac(0x3b4) v3ab
----------------------------------

Begin block 0x3b0
prev = {'0x3a8'}, next = {}
----------------------------------
Block 0x3b0
0x3b0: v3b0(0x0) = CONST 
0x3b3: REVERT v3b0(0x0) v3b0(0x0)
----------------------------------

Begin block 0x3b4
prev = {'0x3a8'}, next = {'0x104b'}
----------------------------------
Block 0x3b4
0x3b6: v3b6(0x3bd) = CONST 
0x3b9: v3b9(0x104b) = CONST 
0x3bc: JUMP v3b9(0x104b)
----------------------------------

Begin block 0x3bd
prev = {'0x104b'}, next = {}
----------------------------------
Block 0x3bd
0x3be: v3be(0x40) = CONST 
0x3c0: v3c0 = MLOAD v3be(0x40)
0x3c3: v3c3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3d8: v3d8 = AND v3c3(0xffffffffffffffffffffffffffffffffffffffff) v106d
0x3d9: v3d9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3ee: v3ee = AND v3d9(0xffffffffffffffffffffffffffffffffffffffff) v3d8
0x3f0: MSTORE v3c0 v3ee
0x3f1: v3f1(0x20) = CONST 
0x3f3: v3f3 = ADD v3f1(0x20) v3c0
0x3f7: v3f7(0x40) = CONST 
0x3f9: v3f9 = MLOAD v3f7(0x40)
0x3fc: v3fc = SUB v3f3 v3f9
0x3fe: RETURN v3f9 v3fc
----------------------------------

Begin block 0x3ff
prev = {}, next = {'0x40b', '0x407'}
----------------------------------
function symbol()()
Block 0x3ff
0x400: v400 = CALLVALUE 
0x402: v402 = ISZERO v400
0x403: v403(0x40b) = CONST 
0x406: JUMPI v403(0x40b) v402
----------------------------------

Begin block 0x407
prev = {'0x3ff'}, next = {}
----------------------------------
Block 0x407
0x407: v407(0x0) = CONST 
0x40a: REVERT v407(0x0) v407(0x0)
----------------------------------

Begin block 0x40b
prev = {'0x3ff'}, next = {'0x1070'}
----------------------------------
Block 0x40b
0x40d: v40d(0x414) = CONST 
0x410: v410(0x1070) = CONST 
0x413: JUMP v410(0x1070)
----------------------------------

Begin block 0x414
prev = {'0x1106'}, next = {'0x439'}
----------------------------------
Block 0x414
0x415: v415(0x40) = CONST 
0x417: v417 = MLOAD v415(0x40)
0x41a: v41a(0x20) = CONST 
0x41c: v41c = ADD v41a(0x20) v417
0x41f: v41f = SUB v41c v417
0x421: MSTORE v417 v41f
0x425: v425 = MLOAD v1095
0x427: MSTORE v41c v425
0x428: v428(0x20) = CONST 
0x42a: v42a = ADD v428(0x20) v41c
0x42e: v42e = MLOAD v1095
0x430: v430(0x20) = CONST 
0x432: v432 = ADD v430(0x20) v1095
0x437: v437(0x0) = CONST 
----------------------------------

Begin block 0x439
prev = {'0x442', '0x414'}, next = {'0x442', '0x454'}
----------------------------------
Block 0x439
0x439_0x0: v439_0 = PHI v437(0x0) v44d
0x43c: v43c = LT v439_0 v42e
0x43d: v43d = ISZERO v43c
0x43e: v43e(0x454) = CONST 
0x441: JUMPI v43e(0x454) v43d
----------------------------------

Begin block 0x442
prev = {'0x439'}, next = {'0x439'}
----------------------------------
Block 0x442
0x442_0x0: v442_0 = PHI v437(0x0) v44d
0x444: v444 = ADD v432 v442_0
0x445: v445 = MLOAD v444
0x448: v448 = ADD v42a v442_0
0x449: MSTORE v448 v445
0x44a: v44a(0x20) = CONST 
0x44d: v44d = ADD v442_0 v44a(0x20)
0x450: v450(0x439) = CONST 
0x453: JUMP v450(0x439)
----------------------------------

Begin block 0x454
prev = {'0x439'}, next = {'0x481', '0x468'}
----------------------------------
Block 0x454
0x45d: v45d = ADD v42e v42a
0x45f: v45f(0x1f) = CONST 
0x461: v461 = AND v45f(0x1f) v42e
0x463: v463 = ISZERO v461
0x464: v464(0x481) = CONST 
0x467: JUMPI v464(0x481) v463
----------------------------------

Begin block 0x468
prev = {'0x454'}, next = {'0x481'}
----------------------------------
Block 0x468
0x46a: v46a = SUB v45d v461
0x46c: v46c = MLOAD v46a
0x46d: v46d(0x1) = CONST 
0x470: v470(0x20) = CONST 
0x472: v472 = SUB v470(0x20) v461
0x473: v473(0x100) = CONST 
0x476: v476 = EXP v473(0x100) v472
0x477: v477 = SUB v476 v46d(0x1)
0x478: v478 = NOT v477
0x479: v479 = AND v478 v46c
0x47b: MSTORE v46a v479
0x47c: v47c(0x20) = CONST 
0x47e: v47e = ADD v47c(0x20) v46a
----------------------------------

Begin block 0x481
prev = {'0x454', '0x468'}, next = {}
----------------------------------
Block 0x481
0x481_0x1: v481_1 = PHI v45d v47e
0x487: v487(0x40) = CONST 
0x489: v489 = MLOAD v487(0x40)
0x48c: v48c = SUB v481_1 v489
0x48e: RETURN v489 v48c
----------------------------------

Begin block 0x48f
prev = {}, next = {'0x497', '0x49b'}
----------------------------------
function safeSub(uint256,uint256)()
Block 0x48f
0x490: v490 = CALLVALUE 
0x492: v492 = ISZERO v490
0x493: v493(0x49b) = CONST 
0x496: JUMPI v493(0x49b) v492
----------------------------------

Begin block 0x497
prev = {'0x48f'}, next = {}
----------------------------------
Block 0x497
0x497: v497(0x0) = CONST 
0x49a: REVERT v497(0x0) v497(0x0)
----------------------------------

Begin block 0x49b
prev = {'0x48f'}, next = {'0x4c4'}
----------------------------------
Block 0x49b
0x49d: v49d(0x4c4) = CONST 
0x4a0: v4a0(0x4) = CONST 
0x4a3: v4a3 = CALLDATASIZE 
0x4a4: v4a4 = SUB v4a3 v4a0(0x4)
0x4a6: v4a6 = ADD v4a0(0x4) v4a4
0x4aa: v4aa = CALLDATALOAD v4a0(0x4)
0x4ac: v4ac(0x20) = CONST 
0x4ae: v4ae(0x24) = ADD v4ac(0x20) v4a0(0x4)
0x4b4: v4b4 = CALLDATALOAD v4ae(0x24)
0x4b6: v4b6(0x20) = CONST 
0x4b8: v4b8(0x44) = ADD v4b6(0x20) v4ae(0x24)
0x4c0: v4c0(0x110e) = CONST 
0x4c3: v4c3_0 = CALLPRIVATE v4c0(0x110e) v4b4 v4aa v49d(0x4c4)
----------------------------------

Begin block 0x4c4
prev = {'0x49b'}, next = {}
----------------------------------
Block 0x4c4
0x4c5: v4c5(0x40) = CONST 
0x4c7: v4c7 = MLOAD v4c5(0x40)
0x4cb: MSTORE v4c7 v4c3_0
0x4cc: v4cc(0x20) = CONST 
0x4ce: v4ce = ADD v4cc(0x20) v4c7
0x4d2: v4d2(0x40) = CONST 
0x4d4: v4d4 = MLOAD v4d2(0x40)
0x4d7: v4d7 = SUB v4ce v4d4
0x4d9: RETURN v4d4 v4d7
----------------------------------

Begin block 0x4da
prev = {}, next = {'0x4e2', '0x4e6'}
----------------------------------
function transfer(address,uint256)()
Block 0x4da
0x4db: v4db = CALLVALUE 
0x4dd: v4dd = ISZERO v4db
0x4de: v4de(0x4e6) = CONST 
0x4e1: JUMPI v4de(0x4e6) v4dd
----------------------------------

Begin block 0x4e2
prev = {'0x4da'}, next = {}
----------------------------------
Block 0x4e2
0x4e2: v4e2(0x0) = CONST 
0x4e5: REVERT v4e2(0x0) v4e2(0x0)
----------------------------------

Begin block 0x4e6
prev = {'0x4da'}, next = {'0x112a'}
----------------------------------
Block 0x4e6
0x4e8: v4e8(0x525) = CONST 
0x4eb: v4eb(0x4) = CONST 
0x4ee: v4ee = CALLDATASIZE 
0x4ef: v4ef = SUB v4ee v4eb(0x4)
0x4f1: v4f1 = ADD v4eb(0x4) v4ef
0x4f5: v4f5 = CALLDATALOAD v4eb(0x4)
0x4f6: v4f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x50b: v50b = AND v4f6(0xffffffffffffffffffffffffffffffffffffffff) v4f5
0x50d: v50d(0x20) = CONST 
0x50f: v50f(0x24) = ADD v50d(0x20) v4eb(0x4)
0x515: v515 = CALLDATALOAD v50f(0x24)
0x517: v517(0x20) = CONST 
0x519: v519(0x44) = ADD v517(0x20) v50f(0x24)
0x521: v521(0x112a) = CONST 
0x524: JUMP v521(0x112a)
----------------------------------

Begin block 0x525
prev = {'0x1201'}, next = {}
----------------------------------
Block 0x525
0x526: v526(0x40) = CONST 
0x528: v528 = MLOAD v526(0x40)
0x52b: v52b = ISZERO v12aa(0x1)
0x52c: v52c = ISZERO v52b
0x52d: v52d = ISZERO v52c
0x52e: v52e = ISZERO v52d
0x530: MSTORE v528 v52e
0x531: v531(0x20) = CONST 
0x533: v533 = ADD v531(0x20) v528
0x537: v537(0x40) = CONST 
0x539: v539 = MLOAD v537(0x40)
0x53c: v53c = SUB v533 v539
0x53e: RETURN v539 v53c
----------------------------------

Begin block 0x53f
prev = {}, next = {'0x547', '0x54b'}
----------------------------------
function safeDiv(uint256,uint256)()
Block 0x53f
0x540: v540 = CALLVALUE 
0x542: v542 = ISZERO v540
0x543: v543(0x54b) = CONST 
0x546: JUMPI v543(0x54b) v542
----------------------------------

Begin block 0x547
prev = {'0x53f'}, next = {}
----------------------------------
Block 0x547
0x547: v547(0x0) = CONST 
0x54a: REVERT v547(0x0) v547(0x0)
----------------------------------

Begin block 0x54b
prev = {'0x53f'}, next = {'0x12b3'}
----------------------------------
Block 0x54b
0x54d: v54d(0x574) = CONST 
0x550: v550(0x4) = CONST 
0x553: v553 = CALLDATASIZE 
0x554: v554 = SUB v553 v550(0x4)
0x556: v556 = ADD v550(0x4) v554
0x55a: v55a = CALLDATALOAD v550(0x4)
0x55c: v55c(0x20) = CONST 
0x55e: v55e(0x24) = ADD v55c(0x20) v550(0x4)
0x564: v564 = CALLDATALOAD v55e(0x24)
0x566: v566(0x20) = CONST 
0x568: v568(0x44) = ADD v566(0x20) v55e(0x24)
0x570: v570(0x12b3) = CONST 
0x573: JUMP v570(0x12b3)
----------------------------------

Begin block 0x574
prev = {'0x12ce'}, next = {}
----------------------------------
Block 0x574
0x575: v575(0x40) = CONST 
0x577: v577 = MLOAD v575(0x40)
0x57b: MSTORE v577 v12cf
0x57c: v57c(0x20) = CONST 
0x57e: v57e = ADD v57c(0x20) v577
0x582: v582(0x40) = CONST 
0x584: v584 = MLOAD v582(0x40)
0x587: v587 = SUB v57e v584
0x589: RETURN v584 v587
----------------------------------

Begin block 0x58a
prev = {}, next = {'0x592', '0x596'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x58a
0x58b: v58b = CALLVALUE 
0x58d: v58d = ISZERO v58b
0x58e: v58e(0x596) = CONST 
0x591: JUMPI v58e(0x596) v58d
----------------------------------

Begin block 0x592
prev = {'0x58a'}, next = {}
----------------------------------
Block 0x592
0x592: v592(0x0) = CONST 
0x595: REVERT v592(0x0) v592(0x0)
----------------------------------

Begin block 0x596
prev = {'0x58a'}, next = {'0x12d7'}
----------------------------------
Block 0x596
0x598: v598(0x61b) = CONST 
0x59b: v59b(0x4) = CONST 
0x59e: v59e = CALLDATASIZE 
0x59f: v59f = SUB v59e v59b(0x4)
0x5a1: v5a1 = ADD v59b(0x4) v59f
0x5a5: v5a5 = CALLDATALOAD v59b(0x4)
0x5a6: v5a6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5bb: v5bb = AND v5a6(0xffffffffffffffffffffffffffffffffffffffff) v5a5
0x5bd: v5bd(0x20) = CONST 
0x5bf: v5bf(0x24) = ADD v5bd(0x20) v59b(0x4)
0x5c5: v5c5 = CALLDATALOAD v5bf(0x24)
0x5c7: v5c7(0x20) = CONST 
0x5c9: v5c9(0x44) = ADD v5c7(0x20) v5bf(0x24)
0x5cf: v5cf = CALLDATALOAD v5c9(0x44)
0x5d1: v5d1(0x20) = CONST 
0x5d3: v5d3(0x64) = ADD v5d1(0x20) v5c9(0x44)
0x5d6: v5d6 = ADD v59b(0x4) v5cf
0x5d8: v5d8 = CALLDATALOAD v5d6
0x5da: v5da(0x20) = CONST 
0x5dc: v5dc = ADD v5da(0x20) v5d6
0x5e0: v5e0(0x1f) = CONST 
0x5e2: v5e2 = ADD v5e0(0x1f) v5d8
0x5e3: v5e3(0x20) = CONST 
0x5e7: v5e7 = DIV v5e2 v5e3(0x20)
0x5e8: v5e8 = MUL v5e7 v5e3(0x20)
0x5e9: v5e9(0x20) = CONST 
0x5eb: v5eb = ADD v5e9(0x20) v5e8
0x5ec: v5ec(0x40) = CONST 
0x5ee: v5ee = MLOAD v5ec(0x40)
0x5f1: v5f1 = ADD v5ee v5eb
0x5f2: v5f2(0x40) = CONST 
0x5f4: MSTORE v5f2(0x40) v5f1
0x5fc: MSTORE v5ee v5d8
0x5fd: v5fd(0x20) = CONST 
0x5ff: v5ff = ADD v5fd(0x20) v5ee
0x605: CALLDATACOPY v5ff v5dc v5d8
0x607: v607 = ADD v5ff v5d8
0x617: v617(0x12d7) = CONST 
0x61a: JUMP v617(0x12d7)
----------------------------------

Begin block 0x61b
prev = {'0x1517'}, next = {}
----------------------------------
Block 0x61b
0x61c: v61c(0x40) = CONST 
0x61e: v61e = MLOAD v61c(0x40)
0x621: v621 = ISZERO v151c(0x1)
0x622: v622 = ISZERO v621
0x623: v623 = ISZERO v622
0x624: v624 = ISZERO v623
0x626: MSTORE v61e v624
0x627: v627(0x20) = CONST 
0x629: v629 = ADD v627(0x20) v61e
0x62d: v62d(0x40) = CONST 
0x62f: v62f = MLOAD v62d(0x40)
0x632: v632 = SUB v629 v62f
0x634: RETURN v62f v632
----------------------------------

Begin block 0x635
prev = {}, next = {'0x641', '0x63d'}
----------------------------------
function safeMul(uint256,uint256)()
Block 0x635
0x636: v636 = CALLVALUE 
0x638: v638 = ISZERO v636
0x639: v639(0x641) = CONST 
0x63c: JUMPI v639(0x641) v638
----------------------------------

Begin block 0x63d
prev = {'0x635'}, next = {}
----------------------------------
Block 0x63d
0x63d: v63d(0x0) = CONST 
0x640: REVERT v63d(0x0) v63d(0x0)
----------------------------------

Begin block 0x641
prev = {'0x635'}, next = {'0x1526'}
----------------------------------
Block 0x641
0x643: v643(0x66a) = CONST 
0x646: v646(0x4) = CONST 
0x649: v649 = CALLDATASIZE 
0x64a: v64a = SUB v649 v646(0x4)
0x64c: v64c = ADD v646(0x4) v64a
0x650: v650 = CALLDATALOAD v646(0x4)
0x652: v652(0x20) = CONST 
0x654: v654(0x24) = ADD v652(0x20) v646(0x4)
0x65a: v65a = CALLDATALOAD v654(0x24)
0x65c: v65c(0x20) = CONST 
0x65e: v65e(0x44) = ADD v65c(0x20) v654(0x24)
0x666: v666(0x1526) = CONST 
0x669: JUMP v666(0x1526)
----------------------------------

Begin block 0x66a
prev = {'0x1551'}, next = {}
----------------------------------
Block 0x66a
0x66b: v66b(0x40) = CONST 
0x66d: v66d = MLOAD v66b(0x40)
0x671: MSTORE v66d v152b
0x672: v672(0x20) = CONST 
0x674: v674 = ADD v672(0x20) v66d
0x678: v678(0x40) = CONST 
0x67a: v67a = MLOAD v678(0x40)
0x67d: v67d = SUB v674 v67a
0x67f: RETURN v67a v67d
----------------------------------

Begin block 0x680
prev = {}, next = {'0x68c', '0x688'}
----------------------------------
function newOwner()()
Block 0x680
0x681: v681 = CALLVALUE 
0x683: v683 = ISZERO v681
0x684: v684(0x68c) = CONST 
0x687: JUMPI v684(0x68c) v683
----------------------------------

Begin block 0x688
prev = {'0x680'}, next = {}
----------------------------------
Block 0x688
0x688: v688(0x0) = CONST 
0x68b: REVERT v688(0x0) v688(0x0)
----------------------------------

Begin block 0x68c
prev = {'0x680'}, next = {'0x1557'}
----------------------------------
Block 0x68c
0x68e: v68e(0x695) = CONST 
0x691: v691(0x1557) = CONST 
0x694: JUMP v691(0x1557)
----------------------------------

Begin block 0x695
prev = {'0x1557'}, next = {}
----------------------------------
Block 0x695
0x696: v696(0x40) = CONST 
0x698: v698 = MLOAD v696(0x40)
0x69b: v69b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6b0: v6b0 = AND v69b(0xffffffffffffffffffffffffffffffffffffffff) v157a
0x6b1: v6b1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c6: v6c6 = AND v6b1(0xffffffffffffffffffffffffffffffffffffffff) v6b0
0x6c8: MSTORE v698 v6c6
0x6c9: v6c9(0x20) = CONST 
0x6cb: v6cb = ADD v6c9(0x20) v698
0x6cf: v6cf(0x40) = CONST 
0x6d1: v6d1 = MLOAD v6cf(0x40)
0x6d4: v6d4 = SUB v6cb v6d1
0x6d6: RETURN v6d1 v6d4
----------------------------------

Begin block 0x6d7
prev = {}, next = {'0x6df', '0x6e3'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x6d7
0x6d8: v6d8 = CALLVALUE 
0x6da: v6da = ISZERO v6d8
0x6db: v6db(0x6e3) = CONST 
0x6de: JUMPI v6db(0x6e3) v6da
----------------------------------

Begin block 0x6df
prev = {'0x6d7'}, next = {}
----------------------------------
Block 0x6df
0x6df: v6df(0x0) = CONST 
0x6e2: REVERT v6df(0x0) v6df(0x0)
----------------------------------

Begin block 0x6e3
prev = {'0x6d7'}, next = {'0x157d'}
----------------------------------
Block 0x6e3
0x6e5: v6e5(0x722) = CONST 
0x6e8: v6e8(0x4) = CONST 
0x6eb: v6eb = CALLDATASIZE 
0x6ec: v6ec = SUB v6eb v6e8(0x4)
0x6ee: v6ee = ADD v6e8(0x4) v6ec
0x6f2: v6f2 = CALLDATALOAD v6e8(0x4)
0x6f3: v6f3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x708: v708 = AND v6f3(0xffffffffffffffffffffffffffffffffffffffff) v6f2
0x70a: v70a(0x20) = CONST 
0x70c: v70c(0x24) = ADD v70a(0x20) v6e8(0x4)
0x712: v712 = CALLDATALOAD v70c(0x24)
0x714: v714(0x20) = CONST 
0x716: v716(0x44) = ADD v714(0x20) v70c(0x24)
0x71e: v71e(0x157d) = CONST 
0x721: JUMP v71e(0x157d)
----------------------------------

Begin block 0x722
prev = {'0x16c8'}, next = {}
----------------------------------
Block 0x722
0x723: v723(0x40) = CONST 
0x725: v725 = MLOAD v723(0x40)
0x728: v728 = ISZERO v16ce
0x729: v729 = ISZERO v728
0x72a: v72a = ISZERO v729
0x72b: v72b = ISZERO v72a
0x72d: MSTORE v725 v72b
0x72e: v72e(0x20) = CONST 
0x730: v730 = ADD v72e(0x20) v725
0x734: v734(0x40) = CONST 
0x736: v736 = MLOAD v734(0x40)
0x739: v739 = SUB v730 v736
0x73b: RETURN v736 v739
----------------------------------

Begin block 0x73c
prev = {}, next = {'0x744', '0x748'}
----------------------------------
function allowance(address,address)()
Block 0x73c
0x73d: v73d = CALLVALUE 
0x73f: v73f = ISZERO v73d
0x740: v740(0x748) = CONST 
0x743: JUMPI v740(0x748) v73f
----------------------------------

Begin block 0x744
prev = {'0x73c'}, next = {}
----------------------------------
Block 0x744
0x744: v744(0x0) = CONST 
0x747: REVERT v744(0x0) v744(0x0)
----------------------------------

Begin block 0x748
prev = {'0x73c'}, next = {'0x16e1'}
----------------------------------
Block 0x748
0x74a: v74a(0x79d) = CONST 
0x74d: v74d(0x4) = CONST 
0x750: v750 = CALLDATASIZE 
0x751: v751 = SUB v750 v74d(0x4)
0x753: v753 = ADD v74d(0x4) v751
0x757: v757 = CALLDATALOAD v74d(0x4)
0x758: v758(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x76d: v76d = AND v758(0xffffffffffffffffffffffffffffffffffffffff) v757
0x76f: v76f(0x20) = CONST 
0x771: v771(0x24) = ADD v76f(0x20) v74d(0x4)
0x777: v777 = CALLDATALOAD v771(0x24)
0x778: v778(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78d: v78d = AND v778(0xffffffffffffffffffffffffffffffffffffffff) v777
0x78f: v78f(0x20) = CONST 
0x791: v791(0x44) = ADD v78f(0x20) v771(0x24)
0x799: v799(0x16e1) = CONST 
0x79c: JUMP v799(0x16e1)
----------------------------------

Begin block 0x79d
prev = {'0x16e1'}, next = {}
----------------------------------
Block 0x79d
0x79e: v79e(0x40) = CONST 
0x7a0: v7a0 = MLOAD v79e(0x40)
0x7a4: MSTORE v7a0 v1760
0x7a5: v7a5(0x20) = CONST 
0x7a7: v7a7 = ADD v7a5(0x20) v7a0
0x7ab: v7ab(0x40) = CONST 
0x7ad: v7ad = MLOAD v7ab(0x40)
0x7b0: v7b0 = SUB v7a7 v7ad
0x7b2: RETURN v7ad v7b0
----------------------------------

Begin block 0x7b3
prev = {}, next = {'0x7bb', '0x7bf'}
----------------------------------
function safeAdd(uint256,uint256)()
Block 0x7b3
0x7b4: v7b4 = CALLVALUE 
0x7b6: v7b6 = ISZERO v7b4
0x7b7: v7b7(0x7bf) = CONST 
0x7ba: JUMPI v7b7(0x7bf) v7b6
----------------------------------

Begin block 0x7bb
prev = {'0x7b3'}, next = {}
----------------------------------
Block 0x7bb
0x7bb: v7bb(0x0) = CONST 
0x7be: REVERT v7bb(0x0) v7bb(0x0)
----------------------------------

Begin block 0x7bf
prev = {'0x7b3'}, next = {'0x7e8'}
----------------------------------
Block 0x7bf
0x7c1: v7c1(0x7e8) = CONST 
0x7c4: v7c4(0x4) = CONST 
0x7c7: v7c7 = CALLDATASIZE 
0x7c8: v7c8 = SUB v7c7 v7c4(0x4)
0x7ca: v7ca = ADD v7c4(0x4) v7c8
0x7ce: v7ce = CALLDATALOAD v7c4(0x4)
0x7d0: v7d0(0x20) = CONST 
0x7d2: v7d2(0x24) = ADD v7d0(0x20) v7c4(0x4)
0x7d8: v7d8 = CALLDATALOAD v7d2(0x24)
0x7da: v7da(0x20) = CONST 
0x7dc: v7dc(0x44) = ADD v7da(0x20) v7d2(0x24)
0x7e4: v7e4(0x1768) = CONST 
0x7e7: v7e7_0 = CALLPRIVATE v7e4(0x1768) v7d8 v7ce v7c1(0x7e8)
----------------------------------

Begin block 0x7e8
prev = {'0x7bf'}, next = {}
----------------------------------
Block 0x7e8
0x7e9: v7e9(0x40) = CONST 
0x7eb: v7eb = MLOAD v7e9(0x40)
0x7ef: MSTORE v7eb v7e7_0
0x7f0: v7f0(0x20) = CONST 
0x7f2: v7f2 = ADD v7f0(0x20) v7eb
0x7f6: v7f6(0x40) = CONST 
0x7f8: v7f8 = MLOAD v7f6(0x40)
0x7fb: v7fb = SUB v7f2 v7f8
0x7fd: RETURN v7f8 v7fb
----------------------------------

Begin block 0x7fe
prev = {}, next = {'0x806', '0x80a'}
----------------------------------
function transferOwnership(address)()
Block 0x7fe
0x7ff: v7ff = CALLVALUE 
0x801: v801 = ISZERO v7ff
0x802: v802(0x80a) = CONST 
0x805: JUMPI v802(0x80a) v801
----------------------------------

Begin block 0x806
prev = {'0x7fe'}, next = {}
----------------------------------
Block 0x806
0x806: v806(0x0) = CONST 
0x809: REVERT v806(0x0) v806(0x0)
----------------------------------

Begin block 0x80a
prev = {'0x7fe'}, next = {'0x1784'}
----------------------------------
Block 0x80a
0x80c: v80c(0x83f) = CONST 
0x80f: v80f(0x4) = CONST 
0x812: v812 = CALLDATASIZE 
0x813: v813 = SUB v812 v80f(0x4)
0x815: v815 = ADD v80f(0x4) v813
0x819: v819 = CALLDATALOAD v80f(0x4)
0x81a: v81a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82f: v82f = AND v81a(0xffffffffffffffffffffffffffffffffffffffff) v819
0x831: v831(0x20) = CONST 
0x833: v833(0x24) = ADD v831(0x20) v80f(0x4)
0x83b: v83b(0x1784) = CONST 
0x83e: JUMP v83b(0x1784)
----------------------------------

Begin block 0x83f
prev = {'0x17df'}, next = {}
----------------------------------
Block 0x83f
0x840: STOP 
----------------------------------

Begin block 0x841
prev = {'0x12e'}, next = {'0x8d7', '0x891'}
----------------------------------
Block 0x841
0x842: v842(0x3) = CONST 
0x845: v845 = SLOAD v842(0x3)
0x846: v846(0x1) = CONST 
0x849: v849(0x1) = CONST 
0x84b: v84b = AND v849(0x1) v845
0x84c: v84c = ISZERO v84b
0x84d: v84d(0x100) = CONST 
0x850: v850 = MUL v84d(0x100) v84c
0x851: v851 = SUB v850 v846(0x1)
0x852: v852 = AND v851 v845
0x853: v853(0x2) = CONST 
0x856: v856 = DIV v852 v853(0x2)
0x858: v858(0x1f) = CONST 
0x85a: v85a = ADD v858(0x1f) v856
0x85b: v85b(0x20) = CONST 
0x85f: v85f = DIV v85a v85b(0x20)
0x860: v860 = MUL v85f v85b(0x20)
0x861: v861(0x20) = CONST 
0x863: v863 = ADD v861(0x20) v860
0x864: v864(0x40) = CONST 
0x866: v866 = MLOAD v864(0x40)
0x869: v869 = ADD v866 v863
0x86a: v86a(0x40) = CONST 
0x86c: MSTORE v86a(0x40) v869
0x873: MSTORE v866 v856
0x874: v874(0x20) = CONST 
0x876: v876 = ADD v874(0x20) v866
0x879: v879 = SLOAD v842(0x3)
0x87a: v87a(0x1) = CONST 
0x87d: v87d(0x1) = CONST 
0x87f: v87f = AND v87d(0x1) v879
0x880: v880 = ISZERO v87f
0x881: v881(0x100) = CONST 
0x884: v884 = MUL v881(0x100) v880
0x885: v885 = SUB v884 v87a(0x1)
0x886: v886 = AND v885 v879
0x887: v887(0x2) = CONST 
0x88a: v88a = DIV v886 v887(0x2)
0x88c: v88c = ISZERO v88a
0x88d: v88d(0x8d7) = CONST 
0x890: JUMPI v88d(0x8d7) v88c
----------------------------------

Begin block 0x891
prev = {'0x841'}, next = {'0x899', '0x8ac'}
----------------------------------
Block 0x891
0x892: v892(0x1f) = CONST 
0x894: v894 = LT v892(0x1f) v88a
0x895: v895(0x8ac) = CONST 
0x898: JUMPI v895(0x8ac) v894
----------------------------------

Begin block 0x899
prev = {'0x891'}, next = {'0x8d7'}
----------------------------------
Block 0x899
0x899: v899(0x100) = CONST 
0x89e: v89e = SLOAD v842(0x3)
0x89f: v89f = DIV v89e v899(0x100)
0x8a0: v8a0 = MUL v89f v899(0x100)
0x8a2: MSTORE v876 v8a0
0x8a4: v8a4(0x20) = CONST 
0x8a6: v8a6 = ADD v8a4(0x20) v876
0x8a8: v8a8(0x8d7) = CONST 
0x8ab: JUMP v8a8(0x8d7)
----------------------------------

Begin block 0x8ac
prev = {'0x891'}, next = {'0x8ba'}
----------------------------------
Block 0x8ac
0x8ae: v8ae = ADD v876 v88a
0x8b1: v8b1(0x0) = CONST 
0x8b3: MSTORE v8b1(0x0) v842(0x3)
0x8b4: v8b4(0x20) = CONST 
0x8b6: v8b6(0x0) = CONST 
0x8b8: v8b8 = SHA3 v8b6(0x0) v8b4(0x20)
----------------------------------

Begin block 0x8ba
prev = {'0x8ac', '0x8ba'}, next = {'0x8ce', '0x8ba'}
----------------------------------
Block 0x8ba
0x8ba_0x0: v8ba_0 = PHI v876 v8c6
0x8ba_0x1: v8ba_1 = PHI v8b8 v8c2
0x8bc: v8bc = SLOAD v8ba_1
0x8be: MSTORE v8ba_0 v8bc
0x8c0: v8c0(0x1) = CONST 
0x8c2: v8c2 = ADD v8c0(0x1) v8ba_1
0x8c4: v8c4(0x20) = CONST 
0x8c6: v8c6 = ADD v8c4(0x20) v8ba_0
0x8c9: v8c9 = GT v8ae v8c6
0x8ca: v8ca(0x8ba) = CONST 
0x8cd: JUMPI v8ca(0x8ba) v8c9
----------------------------------

Begin block 0x8ce
prev = {'0x8ba'}, next = {'0x8d7'}
----------------------------------
Block 0x8ce
0x8d0: v8d0 = SUB v8c6 v8ae
0x8d1: v8d1(0x1f) = CONST 
0x8d3: v8d3 = AND v8d1(0x1f) v8d0
0x8d5: v8d5 = ADD v8ae v8d3
----------------------------------

Begin block 0x8d7
prev = {'0x8ce', '0x841', '0x899'}, next = {'0x137'}
----------------------------------
Block 0x8d7
0x8de: JUMP v130(0x137)
----------------------------------

Begin block 0x8df
prev = {'0x1be'}, next = {'0x1fd'}
----------------------------------
Block 0x8df
0x8e0: v8e0(0x0) = CONST 
0x8e3: v8e3(0x7) = CONST 
0x8e5: v8e5(0x0) = CONST 
0x8e7: v8e7 = CALLER 
0x8e8: v8e8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8fd: v8fd = AND v8e8(0xffffffffffffffffffffffffffffffffffffffff) v8e7
0x8fe: v8fe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x913: v913 = AND v8fe(0xffffffffffffffffffffffffffffffffffffffff) v8fd
0x915: MSTORE v8e5(0x0) v913
0x916: v916(0x20) = CONST 
0x918: v918(0x20) = ADD v916(0x20) v8e5(0x0)
0x91b: MSTORE v918(0x20) v8e3(0x7)
0x91c: v91c(0x20) = CONST 
0x91e: v91e(0x40) = ADD v91c(0x20) v918(0x20)
0x91f: v91f(0x0) = CONST 
0x921: v921 = SHA3 v91f(0x0) v91e(0x40)
0x922: v922(0x0) = CONST 
0x925: v925(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x93a: v93a = AND v925(0xffffffffffffffffffffffffffffffffffffffff) v1e3
0x93b: v93b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x950: v950 = AND v93b(0xffffffffffffffffffffffffffffffffffffffff) v93a
0x952: MSTORE v922(0x0) v950
0x953: v953(0x20) = CONST 
0x955: v955(0x20) = ADD v953(0x20) v922(0x0)
0x958: MSTORE v955(0x20) v921
0x959: v959(0x20) = CONST 
0x95b: v95b(0x40) = ADD v959(0x20) v955(0x20)
0x95c: v95c(0x0) = CONST 
0x95e: v95e = SHA3 v95c(0x0) v95b(0x40)
0x961: SSTORE v95e v1ed
0x964: v964(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x979: v979 = AND v964(0xffffffffffffffffffffffffffffffffffffffff) v1e3
0x97a: v97a = CALLER 
0x97b: v97b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x990: v990 = AND v97b(0xffffffffffffffffffffffffffffffffffffffff) v97a
0x991: v991(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x9b3: v9b3(0x40) = CONST 
0x9b5: v9b5 = MLOAD v9b3(0x40)
0x9b9: MSTORE v9b5 v1ed
0x9ba: v9ba(0x20) = CONST 
0x9bc: v9bc = ADD v9ba(0x20) v9b5
0x9c0: v9c0(0x40) = CONST 
0x9c2: v9c2 = MLOAD v9c0(0x40)
0x9c5: v9c5 = SUB v9bc v9c2
0x9c7: LOG3 v9c2 v9c5 v991(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v990 v979
0x9c8: v9c8(0x1) = CONST 
0x9d0: JUMP v1c0(0x1fd)
----------------------------------

Begin block 0x9d1
prev = {'0x223'}, next = {'0x22c'}
----------------------------------
Block 0x9d1
0x9d2: v9d2(0x0) = CONST 
0x9d4: v9d4(0x6) = CONST 
0x9d6: v9d6(0x0) = CONST 
0x9d9: v9d9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ee: v9ee(0x0) = AND v9d9(0xffffffffffffffffffffffffffffffffffffffff) v9d6(0x0)
0x9ef: v9ef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa04: va04(0x0) = AND v9ef(0xffffffffffffffffffffffffffffffffffffffff) v9ee(0x0)
0xa06: MSTORE v9d6(0x0) va04(0x0)
0xa07: va07(0x20) = CONST 
0xa09: va09(0x20) = ADD va07(0x20) v9d6(0x0)
0xa0c: MSTORE va09(0x20) v9d4(0x6)
0xa0d: va0d(0x20) = CONST 
0xa0f: va0f(0x40) = ADD va0d(0x20) va09(0x20)
0xa10: va10(0x0) = CONST 
0xa12: va12 = SHA3 va10(0x0) va0f(0x40)
0xa13: va13 = SLOAD va12
0xa14: va14(0x5) = CONST 
0xa16: va16 = SLOAD va14(0x5)
0xa17: va17 = SUB va16 va13
0xa1b: JUMP v225(0x22c)
----------------------------------

Begin block 0xa1c
prev = {'0x24e'}, next = {'0xa67'}
----------------------------------
Block 0xa1c
0xa1d: va1d(0x0) = CONST 
0xa1f: va1f(0xa67) = CONST 
0xa22: va22(0x6) = CONST 
0xa24: va24(0x0) = CONST 
0xa27: va27(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa3c: va3c = AND va27(0xffffffffffffffffffffffffffffffffffffffff) v273
0xa3d: va3d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa52: va52 = AND va3d(0xffffffffffffffffffffffffffffffffffffffff) va3c
0xa54: MSTORE va24(0x0) va52
0xa55: va55(0x20) = CONST 
0xa57: va57(0x20) = ADD va55(0x20) va24(0x0)
0xa5a: MSTORE va57(0x20) va22(0x6)
0xa5b: va5b(0x20) = CONST 
0xa5d: va5d(0x40) = ADD va5b(0x20) va57(0x20)
0xa5e: va5e(0x0) = CONST 
0xa60: va60 = SHA3 va5e(0x0) va5d(0x40)
0xa61: va61 = SLOAD va60
0xa63: va63(0x110e) = CONST 
0xa66: va66_0 = CALLPRIVATE va63(0x110e) v29d va61 va1f(0xa67)
----------------------------------

Begin block 0xa67
prev = {'0xa1c'}, next = {'0xb30'}
----------------------------------
Block 0xa67
0xa68: va68(0x6) = CONST 
0xa6a: va6a(0x0) = CONST 
0xa6d: va6d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa82: va82 = AND va6d(0xffffffffffffffffffffffffffffffffffffffff) v273
0xa83: va83(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa98: va98 = AND va83(0xffffffffffffffffffffffffffffffffffffffff) va82
0xa9a: MSTORE va6a(0x0) va98
0xa9b: va9b(0x20) = CONST 
0xa9d: va9d(0x20) = ADD va9b(0x20) va6a(0x0)
0xaa0: MSTORE va9d(0x20) va68(0x6)
0xaa1: vaa1(0x20) = CONST 
0xaa3: vaa3(0x40) = ADD vaa1(0x20) va9d(0x20)
0xaa4: vaa4(0x0) = CONST 
0xaa6: vaa6 = SHA3 vaa4(0x0) vaa3(0x40)
0xaa9: SSTORE vaa6 va66_0
0xaab: vaab(0xb30) = CONST 
0xaae: vaae(0x7) = CONST 
0xab0: vab0(0x0) = CONST 
0xab3: vab3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xac8: vac8 = AND vab3(0xffffffffffffffffffffffffffffffffffffffff) v273
0xac9: vac9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xade: vade = AND vac9(0xffffffffffffffffffffffffffffffffffffffff) vac8
0xae0: MSTORE vab0(0x0) vade
0xae1: vae1(0x20) = CONST 
0xae3: vae3(0x20) = ADD vae1(0x20) vab0(0x0)
0xae6: MSTORE vae3(0x20) vaae(0x7)
0xae7: vae7(0x20) = CONST 
0xae9: vae9(0x40) = ADD vae7(0x20) vae3(0x20)
0xaea: vaea(0x0) = CONST 
0xaec: vaec = SHA3 vaea(0x0) vae9(0x40)
0xaed: vaed(0x0) = CONST 
0xaef: vaef = CALLER 
0xaf0: vaf0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb05: vb05 = AND vaf0(0xffffffffffffffffffffffffffffffffffffffff) vaef
0xb06: vb06(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb1b: vb1b = AND vb06(0xffffffffffffffffffffffffffffffffffffffff) vb05
0xb1d: MSTORE vaed(0x0) vb1b
0xb1e: vb1e(0x20) = CONST 
0xb20: vb20(0x20) = ADD vb1e(0x20) vaed(0x0)
0xb23: MSTORE vb20(0x20) vaec
0xb24: vb24(0x20) = CONST 
0xb26: vb26(0x40) = ADD vb24(0x20) vb20(0x20)
0xb27: vb27(0x0) = CONST 
0xb29: vb29 = SHA3 vb27(0x0) vb26(0x40)
0xb2a: vb2a = SLOAD vb29
0xb2c: vb2c(0x110e) = CONST 
0xb2f: vb2f_0 = CALLPRIVATE vb2c(0x110e) v29d vb2a vaab(0xb30)
----------------------------------

Begin block 0xb30
prev = {'0xa67'}, next = {'0xbf9'}
----------------------------------
Block 0xb30
0xb31: vb31(0x7) = CONST 
0xb33: vb33(0x0) = CONST 
0xb36: vb36(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb4b: vb4b = AND vb36(0xffffffffffffffffffffffffffffffffffffffff) v273
0xb4c: vb4c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb61: vb61 = AND vb4c(0xffffffffffffffffffffffffffffffffffffffff) vb4b
0xb63: MSTORE vb33(0x0) vb61
0xb64: vb64(0x20) = CONST 
0xb66: vb66(0x20) = ADD vb64(0x20) vb33(0x0)
0xb69: MSTORE vb66(0x20) vb31(0x7)
0xb6a: vb6a(0x20) = CONST 
0xb6c: vb6c(0x40) = ADD vb6a(0x20) vb66(0x20)
0xb6d: vb6d(0x0) = CONST 
0xb6f: vb6f = SHA3 vb6d(0x0) vb6c(0x40)
0xb70: vb70(0x0) = CONST 
0xb72: vb72 = CALLER 
0xb73: vb73(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb88: vb88 = AND vb73(0xffffffffffffffffffffffffffffffffffffffff) vb72
0xb89: vb89(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb9e: vb9e = AND vb89(0xffffffffffffffffffffffffffffffffffffffff) vb88
0xba0: MSTORE vb70(0x0) vb9e
0xba1: vba1(0x20) = CONST 
0xba3: vba3(0x20) = ADD vba1(0x20) vb70(0x0)
0xba6: MSTORE vba3(0x20) vb6f
0xba7: vba7(0x20) = CONST 
0xba9: vba9(0x40) = ADD vba7(0x20) vba3(0x20)
0xbaa: vbaa(0x0) = CONST 
0xbac: vbac = SHA3 vbaa(0x0) vba9(0x40)
0xbaf: SSTORE vbac vb2f_0
0xbb1: vbb1(0xbf9) = CONST 
0xbb4: vbb4(0x6) = CONST 
0xbb6: vbb6(0x0) = CONST 
0xbb9: vbb9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbce: vbce = AND vbb9(0xffffffffffffffffffffffffffffffffffffffff) v293
0xbcf: vbcf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe4: vbe4 = AND vbcf(0xffffffffffffffffffffffffffffffffffffffff) vbce
0xbe6: MSTORE vbb6(0x0) vbe4
0xbe7: vbe7(0x20) = CONST 
0xbe9: vbe9(0x20) = ADD vbe7(0x20) vbb6(0x0)
0xbec: MSTORE vbe9(0x20) vbb4(0x6)
0xbed: vbed(0x20) = CONST 
0xbef: vbef(0x40) = ADD vbed(0x20) vbe9(0x20)
0xbf0: vbf0(0x0) = CONST 
0xbf2: vbf2 = SHA3 vbf0(0x0) vbef(0x40)
0xbf3: vbf3 = SLOAD vbf2
0xbf5: vbf5(0x1768) = CONST 
0xbf8: vbf8_0 = CALLPRIVATE vbf5(0x1768) v29d vbf3 vbb1(0xbf9)
----------------------------------

Begin block 0xbf9
prev = {'0xb30'}, next = {'0x2ad'}
----------------------------------
Block 0xbf9
0xbfa: vbfa(0x6) = CONST 
0xbfc: vbfc(0x0) = CONST 
0xbff: vbff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc14: vc14 = AND vbff(0xffffffffffffffffffffffffffffffffffffffff) v293
0xc15: vc15(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc2a: vc2a = AND vc15(0xffffffffffffffffffffffffffffffffffffffff) vc14
0xc2c: MSTORE vbfc(0x0) vc2a
0xc2d: vc2d(0x20) = CONST 
0xc2f: vc2f(0x20) = ADD vc2d(0x20) vbfc(0x0)
0xc32: MSTORE vc2f(0x20) vbfa(0x6)
0xc33: vc33(0x20) = CONST 
0xc35: vc35(0x40) = ADD vc33(0x20) vc2f(0x20)
0xc36: vc36(0x0) = CONST 
0xc38: vc38 = SHA3 vc36(0x0) vc35(0x40)
0xc3b: SSTORE vc38 vbf8_0
0xc3e: vc3e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc53: vc53 = AND vc3e(0xffffffffffffffffffffffffffffffffffffffff) v293
0xc55: vc55(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6a: vc6a = AND vc55(0xffffffffffffffffffffffffffffffffffffffff) v273
0xc6b: vc6b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xc8d: vc8d(0x40) = CONST 
0xc8f: vc8f = MLOAD vc8d(0x40)
0xc93: MSTORE vc8f v29d
0xc94: vc94(0x20) = CONST 
0xc96: vc96 = ADD vc94(0x20) vc8f
0xc9a: vc9a(0x40) = CONST 
0xc9c: vc9c = MLOAD vc9a(0x40)
0xc9f: vc9f = SUB vc96 vc9c
0xca1: LOG3 vc9c vc9f vc6b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vc6a vc53
0xca2: vca2(0x1) = CONST 
0xcab: JUMP v250(0x2ad)
----------------------------------

Begin block 0xcac
prev = {'0x2d3'}, next = {'0x2dc'}
----------------------------------
Block 0xcac
0xcad: vcad(0x4) = CONST 
0xcaf: vcaf(0x0) = CONST 
0xcb2: vcb2 = SLOAD vcad(0x4)
0xcb4: vcb4(0x100) = CONST 
0xcb7: vcb7(0x1) = EXP vcb4(0x100) vcaf(0x0)
0xcb9: vcb9 = DIV vcb2 vcb7(0x1)
0xcba: vcba(0xff) = CONST 
0xcbc: vcbc = AND vcba(0xff) vcb9
0xcbe: JUMP v2d5(0x2dc)
----------------------------------

Begin block 0xcbf
prev = {'0x304'}, next = {'0x30d'}
----------------------------------
Block 0xcbf
0xcc0: vcc0(0x5) = CONST 
0xcc2: vcc2 = SLOAD vcc0(0x5)
0xcc4: JUMP v306(0x30d)
----------------------------------

Begin block 0xcc5
prev = {'0x32f'}, next = {'0xd10'}
----------------------------------
Block 0xcc5
0xcc6: vcc6(0x40) = CONST 
0xcc9: vcc9 = MLOAD vcc6(0x40)
0xccc: vccc = ADD vcc9 vcc6(0x40)
0xccd: vccd(0x40) = CONST 
0xccf: MSTORE vccd(0x40) vccc
0xcd1: vcd1(0x3) = CONST 
0xcd4: MSTORE vcc9 vcd1(0x3)
0xcd5: vcd5(0x20) = CONST 
0xcd7: vcd7 = ADD vcd5(0x20) vcc9
0xcd8: vcd8(0x524c430000000000000000000000000000000000000000000000000000000000) = CONST 
0xcfa: MSTORE vcd7 vcd8(0x524c430000000000000000000000000000000000000000000000000000000000)
0xcfc: vcfc(0x2) = CONST 
0xd00: vd00 = MLOAD vcc9
0xd02: vd02(0x20) = CONST 
0xd04: vd04 = ADD vd02(0x20) vcc9
0xd06: vd06(0xd10) = CONST 
0xd0c: vd0c(0x1823) = CONST 
0xd0f: vd0f_0 = CALLPRIVATE vd0c(0x1823) vd00 vd04 vcfc(0x2) vd06(0xd10)
----------------------------------

Begin block 0xd10
prev = {'0xcc5'}, next = {'0xd5c'}
----------------------------------
Block 0xd10
0xd12: vd12(0x40) = CONST 
0xd15: vd15 = MLOAD vd12(0x40)
0xd18: vd18 = ADD vd15 vd12(0x40)
0xd19: vd19(0x40) = CONST 
0xd1b: MSTORE vd19(0x40) vd18
0xd1d: vd1d(0x8) = CONST 
0xd20: MSTORE vd15 vd1d(0x8)
0xd21: vd21(0x20) = CONST 
0xd23: vd23 = ADD vd21(0x20) vd15
0xd24: vd24(0x5265616c436f696e000000000000000000000000000000000000000000000000) = CONST 
0xd46: MSTORE vd23 vd24(0x5265616c436f696e000000000000000000000000000000000000000000000000)
0xd48: vd48(0x3) = CONST 
0xd4c: vd4c = MLOAD vd15
0xd4e: vd4e(0x20) = CONST 
0xd50: vd50 = ADD vd4e(0x20) vd15
0xd52: vd52(0xd5c) = CONST 
0xd58: vd58(0x1823) = CONST 
0xd5b: vd5b_0 = CALLPRIVATE vd58(0x1823) vd4c vd50 vd48(0x3) vd52(0xd5c)
----------------------------------

Begin block 0xd5c
prev = {'0xd10'}, next = {'0x338'}
----------------------------------
Block 0xd5c
0xd5e: vd5e(0x12) = CONST 
0xd60: vd60(0x4) = CONST 
0xd62: vd62(0x0) = CONST 
0xd64: vd64(0x100) = CONST 
0xd67: vd67(0x1) = EXP vd64(0x100) vd62(0x0)
0xd69: vd69 = SLOAD vd60(0x4)
0xd6b: vd6b(0xff) = CONST 
0xd6d: vd6d(0xff) = MUL vd6b(0xff) vd67(0x1)
0xd6e: vd6e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vd6d(0xff)
0xd6f: vd6f = AND vd6e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vd69
0xd72: vd72(0xff) = CONST 
0xd74: vd74(0x12) = AND vd72(0xff) vd5e(0x12)
0xd75: vd75(0x12) = MUL vd74(0x12) vd67(0x1)
0xd76: vd76 = OR vd75(0x12) vd6f
0xd78: SSTORE vd60(0x4) vd76
0xd7a: vd7a(0x52b7d2dcc80cd2e4000000) = CONST 
0xd86: vd86(0x5) = CONST 
0xd8a: SSTORE vd86(0x5) vd7a(0x52b7d2dcc80cd2e4000000)
0xd8c: vd8c(0x5) = CONST 
0xd8e: vd8e = SLOAD vd8c(0x5)
0xd8f: vd8f(0x6) = CONST 
0xd91: vd91(0x0) = CONST 
0xd93: vd93(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced) = CONST 
0xda8: vda8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdbd: vdbd(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced) = AND vda8(0xffffffffffffffffffffffffffffffffffffffff) vd93(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced)
0xdbe: vdbe(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdd3: vdd3(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced) = AND vdbe(0xffffffffffffffffffffffffffffffffffffffff) vdbd(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced)
0xdd5: MSTORE vd91(0x0) vdd3(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced)
0xdd6: vdd6(0x20) = CONST 
0xdd8: vdd8(0x20) = ADD vdd6(0x20) vd91(0x0)
0xddb: MSTORE vdd8(0x20) vd8f(0x6)
0xddc: vddc(0x20) = CONST 
0xdde: vdde(0x40) = ADD vddc(0x20) vdd8(0x20)
0xddf: vddf(0x0) = CONST 
0xde1: vde1 = SHA3 vddf(0x0) vdde(0x40)
0xde4: SSTORE vde1 vd8e
0xde6: vde6(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced) = CONST 
0xdfb: vdfb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe10: ve10(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced) = AND vdfb(0xffffffffffffffffffffffffffffffffffffffff) vde6(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced)
0xe11: ve11(0x0) = CONST 
0xe13: ve13(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe28: ve28(0x0) = AND ve13(0xffffffffffffffffffffffffffffffffffffffff) ve11(0x0)
0xe29: ve29(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xe4a: ve4a(0x5) = CONST 
0xe4c: ve4c = SLOAD ve4a(0x5)
0xe4d: ve4d(0x40) = CONST 
0xe4f: ve4f = MLOAD ve4d(0x40)
0xe53: MSTORE ve4f ve4c
0xe54: ve54(0x20) = CONST 
0xe56: ve56 = ADD ve54(0x20) ve4f
0xe5a: ve5a(0x40) = CONST 
0xe5c: ve5c = MLOAD ve5a(0x40)
0xe5f: ve5f = SUB ve56 ve5c
0xe61: LOG3 ve5c ve5f ve29(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) ve28(0x0) ve10(0xe4e868bcacd3d4bf6350c85d53e3f6f67a736ced)
0xe62: JUMP v331(0x338)
----------------------------------

Begin block 0xe63
prev = {'0x346'}, next = {'0x37b'}
----------------------------------
Block 0xe63
0xe64: ve64(0x0) = CONST 
0xe66: ve66(0x6) = CONST 
0xe68: ve68(0x0) = CONST 
0xe6b: ve6b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe80: ve80 = AND ve6b(0xffffffffffffffffffffffffffffffffffffffff) v36b
0xe81: ve81(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe96: ve96 = AND ve81(0xffffffffffffffffffffffffffffffffffffffff) ve80
0xe98: MSTORE ve68(0x0) ve96
0xe99: ve99(0x20) = CONST 
0xe9b: ve9b(0x20) = ADD ve99(0x20) ve68(0x0)
0xe9e: MSTORE ve9b(0x20) ve66(0x6)
0xe9f: ve9f(0x20) = CONST 
0xea1: vea1(0x40) = ADD ve9f(0x20) ve9b(0x20)
0xea2: vea2(0x0) = CONST 
0xea4: vea4 = SHA3 vea2(0x0) vea1(0x40)
0xea5: vea5 = SLOAD vea4
0xeab: JUMP v348(0x37b)
----------------------------------

Begin block 0xeac
prev = {'0x39d'}, next = {'0xf08', '0xf04'}
----------------------------------
Block 0xeac
0xead: vead(0x1) = CONST 
0xeaf: veaf(0x0) = CONST 
0xeb2: veb2 = SLOAD vead(0x1)
0xeb4: veb4(0x100) = CONST 
0xeb7: veb7(0x1) = EXP veb4(0x100) veaf(0x0)
0xeb9: veb9 = DIV veb2 veb7(0x1)
0xeba: veba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xecf: vecf = AND veba(0xffffffffffffffffffffffffffffffffffffffff) veb9
0xed0: ved0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xee5: vee5 = AND ved0(0xffffffffffffffffffffffffffffffffffffffff) vecf
0xee6: vee6 = CALLER 
0xee7: vee7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xefc: vefc = AND vee7(0xffffffffffffffffffffffffffffffffffffffff) vee6
0xefd: vefd = EQ vefc vee5
0xefe: vefe = ISZERO vefd
0xeff: veff = ISZERO vefe
0xf00: vf00(0xf08) = CONST 
0xf03: JUMPI vf00(0xf08) veff
----------------------------------

Begin block 0xf04
prev = {'0xeac'}, next = {}
----------------------------------
Block 0xf04
0xf04: vf04(0x0) = CONST 
0xf07: REVERT vf04(0x0) vf04(0x0)
----------------------------------

Begin block 0xf08
prev = {'0xeac'}, next = {'0x3a6'}
----------------------------------
Block 0xf08
0xf09: vf09(0x1) = CONST 
0xf0b: vf0b(0x0) = CONST 
0xf0e: vf0e = SLOAD vf09(0x1)
0xf10: vf10(0x100) = CONST 
0xf13: vf13(0x1) = EXP vf10(0x100) vf0b(0x0)
0xf15: vf15 = DIV vf0e vf13(0x1)
0xf16: vf16(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2b: vf2b = AND vf16(0xffffffffffffffffffffffffffffffffffffffff) vf15
0xf2c: vf2c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf41: vf41 = AND vf2c(0xffffffffffffffffffffffffffffffffffffffff) vf2b
0xf42: vf42(0x0) = CONST 
0xf46: vf46 = SLOAD vf42(0x0)
0xf48: vf48(0x100) = CONST 
0xf4b: vf4b(0x1) = EXP vf48(0x100) vf42(0x0)
0xf4d: vf4d = DIV vf46 vf4b(0x1)
0xf4e: vf4e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf63: vf63 = AND vf4e(0xffffffffffffffffffffffffffffffffffffffff) vf4d
0xf64: vf64(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf79: vf79 = AND vf64(0xffffffffffffffffffffffffffffffffffffffff) vf63
0xf7a: vf7a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xf9b: vf9b(0x40) = CONST 
0xf9d: vf9d = MLOAD vf9b(0x40)
0xf9e: vf9e(0x40) = CONST 
0xfa0: vfa0 = MLOAD vf9e(0x40)
0xfa3: vfa3 = SUB vf9d vfa0
0xfa5: LOG3 vfa0 vfa3 vf7a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vf79 vf41
0xfa6: vfa6(0x1) = CONST 
0xfa8: vfa8(0x0) = CONST 
0xfab: vfab = SLOAD vfa6(0x1)
0xfad: vfad(0x100) = CONST 
0xfb0: vfb0(0x1) = EXP vfad(0x100) vfa8(0x0)
0xfb2: vfb2 = DIV vfab vfb0(0x1)
0xfb3: vfb3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfc8: vfc8 = AND vfb3(0xffffffffffffffffffffffffffffffffffffffff) vfb2
0xfc9: vfc9(0x0) = CONST 
0xfcc: vfcc(0x100) = CONST 
0xfcf: vfcf(0x1) = EXP vfcc(0x100) vfc9(0x0)
0xfd1: vfd1 = SLOAD vfc9(0x0)
0xfd3: vfd3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfe8: vfe8(0xffffffffffffffffffffffffffffffffffffffff) = MUL vfd3(0xffffffffffffffffffffffffffffffffffffffff) vfcf(0x1)
0xfe9: vfe9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vfe8(0xffffffffffffffffffffffffffffffffffffffff)
0xfea: vfea = AND vfe9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vfd1
0xfed: vfed(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1002: v1002 = AND vfed(0xffffffffffffffffffffffffffffffffffffffff) vfc8
0x1003: v1003 = MUL v1002 vfcf(0x1)
0x1004: v1004 = OR v1003 vfea
0x1006: SSTORE vfc9(0x0) v1004
0x1008: v1008(0x0) = CONST 
0x100a: v100a(0x1) = CONST 
0x100c: v100c(0x0) = CONST 
0x100e: v100e(0x100) = CONST 
0x1011: v1011(0x1) = EXP v100e(0x100) v100c(0x0)
0x1013: v1013 = SLOAD v100a(0x1)
0x1015: v1015(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x102a: v102a(0xffffffffffffffffffffffffffffffffffffffff) = MUL v1015(0xffffffffffffffffffffffffffffffffffffffff) v1011(0x1)
0x102b: v102b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v102a(0xffffffffffffffffffffffffffffffffffffffff)
0x102c: v102c = AND v102b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v1013
0x102f: v102f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1044: v1044(0x0) = AND v102f(0xffffffffffffffffffffffffffffffffffffffff) v1008(0x0)
0x1045: v1045(0x0) = MUL v1044(0x0) v1011(0x1)
0x1046: v1046 = OR v1045(0x0) v102c
0x1048: SSTORE v100a(0x1) v1046
0x104a: JUMP v39f(0x3a6)
----------------------------------

Begin block 0x104b
prev = {'0x3b4'}, next = {'0x3bd'}
----------------------------------
Block 0x104b
0x104c: v104c(0x0) = CONST 
0x1050: v1050 = SLOAD v104c(0x0)
0x1052: v1052(0x100) = CONST 
0x1055: v1055(0x1) = EXP v1052(0x100) v104c(0x0)
0x1057: v1057 = DIV v1050 v1055(0x1)
0x1058: v1058(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x106d: v106d = AND v1058(0xffffffffffffffffffffffffffffffffffffffff) v1057
0x106f: JUMP v3b6(0x3bd)
----------------------------------

Begin block 0x1070
prev = {'0x40b'}, next = {'0x1106', '0x10c0'}
----------------------------------
Block 0x1070
0x1071: v1071(0x2) = CONST 
0x1074: v1074 = SLOAD v1071(0x2)
0x1075: v1075(0x1) = CONST 
0x1078: v1078(0x1) = CONST 
0x107a: v107a = AND v1078(0x1) v1074
0x107b: v107b = ISZERO v107a
0x107c: v107c(0x100) = CONST 
0x107f: v107f = MUL v107c(0x100) v107b
0x1080: v1080 = SUB v107f v1075(0x1)
0x1081: v1081 = AND v1080 v1074
0x1082: v1082(0x2) = CONST 
0x1085: v1085 = DIV v1081 v1082(0x2)
0x1087: v1087(0x1f) = CONST 
0x1089: v1089 = ADD v1087(0x1f) v1085
0x108a: v108a(0x20) = CONST 
0x108e: v108e = DIV v1089 v108a(0x20)
0x108f: v108f = MUL v108e v108a(0x20)
0x1090: v1090(0x20) = CONST 
0x1092: v1092 = ADD v1090(0x20) v108f
0x1093: v1093(0x40) = CONST 
0x1095: v1095 = MLOAD v1093(0x40)
0x1098: v1098 = ADD v1095 v1092
0x1099: v1099(0x40) = CONST 
0x109b: MSTORE v1099(0x40) v1098
0x10a2: MSTORE v1095 v1085
0x10a3: v10a3(0x20) = CONST 
0x10a5: v10a5 = ADD v10a3(0x20) v1095
0x10a8: v10a8 = SLOAD v1071(0x2)
0x10a9: v10a9(0x1) = CONST 
0x10ac: v10ac(0x1) = CONST 
0x10ae: v10ae = AND v10ac(0x1) v10a8
0x10af: v10af = ISZERO v10ae
0x10b0: v10b0(0x100) = CONST 
0x10b3: v10b3 = MUL v10b0(0x100) v10af
0x10b4: v10b4 = SUB v10b3 v10a9(0x1)
0x10b5: v10b5 = AND v10b4 v10a8
0x10b6: v10b6(0x2) = CONST 
0x10b9: v10b9 = DIV v10b5 v10b6(0x2)
0x10bb: v10bb = ISZERO v10b9
0x10bc: v10bc(0x1106) = CONST 
0x10bf: JUMPI v10bc(0x1106) v10bb
----------------------------------

Begin block 0x10c0
prev = {'0x1070'}, next = {'0x10c8', '0x10db'}
----------------------------------
Block 0x10c0
0x10c1: v10c1(0x1f) = CONST 
0x10c3: v10c3 = LT v10c1(0x1f) v10b9
0x10c4: v10c4(0x10db) = CONST 
0x10c7: JUMPI v10c4(0x10db) v10c3
----------------------------------

Begin block 0x10c8
prev = {'0x10c0'}, next = {'0x1106'}
----------------------------------
Block 0x10c8
0x10c8: v10c8(0x100) = CONST 
0x10cd: v10cd = SLOAD v1071(0x2)
0x10ce: v10ce = DIV v10cd v10c8(0x100)
0x10cf: v10cf = MUL v10ce v10c8(0x100)
0x10d1: MSTORE v10a5 v10cf
0x10d3: v10d3(0x20) = CONST 
0x10d5: v10d5 = ADD v10d3(0x20) v10a5
0x10d7: v10d7(0x1106) = CONST 
0x10da: JUMP v10d7(0x1106)
----------------------------------

Begin block 0x10db
prev = {'0x10c0'}, next = {'0x10e9'}
----------------------------------
Block 0x10db
0x10dd: v10dd = ADD v10a5 v10b9
0x10e0: v10e0(0x0) = CONST 
0x10e2: MSTORE v10e0(0x0) v1071(0x2)
0x10e3: v10e3(0x20) = CONST 
0x10e5: v10e5(0x0) = CONST 
0x10e7: v10e7 = SHA3 v10e5(0x0) v10e3(0x20)
----------------------------------

Begin block 0x10e9
prev = {'0x10db', '0x10e9'}, next = {'0x10fd', '0x10e9'}
----------------------------------
Block 0x10e9
0x10e9_0x0: v10e9_0 = PHI v10a5 v10f5
0x10e9_0x1: v10e9_1 = PHI v10e7 v10f1
0x10eb: v10eb = SLOAD v10e9_1
0x10ed: MSTORE v10e9_0 v10eb
0x10ef: v10ef(0x1) = CONST 
0x10f1: v10f1 = ADD v10ef(0x1) v10e9_1
0x10f3: v10f3(0x20) = CONST 
0x10f5: v10f5 = ADD v10f3(0x20) v10e9_0
0x10f8: v10f8 = GT v10dd v10f5
0x10f9: v10f9(0x10e9) = CONST 
0x10fc: JUMPI v10f9(0x10e9) v10f8
----------------------------------

Begin block 0x10fd
prev = {'0x10e9'}, next = {'0x1106'}
----------------------------------
Block 0x10fd
0x10ff: v10ff = SUB v10f5 v10dd
0x1100: v1100(0x1f) = CONST 
0x1102: v1102 = AND v1100(0x1f) v10ff
0x1104: v1104 = ADD v10dd v1102
----------------------------------

Begin block 0x1106
prev = {'0x10c8', '0x10fd', '0x1070'}, next = {'0x414'}
----------------------------------
Block 0x1106
0x110d: JUMP v40d(0x414)
----------------------------------

Begin block 0x110e
prev = {}, next = {'0x111b', '0x111f'}
----------------------------------
function 0x110e(v110earg0, v110earg1, v110earg2)
Block 0x110e
0x110f: v110f(0x0) = CONST 
0x1113: v1113 = GT v110earg0 v110earg1
0x1114: v1114 = ISZERO v1113
0x1115: v1115 = ISZERO v1114
0x1116: v1116 = ISZERO v1115
0x1117: v1117(0x111f) = CONST 
0x111a: JUMPI v1117(0x111f) v1116
----------------------------------

Begin block 0x111b
prev = {'0x110e'}, next = {}
----------------------------------
Block 0x111b
0x111b: v111b(0x0) = CONST 
0x111e: REVERT v111b(0x0) v111b(0x0)
----------------------------------

Begin block 0x111f
prev = {'0x110e'}, next = {}
----------------------------------
Block 0x111f
0x1122: v1122 = SUB v110earg1 v110earg0
0x1129: RETURNPRIVATE v110earg2 v1122
----------------------------------

Begin block 0x112a
prev = {'0x4e6'}, next = {'0x1175'}
----------------------------------
Block 0x112a
0x112b: v112b(0x0) = CONST 
0x112d: v112d(0x1175) = CONST 
0x1130: v1130(0x6) = CONST 
0x1132: v1132(0x0) = CONST 
0x1134: v1134 = CALLER 
0x1135: v1135(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x114a: v114a = AND v1135(0xffffffffffffffffffffffffffffffffffffffff) v1134
0x114b: v114b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1160: v1160 = AND v114b(0xffffffffffffffffffffffffffffffffffffffff) v114a
0x1162: MSTORE v1132(0x0) v1160
0x1163: v1163(0x20) = CONST 
0x1165: v1165(0x20) = ADD v1163(0x20) v1132(0x0)
0x1168: MSTORE v1165(0x20) v1130(0x6)
0x1169: v1169(0x20) = CONST 
0x116b: v116b(0x40) = ADD v1169(0x20) v1165(0x20)
0x116c: v116c(0x0) = CONST 
0x116e: v116e = SHA3 v116c(0x0) v116b(0x40)
0x116f: v116f = SLOAD v116e
0x1171: v1171(0x110e) = CONST 
0x1174: v1174_0 = CALLPRIVATE v1171(0x110e) v515 v116f v112d(0x1175)
----------------------------------

Begin block 0x1175
prev = {'0x112a'}, next = {'0x1201'}
----------------------------------
Block 0x1175
0x1176: v1176(0x6) = CONST 
0x1178: v1178(0x0) = CONST 
0x117a: v117a = CALLER 
0x117b: v117b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1190: v1190 = AND v117b(0xffffffffffffffffffffffffffffffffffffffff) v117a
0x1191: v1191(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11a6: v11a6 = AND v1191(0xffffffffffffffffffffffffffffffffffffffff) v1190
0x11a8: MSTORE v1178(0x0) v11a6
0x11a9: v11a9(0x20) = CONST 
0x11ab: v11ab(0x20) = ADD v11a9(0x20) v1178(0x0)
0x11ae: MSTORE v11ab(0x20) v1176(0x6)
0x11af: v11af(0x20) = CONST 
0x11b1: v11b1(0x40) = ADD v11af(0x20) v11ab(0x20)
0x11b2: v11b2(0x0) = CONST 
0x11b4: v11b4 = SHA3 v11b2(0x0) v11b1(0x40)
0x11b7: SSTORE v11b4 v1174_0
0x11b9: v11b9(0x1201) = CONST 
0x11bc: v11bc(0x6) = CONST 
0x11be: v11be(0x0) = CONST 
0x11c1: v11c1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11d6: v11d6 = AND v11c1(0xffffffffffffffffffffffffffffffffffffffff) v50b
0x11d7: v11d7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11ec: v11ec = AND v11d7(0xffffffffffffffffffffffffffffffffffffffff) v11d6
0x11ee: MSTORE v11be(0x0) v11ec
0x11ef: v11ef(0x20) = CONST 
0x11f1: v11f1(0x20) = ADD v11ef(0x20) v11be(0x0)
0x11f4: MSTORE v11f1(0x20) v11bc(0x6)
0x11f5: v11f5(0x20) = CONST 
0x11f7: v11f7(0x40) = ADD v11f5(0x20) v11f1(0x20)
0x11f8: v11f8(0x0) = CONST 
0x11fa: v11fa = SHA3 v11f8(0x0) v11f7(0x40)
0x11fb: v11fb = SLOAD v11fa
0x11fd: v11fd(0x1768) = CONST 
0x1200: v1200_0 = CALLPRIVATE v11fd(0x1768) v515 v11fb v11b9(0x1201)
----------------------------------

Begin block 0x1201
prev = {'0x1175'}, next = {'0x525'}
----------------------------------
Block 0x1201
0x1202: v1202(0x6) = CONST 
0x1204: v1204(0x0) = CONST 
0x1207: v1207(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x121c: v121c = AND v1207(0xffffffffffffffffffffffffffffffffffffffff) v50b
0x121d: v121d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1232: v1232 = AND v121d(0xffffffffffffffffffffffffffffffffffffffff) v121c
0x1234: MSTORE v1204(0x0) v1232
0x1235: v1235(0x20) = CONST 
0x1237: v1237(0x20) = ADD v1235(0x20) v1204(0x0)
0x123a: MSTORE v1237(0x20) v1202(0x6)
0x123b: v123b(0x20) = CONST 
0x123d: v123d(0x40) = ADD v123b(0x20) v1237(0x20)
0x123e: v123e(0x0) = CONST 
0x1240: v1240 = SHA3 v123e(0x0) v123d(0x40)
0x1243: SSTORE v1240 v1200_0
0x1246: v1246(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x125b: v125b = AND v1246(0xffffffffffffffffffffffffffffffffffffffff) v50b
0x125c: v125c = CALLER 
0x125d: v125d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1272: v1272 = AND v125d(0xffffffffffffffffffffffffffffffffffffffff) v125c
0x1273: v1273(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1295: v1295(0x40) = CONST 
0x1297: v1297 = MLOAD v1295(0x40)
0x129b: MSTORE v1297 v515
0x129c: v129c(0x20) = CONST 
0x129e: v129e = ADD v129c(0x20) v1297
0x12a2: v12a2(0x40) = CONST 
0x12a4: v12a4 = MLOAD v12a2(0x40)
0x12a7: v12a7 = SUB v129e v12a4
0x12a9: LOG3 v12a4 v12a7 v1273(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1272 v125b
0x12aa: v12aa(0x1) = CONST 
0x12b2: JUMP v4e8(0x525)
----------------------------------

Begin block 0x12b3
prev = {'0x54b'}, next = {'0x12bf', '0x12c3'}
----------------------------------
Block 0x12b3
0x12b4: v12b4(0x0) = CONST 
0x12b8: v12b8 = GT v564 v12b4(0x0)
0x12b9: v12b9 = ISZERO v12b8
0x12ba: v12ba = ISZERO v12b9
0x12bb: v12bb(0x12c3) = CONST 
0x12be: JUMPI v12bb(0x12c3) v12ba
----------------------------------

Begin block 0x12bf
prev = {'0x12b3'}, next = {}
----------------------------------
Block 0x12bf
0x12bf: v12bf(0x0) = CONST 
0x12c2: REVERT v12bf(0x0) v12bf(0x0)
----------------------------------

Begin block 0x12c3
prev = {'0x12b3'}, next = {'0x12cd', '0x12ce'}
----------------------------------
Block 0x12c3
0x12c7: v12c7 = ISZERO v564
0x12c8: v12c8 = ISZERO v12c7
0x12c9: v12c9(0x12ce) = CONST 
0x12cc: JUMPI v12c9(0x12ce) v12c8
----------------------------------

Begin block 0x12cd
prev = {'0x12c3'}, next = {}
----------------------------------
Block 0x12cd
0x12cd: THROW 
----------------------------------

Begin block 0x12ce
prev = {'0x12c3'}, next = {'0x574'}
----------------------------------
Block 0x12ce
0x12cf: v12cf = DIV v55a v564
0x12d6: JUMP v54d(0x574)
----------------------------------

Begin block 0x12d7
prev = {'0x596'}, next = {'0x1499'}
----------------------------------
Block 0x12d7
0x12d8: v12d8(0x0) = CONST 
0x12db: v12db(0x7) = CONST 
0x12dd: v12dd(0x0) = CONST 
0x12df: v12df = CALLER 
0x12e0: v12e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x12f5: v12f5 = AND v12e0(0xffffffffffffffffffffffffffffffffffffffff) v12df
0x12f6: v12f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x130b: v130b = AND v12f6(0xffffffffffffffffffffffffffffffffffffffff) v12f5
0x130d: MSTORE v12dd(0x0) v130b
0x130e: v130e(0x20) = CONST 
0x1310: v1310(0x20) = ADD v130e(0x20) v12dd(0x0)
0x1313: MSTORE v1310(0x20) v12db(0x7)
0x1314: v1314(0x20) = CONST 
0x1316: v1316(0x40) = ADD v1314(0x20) v1310(0x20)
0x1317: v1317(0x0) = CONST 
0x1319: v1319 = SHA3 v1317(0x0) v1316(0x40)
0x131a: v131a(0x0) = CONST 
0x131d: v131d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1332: v1332 = AND v131d(0xffffffffffffffffffffffffffffffffffffffff) v5bb
0x1333: v1333(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1348: v1348 = AND v1333(0xffffffffffffffffffffffffffffffffffffffff) v1332
0x134a: MSTORE v131a(0x0) v1348
0x134b: v134b(0x20) = CONST 
0x134d: v134d(0x20) = ADD v134b(0x20) v131a(0x0)
0x1350: MSTORE v134d(0x20) v1319
0x1351: v1351(0x20) = CONST 
0x1353: v1353(0x40) = ADD v1351(0x20) v134d(0x20)
0x1354: v1354(0x0) = CONST 
0x1356: v1356 = SHA3 v1354(0x0) v1353(0x40)
0x1359: SSTORE v1356 v5c5
0x135c: v135c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1371: v1371 = AND v135c(0xffffffffffffffffffffffffffffffffffffffff) v5bb
0x1372: v1372 = CALLER 
0x1373: v1373(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1388: v1388 = AND v1373(0xffffffffffffffffffffffffffffffffffffffff) v1372
0x1389: v1389(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x13ab: v13ab(0x40) = CONST 
0x13ad: v13ad = MLOAD v13ab(0x40)
0x13b1: MSTORE v13ad v5c5
0x13b2: v13b2(0x20) = CONST 
0x13b4: v13b4 = ADD v13b2(0x20) v13ad
0x13b8: v13b8(0x40) = CONST 
0x13ba: v13ba = MLOAD v13b8(0x40)
0x13bd: v13bd = SUB v13b4 v13ba
0x13bf: LOG3 v13ba v13bd v1389(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v1388 v1371
0x13c1: v13c1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13d6: v13d6 = AND v13c1(0xffffffffffffffffffffffffffffffffffffffff) v5bb
0x13d7: v13d7(0x8f4ffcb1) = CONST 
0x13dc: v13dc = CALLER 
0x13de: v13de = ADDRESS 
0x13e0: v13e0(0x40) = CONST 
0x13e2: v13e2 = MLOAD v13e0(0x40)
0x13e4: v13e4(0xffffffff) = CONST 
0x13e9: v13e9(0x8f4ffcb1) = AND v13e4(0xffffffff) v13d7(0x8f4ffcb1)
0x13ea: v13ea(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x1408: v1408(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v13ea(0x100000000000000000000000000000000000000000000000000000000) v13e9(0x8f4ffcb1)
0x140a: MSTORE v13e2 v1408(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x140b: v140b(0x4) = CONST 
0x140d: v140d = ADD v140b(0x4) v13e2
0x1410: v1410(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1425: v1425 = AND v1410(0xffffffffffffffffffffffffffffffffffffffff) v13dc
0x1426: v1426(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x143b: v143b = AND v1426(0xffffffffffffffffffffffffffffffffffffffff) v1425
0x143d: MSTORE v140d v143b
0x143e: v143e(0x20) = CONST 
0x1440: v1440 = ADD v143e(0x20) v140d
0x1443: MSTORE v1440 v5c5
0x1444: v1444(0x20) = CONST 
0x1446: v1446 = ADD v1444(0x20) v1440
0x1448: v1448(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x145d: v145d = AND v1448(0xffffffffffffffffffffffffffffffffffffffff) v13de
0x145e: v145e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1473: v1473 = AND v145e(0xffffffffffffffffffffffffffffffffffffffff) v145d
0x1475: MSTORE v1446 v1473
0x1476: v1476(0x20) = CONST 
0x1478: v1478 = ADD v1476(0x20) v1446
0x147a: v147a(0x20) = CONST 
0x147c: v147c = ADD v147a(0x20) v1478
0x147f: v147f = SUB v147c v140d
0x1481: MSTORE v1478 v147f
0x1485: v1485 = MLOAD v5ee
0x1487: MSTORE v147c v1485
0x1488: v1488(0x20) = CONST 
0x148a: v148a = ADD v1488(0x20) v147c
0x148e: v148e = MLOAD v5ee
0x1490: v1490(0x20) = CONST 
0x1492: v1492 = ADD v1490(0x20) v5ee
0x1497: v1497(0x0) = CONST 
----------------------------------

Begin block 0x1499
prev = {'0x14a2', '0x12d7'}, next = {'0x14a2', '0x14b4'}
----------------------------------
Block 0x1499
0x1499_0x0: v1499_0 = PHI v1497(0x0) v14ad
0x149c: v149c = LT v1499_0 v148e
0x149d: v149d = ISZERO v149c
0x149e: v149e(0x14b4) = CONST 
0x14a1: JUMPI v149e(0x14b4) v149d
----------------------------------

Begin block 0x14a2
prev = {'0x1499'}, next = {'0x1499'}
----------------------------------
Block 0x14a2
0x14a2_0x0: v14a2_0 = PHI v1497(0x0) v14ad
0x14a4: v14a4 = ADD v1492 v14a2_0
0x14a5: v14a5 = MLOAD v14a4
0x14a8: v14a8 = ADD v148a v14a2_0
0x14a9: MSTORE v14a8 v14a5
0x14aa: v14aa(0x20) = CONST 
0x14ad: v14ad = ADD v14a2_0 v14aa(0x20)
0x14b0: v14b0(0x1499) = CONST 
0x14b3: JUMP v14b0(0x1499)
----------------------------------

Begin block 0x14b4
prev = {'0x1499'}, next = {'0x14e1', '0x14c8'}
----------------------------------
Block 0x14b4
0x14bd: v14bd = ADD v148e v148a
0x14bf: v14bf(0x1f) = CONST 
0x14c1: v14c1 = AND v14bf(0x1f) v148e
0x14c3: v14c3 = ISZERO v14c1
0x14c4: v14c4(0x14e1) = CONST 
0x14c7: JUMPI v14c4(0x14e1) v14c3
----------------------------------

Begin block 0x14c8
prev = {'0x14b4'}, next = {'0x14e1'}
----------------------------------
Block 0x14c8
0x14ca: v14ca = SUB v14bd v14c1
0x14cc: v14cc = MLOAD v14ca
0x14cd: v14cd(0x1) = CONST 
0x14d0: v14d0(0x20) = CONST 
0x14d2: v14d2 = SUB v14d0(0x20) v14c1
0x14d3: v14d3(0x100) = CONST 
0x14d6: v14d6 = EXP v14d3(0x100) v14d2
0x14d7: v14d7 = SUB v14d6 v14cd(0x1)
0x14d8: v14d8 = NOT v14d7
0x14d9: v14d9 = AND v14d8 v14cc
0x14db: MSTORE v14ca v14d9
0x14dc: v14dc(0x20) = CONST 
0x14de: v14de = ADD v14dc(0x20) v14ca
----------------------------------

Begin block 0x14e1
prev = {'0x14b4', '0x14c8'}, next = {'0x1503', '0x14ff'}
----------------------------------
Block 0x14e1
0x14e1_0x1: v14e1_1 = PHI v14bd v14de
0x14ea: v14ea(0x0) = CONST 
0x14ec: v14ec(0x40) = CONST 
0x14ee: v14ee = MLOAD v14ec(0x40)
0x14f1: v14f1 = SUB v14e1_1 v14ee
0x14f3: v14f3(0x0) = CONST 
0x14f7: v14f7 = EXTCODESIZE v13d6
0x14f8: v14f8 = ISZERO v14f7
0x14fa: v14fa = ISZERO v14f8
0x14fb: v14fb(0x1503) = CONST 
0x14fe: JUMPI v14fb(0x1503) v14fa
----------------------------------

Begin block 0x14ff
prev = {'0x14e1'}, next = {}
----------------------------------
Block 0x14ff
0x14ff: v14ff(0x0) = CONST 
0x1502: REVERT v14ff(0x0) v14ff(0x0)
----------------------------------

Begin block 0x1503
prev = {'0x14e1'}, next = {'0x150e', '0x1517'}
----------------------------------
Block 0x1503
0x1505: v1505 = GAS 
0x1506: v1506 = CALL v1505 v13d6 v14f3(0x0) v14ee v14f1 v14ee v14ea(0x0)
0x1507: v1507 = ISZERO v1506
0x1509: v1509 = ISZERO v1507
0x150a: v150a(0x1517) = CONST 
0x150d: JUMPI v150a(0x1517) v1509
----------------------------------

Begin block 0x150e
prev = {'0x1503'}, next = {}
----------------------------------
Block 0x150e
0x150e: v150e = RETURNDATASIZE 
0x150f: v150f(0x0) = CONST 
0x1512: RETURNDATACOPY v150f(0x0) v150f(0x0) v150e
0x1513: v1513 = RETURNDATASIZE 
0x1514: v1514(0x0) = CONST 
0x1516: REVERT v1514(0x0) v1513
----------------------------------

Begin block 0x1517
prev = {'0x1503'}, next = {'0x61b'}
----------------------------------
Block 0x1517
0x151c: v151c(0x1) = CONST 
0x1525: JUMP v598(0x61b)
----------------------------------

Begin block 0x1526
prev = {'0x641'}, next = {'0x1537', '0x1546'}
----------------------------------
Block 0x1526
0x1527: v1527(0x0) = CONST 
0x152b: v152b = MUL v650 v65a
0x152e: v152e(0x0) = CONST 
0x1531: v1531 = EQ v650 v152e(0x0)
0x1533: v1533(0x1546) = CONST 
0x1536: JUMPI v1533(0x1546) v1531
----------------------------------

Begin block 0x1537
prev = {'0x1526'}, next = {'0x1543', '0x1542'}
----------------------------------
Block 0x1537
0x153c: v153c = ISZERO v650
0x153d: v153d = ISZERO v153c
0x153e: v153e(0x1543) = CONST 
0x1541: JUMPI v153e(0x1543) v153d
----------------------------------

Begin block 0x1542
prev = {'0x1537'}, next = {}
----------------------------------
Block 0x1542
0x1542: THROW 
----------------------------------

Begin block 0x1543
prev = {'0x1537'}, next = {'0x1546'}
----------------------------------
Block 0x1543
0x1544: v1544 = DIV v152b v650
0x1545: v1545 = EQ v1544 v65a
----------------------------------

Begin block 0x1546
prev = {'0x1526', '0x1543'}, next = {'0x1551', '0x154d'}
----------------------------------
Block 0x1546
0x1546_0x0: v1546_0 = PHI v1531 v1545
0x1547: v1547 = ISZERO v1546_0
0x1548: v1548 = ISZERO v1547
0x1549: v1549(0x1551) = CONST 
0x154c: JUMPI v1549(0x1551) v1548
----------------------------------

Begin block 0x154d
prev = {'0x1546'}, next = {}
----------------------------------
Block 0x154d
0x154d: v154d(0x0) = CONST 
0x1550: REVERT v154d(0x0) v154d(0x0)
----------------------------------

Begin block 0x1551
prev = {'0x1546'}, next = {'0x66a'}
----------------------------------
Block 0x1551
0x1556: JUMP v643(0x66a)
----------------------------------

Begin block 0x1557
prev = {'0x68c'}, next = {'0x695'}
----------------------------------
Block 0x1557
0x1558: v1558(0x1) = CONST 
0x155a: v155a(0x0) = CONST 
0x155d: v155d = SLOAD v1558(0x1)
0x155f: v155f(0x100) = CONST 
0x1562: v1562(0x1) = EXP v155f(0x100) v155a(0x0)
0x1564: v1564 = DIV v155d v1562(0x1)
0x1565: v1565(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x157a: v157a = AND v1565(0xffffffffffffffffffffffffffffffffffffffff) v1564
0x157c: JUMP v68e(0x695)
----------------------------------

Begin block 0x157d
prev = {'0x6e3'}, next = {'0x15da', '0x15d6'}
----------------------------------
Block 0x157d
0x157e: v157e(0x0) = CONST 
0x1581: v1581(0x0) = CONST 
0x1584: v1584 = SLOAD v157e(0x0)
0x1586: v1586(0x100) = CONST 
0x1589: v1589(0x1) = EXP v1586(0x100) v1581(0x0)
0x158b: v158b = DIV v1584 v1589(0x1)
0x158c: v158c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15a1: v15a1 = AND v158c(0xffffffffffffffffffffffffffffffffffffffff) v158b
0x15a2: v15a2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15b7: v15b7 = AND v15a2(0xffffffffffffffffffffffffffffffffffffffff) v15a1
0x15b8: v15b8 = CALLER 
0x15b9: v15b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15ce: v15ce = AND v15b9(0xffffffffffffffffffffffffffffffffffffffff) v15b8
0x15cf: v15cf = EQ v15ce v15b7
0x15d0: v15d0 = ISZERO v15cf
0x15d1: v15d1 = ISZERO v15d0
0x15d2: v15d2(0x15da) = CONST 
0x15d5: JUMPI v15d2(0x15da) v15d1
----------------------------------

Begin block 0x15d6
prev = {'0x157d'}, next = {}
----------------------------------
Block 0x15d6
0x15d6: v15d6(0x0) = CONST 
0x15d9: REVERT v15d6(0x0) v15d6(0x0)
----------------------------------

Begin block 0x15da
prev = {'0x157d'}, next = {'0x169a', '0x169e'}
----------------------------------
Block 0x15da
0x15dc: v15dc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15f1: v15f1 = AND v15dc(0xffffffffffffffffffffffffffffffffffffffff) v708
0x15f2: v15f2(0xa9059cbb) = CONST 
0x15f7: v15f7(0x0) = CONST 
0x15fb: v15fb = SLOAD v15f7(0x0)
0x15fd: v15fd(0x100) = CONST 
0x1600: v1600(0x1) = EXP v15fd(0x100) v15f7(0x0)
0x1602: v1602 = DIV v15fb v1600(0x1)
0x1603: v1603(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1618: v1618 = AND v1603(0xffffffffffffffffffffffffffffffffffffffff) v1602
0x161a: v161a(0x40) = CONST 
0x161c: v161c = MLOAD v161a(0x40)
0x161e: v161e(0xffffffff) = CONST 
0x1623: v1623(0xa9059cbb) = AND v161e(0xffffffff) v15f2(0xa9059cbb)
0x1624: v1624(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x1642: v1642(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = MUL v1624(0x100000000000000000000000000000000000000000000000000000000) v1623(0xa9059cbb)
0x1644: MSTORE v161c v1642(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x1645: v1645(0x4) = CONST 
0x1647: v1647 = ADD v1645(0x4) v161c
0x164a: v164a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x165f: v165f = AND v164a(0xffffffffffffffffffffffffffffffffffffffff) v1618
0x1660: v1660(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1675: v1675 = AND v1660(0xffffffffffffffffffffffffffffffffffffffff) v165f
0x1677: MSTORE v1647 v1675
0x1678: v1678(0x20) = CONST 
0x167a: v167a = ADD v1678(0x20) v1647
0x167d: MSTORE v167a v712
0x167e: v167e(0x20) = CONST 
0x1680: v1680 = ADD v167e(0x20) v167a
0x1685: v1685(0x20) = CONST 
0x1687: v1687(0x40) = CONST 
0x1689: v1689 = MLOAD v1687(0x40)
0x168c: v168c = SUB v1680 v1689
0x168e: v168e(0x0) = CONST 
0x1692: v1692 = EXTCODESIZE v15f1
0x1693: v1693 = ISZERO v1692
0x1695: v1695 = ISZERO v1693
0x1696: v1696(0x169e) = CONST 
0x1699: JUMPI v1696(0x169e) v1695
----------------------------------

Begin block 0x169a
prev = {'0x15da'}, next = {}
----------------------------------
Block 0x169a
0x169a: v169a(0x0) = CONST 
0x169d: REVERT v169a(0x0) v169a(0x0)
----------------------------------

Begin block 0x169e
prev = {'0x15da'}, next = {'0x16a9', '0x16b2'}
----------------------------------
Block 0x169e
0x16a0: v16a0 = GAS 
0x16a1: v16a1 = CALL v16a0 v15f1 v168e(0x0) v1689 v168c v1689 v1685(0x20)
0x16a2: v16a2 = ISZERO v16a1
0x16a4: v16a4 = ISZERO v16a2
0x16a5: v16a5(0x16b2) = CONST 
0x16a8: JUMPI v16a5(0x16b2) v16a4
----------------------------------

Begin block 0x16a9
prev = {'0x169e'}, next = {}
----------------------------------
Block 0x16a9
0x16a9: v16a9 = RETURNDATASIZE 
0x16aa: v16aa(0x0) = CONST 
0x16ad: RETURNDATACOPY v16aa(0x0) v16aa(0x0) v16a9
0x16ae: v16ae = RETURNDATASIZE 
0x16af: v16af(0x0) = CONST 
0x16b1: REVERT v16af(0x0) v16ae
----------------------------------

Begin block 0x16b2
prev = {'0x169e'}, next = {'0x16c8', '0x16c4'}
----------------------------------
Block 0x16b2
0x16b7: v16b7(0x40) = CONST 
0x16b9: v16b9 = MLOAD v16b7(0x40)
0x16ba: v16ba = RETURNDATASIZE 
0x16bb: v16bb(0x20) = CONST 
0x16be: v16be = LT v16ba v16bb(0x20)
0x16bf: v16bf = ISZERO v16be
0x16c0: v16c0(0x16c8) = CONST 
0x16c3: JUMPI v16c0(0x16c8) v16bf
----------------------------------

Begin block 0x16c4
prev = {'0x16b2'}, next = {}
----------------------------------
Block 0x16c4
0x16c4: v16c4(0x0) = CONST 
0x16c7: REVERT v16c4(0x0) v16c4(0x0)
----------------------------------

Begin block 0x16c8
prev = {'0x16b2'}, next = {'0x722'}
----------------------------------
Block 0x16c8
0x16ca: v16ca = ADD v16b9 v16ba
0x16ce: v16ce = MLOAD v16b9
0x16d0: v16d0(0x20) = CONST 
0x16d2: v16d2 = ADD v16d0(0x20) v16b9
0x16e0: JUMP v6e5(0x722)
----------------------------------

Begin block 0x16e1
prev = {'0x748'}, next = {'0x79d'}
----------------------------------
Block 0x16e1
0x16e2: v16e2(0x0) = CONST 
0x16e4: v16e4(0x7) = CONST 
0x16e6: v16e6(0x0) = CONST 
0x16e9: v16e9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16fe: v16fe = AND v16e9(0xffffffffffffffffffffffffffffffffffffffff) v76d
0x16ff: v16ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1714: v1714 = AND v16ff(0xffffffffffffffffffffffffffffffffffffffff) v16fe
0x1716: MSTORE v16e6(0x0) v1714
0x1717: v1717(0x20) = CONST 
0x1719: v1719(0x20) = ADD v1717(0x20) v16e6(0x0)
0x171c: MSTORE v1719(0x20) v16e4(0x7)
0x171d: v171d(0x20) = CONST 
0x171f: v171f(0x40) = ADD v171d(0x20) v1719(0x20)
0x1720: v1720(0x0) = CONST 
0x1722: v1722 = SHA3 v1720(0x0) v171f(0x40)
0x1723: v1723(0x0) = CONST 
0x1726: v1726(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x173b: v173b = AND v1726(0xffffffffffffffffffffffffffffffffffffffff) v78d
0x173c: v173c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1751: v1751 = AND v173c(0xffffffffffffffffffffffffffffffffffffffff) v173b
0x1753: MSTORE v1723(0x0) v1751
0x1754: v1754(0x20) = CONST 
0x1756: v1756(0x20) = ADD v1754(0x20) v1723(0x0)
0x1759: MSTORE v1756(0x20) v1722
0x175a: v175a(0x20) = CONST 
0x175c: v175c(0x40) = ADD v175a(0x20) v1756(0x20)
0x175d: v175d(0x0) = CONST 
0x175f: v175f = SHA3 v175d(0x0) v175c(0x40)
0x1760: v1760 = SLOAD v175f
0x1767: JUMP v74a(0x79d)
----------------------------------

Begin block 0x1768
prev = {}, next = {'0x177a', '0x177e'}
----------------------------------
function 0x1768(v1768arg0, v1768arg1, v1768arg2)
Block 0x1768
0x1769: v1769(0x0) = CONST 
0x176d: v176d = ADD v1768arg1 v1768arg0
0x1772: v1772 = LT v176d v1768arg1
0x1773: v1773 = ISZERO v1772
0x1774: v1774 = ISZERO v1773
0x1775: v1775 = ISZERO v1774
0x1776: v1776(0x177e) = CONST 
0x1779: JUMPI v1776(0x177e) v1775
----------------------------------

Begin block 0x177a
prev = {'0x1768'}, next = {}
----------------------------------
Block 0x177a
0x177a: v177a(0x0) = CONST 
0x177d: REVERT v177a(0x0) v177a(0x0)
----------------------------------

Begin block 0x177e
prev = {'0x1768'}, next = {}
----------------------------------
Block 0x177e
0x1783: RETURNPRIVATE v1768arg2 v176d
----------------------------------

Begin block 0x1784
prev = {'0x80a'}, next = {'0x17df', '0x17db'}
----------------------------------
Block 0x1784
0x1785: v1785(0x0) = CONST 
0x1789: v1789 = SLOAD v1785(0x0)
0x178b: v178b(0x100) = CONST 
0x178e: v178e(0x1) = EXP v178b(0x100) v1785(0x0)
0x1790: v1790 = DIV v1789 v178e(0x1)
0x1791: v1791(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17a6: v17a6 = AND v1791(0xffffffffffffffffffffffffffffffffffffffff) v1790
0x17a7: v17a7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17bc: v17bc = AND v17a7(0xffffffffffffffffffffffffffffffffffffffff) v17a6
0x17bd: v17bd = CALLER 
0x17be: v17be(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17d3: v17d3 = AND v17be(0xffffffffffffffffffffffffffffffffffffffff) v17bd
0x17d4: v17d4 = EQ v17d3 v17bc
0x17d5: v17d5 = ISZERO v17d4
0x17d6: v17d6 = ISZERO v17d5
0x17d7: v17d7(0x17df) = CONST 
0x17da: JUMPI v17d7(0x17df) v17d6
----------------------------------

Begin block 0x17db
prev = {'0x1784'}, next = {}
----------------------------------
Block 0x17db
0x17db: v17db(0x0) = CONST 
0x17de: REVERT v17db(0x0) v17db(0x0)
----------------------------------

Begin block 0x17df
prev = {'0x1784'}, next = {'0x83f'}
----------------------------------
Block 0x17df
0x17e1: v17e1(0x1) = CONST 
0x17e3: v17e3(0x0) = CONST 
0x17e5: v17e5(0x100) = CONST 
0x17e8: v17e8(0x1) = EXP v17e5(0x100) v17e3(0x0)
0x17ea: v17ea = SLOAD v17e1(0x1)
0x17ec: v17ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1801: v1801(0xffffffffffffffffffffffffffffffffffffffff) = MUL v17ec(0xffffffffffffffffffffffffffffffffffffffff) v17e8(0x1)
0x1802: v1802(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1801(0xffffffffffffffffffffffffffffffffffffffff)
0x1803: v1803 = AND v1802(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v17ea
0x1806: v1806(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x181b: v181b = AND v1806(0xffffffffffffffffffffffffffffffffffffffff) v82f
0x181c: v181c = MUL v181b v17e8(0x1)
0x181d: v181d = OR v181c v1803
0x181f: SSTORE v17e1(0x1) v181d
0x1822: JUMP v80c(0x83f)
----------------------------------

Begin block 0x1823
prev = {}, next = {'0x1854', '0x1864'}
----------------------------------
function 0x1823(v1823arg0, v1823arg1, v1823arg2, v1823arg3)
Block 0x1823
0x1826: v1826 = SLOAD v1823arg2
0x1827: v1827(0x1) = CONST 
0x182a: v182a(0x1) = CONST 
0x182c: v182c = AND v182a(0x1) v1826
0x182d: v182d = ISZERO v182c
0x182e: v182e(0x100) = CONST 
0x1831: v1831 = MUL v182e(0x100) v182d
0x1832: v1832 = SUB v1831 v1827(0x1)
0x1833: v1833 = AND v1832 v1826
0x1834: v1834(0x2) = CONST 
0x1837: v1837 = DIV v1833 v1834(0x2)
0x1839: v1839(0x0) = CONST 
0x183b: MSTORE v1839(0x0) v1823arg2
0x183c: v183c(0x20) = CONST 
0x183e: v183e(0x0) = CONST 
0x1840: v1840 = SHA3 v183e(0x0) v183c(0x20)
0x1842: v1842(0x1f) = CONST 
0x1844: v1844 = ADD v1842(0x1f) v1837
0x1845: v1845(0x20) = CONST 
0x1848: v1848 = DIV v1844 v1845(0x20)
0x184a: v184a = ADD v1840 v1848
0x184d: v184d(0x1f) = CONST 
0x184f: v184f = LT v184d(0x1f) v1823arg0
0x1850: v1850(0x1864) = CONST 
0x1853: JUMPI v1850(0x1864) v184f
----------------------------------

Begin block 0x1854
prev = {'0x1823'}, next = {'0x1892'}
----------------------------------
Block 0x1854
0x1855: v1855 = MLOAD v1823arg1
0x1856: v1856(0xff) = CONST 
0x1858: v1858(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v1856(0xff)
0x1859: v1859 = AND v1858(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v1855
0x185c: v185c = ADD v1823arg0 v1823arg0
0x185d: v185d = OR v185c v1859
0x185f: SSTORE v1823arg2 v185d
0x1860: v1860(0x1892) = CONST 
0x1863: JUMP v1860(0x1892)
----------------------------------

Begin block 0x1864
prev = {'0x1823'}, next = {'0x1892', '0x1873'}
----------------------------------
Block 0x1864
0x1867: v1867 = ADD v1823arg0 v1823arg0
0x1868: v1868(0x1) = CONST 
0x186a: v186a = ADD v1868(0x1) v1867
0x186c: SSTORE v1823arg2 v186a
0x186e: v186e = ISZERO v1823arg0
0x186f: v186f(0x1892) = CONST 
0x1872: JUMPI v186f(0x1892) v186e
----------------------------------

Begin block 0x1873
prev = {'0x1864'}, next = {'0x1876'}
----------------------------------
Block 0x1873
0x1875: v1875 = ADD v1823arg1 v1823arg0
----------------------------------

Begin block 0x1876
prev = {'0x187f', '0x1873'}, next = {'0x1891', '0x187f'}
----------------------------------
Block 0x1876
0x1876_0x2: v1876_2 = PHI v1886 v1823arg1
0x1879: v1879 = GT v1875 v1876_2
0x187a: v187a = ISZERO v1879
0x187b: v187b(0x1891) = CONST 
0x187e: JUMPI v187b(0x1891) v187a
----------------------------------

Begin block 0x187f
prev = {'0x1876'}, next = {'0x1876'}
----------------------------------
Block 0x187f
0x187f_0x1: v187f_1 = PHI v1840 v188b
0x187f_0x2: v187f_2 = PHI v1886 v1823arg1
0x1880: v1880 = MLOAD v187f_2
0x1882: SSTORE v187f_1 v1880
0x1884: v1884(0x20) = CONST 
0x1886: v1886 = ADD v1884(0x20) v187f_2
0x1889: v1889(0x1) = CONST 
0x188b: v188b = ADD v1889(0x1) v187f_1
0x188d: v188d(0x1876) = CONST 
0x1890: JUMP v188d(0x1876)
----------------------------------

Begin block 0x1891
prev = {'0x1876'}, next = {'0x1892'}
----------------------------------
Block 0x1891
----------------------------------

Begin block 0x1892
prev = {'0x1854', '0x1864', '0x1891'}, next = {'0x18a3'}
----------------------------------
Block 0x1892
0x1896: v1896(0x189f) = CONST 
0x189b: v189b(0x18a3) = CONST 
0x189e: JUMP v189b(0x18a3)
----------------------------------

Begin block 0x189f
prev = {'0x18c5'}, next = {}
----------------------------------
Block 0x189f
0x18a2: RETURNPRIVATE v1823arg3 v1823arg2
----------------------------------

Begin block 0x18a3
prev = {'0x1892'}, next = {'0x18a9'}
----------------------------------
Block 0x18a3
0x18a4: v18a4(0x18c5) = CONST 
----------------------------------

Begin block 0x18a9
prev = {'0x18a3', '0x18b2'}, next = {'0x18c1', '0x18b2'}
----------------------------------
Block 0x18a9
0x18a9_0x0: v18a9_0 = PHI v1840 v188b v18bc
0x18ac: v18ac = GT v184a v18a9_0
0x18ad: v18ad = ISZERO v18ac
0x18ae: v18ae(0x18c1) = CONST 
0x18b1: JUMPI v18ae(0x18c1) v18ad
----------------------------------

Begin block 0x18b2
prev = {'0x18a9'}, next = {'0x18a9'}
----------------------------------
Block 0x18b2
0x18b2_0x0: v18b2_0 = PHI v1840 v188b v18bc
0x18b2: v18b2(0x0) = CONST 
0x18b5: v18b5(0x0) = CONST 
0x18b8: SSTORE v18b2_0 v18b5(0x0)
0x18ba: v18ba(0x1) = CONST 
0x18bc: v18bc = ADD v18ba(0x1) v18b2_0
0x18bd: v18bd(0x18a9) = CONST 
0x18c0: JUMP v18bd(0x18a9)
----------------------------------

Begin block 0x18c1
prev = {'0x18a9'}, next = {'0x18c5'}
----------------------------------
Block 0x18c1
0x18c4: JUMP v18a4(0x18c5)
----------------------------------

Begin block 0x18c5
prev = {'0x18c1'}, next = {'0x189f'}
----------------------------------
Block 0x18c5
0x18c7: JUMP v1896(0x189f)
----------------------------------

Begin block 0x1919
prev = {'0x0', '0x112'}, next = {}
----------------------------------
Block 0x1919
0x191a: v191a(0x11d) = CONST 
0x191b: CALLPRIVATE v191a(0x11d)
----------------------------------

Begin block 0x191c
prev = {'0xd'}, next = {}
----------------------------------
Block 0x191c
0x191d: v191d(0x122) = CONST 
0x191e: CALLPRIVATE v191d(0x122)
----------------------------------

Begin block 0x191f
prev = {'0x41'}, next = {}
----------------------------------
Block 0x191f
0x1920: v1920(0x1b2) = CONST 
0x1921: CALLPRIVATE v1920(0x1b2)
----------------------------------

Begin block 0x1922
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x1922
0x1923: v1923(0x217) = CONST 
0x1924: CALLPRIVATE v1923(0x217)
----------------------------------

Begin block 0x1925
prev = {'0x57'}, next = {}
----------------------------------
Block 0x1925
0x1926: v1926(0x242) = CONST 
0x1927: CALLPRIVATE v1926(0x242)
----------------------------------

Begin block 0x1928
prev = {'0x62'}, next = {}
----------------------------------
Block 0x1928
0x1929: v1929(0x2c7) = CONST 
0x192a: CALLPRIVATE v1929(0x2c7)
----------------------------------

Begin block 0x192b
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x192b
0x192c: v192c(0x2f8) = CONST 
0x192d: CALLPRIVATE v192c(0x2f8)
----------------------------------

Begin block 0x192e
prev = {'0x78'}, next = {}
----------------------------------
Block 0x192e
0x192f: v192f(0x323) = CONST 
0x1930: CALLPRIVATE v192f(0x323)
----------------------------------

Begin block 0x1931
prev = {'0x83'}, next = {}
----------------------------------
Block 0x1931
0x1932: v1932(0x33a) = CONST 
0x1933: CALLPRIVATE v1932(0x33a)
----------------------------------

Begin block 0x1934
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x1934
0x1935: v1935(0x391) = CONST 
0x1936: CALLPRIVATE v1935(0x391)
----------------------------------

Begin block 0x1937
prev = {'0x99'}, next = {}
----------------------------------
Block 0x1937
0x1938: v1938(0x3a8) = CONST 
0x1939: CALLPRIVATE v1938(0x3a8)
----------------------------------

Begin block 0x193a
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x193a
0x193b: v193b(0x3ff) = CONST 
0x193c: CALLPRIVATE v193b(0x3ff)
----------------------------------

Begin block 0x193d
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x193d
0x193e: v193e(0x48f) = CONST 
0x193f: CALLPRIVATE v193e(0x48f)
----------------------------------

Begin block 0x1940
prev = {'0xba'}, next = {}
----------------------------------
Block 0x1940
0x1941: v1941(0x4da) = CONST 
0x1942: CALLPRIVATE v1941(0x4da)
----------------------------------

Begin block 0x1943
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x1943
0x1944: v1944(0x53f) = CONST 
0x1945: CALLPRIVATE v1944(0x53f)
----------------------------------

Begin block 0x1946
prev = {'0xd0'}, next = {}
----------------------------------
Block 0x1946
0x1947: v1947(0x58a) = CONST 
0x1948: CALLPRIVATE v1947(0x58a)
----------------------------------

Begin block 0x1949
prev = {'0xdb'}, next = {}
----------------------------------
Block 0x1949
0x194a: v194a(0x635) = CONST 
0x194b: CALLPRIVATE v194a(0x635)
----------------------------------

Begin block 0x194c
prev = {'0xe6'}, next = {}
----------------------------------
Block 0x194c
0x194d: v194d(0x680) = CONST 
0x194e: CALLPRIVATE v194d(0x680)
----------------------------------

Begin block 0x194f
prev = {'0xf1'}, next = {}
----------------------------------
Block 0x194f
0x1950: v1950(0x6d7) = CONST 
0x1951: CALLPRIVATE v1950(0x6d7)
----------------------------------

Begin block 0x1952
prev = {'0xfc'}, next = {}
----------------------------------
Block 0x1952
0x1953: v1953(0x73c) = CONST 
0x1954: CALLPRIVATE v1953(0x73c)
----------------------------------

Begin block 0x1955
prev = {'0x107'}, next = {}
----------------------------------
Block 0x1955
0x1956: v1956(0x7b3) = CONST 
0x1957: CALLPRIVATE v1956(0x7b3)
----------------------------------

Begin block 0x1958
prev = {'0x112'}, next = {}
----------------------------------
Block 0x1958
0x1959: v1959(0x7fe) = CONST 
0x195a: CALLPRIVATE v1959(0x7fe)
----------------------------------
