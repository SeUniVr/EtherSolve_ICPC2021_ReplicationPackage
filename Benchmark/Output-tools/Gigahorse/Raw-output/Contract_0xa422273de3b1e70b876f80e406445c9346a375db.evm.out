
Begin block 0x0
prev = {}, next = {'0x13bd', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x139f: v139f(0x13bd) = CONST 
0x13a0: JUMPI v139f(0x13bd) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x41', '0x13c0'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x13a1: v13a1(0x13c0) = CONST 
0x13a2: JUMPI v13a1(0x13c0) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x13c3', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x13a3: v13a3(0x13c3) = CONST 
0x13a4: JUMPI v13a3(0x13c3) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x13c6'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x13a5: v13a5(0x13c6) = CONST 
0x13a6: JUMPI v13a5(0x13c6) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x13c9', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x2194f3a2) = CONST 
0x5d: v5d = EQ v58(0x2194f3a2) v35
0x13a7: v13a7(0x13c9) = CONST 
0x13a8: JUMPI v13a7(0x13c9) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0x13cc'}
----------------------------------
Block 0x62
0x63: v63(0x23b872dd) = CONST 
0x68: v68 = EQ v63(0x23b872dd) v35
0x13a9: v13a9(0x13cc) = CONST 
0x13aa: JUMPI v13a9(0x13cc) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x13cf', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x313ce567) = CONST 
0x73: v73 = EQ v6e(0x313ce567) v35
0x13ab: v13ab(0x13cf) = CONST 
0x13ac: JUMPI v13ab(0x13cf) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x13d2', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x54fd4d50) = CONST 
0x7e: v7e = EQ v79(0x54fd4d50) v35
0x13ad: v13ad(0x13d2) = CONST 
0x13ae: JUMPI v13ad(0x13d2) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x13d5', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x65f2bc2e) = CONST 
0x89: v89 = EQ v84(0x65f2bc2e) v35
0x13af: v13af(0x13d5) = CONST 
0x13b0: JUMPI v13af(0x13d5) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x99', '0x13d8'}
----------------------------------
Block 0x8e
0x8f: v8f(0x70a08231) = CONST 
0x94: v94 = EQ v8f(0x70a08231) v35
0x13b1: v13b1(0x13d8) = CONST 
0x13b2: JUMPI v13b1(0x13d8) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0x13db', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x933ba413) = CONST 
0x9f: v9f = EQ v9a(0x933ba413) v35
0x13b3: v13b3(0x13db) = CONST 
0x13b4: JUMPI v13b3(0x13db) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xaf', '0x13de'}
----------------------------------
Block 0xa4
0xa5: va5(0x95d89b41) = CONST 
0xaa: vaa = EQ va5(0x95d89b41) v35
0x13b5: v13b5(0x13de) = CONST 
0x13b6: JUMPI v13b5(0x13de) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0x13e1', '0xba'}
----------------------------------
Block 0xaf
0xb0: vb0(0xa9059cbb) = CONST 
0xb5: vb5 = EQ vb0(0xa9059cbb) v35
0x13b7: v13b7(0x13e1) = CONST 
0x13b8: JUMPI v13b7(0x13e1) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0x13e4', '0xc5'}
----------------------------------
Block 0xba
0xbb: vbb(0xcae9ca51) = CONST 
0xc0: vc0 = EQ vbb(0xcae9ca51) v35
0x13b9: v13b9(0x13e4) = CONST 
0x13ba: JUMPI v13b9(0x13e4) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0x13e7', '0x13bd'}
----------------------------------
Block 0xc5
0xc6: vc6(0xdd62ed3e) = CONST 
0xcb: vcb = EQ vc6(0xdd62ed3e) v35
0x13bb: v13bb(0x13e7) = CONST 
0x13bc: JUMPI v13bb(0x13e7) vcb
----------------------------------

Begin block 0xd0
prev = {}, next = {'0x153', '0x14f'}
----------------------------------
function batchLock_63efZf()()
Block 0xd0
0xd1: vd1(0x0) = CONST 
0xd3: vd3 = CALLVALUE 
0xd4: vd4(0x8) = CONST 
0xd6: vd6 = SLOAD vd4(0x8)
0xd7: vd7 = ADD vd6 vd3
0xd8: vd8(0x8) = CONST 
0xdc: SSTORE vd8(0x8) vd7
0xde: vde(0x7) = CONST 
0xe0: ve0 = SLOAD vde(0x7)
0xe1: ve1 = CALLVALUE 
0xe2: ve2 = MUL ve1 ve0
0xe6: ve6(0x0) = CONST 
0xe9: ve9(0x9) = CONST 
0xeb: veb(0x0) = CONST 
0xee: vee = SLOAD ve9(0x9)
0xf0: vf0(0x100) = CONST 
0xf3: vf3(0x1) = EXP vf0(0x100) veb(0x0)
0xf5: vf5 = DIV vee vf3(0x1)
0xf6: vf6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10b: v10b = AND vf6(0xffffffffffffffffffffffffffffffffffffffff) vf5
0x10c: v10c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x121: v121 = AND v10c(0xffffffffffffffffffffffffffffffffffffffff) v10b
0x122: v122(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x137: v137 = AND v122(0xffffffffffffffffffffffffffffffffffffffff) v121
0x139: MSTORE ve6(0x0) v137
0x13a: v13a(0x20) = CONST 
0x13c: v13c(0x20) = ADD v13a(0x20) ve6(0x0)
0x13f: MSTORE v13c(0x20) ve6(0x0)
0x140: v140(0x20) = CONST 
0x142: v142(0x40) = ADD v140(0x20) v13c(0x20)
0x143: v143(0x0) = CONST 
0x145: v145 = SHA3 v143(0x0) v142(0x40)
0x146: v146 = SLOAD v145
0x147: v147 = LT v146 ve2
0x148: v148 = ISZERO v147
0x149: v149 = ISZERO v148
0x14a: v14a = ISZERO v149
0x14b: v14b(0x153) = CONST 
0x14e: JUMPI v14b(0x153) v14a
----------------------------------

Begin block 0x14f
prev = {'0xd0'}, next = {}
----------------------------------
Block 0x14f
0x14f: v14f(0x0) = CONST 
0x152: REVERT v14f(0x0) v14f(0x0)
----------------------------------

Begin block 0x153
prev = {'0xd0'}, next = {'0x383', '0x38c'}
----------------------------------
Block 0x153
0x155: v155(0x0) = CONST 
0x158: v158(0x9) = CONST 
0x15a: v15a(0x0) = CONST 
0x15d: v15d = SLOAD v158(0x9)
0x15f: v15f(0x100) = CONST 
0x162: v162(0x1) = EXP v15f(0x100) v15a(0x0)
0x164: v164 = DIV v15d v162(0x1)
0x165: v165(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17a: v17a = AND v165(0xffffffffffffffffffffffffffffffffffffffff) v164
0x17b: v17b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x190: v190 = AND v17b(0xffffffffffffffffffffffffffffffffffffffff) v17a
0x191: v191(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1a6: v1a6 = AND v191(0xffffffffffffffffffffffffffffffffffffffff) v190
0x1a8: MSTORE v155(0x0) v1a6
0x1a9: v1a9(0x20) = CONST 
0x1ab: v1ab(0x20) = ADD v1a9(0x20) v155(0x0)
0x1ae: MSTORE v1ab(0x20) v155(0x0)
0x1af: v1af(0x20) = CONST 
0x1b1: v1b1(0x40) = ADD v1af(0x20) v1ab(0x20)
0x1b2: v1b2(0x0) = CONST 
0x1b4: v1b4 = SHA3 v1b2(0x0) v1b1(0x40)
0x1b5: v1b5 = SLOAD v1b4
0x1b6: v1b6 = SUB v1b5 ve2
0x1b7: v1b7(0x0) = CONST 
0x1ba: v1ba(0x9) = CONST 
0x1bc: v1bc(0x0) = CONST 
0x1bf: v1bf = SLOAD v1ba(0x9)
0x1c1: v1c1(0x100) = CONST 
0x1c4: v1c4(0x1) = EXP v1c1(0x100) v1bc(0x0)
0x1c6: v1c6 = DIV v1bf v1c4(0x1)
0x1c7: v1c7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1dc: v1dc = AND v1c7(0xffffffffffffffffffffffffffffffffffffffff) v1c6
0x1dd: v1dd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f2: v1f2 = AND v1dd(0xffffffffffffffffffffffffffffffffffffffff) v1dc
0x1f3: v1f3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x208: v208 = AND v1f3(0xffffffffffffffffffffffffffffffffffffffff) v1f2
0x20a: MSTORE v1b7(0x0) v208
0x20b: v20b(0x20) = CONST 
0x20d: v20d(0x20) = ADD v20b(0x20) v1b7(0x0)
0x210: MSTORE v20d(0x20) v1b7(0x0)
0x211: v211(0x20) = CONST 
0x213: v213(0x40) = ADD v211(0x20) v20d(0x20)
0x214: v214(0x0) = CONST 
0x216: v216 = SHA3 v214(0x0) v213(0x40)
0x219: SSTORE v216 v1b6
0x21c: v21c(0x0) = CONST 
0x21f: v21f = CALLER 
0x220: v220(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x235: v235 = AND v220(0xffffffffffffffffffffffffffffffffffffffff) v21f
0x236: v236(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x24b: v24b = AND v236(0xffffffffffffffffffffffffffffffffffffffff) v235
0x24d: MSTORE v21c(0x0) v24b
0x24e: v24e(0x20) = CONST 
0x250: v250(0x20) = ADD v24e(0x20) v21c(0x0)
0x253: MSTORE v250(0x20) v21c(0x0)
0x254: v254(0x20) = CONST 
0x256: v256(0x40) = ADD v254(0x20) v250(0x20)
0x257: v257(0x0) = CONST 
0x259: v259 = SHA3 v257(0x0) v256(0x40)
0x25a: v25a = SLOAD v259
0x25b: v25b = ADD v25a ve2
0x25c: v25c(0x0) = CONST 
0x25f: v25f = CALLER 
0x260: v260(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x275: v275 = AND v260(0xffffffffffffffffffffffffffffffffffffffff) v25f
0x276: v276(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x28b: v28b = AND v276(0xffffffffffffffffffffffffffffffffffffffff) v275
0x28d: MSTORE v25c(0x0) v28b
0x28e: v28e(0x20) = CONST 
0x290: v290(0x20) = ADD v28e(0x20) v25c(0x0)
0x293: MSTORE v290(0x20) v25c(0x0)
0x294: v294(0x20) = CONST 
0x296: v296(0x40) = ADD v294(0x20) v290(0x20)
0x297: v297(0x0) = CONST 
0x299: v299 = SHA3 v297(0x0) v296(0x40)
0x29c: SSTORE v299 v25b
0x29e: v29e = CALLER 
0x29f: v29f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2b4: v2b4 = AND v29f(0xffffffffffffffffffffffffffffffffffffffff) v29e
0x2b5: v2b5(0x9) = CONST 
0x2b7: v2b7(0x0) = CONST 
0x2ba: v2ba = SLOAD v2b5(0x9)
0x2bc: v2bc(0x100) = CONST 
0x2bf: v2bf(0x1) = EXP v2bc(0x100) v2b7(0x0)
0x2c1: v2c1 = DIV v2ba v2bf(0x1)
0x2c2: v2c2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2d7: v2d7 = AND v2c2(0xffffffffffffffffffffffffffffffffffffffff) v2c1
0x2d8: v2d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2ed: v2ed = AND v2d8(0xffffffffffffffffffffffffffffffffffffffff) v2d7
0x2ee: v2ee(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x310: v310(0x40) = CONST 
0x312: v312 = MLOAD v310(0x40)
0x316: MSTORE v312 ve2
0x317: v317(0x20) = CONST 
0x319: v319 = ADD v317(0x20) v312
0x31d: v31d(0x40) = CONST 
0x31f: v31f = MLOAD v31d(0x40)
0x322: v322 = SUB v319 v31f
0x324: LOG3 v31f v322 v2ee(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v2ed v2b4
0x325: v325(0x9) = CONST 
0x327: v327(0x0) = CONST 
0x32a: v32a = SLOAD v325(0x9)
0x32c: v32c(0x100) = CONST 
0x32f: v32f(0x1) = EXP v32c(0x100) v327(0x0)
0x331: v331 = DIV v32a v32f(0x1)
0x332: v332(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x347: v347 = AND v332(0xffffffffffffffffffffffffffffffffffffffff) v331
0x348: v348(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x35d: v35d = AND v348(0xffffffffffffffffffffffffffffffffffffffff) v347
0x35e: v35e(0x8fc) = CONST 
0x361: v361 = CALLVALUE 
0x364: v364 = ISZERO v361
0x365: v365 = MUL v364 v35e(0x8fc)
0x367: v367(0x40) = CONST 
0x369: v369 = MLOAD v367(0x40)
0x36a: v36a(0x0) = CONST 
0x36c: v36c(0x40) = CONST 
0x36e: v36e = MLOAD v36c(0x40)
0x371: v371 = SUB v369 v36e
0x376: v376 = CALL v365 v35d v361 v36e v371 v36e v36a(0x0)
0x37c: v37c = ISZERO v376
0x37e: v37e = ISZERO v37c
0x37f: v37f(0x38c) = CONST 
0x382: JUMPI v37f(0x38c) v37e
----------------------------------

Begin block 0x383
prev = {'0x153'}, next = {}
----------------------------------
Block 0x383
0x383: v383 = RETURNDATASIZE 
0x384: v384(0x0) = CONST 
0x387: RETURNDATACOPY v384(0x0) v384(0x0) v383
0x388: v388 = RETURNDATASIZE 
0x389: v389(0x0) = CONST 
0x38b: REVERT v389(0x0) v388
----------------------------------

Begin block 0x38c
prev = {'0x153'}, next = {}
----------------------------------
Block 0x38c
0x38f: STOP 
----------------------------------

Begin block 0x390
prev = {}, next = {'0x39c', '0x398'}
----------------------------------
function name()()
Block 0x390
0x391: v391 = CALLVALUE 
0x393: v393 = ISZERO v391
0x394: v394(0x39c) = CONST 
0x397: JUMPI v394(0x39c) v393
----------------------------------

Begin block 0x398
prev = {'0x390'}, next = {}
----------------------------------
Block 0x398
0x398: v398(0x0) = CONST 
0x39b: REVERT v398(0x0) v398(0x0)
----------------------------------

Begin block 0x39c
prev = {'0x390'}, next = {'0x911'}
----------------------------------
Block 0x39c
0x39e: v39e(0x3a5) = CONST 
0x3a1: v3a1(0x911) = CONST 
0x3a4: JUMP v3a1(0x911)
----------------------------------

Begin block 0x3a5
prev = {'0x9a7'}, next = {'0x3ca'}
----------------------------------
Block 0x3a5
0x3a6: v3a6(0x40) = CONST 
0x3a8: v3a8 = MLOAD v3a6(0x40)
0x3ab: v3ab(0x20) = CONST 
0x3ad: v3ad = ADD v3ab(0x20) v3a8
0x3b0: v3b0 = SUB v3ad v3a8
0x3b2: MSTORE v3a8 v3b0
0x3b6: v3b6 = MLOAD v936
0x3b8: MSTORE v3ad v3b6
0x3b9: v3b9(0x20) = CONST 
0x3bb: v3bb = ADD v3b9(0x20) v3ad
0x3bf: v3bf = MLOAD v936
0x3c1: v3c1(0x20) = CONST 
0x3c3: v3c3 = ADD v3c1(0x20) v936
0x3c8: v3c8(0x0) = CONST 
----------------------------------

Begin block 0x3ca
prev = {'0x3a5', '0x3d3'}, next = {'0x3d3', '0x3e5'}
----------------------------------
Block 0x3ca
0x3ca_0x0: v3ca_0 = PHI v3c8(0x0) v3de
0x3cd: v3cd = LT v3ca_0 v3bf
0x3ce: v3ce = ISZERO v3cd
0x3cf: v3cf(0x3e5) = CONST 
0x3d2: JUMPI v3cf(0x3e5) v3ce
----------------------------------

Begin block 0x3d3
prev = {'0x3ca'}, next = {'0x3ca'}
----------------------------------
Block 0x3d3
0x3d3_0x0: v3d3_0 = PHI v3c8(0x0) v3de
0x3d5: v3d5 = ADD v3c3 v3d3_0
0x3d6: v3d6 = MLOAD v3d5
0x3d9: v3d9 = ADD v3bb v3d3_0
0x3da: MSTORE v3d9 v3d6
0x3db: v3db(0x20) = CONST 
0x3de: v3de = ADD v3d3_0 v3db(0x20)
0x3e1: v3e1(0x3ca) = CONST 
0x3e4: JUMP v3e1(0x3ca)
----------------------------------

Begin block 0x3e5
prev = {'0x3ca'}, next = {'0x3f9', '0x412'}
----------------------------------
Block 0x3e5
0x3ee: v3ee = ADD v3bf v3bb
0x3f0: v3f0(0x1f) = CONST 
0x3f2: v3f2 = AND v3f0(0x1f) v3bf
0x3f4: v3f4 = ISZERO v3f2
0x3f5: v3f5(0x412) = CONST 
0x3f8: JUMPI v3f5(0x412) v3f4
----------------------------------

Begin block 0x3f9
prev = {'0x3e5'}, next = {'0x412'}
----------------------------------
Block 0x3f9
0x3fb: v3fb = SUB v3ee v3f2
0x3fd: v3fd = MLOAD v3fb
0x3fe: v3fe(0x1) = CONST 
0x401: v401(0x20) = CONST 
0x403: v403 = SUB v401(0x20) v3f2
0x404: v404(0x100) = CONST 
0x407: v407 = EXP v404(0x100) v403
0x408: v408 = SUB v407 v3fe(0x1)
0x409: v409 = NOT v408
0x40a: v40a = AND v409 v3fd
0x40c: MSTORE v3fb v40a
0x40d: v40d(0x20) = CONST 
0x40f: v40f = ADD v40d(0x20) v3fb
----------------------------------

Begin block 0x412
prev = {'0x3f9', '0x3e5'}, next = {}
----------------------------------
Block 0x412
0x412_0x1: v412_1 = PHI v3ee v40f
0x418: v418(0x40) = CONST 
0x41a: v41a = MLOAD v418(0x40)
0x41d: v41d = SUB v412_1 v41a
0x41f: RETURN v41a v41d
----------------------------------

Begin block 0x420
prev = {}, next = {'0x428', '0x42c'}
----------------------------------
function approve(address,uint256)()
Block 0x420
0x421: v421 = CALLVALUE 
0x423: v423 = ISZERO v421
0x424: v424(0x42c) = CONST 
0x427: JUMPI v424(0x42c) v423
----------------------------------

Begin block 0x428
prev = {'0x420'}, next = {}
----------------------------------
Block 0x428
0x428: v428(0x0) = CONST 
0x42b: REVERT v428(0x0) v428(0x0)
----------------------------------

Begin block 0x42c
prev = {'0x420'}, next = {'0x9af'}
----------------------------------
Block 0x42c
0x42e: v42e(0x46b) = CONST 
0x431: v431(0x4) = CONST 
0x434: v434 = CALLDATASIZE 
0x435: v435 = SUB v434 v431(0x4)
0x437: v437 = ADD v431(0x4) v435
0x43b: v43b = CALLDATALOAD v431(0x4)
0x43c: v43c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x451: v451 = AND v43c(0xffffffffffffffffffffffffffffffffffffffff) v43b
0x453: v453(0x20) = CONST 
0x455: v455(0x24) = ADD v453(0x20) v431(0x4)
0x45b: v45b = CALLDATALOAD v455(0x24)
0x45d: v45d(0x20) = CONST 
0x45f: v45f(0x44) = ADD v45d(0x20) v455(0x24)
0x467: v467(0x9af) = CONST 
0x46a: JUMP v467(0x9af)
----------------------------------

Begin block 0x46b
prev = {'0x9af'}, next = {}
----------------------------------
Block 0x46b
0x46c: v46c(0x40) = CONST 
0x46e: v46e = MLOAD v46c(0x40)
0x471: v471 = ISZERO va98(0x1)
0x472: v472 = ISZERO v471
0x473: v473 = ISZERO v472
0x474: v474 = ISZERO v473
0x476: MSTORE v46e v474
0x477: v477(0x20) = CONST 
0x479: v479 = ADD v477(0x20) v46e
0x47d: v47d(0x40) = CONST 
0x47f: v47f = MLOAD v47d(0x40)
0x482: v482 = SUB v479 v47f
0x484: RETURN v47f v482
----------------------------------

Begin block 0x485
prev = {}, next = {'0x491', '0x48d'}
----------------------------------
function totalSupply()()
Block 0x485
0x486: v486 = CALLVALUE 
0x488: v488 = ISZERO v486
0x489: v489(0x491) = CONST 
0x48c: JUMPI v489(0x491) v488
----------------------------------

Begin block 0x48d
prev = {'0x485'}, next = {}
----------------------------------
Block 0x48d
0x48d: v48d(0x0) = CONST 
0x490: REVERT v48d(0x0) v48d(0x0)
----------------------------------

Begin block 0x491
prev = {'0x485'}, next = {'0xaa1'}
----------------------------------
Block 0x491
0x493: v493(0x49a) = CONST 
0x496: v496(0xaa1) = CONST 
0x499: JUMP v496(0xaa1)
----------------------------------

Begin block 0x49a
prev = {'0xaa1'}, next = {}
----------------------------------
Block 0x49a
0x49b: v49b(0x40) = CONST 
0x49d: v49d = MLOAD v49b(0x40)
0x4a1: MSTORE v49d vaa4
0x4a2: v4a2(0x20) = CONST 
0x4a4: v4a4 = ADD v4a2(0x20) v49d
0x4a8: v4a8(0x40) = CONST 
0x4aa: v4aa = MLOAD v4a8(0x40)
0x4ad: v4ad = SUB v4a4 v4aa
0x4af: RETURN v4aa v4ad
----------------------------------

Begin block 0x4b0
prev = {}, next = {'0x4b8', '0x4bc'}
----------------------------------
function fundsWallet()()
Block 0x4b0
0x4b1: v4b1 = CALLVALUE 
0x4b3: v4b3 = ISZERO v4b1
0x4b4: v4b4(0x4bc) = CONST 
0x4b7: JUMPI v4b4(0x4bc) v4b3
----------------------------------

Begin block 0x4b8
prev = {'0x4b0'}, next = {}
----------------------------------
Block 0x4b8
0x4b8: v4b8(0x0) = CONST 
0x4bb: REVERT v4b8(0x0) v4b8(0x0)
----------------------------------

Begin block 0x4bc
prev = {'0x4b0'}, next = {'0xaa7'}
----------------------------------
Block 0x4bc
0x4be: v4be(0x4c5) = CONST 
0x4c1: v4c1(0xaa7) = CONST 
0x4c4: JUMP v4c1(0xaa7)
----------------------------------

Begin block 0x4c5
prev = {'0xaa7'}, next = {}
----------------------------------
Block 0x4c5
0x4c6: v4c6(0x40) = CONST 
0x4c8: v4c8 = MLOAD v4c6(0x40)
0x4cb: v4cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4e0: v4e0 = AND v4cb(0xffffffffffffffffffffffffffffffffffffffff) vaca
0x4e1: v4e1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4f6: v4f6 = AND v4e1(0xffffffffffffffffffffffffffffffffffffffff) v4e0
0x4f8: MSTORE v4c8 v4f6
0x4f9: v4f9(0x20) = CONST 
0x4fb: v4fb = ADD v4f9(0x20) v4c8
0x4ff: v4ff(0x40) = CONST 
0x501: v501 = MLOAD v4ff(0x40)
0x504: v504 = SUB v4fb v501
0x506: RETURN v501 v504
----------------------------------

Begin block 0x507
prev = {}, next = {'0x50f', '0x513'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x507
0x508: v508 = CALLVALUE 
0x50a: v50a = ISZERO v508
0x50b: v50b(0x513) = CONST 
0x50e: JUMPI v50b(0x513) v50a
----------------------------------

Begin block 0x50f
prev = {'0x507'}, next = {}
----------------------------------
Block 0x50f
0x50f: v50f(0x0) = CONST 
0x512: REVERT v50f(0x0) v50f(0x0)
----------------------------------

Begin block 0x513
prev = {'0x507'}, next = {'0xacd'}
----------------------------------
Block 0x513
0x515: v515(0x572) = CONST 
0x518: v518(0x4) = CONST 
0x51b: v51b = CALLDATASIZE 
0x51c: v51c = SUB v51b v518(0x4)
0x51e: v51e = ADD v518(0x4) v51c
0x522: v522 = CALLDATALOAD v518(0x4)
0x523: v523(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x538: v538 = AND v523(0xffffffffffffffffffffffffffffffffffffffff) v522
0x53a: v53a(0x20) = CONST 
0x53c: v53c(0x24) = ADD v53a(0x20) v518(0x4)
0x542: v542 = CALLDATALOAD v53c(0x24)
0x543: v543(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x558: v558 = AND v543(0xffffffffffffffffffffffffffffffffffffffff) v542
0x55a: v55a(0x20) = CONST 
0x55c: v55c(0x44) = ADD v55a(0x20) v53c(0x24)
0x562: v562 = CALLDATALOAD v55c(0x44)
0x564: v564(0x20) = CONST 
0x566: v566(0x64) = ADD v564(0x20) v55c(0x44)
0x56e: v56e(0xacd) = CONST 
0x571: JUMP v56e(0xacd)
----------------------------------

Begin block 0x572
prev = {'0xd3f'}, next = {}
----------------------------------
Block 0x572
0x572_0x0: v572_0 = PHI vd32(0x1) vd3b(0x0)
0x573: v573(0x40) = CONST 
0x575: v575 = MLOAD v573(0x40)
0x578: v578 = ISZERO v572_0
0x579: v579 = ISZERO v578
0x57a: v57a = ISZERO v579
0x57b: v57b = ISZERO v57a
0x57d: MSTORE v575 v57b
0x57e: v57e(0x20) = CONST 
0x580: v580 = ADD v57e(0x20) v575
0x584: v584(0x40) = CONST 
0x586: v586 = MLOAD v584(0x40)
0x589: v589 = SUB v580 v586
0x58b: RETURN v586 v589
----------------------------------

Begin block 0x58c
prev = {}, next = {'0x594', '0x598'}
----------------------------------
function decimals()()
Block 0x58c
0x58d: v58d = CALLVALUE 
0x58f: v58f = ISZERO v58d
0x590: v590(0x598) = CONST 
0x593: JUMPI v590(0x598) v58f
----------------------------------

Begin block 0x594
prev = {'0x58c'}, next = {}
----------------------------------
Block 0x594
0x594: v594(0x0) = CONST 
0x597: REVERT v594(0x0) v594(0x0)
----------------------------------

Begin block 0x598
prev = {'0x58c'}, next = {'0xd46'}
----------------------------------
Block 0x598
0x59a: v59a(0x5a1) = CONST 
0x59d: v59d(0xd46) = CONST 
0x5a0: JUMP v59d(0xd46)
----------------------------------

Begin block 0x5a1
prev = {'0xd46'}, next = {}
----------------------------------
Block 0x5a1
0x5a2: v5a2(0x40) = CONST 
0x5a4: v5a4 = MLOAD v5a2(0x40)
0x5a7: v5a7(0xff) = CONST 
0x5a9: v5a9 = AND v5a7(0xff) vd56
0x5aa: v5aa(0xff) = CONST 
0x5ac: v5ac = AND v5aa(0xff) v5a9
0x5ae: MSTORE v5a4 v5ac
0x5af: v5af(0x20) = CONST 
0x5b1: v5b1 = ADD v5af(0x20) v5a4
0x5b5: v5b5(0x40) = CONST 
0x5b7: v5b7 = MLOAD v5b5(0x40)
0x5ba: v5ba = SUB v5b1 v5b7
0x5bc: RETURN v5b7 v5ba
----------------------------------

Begin block 0x5bd
prev = {}, next = {'0x5c9', '0x5c5'}
----------------------------------
function version()()
Block 0x5bd
0x5be: v5be = CALLVALUE 
0x5c0: v5c0 = ISZERO v5be
0x5c1: v5c1(0x5c9) = CONST 
0x5c4: JUMPI v5c1(0x5c9) v5c0
----------------------------------

Begin block 0x5c5
prev = {'0x5bd'}, next = {}
----------------------------------
Block 0x5c5
0x5c5: v5c5(0x0) = CONST 
0x5c8: REVERT v5c5(0x0) v5c5(0x0)
----------------------------------

Begin block 0x5c9
prev = {'0x5bd'}, next = {'0xd59'}
----------------------------------
Block 0x5c9
0x5cb: v5cb(0x5d2) = CONST 
0x5ce: v5ce(0xd59) = CONST 
0x5d1: JUMP v5ce(0xd59)
----------------------------------

Begin block 0x5d2
prev = {'0xdef'}, next = {'0x5f7'}
----------------------------------
Block 0x5d2
0x5d3: v5d3(0x40) = CONST 
0x5d5: v5d5 = MLOAD v5d3(0x40)
0x5d8: v5d8(0x20) = CONST 
0x5da: v5da = ADD v5d8(0x20) v5d5
0x5dd: v5dd = SUB v5da v5d5
0x5df: MSTORE v5d5 v5dd
0x5e3: v5e3 = MLOAD vd7e
0x5e5: MSTORE v5da v5e3
0x5e6: v5e6(0x20) = CONST 
0x5e8: v5e8 = ADD v5e6(0x20) v5da
0x5ec: v5ec = MLOAD vd7e
0x5ee: v5ee(0x20) = CONST 
0x5f0: v5f0 = ADD v5ee(0x20) vd7e
0x5f5: v5f5(0x0) = CONST 
----------------------------------

Begin block 0x5f7
prev = {'0x5d2', '0x600'}, next = {'0x612', '0x600'}
----------------------------------
Block 0x5f7
0x5f7_0x0: v5f7_0 = PHI v5f5(0x0) v60b
0x5fa: v5fa = LT v5f7_0 v5ec
0x5fb: v5fb = ISZERO v5fa
0x5fc: v5fc(0x612) = CONST 
0x5ff: JUMPI v5fc(0x612) v5fb
----------------------------------

Begin block 0x600
prev = {'0x5f7'}, next = {'0x5f7'}
----------------------------------
Block 0x600
0x600_0x0: v600_0 = PHI v5f5(0x0) v60b
0x602: v602 = ADD v5f0 v600_0
0x603: v603 = MLOAD v602
0x606: v606 = ADD v5e8 v600_0
0x607: MSTORE v606 v603
0x608: v608(0x20) = CONST 
0x60b: v60b = ADD v600_0 v608(0x20)
0x60e: v60e(0x5f7) = CONST 
0x611: JUMP v60e(0x5f7)
----------------------------------

Begin block 0x612
prev = {'0x5f7'}, next = {'0x63f', '0x626'}
----------------------------------
Block 0x612
0x61b: v61b = ADD v5ec v5e8
0x61d: v61d(0x1f) = CONST 
0x61f: v61f = AND v61d(0x1f) v5ec
0x621: v621 = ISZERO v61f
0x622: v622(0x63f) = CONST 
0x625: JUMPI v622(0x63f) v621
----------------------------------

Begin block 0x626
prev = {'0x612'}, next = {'0x63f'}
----------------------------------
Block 0x626
0x628: v628 = SUB v61b v61f
0x62a: v62a = MLOAD v628
0x62b: v62b(0x1) = CONST 
0x62e: v62e(0x20) = CONST 
0x630: v630 = SUB v62e(0x20) v61f
0x631: v631(0x100) = CONST 
0x634: v634 = EXP v631(0x100) v630
0x635: v635 = SUB v634 v62b(0x1)
0x636: v636 = NOT v635
0x637: v637 = AND v636 v62a
0x639: MSTORE v628 v637
0x63a: v63a(0x20) = CONST 
0x63c: v63c = ADD v63a(0x20) v628
----------------------------------

Begin block 0x63f
prev = {'0x612', '0x626'}, next = {}
----------------------------------
Block 0x63f
0x63f_0x1: v63f_1 = PHI v61b v63c
0x645: v645(0x40) = CONST 
0x647: v647 = MLOAD v645(0x40)
0x64a: v64a = SUB v63f_1 v647
0x64c: RETURN v647 v64a
----------------------------------

Begin block 0x64d
prev = {}, next = {'0x655', '0x659'}
----------------------------------
function unitsOneEthCanBuy()()
Block 0x64d
0x64e: v64e = CALLVALUE 
0x650: v650 = ISZERO v64e
0x651: v651(0x659) = CONST 
0x654: JUMPI v651(0x659) v650
----------------------------------

Begin block 0x655
prev = {'0x64d'}, next = {}
----------------------------------
Block 0x655
0x655: v655(0x0) = CONST 
0x658: REVERT v655(0x0) v655(0x0)
----------------------------------

Begin block 0x659
prev = {'0x64d'}, next = {'0xdf7'}
----------------------------------
Block 0x659
0x65b: v65b(0x662) = CONST 
0x65e: v65e(0xdf7) = CONST 
0x661: JUMP v65e(0xdf7)
----------------------------------

Begin block 0x662
prev = {'0xdf7'}, next = {}
----------------------------------
Block 0x662
0x663: v663(0x40) = CONST 
0x665: v665 = MLOAD v663(0x40)
0x669: MSTORE v665 vdfa
0x66a: v66a(0x20) = CONST 
0x66c: v66c = ADD v66a(0x20) v665
0x670: v670(0x40) = CONST 
0x672: v672 = MLOAD v670(0x40)
0x675: v675 = SUB v66c v672
0x677: RETURN v672 v675
----------------------------------

Begin block 0x678
prev = {}, next = {'0x684', '0x680'}
----------------------------------
function balanceOf(address)()
Block 0x678
0x679: v679 = CALLVALUE 
0x67b: v67b = ISZERO v679
0x67c: v67c(0x684) = CONST 
0x67f: JUMPI v67c(0x684) v67b
----------------------------------

Begin block 0x680
prev = {'0x678'}, next = {}
----------------------------------
Block 0x680
0x680: v680(0x0) = CONST 
0x683: REVERT v680(0x0) v680(0x0)
----------------------------------

Begin block 0x684
prev = {'0x678'}, next = {'0xdfd'}
----------------------------------
Block 0x684
0x686: v686(0x6b9) = CONST 
0x689: v689(0x4) = CONST 
0x68c: v68c = CALLDATASIZE 
0x68d: v68d = SUB v68c v689(0x4)
0x68f: v68f = ADD v689(0x4) v68d
0x693: v693 = CALLDATALOAD v689(0x4)
0x694: v694(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6a9: v6a9 = AND v694(0xffffffffffffffffffffffffffffffffffffffff) v693
0x6ab: v6ab(0x20) = CONST 
0x6ad: v6ad(0x24) = ADD v6ab(0x20) v689(0x4)
0x6b5: v6b5(0xdfd) = CONST 
0x6b8: JUMP v6b5(0xdfd)
----------------------------------

Begin block 0x6b9
prev = {'0xdfd'}, next = {}
----------------------------------
Block 0x6b9
0x6ba: v6ba(0x40) = CONST 
0x6bc: v6bc = MLOAD v6ba(0x40)
0x6c0: MSTORE v6bc ve3e
0x6c1: v6c1(0x20) = CONST 
0x6c3: v6c3 = ADD v6c1(0x20) v6bc
0x6c7: v6c7(0x40) = CONST 
0x6c9: v6c9 = MLOAD v6c7(0x40)
0x6cc: v6cc = SUB v6c3 v6c9
0x6ce: RETURN v6c9 v6cc
----------------------------------

Begin block 0x6cf
prev = {}, next = {'0x6d7', '0x6db'}
----------------------------------
function totalEthInWei()()
Block 0x6cf
0x6d0: v6d0 = CALLVALUE 
0x6d2: v6d2 = ISZERO v6d0
0x6d3: v6d3(0x6db) = CONST 
0x6d6: JUMPI v6d3(0x6db) v6d2
----------------------------------

Begin block 0x6d7
prev = {'0x6cf'}, next = {}
----------------------------------
Block 0x6d7
0x6d7: v6d7(0x0) = CONST 
0x6da: REVERT v6d7(0x0) v6d7(0x0)
----------------------------------

Begin block 0x6db
prev = {'0x6cf'}, next = {'0xe45'}
----------------------------------
Block 0x6db
0x6dd: v6dd(0x6e4) = CONST 
0x6e0: v6e0(0xe45) = CONST 
0x6e3: JUMP v6e0(0xe45)
----------------------------------

Begin block 0x6e4
prev = {'0xe45'}, next = {}
----------------------------------
Block 0x6e4
0x6e5: v6e5(0x40) = CONST 
0x6e7: v6e7 = MLOAD v6e5(0x40)
0x6eb: MSTORE v6e7 ve48
0x6ec: v6ec(0x20) = CONST 
0x6ee: v6ee = ADD v6ec(0x20) v6e7
0x6f2: v6f2(0x40) = CONST 
0x6f4: v6f4 = MLOAD v6f2(0x40)
0x6f7: v6f7 = SUB v6ee v6f4
0x6f9: RETURN v6f4 v6f7
----------------------------------

Begin block 0x6fa
prev = {}, next = {'0x706', '0x702'}
----------------------------------
function symbol()()
Block 0x6fa
0x6fb: v6fb = CALLVALUE 
0x6fd: v6fd = ISZERO v6fb
0x6fe: v6fe(0x706) = CONST 
0x701: JUMPI v6fe(0x706) v6fd
----------------------------------

Begin block 0x702
prev = {'0x6fa'}, next = {}
----------------------------------
Block 0x702
0x702: v702(0x0) = CONST 
0x705: REVERT v702(0x0) v702(0x0)
----------------------------------

Begin block 0x706
prev = {'0x6fa'}, next = {'0xe4b'}
----------------------------------
Block 0x706
0x708: v708(0x70f) = CONST 
0x70b: v70b(0xe4b) = CONST 
0x70e: JUMP v70b(0xe4b)
----------------------------------

Begin block 0x70f
prev = {'0xee1'}, next = {'0x734'}
----------------------------------
Block 0x70f
0x710: v710(0x40) = CONST 
0x712: v712 = MLOAD v710(0x40)
0x715: v715(0x20) = CONST 
0x717: v717 = ADD v715(0x20) v712
0x71a: v71a = SUB v717 v712
0x71c: MSTORE v712 v71a
0x720: v720 = MLOAD ve70
0x722: MSTORE v717 v720
0x723: v723(0x20) = CONST 
0x725: v725 = ADD v723(0x20) v717
0x729: v729 = MLOAD ve70
0x72b: v72b(0x20) = CONST 
0x72d: v72d = ADD v72b(0x20) ve70
0x732: v732(0x0) = CONST 
----------------------------------

Begin block 0x734
prev = {'0x70f', '0x73d'}, next = {'0x73d', '0x74f'}
----------------------------------
Block 0x734
0x734_0x0: v734_0 = PHI v732(0x0) v748
0x737: v737 = LT v734_0 v729
0x738: v738 = ISZERO v737
0x739: v739(0x74f) = CONST 
0x73c: JUMPI v739(0x74f) v738
----------------------------------

Begin block 0x73d
prev = {'0x734'}, next = {'0x734'}
----------------------------------
Block 0x73d
0x73d_0x0: v73d_0 = PHI v732(0x0) v748
0x73f: v73f = ADD v72d v73d_0
0x740: v740 = MLOAD v73f
0x743: v743 = ADD v725 v73d_0
0x744: MSTORE v743 v740
0x745: v745(0x20) = CONST 
0x748: v748 = ADD v73d_0 v745(0x20)
0x74b: v74b(0x734) = CONST 
0x74e: JUMP v74b(0x734)
----------------------------------

Begin block 0x74f
prev = {'0x734'}, next = {'0x77c', '0x763'}
----------------------------------
Block 0x74f
0x758: v758 = ADD v729 v725
0x75a: v75a(0x1f) = CONST 
0x75c: v75c = AND v75a(0x1f) v729
0x75e: v75e = ISZERO v75c
0x75f: v75f(0x77c) = CONST 
0x762: JUMPI v75f(0x77c) v75e
----------------------------------

Begin block 0x763
prev = {'0x74f'}, next = {'0x77c'}
----------------------------------
Block 0x763
0x765: v765 = SUB v758 v75c
0x767: v767 = MLOAD v765
0x768: v768(0x1) = CONST 
0x76b: v76b(0x20) = CONST 
0x76d: v76d = SUB v76b(0x20) v75c
0x76e: v76e(0x100) = CONST 
0x771: v771 = EXP v76e(0x100) v76d
0x772: v772 = SUB v771 v768(0x1)
0x773: v773 = NOT v772
0x774: v774 = AND v773 v767
0x776: MSTORE v765 v774
0x777: v777(0x20) = CONST 
0x779: v779 = ADD v777(0x20) v765
----------------------------------

Begin block 0x77c
prev = {'0x763', '0x74f'}, next = {}
----------------------------------
Block 0x77c
0x77c_0x1: v77c_1 = PHI v758 v779
0x782: v782(0x40) = CONST 
0x784: v784 = MLOAD v782(0x40)
0x787: v787 = SUB v77c_1 v784
0x789: RETURN v784 v787
----------------------------------

Begin block 0x78a
prev = {}, next = {'0x796', '0x792'}
----------------------------------
function transfer(address,uint256)()
Block 0x78a
0x78b: v78b = CALLVALUE 
0x78d: v78d = ISZERO v78b
0x78e: v78e(0x796) = CONST 
0x791: JUMPI v78e(0x796) v78d
----------------------------------

Begin block 0x792
prev = {'0x78a'}, next = {}
----------------------------------
Block 0x792
0x792: v792(0x0) = CONST 
0x795: REVERT v792(0x0) v792(0x0)
----------------------------------

Begin block 0x796
prev = {'0x78a'}, next = {'0xee9'}
----------------------------------
Block 0x796
0x798: v798(0x7d5) = CONST 
0x79b: v79b(0x4) = CONST 
0x79e: v79e = CALLDATASIZE 
0x79f: v79f = SUB v79e v79b(0x4)
0x7a1: v7a1 = ADD v79b(0x4) v79f
0x7a5: v7a5 = CALLDATALOAD v79b(0x4)
0x7a6: v7a6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7bb: v7bb = AND v7a6(0xffffffffffffffffffffffffffffffffffffffff) v7a5
0x7bd: v7bd(0x20) = CONST 
0x7bf: v7bf(0x24) = ADD v7bd(0x20) v79b(0x4)
0x7c5: v7c5 = CALLDATALOAD v7bf(0x24)
0x7c7: v7c7(0x20) = CONST 
0x7c9: v7c9(0x44) = ADD v7c7(0x20) v7bf(0x24)
0x7d1: v7d1(0xee9) = CONST 
0x7d4: JUMP v7d1(0xee9)
----------------------------------

Begin block 0x7d5
prev = {'0x1049'}, next = {}
----------------------------------
Block 0x7d5
0x7d5_0x0: v7d5_0 = PHI v103c(0x1) v1045(0x0)
0x7d6: v7d6(0x40) = CONST 
0x7d8: v7d8 = MLOAD v7d6(0x40)
0x7db: v7db = ISZERO v7d5_0
0x7dc: v7dc = ISZERO v7db
0x7dd: v7dd = ISZERO v7dc
0x7de: v7de = ISZERO v7dd
0x7e0: MSTORE v7d8 v7de
0x7e1: v7e1(0x20) = CONST 
0x7e3: v7e3 = ADD v7e1(0x20) v7d8
0x7e7: v7e7(0x40) = CONST 
0x7e9: v7e9 = MLOAD v7e7(0x40)
0x7ec: v7ec = SUB v7e3 v7e9
0x7ee: RETURN v7e9 v7ec
----------------------------------

Begin block 0x7ef
prev = {}, next = {'0x7f7', '0x7fb'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x7ef
0x7f0: v7f0 = CALLVALUE 
0x7f2: v7f2 = ISZERO v7f0
0x7f3: v7f3(0x7fb) = CONST 
0x7f6: JUMPI v7f3(0x7fb) v7f2
----------------------------------

Begin block 0x7f7
prev = {'0x7ef'}, next = {}
----------------------------------
Block 0x7f7
0x7f7: v7f7(0x0) = CONST 
0x7fa: REVERT v7f7(0x0) v7f7(0x0)
----------------------------------

Begin block 0x7fb
prev = {'0x7ef'}, next = {'0x104f'}
----------------------------------
Block 0x7fb
0x7fd: v7fd(0x880) = CONST 
0x800: v800(0x4) = CONST 
0x803: v803 = CALLDATASIZE 
0x804: v804 = SUB v803 v800(0x4)
0x806: v806 = ADD v800(0x4) v804
0x80a: v80a = CALLDATALOAD v800(0x4)
0x80b: v80b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x820: v820 = AND v80b(0xffffffffffffffffffffffffffffffffffffffff) v80a
0x822: v822(0x20) = CONST 
0x824: v824(0x24) = ADD v822(0x20) v800(0x4)
0x82a: v82a = CALLDATALOAD v824(0x24)
0x82c: v82c(0x20) = CONST 
0x82e: v82e(0x44) = ADD v82c(0x20) v824(0x24)
0x834: v834 = CALLDATALOAD v82e(0x44)
0x836: v836(0x20) = CONST 
0x838: v838(0x64) = ADD v836(0x20) v82e(0x44)
0x83b: v83b = ADD v800(0x4) v834
0x83d: v83d = CALLDATALOAD v83b
0x83f: v83f(0x20) = CONST 
0x841: v841 = ADD v83f(0x20) v83b
0x845: v845(0x1f) = CONST 
0x847: v847 = ADD v845(0x1f) v83d
0x848: v848(0x20) = CONST 
0x84c: v84c = DIV v847 v848(0x20)
0x84d: v84d = MUL v84c v848(0x20)
0x84e: v84e(0x20) = CONST 
0x850: v850 = ADD v84e(0x20) v84d
0x851: v851(0x40) = CONST 
0x853: v853 = MLOAD v851(0x40)
0x856: v856 = ADD v853 v850
0x857: v857(0x40) = CONST 
0x859: MSTORE v857(0x40) v856
0x861: MSTORE v853 v83d
0x862: v862(0x20) = CONST 
0x864: v864 = ADD v862(0x20) v853
0x86a: CALLDATACOPY v864 v841 v83d
0x86c: v86c = ADD v864 v83d
0x87c: v87c(0x104f) = CONST 
0x87f: JUMP v87c(0x104f)
----------------------------------

Begin block 0x880
prev = {'0x12e1'}, next = {}
----------------------------------
Block 0x880
0x881: v881(0x40) = CONST 
0x883: v883 = MLOAD v881(0x40)
0x886: v886 = ISZERO v12e2(0x1)
0x887: v887 = ISZERO v886
0x888: v888 = ISZERO v887
0x889: v889 = ISZERO v888
0x88b: MSTORE v883 v889
0x88c: v88c(0x20) = CONST 
0x88e: v88e = ADD v88c(0x20) v883
0x892: v892(0x40) = CONST 
0x894: v894 = MLOAD v892(0x40)
0x897: v897 = SUB v88e v894
0x899: RETURN v894 v897
----------------------------------

Begin block 0x89a
prev = {}, next = {'0x8a6', '0x8a2'}
----------------------------------
function allowance(address,address)()
Block 0x89a
0x89b: v89b = CALLVALUE 
0x89d: v89d = ISZERO v89b
0x89e: v89e(0x8a6) = CONST 
0x8a1: JUMPI v89e(0x8a6) v89d
----------------------------------

Begin block 0x8a2
prev = {'0x89a'}, next = {}
----------------------------------
Block 0x8a2
0x8a2: v8a2(0x0) = CONST 
0x8a5: REVERT v8a2(0x0) v8a2(0x0)
----------------------------------

Begin block 0x8a6
prev = {'0x89a'}, next = {'0x12ec'}
----------------------------------
Block 0x8a6
0x8a8: v8a8(0x8fb) = CONST 
0x8ab: v8ab(0x4) = CONST 
0x8ae: v8ae = CALLDATASIZE 
0x8af: v8af = SUB v8ae v8ab(0x4)
0x8b1: v8b1 = ADD v8ab(0x4) v8af
0x8b5: v8b5 = CALLDATALOAD v8ab(0x4)
0x8b6: v8b6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8cb: v8cb = AND v8b6(0xffffffffffffffffffffffffffffffffffffffff) v8b5
0x8cd: v8cd(0x20) = CONST 
0x8cf: v8cf(0x24) = ADD v8cd(0x20) v8ab(0x4)
0x8d5: v8d5 = CALLDATALOAD v8cf(0x24)
0x8d6: v8d6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8eb: v8eb = AND v8d6(0xffffffffffffffffffffffffffffffffffffffff) v8d5
0x8ed: v8ed(0x20) = CONST 
0x8ef: v8ef(0x44) = ADD v8ed(0x20) v8cf(0x24)
0x8f7: v8f7(0x12ec) = CONST 
0x8fa: JUMP v8f7(0x12ec)
----------------------------------

Begin block 0x8fb
prev = {'0x12ec'}, next = {}
----------------------------------
Block 0x8fb
0x8fc: v8fc(0x40) = CONST 
0x8fe: v8fe = MLOAD v8fc(0x40)
0x902: MSTORE v8fe v136b
0x903: v903(0x20) = CONST 
0x905: v905 = ADD v903(0x20) v8fe
0x909: v909(0x40) = CONST 
0x90b: v90b = MLOAD v909(0x40)
0x90e: v90e = SUB v905 v90b
0x910: RETURN v90b v90e
----------------------------------

Begin block 0x911
prev = {'0x39c'}, next = {'0x961', '0x9a7'}
----------------------------------
Block 0x911
0x912: v912(0x3) = CONST 
0x915: v915 = SLOAD v912(0x3)
0x916: v916(0x1) = CONST 
0x919: v919(0x1) = CONST 
0x91b: v91b = AND v919(0x1) v915
0x91c: v91c = ISZERO v91b
0x91d: v91d(0x100) = CONST 
0x920: v920 = MUL v91d(0x100) v91c
0x921: v921 = SUB v920 v916(0x1)
0x922: v922 = AND v921 v915
0x923: v923(0x2) = CONST 
0x926: v926 = DIV v922 v923(0x2)
0x928: v928(0x1f) = CONST 
0x92a: v92a = ADD v928(0x1f) v926
0x92b: v92b(0x20) = CONST 
0x92f: v92f = DIV v92a v92b(0x20)
0x930: v930 = MUL v92f v92b(0x20)
0x931: v931(0x20) = CONST 
0x933: v933 = ADD v931(0x20) v930
0x934: v934(0x40) = CONST 
0x936: v936 = MLOAD v934(0x40)
0x939: v939 = ADD v936 v933
0x93a: v93a(0x40) = CONST 
0x93c: MSTORE v93a(0x40) v939
0x943: MSTORE v936 v926
0x944: v944(0x20) = CONST 
0x946: v946 = ADD v944(0x20) v936
0x949: v949 = SLOAD v912(0x3)
0x94a: v94a(0x1) = CONST 
0x94d: v94d(0x1) = CONST 
0x94f: v94f = AND v94d(0x1) v949
0x950: v950 = ISZERO v94f
0x951: v951(0x100) = CONST 
0x954: v954 = MUL v951(0x100) v950
0x955: v955 = SUB v954 v94a(0x1)
0x956: v956 = AND v955 v949
0x957: v957(0x2) = CONST 
0x95a: v95a = DIV v956 v957(0x2)
0x95c: v95c = ISZERO v95a
0x95d: v95d(0x9a7) = CONST 
0x960: JUMPI v95d(0x9a7) v95c
----------------------------------

Begin block 0x961
prev = {'0x911'}, next = {'0x969', '0x97c'}
----------------------------------
Block 0x961
0x962: v962(0x1f) = CONST 
0x964: v964 = LT v962(0x1f) v95a
0x965: v965(0x97c) = CONST 
0x968: JUMPI v965(0x97c) v964
----------------------------------

Begin block 0x969
prev = {'0x961'}, next = {'0x9a7'}
----------------------------------
Block 0x969
0x969: v969(0x100) = CONST 
0x96e: v96e = SLOAD v912(0x3)
0x96f: v96f = DIV v96e v969(0x100)
0x970: v970 = MUL v96f v969(0x100)
0x972: MSTORE v946 v970
0x974: v974(0x20) = CONST 
0x976: v976 = ADD v974(0x20) v946
0x978: v978(0x9a7) = CONST 
0x97b: JUMP v978(0x9a7)
----------------------------------

Begin block 0x97c
prev = {'0x961'}, next = {'0x98a'}
----------------------------------
Block 0x97c
0x97e: v97e = ADD v946 v95a
0x981: v981(0x0) = CONST 
0x983: MSTORE v981(0x0) v912(0x3)
0x984: v984(0x20) = CONST 
0x986: v986(0x0) = CONST 
0x988: v988 = SHA3 v986(0x0) v984(0x20)
----------------------------------

Begin block 0x98a
prev = {'0x98a', '0x97c'}, next = {'0x99e', '0x98a'}
----------------------------------
Block 0x98a
0x98a_0x0: v98a_0 = PHI v946 v996
0x98a_0x1: v98a_1 = PHI v988 v992
0x98c: v98c = SLOAD v98a_1
0x98e: MSTORE v98a_0 v98c
0x990: v990(0x1) = CONST 
0x992: v992 = ADD v990(0x1) v98a_1
0x994: v994(0x20) = CONST 
0x996: v996 = ADD v994(0x20) v98a_0
0x999: v999 = GT v97e v996
0x99a: v99a(0x98a) = CONST 
0x99d: JUMPI v99a(0x98a) v999
----------------------------------

Begin block 0x99e
prev = {'0x98a'}, next = {'0x9a7'}
----------------------------------
Block 0x99e
0x9a0: v9a0 = SUB v996 v97e
0x9a1: v9a1(0x1f) = CONST 
0x9a3: v9a3 = AND v9a1(0x1f) v9a0
0x9a5: v9a5 = ADD v97e v9a3
----------------------------------

Begin block 0x9a7
prev = {'0x99e', '0x911', '0x969'}, next = {'0x3a5'}
----------------------------------
Block 0x9a7
0x9ae: JUMP v39e(0x3a5)
----------------------------------

Begin block 0x9af
prev = {'0x42c'}, next = {'0x46b'}
----------------------------------
Block 0x9af
0x9b0: v9b0(0x0) = CONST 
0x9b3: v9b3(0x1) = CONST 
0x9b5: v9b5(0x0) = CONST 
0x9b7: v9b7 = CALLER 
0x9b8: v9b8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9cd: v9cd = AND v9b8(0xffffffffffffffffffffffffffffffffffffffff) v9b7
0x9ce: v9ce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e3: v9e3 = AND v9ce(0xffffffffffffffffffffffffffffffffffffffff) v9cd
0x9e5: MSTORE v9b5(0x0) v9e3
0x9e6: v9e6(0x20) = CONST 
0x9e8: v9e8(0x20) = ADD v9e6(0x20) v9b5(0x0)
0x9eb: MSTORE v9e8(0x20) v9b3(0x1)
0x9ec: v9ec(0x20) = CONST 
0x9ee: v9ee(0x40) = ADD v9ec(0x20) v9e8(0x20)
0x9ef: v9ef(0x0) = CONST 
0x9f1: v9f1 = SHA3 v9ef(0x0) v9ee(0x40)
0x9f2: v9f2(0x0) = CONST 
0x9f5: v9f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa0a: va0a = AND v9f5(0xffffffffffffffffffffffffffffffffffffffff) v451
0xa0b: va0b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa20: va20 = AND va0b(0xffffffffffffffffffffffffffffffffffffffff) va0a
0xa22: MSTORE v9f2(0x0) va20
0xa23: va23(0x20) = CONST 
0xa25: va25(0x20) = ADD va23(0x20) v9f2(0x0)
0xa28: MSTORE va25(0x20) v9f1
0xa29: va29(0x20) = CONST 
0xa2b: va2b(0x40) = ADD va29(0x20) va25(0x20)
0xa2c: va2c(0x0) = CONST 
0xa2e: va2e = SHA3 va2c(0x0) va2b(0x40)
0xa31: SSTORE va2e v45b
0xa34: va34(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa49: va49 = AND va34(0xffffffffffffffffffffffffffffffffffffffff) v451
0xa4a: va4a = CALLER 
0xa4b: va4b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa60: va60 = AND va4b(0xffffffffffffffffffffffffffffffffffffffff) va4a
0xa61: va61(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa83: va83(0x40) = CONST 
0xa85: va85 = MLOAD va83(0x40)
0xa89: MSTORE va85 v45b
0xa8a: va8a(0x20) = CONST 
0xa8c: va8c = ADD va8a(0x20) va85
0xa90: va90(0x40) = CONST 
0xa92: va92 = MLOAD va90(0x40)
0xa95: va95 = SUB va8c va92
0xa97: LOG3 va92 va95 va61(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va60 va49
0xa98: va98(0x1) = CONST 
0xaa0: JUMP v42e(0x46b)
----------------------------------

Begin block 0xaa1
prev = {'0x491'}, next = {'0x49a'}
----------------------------------
Block 0xaa1
0xaa2: vaa2(0x2) = CONST 
0xaa4: vaa4 = SLOAD vaa2(0x2)
0xaa6: JUMP v493(0x49a)
----------------------------------

Begin block 0xaa7
prev = {'0x4bc'}, next = {'0x4c5'}
----------------------------------
Block 0xaa7
0xaa8: vaa8(0x9) = CONST 
0xaaa: vaaa(0x0) = CONST 
0xaad: vaad = SLOAD vaa8(0x9)
0xaaf: vaaf(0x100) = CONST 
0xab2: vab2(0x1) = EXP vaaf(0x100) vaaa(0x0)
0xab4: vab4 = DIV vaad vab2(0x1)
0xab5: vab5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaca: vaca = AND vab5(0xffffffffffffffffffffffffffffffffffffffff) vab4
0xacc: JUMP v4be(0x4c5)
----------------------------------

Begin block 0xacd
prev = {'0x513'}, next = {'0xb99', '0xb18'}
----------------------------------
Block 0xacd
0xace: vace(0x0) = CONST 
0xad1: vad1(0x0) = CONST 
0xad5: vad5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaea: vaea = AND vad5(0xffffffffffffffffffffffffffffffffffffffff) v538
0xaeb: vaeb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb00: vb00 = AND vaeb(0xffffffffffffffffffffffffffffffffffffffff) vaea
0xb02: MSTORE vad1(0x0) vb00
0xb03: vb03(0x20) = CONST 
0xb05: vb05(0x20) = ADD vb03(0x20) vad1(0x0)
0xb08: MSTORE vb05(0x20) vad1(0x0)
0xb09: vb09(0x20) = CONST 
0xb0b: vb0b(0x40) = ADD vb09(0x20) vb05(0x20)
0xb0c: vb0c(0x0) = CONST 
0xb0e: vb0e = SHA3 vb0c(0x0) vb0b(0x40)
0xb0f: vb0f = SLOAD vb0e
0xb10: vb10 = LT vb0f v562
0xb11: vb11 = ISZERO vb10
0xb13: vb13 = ISZERO vb11
0xb14: vb14(0xb99) = CONST 
0xb17: JUMPI vb14(0xb99) vb13
----------------------------------

Begin block 0xb18
prev = {'0xacd'}, next = {'0xb99'}
----------------------------------
Block 0xb18
0xb1a: vb1a(0x1) = CONST 
0xb1c: vb1c(0x0) = CONST 
0xb1f: vb1f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb34: vb34 = AND vb1f(0xffffffffffffffffffffffffffffffffffffffff) v538
0xb35: vb35(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb4a: vb4a = AND vb35(0xffffffffffffffffffffffffffffffffffffffff) vb34
0xb4c: MSTORE vb1c(0x0) vb4a
0xb4d: vb4d(0x20) = CONST 
0xb4f: vb4f(0x20) = ADD vb4d(0x20) vb1c(0x0)
0xb52: MSTORE vb4f(0x20) vb1a(0x1)
0xb53: vb53(0x20) = CONST 
0xb55: vb55(0x40) = ADD vb53(0x20) vb4f(0x20)
0xb56: vb56(0x0) = CONST 
0xb58: vb58 = SHA3 vb56(0x0) vb55(0x40)
0xb59: vb59(0x0) = CONST 
0xb5b: vb5b = CALLER 
0xb5c: vb5c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb71: vb71 = AND vb5c(0xffffffffffffffffffffffffffffffffffffffff) vb5b
0xb72: vb72(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb87: vb87 = AND vb72(0xffffffffffffffffffffffffffffffffffffffff) vb71
0xb89: MSTORE vb59(0x0) vb87
0xb8a: vb8a(0x20) = CONST 
0xb8c: vb8c(0x20) = ADD vb8a(0x20) vb59(0x0)
0xb8f: MSTORE vb8c(0x20) vb58
0xb90: vb90(0x20) = CONST 
0xb92: vb92(0x40) = ADD vb90(0x20) vb8c(0x20)
0xb93: vb93(0x0) = CONST 
0xb95: vb95 = SHA3 vb93(0x0) vb92(0x40)
0xb96: vb96 = SLOAD vb95
0xb97: vb97 = LT vb96 v562
0xb98: vb98 = ISZERO vb97
----------------------------------

Begin block 0xb99
prev = {'0xacd', '0xb18'}, next = {'0xba0', '0xba5'}
----------------------------------
Block 0xb99
0xb99_0x0: vb99_0 = PHI vb11 vb98
0xb9b: vb9b = ISZERO vb99_0
0xb9c: vb9c(0xba5) = CONST 
0xb9f: JUMPI vb9c(0xba5) vb9b
----------------------------------

Begin block 0xba0
prev = {'0xb99'}, next = {'0xba5'}
----------------------------------
Block 0xba0
0xba1: vba1(0x0) = CONST 
0xba4: vba4 = GT v562 vba1(0x0)
----------------------------------

Begin block 0xba5
prev = {'0xba0', '0xb99'}, next = {'0xd3a', '0xbab'}
----------------------------------
Block 0xba5
0xba5_0x0: vba5_0 = PHI vb11 vb98 vba4
0xba6: vba6 = ISZERO vba5_0
0xba7: vba7(0xd3a) = CONST 
0xbaa: JUMPI vba7(0xd3a) vba6
----------------------------------

Begin block 0xbab
prev = {'0xba5'}, next = {'0xd3f'}
----------------------------------
Block 0xbab
0xbac: vbac(0x0) = CONST 
0xbb0: vbb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbc5: vbc5 = AND vbb0(0xffffffffffffffffffffffffffffffffffffffff) v558
0xbc6: vbc6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbdb: vbdb = AND vbc6(0xffffffffffffffffffffffffffffffffffffffff) vbc5
0xbdd: MSTORE vbac(0x0) vbdb
0xbde: vbde(0x20) = CONST 
0xbe0: vbe0(0x20) = ADD vbde(0x20) vbac(0x0)
0xbe3: MSTORE vbe0(0x20) vbac(0x0)
0xbe4: vbe4(0x20) = CONST 
0xbe6: vbe6(0x40) = ADD vbe4(0x20) vbe0(0x20)
0xbe7: vbe7(0x0) = CONST 
0xbe9: vbe9 = SHA3 vbe7(0x0) vbe6(0x40)
0xbea: vbea(0x0) = CONST 
0xbee: vbee = SLOAD vbe9
0xbef: vbef = ADD vbee v562
0xbf5: SSTORE vbe9 vbef
0xbf8: vbf8(0x0) = CONST 
0xbfc: vbfc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc11: vc11 = AND vbfc(0xffffffffffffffffffffffffffffffffffffffff) v538
0xc12: vc12(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc27: vc27 = AND vc12(0xffffffffffffffffffffffffffffffffffffffff) vc11
0xc29: MSTORE vbf8(0x0) vc27
0xc2a: vc2a(0x20) = CONST 
0xc2c: vc2c(0x20) = ADD vc2a(0x20) vbf8(0x0)
0xc2f: MSTORE vc2c(0x20) vbf8(0x0)
0xc30: vc30(0x20) = CONST 
0xc32: vc32(0x40) = ADD vc30(0x20) vc2c(0x20)
0xc33: vc33(0x0) = CONST 
0xc35: vc35 = SHA3 vc33(0x0) vc32(0x40)
0xc36: vc36(0x0) = CONST 
0xc3a: vc3a = SLOAD vc35
0xc3b: vc3b = SUB vc3a v562
0xc41: SSTORE vc35 vc3b
0xc44: vc44(0x1) = CONST 
0xc46: vc46(0x0) = CONST 
0xc49: vc49(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5e: vc5e = AND vc49(0xffffffffffffffffffffffffffffffffffffffff) v538
0xc5f: vc5f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc74: vc74 = AND vc5f(0xffffffffffffffffffffffffffffffffffffffff) vc5e
0xc76: MSTORE vc46(0x0) vc74
0xc77: vc77(0x20) = CONST 
0xc79: vc79(0x20) = ADD vc77(0x20) vc46(0x0)
0xc7c: MSTORE vc79(0x20) vc44(0x1)
0xc7d: vc7d(0x20) = CONST 
0xc7f: vc7f(0x40) = ADD vc7d(0x20) vc79(0x20)
0xc80: vc80(0x0) = CONST 
0xc82: vc82 = SHA3 vc80(0x0) vc7f(0x40)
0xc83: vc83(0x0) = CONST 
0xc85: vc85 = CALLER 
0xc86: vc86(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc9b: vc9b = AND vc86(0xffffffffffffffffffffffffffffffffffffffff) vc85
0xc9c: vc9c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcb1: vcb1 = AND vc9c(0xffffffffffffffffffffffffffffffffffffffff) vc9b
0xcb3: MSTORE vc83(0x0) vcb1
0xcb4: vcb4(0x20) = CONST 
0xcb6: vcb6(0x20) = ADD vcb4(0x20) vc83(0x0)
0xcb9: MSTORE vcb6(0x20) vc82
0xcba: vcba(0x20) = CONST 
0xcbc: vcbc(0x40) = ADD vcba(0x20) vcb6(0x20)
0xcbd: vcbd(0x0) = CONST 
0xcbf: vcbf = SHA3 vcbd(0x0) vcbc(0x40)
0xcc0: vcc0(0x0) = CONST 
0xcc4: vcc4 = SLOAD vcbf
0xcc5: vcc5 = SUB vcc4 v562
0xccb: SSTORE vcbf vcc5
0xcce: vcce(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xce3: vce3 = AND vcce(0xffffffffffffffffffffffffffffffffffffffff) v558
0xce5: vce5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcfa: vcfa = AND vce5(0xffffffffffffffffffffffffffffffffffffffff) v538
0xcfb: vcfb(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd1d: vd1d(0x40) = CONST 
0xd1f: vd1f = MLOAD vd1d(0x40)
0xd23: MSTORE vd1f v562
0xd24: vd24(0x20) = CONST 
0xd26: vd26 = ADD vd24(0x20) vd1f
0xd2a: vd2a(0x40) = CONST 
0xd2c: vd2c = MLOAD vd2a(0x40)
0xd2f: vd2f = SUB vd26 vd2c
0xd31: LOG3 vd2c vd2f vcfb(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vcfa vce3
0xd32: vd32(0x1) = CONST 
0xd36: vd36(0xd3f) = CONST 
0xd39: JUMP vd36(0xd3f)
----------------------------------

Begin block 0xd3a
prev = {'0xba5'}, next = {'0xd3f'}
----------------------------------
Block 0xd3a
0xd3b: vd3b(0x0) = CONST 
----------------------------------

Begin block 0xd3f
prev = {'0xd3a', '0xbab'}, next = {'0x572'}
----------------------------------
Block 0xd3f
0xd45: JUMP v515(0x572)
----------------------------------

Begin block 0xd46
prev = {'0x598'}, next = {'0x5a1'}
----------------------------------
Block 0xd46
0xd47: vd47(0x4) = CONST 
0xd49: vd49(0x0) = CONST 
0xd4c: vd4c = SLOAD vd47(0x4)
0xd4e: vd4e(0x100) = CONST 
0xd51: vd51(0x1) = EXP vd4e(0x100) vd49(0x0)
0xd53: vd53 = DIV vd4c vd51(0x1)
0xd54: vd54(0xff) = CONST 
0xd56: vd56 = AND vd54(0xff) vd53
0xd58: JUMP v59a(0x5a1)
----------------------------------

Begin block 0xd59
prev = {'0x5c9'}, next = {'0xda9', '0xdef'}
----------------------------------
Block 0xd59
0xd5a: vd5a(0x6) = CONST 
0xd5d: vd5d = SLOAD vd5a(0x6)
0xd5e: vd5e(0x1) = CONST 
0xd61: vd61(0x1) = CONST 
0xd63: vd63 = AND vd61(0x1) vd5d
0xd64: vd64 = ISZERO vd63
0xd65: vd65(0x100) = CONST 
0xd68: vd68 = MUL vd65(0x100) vd64
0xd69: vd69 = SUB vd68 vd5e(0x1)
0xd6a: vd6a = AND vd69 vd5d
0xd6b: vd6b(0x2) = CONST 
0xd6e: vd6e = DIV vd6a vd6b(0x2)
0xd70: vd70(0x1f) = CONST 
0xd72: vd72 = ADD vd70(0x1f) vd6e
0xd73: vd73(0x20) = CONST 
0xd77: vd77 = DIV vd72 vd73(0x20)
0xd78: vd78 = MUL vd77 vd73(0x20)
0xd79: vd79(0x20) = CONST 
0xd7b: vd7b = ADD vd79(0x20) vd78
0xd7c: vd7c(0x40) = CONST 
0xd7e: vd7e = MLOAD vd7c(0x40)
0xd81: vd81 = ADD vd7e vd7b
0xd82: vd82(0x40) = CONST 
0xd84: MSTORE vd82(0x40) vd81
0xd8b: MSTORE vd7e vd6e
0xd8c: vd8c(0x20) = CONST 
0xd8e: vd8e = ADD vd8c(0x20) vd7e
0xd91: vd91 = SLOAD vd5a(0x6)
0xd92: vd92(0x1) = CONST 
0xd95: vd95(0x1) = CONST 
0xd97: vd97 = AND vd95(0x1) vd91
0xd98: vd98 = ISZERO vd97
0xd99: vd99(0x100) = CONST 
0xd9c: vd9c = MUL vd99(0x100) vd98
0xd9d: vd9d = SUB vd9c vd92(0x1)
0xd9e: vd9e = AND vd9d vd91
0xd9f: vd9f(0x2) = CONST 
0xda2: vda2 = DIV vd9e vd9f(0x2)
0xda4: vda4 = ISZERO vda2
0xda5: vda5(0xdef) = CONST 
0xda8: JUMPI vda5(0xdef) vda4
----------------------------------

Begin block 0xda9
prev = {'0xd59'}, next = {'0xdb1', '0xdc4'}
----------------------------------
Block 0xda9
0xdaa: vdaa(0x1f) = CONST 
0xdac: vdac = LT vdaa(0x1f) vda2
0xdad: vdad(0xdc4) = CONST 
0xdb0: JUMPI vdad(0xdc4) vdac
----------------------------------

Begin block 0xdb1
prev = {'0xda9'}, next = {'0xdef'}
----------------------------------
Block 0xdb1
0xdb1: vdb1(0x100) = CONST 
0xdb6: vdb6 = SLOAD vd5a(0x6)
0xdb7: vdb7 = DIV vdb6 vdb1(0x100)
0xdb8: vdb8 = MUL vdb7 vdb1(0x100)
0xdba: MSTORE vd8e vdb8
0xdbc: vdbc(0x20) = CONST 
0xdbe: vdbe = ADD vdbc(0x20) vd8e
0xdc0: vdc0(0xdef) = CONST 
0xdc3: JUMP vdc0(0xdef)
----------------------------------

Begin block 0xdc4
prev = {'0xda9'}, next = {'0xdd2'}
----------------------------------
Block 0xdc4
0xdc6: vdc6 = ADD vd8e vda2
0xdc9: vdc9(0x0) = CONST 
0xdcb: MSTORE vdc9(0x0) vd5a(0x6)
0xdcc: vdcc(0x20) = CONST 
0xdce: vdce(0x0) = CONST 
0xdd0: vdd0 = SHA3 vdce(0x0) vdcc(0x20)
----------------------------------

Begin block 0xdd2
prev = {'0xdc4', '0xdd2'}, next = {'0xde6', '0xdd2'}
----------------------------------
Block 0xdd2
0xdd2_0x0: vdd2_0 = PHI vd8e vdde
0xdd2_0x1: vdd2_1 = PHI vdd0 vdda
0xdd4: vdd4 = SLOAD vdd2_1
0xdd6: MSTORE vdd2_0 vdd4
0xdd8: vdd8(0x1) = CONST 
0xdda: vdda = ADD vdd8(0x1) vdd2_1
0xddc: vddc(0x20) = CONST 
0xdde: vdde = ADD vddc(0x20) vdd2_0
0xde1: vde1 = GT vdc6 vdde
0xde2: vde2(0xdd2) = CONST 
0xde5: JUMPI vde2(0xdd2) vde1
----------------------------------

Begin block 0xde6
prev = {'0xdd2'}, next = {'0xdef'}
----------------------------------
Block 0xde6
0xde8: vde8 = SUB vdde vdc6
0xde9: vde9(0x1f) = CONST 
0xdeb: vdeb = AND vde9(0x1f) vde8
0xded: vded = ADD vdc6 vdeb
----------------------------------

Begin block 0xdef
prev = {'0xde6', '0xd59', '0xdb1'}, next = {'0x5d2'}
----------------------------------
Block 0xdef
0xdf6: JUMP v5cb(0x5d2)
----------------------------------

Begin block 0xdf7
prev = {'0x659'}, next = {'0x662'}
----------------------------------
Block 0xdf7
0xdf8: vdf8(0x7) = CONST 
0xdfa: vdfa = SLOAD vdf8(0x7)
0xdfc: JUMP v65b(0x662)
----------------------------------

Begin block 0xdfd
prev = {'0x684'}, next = {'0x6b9'}
----------------------------------
Block 0xdfd
0xdfe: vdfe(0x0) = CONST 
0xe01: ve01(0x0) = CONST 
0xe04: ve04(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe19: ve19 = AND ve04(0xffffffffffffffffffffffffffffffffffffffff) v6a9
0xe1a: ve1a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe2f: ve2f = AND ve1a(0xffffffffffffffffffffffffffffffffffffffff) ve19
0xe31: MSTORE ve01(0x0) ve2f
0xe32: ve32(0x20) = CONST 
0xe34: ve34(0x20) = ADD ve32(0x20) ve01(0x0)
0xe37: MSTORE ve34(0x20) vdfe(0x0)
0xe38: ve38(0x20) = CONST 
0xe3a: ve3a(0x40) = ADD ve38(0x20) ve34(0x20)
0xe3b: ve3b(0x0) = CONST 
0xe3d: ve3d = SHA3 ve3b(0x0) ve3a(0x40)
0xe3e: ve3e = SLOAD ve3d
0xe44: JUMP v686(0x6b9)
----------------------------------

Begin block 0xe45
prev = {'0x6db'}, next = {'0x6e4'}
----------------------------------
Block 0xe45
0xe46: ve46(0x8) = CONST 
0xe48: ve48 = SLOAD ve46(0x8)
0xe4a: JUMP v6dd(0x6e4)
----------------------------------

Begin block 0xe4b
prev = {'0x706'}, next = {'0xe9b', '0xee1'}
----------------------------------
Block 0xe4b
0xe4c: ve4c(0x5) = CONST 
0xe4f: ve4f = SLOAD ve4c(0x5)
0xe50: ve50(0x1) = CONST 
0xe53: ve53(0x1) = CONST 
0xe55: ve55 = AND ve53(0x1) ve4f
0xe56: ve56 = ISZERO ve55
0xe57: ve57(0x100) = CONST 
0xe5a: ve5a = MUL ve57(0x100) ve56
0xe5b: ve5b = SUB ve5a ve50(0x1)
0xe5c: ve5c = AND ve5b ve4f
0xe5d: ve5d(0x2) = CONST 
0xe60: ve60 = DIV ve5c ve5d(0x2)
0xe62: ve62(0x1f) = CONST 
0xe64: ve64 = ADD ve62(0x1f) ve60
0xe65: ve65(0x20) = CONST 
0xe69: ve69 = DIV ve64 ve65(0x20)
0xe6a: ve6a = MUL ve69 ve65(0x20)
0xe6b: ve6b(0x20) = CONST 
0xe6d: ve6d = ADD ve6b(0x20) ve6a
0xe6e: ve6e(0x40) = CONST 
0xe70: ve70 = MLOAD ve6e(0x40)
0xe73: ve73 = ADD ve70 ve6d
0xe74: ve74(0x40) = CONST 
0xe76: MSTORE ve74(0x40) ve73
0xe7d: MSTORE ve70 ve60
0xe7e: ve7e(0x20) = CONST 
0xe80: ve80 = ADD ve7e(0x20) ve70
0xe83: ve83 = SLOAD ve4c(0x5)
0xe84: ve84(0x1) = CONST 
0xe87: ve87(0x1) = CONST 
0xe89: ve89 = AND ve87(0x1) ve83
0xe8a: ve8a = ISZERO ve89
0xe8b: ve8b(0x100) = CONST 
0xe8e: ve8e = MUL ve8b(0x100) ve8a
0xe8f: ve8f = SUB ve8e ve84(0x1)
0xe90: ve90 = AND ve8f ve83
0xe91: ve91(0x2) = CONST 
0xe94: ve94 = DIV ve90 ve91(0x2)
0xe96: ve96 = ISZERO ve94
0xe97: ve97(0xee1) = CONST 
0xe9a: JUMPI ve97(0xee1) ve96
----------------------------------

Begin block 0xe9b
prev = {'0xe4b'}, next = {'0xeb6', '0xea3'}
----------------------------------
Block 0xe9b
0xe9c: ve9c(0x1f) = CONST 
0xe9e: ve9e = LT ve9c(0x1f) ve94
0xe9f: ve9f(0xeb6) = CONST 
0xea2: JUMPI ve9f(0xeb6) ve9e
----------------------------------

Begin block 0xea3
prev = {'0xe9b'}, next = {'0xee1'}
----------------------------------
Block 0xea3
0xea3: vea3(0x100) = CONST 
0xea8: vea8 = SLOAD ve4c(0x5)
0xea9: vea9 = DIV vea8 vea3(0x100)
0xeaa: veaa = MUL vea9 vea3(0x100)
0xeac: MSTORE ve80 veaa
0xeae: veae(0x20) = CONST 
0xeb0: veb0 = ADD veae(0x20) ve80
0xeb2: veb2(0xee1) = CONST 
0xeb5: JUMP veb2(0xee1)
----------------------------------

Begin block 0xeb6
prev = {'0xe9b'}, next = {'0xec4'}
----------------------------------
Block 0xeb6
0xeb8: veb8 = ADD ve80 ve94
0xebb: vebb(0x0) = CONST 
0xebd: MSTORE vebb(0x0) ve4c(0x5)
0xebe: vebe(0x20) = CONST 
0xec0: vec0(0x0) = CONST 
0xec2: vec2 = SHA3 vec0(0x0) vebe(0x20)
----------------------------------

Begin block 0xec4
prev = {'0xeb6', '0xec4'}, next = {'0xec4', '0xed8'}
----------------------------------
Block 0xec4
0xec4_0x0: vec4_0 = PHI ve80 ved0
0xec4_0x1: vec4_1 = PHI vec2 vecc
0xec6: vec6 = SLOAD vec4_1
0xec8: MSTORE vec4_0 vec6
0xeca: veca(0x1) = CONST 
0xecc: vecc = ADD veca(0x1) vec4_1
0xece: vece(0x20) = CONST 
0xed0: ved0 = ADD vece(0x20) vec4_0
0xed3: ved3 = GT veb8 ved0
0xed4: ved4(0xec4) = CONST 
0xed7: JUMPI ved4(0xec4) ved3
----------------------------------

Begin block 0xed8
prev = {'0xec4'}, next = {'0xee1'}
----------------------------------
Block 0xed8
0xeda: veda = SUB ved0 veb8
0xedb: vedb(0x1f) = CONST 
0xedd: vedd = AND vedb(0x1f) veda
0xedf: vedf = ADD veb8 vedd
----------------------------------

Begin block 0xee1
prev = {'0xe4b', '0xea3', '0xed8'}, next = {'0x70f'}
----------------------------------
Block 0xee1
0xee8: JUMP v708(0x70f)
----------------------------------

Begin block 0xee9
prev = {'0x796'}, next = {'0xf34', '0xf39'}
----------------------------------
Block 0xee9
0xeea: veea(0x0) = CONST 
0xeed: veed(0x0) = CONST 
0xef0: vef0 = CALLER 
0xef1: vef1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf06: vf06 = AND vef1(0xffffffffffffffffffffffffffffffffffffffff) vef0
0xf07: vf07(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1c: vf1c = AND vf07(0xffffffffffffffffffffffffffffffffffffffff) vf06
0xf1e: MSTORE veed(0x0) vf1c
0xf1f: vf1f(0x20) = CONST 
0xf21: vf21(0x20) = ADD vf1f(0x20) veed(0x0)
0xf24: MSTORE vf21(0x20) veed(0x0)
0xf25: vf25(0x20) = CONST 
0xf27: vf27(0x40) = ADD vf25(0x20) vf21(0x20)
0xf28: vf28(0x0) = CONST 
0xf2a: vf2a = SHA3 vf28(0x0) vf27(0x40)
0xf2b: vf2b = SLOAD vf2a
0xf2c: vf2c = LT vf2b v7c5
0xf2d: vf2d = ISZERO vf2c
0xf2f: vf2f = ISZERO vf2d
0xf30: vf30(0xf39) = CONST 
0xf33: JUMPI vf30(0xf39) vf2f
----------------------------------

Begin block 0xf34
prev = {'0xee9'}, next = {'0xf39'}
----------------------------------
Block 0xf34
0xf35: vf35(0x0) = CONST 
0xf38: vf38 = GT v7c5 vf35(0x0)
----------------------------------

Begin block 0xf39
prev = {'0xee9', '0xf34'}, next = {'0x1044', '0xf3f'}
----------------------------------
Block 0xf39
0xf39_0x0: vf39_0 = PHI vf2d vf38
0xf3a: vf3a = ISZERO vf39_0
0xf3b: vf3b(0x1044) = CONST 
0xf3e: JUMPI vf3b(0x1044) vf3a
----------------------------------

Begin block 0xf3f
prev = {'0xf39'}, next = {'0x1049'}
----------------------------------
Block 0xf3f
0xf40: vf40(0x0) = CONST 
0xf43: vf43 = CALLER 
0xf44: vf44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf59: vf59 = AND vf44(0xffffffffffffffffffffffffffffffffffffffff) vf43
0xf5a: vf5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf6f: vf6f = AND vf5a(0xffffffffffffffffffffffffffffffffffffffff) vf59
0xf71: MSTORE vf40(0x0) vf6f
0xf72: vf72(0x20) = CONST 
0xf74: vf74(0x20) = ADD vf72(0x20) vf40(0x0)
0xf77: MSTORE vf74(0x20) vf40(0x0)
0xf78: vf78(0x20) = CONST 
0xf7a: vf7a(0x40) = ADD vf78(0x20) vf74(0x20)
0xf7b: vf7b(0x0) = CONST 
0xf7d: vf7d = SHA3 vf7b(0x0) vf7a(0x40)
0xf7e: vf7e(0x0) = CONST 
0xf82: vf82 = SLOAD vf7d
0xf83: vf83 = SUB vf82 v7c5
0xf89: SSTORE vf7d vf83
0xf8c: vf8c(0x0) = CONST 
0xf90: vf90(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa5: vfa5 = AND vf90(0xffffffffffffffffffffffffffffffffffffffff) v7bb
0xfa6: vfa6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfbb: vfbb = AND vfa6(0xffffffffffffffffffffffffffffffffffffffff) vfa5
0xfbd: MSTORE vf8c(0x0) vfbb
0xfbe: vfbe(0x20) = CONST 
0xfc0: vfc0(0x20) = ADD vfbe(0x20) vf8c(0x0)
0xfc3: MSTORE vfc0(0x20) vf8c(0x0)
0xfc4: vfc4(0x20) = CONST 
0xfc6: vfc6(0x40) = ADD vfc4(0x20) vfc0(0x20)
0xfc7: vfc7(0x0) = CONST 
0xfc9: vfc9 = SHA3 vfc7(0x0) vfc6(0x40)
0xfca: vfca(0x0) = CONST 
0xfce: vfce = SLOAD vfc9
0xfcf: vfcf = ADD vfce v7c5
0xfd5: SSTORE vfc9 vfcf
0xfd8: vfd8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfed: vfed = AND vfd8(0xffffffffffffffffffffffffffffffffffffffff) v7bb
0xfee: vfee = CALLER 
0xfef: vfef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1004: v1004 = AND vfef(0xffffffffffffffffffffffffffffffffffffffff) vfee
0x1005: v1005(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1027: v1027(0x40) = CONST 
0x1029: v1029 = MLOAD v1027(0x40)
0x102d: MSTORE v1029 v7c5
0x102e: v102e(0x20) = CONST 
0x1030: v1030 = ADD v102e(0x20) v1029
0x1034: v1034(0x40) = CONST 
0x1036: v1036 = MLOAD v1034(0x40)
0x1039: v1039 = SUB v1030 v1036
0x103b: LOG3 v1036 v1039 v1005(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1004 vfed
0x103c: v103c(0x1) = CONST 
0x1040: v1040(0x1049) = CONST 
0x1043: JUMP v1040(0x1049)
----------------------------------

Begin block 0x1044
prev = {'0xf39'}, next = {'0x1049'}
----------------------------------
Block 0x1044
0x1045: v1045(0x0) = CONST 
----------------------------------

Begin block 0x1049
prev = {'0x1044', '0xf3f'}, next = {'0x7d5'}
----------------------------------
Block 0x1049
0x104e: JUMP v798(0x7d5)
----------------------------------

Begin block 0x104f
prev = {'0x7fb'}, next = {'0x1275'}
----------------------------------
Block 0x104f
0x1050: v1050(0x0) = CONST 
0x1053: v1053(0x1) = CONST 
0x1055: v1055(0x0) = CONST 
0x1057: v1057 = CALLER 
0x1058: v1058(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x106d: v106d = AND v1058(0xffffffffffffffffffffffffffffffffffffffff) v1057
0x106e: v106e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1083: v1083 = AND v106e(0xffffffffffffffffffffffffffffffffffffffff) v106d
0x1085: MSTORE v1055(0x0) v1083
0x1086: v1086(0x20) = CONST 
0x1088: v1088(0x20) = ADD v1086(0x20) v1055(0x0)
0x108b: MSTORE v1088(0x20) v1053(0x1)
0x108c: v108c(0x20) = CONST 
0x108e: v108e(0x40) = ADD v108c(0x20) v1088(0x20)
0x108f: v108f(0x0) = CONST 
0x1091: v1091 = SHA3 v108f(0x0) v108e(0x40)
0x1092: v1092(0x0) = CONST 
0x1095: v1095(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10aa: v10aa = AND v1095(0xffffffffffffffffffffffffffffffffffffffff) v820
0x10ab: v10ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c0: v10c0 = AND v10ab(0xffffffffffffffffffffffffffffffffffffffff) v10aa
0x10c2: MSTORE v1092(0x0) v10c0
0x10c3: v10c3(0x20) = CONST 
0x10c5: v10c5(0x20) = ADD v10c3(0x20) v1092(0x0)
0x10c8: MSTORE v10c5(0x20) v1091
0x10c9: v10c9(0x20) = CONST 
0x10cb: v10cb(0x40) = ADD v10c9(0x20) v10c5(0x20)
0x10cc: v10cc(0x0) = CONST 
0x10ce: v10ce = SHA3 v10cc(0x0) v10cb(0x40)
0x10d1: SSTORE v10ce v82a
0x10d4: v10d4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10e9: v10e9 = AND v10d4(0xffffffffffffffffffffffffffffffffffffffff) v820
0x10ea: v10ea = CALLER 
0x10eb: v10eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1100: v1100 = AND v10eb(0xffffffffffffffffffffffffffffffffffffffff) v10ea
0x1101: v1101(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x1123: v1123(0x40) = CONST 
0x1125: v1125 = MLOAD v1123(0x40)
0x1129: MSTORE v1125 v82a
0x112a: v112a(0x20) = CONST 
0x112c: v112c = ADD v112a(0x20) v1125
0x1130: v1130(0x40) = CONST 
0x1132: v1132 = MLOAD v1130(0x40)
0x1135: v1135 = SUB v112c v1132
0x1137: LOG3 v1132 v1135 v1101(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v1100 v10e9
0x1139: v1139(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x114e: v114e = AND v1139(0xffffffffffffffffffffffffffffffffffffffff) v820
0x114f: v114f(0x40) = CONST 
0x1151: v1151 = MLOAD v114f(0x40)
0x1154: v1154(0x72656365697665417070726f76616c28616464726573732c75696e743235362c) = CONST 
0x1176: MSTORE v1151 v1154(0x72656365697665417070726f76616c28616464726573732c75696e743235362c)
0x1177: v1177(0x20) = CONST 
0x1179: v1179 = ADD v1177(0x20) v1151
0x117a: v117a(0x616464726573732c627974657329000000000000000000000000000000000000) = CONST 
0x119c: MSTORE v1179 v117a(0x616464726573732c627974657329000000000000000000000000000000000000)
0x119e: v119e(0x2e) = CONST 
0x11a0: v11a0 = ADD v119e(0x2e) v1151
0x11a3: v11a3(0x40) = CONST 
0x11a5: v11a5 = MLOAD v11a3(0x40)
0x11a8: v11a8 = SUB v11a0 v11a5
0x11aa: v11aa = SHA3 v11a5 v11a8
0x11ab: v11ab(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x11ca: v11ca = DIV v11aa v11ab(0x100000000000000000000000000000000000000000000000000000000)
0x11cb: v11cb = CALLER 
0x11cd: v11cd = ADDRESS 
0x11cf: v11cf(0x40) = CONST 
0x11d1: v11d1 = MLOAD v11cf(0x40)
0x11d3: v11d3(0xffffffff) = CONST 
0x11d8: v11d8 = AND v11d3(0xffffffff) v11ca
0x11d9: v11d9(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x11f7: v11f7 = MUL v11d9(0x100000000000000000000000000000000000000000000000000000000) v11d8
0x11f9: MSTORE v11d1 v11f7
0x11fa: v11fa(0x4) = CONST 
0x11fc: v11fc = ADD v11fa(0x4) v11d1
0x11ff: v11ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1214: v1214 = AND v11ff(0xffffffffffffffffffffffffffffffffffffffff) v11cb
0x1215: v1215(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x122a: v122a = AND v1215(0xffffffffffffffffffffffffffffffffffffffff) v1214
0x122c: MSTORE v11fc v122a
0x122d: v122d(0x20) = CONST 
0x122f: v122f = ADD v122d(0x20) v11fc
0x1232: MSTORE v122f v82a
0x1233: v1233(0x20) = CONST 
0x1235: v1235 = ADD v1233(0x20) v122f
0x1237: v1237(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x124c: v124c = AND v1237(0xffffffffffffffffffffffffffffffffffffffff) v11cd
0x124d: v124d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1262: v1262 = AND v124d(0xffffffffffffffffffffffffffffffffffffffff) v124c
0x1264: MSTORE v1235 v1262
0x1265: v1265(0x20) = CONST 
0x1267: v1267 = ADD v1265(0x20) v1235
0x126a: v126a = MLOAD v853
0x126c: v126c(0x20) = CONST 
0x126e: v126e = ADD v126c(0x20) v853
0x1273: v1273(0x0) = CONST 
----------------------------------

Begin block 0x1275
prev = {'0x104f', '0x127e'}, next = {'0x1290', '0x127e'}
----------------------------------
Block 0x1275
0x1275_0x0: v1275_0 = PHI v1273(0x0) v1289
0x1278: v1278 = LT v1275_0 v126a
0x1279: v1279 = ISZERO v1278
0x127a: v127a(0x1290) = CONST 
0x127d: JUMPI v127a(0x1290) v1279
----------------------------------

Begin block 0x127e
prev = {'0x1275'}, next = {'0x1275'}
----------------------------------
Block 0x127e
0x127e_0x0: v127e_0 = PHI v1273(0x0) v1289
0x1280: v1280 = ADD v126e v127e_0
0x1281: v1281 = MLOAD v1280
0x1284: v1284 = ADD v1267 v127e_0
0x1285: MSTORE v1284 v1281
0x1286: v1286(0x20) = CONST 
0x1289: v1289 = ADD v127e_0 v1286(0x20)
0x128c: v128c(0x1275) = CONST 
0x128f: JUMP v128c(0x1275)
----------------------------------

Begin block 0x1290
prev = {'0x1275'}, next = {'0x12a4', '0x12bd'}
----------------------------------
Block 0x1290
0x1299: v1299 = ADD v126a v1267
0x129b: v129b(0x1f) = CONST 
0x129d: v129d = AND v129b(0x1f) v126a
0x129f: v129f = ISZERO v129d
0x12a0: v12a0(0x12bd) = CONST 
0x12a3: JUMPI v12a0(0x12bd) v129f
----------------------------------

Begin block 0x12a4
prev = {'0x1290'}, next = {'0x12bd'}
----------------------------------
Block 0x12a4
0x12a6: v12a6 = SUB v1299 v129d
0x12a8: v12a8 = MLOAD v12a6
0x12a9: v12a9(0x1) = CONST 
0x12ac: v12ac(0x20) = CONST 
0x12ae: v12ae = SUB v12ac(0x20) v129d
0x12af: v12af(0x100) = CONST 
0x12b2: v12b2 = EXP v12af(0x100) v12ae
0x12b3: v12b3 = SUB v12b2 v12a9(0x1)
0x12b4: v12b4 = NOT v12b3
0x12b5: v12b5 = AND v12b4 v12a8
0x12b7: MSTORE v12a6 v12b5
0x12b8: v12b8(0x20) = CONST 
0x12ba: v12ba = ADD v12b8(0x20) v12a6
----------------------------------

Begin block 0x12bd
prev = {'0x12a4', '0x1290'}, next = {'0x12e1', '0x12dd'}
----------------------------------
Block 0x12bd
0x12bd_0x1: v12bd_1 = PHI v1299 v12ba
0x12c5: v12c5(0x0) = CONST 
0x12c7: v12c7(0x40) = CONST 
0x12c9: v12c9 = MLOAD v12c7(0x40)
0x12cc: v12cc = SUB v12bd_1 v12c9
0x12ce: v12ce(0x0) = CONST 
0x12d1: v12d1 = GAS 
0x12d2: v12d2 = CALL v12d1 v114e v12ce(0x0) v12c9 v12cc v12c9 v12c5(0x0)
0x12d7: v12d7 = ISZERO v12d2
0x12d8: v12d8 = ISZERO v12d7
0x12d9: v12d9(0x12e1) = CONST 
0x12dc: JUMPI v12d9(0x12e1) v12d8
----------------------------------

Begin block 0x12dd
prev = {'0x12bd'}, next = {}
----------------------------------
Block 0x12dd
0x12dd: v12dd(0x0) = CONST 
0x12e0: REVERT v12dd(0x0) v12dd(0x0)
----------------------------------

Begin block 0x12e1
prev = {'0x12bd'}, next = {'0x880'}
----------------------------------
Block 0x12e1
0x12e2: v12e2(0x1) = CONST 
0x12eb: JUMP v7fd(0x880)
----------------------------------

Begin block 0x12ec
prev = {'0x8a6'}, next = {'0x8fb'}
----------------------------------
Block 0x12ec
0x12ed: v12ed(0x0) = CONST 
0x12ef: v12ef(0x1) = CONST 
0x12f1: v12f1(0x0) = CONST 
0x12f4: v12f4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1309: v1309 = AND v12f4(0xffffffffffffffffffffffffffffffffffffffff) v8cb
0x130a: v130a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x131f: v131f = AND v130a(0xffffffffffffffffffffffffffffffffffffffff) v1309
0x1321: MSTORE v12f1(0x0) v131f
0x1322: v1322(0x20) = CONST 
0x1324: v1324(0x20) = ADD v1322(0x20) v12f1(0x0)
0x1327: MSTORE v1324(0x20) v12ef(0x1)
0x1328: v1328(0x20) = CONST 
0x132a: v132a(0x40) = ADD v1328(0x20) v1324(0x20)
0x132b: v132b(0x0) = CONST 
0x132d: v132d = SHA3 v132b(0x0) v132a(0x40)
0x132e: v132e(0x0) = CONST 
0x1331: v1331(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1346: v1346 = AND v1331(0xffffffffffffffffffffffffffffffffffffffff) v8eb
0x1347: v1347(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x135c: v135c = AND v1347(0xffffffffffffffffffffffffffffffffffffffff) v1346
0x135e: MSTORE v132e(0x0) v135c
0x135f: v135f(0x20) = CONST 
0x1361: v1361(0x20) = ADD v135f(0x20) v132e(0x0)
0x1364: MSTORE v1361(0x20) v132d
0x1365: v1365(0x20) = CONST 
0x1367: v1367(0x40) = ADD v1365(0x20) v1361(0x20)
0x1368: v1368(0x0) = CONST 
0x136a: v136a = SHA3 v1368(0x0) v1367(0x40)
0x136b: v136b = SLOAD v136a
0x1372: JUMP v8a8(0x8fb)
----------------------------------

Begin block 0x13bd
prev = {'0x0', '0xc5'}, next = {}
----------------------------------
Block 0x13bd
0x13be: v13be(0xd0) = CONST 
0x13bf: CALLPRIVATE v13be(0xd0)
----------------------------------

Begin block 0x13c0
prev = {'0xd'}, next = {}
----------------------------------
Block 0x13c0
0x13c1: v13c1(0x390) = CONST 
0x13c2: CALLPRIVATE v13c1(0x390)
----------------------------------

Begin block 0x13c3
prev = {'0x41'}, next = {}
----------------------------------
Block 0x13c3
0x13c4: v13c4(0x420) = CONST 
0x13c5: CALLPRIVATE v13c4(0x420)
----------------------------------

Begin block 0x13c6
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x13c6
0x13c7: v13c7(0x485) = CONST 
0x13c8: CALLPRIVATE v13c7(0x485)
----------------------------------

Begin block 0x13c9
prev = {'0x57'}, next = {}
----------------------------------
Block 0x13c9
0x13ca: v13ca(0x4b0) = CONST 
0x13cb: CALLPRIVATE v13ca(0x4b0)
----------------------------------

Begin block 0x13cc
prev = {'0x62'}, next = {}
----------------------------------
Block 0x13cc
0x13cd: v13cd(0x507) = CONST 
0x13ce: CALLPRIVATE v13cd(0x507)
----------------------------------

Begin block 0x13cf
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x13cf
0x13d0: v13d0(0x58c) = CONST 
0x13d1: CALLPRIVATE v13d0(0x58c)
----------------------------------

Begin block 0x13d2
prev = {'0x78'}, next = {}
----------------------------------
Block 0x13d2
0x13d3: v13d3(0x5bd) = CONST 
0x13d4: CALLPRIVATE v13d3(0x5bd)
----------------------------------

Begin block 0x13d5
prev = {'0x83'}, next = {}
----------------------------------
Block 0x13d5
0x13d6: v13d6(0x64d) = CONST 
0x13d7: CALLPRIVATE v13d6(0x64d)
----------------------------------

Begin block 0x13d8
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x13d8
0x13d9: v13d9(0x678) = CONST 
0x13da: CALLPRIVATE v13d9(0x678)
----------------------------------

Begin block 0x13db
prev = {'0x99'}, next = {}
----------------------------------
Block 0x13db
0x13dc: v13dc(0x6cf) = CONST 
0x13dd: CALLPRIVATE v13dc(0x6cf)
----------------------------------

Begin block 0x13de
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x13de
0x13df: v13df(0x6fa) = CONST 
0x13e0: CALLPRIVATE v13df(0x6fa)
----------------------------------

Begin block 0x13e1
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x13e1
0x13e2: v13e2(0x78a) = CONST 
0x13e3: CALLPRIVATE v13e2(0x78a)
----------------------------------

Begin block 0x13e4
prev = {'0xba'}, next = {}
----------------------------------
Block 0x13e4
0x13e5: v13e5(0x7ef) = CONST 
0x13e6: CALLPRIVATE v13e5(0x7ef)
----------------------------------

Begin block 0x13e7
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x13e7
0x13e8: v13e8(0x89a) = CONST 
0x13e9: CALLPRIVATE v13e8(0x89a)
----------------------------------
