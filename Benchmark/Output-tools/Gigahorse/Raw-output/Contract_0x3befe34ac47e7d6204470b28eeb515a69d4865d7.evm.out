
Begin block 0x0
prev = {}, next = {'0xd', '0xd38'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xd1a: vd1a(0xd38) = CONST 
0xd1b: JUMPI vd1a(0xd38) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1e', '0x7f'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0x8da5cb5b) = CONST 
0x19: v19 = GT v14(0x8da5cb5b) v12
0x1a: v1a(0x7f) = CONST 
0x1d: JUMPI v1a(0x7f) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0x29', '0x59'}
----------------------------------
Block 0x1e
0x1f: v1f(0xf0595dd1) = CONST 
0x24: v24 = GT v1f(0xf0595dd1) v12
0x25: v25(0x59) = CONST 
0x28: JUMPI v25(0x59) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0xd59'}
----------------------------------
Block 0x29
0x2a: v2a(0xf0595dd1) = CONST 
0x2f: v2f = EQ v2a(0xf0595dd1) v12
0xd1c: vd1c(0xd59) = CONST 
0xd1d: JUMPI vd1c(0xd59) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0x3f', '0xd5c'}
----------------------------------
Block 0x34
0x35: v35(0xf29d2f28) = CONST 
0x3a: v3a = EQ v35(0xf29d2f28) v12
0xd1e: vd1e(0xd5c) = CONST 
0xd1f: JUMPI vd1e(0xd5c) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x4a', '0xd5f'}
----------------------------------
Block 0x3f
0x40: v40(0xf2fde38b) = CONST 
0x45: v45 = EQ v40(0xf2fde38b) v12
0xd20: vd20(0xd5f) = CONST 
0xd21: JUMPI vd20(0xd5f) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x55', '0xd62'}
----------------------------------
Block 0x4a
0x4b: v4b(0xfc0c546a) = CONST 
0x50: v50 = EQ v4b(0xfc0c546a) v12
0xd22: vd22(0xd62) = CONST 
0xd23: JUMPI vd22(0xd62) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0xdd0x0'}
----------------------------------
Block 0x55
0x55: v55(0xdd) = CONST 
0x58: JUMP v55(0xdd)
----------------------------------

Begin block 0x59
prev = {'0x1e'}, next = {'0xd50', '0x65'}
----------------------------------
Block 0x59
0x5b: v5b(0x8da5cb5b) = CONST 
0x60: v60 = EQ v5b(0x8da5cb5b) v12
0xd24: vd24(0xd50) = CONST 
0xd25: JUMPI vd24(0xd50) v60
----------------------------------

Begin block 0x65
prev = {'0x59'}, next = {'0xd53', '0x70'}
----------------------------------
Block 0x65
0x66: v66(0x8f32d59b) = CONST 
0x6b: v6b = EQ v66(0x8f32d59b) v12
0xd26: vd26(0xd53) = CONST 
0xd27: JUMPI vd26(0xd53) v6b
----------------------------------

Begin block 0x70
prev = {'0x65'}, next = {'0x7b', '0xd56'}
----------------------------------
Block 0x70
0x71: v71(0xc0ee0b8a) = CONST 
0x76: v76 = EQ v71(0xc0ee0b8a) v12
0xd28: vd28(0xd56) = CONST 
0xd29: JUMPI vd28(0xd56) v76
----------------------------------

Begin block 0x7b
prev = {'0x70'}, next = {'0xdd0x0'}
----------------------------------
Block 0x7b
0x7b: v7b(0xdd) = CONST 
0x7e: JUMP v7b(0xdd)
----------------------------------

Begin block 0x7f
prev = {'0xd'}, next = {'0xbb', '0x8b'}
----------------------------------
Block 0x7f
0x81: v81(0x522f6815) = CONST 
0x86: v86 = GT v81(0x522f6815) v12
0x87: v87(0xbb) = CONST 
0x8a: JUMPI v87(0xbb) v86
----------------------------------

Begin block 0x8b
prev = {'0x7f'}, next = {'0xd44', '0x96'}
----------------------------------
Block 0x8b
0x8c: v8c(0x522f6815) = CONST 
0x91: v91 = EQ v8c(0x522f6815) v12
0xd2a: vd2a(0xd44) = CONST 
0xd2b: JUMPI vd2a(0xd44) v91
----------------------------------

Begin block 0x96
prev = {'0x8b'}, next = {'0xa1', '0xd47'}
----------------------------------
Block 0x96
0x97: v97(0x6cf7ccac) = CONST 
0x9c: v9c = EQ v97(0x6cf7ccac) v12
0xd2c: vd2c(0xd47) = CONST 
0xd2d: JUMPI vd2c(0xd47) v9c
----------------------------------

Begin block 0xa1
prev = {'0x96'}, next = {'0xd4a', '0xac'}
----------------------------------
Block 0xa1
0xa2: va2(0x715018a6) = CONST 
0xa7: va7 = EQ va2(0x715018a6) v12
0xd2e: vd2e(0xd4a) = CONST 
0xd2f: JUMPI vd2e(0xd4a) va7
----------------------------------

Begin block 0xac
prev = {'0xa1'}, next = {'0xb7', '0xd4d'}
----------------------------------
Block 0xac
0xad: vad(0x757b8cf4) = CONST 
0xb2: vb2 = EQ vad(0x757b8cf4) v12
0xd30: vd30(0xd4d) = CONST 
0xd31: JUMPI vd30(0xd4d) vb2
----------------------------------

Begin block 0xb7
prev = {'0xac'}, next = {'0xdd0x0'}
----------------------------------
Block 0xb7
0xb7: vb7(0xdd) = CONST 
0xba: JUMP vb7(0xdd)
----------------------------------

Begin block 0xbb
prev = {'0x7f'}, next = {'0xc7', '0xd3b'}
----------------------------------
Block 0xbb
0xbd: vbd(0x2c4e722e) = CONST 
0xc2: vc2 = EQ vbd(0x2c4e722e) v12
0xd32: vd32(0xd3b) = CONST 
0xd33: JUMPI vd32(0xd3b) vc2
----------------------------------

Begin block 0xc7
prev = {'0xbb'}, next = {'0xd2', '0xd3e'}
----------------------------------
Block 0xc7
0xc8: vc8(0x34fcf437) = CONST 
0xcd: vcd = EQ vc8(0x34fcf437) v12
0xd34: vd34(0xd3e) = CONST 
0xd35: JUMPI vd34(0xd3e) vcd
----------------------------------

Begin block 0xd2
prev = {'0xc7'}, next = {'0xd38', '0xd41'}
----------------------------------
Block 0xd2
0xd3: vd3(0x420a83e7) = CONST 
0xd8: vd8 = EQ vd3(0x420a83e7) v12
0xd36: vd36(0xd41) = CONST 
0xd37: JUMPI vd36(0xd41) vd8
----------------------------------

Begin block 0xdd
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xdd
0xde: STOP 
----------------------------------

Begin block 0xdd0x0
prev = {'0xb7', '0x55', '0xd38', '0x7b'}, next = {}
----------------------------------
Block 0xdd0x0
0xde0x0: STOP 
----------------------------------

Begin block 0xdd0x106
prev = {'0x44c'}, next = {}
----------------------------------
Block 0xdd0x106
0xde0x106: STOP 
----------------------------------

Begin block 0xdd0x161
prev = {'0x4fe'}, next = {}
----------------------------------
Block 0xdd0x161
0xde0x161: STOP 
----------------------------------

Begin block 0xdd0x19a
prev = {'0x619'}, next = {}
----------------------------------
Block 0xdd0x19a
0xde0x19a: STOP 
----------------------------------

Begin block 0xdd0x1e3
prev = {'0x666'}, next = {}
----------------------------------
Block 0xdd0x1e3
0xde0x1e3: STOP 
----------------------------------

Begin block 0xdd0x1f8
prev = {'0x78c0x1f8'}, next = {}
----------------------------------
Block 0xdd0x1f8
0xde0x1f8: STOP 
----------------------------------

Begin block 0xdd0x279
prev = {'0x95d'}, next = {}
----------------------------------
Block 0xdd0x279
0xde0x279: STOP 
----------------------------------

Begin block 0xdd0x341
prev = {'0x78c0x341'}, next = {}
----------------------------------
Block 0xdd0x341
0xde0x341: STOP 
----------------------------------

Begin block 0xdd0x384
prev = {'0xa95'}, next = {}
----------------------------------
Block 0xdd0x384
0xde0x384: STOP 
----------------------------------

Begin block 0xdd0x3b7
prev = {'0xb07'}, next = {}
----------------------------------
Block 0xdd0x3b7
0xde0x3b7: STOP 
----------------------------------

Begin block 0xdf
prev = {}, next = {'0xeb', '0xe7'}
----------------------------------
function rate()()
Block 0xdf
0xe0: ve0 = CALLVALUE 
0xe2: ve2 = ISZERO ve0
0xe3: ve3(0xeb) = CONST 
0xe6: JUMPI ve3(0xeb) ve2
----------------------------------

Begin block 0xe7
prev = {'0xdf'}, next = {}
----------------------------------
Block 0xe7
0xe7: ve7(0x0) = CONST 
0xea: REVERT ve7(0x0) ve7(0x0)
----------------------------------

Begin block 0xeb
prev = {'0xdf'}, next = {'0x3ff'}
----------------------------------
Block 0xeb
0xed: ved(0xf4) = CONST 
0xf0: vf0(0x3ff) = CONST 
0xf3: JUMP vf0(0x3ff)
----------------------------------

Begin block 0xf4
prev = {'0x3ff'}, next = {}
----------------------------------
Block 0xf4
0xf5: vf5(0x40) = CONST 
0xf8: vf8 = MLOAD vf5(0x40)
0xfb: MSTORE vf8 v402
0xfc: vfc = MLOAD vf5(0x40)
0x100: v100 = SUB vf8 vfc
0x101: v101(0x20) = CONST 
0x103: v103 = ADD v101(0x20) v100
0x105: RETURN vfc v103
----------------------------------

Begin block 0x106
prev = {}, next = {'0x10e', '0x112'}
----------------------------------
function setRate(uint256)()
Block 0x106
0x107: v107 = CALLVALUE 
0x109: v109 = ISZERO v107
0x10a: v10a(0x112) = CONST 
0x10d: JUMPI v10a(0x112) v109
----------------------------------

Begin block 0x10e
prev = {'0x106'}, next = {}
----------------------------------
Block 0x10e
0x10e: v10e(0x0) = CONST 
0x111: REVERT v10e(0x0) v10e(0x0)
----------------------------------

Begin block 0x112
prev = {'0x106'}, next = {'0x129', '0x125'}
----------------------------------
Block 0x112
0x114: v114(0xdd) = CONST 
0x117: v117(0x4) = CONST 
0x11a: v11a = CALLDATASIZE 
0x11b: v11b = SUB v11a v117(0x4)
0x11c: v11c(0x20) = CONST 
0x11f: v11f = LT v11b v11c(0x20)
0x120: v120 = ISZERO v11f
0x121: v121(0x129) = CONST 
0x124: JUMPI v121(0x129) v120
----------------------------------

Begin block 0x125
prev = {'0x112'}, next = {}
----------------------------------
Block 0x125
0x125: v125(0x0) = CONST 
0x128: REVERT v125(0x0) v125(0x0)
----------------------------------

Begin block 0x129
prev = {'0x112'}, next = {'0x405'}
----------------------------------
Block 0x129
0x12b: v12b = CALLDATALOAD v117(0x4)
0x12c: v12c(0x405) = CONST 
0x12f: JUMP v12c(0x405)
----------------------------------

Begin block 0x130
prev = {}, next = {'0x138', '0x13c'}
----------------------------------
function tokenHolder()()
Block 0x130
0x131: v131 = CALLVALUE 
0x133: v133 = ISZERO v131
0x134: v134(0x13c) = CONST 
0x137: JUMPI v134(0x13c) v133
----------------------------------

Begin block 0x138
prev = {'0x130'}, next = {}
----------------------------------
Block 0x138
0x138: v138(0x0) = CONST 
0x13b: REVERT v138(0x0) v138(0x0)
----------------------------------

Begin block 0x13c
prev = {'0x130'}, next = {'0x451'}
----------------------------------
Block 0x13c
0x13e: v13e(0x145) = CONST 
0x141: v141(0x451) = CONST 
0x144: JUMP v141(0x451)
----------------------------------

Begin block 0x1450x130
prev = {'0x451'}, next = {}
----------------------------------
Block 0x1450x130
0x1460x130: v130146(0x40) = CONST 
0x1490x130: v130149 = MLOAD v130146(0x40)
0x14a0x130: v13014a(0x1) = CONST 
0x14c0x130: v13014c(0x1) = CONST 
0x14e0x130: v13014e(0xa0) = CONST 
0x1500x130: v130150(0x10000000000000000000000000000000000000000) = SHL v13014e(0xa0) v13014c(0x1)
0x1510x130: v130151(0xffffffffffffffffffffffffffffffffffffffff) = SUB v130150(0x10000000000000000000000000000000000000000) v13014a(0x1)
0x1540x130: v130154 = AND v45d v130151(0xffffffffffffffffffffffffffffffffffffffff)
0x1560x130: MSTORE v130149 v130154
0x1570x130: v130157 = MLOAD v130146(0x40)
0x15b0x130: v13015b = SUB v130149 v130157
0x15c0x130: v13015c(0x20) = CONST 
0x15e0x130: v13015e = ADD v13015c(0x20) v13015b
0x1600x130: RETURN v130157 v13015e
----------------------------------

Begin block 0x1450x23b
prev = {'0x791'}, next = {}
----------------------------------
Block 0x1450x23b
0x1460x23b: v23b146(0x40) = CONST 
0x1490x23b: v23b149 = MLOAD v23b146(0x40)
0x14a0x23b: v23b14a(0x1) = CONST 
0x14c0x23b: v23b14c(0x1) = CONST 
0x14e0x23b: v23b14e(0xa0) = CONST 
0x1500x23b: v23b150(0x10000000000000000000000000000000000000000) = SHL v23b14e(0xa0) v23b14c(0x1)
0x1510x23b: v23b151(0xffffffffffffffffffffffffffffffffffffffff) = SUB v23b150(0x10000000000000000000000000000000000000000) v23b14a(0x1)
0x1540x23b: v23b154 = AND v79d v23b151(0xffffffffffffffffffffffffffffffffffffffff)
0x1560x23b: MSTORE v23b149 v23b154
0x1570x23b: v23b157 = MLOAD v23b146(0x40)
0x15b0x23b: v23b15b = SUB v23b149 v23b157
0x15c0x23b: v23b15c(0x20) = CONST 
0x15e0x23b: v23b15e = ADD v23b15c(0x20) v23b15b
0x1600x23b: RETURN v23b157 v23b15e
----------------------------------

Begin block 0x1450x3ea
prev = {'0xb0a'}, next = {}
----------------------------------
Block 0x1450x3ea
0x1460x3ea: v3ea146(0x40) = CONST 
0x1490x3ea: v3ea149 = MLOAD v3ea146(0x40)
0x14a0x3ea: v3ea14a(0x1) = CONST 
0x14c0x3ea: v3ea14c(0x1) = CONST 
0x14e0x3ea: v3ea14e(0xa0) = CONST 
0x1500x3ea: v3ea150(0x10000000000000000000000000000000000000000) = SHL v3ea14e(0xa0) v3ea14c(0x1)
0x1510x3ea: v3ea151(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ea150(0x10000000000000000000000000000000000000000) v3ea14a(0x1)
0x1540x3ea: v3ea154 = AND vb16 v3ea151(0xffffffffffffffffffffffffffffffffffffffff)
0x1560x3ea: MSTORE v3ea149 v3ea154
0x1570x3ea: v3ea157 = MLOAD v3ea146(0x40)
0x15b0x3ea: v3ea15b = SUB v3ea149 v3ea157
0x15c0x3ea: v3ea15c(0x20) = CONST 
0x15e0x3ea: v3ea15e = ADD v3ea15c(0x20) v3ea15b
0x1600x3ea: RETURN v3ea157 v3ea15e
----------------------------------

Begin block 0x161
prev = {}, next = {'0x16d', '0x169'}
----------------------------------
function withdrawEther(address,uint256)()
Block 0x161
0x162: v162 = CALLVALUE 
0x164: v164 = ISZERO v162
0x165: v165(0x16d) = CONST 
0x168: JUMPI v165(0x16d) v164
----------------------------------

Begin block 0x169
prev = {'0x161'}, next = {}
----------------------------------
Block 0x169
0x169: v169(0x0) = CONST 
0x16c: REVERT v169(0x0) v169(0x0)
----------------------------------

Begin block 0x16d
prev = {'0x161'}, next = {'0x184', '0x180'}
----------------------------------
Block 0x16d
0x16f: v16f(0xdd) = CONST 
0x172: v172(0x4) = CONST 
0x175: v175 = CALLDATASIZE 
0x176: v176 = SUB v175 v172(0x4)
0x177: v177(0x40) = CONST 
0x17a: v17a = LT v176 v177(0x40)
0x17b: v17b = ISZERO v17a
0x17c: v17c(0x184) = CONST 
0x17f: JUMPI v17c(0x184) v17b
----------------------------------

Begin block 0x180
prev = {'0x16d'}, next = {}
----------------------------------
Block 0x180
0x180: v180(0x0) = CONST 
0x183: REVERT v180(0x0) v180(0x0)
----------------------------------

Begin block 0x184
prev = {'0x16d'}, next = {'0x460'}
----------------------------------
Block 0x184
0x186: v186(0x1) = CONST 
0x188: v188(0x1) = CONST 
0x18a: v18a(0xa0) = CONST 
0x18c: v18c(0x10000000000000000000000000000000000000000) = SHL v18a(0xa0) v188(0x1)
0x18d: v18d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v18c(0x10000000000000000000000000000000000000000) v186(0x1)
0x18f: v18f = CALLDATALOAD v172(0x4)
0x190: v190 = AND v18f v18d(0xffffffffffffffffffffffffffffffffffffffff)
0x192: v192(0x20) = CONST 
0x194: v194 = ADD v192(0x20) v172(0x4)
0x195: v195 = CALLDATALOAD v194
0x196: v196(0x460) = CONST 
0x199: JUMP v196(0x460)
----------------------------------

Begin block 0x19a
prev = {}, next = {'0x1a2', '0x1a6'}
----------------------------------
function withdrawTokensTransferFrom(address,address,address,uint256)()
Block 0x19a
0x19b: v19b = CALLVALUE 
0x19d: v19d = ISZERO v19b
0x19e: v19e(0x1a6) = CONST 
0x1a1: JUMPI v19e(0x1a6) v19d
----------------------------------

Begin block 0x1a2
prev = {'0x19a'}, next = {}
----------------------------------
Block 0x1a2
0x1a2: v1a2(0x0) = CONST 
0x1a5: REVERT v1a2(0x0) v1a2(0x0)
----------------------------------

Begin block 0x1a6
prev = {'0x19a'}, next = {'0x1b9', '0x1bd'}
----------------------------------
Block 0x1a6
0x1a8: v1a8(0xdd) = CONST 
0x1ab: v1ab(0x4) = CONST 
0x1ae: v1ae = CALLDATASIZE 
0x1af: v1af = SUB v1ae v1ab(0x4)
0x1b0: v1b0(0x80) = CONST 
0x1b3: v1b3 = LT v1af v1b0(0x80)
0x1b4: v1b4 = ISZERO v1b3
0x1b5: v1b5(0x1bd) = CONST 
0x1b8: JUMPI v1b5(0x1bd) v1b4
----------------------------------

Begin block 0x1b9
prev = {'0x1a6'}, next = {}
----------------------------------
Block 0x1b9
0x1b9: v1b9(0x0) = CONST 
0x1bc: REVERT v1b9(0x0) v1b9(0x0)
----------------------------------

Begin block 0x1bd
prev = {'0x1a6'}, next = {'0x542'}
----------------------------------
Block 0x1bd
0x1bf: v1bf(0x1) = CONST 
0x1c1: v1c1(0x1) = CONST 
0x1c3: v1c3(0xa0) = CONST 
0x1c5: v1c5(0x10000000000000000000000000000000000000000) = SHL v1c3(0xa0) v1c1(0x1)
0x1c6: v1c6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1c5(0x10000000000000000000000000000000000000000) v1bf(0x1)
0x1c8: v1c8 = CALLDATALOAD v1ab(0x4)
0x1ca: v1ca = AND v1c6(0xffffffffffffffffffffffffffffffffffffffff) v1c8
0x1cc: v1cc(0x20) = CONST 
0x1cf: v1cf = ADD v1ab(0x4) v1cc(0x20)
0x1d0: v1d0 = CALLDATALOAD v1cf
0x1d2: v1d2 = AND v1c6(0xffffffffffffffffffffffffffffffffffffffff) v1d0
0x1d4: v1d4(0x40) = CONST 
0x1d7: v1d7 = ADD v1ab(0x4) v1d4(0x40)
0x1d8: v1d8 = CALLDATALOAD v1d7
0x1d9: v1d9 = AND v1d8 v1c6(0xffffffffffffffffffffffffffffffffffffffff)
0x1db: v1db(0x60) = CONST 
0x1dd: v1dd = ADD v1db(0x60) v1ab(0x4)
0x1de: v1de = CALLDATALOAD v1dd
0x1df: v1df(0x542) = CONST 
0x1e2: JUMP v1df(0x542)
----------------------------------

Begin block 0x1e3
prev = {}, next = {'0x1eb', '0x1ef'}
----------------------------------
function renounceOwnership()()
Block 0x1e3
0x1e4: v1e4 = CALLVALUE 
0x1e6: v1e6 = ISZERO v1e4
0x1e7: v1e7(0x1ef) = CONST 
0x1ea: JUMPI v1e7(0x1ef) v1e6
----------------------------------

Begin block 0x1eb
prev = {'0x1e3'}, next = {}
----------------------------------
Block 0x1eb
0x1eb: v1eb(0x0) = CONST 
0x1ee: REVERT v1eb(0x0) v1eb(0x0)
----------------------------------

Begin block 0x1ef
prev = {'0x1e3'}, next = {'0x61f'}
----------------------------------
Block 0x1ef
0x1f1: v1f1(0xdd) = CONST 
0x1f4: v1f4(0x61f) = CONST 
0x1f7: JUMP v1f4(0x61f)
----------------------------------

Begin block 0x1f8
prev = {}, next = {'0x200', '0x204'}
----------------------------------
function withdrawTokensApprove(address,address,uint256)()
Block 0x1f8
0x1f9: v1f9 = CALLVALUE 
0x1fb: v1fb = ISZERO v1f9
0x1fc: v1fc(0x204) = CONST 
0x1ff: JUMPI v1fc(0x204) v1fb
----------------------------------

Begin block 0x200
prev = {'0x1f8'}, next = {}
----------------------------------
Block 0x200
0x200: v200(0x0) = CONST 
0x203: REVERT v200(0x0) v200(0x0)
----------------------------------

Begin block 0x204
prev = {'0x1f8'}, next = {'0x21b', '0x217'}
----------------------------------
Block 0x204
0x206: v206(0xdd) = CONST 
0x209: v209(0x4) = CONST 
0x20c: v20c = CALLDATASIZE 
0x20d: v20d = SUB v20c v209(0x4)
0x20e: v20e(0x60) = CONST 
0x211: v211 = LT v20d v20e(0x60)
0x212: v212 = ISZERO v211
0x213: v213(0x21b) = CONST 
0x216: JUMPI v213(0x21b) v212
----------------------------------

Begin block 0x217
prev = {'0x204'}, next = {}
----------------------------------
Block 0x217
0x217: v217(0x0) = CONST 
0x21a: REVERT v217(0x0) v217(0x0)
----------------------------------

Begin block 0x21b
prev = {'0x204'}, next = {'0x6b0'}
----------------------------------
Block 0x21b
0x21d: v21d(0x1) = CONST 
0x21f: v21f(0x1) = CONST 
0x221: v221(0xa0) = CONST 
0x223: v223(0x10000000000000000000000000000000000000000) = SHL v221(0xa0) v21f(0x1)
0x224: v224(0xffffffffffffffffffffffffffffffffffffffff) = SUB v223(0x10000000000000000000000000000000000000000) v21d(0x1)
0x226: v226 = CALLDATALOAD v209(0x4)
0x228: v228 = AND v224(0xffffffffffffffffffffffffffffffffffffffff) v226
0x22a: v22a(0x20) = CONST 
0x22d: v22d = ADD v209(0x4) v22a(0x20)
0x22e: v22e = CALLDATALOAD v22d
0x231: v231 = AND v224(0xffffffffffffffffffffffffffffffffffffffff) v22e
0x233: v233(0x40) = CONST 
0x235: v235 = ADD v233(0x40) v209(0x4)
0x236: v236 = CALLDATALOAD v235
0x237: v237(0x6b0) = CONST 
0x23a: JUMP v237(0x6b0)
----------------------------------

Begin block 0x23b
prev = {}, next = {'0x243', '0x247'}
----------------------------------
function owner()()
Block 0x23b
0x23c: v23c = CALLVALUE 
0x23e: v23e = ISZERO v23c
0x23f: v23f(0x247) = CONST 
0x242: JUMPI v23f(0x247) v23e
----------------------------------

Begin block 0x243
prev = {'0x23b'}, next = {}
----------------------------------
Block 0x243
0x243: v243(0x0) = CONST 
0x246: REVERT v243(0x0) v243(0x0)
----------------------------------

Begin block 0x247
prev = {'0x23b'}, next = {'0x791'}
----------------------------------
Block 0x247
0x249: v249(0x145) = CONST 
0x24c: v24c(0x791) = CONST 
0x24f: JUMP v24c(0x791)
----------------------------------

Begin block 0x250
prev = {}, next = {'0x258', '0x25c'}
----------------------------------
function isOwner()()
Block 0x250
0x251: v251 = CALLVALUE 
0x253: v253 = ISZERO v251
0x254: v254(0x25c) = CONST 
0x257: JUMPI v254(0x25c) v253
----------------------------------

Begin block 0x258
prev = {'0x250'}, next = {}
----------------------------------
Block 0x258
0x258: v258(0x0) = CONST 
0x25b: REVERT v258(0x0) v258(0x0)
----------------------------------

Begin block 0x25c
prev = {'0x250'}, next = {'0x265'}
----------------------------------
Block 0x25c
0x25e: v25e(0x265) = CONST 
0x261: v261(0x7a0) = CONST 
0x264: v264_0 = CALLPRIVATE v261(0x7a0) v25e(0x265)
----------------------------------

Begin block 0x265
prev = {'0x25c'}, next = {}
----------------------------------
Block 0x265
0x266: v266(0x40) = CONST 
0x269: v269 = MLOAD v266(0x40)
0x26b: v26b = ISZERO v264_0
0x26c: v26c = ISZERO v26b
0x26e: MSTORE v269 v26c
0x26f: v26f = MLOAD v266(0x40)
0x273: v273 = SUB v269 v26f
0x274: v274(0x20) = CONST 
0x276: v276 = ADD v274(0x20) v273
0x278: RETURN v26f v276
----------------------------------

Begin block 0x279
prev = {}, next = {'0x281', '0x285'}
----------------------------------
function tokenFallback(address,uint256,bytes)()
Block 0x279
0x27a: v27a = CALLVALUE 
0x27c: v27c = ISZERO v27a
0x27d: v27d(0x285) = CONST 
0x280: JUMPI v27d(0x285) v27c
----------------------------------

Begin block 0x281
prev = {'0x279'}, next = {}
----------------------------------
Block 0x281
0x281: v281(0x0) = CONST 
0x284: REVERT v281(0x0) v281(0x0)
----------------------------------

Begin block 0x285
prev = {'0x279'}, next = {'0x29c', '0x298'}
----------------------------------
Block 0x285
0x287: v287(0xdd) = CONST 
0x28a: v28a(0x4) = CONST 
0x28d: v28d = CALLDATASIZE 
0x28e: v28e = SUB v28d v28a(0x4)
0x28f: v28f(0x60) = CONST 
0x292: v292 = LT v28e v28f(0x60)
0x293: v293 = ISZERO v292
0x294: v294(0x29c) = CONST 
0x297: JUMPI v294(0x29c) v293
----------------------------------

Begin block 0x298
prev = {'0x285'}, next = {}
----------------------------------
Block 0x298
0x298: v298(0x0) = CONST 
0x29b: REVERT v298(0x0) v298(0x0)
----------------------------------

Begin block 0x29c
prev = {'0x285'}, next = {'0x2cc', '0x2c8'}
----------------------------------
Block 0x29c
0x29d: v29d(0x1) = CONST 
0x29f: v29f(0x1) = CONST 
0x2a1: v2a1(0xa0) = CONST 
0x2a3: v2a3(0x10000000000000000000000000000000000000000) = SHL v2a1(0xa0) v29f(0x1)
0x2a4: v2a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a3(0x10000000000000000000000000000000000000000) v29d(0x1)
0x2a6: v2a6 = CALLDATALOAD v28a(0x4)
0x2a7: v2a7 = AND v2a6 v2a4(0xffffffffffffffffffffffffffffffffffffffff)
0x2a9: v2a9(0x20) = CONST 
0x2ac: v2ac = ADD v28a(0x4) v2a9(0x20)
0x2ad: v2ad = CALLDATALOAD v2ac
0x2b0: v2b0 = ADD v28a(0x4) v28e
0x2b2: v2b2(0x60) = CONST 
0x2b5: v2b5 = ADD v28a(0x4) v2b2(0x60)
0x2b6: v2b6(0x40) = CONST 
0x2b9: v2b9 = ADD v28a(0x4) v2b6(0x40)
0x2ba: v2ba = CALLDATALOAD v2b9
0x2bb: v2bb(0x100000000) = CONST 
0x2c2: v2c2 = GT v2ba v2bb(0x100000000)
0x2c3: v2c3 = ISZERO v2c2
0x2c4: v2c4(0x2cc) = CONST 
0x2c7: JUMPI v2c4(0x2cc) v2c3
----------------------------------

Begin block 0x2c8
prev = {'0x29c'}, next = {}
----------------------------------
Block 0x2c8
0x2c8: v2c8(0x0) = CONST 
0x2cb: REVERT v2c8(0x0) v2c8(0x0)
----------------------------------

Begin block 0x2cc
prev = {'0x29c'}, next = {'0x2da', '0x2de'}
----------------------------------
Block 0x2cc
0x2ce: v2ce = ADD v28a(0x4) v2ba
0x2d0: v2d0(0x20) = CONST 
0x2d3: v2d3 = ADD v2ce v2d0(0x20)
0x2d4: v2d4 = GT v2d3 v2b0
0x2d5: v2d5 = ISZERO v2d4
0x2d6: v2d6(0x2de) = CONST 
0x2d9: JUMPI v2d6(0x2de) v2d5
----------------------------------

Begin block 0x2da
prev = {'0x2cc'}, next = {}
----------------------------------
Block 0x2da
0x2da: v2da(0x0) = CONST 
0x2dd: REVERT v2da(0x0) v2da(0x0)
----------------------------------

Begin block 0x2de
prev = {'0x2cc'}, next = {'0x2fc', '0x300'}
----------------------------------
Block 0x2de
0x2e0: v2e0 = CALLDATALOAD v2ce
0x2e2: v2e2(0x20) = CONST 
0x2e4: v2e4 = ADD v2e2(0x20) v2ce
0x2e7: v2e7(0x1) = CONST 
0x2ea: v2ea = MUL v2e0 v2e7(0x1)
0x2ec: v2ec = ADD v2e4 v2ea
0x2ed: v2ed = GT v2ec v2b0
0x2ee: v2ee(0x100000000) = CONST 
0x2f5: v2f5 = GT v2e0 v2ee(0x100000000)
0x2f6: v2f6 = OR v2f5 v2ed
0x2f7: v2f7 = ISZERO v2f6
0x2f8: v2f8(0x300) = CONST 
0x2fb: JUMPI v2f8(0x300) v2f7
----------------------------------

Begin block 0x2fc
prev = {'0x2de'}, next = {}
----------------------------------
Block 0x2fc
0x2fc: v2fc(0x0) = CONST 
0x2ff: REVERT v2fc(0x0) v2fc(0x0)
----------------------------------

Begin block 0x300
prev = {'0x2de'}, next = {'0x7b1'}
----------------------------------
Block 0x300
0x305: v305(0x1f) = CONST 
0x307: v307 = ADD v305(0x1f) v2e0
0x308: v308(0x20) = CONST 
0x30c: v30c = DIV v307 v308(0x20)
0x30d: v30d = MUL v30c v308(0x20)
0x30e: v30e(0x20) = CONST 
0x310: v310 = ADD v30e(0x20) v30d
0x311: v311(0x40) = CONST 
0x313: v313 = MLOAD v311(0x40)
0x316: v316 = ADD v313 v310
0x317: v317(0x40) = CONST 
0x319: MSTORE v317(0x40) v316
0x321: MSTORE v313 v2e0
0x322: v322(0x20) = CONST 
0x324: v324 = ADD v322(0x20) v313
0x32a: CALLDATACOPY v324 v2e4 v2e0
0x32b: v32b(0x0) = CONST 
0x32e: v32e = ADD v324 v2e0
0x332: MSTORE v32e v32b(0x0)
0x337: v337(0x7b1) = CONST 
0x340: JUMP v337(0x7b1)
----------------------------------

Begin block 0x341
prev = {}, next = {'0x349', '0x34d'}
----------------------------------
function withdrawTokensTransfer(address,address,uint256)()
Block 0x341
0x342: v342 = CALLVALUE 
0x344: v344 = ISZERO v342
0x345: v345(0x34d) = CONST 
0x348: JUMPI v345(0x34d) v344
----------------------------------

Begin block 0x349
prev = {'0x341'}, next = {}
----------------------------------
Block 0x349
0x349: v349(0x0) = CONST 
0x34c: REVERT v349(0x0) v349(0x0)
----------------------------------

Begin block 0x34d
prev = {'0x341'}, next = {'0x364', '0x360'}
----------------------------------
Block 0x34d
0x34f: v34f(0xdd) = CONST 
0x352: v352(0x4) = CONST 
0x355: v355 = CALLDATASIZE 
0x356: v356 = SUB v355 v352(0x4)
0x357: v357(0x60) = CONST 
0x35a: v35a = LT v356 v357(0x60)
0x35b: v35b = ISZERO v35a
0x35c: v35c(0x364) = CONST 
0x35f: JUMPI v35c(0x364) v35b
----------------------------------

Begin block 0x360
prev = {'0x34d'}, next = {}
----------------------------------
Block 0x360
0x360: v360(0x0) = CONST 
0x363: REVERT v360(0x0) v360(0x0)
----------------------------------

Begin block 0x364
prev = {'0x34d'}, next = {'0x9a7'}
----------------------------------
Block 0x364
0x366: v366(0x1) = CONST 
0x368: v368(0x1) = CONST 
0x36a: v36a(0xa0) = CONST 
0x36c: v36c(0x10000000000000000000000000000000000000000) = SHL v36a(0xa0) v368(0x1)
0x36d: v36d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v36c(0x10000000000000000000000000000000000000000) v366(0x1)
0x36f: v36f = CALLDATALOAD v352(0x4)
0x371: v371 = AND v36d(0xffffffffffffffffffffffffffffffffffffffff) v36f
0x373: v373(0x20) = CONST 
0x376: v376 = ADD v352(0x4) v373(0x20)
0x377: v377 = CALLDATALOAD v376
0x37a: v37a = AND v36d(0xffffffffffffffffffffffffffffffffffffffff) v377
0x37c: v37c(0x40) = CONST 
0x37e: v37e = ADD v37c(0x40) v352(0x4)
0x37f: v37f = CALLDATALOAD v37e
0x380: v380(0x9a7) = CONST 
0x383: JUMP v380(0x9a7)
----------------------------------

Begin block 0x384
prev = {}, next = {'0x38c', '0x390'}
----------------------------------
function setTokenHolder(address)()
Block 0x384
0x385: v385 = CALLVALUE 
0x387: v387 = ISZERO v385
0x388: v388(0x390) = CONST 
0x38b: JUMPI v388(0x390) v387
----------------------------------

Begin block 0x38c
prev = {'0x384'}, next = {}
----------------------------------
Block 0x38c
0x38c: v38c(0x0) = CONST 
0x38f: REVERT v38c(0x0) v38c(0x0)
----------------------------------

Begin block 0x390
prev = {'0x384'}, next = {'0x3a7', '0x3a3'}
----------------------------------
Block 0x390
0x392: v392(0xdd) = CONST 
0x395: v395(0x4) = CONST 
0x398: v398 = CALLDATASIZE 
0x399: v399 = SUB v398 v395(0x4)
0x39a: v39a(0x20) = CONST 
0x39d: v39d = LT v399 v39a(0x20)
0x39e: v39e = ISZERO v39d
0x39f: v39f(0x3a7) = CONST 
0x3a2: JUMPI v39f(0x3a7) v39e
----------------------------------

Begin block 0x3a3
prev = {'0x390'}, next = {}
----------------------------------
Block 0x3a3
0x3a3: v3a3(0x0) = CONST 
0x3a6: REVERT v3a3(0x0) v3a3(0x0)
----------------------------------

Begin block 0x3a7
prev = {'0x390'}, next = {'0xa4e'}
----------------------------------
Block 0x3a7
0x3a9: v3a9 = CALLDATALOAD v395(0x4)
0x3aa: v3aa(0x1) = CONST 
0x3ac: v3ac(0x1) = CONST 
0x3ae: v3ae(0xa0) = CONST 
0x3b0: v3b0(0x10000000000000000000000000000000000000000) = SHL v3ae(0xa0) v3ac(0x1)
0x3b1: v3b1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b0(0x10000000000000000000000000000000000000000) v3aa(0x1)
0x3b2: v3b2 = AND v3b1(0xffffffffffffffffffffffffffffffffffffffff) v3a9
0x3b3: v3b3(0xa4e) = CONST 
0x3b6: JUMP v3b3(0xa4e)
----------------------------------

Begin block 0x3b7
prev = {}, next = {'0x3c3', '0x3bf'}
----------------------------------
function transferOwnership(address)()
Block 0x3b7
0x3b8: v3b8 = CALLVALUE 
0x3ba: v3ba = ISZERO v3b8
0x3bb: v3bb(0x3c3) = CONST 
0x3be: JUMPI v3bb(0x3c3) v3ba
----------------------------------

Begin block 0x3bf
prev = {'0x3b7'}, next = {}
----------------------------------
Block 0x3bf
0x3bf: v3bf(0x0) = CONST 
0x3c2: REVERT v3bf(0x0) v3bf(0x0)
----------------------------------

Begin block 0x3c3
prev = {'0x3b7'}, next = {'0x3da', '0x3d6'}
----------------------------------
Block 0x3c3
0x3c5: v3c5(0xdd) = CONST 
0x3c8: v3c8(0x4) = CONST 
0x3cb: v3cb = CALLDATASIZE 
0x3cc: v3cc = SUB v3cb v3c8(0x4)
0x3cd: v3cd(0x20) = CONST 
0x3d0: v3d0 = LT v3cc v3cd(0x20)
0x3d1: v3d1 = ISZERO v3d0
0x3d2: v3d2(0x3da) = CONST 
0x3d5: JUMPI v3d2(0x3da) v3d1
----------------------------------

Begin block 0x3d6
prev = {'0x3c3'}, next = {}
----------------------------------
Block 0x3d6
0x3d6: v3d6(0x0) = CONST 
0x3d9: REVERT v3d6(0x0) v3d6(0x0)
----------------------------------

Begin block 0x3da
prev = {'0x3c3'}, next = {'0xab7'}
----------------------------------
Block 0x3da
0x3dc: v3dc = CALLDATALOAD v3c8(0x4)
0x3dd: v3dd(0x1) = CONST 
0x3df: v3df(0x1) = CONST 
0x3e1: v3e1(0xa0) = CONST 
0x3e3: v3e3(0x10000000000000000000000000000000000000000) = SHL v3e1(0xa0) v3df(0x1)
0x3e4: v3e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3e3(0x10000000000000000000000000000000000000000) v3dd(0x1)
0x3e5: v3e5 = AND v3e4(0xffffffffffffffffffffffffffffffffffffffff) v3dc
0x3e6: v3e6(0xab7) = CONST 
0x3e9: JUMP v3e6(0xab7)
----------------------------------

Begin block 0x3ea
prev = {}, next = {'0x3f6', '0x3f2'}
----------------------------------
function token()()
Block 0x3ea
0x3eb: v3eb = CALLVALUE 
0x3ed: v3ed = ISZERO v3eb
0x3ee: v3ee(0x3f6) = CONST 
0x3f1: JUMPI v3ee(0x3f6) v3ed
----------------------------------

Begin block 0x3f2
prev = {'0x3ea'}, next = {}
----------------------------------
Block 0x3f2
0x3f2: v3f2(0x0) = CONST 
0x3f5: REVERT v3f2(0x0) v3f2(0x0)
----------------------------------

Begin block 0x3f6
prev = {'0x3ea'}, next = {'0xb0a'}
----------------------------------
Block 0x3f6
0x3f8: v3f8(0x145) = CONST 
0x3fb: v3fb(0xb0a) = CONST 
0x3fe: JUMP v3fb(0xb0a)
----------------------------------

Begin block 0x3ff
prev = {'0xeb'}, next = {'0xf4'}
----------------------------------
Block 0x3ff
0x400: v400(0x3) = CONST 
0x402: v402 = SLOAD v400(0x3)
0x404: JUMP ved(0xf4)
----------------------------------

Begin block 0x405
prev = {'0x129'}, next = {'0x40d'}
----------------------------------
Block 0x405
0x406: v406(0x40d) = CONST 
0x409: v409(0x7a0) = CONST 
0x40c: v40c_0 = CALLPRIVATE v409(0x7a0) v406(0x40d)
----------------------------------

Begin block 0x40d
prev = {'0x405'}, next = {'0x44c', '0x412'}
----------------------------------
Block 0x40d
0x40e: v40e(0x44c) = CONST 
0x411: JUMPI v40e(0x44c) v40c_0
----------------------------------

Begin block 0x412
prev = {'0x40d'}, next = {}
----------------------------------
Block 0x412
0x412: v412(0x40) = CONST 
0x415: v415 = MLOAD v412(0x40)
0x416: v416(0x461bcd) = CONST 
0x41a: v41a(0xe5) = CONST 
0x41c: v41c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v41a(0xe5) v416(0x461bcd)
0x41e: MSTORE v415 v41c(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x41f: v41f(0x20) = CONST 
0x421: v421(0x4) = CONST 
0x424: v424 = ADD v415 v421(0x4)
0x427: MSTORE v424 v41f(0x20)
0x428: v428(0x24) = CONST 
0x42b: v42b = ADD v415 v428(0x24)
0x42c: MSTORE v42b v41f(0x20)
0x42d: v42d(0x0) = CONST 
0x430: v430 = MLOAD v42d(0x0)
0x431: v431(0x20) = CONST 
0x433: v433(0xccd) = CONST 
0x43b: MSTORE v42d(0x0) v430
0x43c: v43c(0x44) = CONST 
0x43f: v43f = ADD v415 v43c(0x44)
0x440: MSTORE v43f vd69(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x442: v442 = MLOAD v412(0x40)
0x446: v446 = SUB v415 v442
0x447: v447(0x64) = CONST 
0x449: v449 = ADD v447(0x64) v446
0x44b: REVERT v442 v449
0xd69: vd69(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x44c
prev = {'0x40d'}, next = {'0xdd0x106'}
----------------------------------
Block 0x44c
0x44d: v44d(0x3) = CONST 
0x44f: SSTORE v44d(0x3) v12b
0x450: JUMP v114(0xdd)
----------------------------------

Begin block 0x451
prev = {'0x13c'}, next = {'0x1450x130'}
----------------------------------
Block 0x451
0x452: v452(0x2) = CONST 
0x454: v454 = SLOAD v452(0x2)
0x455: v455(0x1) = CONST 
0x457: v457(0x1) = CONST 
0x459: v459(0xa0) = CONST 
0x45b: v45b(0x10000000000000000000000000000000000000000) = SHL v459(0xa0) v457(0x1)
0x45c: v45c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v45b(0x10000000000000000000000000000000000000000) v455(0x1)
0x45d: v45d = AND v45c(0xffffffffffffffffffffffffffffffffffffffff) v454
0x45f: JUMP v13e(0x145)
----------------------------------

Begin block 0x460
prev = {'0x184'}, next = {'0x468'}
----------------------------------
Block 0x460
0x461: v461(0x468) = CONST 
0x464: v464(0x7a0) = CONST 
0x467: v467_0 = CALLPRIVATE v464(0x7a0) v461(0x468)
----------------------------------

Begin block 0x468
prev = {'0x460'}, next = {'0x46d', '0x4a7'}
----------------------------------
Block 0x468
0x469: v469(0x4a7) = CONST 
0x46c: JUMPI v469(0x4a7) v467_0
----------------------------------

Begin block 0x46d
prev = {'0x468'}, next = {}
----------------------------------
Block 0x46d
0x46d: v46d(0x40) = CONST 
0x470: v470 = MLOAD v46d(0x40)
0x471: v471(0x461bcd) = CONST 
0x475: v475(0xe5) = CONST 
0x477: v477(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v475(0xe5) v471(0x461bcd)
0x479: MSTORE v470 v477(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x47a: v47a(0x20) = CONST 
0x47c: v47c(0x4) = CONST 
0x47f: v47f = ADD v470 v47c(0x4)
0x482: MSTORE v47f v47a(0x20)
0x483: v483(0x24) = CONST 
0x486: v486 = ADD v470 v483(0x24)
0x487: MSTORE v486 v47a(0x20)
0x488: v488(0x0) = CONST 
0x48b: v48b = MLOAD v488(0x0)
0x48c: v48c(0x20) = CONST 
0x48e: v48e(0xccd) = CONST 
0x496: MSTORE v488(0x0) v48b
0x497: v497(0x44) = CONST 
0x49a: v49a = ADD v470 v497(0x44)
0x49b: MSTORE v49a vd6e(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x49d: v49d = MLOAD v46d(0x40)
0x4a1: v4a1 = SUB v470 v49d
0x4a2: v4a2(0x64) = CONST 
0x4a4: v4a4 = ADD v4a2(0x64) v4a1
0x4a6: REVERT v49d v4a4
0xd6e: vd6e(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x4a7
prev = {'0x468'}, next = {'0x4ba', '0x4b6'}
----------------------------------
Block 0x4a7
0x4a8: v4a8(0x1) = CONST 
0x4aa: v4aa(0x1) = CONST 
0x4ac: v4ac(0xa0) = CONST 
0x4ae: v4ae(0x10000000000000000000000000000000000000000) = SHL v4ac(0xa0) v4aa(0x1)
0x4af: v4af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ae(0x10000000000000000000000000000000000000000) v4a8(0x1)
0x4b1: v4b1 = AND v190 v4af(0xffffffffffffffffffffffffffffffffffffffff)
0x4b2: v4b2(0x4ba) = CONST 
0x4b5: JUMPI v4b2(0x4ba) v4b1
----------------------------------

Begin block 0x4b6
prev = {'0x4a7'}, next = {}
----------------------------------
Block 0x4b6
0x4b6: v4b6(0x0) = CONST 
0x4b9: REVERT v4b6(0x0) v4b6(0x0)
----------------------------------

Begin block 0x4ba
prev = {'0x4a7'}, next = {'0x4c4', '0x4c8'}
----------------------------------
Block 0x4ba
0x4bb: v4bb = ADDRESS 
0x4bc: v4bc = BALANCE v4bb
0x4be: v4be = GT v195 v4bc
0x4bf: v4bf = ISZERO v4be
0x4c0: v4c0(0x4c8) = CONST 
0x4c3: JUMPI v4c0(0x4c8) v4bf
----------------------------------

Begin block 0x4c4
prev = {'0x4ba'}, next = {}
----------------------------------
Block 0x4c4
0x4c4: v4c4(0x0) = CONST 
0x4c7: REVERT v4c4(0x0) v4c4(0x0)
----------------------------------

Begin block 0x4c8
prev = {'0x4ba'}, next = {'0x4fe', '0x4f5'}
----------------------------------
Block 0x4c8
0x4c9: v4c9(0x40) = CONST 
0x4cb: v4cb = MLOAD v4c9(0x40)
0x4cc: v4cc(0x1) = CONST 
0x4ce: v4ce(0x1) = CONST 
0x4d0: v4d0(0xa0) = CONST 
0x4d2: v4d2(0x10000000000000000000000000000000000000000) = SHL v4d0(0xa0) v4ce(0x1)
0x4d3: v4d3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4d2(0x10000000000000000000000000000000000000000) v4cc(0x1)
0x4d5: v4d5 = AND v190 v4d3(0xffffffffffffffffffffffffffffffffffffffff)
0x4d8: v4d8 = ISZERO v195
0x4d9: v4d9(0x8fc) = CONST 
0x4dc: v4dc = MUL v4d9(0x8fc) v4d8
0x4e0: v4e0(0x0) = CONST 
0x4e8: v4e8 = CALL v4dc v4d5 v195 v4cb v4e0(0x0) v4cb v4e0(0x0)
0x4ee: v4ee = ISZERO v4e8
0x4f0: v4f0 = ISZERO v4ee
0x4f1: v4f1(0x4fe) = CONST 
0x4f4: JUMPI v4f1(0x4fe) v4f0
----------------------------------

Begin block 0x4f5
prev = {'0x4c8'}, next = {}
----------------------------------
Block 0x4f5
0x4f5: v4f5 = RETURNDATASIZE 
0x4f6: v4f6(0x0) = CONST 
0x4f9: RETURNDATACOPY v4f6(0x0) v4f6(0x0) v4f5
0x4fa: v4fa = RETURNDATASIZE 
0x4fb: v4fb(0x0) = CONST 
0x4fd: REVERT v4fb(0x0) v4fa
----------------------------------

Begin block 0x4fe
prev = {'0x4c8'}, next = {'0xdd0x161'}
----------------------------------
Block 0x4fe
0x500: v500(0x40) = CONST 
0x503: v503 = MLOAD v500(0x40)
0x506: MSTORE v503 v195
0x508: v508 = MLOAD v500(0x40)
0x509: v509(0x1) = CONST 
0x50b: v50b(0x1) = CONST 
0x50d: v50d(0xa0) = CONST 
0x50f: v50f(0x10000000000000000000000000000000000000000) = SHL v50d(0xa0) v50b(0x1)
0x510: v510(0xffffffffffffffffffffffffffffffffffffffff) = SUB v50f(0x10000000000000000000000000000000000000000) v509(0x1)
0x512: v512 = AND v190 v510(0xffffffffffffffffffffffffffffffffffffffff)
0x514: v514(0xdb35132c111efe920cede025e819975671cfd1b8fcc1174762c8670c4e94c211) = CONST 
0x539: v539 = SUB v503 v508
0x53a: v53a(0x20) = CONST 
0x53c: v53c = ADD v53a(0x20) v539
0x53e: LOG2 v508 v53c v514(0xdb35132c111efe920cede025e819975671cfd1b8fcc1174762c8670c4e94c211) v512
0x541: JUMP v16f(0xdd)
----------------------------------

Begin block 0x542
prev = {'0x1bd'}, next = {'0x54a'}
----------------------------------
Block 0x542
0x543: v543(0x54a) = CONST 
0x546: v546(0x7a0) = CONST 
0x549: v549_0 = CALLPRIVATE v546(0x7a0) v543(0x54a)
----------------------------------

Begin block 0x54a
prev = {'0x542'}, next = {'0x54f', '0x589'}
----------------------------------
Block 0x54a
0x54b: v54b(0x589) = CONST 
0x54e: JUMPI v54b(0x589) v549_0
----------------------------------

Begin block 0x54f
prev = {'0x54a'}, next = {}
----------------------------------
Block 0x54f
0x54f: v54f(0x40) = CONST 
0x552: v552 = MLOAD v54f(0x40)
0x553: v553(0x461bcd) = CONST 
0x557: v557(0xe5) = CONST 
0x559: v559(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v557(0xe5) v553(0x461bcd)
0x55b: MSTORE v552 v559(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x55c: v55c(0x20) = CONST 
0x55e: v55e(0x4) = CONST 
0x561: v561 = ADD v552 v55e(0x4)
0x564: MSTORE v561 v55c(0x20)
0x565: v565(0x24) = CONST 
0x568: v568 = ADD v552 v565(0x24)
0x569: MSTORE v568 v55c(0x20)
0x56a: v56a(0x0) = CONST 
0x56d: v56d = MLOAD v56a(0x0)
0x56e: v56e(0x20) = CONST 
0x570: v570(0xccd) = CONST 
0x578: MSTORE v56a(0x0) v56d
0x579: v579(0x44) = CONST 
0x57c: v57c = ADD v552 v579(0x44)
0x57d: MSTORE v57c vd73(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x57f: v57f = MLOAD v54f(0x40)
0x583: v583 = SUB v552 v57f
0x584: v584(0x64) = CONST 
0x586: v586 = ADD v584(0x64) v583
0x588: REVERT v57f v586
0xd73: vd73(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x589
prev = {'0x54a'}, next = {'0x5e0', '0x5e4'}
----------------------------------
Block 0x589
0x58a: v58a(0x40) = CONST 
0x58d: v58d = MLOAD v58a(0x40)
0x58e: v58e(0x23b872dd) = CONST 
0x593: v593(0xe0) = CONST 
0x595: v595(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v593(0xe0) v58e(0x23b872dd)
0x597: MSTORE v58d v595(0x23b872dd00000000000000000000000000000000000000000000000000000000)
0x598: v598(0x1) = CONST 
0x59a: v59a(0x1) = CONST 
0x59c: v59c(0xa0) = CONST 
0x59e: v59e(0x10000000000000000000000000000000000000000) = SHL v59c(0xa0) v59a(0x1)
0x59f: v59f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v59e(0x10000000000000000000000000000000000000000) v598(0x1)
0x5a2: v5a2 = AND v59f(0xffffffffffffffffffffffffffffffffffffffff) v1d2
0x5a3: v5a3(0x4) = CONST 
0x5a6: v5a6 = ADD v58d v5a3(0x4)
0x5a7: MSTORE v5a6 v5a2
0x5aa: v5aa = AND v59f(0xffffffffffffffffffffffffffffffffffffffff) v1d9
0x5ab: v5ab(0x24) = CONST 
0x5ae: v5ae = ADD v58d v5ab(0x24)
0x5af: MSTORE v5ae v5aa
0x5b0: v5b0(0x44) = CONST 
0x5b3: v5b3 = ADD v58d v5b0(0x44)
0x5b6: MSTORE v5b3 v1de
0x5b8: v5b8 = MLOAD v58a(0x40)
0x5bb: v5bb = AND v1ca v59f(0xffffffffffffffffffffffffffffffffffffffff)
0x5bd: v5bd(0x23b872dd) = CONST 
0x5c3: v5c3(0x64) = CONST 
0x5c7: v5c7 = ADD v58d v5c3(0x64)
0x5c9: v5c9(0x20) = CONST 
0x5d1: v5d1 = SUB v58d v5b8
0x5d2: v5d2 = ADD v5d1 v5c3(0x64)
0x5d4: v5d4(0x0) = CONST 
0x5d8: v5d8 = EXTCODESIZE v5bb
0x5d9: v5d9 = ISZERO v5d8
0x5db: v5db = ISZERO v5d9
0x5dc: v5dc(0x5e4) = CONST 
0x5df: JUMPI v5dc(0x5e4) v5db
----------------------------------

Begin block 0x5e0
prev = {'0x589'}, next = {}
----------------------------------
Block 0x5e0
0x5e0: v5e0(0x0) = CONST 
0x5e3: REVERT v5e0(0x0) v5e0(0x0)
----------------------------------

Begin block 0x5e4
prev = {'0x589'}, next = {'0x5f8', '0x5ef'}
----------------------------------
Block 0x5e4
0x5e6: v5e6 = GAS 
0x5e7: v5e7 = CALL v5e6 v5bb v5d4(0x0) v5b8 v5d2 v5b8 v5c9(0x20)
0x5e8: v5e8 = ISZERO v5e7
0x5ea: v5ea = ISZERO v5e8
0x5eb: v5eb(0x5f8) = CONST 
0x5ee: JUMPI v5eb(0x5f8) v5ea
----------------------------------

Begin block 0x5ef
prev = {'0x5e4'}, next = {}
----------------------------------
Block 0x5ef
0x5ef: v5ef = RETURNDATASIZE 
0x5f0: v5f0(0x0) = CONST 
0x5f3: RETURNDATACOPY v5f0(0x0) v5f0(0x0) v5ef
0x5f4: v5f4 = RETURNDATASIZE 
0x5f5: v5f5(0x0) = CONST 
0x5f7: REVERT v5f5(0x0) v5f4
----------------------------------

Begin block 0x5f8
prev = {'0x5e4'}, next = {'0x60a', '0x60e'}
----------------------------------
Block 0x5f8
0x5fd: v5fd(0x40) = CONST 
0x5ff: v5ff = MLOAD v5fd(0x40)
0x600: v600 = RETURNDATASIZE 
0x601: v601(0x20) = CONST 
0x604: v604 = LT v600 v601(0x20)
0x605: v605 = ISZERO v604
0x606: v606(0x60e) = CONST 
0x609: JUMPI v606(0x60e) v605
----------------------------------

Begin block 0x60a
prev = {'0x5f8'}, next = {}
----------------------------------
Block 0x60a
0x60a: v60a(0x0) = CONST 
0x60d: REVERT v60a(0x0) v60a(0x0)
----------------------------------

Begin block 0x60e
prev = {'0x5f8'}, next = {'0x619', '0x615'}
----------------------------------
Block 0x60e
0x610: v610 = MLOAD v5ff
0x611: v611(0x619) = CONST 
0x614: JUMPI v611(0x619) v610
----------------------------------

Begin block 0x615
prev = {'0x60e'}, next = {}
----------------------------------
Block 0x615
0x615: v615(0x0) = CONST 
0x618: REVERT v615(0x0) v615(0x0)
----------------------------------

Begin block 0x619
prev = {'0x60e'}, next = {'0xdd0x19a'}
----------------------------------
Block 0x619
0x61e: JUMP v1a8(0xdd)
----------------------------------

Begin block 0x61f
prev = {'0x1ef'}, next = {'0x627'}
----------------------------------
Block 0x61f
0x620: v620(0x627) = CONST 
0x623: v623(0x7a0) = CONST 
0x626: v626_0 = CALLPRIVATE v623(0x7a0) v620(0x627)
----------------------------------

Begin block 0x627
prev = {'0x61f'}, next = {'0x666', '0x62c'}
----------------------------------
Block 0x627
0x628: v628(0x666) = CONST 
0x62b: JUMPI v628(0x666) v626_0
----------------------------------

Begin block 0x62c
prev = {'0x627'}, next = {}
----------------------------------
Block 0x62c
0x62c: v62c(0x40) = CONST 
0x62f: v62f = MLOAD v62c(0x40)
0x630: v630(0x461bcd) = CONST 
0x634: v634(0xe5) = CONST 
0x636: v636(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v634(0xe5) v630(0x461bcd)
0x638: MSTORE v62f v636(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x639: v639(0x20) = CONST 
0x63b: v63b(0x4) = CONST 
0x63e: v63e = ADD v62f v63b(0x4)
0x641: MSTORE v63e v639(0x20)
0x642: v642(0x24) = CONST 
0x645: v645 = ADD v62f v642(0x24)
0x646: MSTORE v645 v639(0x20)
0x647: v647(0x0) = CONST 
0x64a: v64a = MLOAD v647(0x0)
0x64b: v64b(0x20) = CONST 
0x64d: v64d(0xccd) = CONST 
0x655: MSTORE v647(0x0) v64a
0x656: v656(0x44) = CONST 
0x659: v659 = ADD v62f v656(0x44)
0x65a: MSTORE v659 vd78(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x65c: v65c = MLOAD v62c(0x40)
0x660: v660 = SUB v62f v65c
0x661: v661(0x64) = CONST 
0x663: v663 = ADD v661(0x64) v660
0x665: REVERT v65c v663
0xd78: vd78(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x666
prev = {'0x627'}, next = {'0xdd0x1e3'}
----------------------------------
Block 0x666
0x667: v667(0x0) = CONST 
0x66a: v66a = SLOAD v667(0x0)
0x66b: v66b(0x40) = CONST 
0x66d: v66d = MLOAD v66b(0x40)
0x66e: v66e(0x1) = CONST 
0x670: v670(0x1) = CONST 
0x672: v672(0xa0) = CONST 
0x674: v674(0x10000000000000000000000000000000000000000) = SHL v672(0xa0) v670(0x1)
0x675: v675(0xffffffffffffffffffffffffffffffffffffffff) = SUB v674(0x10000000000000000000000000000000000000000) v66e(0x1)
0x678: v678 = AND v66a v675(0xffffffffffffffffffffffffffffffffffffffff)
0x67a: v67a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x69e: LOG3 v66d v667(0x0) v67a(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v678 v667(0x0)
0x69f: v69f(0x0) = CONST 
0x6a2: v6a2 = SLOAD v69f(0x0)
0x6a3: v6a3(0x1) = CONST 
0x6a5: v6a5(0x1) = CONST 
0x6a7: v6a7(0xa0) = CONST 
0x6a9: v6a9(0x10000000000000000000000000000000000000000) = SHL v6a7(0xa0) v6a5(0x1)
0x6aa: v6aa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6a9(0x10000000000000000000000000000000000000000) v6a3(0x1)
0x6ab: v6ab(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6aa(0xffffffffffffffffffffffffffffffffffffffff)
0x6ac: v6ac = AND v6ab(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v6a2
0x6ae: SSTORE v69f(0x0) v6ac
0x6af: JUMP v1f1(0xdd)
----------------------------------

Begin block 0x6b0
prev = {'0x21b'}, next = {'0x6b8'}
----------------------------------
Block 0x6b0
0x6b1: v6b1(0x6b8) = CONST 
0x6b4: v6b4(0x7a0) = CONST 
0x6b7: v6b7_0 = CALLPRIVATE v6b4(0x7a0) v6b1(0x6b8)
----------------------------------

Begin block 0x6b8
prev = {'0x6b0'}, next = {'0x6f7', '0x6bd'}
----------------------------------
Block 0x6b8
0x6b9: v6b9(0x6f7) = CONST 
0x6bc: JUMPI v6b9(0x6f7) v6b7_0
----------------------------------

Begin block 0x6bd
prev = {'0x6b8'}, next = {}
----------------------------------
Block 0x6bd
0x6bd: v6bd(0x40) = CONST 
0x6c0: v6c0 = MLOAD v6bd(0x40)
0x6c1: v6c1(0x461bcd) = CONST 
0x6c5: v6c5(0xe5) = CONST 
0x6c7: v6c7(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6c5(0xe5) v6c1(0x461bcd)
0x6c9: MSTORE v6c0 v6c7(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x6ca: v6ca(0x20) = CONST 
0x6cc: v6cc(0x4) = CONST 
0x6cf: v6cf = ADD v6c0 v6cc(0x4)
0x6d2: MSTORE v6cf v6ca(0x20)
0x6d3: v6d3(0x24) = CONST 
0x6d6: v6d6 = ADD v6c0 v6d3(0x24)
0x6d7: MSTORE v6d6 v6ca(0x20)
0x6d8: v6d8(0x0) = CONST 
0x6db: v6db = MLOAD v6d8(0x0)
0x6dc: v6dc(0x20) = CONST 
0x6de: v6de(0xccd) = CONST 
0x6e6: MSTORE v6d8(0x0) v6db
0x6e7: v6e7(0x44) = CONST 
0x6ea: v6ea = ADD v6c0 v6e7(0x44)
0x6eb: MSTORE v6ea vd7d(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x6ed: v6ed = MLOAD v6bd(0x40)
0x6f1: v6f1 = SUB v6c0 v6ed
0x6f2: v6f2(0x64) = CONST 
0x6f4: v6f4 = ADD v6f2(0x64) v6f1
0x6f6: REVERT v6ed v6f4
0xd7d: vd7d(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x6f7
prev = {'0x6b8'}, next = {'0x753', '0x7570x1f8'}
----------------------------------
Block 0x6f7
0x6f9: v6f9(0x1) = CONST 
0x6fb: v6fb(0x1) = CONST 
0x6fd: v6fd(0xa0) = CONST 
0x6ff: v6ff(0x10000000000000000000000000000000000000000) = SHL v6fd(0xa0) v6fb(0x1)
0x700: v700(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6ff(0x10000000000000000000000000000000000000000) v6f9(0x1)
0x701: v701 = AND v700(0xffffffffffffffffffffffffffffffffffffffff) v228
0x702: v702(0x95ea7b3) = CONST 
0x709: v709(0x40) = CONST 
0x70b: v70b = MLOAD v709(0x40)
0x70d: v70d(0xffffffff) = CONST 
0x712: v712(0x95ea7b3) = AND v70d(0xffffffff) v702(0x95ea7b3)
0x713: v713(0xe0) = CONST 
0x715: v715(0x95ea7b300000000000000000000000000000000000000000000000000000000) = SHL v713(0xe0) v712(0x95ea7b3)
0x717: MSTORE v70b v715(0x95ea7b300000000000000000000000000000000000000000000000000000000)
0x718: v718(0x4) = CONST 
0x71a: v71a = ADD v718(0x4) v70b
0x71d: v71d(0x1) = CONST 
0x71f: v71f(0x1) = CONST 
0x721: v721(0xa0) = CONST 
0x723: v723(0x10000000000000000000000000000000000000000) = SHL v721(0xa0) v71f(0x1)
0x724: v724(0xffffffffffffffffffffffffffffffffffffffff) = SUB v723(0x10000000000000000000000000000000000000000) v71d(0x1)
0x725: v725 = AND v724(0xffffffffffffffffffffffffffffffffffffffff) v231
0x726: v726(0x1) = CONST 
0x728: v728(0x1) = CONST 
0x72a: v72a(0xa0) = CONST 
0x72c: v72c(0x10000000000000000000000000000000000000000) = SHL v72a(0xa0) v728(0x1)
0x72d: v72d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v72c(0x10000000000000000000000000000000000000000) v726(0x1)
0x72e: v72e = AND v72d(0xffffffffffffffffffffffffffffffffffffffff) v725
0x730: MSTORE v71a v72e
0x731: v731(0x20) = CONST 
0x733: v733 = ADD v731(0x20) v71a
0x736: MSTORE v733 v236
0x737: v737(0x20) = CONST 
0x739: v739 = ADD v737(0x20) v733
0x73e: v73e(0x20) = CONST 
0x740: v740(0x40) = CONST 
0x742: v742 = MLOAD v740(0x40)
0x745: v745 = SUB v739 v742
0x747: v747(0x0) = CONST 
0x74b: v74b = EXTCODESIZE v701
0x74c: v74c = ISZERO v74b
0x74e: v74e = ISZERO v74c
0x74f: v74f(0x757) = CONST 
0x752: JUMPI v74f(0x757) v74e
----------------------------------

Begin block 0x753
prev = {'0x6f7'}, next = {}
----------------------------------
Block 0x753
0x753: v753(0x0) = CONST 
0x756: REVERT v753(0x0) v753(0x0)
----------------------------------

Begin block 0x7570x1f8
prev = {'0x6f7'}, next = {'0x7620x1f8', '0x76b0x1f8'}
----------------------------------
Block 0x7570x1f8
0x7590x1f8: v1f8759 = GAS 
0x75a0x1f8: v1f875a = CALL v1f8759 v701 v747(0x0) v742 v745 v742 v73e(0x20)
0x75b0x1f8: v1f875b = ISZERO v1f875a
0x75d0x1f8: v1f875d = ISZERO v1f875b
0x75e0x1f8: v1f875e(0x76b) = CONST 
0x7610x1f8: JUMPI v1f875e(0x76b) v1f875d
----------------------------------

Begin block 0x7570x341
prev = {'0x9ee'}, next = {'0x7620x341', '0x76b0x341'}
----------------------------------
Block 0x7570x341
0x7590x341: v341759 = GAS 
0x75a0x341: v34175a = CALL v341759 v9f8 va3e(0x0) va39 va3c va39 va35(0x20)
0x75b0x341: v34175b = ISZERO v34175a
0x75d0x341: v34175d = ISZERO v34175b
0x75e0x341: v34175e(0x76b) = CONST 
0x7610x341: JUMPI v34175e(0x76b) v34175d
----------------------------------

Begin block 0x7620x1f8
prev = {'0x7570x1f8'}, next = {}
----------------------------------
Block 0x7620x1f8
0x7620x1f8: v1f8762 = RETURNDATASIZE 
0x7630x1f8: v1f8763(0x0) = CONST 
0x7660x1f8: RETURNDATACOPY v1f8763(0x0) v1f8763(0x0) v1f8762
0x7670x1f8: v1f8767 = RETURNDATASIZE 
0x7680x1f8: v1f8768(0x0) = CONST 
0x76a0x1f8: REVERT v1f8768(0x0) v1f8767
----------------------------------

Begin block 0x7620x341
prev = {'0x7570x341'}, next = {}
----------------------------------
Block 0x7620x341
0x7620x341: v341762 = RETURNDATASIZE 
0x7630x341: v341763(0x0) = CONST 
0x7660x341: RETURNDATACOPY v341763(0x0) v341763(0x0) v341762
0x7670x341: v341767 = RETURNDATASIZE 
0x7680x341: v341768(0x0) = CONST 
0x76a0x341: REVERT v341768(0x0) v341767
----------------------------------

Begin block 0x76b0x1f8
prev = {'0x7570x1f8'}, next = {'0x7810x1f8', '0x77d0x1f8'}
----------------------------------
Block 0x76b0x1f8
0x7700x1f8: v1f8770(0x40) = CONST 
0x7720x1f8: v1f8772 = MLOAD v1f8770(0x40)
0x7730x1f8: v1f8773 = RETURNDATASIZE 
0x7740x1f8: v1f8774(0x20) = CONST 
0x7770x1f8: v1f8777 = LT v1f8773 v1f8774(0x20)
0x7780x1f8: v1f8778 = ISZERO v1f8777
0x7790x1f8: v1f8779(0x781) = CONST 
0x77c0x1f8: JUMPI v1f8779(0x781) v1f8778
----------------------------------

Begin block 0x76b0x341
prev = {'0x7570x341'}, next = {'0x7810x341', '0x77d0x341'}
----------------------------------
Block 0x76b0x341
0x7700x341: v341770(0x40) = CONST 
0x7720x341: v341772 = MLOAD v341770(0x40)
0x7730x341: v341773 = RETURNDATASIZE 
0x7740x341: v341774(0x20) = CONST 
0x7770x341: v341777 = LT v341773 v341774(0x20)
0x7780x341: v341778 = ISZERO v341777
0x7790x341: v341779(0x781) = CONST 
0x77c0x341: JUMPI v341779(0x781) v341778
----------------------------------

Begin block 0x77d0x1f8
prev = {'0x76b0x1f8'}, next = {}
----------------------------------
Block 0x77d0x1f8
0x77d0x1f8: v1f877d(0x0) = CONST 
0x7800x1f8: REVERT v1f877d(0x0) v1f877d(0x0)
----------------------------------

Begin block 0x77d0x341
prev = {'0x76b0x341'}, next = {}
----------------------------------
Block 0x77d0x341
0x77d0x341: v34177d(0x0) = CONST 
0x7800x341: REVERT v34177d(0x0) v34177d(0x0)
----------------------------------

Begin block 0x7810x1f8
prev = {'0x76b0x1f8'}, next = {'0x78c0x1f8', '0x7880x1f8'}
----------------------------------
Block 0x7810x1f8
0x7830x1f8: v1f8783 = MLOAD v1f8772
0x7840x1f8: v1f8784(0x78c) = CONST 
0x7870x1f8: JUMPI v1f8784(0x78c) v1f8783
----------------------------------

Begin block 0x7810x341
prev = {'0x76b0x341'}, next = {'0x78c0x341', '0x7880x341'}
----------------------------------
Block 0x7810x341
0x7830x341: v341783 = MLOAD v341772
0x7840x341: v341784(0x78c) = CONST 
0x7870x341: JUMPI v341784(0x78c) v341783
----------------------------------

Begin block 0x7880x1f8
prev = {'0x7810x1f8'}, next = {}
----------------------------------
Block 0x7880x1f8
0x7880x1f8: v1f8788(0x0) = CONST 
0x78b0x1f8: REVERT v1f8788(0x0) v1f8788(0x0)
----------------------------------

Begin block 0x7880x341
prev = {'0x7810x341'}, next = {}
----------------------------------
Block 0x7880x341
0x7880x341: v341788(0x0) = CONST 
0x78b0x341: REVERT v341788(0x0) v341788(0x0)
----------------------------------

Begin block 0x78c0x1f8
prev = {'0x7810x1f8'}, next = {'0xdd0x1f8'}
----------------------------------
Block 0x78c0x1f8
0x7900x1f8: JUMP v206(0xdd)
----------------------------------

Begin block 0x78c0x341
prev = {'0x7810x341'}, next = {'0xdd0x341'}
----------------------------------
Block 0x78c0x341
0x7900x341: JUMP v34f(0xdd)
----------------------------------

Begin block 0x791
prev = {'0x247'}, next = {'0x1450x23b'}
----------------------------------
Block 0x791
0x792: v792(0x0) = CONST 
0x794: v794 = SLOAD v792(0x0)
0x795: v795(0x1) = CONST 
0x797: v797(0x1) = CONST 
0x799: v799(0xa0) = CONST 
0x79b: v79b(0x10000000000000000000000000000000000000000) = SHL v799(0xa0) v797(0x1)
0x79c: v79c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v79b(0x10000000000000000000000000000000000000000) v795(0x1)
0x79d: v79d = AND v79c(0xffffffffffffffffffffffffffffffffffffffff) v794
0x79f: JUMP v249(0x145)
----------------------------------

Begin block 0x7a0
prev = {}, next = {}
----------------------------------
function 0x7a0(v7a0arg0)
Block 0x7a0
0x7a1: v7a1(0x0) = CONST 
0x7a3: v7a3 = SLOAD v7a1(0x0)
0x7a4: v7a4(0x1) = CONST 
0x7a6: v7a6(0x1) = CONST 
0x7a8: v7a8(0xa0) = CONST 
0x7aa: v7aa(0x10000000000000000000000000000000000000000) = SHL v7a8(0xa0) v7a6(0x1)
0x7ab: v7ab(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7aa(0x10000000000000000000000000000000000000000) v7a4(0x1)
0x7ac: v7ac = AND v7ab(0xffffffffffffffffffffffffffffffffffffffff) v7a3
0x7ad: v7ad = CALLER 
0x7ae: v7ae = EQ v7ad v7ac
0x7b0: RETURNPRIVATE v7a0arg0 v7ae
----------------------------------

Begin block 0x7b1
prev = {'0x300'}, next = {'0x7c4', '0x800'}
----------------------------------
Block 0x7b1
0x7b2: v7b2(0x1) = CONST 
0x7b4: v7b4 = SLOAD v7b2(0x1)
0x7b5: v7b5(0x1) = CONST 
0x7b7: v7b7(0x1) = CONST 
0x7b9: v7b9(0xa0) = CONST 
0x7bb: v7bb(0x10000000000000000000000000000000000000000) = SHL v7b9(0xa0) v7b7(0x1)
0x7bc: v7bc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7bb(0x10000000000000000000000000000000000000000) v7b5(0x1)
0x7bd: v7bd = AND v7bc(0xffffffffffffffffffffffffffffffffffffffff) v7b4
0x7be: v7be = CALLER 
0x7bf: v7bf = EQ v7be v7bd
0x7c0: v7c0(0x800) = CONST 
0x7c3: JUMPI v7c0(0x800) v7bf
----------------------------------

Begin block 0x7c4
prev = {'0x7b1'}, next = {}
----------------------------------
Block 0x7c4
0x7c4: v7c4(0x40) = CONST 
0x7c7: v7c7 = MLOAD v7c4(0x40)
0x7c8: v7c8(0x461bcd) = CONST 
0x7cc: v7cc(0xe5) = CONST 
0x7ce: v7ce(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v7cc(0xe5) v7c8(0x461bcd)
0x7d0: MSTORE v7c7 v7ce(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x7d1: v7d1(0x20) = CONST 
0x7d3: v7d3(0x4) = CONST 
0x7d6: v7d6 = ADD v7c7 v7d3(0x4)
0x7d7: MSTORE v7d6 v7d1(0x20)
0x7d8: v7d8(0xd) = CONST 
0x7da: v7da(0x24) = CONST 
0x7dd: v7dd = ADD v7c7 v7da(0x24)
0x7de: MSTORE v7dd v7d8(0xd)
0x7df: v7df(0x24b73b30b634b2103a37b5b2b7) = CONST 
0x7ed: v7ed(0x99) = CONST 
0x7ef: v7ef(0x496e76616c696420746f6b656e00000000000000000000000000000000000000) = SHL v7ed(0x99) v7df(0x24b73b30b634b2103a37b5b2b7)
0x7f0: v7f0(0x44) = CONST 
0x7f3: v7f3 = ADD v7c7 v7f0(0x44)
0x7f4: MSTORE v7f3 v7ef(0x496e76616c696420746f6b656e00000000000000000000000000000000000000)
0x7f6: v7f6 = MLOAD v7c4(0x40)
0x7fa: v7fa = SUB v7c7 v7f6
0x7fb: v7fb(0x64) = CONST 
0x7fd: v7fd = ADD v7fb(0x64) v7fa
0x7ff: REVERT v7f6 v7fd
----------------------------------

Begin block 0x800
prev = {'0x7b1'}, next = {'0xb19'}
----------------------------------
Block 0x800
0x801: v801(0x3) = CONST 
0x803: v803 = SLOAD v801(0x3)
0x804: v804(0x0) = CONST 
0x807: v807(0x82c) = CONST 
0x80b: v80b(0x820) = CONST 
0x80f: v80f(0x5af3107a4000) = CONST 
0x816: v816(0xffffffff) = CONST 
0x81b: v81b(0xb19) = CONST 
0x81e: v81e(0xb19) = AND v81b(0xb19) v816(0xffffffff)
0x81f: JUMP v81e(0xb19)
----------------------------------

Begin block 0x820
prev = {'0xb75'}, next = {'0xb7b'}
----------------------------------
Block 0x820
0x822: v822(0xffffffff) = CONST 
0x827: v827(0xb7b) = CONST 
0x82a: v82a(0xb7b) = AND v827(0xb7b) v822(0xffffffff)
0x82b: JUMP v82a(0xb7b)
----------------------------------

Begin block 0x82c
prev = {'0xbda'}, next = {'0xbe2'}
----------------------------------
Block 0x82c
0x82f: v82f(0x0) = CONST 
0x831: v831(0x842) = CONST 
0x835: v835(0x1) = CONST 
0x837: v837(0x1) = CONST 
0x839: v839(0xa0) = CONST 
0x83b: v83b(0x10000000000000000000000000000000000000000) = SHL v839(0xa0) v837(0x1)
0x83c: v83c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v83b(0x10000000000000000000000000000000000000000) v835(0x1)
0x83d: v83d = AND v83c(0xffffffffffffffffffffffffffffffffffffffff) v2a7
0x83e: v83e(0xbe2) = CONST 
0x841: JUMP v83e(0xbe2)
----------------------------------

Begin block 0x842
prev = {'0xbe2'}, next = {'0x84e', '0x88f'}
----------------------------------
Block 0x842
0x845: v845 = ADDRESS 
0x846: v846 = BALANCE v845
0x848: v848 = GT vbdb v846
0x849: v849 = ISZERO v848
0x84a: v84a(0x88f) = CONST 
0x84d: JUMPI v84a(0x88f) v849
----------------------------------

Begin block 0x84e
prev = {'0x842'}, next = {}
----------------------------------
Block 0x84e
0x84e: v84e(0x40) = CONST 
0x851: v851 = MLOAD v84e(0x40)
0x852: v852(0x461bcd) = CONST 
0x856: v856(0xe5) = CONST 
0x858: v858(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v856(0xe5) v852(0x461bcd)
0x85a: MSTORE v851 v858(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x85b: v85b(0x20) = CONST 
0x85d: v85d(0x4) = CONST 
0x860: v860 = ADD v851 v85d(0x4)
0x861: MSTORE v860 v85b(0x20)
0x862: v862(0x12) = CONST 
0x864: v864(0x24) = CONST 
0x867: v867 = ADD v851 v864(0x24)
0x868: MSTORE v867 v862(0x12)
0x869: v869(0x496e73756666696369656e742066756e6473) = CONST 
0x87c: v87c(0x70) = CONST 
0x87e: v87e(0x496e73756666696369656e742066756e64730000000000000000000000000000) = SHL v87c(0x70) v869(0x496e73756666696369656e742066756e6473)
0x87f: v87f(0x44) = CONST 
0x882: v882 = ADD v851 v87f(0x44)
0x883: MSTORE v882 v87e(0x496e73756666696369656e742066756e64730000000000000000000000000000)
0x885: v885 = MLOAD v84e(0x40)
0x889: v889 = SUB v851 v885
0x88a: v88a(0x64) = CONST 
0x88c: v88c = ADD v88a(0x64) v889
0x88e: REVERT v885 v88c
----------------------------------

Begin block 0x88f
prev = {'0x842'}, next = {'0x8c5', '0x8bc'}
----------------------------------
Block 0x88f
0x890: v890(0x40) = CONST 
0x892: v892 = MLOAD v890(0x40)
0x893: v893(0x1) = CONST 
0x895: v895(0x1) = CONST 
0x897: v897(0xa0) = CONST 
0x899: v899(0x10000000000000000000000000000000000000000) = SHL v897(0xa0) v895(0x1)
0x89a: v89a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v899(0x10000000000000000000000000000000000000000) v893(0x1)
0x89c: v89c = AND v83d v89a(0xffffffffffffffffffffffffffffffffffffffff)
0x89f: v89f = ISZERO vbdb
0x8a0: v8a0(0x8fc) = CONST 
0x8a3: v8a3 = MUL v8a0(0x8fc) v89f
0x8a7: v8a7(0x0) = CONST 
0x8af: v8af = CALL v8a3 v89c vbdb v892 v8a7(0x0) v892 v8a7(0x0)
0x8b5: v8b5 = ISZERO v8af
0x8b7: v8b7 = ISZERO v8b5
0x8b8: v8b8(0x8c5) = CONST 
0x8bb: JUMPI v8b8(0x8c5) v8b7
----------------------------------

Begin block 0x8bc
prev = {'0x88f'}, next = {}
----------------------------------
Block 0x8bc
0x8bc: v8bc = RETURNDATASIZE 
0x8bd: v8bd(0x0) = CONST 
0x8c0: RETURNDATACOPY v8bd(0x0) v8bd(0x0) v8bc
0x8c1: v8c1 = RETURNDATASIZE 
0x8c2: v8c2(0x0) = CONST 
0x8c4: REVERT v8c2(0x0) v8c1
----------------------------------

Begin block 0x8c5
prev = {'0x88f'}, next = {'0x95d', '0x8d8'}
----------------------------------
Block 0x8c5
0x8c7: v8c7(0x2) = CONST 
0x8c9: v8c9 = SLOAD v8c7(0x2)
0x8ca: v8ca(0x1) = CONST 
0x8cc: v8cc(0x1) = CONST 
0x8ce: v8ce(0xa0) = CONST 
0x8d0: v8d0(0x10000000000000000000000000000000000000000) = SHL v8ce(0xa0) v8cc(0x1)
0x8d1: v8d1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8d0(0x10000000000000000000000000000000000000000) v8ca(0x1)
0x8d2: v8d2 = AND v8d1(0xffffffffffffffffffffffffffffffffffffffff) v8c9
0x8d3: v8d3 = ISZERO v8d2
0x8d4: v8d4(0x95d) = CONST 
0x8d7: JUMPI v8d4(0x95d) v8d3
----------------------------------

Begin block 0x8d8
prev = {'0x8c5'}, next = {'0x930', '0x92c'}
----------------------------------
Block 0x8d8
0x8d8: v8d8(0x1) = CONST 
0x8da: v8da = SLOAD v8d8(0x1)
0x8db: v8db(0x2) = CONST 
0x8dd: v8dd = SLOAD v8db(0x2)
0x8de: v8de(0x40) = CONST 
0x8e1: v8e1 = MLOAD v8de(0x40)
0x8e2: v8e2(0xa9059cbb) = CONST 
0x8e7: v8e7(0xe0) = CONST 
0x8e9: v8e9(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v8e7(0xe0) v8e2(0xa9059cbb)
0x8eb: MSTORE v8e1 v8e9(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x8ec: v8ec(0x1) = CONST 
0x8ee: v8ee(0x1) = CONST 
0x8f0: v8f0(0xa0) = CONST 
0x8f2: v8f2(0x10000000000000000000000000000000000000000) = SHL v8f0(0xa0) v8ee(0x1)
0x8f3: v8f3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8f2(0x10000000000000000000000000000000000000000) v8ec(0x1)
0x8f6: v8f6 = AND v8f3(0xffffffffffffffffffffffffffffffffffffffff) v8dd
0x8f7: v8f7(0x4) = CONST 
0x8fa: v8fa = ADD v8e1 v8f7(0x4)
0x8fb: MSTORE v8fa v8f6
0x8fc: v8fc(0x24) = CONST 
0x8ff: v8ff = ADD v8e1 v8fc(0x24)
0x902: MSTORE v8ff v2ad
0x904: v904 = MLOAD v8de(0x40)
0x908: v908 = AND v8da v8f3(0xffffffffffffffffffffffffffffffffffffffff)
0x90a: v90a(0xa9059cbb) = CONST 
0x910: v910(0x44) = CONST 
0x914: v914 = ADD v8e1 v910(0x44)
0x916: v916(0x20) = CONST 
0x91d: v91d = SUB v8e1 v904
0x91e: v91e = ADD v91d v910(0x44)
0x920: v920(0x0) = CONST 
0x924: v924 = EXTCODESIZE v908
0x925: v925 = ISZERO v924
0x927: v927 = ISZERO v925
0x928: v928(0x930) = CONST 
0x92b: JUMPI v928(0x930) v927
----------------------------------

Begin block 0x92c
prev = {'0x8d8'}, next = {}
----------------------------------
Block 0x92c
0x92c: v92c(0x0) = CONST 
0x92f: REVERT v92c(0x0) v92c(0x0)
----------------------------------

Begin block 0x930
prev = {'0x8d8'}, next = {'0x944', '0x93b'}
----------------------------------
Block 0x930
0x932: v932 = GAS 
0x933: v933 = CALL v932 v908 v920(0x0) v904 v91e v904 v916(0x20)
0x934: v934 = ISZERO v933
0x936: v936 = ISZERO v934
0x937: v937(0x944) = CONST 
0x93a: JUMPI v937(0x944) v936
----------------------------------

Begin block 0x93b
prev = {'0x930'}, next = {}
----------------------------------
Block 0x93b
0x93b: v93b = RETURNDATASIZE 
0x93c: v93c(0x0) = CONST 
0x93f: RETURNDATACOPY v93c(0x0) v93c(0x0) v93b
0x940: v940 = RETURNDATASIZE 
0x941: v941(0x0) = CONST 
0x943: REVERT v941(0x0) v940
----------------------------------

Begin block 0x944
prev = {'0x930'}, next = {'0x956', '0x95a'}
----------------------------------
Block 0x944
0x949: v949(0x40) = CONST 
0x94b: v94b = MLOAD v949(0x40)
0x94c: v94c = RETURNDATASIZE 
0x94d: v94d(0x20) = CONST 
0x950: v950 = LT v94c v94d(0x20)
0x951: v951 = ISZERO v950
0x952: v952(0x95a) = CONST 
0x955: JUMPI v952(0x95a) v951
----------------------------------

Begin block 0x956
prev = {'0x944'}, next = {}
----------------------------------
Block 0x956
0x956: v956(0x0) = CONST 
0x959: REVERT v956(0x0) v956(0x0)
----------------------------------

Begin block 0x95a
prev = {'0x944'}, next = {'0x95d'}
----------------------------------
Block 0x95a
----------------------------------

Begin block 0x95d
prev = {'0x95a', '0x8c5'}, next = {'0xdd0x279'}
----------------------------------
Block 0x95d
0x95e: v95e(0x40) = CONST 
0x961: v961 = MLOAD v95e(0x40)
0x964: MSTORE v961 v2ad
0x965: v965(0x20) = CONST 
0x968: v968 = ADD v961 v965(0x20)
0x96b: MSTORE v968 vbdb
0x96d: v96d = MLOAD v95e(0x40)
0x96e: v96e(0x1) = CONST 
0x970: v970(0x1) = CONST 
0x972: v972(0xa0) = CONST 
0x974: v974(0x10000000000000000000000000000000000000000) = SHL v972(0xa0) v970(0x1)
0x975: v975(0xffffffffffffffffffffffffffffffffffffffff) = SUB v974(0x10000000000000000000000000000000000000000) v96e(0x1)
0x977: v977 = AND v83d v975(0xffffffffffffffffffffffffffffffffffffffff)
0x979: v979(0xad407fe1eb4ae1d056345f8568d2c092de3902f031bd7e909b4f121264751a16) = CONST 
0x99d: v99d = SUB v961 v96d
0x99e: v99e = ADD v99d v95e(0x40)
0x9a0: LOG2 v96d v99e v979(0xad407fe1eb4ae1d056345f8568d2c092de3902f031bd7e909b4f121264751a16) v977
0x9a6: JUMP v287(0xdd)
----------------------------------

Begin block 0x9a7
prev = {'0x364'}, next = {'0x9af'}
----------------------------------
Block 0x9a7
0x9a8: v9a8(0x9af) = CONST 
0x9ab: v9ab(0x7a0) = CONST 
0x9ae: v9ae_0 = CALLPRIVATE v9ab(0x7a0) v9a8(0x9af)
----------------------------------

Begin block 0x9af
prev = {'0x9a7'}, next = {'0x9b4', '0x9ee'}
----------------------------------
Block 0x9af
0x9b0: v9b0(0x9ee) = CONST 
0x9b3: JUMPI v9b0(0x9ee) v9ae_0
----------------------------------

Begin block 0x9b4
prev = {'0x9af'}, next = {}
----------------------------------
Block 0x9b4
0x9b4: v9b4(0x40) = CONST 
0x9b7: v9b7 = MLOAD v9b4(0x40)
0x9b8: v9b8(0x461bcd) = CONST 
0x9bc: v9bc(0xe5) = CONST 
0x9be: v9be(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9bc(0xe5) v9b8(0x461bcd)
0x9c0: MSTORE v9b7 v9be(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x9c1: v9c1(0x20) = CONST 
0x9c3: v9c3(0x4) = CONST 
0x9c6: v9c6 = ADD v9b7 v9c3(0x4)
0x9c9: MSTORE v9c6 v9c1(0x20)
0x9ca: v9ca(0x24) = CONST 
0x9cd: v9cd = ADD v9b7 v9ca(0x24)
0x9ce: MSTORE v9cd v9c1(0x20)
0x9cf: v9cf(0x0) = CONST 
0x9d2: v9d2 = MLOAD v9cf(0x0)
0x9d3: v9d3(0x20) = CONST 
0x9d5: v9d5(0xccd) = CONST 
0x9dd: MSTORE v9cf(0x0) v9d2
0x9de: v9de(0x44) = CONST 
0x9e1: v9e1 = ADD v9b7 v9de(0x44)
0x9e2: MSTORE v9e1 vd82(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x9e4: v9e4 = MLOAD v9b4(0x40)
0x9e8: v9e8 = SUB v9b7 v9e4
0x9e9: v9e9(0x64) = CONST 
0x9eb: v9eb = ADD v9e9(0x64) v9e8
0x9ed: REVERT v9e4 v9eb
0xd82: vd82(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0x9ee
prev = {'0x9af'}, next = {'0x7570x341', '0xa4a'}
----------------------------------
Block 0x9ee
0x9f0: v9f0(0x1) = CONST 
0x9f2: v9f2(0x1) = CONST 
0x9f4: v9f4(0xa0) = CONST 
0x9f6: v9f6(0x10000000000000000000000000000000000000000) = SHL v9f4(0xa0) v9f2(0x1)
0x9f7: v9f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9f6(0x10000000000000000000000000000000000000000) v9f0(0x1)
0x9f8: v9f8 = AND v9f7(0xffffffffffffffffffffffffffffffffffffffff) v371
0x9f9: v9f9(0xa9059cbb) = CONST 
0xa00: va00(0x40) = CONST 
0xa02: va02 = MLOAD va00(0x40)
0xa04: va04(0xffffffff) = CONST 
0xa09: va09(0xa9059cbb) = AND va04(0xffffffff) v9f9(0xa9059cbb)
0xa0a: va0a(0xe0) = CONST 
0xa0c: va0c(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL va0a(0xe0) va09(0xa9059cbb)
0xa0e: MSTORE va02 va0c(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xa0f: va0f(0x4) = CONST 
0xa11: va11 = ADD va0f(0x4) va02
0xa14: va14(0x1) = CONST 
0xa16: va16(0x1) = CONST 
0xa18: va18(0xa0) = CONST 
0xa1a: va1a(0x10000000000000000000000000000000000000000) = SHL va18(0xa0) va16(0x1)
0xa1b: va1b(0xffffffffffffffffffffffffffffffffffffffff) = SUB va1a(0x10000000000000000000000000000000000000000) va14(0x1)
0xa1c: va1c = AND va1b(0xffffffffffffffffffffffffffffffffffffffff) v37a
0xa1d: va1d(0x1) = CONST 
0xa1f: va1f(0x1) = CONST 
0xa21: va21(0xa0) = CONST 
0xa23: va23(0x10000000000000000000000000000000000000000) = SHL va21(0xa0) va1f(0x1)
0xa24: va24(0xffffffffffffffffffffffffffffffffffffffff) = SUB va23(0x10000000000000000000000000000000000000000) va1d(0x1)
0xa25: va25 = AND va24(0xffffffffffffffffffffffffffffffffffffffff) va1c
0xa27: MSTORE va11 va25
0xa28: va28(0x20) = CONST 
0xa2a: va2a = ADD va28(0x20) va11
0xa2d: MSTORE va2a v37f
0xa2e: va2e(0x20) = CONST 
0xa30: va30 = ADD va2e(0x20) va2a
0xa35: va35(0x20) = CONST 
0xa37: va37(0x40) = CONST 
0xa39: va39 = MLOAD va37(0x40)
0xa3c: va3c = SUB va30 va39
0xa3e: va3e(0x0) = CONST 
0xa42: va42 = EXTCODESIZE v9f8
0xa43: va43 = ISZERO va42
0xa45: va45 = ISZERO va43
0xa46: va46(0x757) = CONST 
0xa49: JUMPI va46(0x757) va45
----------------------------------

Begin block 0xa4a
prev = {'0x9ee'}, next = {}
----------------------------------
Block 0xa4a
0xa4a: va4a(0x0) = CONST 
0xa4d: REVERT va4a(0x0) va4a(0x0)
----------------------------------

Begin block 0xa4e
prev = {'0x3a7'}, next = {'0xa56'}
----------------------------------
Block 0xa4e
0xa4f: va4f(0xa56) = CONST 
0xa52: va52(0x7a0) = CONST 
0xa55: va55_0 = CALLPRIVATE va52(0x7a0) va4f(0xa56)
----------------------------------

Begin block 0xa56
prev = {'0xa4e'}, next = {'0xa5b', '0xa95'}
----------------------------------
Block 0xa56
0xa57: va57(0xa95) = CONST 
0xa5a: JUMPI va57(0xa95) va55_0
----------------------------------

Begin block 0xa5b
prev = {'0xa56'}, next = {}
----------------------------------
Block 0xa5b
0xa5b: va5b(0x40) = CONST 
0xa5e: va5e = MLOAD va5b(0x40)
0xa5f: va5f(0x461bcd) = CONST 
0xa63: va63(0xe5) = CONST 
0xa65: va65(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va63(0xe5) va5f(0x461bcd)
0xa67: MSTORE va5e va65(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xa68: va68(0x20) = CONST 
0xa6a: va6a(0x4) = CONST 
0xa6d: va6d = ADD va5e va6a(0x4)
0xa70: MSTORE va6d va68(0x20)
0xa71: va71(0x24) = CONST 
0xa74: va74 = ADD va5e va71(0x24)
0xa75: MSTORE va74 va68(0x20)
0xa76: va76(0x0) = CONST 
0xa79: va79 = MLOAD va76(0x0)
0xa7a: va7a(0x20) = CONST 
0xa7c: va7c(0xccd) = CONST 
0xa84: MSTORE va76(0x0) va79
0xa85: va85(0x44) = CONST 
0xa88: va88 = ADD va5e va85(0x44)
0xa89: MSTORE va88 vd87(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0xa8b: va8b = MLOAD va5b(0x40)
0xa8f: va8f = SUB va5e va8b
0xa90: va90(0x64) = CONST 
0xa92: va92 = ADD va90(0x64) va8f
0xa94: REVERT va8b va92
0xd87: vd87(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0xa95
prev = {'0xa56'}, next = {'0xdd0x384'}
----------------------------------
Block 0xa95
0xa96: va96(0x2) = CONST 
0xa99: va99 = SLOAD va96(0x2)
0xa9a: va9a(0x1) = CONST 
0xa9c: va9c(0x1) = CONST 
0xa9e: va9e(0xa0) = CONST 
0xaa0: vaa0(0x10000000000000000000000000000000000000000) = SHL va9e(0xa0) va9c(0x1)
0xaa1: vaa1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaa0(0x10000000000000000000000000000000000000000) va9a(0x1)
0xaa2: vaa2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vaa1(0xffffffffffffffffffffffffffffffffffffffff)
0xaa3: vaa3 = AND vaa2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) va99
0xaa4: vaa4(0x1) = CONST 
0xaa6: vaa6(0x1) = CONST 
0xaa8: vaa8(0xa0) = CONST 
0xaaa: vaaa(0x10000000000000000000000000000000000000000) = SHL vaa8(0xa0) vaa6(0x1)
0xaab: vaab(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaaa(0x10000000000000000000000000000000000000000) vaa4(0x1)
0xaaf: vaaf = AND vaab(0xffffffffffffffffffffffffffffffffffffffff) v3b2
0xab3: vab3 = OR vaaf vaa3
0xab5: SSTORE va96(0x2) vab3
0xab6: JUMP v392(0xdd)
----------------------------------

Begin block 0xab7
prev = {'0x3da'}, next = {'0xabf'}
----------------------------------
Block 0xab7
0xab8: vab8(0xabf) = CONST 
0xabb: vabb(0x7a0) = CONST 
0xabe: vabe_0 = CALLPRIVATE vabb(0x7a0) vab8(0xabf)
----------------------------------

Begin block 0xabf
prev = {'0xab7'}, next = {'0xac4', '0xafe'}
----------------------------------
Block 0xabf
0xac0: vac0(0xafe) = CONST 
0xac3: JUMPI vac0(0xafe) vabe_0
----------------------------------

Begin block 0xac4
prev = {'0xabf'}, next = {}
----------------------------------
Block 0xac4
0xac4: vac4(0x40) = CONST 
0xac7: vac7 = MLOAD vac4(0x40)
0xac8: vac8(0x461bcd) = CONST 
0xacc: vacc(0xe5) = CONST 
0xace: vace(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vacc(0xe5) vac8(0x461bcd)
0xad0: MSTORE vac7 vace(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xad1: vad1(0x20) = CONST 
0xad3: vad3(0x4) = CONST 
0xad6: vad6 = ADD vac7 vad3(0x4)
0xad9: MSTORE vad6 vad1(0x20)
0xada: vada(0x24) = CONST 
0xadd: vadd = ADD vac7 vada(0x24)
0xade: MSTORE vadd vad1(0x20)
0xadf: vadf(0x0) = CONST 
0xae2: vae2 = MLOAD vadf(0x0)
0xae3: vae3(0x20) = CONST 
0xae5: vae5(0xccd) = CONST 
0xaed: MSTORE vadf(0x0) vae2
0xaee: vaee(0x44) = CONST 
0xaf1: vaf1 = ADD vac7 vaee(0x44)
0xaf2: MSTORE vaf1 vd8c(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0xaf4: vaf4 = MLOAD vac4(0x40)
0xaf8: vaf8 = SUB vac7 vaf4
0xaf9: vaf9(0x64) = CONST 
0xafb: vafb = ADD vaf9(0x64) vaf8
0xafd: REVERT vaf4 vafb
0xd8c: vd8c(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
----------------------------------

Begin block 0xafe
prev = {'0xabf'}, next = {'0xbe5'}
----------------------------------
Block 0xafe
0xaff: vaff(0xb07) = CONST 
0xb03: vb03(0xbe5) = CONST 
0xb06: JUMP vb03(0xbe5)
----------------------------------

Begin block 0xb07
prev = {'0xc2a'}, next = {'0xdd0x3b7'}
----------------------------------
Block 0xb07
0xb09: JUMP v3c5(0xdd)
----------------------------------

Begin block 0xb0a
prev = {'0x3f6'}, next = {'0x1450x3ea'}
----------------------------------
Block 0xb0a
0xb0b: vb0b(0x1) = CONST 
0xb0d: vb0d = SLOAD vb0b(0x1)
0xb0e: vb0e(0x1) = CONST 
0xb10: vb10(0x1) = CONST 
0xb12: vb12(0xa0) = CONST 
0xb14: vb14(0x10000000000000000000000000000000000000000) = SHL vb12(0xa0) vb10(0x1)
0xb15: vb15(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb14(0x10000000000000000000000000000000000000000) vb0e(0x1)
0xb16: vb16 = AND vb15(0xffffffffffffffffffffffffffffffffffffffff) vb0d
0xb18: JUMP v3f8(0x145)
----------------------------------

Begin block 0xb19
prev = {'0x800'}, next = {'0xb21', '0xb28'}
----------------------------------
Block 0xb19
0xb1a: vb1a(0x0) = CONST 
0xb1d: vb1d(0xb28) = CONST 
0xb20: JUMPI vb1d(0xb28) v2ad
----------------------------------

Begin block 0xb21
prev = {'0xb19'}, next = {'0xb75'}
----------------------------------
Block 0xb21
0xb22: vb22(0x0) = CONST 
0xb24: vb24(0xb75) = CONST 
0xb27: JUMP vb24(0xb75)
----------------------------------

Begin block 0xb28
prev = {'0xb19'}, next = {'0xb34', '0xb35'}
----------------------------------
Block 0xb28
0xb2b: vb2b = MUL v80f(0x5af3107a4000) v2ad
0xb30: vb30(0xb35) = CONST 
0xb33: JUMPI vb30(0xb35) v2ad
----------------------------------

Begin block 0xb34
prev = {'0xb28'}, next = {}
----------------------------------
Block 0xb34
0xb34: THROW 
----------------------------------

Begin block 0xb35
prev = {'0xb28'}, next = {'0xb72', '0xb3c'}
----------------------------------
Block 0xb35
0xb36: vb36 = DIV vb2b v2ad
0xb37: vb37 = EQ vb36 v80f(0x5af3107a4000)
0xb38: vb38(0xb72) = CONST 
0xb3b: JUMPI vb38(0xb72) vb37
----------------------------------

Begin block 0xb3c
prev = {'0xb35'}, next = {}
----------------------------------
Block 0xb3c
0xb3c: vb3c(0x40) = CONST 
0xb3e: vb3e = MLOAD vb3c(0x40)
0xb3f: vb3f(0x461bcd) = CONST 
0xb43: vb43(0xe5) = CONST 
0xb45: vb45(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vb43(0xe5) vb3f(0x461bcd)
0xb47: MSTORE vb3e vb45(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xb48: vb48(0x4) = CONST 
0xb4a: vb4a = ADD vb48(0x4) vb3e
0xb4d: vb4d(0x20) = CONST 
0xb4f: vb4f = ADD vb4d(0x20) vb4a
0xb52: vb52 = SUB vb4f vb4a
0xb54: MSTORE vb4a vb52
0xb55: vb55(0x21) = CONST 
0xb58: MSTORE vb4f vb55(0x21)
0xb59: vb59(0x20) = CONST 
0xb5b: vb5b = ADD vb59(0x20) vb4f
0xb5d: vb5d(0xcac) = CONST 
0xb60: vb60(0x21) = CONST 
0xb63: CODECOPY vb5b vb5d(0xcac) vb60(0x21)
0xb64: vb64(0x40) = CONST 
0xb66: vb66 = ADD vb64(0x40) vb5b
0xb6a: vb6a(0x40) = CONST 
0xb6c: vb6c = MLOAD vb6a(0x40)
0xb6f: vb6f = SUB vb66 vb6c
0xb71: REVERT vb6c vb6f
----------------------------------

Begin block 0xb72
prev = {'0xb35'}, next = {'0xb75'}
----------------------------------
Block 0xb72
----------------------------------

Begin block 0xb75
prev = {'0xb72', '0xb21'}, next = {'0x820'}
----------------------------------
Block 0xb75
0xb7a: JUMP v80b(0x820)
----------------------------------

Begin block 0xb7b
prev = {'0x820'}, next = {'0xb85', '0xbd1'}
----------------------------------
Block 0xb7b
0xb7c: vb7c(0x0) = CONST 
0xb80: vb80 = GT v803 vb7c(0x0)
0xb81: vb81(0xbd1) = CONST 
0xb84: JUMPI vb81(0xbd1) vb80
----------------------------------

Begin block 0xb85
prev = {'0xb7b'}, next = {}
----------------------------------
Block 0xb85
0xb85: vb85(0x40) = CONST 
0xb88: vb88 = MLOAD vb85(0x40)
0xb89: vb89(0x461bcd) = CONST 
0xb8d: vb8d(0xe5) = CONST 
0xb8f: vb8f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vb8d(0xe5) vb89(0x461bcd)
0xb91: MSTORE vb88 vb8f(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xb92: vb92(0x20) = CONST 
0xb94: vb94(0x4) = CONST 
0xb97: vb97 = ADD vb88 vb94(0x4)
0xb98: MSTORE vb97 vb92(0x20)
0xb99: vb99(0x1a) = CONST 
0xb9b: vb9b(0x24) = CONST 
0xb9e: vb9e = ADD vb88 vb9b(0x24)
0xb9f: MSTORE vb9e vb99(0x1a)
0xba0: vba0(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
0xbc1: vbc1(0x44) = CONST 
0xbc4: vbc4 = ADD vb88 vbc1(0x44)
0xbc5: MSTORE vbc4 vba0(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
0xbc7: vbc7 = MLOAD vb85(0x40)
0xbcb: vbcb = SUB vb88 vbc7
0xbcc: vbcc(0x64) = CONST 
0xbce: vbce = ADD vbcc(0x64) vbcb
0xbd0: REVERT vbc7 vbce
----------------------------------

Begin block 0xbd1
prev = {'0xb7b'}, next = {'0xbd9', '0xbda'}
----------------------------------
Block 0xbd1
0xbd5: vbd5(0xbda) = CONST 
0xbd8: JUMPI vbd5(0xbda) v803
----------------------------------

Begin block 0xbd9
prev = {'0xbd1'}, next = {}
----------------------------------
Block 0xbd9
0xbd9: THROW 
----------------------------------

Begin block 0xbda
prev = {'0xbd1'}, next = {'0x82c'}
----------------------------------
Block 0xbda
0xbda_0x0: vbda_0 = PHI vb22(0x0) vb2b
0xbdb: vbdb = DIV vbda_0 v803
0xbe1: JUMP v807(0x82c)
----------------------------------

Begin block 0xbe2
prev = {'0x82c'}, next = {'0x842'}
----------------------------------
Block 0xbe2
0xbe4: JUMP v831(0x842)
----------------------------------

Begin block 0xbe5
prev = {'0xafe'}, next = {'0xc2a', '0xbf4'}
----------------------------------
Block 0xbe5
0xbe6: vbe6(0x1) = CONST 
0xbe8: vbe8(0x1) = CONST 
0xbea: vbea(0xa0) = CONST 
0xbec: vbec(0x10000000000000000000000000000000000000000) = SHL vbea(0xa0) vbe8(0x1)
0xbed: vbed(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbec(0x10000000000000000000000000000000000000000) vbe6(0x1)
0xbef: vbef = AND v3e5 vbed(0xffffffffffffffffffffffffffffffffffffffff)
0xbf0: vbf0(0xc2a) = CONST 
0xbf3: JUMPI vbf0(0xc2a) vbef
----------------------------------

Begin block 0xbf4
prev = {'0xbe5'}, next = {}
----------------------------------
Block 0xbf4
0xbf4: vbf4(0x40) = CONST 
0xbf6: vbf6 = MLOAD vbf4(0x40)
0xbf7: vbf7(0x461bcd) = CONST 
0xbfb: vbfb(0xe5) = CONST 
0xbfd: vbfd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vbfb(0xe5) vbf7(0x461bcd)
0xbff: MSTORE vbf6 vbfd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xc00: vc00(0x4) = CONST 
0xc02: vc02 = ADD vc00(0x4) vbf6
0xc05: vc05(0x20) = CONST 
0xc07: vc07 = ADD vc05(0x20) vc02
0xc0a: vc0a = SUB vc07 vc02
0xc0c: MSTORE vc02 vc0a
0xc0d: vc0d(0x26) = CONST 
0xc10: MSTORE vc07 vc0d(0x26)
0xc11: vc11(0x20) = CONST 
0xc13: vc13 = ADD vc11(0x20) vc07
0xc15: vc15(0xc86) = CONST 
0xc18: vc18(0x26) = CONST 
0xc1b: CODECOPY vc13 vc15(0xc86) vc18(0x26)
0xc1c: vc1c(0x40) = CONST 
0xc1e: vc1e = ADD vc1c(0x40) vc13
0xc22: vc22(0x40) = CONST 
0xc24: vc24 = MLOAD vc22(0x40)
0xc27: vc27 = SUB vc1e vc24
0xc29: REVERT vc24 vc27
----------------------------------

Begin block 0xc2a
prev = {'0xbe5'}, next = {'0xb07'}
----------------------------------
Block 0xc2a
0xc2b: vc2b(0x0) = CONST 
0xc2e: vc2e = SLOAD vc2b(0x0)
0xc2f: vc2f(0x40) = CONST 
0xc31: vc31 = MLOAD vc2f(0x40)
0xc32: vc32(0x1) = CONST 
0xc34: vc34(0x1) = CONST 
0xc36: vc36(0xa0) = CONST 
0xc38: vc38(0x10000000000000000000000000000000000000000) = SHL vc36(0xa0) vc34(0x1)
0xc39: vc39(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc38(0x10000000000000000000000000000000000000000) vc32(0x1)
0xc3c: vc3c = AND v3e5 vc39(0xffffffffffffffffffffffffffffffffffffffff)
0xc3f: vc3f = AND vc2e vc39(0xffffffffffffffffffffffffffffffffffffffff)
0xc41: vc41(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xc63: LOG3 vc31 vc2b(0x0) vc41(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vc3f vc3c
0xc64: vc64(0x0) = CONST 
0xc67: vc67 = SLOAD vc64(0x0)
0xc68: vc68(0x1) = CONST 
0xc6a: vc6a(0x1) = CONST 
0xc6c: vc6c(0xa0) = CONST 
0xc6e: vc6e(0x10000000000000000000000000000000000000000) = SHL vc6c(0xa0) vc6a(0x1)
0xc6f: vc6f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc6e(0x10000000000000000000000000000000000000000) vc68(0x1)
0xc70: vc70(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vc6f(0xffffffffffffffffffffffffffffffffffffffff)
0xc71: vc71 = AND vc70(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vc67
0xc72: vc72(0x1) = CONST 
0xc74: vc74(0x1) = CONST 
0xc76: vc76(0xa0) = CONST 
0xc78: vc78(0x10000000000000000000000000000000000000000) = SHL vc76(0xa0) vc74(0x1)
0xc79: vc79(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc78(0x10000000000000000000000000000000000000000) vc72(0x1)
0xc7d: vc7d = AND vc79(0xffffffffffffffffffffffffffffffffffffffff) v3e5
0xc81: vc81 = OR vc7d vc71
0xc83: SSTORE vc64(0x0) vc81
0xc84: JUMP vaff(0xb07)
----------------------------------

Begin block 0xd38
prev = {'0xd2', '0x0'}, next = {'0xdd0x0'}
----------------------------------
Block 0xd38
0xd39: vd39(0xdd) = CONST 
0xd3a: CALLPRIVATE vd39(0xdd)
----------------------------------

Begin block 0xd3b
prev = {'0xbb'}, next = {}
----------------------------------
Block 0xd3b
0xd3c: vd3c(0xdf) = CONST 
0xd3d: CALLPRIVATE vd3c(0xdf)
----------------------------------

Begin block 0xd3e
prev = {'0xc7'}, next = {}
----------------------------------
Block 0xd3e
0xd3f: vd3f(0x106) = CONST 
0xd40: CALLPRIVATE vd3f(0x106)
----------------------------------

Begin block 0xd41
prev = {'0xd2'}, next = {}
----------------------------------
Block 0xd41
0xd42: vd42(0x130) = CONST 
0xd43: CALLPRIVATE vd42(0x130)
----------------------------------

Begin block 0xd44
prev = {'0x8b'}, next = {}
----------------------------------
Block 0xd44
0xd45: vd45(0x161) = CONST 
0xd46: CALLPRIVATE vd45(0x161)
----------------------------------

Begin block 0xd47
prev = {'0x96'}, next = {}
----------------------------------
Block 0xd47
0xd48: vd48(0x19a) = CONST 
0xd49: CALLPRIVATE vd48(0x19a)
----------------------------------

Begin block 0xd4a
prev = {'0xa1'}, next = {}
----------------------------------
Block 0xd4a
0xd4b: vd4b(0x1e3) = CONST 
0xd4c: CALLPRIVATE vd4b(0x1e3)
----------------------------------

Begin block 0xd4d
prev = {'0xac'}, next = {}
----------------------------------
Block 0xd4d
0xd4e: vd4e(0x1f8) = CONST 
0xd4f: CALLPRIVATE vd4e(0x1f8)
----------------------------------

Begin block 0xd50
prev = {'0x59'}, next = {}
----------------------------------
Block 0xd50
0xd51: vd51(0x23b) = CONST 
0xd52: CALLPRIVATE vd51(0x23b)
----------------------------------

Begin block 0xd53
prev = {'0x65'}, next = {}
----------------------------------
Block 0xd53
0xd54: vd54(0x250) = CONST 
0xd55: CALLPRIVATE vd54(0x250)
----------------------------------

Begin block 0xd56
prev = {'0x70'}, next = {}
----------------------------------
Block 0xd56
0xd57: vd57(0x279) = CONST 
0xd58: CALLPRIVATE vd57(0x279)
----------------------------------

Begin block 0xd59
prev = {'0x29'}, next = {}
----------------------------------
Block 0xd59
0xd5a: vd5a(0x341) = CONST 
0xd5b: CALLPRIVATE vd5a(0x341)
----------------------------------

Begin block 0xd5c
prev = {'0x34'}, next = {}
----------------------------------
Block 0xd5c
0xd5d: vd5d(0x384) = CONST 
0xd5e: CALLPRIVATE vd5d(0x384)
----------------------------------

Begin block 0xd5f
prev = {'0x3f'}, next = {}
----------------------------------
Block 0xd5f
0xd60: vd60(0x3b7) = CONST 
0xd61: CALLPRIVATE vd60(0x3b7)
----------------------------------

Begin block 0xd62
prev = {'0x4a'}, next = {}
----------------------------------
Block 0xd62
0xd63: vd63(0x3ea) = CONST 
0xd64: CALLPRIVATE vd63(0x3ea)
----------------------------------
