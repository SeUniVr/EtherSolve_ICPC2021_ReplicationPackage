
Begin block 0x0
prev = {}, next = {'0x1048', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x1018: v1018(0x1048) = CONST 
0x1019: JUMPI v1018(0x1048) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1e', '0xb6'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0x95d89b41) = CONST 
0x19: v19 = GT v14(0x95d89b41) v12
0x1a: v1a(0xb6) = CONST 
0x1d: JUMPI v1a(0xb6) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0x29', '0x6f'}
----------------------------------
Block 0x1e
0x1f: v1f(0xd4ee1d90) = CONST 
0x24: v24 = GT v1f(0xd4ee1d90) v12
0x25: v25(0x6f) = CONST 
0x28: JUMPI v25(0x6f) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0x107e'}
----------------------------------
Block 0x29
0x2a: v2a(0xd4ee1d90) = CONST 
0x2f: v2f = EQ v2a(0xd4ee1d90) v12
0x101a: v101a(0x107e) = CONST 
0x101b: JUMPI v101a(0x107e) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0x3f', '0x1081'}
----------------------------------
Block 0x34
0x35: v35(0xdc39d06d) = CONST 
0x3a: v3a = EQ v35(0xdc39d06d) v12
0x101c: v101c(0x1081) = CONST 
0x101d: JUMPI v101c(0x1081) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x1084', '0x4a'}
----------------------------------
Block 0x3f
0x40: v40(0xdd62ed3e) = CONST 
0x45: v45 = EQ v40(0xdd62ed3e) v12
0x101e: v101e(0x1084) = CONST 
0x101f: JUMPI v101e(0x1084) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x55', '0x1087'}
----------------------------------
Block 0x4a
0x4b: v4b(0xe4849b32) = CONST 
0x50: v50 = EQ v4b(0xe4849b32) v12
0x1020: v1020(0x1087) = CONST 
0x1021: JUMPI v1020(0x1087) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x108a', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0xe724529c) = CONST 
0x5b: v5b = EQ v56(0xe724529c) v12
0x1022: v1022(0x108a) = CONST 
0x1023: JUMPI v1022(0x108a) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x108d', '0x6b'}
----------------------------------
Block 0x60
0x61: v61(0xf2fde38b) = CONST 
0x66: v66 = EQ v61(0xf2fde38b) v12
0x1024: v1024(0x108d) = CONST 
0x1025: JUMPI v1024(0x108d) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x1400x0'}
----------------------------------
Block 0x6b
0x6b: v6b(0x140) = CONST 
0x6e: JUMP v6b(0x140)
----------------------------------

Begin block 0x6f
prev = {'0x1e'}, next = {'0x7b', '0x106c'}
----------------------------------
Block 0x6f
0x71: v71(0x95d89b41) = CONST 
0x76: v76 = EQ v71(0x95d89b41) v12
0x1026: v1026(0x106c) = CONST 
0x1027: JUMPI v1026(0x106c) v76
----------------------------------

Begin block 0x7b
prev = {'0x6f'}, next = {'0x106f', '0x86'}
----------------------------------
Block 0x7b
0x7c: v7c(0xa6f2ae3a) = CONST 
0x81: v81 = EQ v7c(0xa6f2ae3a) v12
0x1028: v1028(0x106f) = CONST 
0x1029: JUMPI v1028(0x106f) v81
----------------------------------

Begin block 0x86
prev = {'0x7b'}, next = {'0x91', '0x1072'}
----------------------------------
Block 0x86
0x87: v87(0xa9059cbb) = CONST 
0x8c: v8c = EQ v87(0xa9059cbb) v12
0x102a: v102a(0x1072) = CONST 
0x102b: JUMPI v102a(0x1072) v8c
----------------------------------

Begin block 0x91
prev = {'0x86'}, next = {'0x1075', '0x9c'}
----------------------------------
Block 0x91
0x92: v92(0xb414d4b6) = CONST 
0x97: v97 = EQ v92(0xb414d4b6) v12
0x102c: v102c(0x1075) = CONST 
0x102d: JUMPI v102c(0x1075) v97
----------------------------------

Begin block 0x9c
prev = {'0x91'}, next = {'0x1078', '0xa7'}
----------------------------------
Block 0x9c
0x9d: v9d(0xc91d956c) = CONST 
0xa2: va2 = EQ v9d(0xc91d956c) v12
0x102e: v102e(0x1078) = CONST 
0x102f: JUMPI v102e(0x1078) va2
----------------------------------

Begin block 0xa7
prev = {'0x9c'}, next = {'0x107b', '0xb2'}
----------------------------------
Block 0xa7
0xa8: va8(0xcae9ca51) = CONST 
0xad: vad = EQ va8(0xcae9ca51) v12
0x1030: v1030(0x107b) = CONST 
0x1031: JUMPI v1030(0x107b) vad
----------------------------------

Begin block 0xb2
prev = {'0xa7'}, next = {'0x1400x0'}
----------------------------------
Block 0xb2
0xb2: vb2(0x140) = CONST 
0xb5: JUMP vb2(0x140)
----------------------------------

Begin block 0xb6
prev = {'0xd'}, next = {'0x108', '0xc2'}
----------------------------------
Block 0xb6
0xb8: vb8(0x313ce567) = CONST 
0xbd: vbd = GT vb8(0x313ce567) v12
0xbe: vbe(0x108) = CONST 
0xc1: JUMPI vbe(0x108) vbd
----------------------------------

Begin block 0xc2
prev = {'0xb6'}, next = {'0xcd', '0x105a'}
----------------------------------
Block 0xc2
0xc3: vc3(0x313ce567) = CONST 
0xc8: vc8 = EQ vc3(0x313ce567) v12
0x1032: v1032(0x105a) = CONST 
0x1033: JUMPI v1032(0x105a) vc8
----------------------------------

Begin block 0xcd
prev = {'0xc2'}, next = {'0x105d', '0xd8'}
----------------------------------
Block 0xcd
0xce: vce(0x4b750334) = CONST 
0xd3: vd3 = EQ vce(0x4b750334) v12
0x1034: v1034(0x105d) = CONST 
0x1035: JUMPI v1034(0x105d) vd3
----------------------------------

Begin block 0xd8
prev = {'0xcd'}, next = {'0xe3', '0x1060'}
----------------------------------
Block 0xd8
0xd9: vd9(0x79ba5097) = CONST 
0xde: vde = EQ vd9(0x79ba5097) v12
0x1036: v1036(0x1060) = CONST 
0x1037: JUMPI v1036(0x1060) vde
----------------------------------

Begin block 0xe3
prev = {'0xd8'}, next = {'0xee', '0x1063'}
----------------------------------
Block 0xe3
0xe4: ve4(0x79c65068) = CONST 
0xe9: ve9 = EQ ve4(0x79c65068) v12
0x1038: v1038(0x1063) = CONST 
0x1039: JUMPI v1038(0x1063) ve9
----------------------------------

Begin block 0xee
prev = {'0xe3'}, next = {'0x1066', '0xf9'}
----------------------------------
Block 0xee
0xef: vef(0x8620410b) = CONST 
0xf4: vf4 = EQ vef(0x8620410b) v12
0x103a: v103a(0x1066) = CONST 
0x103b: JUMPI v103a(0x1066) vf4
----------------------------------

Begin block 0xf9
prev = {'0xee'}, next = {'0x1069', '0x104'}
----------------------------------
Block 0xf9
0xfa: vfa(0x8da5cb5b) = CONST 
0xff: vff = EQ vfa(0x8da5cb5b) v12
0x103c: v103c(0x1069) = CONST 
0x103d: JUMPI v103c(0x1069) vff
----------------------------------

Begin block 0x104
prev = {'0xf9'}, next = {'0x1400x0'}
----------------------------------
Block 0x104
0x104: v104(0x140) = CONST 
0x107: JUMP v104(0x140)
----------------------------------

Begin block 0x108
prev = {'0xb6'}, next = {'0x104b', '0x114'}
----------------------------------
Block 0x108
0x10a: v10a(0x5fefda7) = CONST 
0x10f: v10f = EQ v10a(0x5fefda7) v12
0x103e: v103e(0x104b) = CONST 
0x103f: JUMPI v103e(0x104b) v10f
----------------------------------

Begin block 0x114
prev = {'0x108'}, next = {'0x11f', '0x104e'}
----------------------------------
Block 0x114
0x115: v115(0x6fdde03) = CONST 
0x11a: v11a = EQ v115(0x6fdde03) v12
0x1040: v1040(0x104e) = CONST 
0x1041: JUMPI v1040(0x104e) v11a
----------------------------------

Begin block 0x11f
prev = {'0x114'}, next = {'0x1051', '0x12a'}
----------------------------------
Block 0x11f
0x120: v120(0x95ea7b3) = CONST 
0x125: v125 = EQ v120(0x95ea7b3) v12
0x1042: v1042(0x1051) = CONST 
0x1043: JUMPI v1042(0x1051) v125
----------------------------------

Begin block 0x12a
prev = {'0x11f'}, next = {'0x1054', '0x135'}
----------------------------------
Block 0x12a
0x12b: v12b(0x18160ddd) = CONST 
0x130: v130 = EQ v12b(0x18160ddd) v12
0x1044: v1044(0x1054) = CONST 
0x1045: JUMPI v1044(0x1054) v130
----------------------------------

Begin block 0x135
prev = {'0x12a'}, next = {'0x1048', '0x1057'}
----------------------------------
Block 0x135
0x136: v136(0x23b872dd) = CONST 
0x13b: v13b = EQ v136(0x23b872dd) v12
0x1046: v1046(0x1057) = CONST 
0x1047: JUMPI v1046(0x1057) v13b
----------------------------------

Begin block 0x140
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x140
0x141: v141(0x0) = CONST 
0x144: REVERT v141(0x0) v141(0x0)
----------------------------------

Begin block 0x1400x0
prev = {'0x1048', '0xb2', '0x6b', '0x104'}, next = {}
----------------------------------
Block 0x1400x0
0x1410x0: v0141(0x0) = CONST 
0x1440x0: REVERT v0141(0x0) v0141(0x0)
----------------------------------

Begin block 0x145
prev = {}, next = {'0x151', '0x14d'}
----------------------------------
function setPrices(uint256,uint256)()
Block 0x145
0x146: v146 = CALLVALUE 
0x148: v148 = ISZERO v146
0x149: v149(0x151) = CONST 
0x14c: JUMPI v149(0x151) v148
----------------------------------

Begin block 0x14d
prev = {'0x145'}, next = {}
----------------------------------
Block 0x14d
0x14d: v14d(0x0) = CONST 
0x150: REVERT v14d(0x0) v14d(0x0)
----------------------------------

Begin block 0x151
prev = {'0x145'}, next = {'0x168', '0x164'}
----------------------------------
Block 0x151
0x153: v153(0x175) = CONST 
0x156: v156(0x4) = CONST 
0x159: v159 = CALLDATASIZE 
0x15a: v15a = SUB v159 v156(0x4)
0x15b: v15b(0x40) = CONST 
0x15e: v15e = LT v15a v15b(0x40)
0x15f: v15f = ISZERO v15e
0x160: v160(0x168) = CONST 
0x163: JUMPI v160(0x168) v15f
----------------------------------

Begin block 0x164
prev = {'0x151'}, next = {}
----------------------------------
Block 0x164
0x164: v164(0x0) = CONST 
0x167: REVERT v164(0x0) v164(0x0)
----------------------------------

Begin block 0x168
prev = {'0x151'}, next = {'0x628'}
----------------------------------
Block 0x168
0x16b: v16b = CALLDATALOAD v156(0x4)
0x16d: v16d(0x20) = CONST 
0x16f: v16f = ADD v16d(0x20) v156(0x4)
0x170: v170 = CALLDATALOAD v16f
0x171: v171(0x628) = CONST 
0x174: JUMP v171(0x628)
----------------------------------

Begin block 0x1750x145
prev = {'0x63f'}, next = {}
----------------------------------
Block 0x1750x145
0x1760x145: STOP 
----------------------------------

Begin block 0x1750x2f8
prev = {'0x8a1'}, next = {}
----------------------------------
Block 0x1750x2f8
0x1760x2f8: STOP 
----------------------------------

Begin block 0x1750x30d
prev = {'0x91c'}, next = {}
----------------------------------
Block 0x1750x30d
0x1760x30d: STOP 
----------------------------------

Begin block 0x1750x415
prev = {'0xc1a'}, next = {}
----------------------------------
Block 0x1750x415
0x1760x415: STOP 
----------------------------------

Begin block 0x1750x5ba
prev = {'0xf01'}, next = {}
----------------------------------
Block 0x1750x5ba
0x1760x5ba: STOP 
----------------------------------

Begin block 0x1750x5f5
prev = {'0xf7c'}, next = {}
----------------------------------
Block 0x1750x5f5
0x1760x5f5: STOP 
----------------------------------

Begin block 0x177
prev = {}, next = {'0x17f', '0x183'}
----------------------------------
function name()()
Block 0x177
0x178: v178 = CALLVALUE 
0x17a: v17a = ISZERO v178
0x17b: v17b(0x183) = CONST 
0x17e: JUMPI v17b(0x183) v17a
----------------------------------

Begin block 0x17f
prev = {'0x177'}, next = {}
----------------------------------
Block 0x17f
0x17f: v17f(0x0) = CONST 
0x182: REVERT v17f(0x0) v17f(0x0)
----------------------------------

Begin block 0x183
prev = {'0x177'}, next = {'0x18c0x177'}
----------------------------------
Block 0x183
0x185: v185(0x18c) = CONST 
0x188: v188(0x64a) = CONST 
0x18b: v18b_0, v18b_1 = CALLPRIVATE v188(0x64a) v185(0x18c)
----------------------------------

Begin block 0x18c0x177
prev = {'0x183'}, next = {'0x1ae0x177'}
----------------------------------
Block 0x18c0x177
0x18d0x177: v17718d(0x40) = CONST 
0x1900x177: v177190 = MLOAD v17718d(0x40)
0x1910x177: v177191(0x20) = CONST 
0x1950x177: MSTORE v177190 v177191(0x20)
0x1970x177: v177197 = MLOAD v18b_0
0x19a0x177: v17719a = ADD v177190 v177191(0x20)
0x19b0x177: MSTORE v17719a v177197
0x19d0x177: v17719d = MLOAD v18b_0
0x1a40x177: v1771a4 = ADD v177190 v17718d(0x40)
0x1a70x177: v1771a7 = ADD v18b_0 v177191(0x20)
0x1ac0x177: v1771ac(0x0) = CONST 
----------------------------------

Begin block 0x18c0x38c
prev = {'0x398'}, next = {'0x1ae0x38c'}
----------------------------------
Block 0x18c0x38c
0x18d0x38c: v38c18d(0x40) = CONST 
0x1900x38c: v38c190 = MLOAD v38c18d(0x40)
0x1910x38c: v38c191(0x20) = CONST 
0x1950x38c: MSTORE v38c190 v38c191(0x20)
0x1970x38c: v38c197 = MLOAD v3a0_0
0x19a0x38c: v38c19a = ADD v38c190 v38c191(0x20)
0x19b0x38c: MSTORE v38c19a v38c197
0x19d0x38c: v38c19d = MLOAD v3a0_0
0x1a40x38c: v38c1a4 = ADD v38c190 v38c18d(0x40)
0x1a70x38c: v38c1a7 = ADD v3a0_0 v38c191(0x20)
0x1ac0x38c: v38c1ac(0x0) = CONST 
----------------------------------

Begin block 0x1ae0x177
prev = {'0x1b70x177', '0x18c0x177'}, next = {'0x1c60x177', '0x1b70x177'}
----------------------------------
Block 0x1ae0x177
0x1ae0x177_0x0: v1ae177_0 = PHI v1771ac(0x0) v1771c1
0x1b10x177: v1771b1 = LT v1ae177_0 v17719d
0x1b20x177: v1771b2 = ISZERO v1771b1
0x1b30x177: v1771b3(0x1c6) = CONST 
0x1b60x177: JUMPI v1771b3(0x1c6) v1771b2
----------------------------------

Begin block 0x1ae0x38c
prev = {'0x18c0x38c', '0x1b70x38c'}, next = {'0x1c60x38c', '0x1b70x38c'}
----------------------------------
Block 0x1ae0x38c
0x1ae0x38c_0x0: v1ae38c_0 = PHI v38c1ac(0x0) v38c1c1
0x1b10x38c: v38c1b1 = LT v1ae38c_0 v38c19d
0x1b20x38c: v38c1b2 = ISZERO v38c1b1
0x1b30x38c: v38c1b3(0x1c6) = CONST 
0x1b60x38c: JUMPI v38c1b3(0x1c6) v38c1b2
----------------------------------

Begin block 0x1b70x177
prev = {'0x1ae0x177'}, next = {'0x1ae0x177'}
----------------------------------
Block 0x1b70x177
0x1b70x177_0x0: v1b7177_0 = PHI v1771ac(0x0) v1771c1
0x1b90x177: v1771b9 = ADD v1b7177_0 v1771a7
0x1ba0x177: v1771ba = MLOAD v1771b9
0x1bd0x177: v1771bd = ADD v1b7177_0 v1771a4
0x1be0x177: MSTORE v1771bd v1771ba
0x1bf0x177: v1771bf(0x20) = CONST 
0x1c10x177: v1771c1 = ADD v1771bf(0x20) v1b7177_0
0x1c20x177: v1771c2(0x1ae) = CONST 
0x1c50x177: JUMP v1771c2(0x1ae)
----------------------------------

Begin block 0x1b70x38c
prev = {'0x1ae0x38c'}, next = {'0x1ae0x38c'}
----------------------------------
Block 0x1b70x38c
0x1b70x38c_0x0: v1b738c_0 = PHI v38c1ac(0x0) v38c1c1
0x1b90x38c: v38c1b9 = ADD v1b738c_0 v38c1a7
0x1ba0x38c: v38c1ba = MLOAD v38c1b9
0x1bd0x38c: v38c1bd = ADD v1b738c_0 v38c1a4
0x1be0x38c: MSTORE v38c1bd v38c1ba
0x1bf0x38c: v38c1bf(0x20) = CONST 
0x1c10x38c: v38c1c1 = ADD v38c1bf(0x20) v1b738c_0
0x1c20x38c: v38c1c2(0x1ae) = CONST 
0x1c50x38c: JUMP v38c1c2(0x1ae)
----------------------------------

Begin block 0x1c60x177
prev = {'0x1ae0x177'}, next = {'0x1da0x177', '0x1f30x177'}
----------------------------------
Block 0x1c60x177
0x1cf0x177: v1771cf = ADD v17719d v1771a4
0x1d10x177: v1771d1(0x1f) = CONST 
0x1d30x177: v1771d3 = AND v1771d1(0x1f) v17719d
0x1d50x177: v1771d5 = ISZERO v1771d3
0x1d60x177: v1771d6(0x1f3) = CONST 
0x1d90x177: JUMPI v1771d6(0x1f3) v1771d5
----------------------------------

Begin block 0x1c60x38c
prev = {'0x1ae0x38c'}, next = {'0x1da0x38c', '0x1f30x38c'}
----------------------------------
Block 0x1c60x38c
0x1cf0x38c: v38c1cf = ADD v38c19d v38c1a4
0x1d10x38c: v38c1d1(0x1f) = CONST 
0x1d30x38c: v38c1d3 = AND v38c1d1(0x1f) v38c19d
0x1d50x38c: v38c1d5 = ISZERO v38c1d3
0x1d60x38c: v38c1d6(0x1f3) = CONST 
0x1d90x38c: JUMPI v38c1d6(0x1f3) v38c1d5
----------------------------------

Begin block 0x1da0x177
prev = {'0x1c60x177'}, next = {'0x1f30x177'}
----------------------------------
Block 0x1da0x177
0x1dc0x177: v1771dc = SUB v1771cf v1771d3
0x1de0x177: v1771de = MLOAD v1771dc
0x1df0x177: v1771df(0x1) = CONST 
0x1e20x177: v1771e2(0x20) = CONST 
0x1e40x177: v1771e4 = SUB v1771e2(0x20) v1771d3
0x1e50x177: v1771e5(0x100) = CONST 
0x1e80x177: v1771e8 = EXP v1771e5(0x100) v1771e4
0x1e90x177: v1771e9 = SUB v1771e8 v1771df(0x1)
0x1ea0x177: v1771ea = NOT v1771e9
0x1eb0x177: v1771eb = AND v1771ea v1771de
0x1ed0x177: MSTORE v1771dc v1771eb
0x1ee0x177: v1771ee(0x20) = CONST 
0x1f00x177: v1771f0 = ADD v1771ee(0x20) v1771dc
----------------------------------

Begin block 0x1da0x38c
prev = {'0x1c60x38c'}, next = {'0x1f30x38c'}
----------------------------------
Block 0x1da0x38c
0x1dc0x38c: v38c1dc = SUB v38c1cf v38c1d3
0x1de0x38c: v38c1de = MLOAD v38c1dc
0x1df0x38c: v38c1df(0x1) = CONST 
0x1e20x38c: v38c1e2(0x20) = CONST 
0x1e40x38c: v38c1e4 = SUB v38c1e2(0x20) v38c1d3
0x1e50x38c: v38c1e5(0x100) = CONST 
0x1e80x38c: v38c1e8 = EXP v38c1e5(0x100) v38c1e4
0x1e90x38c: v38c1e9 = SUB v38c1e8 v38c1df(0x1)
0x1ea0x38c: v38c1ea = NOT v38c1e9
0x1eb0x38c: v38c1eb = AND v38c1ea v38c1de
0x1ed0x38c: MSTORE v38c1dc v38c1eb
0x1ee0x38c: v38c1ee(0x20) = CONST 
0x1f00x38c: v38c1f0 = ADD v38c1ee(0x20) v38c1dc
----------------------------------

Begin block 0x1f30x177
prev = {'0x1c60x177', '0x1da0x177'}, next = {}
----------------------------------
Block 0x1f30x177
0x1f30x177_0x1: v1f3177_1 = PHI v1771cf v1771f0
0x1f90x177: v1771f9(0x40) = CONST 
0x1fb0x177: v1771fb = MLOAD v1771f9(0x40)
0x1fe0x177: v1771fe = SUB v1f3177_1 v1771fb
0x2000x177: RETURN v1771fb v1771fe
----------------------------------

Begin block 0x1f30x38c
prev = {'0x1c60x38c', '0x1da0x38c'}, next = {}
----------------------------------
Block 0x1f30x38c
0x1f30x38c_0x1: v1f338c_1 = PHI v38c1cf v38c1f0
0x1f90x38c: v38c1f9(0x40) = CONST 
0x1fb0x38c: v38c1fb = MLOAD v38c1f9(0x40)
0x1fe0x38c: v38c1fe = SUB v1f338c_1 v38c1fb
0x2000x38c: RETURN v38c1fb v38c1fe
----------------------------------

Begin block 0x201
prev = {}, next = {'0x20d', '0x209'}
----------------------------------
function approve(address,uint256)()
Block 0x201
0x202: v202 = CALLVALUE 
0x204: v204 = ISZERO v202
0x205: v205(0x20d) = CONST 
0x208: JUMPI v205(0x20d) v204
----------------------------------

Begin block 0x209
prev = {'0x201'}, next = {}
----------------------------------
Block 0x209
0x209: v209(0x0) = CONST 
0x20c: REVERT v209(0x0) v209(0x0)
----------------------------------

Begin block 0x20d
prev = {'0x201'}, next = {'0x224', '0x220'}
----------------------------------
Block 0x20d
0x20f: v20f(0x23a) = CONST 
0x212: v212(0x4) = CONST 
0x215: v215 = CALLDATASIZE 
0x216: v216 = SUB v215 v212(0x4)
0x217: v217(0x40) = CONST 
0x21a: v21a = LT v216 v217(0x40)
0x21b: v21b = ISZERO v21a
0x21c: v21c(0x224) = CONST 
0x21f: JUMPI v21c(0x224) v21b
----------------------------------

Begin block 0x220
prev = {'0x20d'}, next = {}
----------------------------------
Block 0x220
0x220: v220(0x0) = CONST 
0x223: REVERT v220(0x0) v220(0x0)
----------------------------------

Begin block 0x224
prev = {'0x20d'}, next = {'0x6d8'}
----------------------------------
Block 0x224
0x226: v226(0x1) = CONST 
0x228: v228(0x1) = CONST 
0x22a: v22a(0xa0) = CONST 
0x22c: v22c(0x10000000000000000000000000000000000000000) = SHL v22a(0xa0) v228(0x1)
0x22d: v22d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v22c(0x10000000000000000000000000000000000000000) v226(0x1)
0x22f: v22f = CALLDATALOAD v212(0x4)
0x230: v230 = AND v22f v22d(0xffffffffffffffffffffffffffffffffffffffff)
0x232: v232(0x20) = CONST 
0x234: v234 = ADD v232(0x20) v212(0x4)
0x235: v235 = CALLDATALOAD v234
0x236: v236(0x6d8) = CONST 
0x239: JUMP v236(0x6d8)
----------------------------------

Begin block 0x23a0x201
prev = {'0x7390x201'}, next = {}
----------------------------------
Block 0x23a0x201
0x23b0x201: v20123b(0x40) = CONST 
0x23e0x201: v20123e = MLOAD v20123b(0x40)
0x2400x201: v201240 = ISZERO v737(0x1)
0x2410x201: v201241 = ISZERO v201240
0x2430x201: MSTORE v20123e v201241
0x2440x201: v201244 = MLOAD v20123b(0x40)
0x2480x201: v201248 = SUB v20123e v201244
0x2490x201: v201249(0x20) = CONST 
0x24b0x201: v20124b = ADD v201249(0x20) v201248
0x24d0x201: RETURN v201244 v20124b
----------------------------------

Begin block 0x23a0x275
prev = {'0x82c'}, next = {}
----------------------------------
Block 0x23a0x275
0x23b0x275: v27523b(0x40) = CONST 
0x23e0x275: v27523e = MLOAD v27523b(0x40)
0x2400x275: v275240 = ISZERO v873(0x1)
0x2410x275: v275241 = ISZERO v275240
0x2430x275: MSTORE v27523e v275241
0x2440x275: v275244 = MLOAD v27523b(0x40)
0x2480x275: v275248 = SUB v27523e v275244
0x2490x275: v275249(0x20) = CONST 
0x24b0x275: v27524b = ADD v275249(0x20) v275248
0x24d0x275: RETURN v275244 v27524b
----------------------------------

Begin block 0x23a0x3a9
prev = {'0xba2'}, next = {}
----------------------------------
Block 0x23a0x3a9
0x23b0x3a9: v3a923b(0x40) = CONST 
0x23e0x3a9: v3a923e = MLOAD v3a923b(0x40)
0x2400x3a9: v3a9240 = ISZERO vbe7(0x1)
0x2410x3a9: v3a9241 = ISZERO v3a9240
0x2430x3a9: MSTORE v3a923e v3a9241
0x2440x3a9: v3a9244 = MLOAD v3a923b(0x40)
0x2480x3a9: v3a9248 = SUB v3a923e v3a9244
0x2490x3a9: v3a9249(0x20) = CONST 
0x24b0x3a9: v3a924b = ADD v3a9249(0x20) v3a9248
0x24d0x3a9: RETURN v3a9244 v3a924b
----------------------------------

Begin block 0x23a0x3e2
prev = {'0xbee'}, next = {}
----------------------------------
Block 0x23a0x3e2
0x23b0x3e2: v3e223b(0x40) = CONST 
0x23e0x3e2: v3e223e = MLOAD v3e223b(0x40)
0x2400x3e2: v3e2240 = ISZERO vc00
0x2410x3e2: v3e2241 = ISZERO v3e2240
0x2430x3e2: MSTORE v3e223e v3e2241
0x2440x3e2: v3e2244 = MLOAD v3e223b(0x40)
0x2480x3e2: v3e2248 = SUB v3e223e v3e2244
0x2490x3e2: v3e2249(0x20) = CONST 
0x24b0x3e2: v3e224b = ADD v3e2249(0x20) v3e2248
0x24d0x3e2: RETURN v3e2244 v3e224b
----------------------------------

Begin block 0x23a0x43f
prev = {'0xd62'}, next = {}
----------------------------------
Block 0x23a0x43f
0x23b0x43f: v43f23b(0x40) = CONST 
0x23e0x43f: v43f23e = MLOAD v43f23b(0x40)
0x2400x43f: v43f240 = ISZERO vd64(0x1)
0x2410x43f: v43f241 = ISZERO v43f240
0x2430x43f: MSTORE v43f23e v43f241
0x2440x43f: v43f244 = MLOAD v43f23b(0x40)
0x2480x43f: v43f248 = SUB v43f23e v43f244
0x2490x43f: v43f249(0x20) = CONST 
0x24b0x43f: v43f24b = ADD v43f249(0x20) v43f248
0x24d0x43f: RETURN v43f244 v43f24b
----------------------------------

Begin block 0x23a0x51c
prev = {'0xe18'}, next = {}
----------------------------------
Block 0x23a0x51c
0x23b0x51c: v51c23b(0x40) = CONST 
0x23e0x51c: v51c23e = MLOAD v51c23b(0x40)
0x2400x51c: v51c240 = ISZERO ve1a
0x2410x51c: v51c241 = ISZERO v51c240
0x2430x51c: MSTORE v51c23e v51c241
0x2440x51c: v51c244 = MLOAD v51c23b(0x40)
0x2480x51c: v51c248 = SUB v51c23e v51c244
0x2490x51c: v51c249(0x20) = CONST 
0x24b0x51c: v51c24b = ADD v51c249(0x20) v51c248
0x24d0x51c: RETURN v51c244 v51c24b
----------------------------------

Begin block 0x24e
prev = {}, next = {'0x256', '0x25a'}
----------------------------------
function totalSupply()()
Block 0x24e
0x24f: v24f = CALLVALUE 
0x251: v251 = ISZERO v24f
0x252: v252(0x25a) = CONST 
0x255: JUMPI v252(0x25a) v251
----------------------------------

Begin block 0x256
prev = {'0x24e'}, next = {}
----------------------------------
Block 0x256
0x256: v256(0x0) = CONST 
0x259: REVERT v256(0x0) v256(0x0)
----------------------------------

Begin block 0x25a
prev = {'0x24e'}, next = {'0x73f'}
----------------------------------
Block 0x25a
0x25c: v25c(0x263) = CONST 
0x25f: v25f(0x73f) = CONST 
0x262: JUMP v25f(0x73f)
----------------------------------

Begin block 0x2630x24e
prev = {'0x77d'}, next = {}
----------------------------------
Block 0x2630x24e
0x2640x24e: v24e264(0x40) = CONST 
0x2670x24e: v24e267 = MLOAD v24e264(0x40)
0x26a0x24e: MSTORE v24e267 v77c_0
0x26b0x24e: v24e26b = MLOAD v24e264(0x40)
0x26f0x24e: v24e26f = SUB v24e267 v24e26b
0x2700x24e: v24e270(0x20) = CONST 
0x2720x24e: v24e272 = ADD v24e270(0x20) v24e26f
0x2740x24e: RETURN v24e26b v24e272
----------------------------------

Begin block 0x2630x2e3
prev = {'0x884'}, next = {}
----------------------------------
Block 0x2630x2e3
0x2640x2e3: v2e3264(0x40) = CONST 
0x2670x2e3: v2e3267 = MLOAD v2e3264(0x40)
0x26a0x2e3: MSTORE v2e3267 v887
0x26b0x2e3: v2e326b = MLOAD v2e3264(0x40)
0x26f0x2e3: v2e326f = SUB v2e3267 v2e326b
0x2700x2e3: v2e3270(0x20) = CONST 
0x2720x2e3: v2e3272 = ADD v2e3270(0x20) v2e326f
0x2740x2e3: RETURN v2e326b v2e3272
----------------------------------

Begin block 0x2630x346
prev = {'0x9a2'}, next = {}
----------------------------------
Block 0x2630x346
0x2640x346: v346264(0x40) = CONST 
0x2670x346: v346267 = MLOAD v346264(0x40)
0x26a0x346: MSTORE v346267 v9a5
0x26b0x346: v34626b = MLOAD v346264(0x40)
0x26f0x346: v34626f = SUB v346267 v34626b
0x2700x346: v346270(0x20) = CONST 
0x2720x346: v346272 = ADD v346270(0x20) v34626f
0x2740x346: RETURN v34626b v346272
----------------------------------

Begin block 0x2630x3a1
prev = {'0xa3d'}, next = {}
----------------------------------
Block 0x2630x3a1
0x2640x3a1: v3a1264(0x40) = CONST 
0x2670x3a1: v3a1267 = MLOAD v3a1264(0x40)
0x26a0x3a1: MSTORE v3a1267 va2f
0x26b0x3a1: v3a126b = MLOAD v3a1264(0x40)
0x26f0x3a1: v3a126f = SUB v3a1267 v3a126b
0x2700x3a1: v3a1270(0x20) = CONST 
0x2720x3a1: v3a1272 = ADD v3a1270(0x20) v3a126f
0x2740x3a1: RETURN v3a126b v3a1272
----------------------------------

Begin block 0x2630x555
prev = {'0xe21'}, next = {}
----------------------------------
Block 0x2630x555
0x2640x555: v555264(0x40) = CONST 
0x2670x555: v555267 = MLOAD v555264(0x40)
0x26a0x555: MSTORE v555267 ve49
0x26b0x555: v55526b = MLOAD v555264(0x40)
0x26f0x555: v55526f = SUB v555267 v55526b
0x2700x555: v555270(0x20) = CONST 
0x2720x555: v555272 = ADD v555270(0x20) v55526f
0x2740x555: RETURN v55526b v555272
----------------------------------

Begin block 0x2630x590
prev = {'0xebf0x590'}, next = {}
----------------------------------
Block 0x2630x590
0x2640x590: v590264(0x40) = CONST 
0x2670x590: v590267 = MLOAD v590264(0x40)
0x26a0x590: MSTORE v590267 v590e95
0x26b0x590: v59026b = MLOAD v590264(0x40)
0x26f0x590: v59026f = SUB v590267 v59026b
0x2700x590: v590270(0x20) = CONST 
0x2720x590: v590272 = ADD v590270(0x20) v59026f
0x2740x590: RETURN v59026b v590272
----------------------------------

Begin block 0x275
prev = {}, next = {'0x27d', '0x281'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x275
0x276: v276 = CALLVALUE 
0x278: v278 = ISZERO v276
0x279: v279(0x281) = CONST 
0x27c: JUMPI v279(0x281) v278
----------------------------------

Begin block 0x27d
prev = {'0x275'}, next = {}
----------------------------------
Block 0x27d
0x27d: v27d(0x0) = CONST 
0x280: REVERT v27d(0x0) v27d(0x0)
----------------------------------

Begin block 0x281
prev = {'0x275'}, next = {'0x294', '0x298'}
----------------------------------
Block 0x281
0x283: v283(0x23a) = CONST 
0x286: v286(0x4) = CONST 
0x289: v289 = CALLDATASIZE 
0x28a: v28a = SUB v289 v286(0x4)
0x28b: v28b(0x60) = CONST 
0x28e: v28e = LT v28a v28b(0x60)
0x28f: v28f = ISZERO v28e
0x290: v290(0x298) = CONST 
0x293: JUMPI v290(0x298) v28f
----------------------------------

Begin block 0x294
prev = {'0x281'}, next = {}
----------------------------------
Block 0x294
0x294: v294(0x0) = CONST 
0x297: REVERT v294(0x0) v294(0x0)
----------------------------------

Begin block 0x298
prev = {'0x281'}, next = {'0x782'}
----------------------------------
Block 0x298
0x29a: v29a(0x1) = CONST 
0x29c: v29c(0x1) = CONST 
0x29e: v29e(0xa0) = CONST 
0x2a0: v2a0(0x10000000000000000000000000000000000000000) = SHL v29e(0xa0) v29c(0x1)
0x2a1: v2a1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a0(0x10000000000000000000000000000000000000000) v29a(0x1)
0x2a3: v2a3 = CALLDATALOAD v286(0x4)
0x2a5: v2a5 = AND v2a1(0xffffffffffffffffffffffffffffffffffffffff) v2a3
0x2a7: v2a7(0x20) = CONST 
0x2aa: v2aa = ADD v286(0x4) v2a7(0x20)
0x2ab: v2ab = CALLDATALOAD v2aa
0x2ae: v2ae = AND v2a1(0xffffffffffffffffffffffffffffffffffffffff) v2ab
0x2b0: v2b0(0x40) = CONST 
0x2b2: v2b2 = ADD v2b0(0x40) v286(0x4)
0x2b3: v2b3 = CALLDATALOAD v2b2
0x2b4: v2b4(0x782) = CONST 
0x2b7: JUMP v2b4(0x782)
----------------------------------

Begin block 0x2b8
prev = {}, next = {'0x2c4', '0x2c0'}
----------------------------------
function decimals()()
Block 0x2b8
0x2b9: v2b9 = CALLVALUE 
0x2bb: v2bb = ISZERO v2b9
0x2bc: v2bc(0x2c4) = CONST 
0x2bf: JUMPI v2bc(0x2c4) v2bb
----------------------------------

Begin block 0x2c0
prev = {'0x2b8'}, next = {}
----------------------------------
Block 0x2c0
0x2c0: v2c0(0x0) = CONST 
0x2c3: REVERT v2c0(0x0) v2c0(0x0)
----------------------------------

Begin block 0x2c4
prev = {'0x2b8'}, next = {'0x87b'}
----------------------------------
Block 0x2c4
0x2c6: v2c6(0x2cd) = CONST 
0x2c9: v2c9(0x87b) = CONST 
0x2cc: JUMP v2c9(0x87b)
----------------------------------

Begin block 0x2cd
prev = {'0x87b'}, next = {}
----------------------------------
Block 0x2cd
0x2ce: v2ce(0x40) = CONST 
0x2d1: v2d1 = MLOAD v2ce(0x40)
0x2d2: v2d2(0xff) = CONST 
0x2d6: v2d6 = AND v881 v2d2(0xff)
0x2d8: MSTORE v2d1 v2d6
0x2d9: v2d9 = MLOAD v2ce(0x40)
0x2dd: v2dd = SUB v2d1 v2d9
0x2de: v2de(0x20) = CONST 
0x2e0: v2e0 = ADD v2de(0x20) v2dd
0x2e2: RETURN v2d9 v2e0
----------------------------------

Begin block 0x2e3
prev = {}, next = {'0x2ef', '0x2eb'}
----------------------------------
function sellPrice()()
Block 0x2e3
0x2e4: v2e4 = CALLVALUE 
0x2e6: v2e6 = ISZERO v2e4
0x2e7: v2e7(0x2ef) = CONST 
0x2ea: JUMPI v2e7(0x2ef) v2e6
----------------------------------

Begin block 0x2eb
prev = {'0x2e3'}, next = {}
----------------------------------
Block 0x2eb
0x2eb: v2eb(0x0) = CONST 
0x2ee: REVERT v2eb(0x0) v2eb(0x0)
----------------------------------

Begin block 0x2ef
prev = {'0x2e3'}, next = {'0x884'}
----------------------------------
Block 0x2ef
0x2f1: v2f1(0x263) = CONST 
0x2f4: v2f4(0x884) = CONST 
0x2f7: JUMP v2f4(0x884)
----------------------------------

Begin block 0x2f8
prev = {}, next = {'0x304', '0x300'}
----------------------------------
function acceptOwnership()()
Block 0x2f8
0x2f9: v2f9 = CALLVALUE 
0x2fb: v2fb = ISZERO v2f9
0x2fc: v2fc(0x304) = CONST 
0x2ff: JUMPI v2fc(0x304) v2fb
----------------------------------

Begin block 0x300
prev = {'0x2f8'}, next = {}
----------------------------------
Block 0x300
0x300: v300(0x0) = CONST 
0x303: REVERT v300(0x0) v300(0x0)
----------------------------------

Begin block 0x304
prev = {'0x2f8'}, next = {'0x88a'}
----------------------------------
Block 0x304
0x306: v306(0x175) = CONST 
0x309: v309(0x88a) = CONST 
0x30c: JUMP v309(0x88a)
----------------------------------

Begin block 0x30d
prev = {}, next = {'0x319', '0x315'}
----------------------------------
function mintToken(address,uint256)()
Block 0x30d
0x30e: v30e = CALLVALUE 
0x310: v310 = ISZERO v30e
0x311: v311(0x319) = CONST 
0x314: JUMPI v311(0x319) v310
----------------------------------

Begin block 0x315
prev = {'0x30d'}, next = {}
----------------------------------
Block 0x315
0x315: v315(0x0) = CONST 
0x318: REVERT v315(0x0) v315(0x0)
----------------------------------

Begin block 0x319
prev = {'0x30d'}, next = {'0x32c', '0x330'}
----------------------------------
Block 0x319
0x31b: v31b(0x175) = CONST 
0x31e: v31e(0x4) = CONST 
0x321: v321 = CALLDATASIZE 
0x322: v322 = SUB v321 v31e(0x4)
0x323: v323(0x40) = CONST 
0x326: v326 = LT v322 v323(0x40)
0x327: v327 = ISZERO v326
0x328: v328(0x330) = CONST 
0x32b: JUMPI v328(0x330) v327
----------------------------------

Begin block 0x32c
prev = {'0x319'}, next = {}
----------------------------------
Block 0x32c
0x32c: v32c(0x0) = CONST 
0x32f: REVERT v32c(0x0) v32c(0x0)
----------------------------------

Begin block 0x330
prev = {'0x319'}, next = {'0x905'}
----------------------------------
Block 0x330
0x332: v332(0x1) = CONST 
0x334: v334(0x1) = CONST 
0x336: v336(0xa0) = CONST 
0x338: v338(0x10000000000000000000000000000000000000000) = SHL v336(0xa0) v334(0x1)
0x339: v339(0xffffffffffffffffffffffffffffffffffffffff) = SUB v338(0x10000000000000000000000000000000000000000) v332(0x1)
0x33b: v33b = CALLDATALOAD v31e(0x4)
0x33c: v33c = AND v33b v339(0xffffffffffffffffffffffffffffffffffffffff)
0x33e: v33e(0x20) = CONST 
0x340: v340 = ADD v33e(0x20) v31e(0x4)
0x341: v341 = CALLDATALOAD v340
0x342: v342(0x905) = CONST 
0x345: JUMP v342(0x905)
----------------------------------

Begin block 0x346
prev = {}, next = {'0x352', '0x34e'}
----------------------------------
function buyPrice()()
Block 0x346
0x347: v347 = CALLVALUE 
0x349: v349 = ISZERO v347
0x34a: v34a(0x352) = CONST 
0x34d: JUMPI v34a(0x352) v349
----------------------------------

Begin block 0x34e
prev = {'0x346'}, next = {}
----------------------------------
Block 0x34e
0x34e: v34e(0x0) = CONST 
0x351: REVERT v34e(0x0) v34e(0x0)
----------------------------------

Begin block 0x352
prev = {'0x346'}, next = {'0x9a2'}
----------------------------------
Block 0x352
0x354: v354(0x263) = CONST 
0x357: v357(0x9a2) = CONST 
0x35a: JUMP v357(0x9a2)
----------------------------------

Begin block 0x35b
prev = {}, next = {'0x367', '0x363'}
----------------------------------
function owner()()
Block 0x35b
0x35c: v35c = CALLVALUE 
0x35e: v35e = ISZERO v35c
0x35f: v35f(0x367) = CONST 
0x362: JUMPI v35f(0x367) v35e
----------------------------------

Begin block 0x363
prev = {'0x35b'}, next = {}
----------------------------------
Block 0x363
0x363: v363(0x0) = CONST 
0x366: REVERT v363(0x0) v363(0x0)
----------------------------------

Begin block 0x367
prev = {'0x35b'}, next = {'0x9a8'}
----------------------------------
Block 0x367
0x369: v369(0x370) = CONST 
0x36c: v36c(0x9a8) = CONST 
0x36f: JUMP v36c(0x9a8)
----------------------------------

Begin block 0x3700x35b
prev = {'0x9a8'}, next = {}
----------------------------------
Block 0x3700x35b
0x3710x35b: v35b371(0x40) = CONST 
0x3740x35b: v35b374 = MLOAD v35b371(0x40)
0x3750x35b: v35b375(0x1) = CONST 
0x3770x35b: v35b377(0x1) = CONST 
0x3790x35b: v35b379(0xa0) = CONST 
0x37b0x35b: v35b37b(0x10000000000000000000000000000000000000000) = SHL v35b379(0xa0) v35b377(0x1)
0x37c0x35b: v35b37c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v35b37b(0x10000000000000000000000000000000000000000) v35b375(0x1)
0x37f0x35b: v35b37f = AND v9b4 v35b37c(0xffffffffffffffffffffffffffffffffffffffff)
0x3810x35b: MSTORE v35b374 v35b37f
0x3820x35b: v35b382 = MLOAD v35b371(0x40)
0x3860x35b: v35b386 = SUB v35b374 v35b382
0x3870x35b: v35b387(0x20) = CONST 
0x3890x35b: v35b389 = ADD v35b387(0x20) v35b386
0x38b0x35b: RETURN v35b382 v35b389
----------------------------------

Begin block 0x3700x507
prev = {'0xd70'}, next = {}
----------------------------------
Block 0x3700x507
0x3710x507: v507371(0x40) = CONST 
0x3740x507: v507374 = MLOAD v507371(0x40)
0x3750x507: v507375(0x1) = CONST 
0x3770x507: v507377(0x1) = CONST 
0x3790x507: v507379(0xa0) = CONST 
0x37b0x507: v50737b(0x10000000000000000000000000000000000000000) = SHL v507379(0xa0) v507377(0x1)
0x37c0x507: v50737c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v50737b(0x10000000000000000000000000000000000000000) v507375(0x1)
0x37f0x507: v50737f = AND vd7c v50737c(0xffffffffffffffffffffffffffffffffffffffff)
0x3810x507: MSTORE v507374 v50737f
0x3820x507: v507382 = MLOAD v507371(0x40)
0x3860x507: v507386 = SUB v507374 v507382
0x3870x507: v507387(0x20) = CONST 
0x3890x507: v507389 = ADD v507387(0x20) v507386
0x38b0x507: RETURN v507382 v507389
----------------------------------

Begin block 0x38c
prev = {}, next = {'0x398', '0x394'}
----------------------------------
function symbol()()
Block 0x38c
0x38d: v38d = CALLVALUE 
0x38f: v38f = ISZERO v38d
0x390: v390(0x398) = CONST 
0x393: JUMPI v390(0x398) v38f
----------------------------------

Begin block 0x394
prev = {'0x38c'}, next = {}
----------------------------------
Block 0x394
0x394: v394(0x0) = CONST 
0x397: REVERT v394(0x0) v394(0x0)
----------------------------------

Begin block 0x398
prev = {'0x38c'}, next = {'0x18c0x38c'}
----------------------------------
Block 0x398
0x39a: v39a(0x18c) = CONST 
0x39d: v39d(0x9b7) = CONST 
0x3a0: v3a0_0, v3a0_1 = CALLPRIVATE v39d(0x9b7) v39a(0x18c)
----------------------------------

Begin block 0x3a1
prev = {}, next = {'0xa0f'}
----------------------------------
function buy()()
Block 0x3a1
0x3a2: v3a2(0x263) = CONST 
0x3a5: v3a5(0xa0f) = CONST 
0x3a8: JUMP v3a5(0xa0f)
----------------------------------

Begin block 0x3a9
prev = {}, next = {'0x3b1', '0x3b5'}
----------------------------------
function transfer(address,uint256)()
Block 0x3a9
0x3aa: v3aa = CALLVALUE 
0x3ac: v3ac = ISZERO v3aa
0x3ad: v3ad(0x3b5) = CONST 
0x3b0: JUMPI v3ad(0x3b5) v3ac
----------------------------------

Begin block 0x3b1
prev = {'0x3a9'}, next = {}
----------------------------------
Block 0x3b1
0x3b1: v3b1(0x0) = CONST 
0x3b4: REVERT v3b1(0x0) v3b1(0x0)
----------------------------------

Begin block 0x3b5
prev = {'0x3a9'}, next = {'0x3cc', '0x3c8'}
----------------------------------
Block 0x3b5
0x3b7: v3b7(0x23a) = CONST 
0x3ba: v3ba(0x4) = CONST 
0x3bd: v3bd = CALLDATASIZE 
0x3be: v3be = SUB v3bd v3ba(0x4)
0x3bf: v3bf(0x40) = CONST 
0x3c2: v3c2 = LT v3be v3bf(0x40)
0x3c3: v3c3 = ISZERO v3c2
0x3c4: v3c4(0x3cc) = CONST 
0x3c7: JUMPI v3c4(0x3cc) v3c3
----------------------------------

Begin block 0x3c8
prev = {'0x3b5'}, next = {}
----------------------------------
Block 0x3c8
0x3c8: v3c8(0x0) = CONST 
0x3cb: REVERT v3c8(0x0) v3c8(0x0)
----------------------------------

Begin block 0x3cc
prev = {'0x3b5'}, next = {'0xa87'}
----------------------------------
Block 0x3cc
0x3ce: v3ce(0x1) = CONST 
0x3d0: v3d0(0x1) = CONST 
0x3d2: v3d2(0xa0) = CONST 
0x3d4: v3d4(0x10000000000000000000000000000000000000000) = SHL v3d2(0xa0) v3d0(0x1)
0x3d5: v3d5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3d4(0x10000000000000000000000000000000000000000) v3ce(0x1)
0x3d7: v3d7 = CALLDATALOAD v3ba(0x4)
0x3d8: v3d8 = AND v3d7 v3d5(0xffffffffffffffffffffffffffffffffffffffff)
0x3da: v3da(0x20) = CONST 
0x3dc: v3dc = ADD v3da(0x20) v3ba(0x4)
0x3dd: v3dd = CALLDATALOAD v3dc
0x3de: v3de(0xa87) = CONST 
0x3e1: JUMP v3de(0xa87)
----------------------------------

Begin block 0x3e2
prev = {}, next = {'0x3ee', '0x3ea'}
----------------------------------
function frozenAccount(address)()
Block 0x3e2
0x3e3: v3e3 = CALLVALUE 
0x3e5: v3e5 = ISZERO v3e3
0x3e6: v3e6(0x3ee) = CONST 
0x3e9: JUMPI v3e6(0x3ee) v3e5
----------------------------------

Begin block 0x3ea
prev = {'0x3e2'}, next = {}
----------------------------------
Block 0x3ea
0x3ea: v3ea(0x0) = CONST 
0x3ed: REVERT v3ea(0x0) v3ea(0x0)
----------------------------------

Begin block 0x3ee
prev = {'0x3e2'}, next = {'0x405', '0x401'}
----------------------------------
Block 0x3ee
0x3f0: v3f0(0x23a) = CONST 
0x3f3: v3f3(0x4) = CONST 
0x3f6: v3f6 = CALLDATASIZE 
0x3f7: v3f7 = SUB v3f6 v3f3(0x4)
0x3f8: v3f8(0x20) = CONST 
0x3fb: v3fb = LT v3f7 v3f8(0x20)
0x3fc: v3fc = ISZERO v3fb
0x3fd: v3fd(0x405) = CONST 
0x400: JUMPI v3fd(0x405) v3fc
----------------------------------

Begin block 0x401
prev = {'0x3ee'}, next = {}
----------------------------------
Block 0x401
0x401: v401(0x0) = CONST 
0x404: REVERT v401(0x0) v401(0x0)
----------------------------------

Begin block 0x405
prev = {'0x3ee'}, next = {'0xbee'}
----------------------------------
Block 0x405
0x407: v407 = CALLDATALOAD v3f3(0x4)
0x408: v408(0x1) = CONST 
0x40a: v40a(0x1) = CONST 
0x40c: v40c(0xa0) = CONST 
0x40e: v40e(0x10000000000000000000000000000000000000000) = SHL v40c(0xa0) v40a(0x1)
0x40f: v40f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v40e(0x10000000000000000000000000000000000000000) v408(0x1)
0x410: v410 = AND v40f(0xffffffffffffffffffffffffffffffffffffffff) v407
0x411: v411(0xbee) = CONST 
0x414: JUMP v411(0xbee)
----------------------------------

Begin block 0x415
prev = {}, next = {'0x421', '0x41d'}
----------------------------------
function setMinBalance(uint256)()
Block 0x415
0x416: v416 = CALLVALUE 
0x418: v418 = ISZERO v416
0x419: v419(0x421) = CONST 
0x41c: JUMPI v419(0x421) v418
----------------------------------

Begin block 0x41d
prev = {'0x415'}, next = {}
----------------------------------
Block 0x41d
0x41d: v41d(0x0) = CONST 
0x420: REVERT v41d(0x0) v41d(0x0)
----------------------------------

Begin block 0x421
prev = {'0x415'}, next = {'0x438', '0x434'}
----------------------------------
Block 0x421
0x423: v423(0x175) = CONST 
0x426: v426(0x4) = CONST 
0x429: v429 = CALLDATASIZE 
0x42a: v42a = SUB v429 v426(0x4)
0x42b: v42b(0x20) = CONST 
0x42e: v42e = LT v42a v42b(0x20)
0x42f: v42f = ISZERO v42e
0x430: v430(0x438) = CONST 
0x433: JUMPI v430(0x438) v42f
----------------------------------

Begin block 0x434
prev = {'0x421'}, next = {}
----------------------------------
Block 0x434
0x434: v434(0x0) = CONST 
0x437: REVERT v434(0x0) v434(0x0)
----------------------------------

Begin block 0x438
prev = {'0x421'}, next = {'0xc03'}
----------------------------------
Block 0x438
0x43a: v43a = CALLDATALOAD v426(0x4)
0x43b: v43b(0xc03) = CONST 
0x43e: JUMP v43b(0xc03)
----------------------------------

Begin block 0x43f
prev = {}, next = {'0x447', '0x44b'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x43f
0x440: v440 = CALLVALUE 
0x442: v442 = ISZERO v440
0x443: v443(0x44b) = CONST 
0x446: JUMPI v443(0x44b) v442
----------------------------------

Begin block 0x447
prev = {'0x43f'}, next = {}
----------------------------------
Block 0x447
0x447: v447(0x0) = CONST 
0x44a: REVERT v447(0x0) v447(0x0)
----------------------------------

Begin block 0x44b
prev = {'0x43f'}, next = {'0x462', '0x45e'}
----------------------------------
Block 0x44b
0x44d: v44d(0x23a) = CONST 
0x450: v450(0x4) = CONST 
0x453: v453 = CALLDATASIZE 
0x454: v454 = SUB v453 v450(0x4)
0x455: v455(0x60) = CONST 
0x458: v458 = LT v454 v455(0x60)
0x459: v459 = ISZERO v458
0x45a: v45a(0x462) = CONST 
0x45d: JUMPI v45a(0x462) v459
----------------------------------

Begin block 0x45e
prev = {'0x44b'}, next = {}
----------------------------------
Block 0x45e
0x45e: v45e(0x0) = CONST 
0x461: REVERT v45e(0x0) v45e(0x0)
----------------------------------

Begin block 0x462
prev = {'0x44b'}, next = {'0x492', '0x48e'}
----------------------------------
Block 0x462
0x463: v463(0x1) = CONST 
0x465: v465(0x1) = CONST 
0x467: v467(0xa0) = CONST 
0x469: v469(0x10000000000000000000000000000000000000000) = SHL v467(0xa0) v465(0x1)
0x46a: v46a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v469(0x10000000000000000000000000000000000000000) v463(0x1)
0x46c: v46c = CALLDATALOAD v450(0x4)
0x46d: v46d = AND v46c v46a(0xffffffffffffffffffffffffffffffffffffffff)
0x46f: v46f(0x20) = CONST 
0x472: v472 = ADD v450(0x4) v46f(0x20)
0x473: v473 = CALLDATALOAD v472
0x476: v476 = ADD v450(0x4) v454
0x478: v478(0x60) = CONST 
0x47b: v47b = ADD v450(0x4) v478(0x60)
0x47c: v47c(0x40) = CONST 
0x47f: v47f = ADD v450(0x4) v47c(0x40)
0x480: v480 = CALLDATALOAD v47f
0x481: v481(0x100000000) = CONST 
0x488: v488 = GT v480 v481(0x100000000)
0x489: v489 = ISZERO v488
0x48a: v48a(0x492) = CONST 
0x48d: JUMPI v48a(0x492) v489
----------------------------------

Begin block 0x48e
prev = {'0x462'}, next = {}
----------------------------------
Block 0x48e
0x48e: v48e(0x0) = CONST 
0x491: REVERT v48e(0x0) v48e(0x0)
----------------------------------

Begin block 0x492
prev = {'0x462'}, next = {'0x4a0', '0x4a4'}
----------------------------------
Block 0x492
0x494: v494 = ADD v450(0x4) v480
0x496: v496(0x20) = CONST 
0x499: v499 = ADD v494 v496(0x20)
0x49a: v49a = GT v499 v476
0x49b: v49b = ISZERO v49a
0x49c: v49c(0x4a4) = CONST 
0x49f: JUMPI v49c(0x4a4) v49b
----------------------------------

Begin block 0x4a0
prev = {'0x492'}, next = {}
----------------------------------
Block 0x4a0
0x4a0: v4a0(0x0) = CONST 
0x4a3: REVERT v4a0(0x0) v4a0(0x0)
----------------------------------

Begin block 0x4a4
prev = {'0x492'}, next = {'0x4c6', '0x4c2'}
----------------------------------
Block 0x4a4
0x4a6: v4a6 = CALLDATALOAD v494
0x4a8: v4a8(0x20) = CONST 
0x4aa: v4aa = ADD v4a8(0x20) v494
0x4ad: v4ad(0x1) = CONST 
0x4b0: v4b0 = MUL v4a6 v4ad(0x1)
0x4b2: v4b2 = ADD v4aa v4b0
0x4b3: v4b3 = GT v4b2 v476
0x4b4: v4b4(0x100000000) = CONST 
0x4bb: v4bb = GT v4a6 v4b4(0x100000000)
0x4bc: v4bc = OR v4bb v4b3
0x4bd: v4bd = ISZERO v4bc
0x4be: v4be(0x4c6) = CONST 
0x4c1: JUMPI v4be(0x4c6) v4bd
----------------------------------

Begin block 0x4c2
prev = {'0x4a4'}, next = {}
----------------------------------
Block 0x4c2
0x4c2: v4c2(0x0) = CONST 
0x4c5: REVERT v4c2(0x0) v4c2(0x0)
----------------------------------

Begin block 0x4c6
prev = {'0x4a4'}, next = {'0xc28'}
----------------------------------
Block 0x4c6
0x4cb: v4cb(0x1f) = CONST 
0x4cd: v4cd = ADD v4cb(0x1f) v4a6
0x4ce: v4ce(0x20) = CONST 
0x4d2: v4d2 = DIV v4cd v4ce(0x20)
0x4d3: v4d3 = MUL v4d2 v4ce(0x20)
0x4d4: v4d4(0x20) = CONST 
0x4d6: v4d6 = ADD v4d4(0x20) v4d3
0x4d7: v4d7(0x40) = CONST 
0x4d9: v4d9 = MLOAD v4d7(0x40)
0x4dc: v4dc = ADD v4d9 v4d6
0x4dd: v4dd(0x40) = CONST 
0x4df: MSTORE v4dd(0x40) v4dc
0x4e7: MSTORE v4d9 v4a6
0x4e8: v4e8(0x20) = CONST 
0x4ea: v4ea = ADD v4e8(0x20) v4d9
0x4f0: CALLDATACOPY v4ea v4aa v4a6
0x4f1: v4f1(0x0) = CONST 
0x4f4: v4f4 = ADD v4ea v4a6
0x4f8: MSTORE v4f4 v4f1(0x0)
0x4fd: v4fd(0xc28) = CONST 
0x506: JUMP v4fd(0xc28)
----------------------------------

Begin block 0x507
prev = {}, next = {'0x50f', '0x513'}
----------------------------------
function newOwner()()
Block 0x507
0x508: v508 = CALLVALUE 
0x50a: v50a = ISZERO v508
0x50b: v50b(0x513) = CONST 
0x50e: JUMPI v50b(0x513) v50a
----------------------------------

Begin block 0x50f
prev = {'0x507'}, next = {}
----------------------------------
Block 0x50f
0x50f: v50f(0x0) = CONST 
0x512: REVERT v50f(0x0) v50f(0x0)
----------------------------------

Begin block 0x513
prev = {'0x507'}, next = {'0xd70'}
----------------------------------
Block 0x513
0x515: v515(0x370) = CONST 
0x518: v518(0xd70) = CONST 
0x51b: JUMP v518(0xd70)
----------------------------------

Begin block 0x51c
prev = {}, next = {'0x528', '0x524'}
----------------------------------
function transferAnyERC20Token(address,uint256)()
Block 0x51c
0x51d: v51d = CALLVALUE 
0x51f: v51f = ISZERO v51d
0x520: v520(0x528) = CONST 
0x523: JUMPI v520(0x528) v51f
----------------------------------

Begin block 0x524
prev = {'0x51c'}, next = {}
----------------------------------
Block 0x524
0x524: v524(0x0) = CONST 
0x527: REVERT v524(0x0) v524(0x0)
----------------------------------

Begin block 0x528
prev = {'0x51c'}, next = {'0x53b', '0x53f'}
----------------------------------
Block 0x528
0x52a: v52a(0x23a) = CONST 
0x52d: v52d(0x4) = CONST 
0x530: v530 = CALLDATASIZE 
0x531: v531 = SUB v530 v52d(0x4)
0x532: v532(0x40) = CONST 
0x535: v535 = LT v531 v532(0x40)
0x536: v536 = ISZERO v535
0x537: v537(0x53f) = CONST 
0x53a: JUMPI v537(0x53f) v536
----------------------------------

Begin block 0x53b
prev = {'0x528'}, next = {}
----------------------------------
Block 0x53b
0x53b: v53b(0x0) = CONST 
0x53e: REVERT v53b(0x0) v53b(0x0)
----------------------------------

Begin block 0x53f
prev = {'0x528'}, next = {'0xd7f'}
----------------------------------
Block 0x53f
0x541: v541(0x1) = CONST 
0x543: v543(0x1) = CONST 
0x545: v545(0xa0) = CONST 
0x547: v547(0x10000000000000000000000000000000000000000) = SHL v545(0xa0) v543(0x1)
0x548: v548(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547(0x10000000000000000000000000000000000000000) v541(0x1)
0x54a: v54a = CALLDATALOAD v52d(0x4)
0x54b: v54b = AND v54a v548(0xffffffffffffffffffffffffffffffffffffffff)
0x54d: v54d(0x20) = CONST 
0x54f: v54f = ADD v54d(0x20) v52d(0x4)
0x550: v550 = CALLDATALOAD v54f
0x551: v551(0xd7f) = CONST 
0x554: JUMP v551(0xd7f)
----------------------------------

Begin block 0x555
prev = {}, next = {'0x55d', '0x561'}
----------------------------------
function allowance(address,address)()
Block 0x555
0x556: v556 = CALLVALUE 
0x558: v558 = ISZERO v556
0x559: v559(0x561) = CONST 
0x55c: JUMPI v559(0x561) v558
----------------------------------

Begin block 0x55d
prev = {'0x555'}, next = {}
----------------------------------
Block 0x55d
0x55d: v55d(0x0) = CONST 
0x560: REVERT v55d(0x0) v55d(0x0)
----------------------------------

Begin block 0x561
prev = {'0x555'}, next = {'0x578', '0x574'}
----------------------------------
Block 0x561
0x563: v563(0x263) = CONST 
0x566: v566(0x4) = CONST 
0x569: v569 = CALLDATASIZE 
0x56a: v56a = SUB v569 v566(0x4)
0x56b: v56b(0x40) = CONST 
0x56e: v56e = LT v56a v56b(0x40)
0x56f: v56f = ISZERO v56e
0x570: v570(0x578) = CONST 
0x573: JUMPI v570(0x578) v56f
----------------------------------

Begin block 0x574
prev = {'0x561'}, next = {}
----------------------------------
Block 0x574
0x574: v574(0x0) = CONST 
0x577: REVERT v574(0x0) v574(0x0)
----------------------------------

Begin block 0x578
prev = {'0x561'}, next = {'0xe21'}
----------------------------------
Block 0x578
0x57a: v57a(0x1) = CONST 
0x57c: v57c(0x1) = CONST 
0x57e: v57e(0xa0) = CONST 
0x580: v580(0x10000000000000000000000000000000000000000) = SHL v57e(0xa0) v57c(0x1)
0x581: v581(0xffffffffffffffffffffffffffffffffffffffff) = SUB v580(0x10000000000000000000000000000000000000000) v57a(0x1)
0x583: v583 = CALLDATALOAD v566(0x4)
0x585: v585 = AND v581(0xffffffffffffffffffffffffffffffffffffffff) v583
0x587: v587(0x20) = CONST 
0x589: v589 = ADD v587(0x20) v566(0x4)
0x58a: v58a = CALLDATALOAD v589
0x58b: v58b = AND v58a v581(0xffffffffffffffffffffffffffffffffffffffff)
0x58c: v58c(0xe21) = CONST 
0x58f: JUMP v58c(0xe21)
----------------------------------

Begin block 0x590
prev = {}, next = {'0x598', '0x59c'}
----------------------------------
function sell(uint256)()
Block 0x590
0x591: v591 = CALLVALUE 
0x593: v593 = ISZERO v591
0x594: v594(0x59c) = CONST 
0x597: JUMPI v594(0x59c) v593
----------------------------------

Begin block 0x598
prev = {'0x590'}, next = {}
----------------------------------
Block 0x598
0x598: v598(0x0) = CONST 
0x59b: REVERT v598(0x0) v598(0x0)
----------------------------------

Begin block 0x59c
prev = {'0x590'}, next = {'0x5af', '0x5b3'}
----------------------------------
Block 0x59c
0x59e: v59e(0x263) = CONST 
0x5a1: v5a1(0x4) = CONST 
0x5a4: v5a4 = CALLDATASIZE 
0x5a5: v5a5 = SUB v5a4 v5a1(0x4)
0x5a6: v5a6(0x20) = CONST 
0x5a9: v5a9 = LT v5a5 v5a6(0x20)
0x5aa: v5aa = ISZERO v5a9
0x5ab: v5ab(0x5b3) = CONST 
0x5ae: JUMPI v5ab(0x5b3) v5aa
----------------------------------

Begin block 0x5af
prev = {'0x59c'}, next = {}
----------------------------------
Block 0x5af
0x5af: v5af(0x0) = CONST 
0x5b2: REVERT v5af(0x0) v5af(0x0)
----------------------------------

Begin block 0x5b3
prev = {'0x59c'}, next = {'0xe4c0x590'}
----------------------------------
Block 0x5b3
0x5b5: v5b5 = CALLDATALOAD v5a1(0x4)
0x5b6: v5b6(0xe4c) = CONST 
0x5b9: JUMP v5b6(0xe4c)
----------------------------------

Begin block 0x5ba
prev = {}, next = {'0x5c6', '0x5c2'}
----------------------------------
function freezeAccount(address,bool)()
Block 0x5ba
0x5bb: v5bb = CALLVALUE 
0x5bd: v5bd = ISZERO v5bb
0x5be: v5be(0x5c6) = CONST 
0x5c1: JUMPI v5be(0x5c6) v5bd
----------------------------------

Begin block 0x5c2
prev = {'0x5ba'}, next = {}
----------------------------------
Block 0x5c2
0x5c2: v5c2(0x0) = CONST 
0x5c5: REVERT v5c2(0x0) v5c2(0x0)
----------------------------------

Begin block 0x5c6
prev = {'0x5ba'}, next = {'0x5dd', '0x5d9'}
----------------------------------
Block 0x5c6
0x5c8: v5c8(0x175) = CONST 
0x5cb: v5cb(0x4) = CONST 
0x5ce: v5ce = CALLDATASIZE 
0x5cf: v5cf = SUB v5ce v5cb(0x4)
0x5d0: v5d0(0x40) = CONST 
0x5d3: v5d3 = LT v5cf v5d0(0x40)
0x5d4: v5d4 = ISZERO v5d3
0x5d5: v5d5(0x5dd) = CONST 
0x5d8: JUMPI v5d5(0x5dd) v5d4
----------------------------------

Begin block 0x5d9
prev = {'0x5c6'}, next = {}
----------------------------------
Block 0x5d9
0x5d9: v5d9(0x0) = CONST 
0x5dc: REVERT v5d9(0x0) v5d9(0x0)
----------------------------------

Begin block 0x5dd
prev = {'0x5c6'}, next = {'0xeea'}
----------------------------------
Block 0x5dd
0x5df: v5df(0x1) = CONST 
0x5e1: v5e1(0x1) = CONST 
0x5e3: v5e3(0xa0) = CONST 
0x5e5: v5e5(0x10000000000000000000000000000000000000000) = SHL v5e3(0xa0) v5e1(0x1)
0x5e6: v5e6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e5(0x10000000000000000000000000000000000000000) v5df(0x1)
0x5e8: v5e8 = CALLDATALOAD v5cb(0x4)
0x5e9: v5e9 = AND v5e8 v5e6(0xffffffffffffffffffffffffffffffffffffffff)
0x5eb: v5eb(0x20) = CONST 
0x5ed: v5ed = ADD v5eb(0x20) v5cb(0x4)
0x5ee: v5ee = CALLDATALOAD v5ed
0x5ef: v5ef = ISZERO v5ee
0x5f0: v5f0 = ISZERO v5ef
0x5f1: v5f1(0xeea) = CONST 
0x5f4: JUMP v5f1(0xeea)
----------------------------------

Begin block 0x5f5
prev = {}, next = {'0x601', '0x5fd'}
----------------------------------
function transferOwnership(address)()
Block 0x5f5
0x5f6: v5f6 = CALLVALUE 
0x5f8: v5f8 = ISZERO v5f6
0x5f9: v5f9(0x601) = CONST 
0x5fc: JUMPI v5f9(0x601) v5f8
----------------------------------

Begin block 0x5fd
prev = {'0x5f5'}, next = {}
----------------------------------
Block 0x5fd
0x5fd: v5fd(0x0) = CONST 
0x600: REVERT v5fd(0x0) v5fd(0x0)
----------------------------------

Begin block 0x601
prev = {'0x5f5'}, next = {'0x618', '0x614'}
----------------------------------
Block 0x601
0x603: v603(0x175) = CONST 
0x606: v606(0x4) = CONST 
0x609: v609 = CALLDATASIZE 
0x60a: v60a = SUB v609 v606(0x4)
0x60b: v60b(0x20) = CONST 
0x60e: v60e = LT v60a v60b(0x20)
0x60f: v60f = ISZERO v60e
0x610: v610(0x618) = CONST 
0x613: JUMPI v610(0x618) v60f
----------------------------------

Begin block 0x614
prev = {'0x601'}, next = {}
----------------------------------
Block 0x614
0x614: v614(0x0) = CONST 
0x617: REVERT v614(0x0) v614(0x0)
----------------------------------

Begin block 0x618
prev = {'0x601'}, next = {'0xf65'}
----------------------------------
Block 0x618
0x61a: v61a = CALLDATALOAD v606(0x4)
0x61b: v61b(0x1) = CONST 
0x61d: v61d(0x1) = CONST 
0x61f: v61f(0xa0) = CONST 
0x621: v621(0x10000000000000000000000000000000000000000) = SHL v61f(0xa0) v61d(0x1)
0x622: v622(0xffffffffffffffffffffffffffffffffffffffff) = SUB v621(0x10000000000000000000000000000000000000000) v61b(0x1)
0x623: v623 = AND v622(0xffffffffffffffffffffffffffffffffffffffff) v61a
0x624: v624(0xf65) = CONST 
0x627: JUMP v624(0xf65)
----------------------------------

Begin block 0x628
prev = {'0x168'}, next = {'0x63f', '0x63b'}
----------------------------------
Block 0x628
0x629: v629(0x0) = CONST 
0x62b: v62b = SLOAD v629(0x0)
0x62c: v62c(0x1) = CONST 
0x62e: v62e(0x1) = CONST 
0x630: v630(0xa0) = CONST 
0x632: v632(0x10000000000000000000000000000000000000000) = SHL v630(0xa0) v62e(0x1)
0x633: v633(0xffffffffffffffffffffffffffffffffffffffff) = SUB v632(0x10000000000000000000000000000000000000000) v62c(0x1)
0x634: v634 = AND v633(0xffffffffffffffffffffffffffffffffffffffff) v62b
0x635: v635 = CALLER 
0x636: v636 = EQ v635 v634
0x637: v637(0x63f) = CONST 
0x63a: JUMPI v637(0x63f) v636
----------------------------------

Begin block 0x63b
prev = {'0x628'}, next = {}
----------------------------------
Block 0x63b
0x63b: v63b(0x0) = CONST 
0x63e: REVERT v63b(0x0) v63b(0x0)
----------------------------------

Begin block 0x63f
prev = {'0x628'}, next = {'0x1750x145'}
----------------------------------
Block 0x63f
0x640: v640(0x8) = CONST 
0x645: SSTORE v640(0x8) v16b
0x646: v646(0x9) = CONST 
0x648: SSTORE v646(0x9) v170
0x649: JUMP v153(0x175)
----------------------------------

Begin block 0x64a
prev = {}, next = {'0x6d00x64a', '0x68a'}
----------------------------------
function 0x64a(v64aarg0)
Block 0x64a
0x64b: v64b(0x3) = CONST 
0x64e: v64e = SLOAD v64b(0x3)
0x64f: v64f(0x40) = CONST 
0x652: v652 = MLOAD v64f(0x40)
0x653: v653(0x20) = CONST 
0x655: v655(0x2) = CONST 
0x657: v657(0x1) = CONST 
0x65a: v65a = AND v64e v657(0x1)
0x65b: v65b = ISZERO v65a
0x65c: v65c(0x100) = CONST 
0x65f: v65f = MUL v65c(0x100) v65b
0x660: v660(0x0) = CONST 
0x662: v662(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v660(0x0)
0x663: v663 = ADD v662(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v65f
0x666: v666 = AND v64e v663
0x66a: v66a = DIV v666 v655(0x2)
0x66b: v66b(0x1f) = CONST 
0x66e: v66e = ADD v66a v66b(0x1f)
0x671: v671 = DIV v66e v653(0x20)
0x673: v673 = MUL v653(0x20) v671
0x675: v675 = ADD v652 v673
0x677: v677 = ADD v653(0x20) v675
0x67a: MSTORE v64f(0x40) v677
0x67d: MSTORE v652 v66a
0x681: v681 = ADD v652 v653(0x20)
0x685: v685 = ISZERO v66a
0x686: v686(0x6d0) = CONST 
0x689: JUMPI v686(0x6d0) v685
----------------------------------

Begin block 0x68a
prev = {'0x64a'}, next = {'0x6a50x64a', '0x692'}
----------------------------------
Block 0x68a
0x68b: v68b(0x1f) = CONST 
0x68d: v68d = LT v68b(0x1f) v66a
0x68e: v68e(0x6a5) = CONST 
0x691: JUMPI v68e(0x6a5) v68d
----------------------------------

Begin block 0x692
prev = {'0x68a'}, next = {'0x6d00x64a'}
----------------------------------
Block 0x692
0x692: v692(0x100) = CONST 
0x697: v697 = SLOAD v64b(0x3)
0x698: v698 = DIV v697 v692(0x100)
0x699: v699 = MUL v698 v692(0x100)
0x69b: MSTORE v681 v699
0x69d: v69d(0x20) = CONST 
0x69f: v69f = ADD v69d(0x20) v681
0x6a1: v6a1(0x6d0) = CONST 
0x6a4: JUMP v6a1(0x6d0)
----------------------------------

Begin block 0x6a50x64a
prev = {'0x68a'}, next = {'0x6b30x64a'}
----------------------------------
Block 0x6a50x64a
0x6a70x64a: v64a6a7 = ADD v681 v66a
0x6aa0x64a: v64a6aa(0x0) = CONST 
0x6ac0x64a: MSTORE v64a6aa(0x0) v64b(0x3)
0x6ad0x64a: v64a6ad(0x20) = CONST 
0x6af0x64a: v64a6af(0x0) = CONST 
0x6b10x64a: v64a6b1 = SHA3 v64a6af(0x0) v64a6ad(0x20)
----------------------------------

Begin block 0x6a50x9b7
prev = {'0x9f4'}, next = {'0x6b30x9b7'}
----------------------------------
Block 0x6a50x9b7
0x6a70x9b7: v9b76a7 = ADD v9eb v9d4
0x6aa0x9b7: v9b76aa(0x0) = CONST 
0x6ac0x9b7: MSTORE v9b76aa(0x0) v9b8(0x2)
0x6ad0x9b7: v9b76ad(0x20) = CONST 
0x6af0x9b7: v9b76af(0x0) = CONST 
0x6b10x9b7: v9b76b1 = SHA3 v9b76af(0x0) v9b76ad(0x20)
----------------------------------

Begin block 0x6b30x64a
prev = {'0x6a50x64a', '0x6b30x64a'}, next = {'0x6c70x64a', '0x6b30x64a'}
----------------------------------
Block 0x6b30x64a
0x6b30x64a_0x0: v6b364a_0 = PHI v681 v64a6bf
0x6b30x64a_0x1: v6b364a_1 = PHI v64a6bb v64a6b1
0x6b50x64a: v64a6b5 = SLOAD v6b364a_1
0x6b70x64a: MSTORE v6b364a_0 v64a6b5
0x6b90x64a: v64a6b9(0x1) = CONST 
0x6bb0x64a: v64a6bb = ADD v64a6b9(0x1) v6b364a_1
0x6bd0x64a: v64a6bd(0x20) = CONST 
0x6bf0x64a: v64a6bf = ADD v64a6bd(0x20) v6b364a_0
0x6c20x64a: v64a6c2 = GT v64a6a7 v64a6bf
0x6c30x64a: v64a6c3(0x6b3) = CONST 
0x6c60x64a: JUMPI v64a6c3(0x6b3) v64a6c2
----------------------------------

Begin block 0x6b30x9b7
prev = {'0x6b30x9b7', '0x6a50x9b7'}, next = {'0x6b30x9b7', '0x6c70x9b7'}
----------------------------------
Block 0x6b30x9b7
0x6b30x9b7_0x0: v6b39b7_0 = PHI v9eb v9b76bf
0x6b30x9b7_0x1: v6b39b7_1 = PHI v9b76bb v9b76b1
0x6b50x9b7: v9b76b5 = SLOAD v6b39b7_1
0x6b70x9b7: MSTORE v6b39b7_0 v9b76b5
0x6b90x9b7: v9b76b9(0x1) = CONST 
0x6bb0x9b7: v9b76bb = ADD v9b76b9(0x1) v6b39b7_1
0x6bd0x9b7: v9b76bd(0x20) = CONST 
0x6bf0x9b7: v9b76bf = ADD v9b76bd(0x20) v6b39b7_0
0x6c20x9b7: v9b76c2 = GT v9b76a7 v9b76bf
0x6c30x9b7: v9b76c3(0x6b3) = CONST 
0x6c60x9b7: JUMPI v9b76c3(0x6b3) v9b76c2
----------------------------------

Begin block 0x6c70x64a
prev = {'0x6b30x64a'}, next = {'0x6d00x64a'}
----------------------------------
Block 0x6c70x64a
0x6c90x64a: v64a6c9 = SUB v64a6bf v64a6a7
0x6ca0x64a: v64a6ca(0x1f) = CONST 
0x6cc0x64a: v64a6cc = AND v64a6ca(0x1f) v64a6c9
0x6ce0x64a: v64a6ce = ADD v64a6a7 v64a6cc
----------------------------------

Begin block 0x6c70x9b7
prev = {'0x6b30x9b7'}, next = {'0x6d00x9b7'}
----------------------------------
Block 0x6c70x9b7
0x6c90x9b7: v9b76c9 = SUB v9b76bf v9b76a7
0x6ca0x9b7: v9b76ca(0x1f) = CONST 
0x6cc0x9b7: v9b76cc = AND v9b76ca(0x1f) v9b76c9
0x6ce0x9b7: v9b76ce = ADD v9b76a7 v9b76cc
----------------------------------

Begin block 0x6d00x64a
prev = {'0x64a', '0x6c70x64a', '0x692'}, next = {}
----------------------------------
Block 0x6d00x64a
0x6d70x64a: RETURNPRIVATE v64aarg0 v652 v64aarg0
----------------------------------

Begin block 0x6d00x9b7
prev = {'0x9fc', '0x9b7', '0x6c70x9b7'}, next = {}
----------------------------------
Block 0x6d00x9b7
0x6d70x9b7: RETURNPRIVATE v9b7arg0 v9bf v9b7arg0
----------------------------------

Begin block 0x6d8
prev = {'0x224'}, next = {'0x7390x201'}
----------------------------------
Block 0x6d8
0x6d9: v6d9 = CALLER 
0x6da: v6da(0x0) = CONST 
0x6de: MSTORE v6da(0x0) v6d9
0x6df: v6df(0x7) = CONST 
0x6e1: v6e1(0x20) = CONST 
0x6e5: MSTORE v6e1(0x20) v6df(0x7)
0x6e6: v6e6(0x40) = CONST 
0x6ea: v6ea = SHA3 v6da(0x0) v6e6(0x40)
0x6eb: v6eb(0x1) = CONST 
0x6ed: v6ed(0x1) = CONST 
0x6ef: v6ef(0xa0) = CONST 
0x6f1: v6f1(0x10000000000000000000000000000000000000000) = SHL v6ef(0xa0) v6ed(0x1)
0x6f2: v6f2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6f1(0x10000000000000000000000000000000000000000) v6eb(0x1)
0x6f4: v6f4 = AND v230 v6f2(0xffffffffffffffffffffffffffffffffffffffff)
0x6f7: MSTORE v6da(0x0) v6f4
0x6fa: MSTORE v6e1(0x20) v6ea
0x6fd: v6fd = SHA3 v6da(0x0) v6e6(0x40)
0x700: SSTORE v6fd v235
0x702: v702 = MLOAD v6e6(0x40)
0x705: MSTORE v702 v235
0x707: v707 = MLOAD v6e6(0x40)
0x70e: v70e(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x732: v732 = SUB v702 v707
0x733: v733 = ADD v732 v6e1(0x20)
0x735: LOG3 v707 v733 v70e(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v6d9 v6f4
0x737: v737(0x1) = CONST 
----------------------------------

Begin block 0x7390x201
prev = {'0x6d8'}, next = {'0x23a0x201'}
----------------------------------
Block 0x7390x201
0x73e0x201: JUMP v20f(0x23a)
----------------------------------

Begin block 0x7390xfb3
prev = {'0xfb3'}, next = {}
----------------------------------
Block 0x7390xfb3
0x73e0xfb3: RETURNPRIVATE vfb3arg2 vfb6
----------------------------------

Begin block 0x73f
prev = {'0x25a'}, next = {'0x77d'}
----------------------------------
Block 0x73f
0x740: v740(0x0) = CONST 
0x744: MSTORE v740(0x0) v740(0x0)
0x745: v745(0x6) = CONST 
0x747: v747(0x20) = CONST 
0x749: MSTORE v747(0x20) v745(0x6)
0x74a: v74a(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8) = CONST 
0x76b: v76b = SLOAD v74a(0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8)
0x76c: v76c(0x5) = CONST 
0x76e: v76e = SLOAD v76c(0x5)
0x76f: v76f(0x77d) = CONST 
0x773: v773(0xffffffff) = CONST 
0x778: v778(0xf9e) = CONST 
0x77b: v77b(0xf9e) = AND v778(0xf9e) v773(0xffffffff)
0x77c: v77c_0 = CALLPRIVATE v77b(0xf9e) v76b v76e v76f(0x77d)
----------------------------------

Begin block 0x77d
prev = {'0x73f'}, next = {'0x2630x24e'}
----------------------------------
Block 0x77d
0x781: JUMP v25c(0x263)
----------------------------------

Begin block 0x782
prev = {'0x298'}, next = {'0x7ab'}
----------------------------------
Block 0x782
0x783: v783(0x1) = CONST 
0x785: v785(0x1) = CONST 
0x787: v787(0xa0) = CONST 
0x789: v789(0x10000000000000000000000000000000000000000) = SHL v787(0xa0) v785(0x1)
0x78a: v78a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v789(0x10000000000000000000000000000000000000000) v783(0x1)
0x78c: v78c = AND v2a5 v78a(0xffffffffffffffffffffffffffffffffffffffff)
0x78d: v78d(0x0) = CONST 
0x791: MSTORE v78d(0x0) v78c
0x792: v792(0x6) = CONST 
0x794: v794(0x20) = CONST 
0x796: MSTORE v794(0x20) v792(0x6)
0x797: v797(0x40) = CONST 
0x79a: v79a = SHA3 v78d(0x0) v797(0x40)
0x79b: v79b = SLOAD v79a
0x79c: v79c(0x7ab) = CONST 
0x7a1: v7a1(0xffffffff) = CONST 
0x7a6: v7a6(0xf9e) = CONST 
0x7a9: v7a9(0xf9e) = AND v7a6(0xf9e) v7a1(0xffffffff)
0x7aa: v7aa_0 = CALLPRIVATE v7a9(0xf9e) v2b3 v79b v79c(0x7ab)
----------------------------------

Begin block 0x7ab
prev = {'0x782'}, next = {'0x7e8'}
----------------------------------
Block 0x7ab
0x7ac: v7ac(0x1) = CONST 
0x7ae: v7ae(0x1) = CONST 
0x7b0: v7b0(0xa0) = CONST 
0x7b2: v7b2(0x10000000000000000000000000000000000000000) = SHL v7b0(0xa0) v7ae(0x1)
0x7b3: v7b3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7b2(0x10000000000000000000000000000000000000000) v7ac(0x1)
0x7b5: v7b5 = AND v2a5 v7b3(0xffffffffffffffffffffffffffffffffffffffff)
0x7b6: v7b6(0x0) = CONST 
0x7ba: MSTORE v7b6(0x0) v7b5
0x7bb: v7bb(0x6) = CONST 
0x7bd: v7bd(0x20) = CONST 
0x7c1: MSTORE v7bd(0x20) v7bb(0x6)
0x7c2: v7c2(0x40) = CONST 
0x7c6: v7c6 = SHA3 v7b6(0x0) v7c2(0x40)
0x7ca: SSTORE v7c6 v7aa_0
0x7cb: v7cb(0x7) = CONST 
0x7ce: MSTORE v7bd(0x20) v7cb(0x7)
0x7d1: v7d1 = SHA3 v7b6(0x0) v7c2(0x40)
0x7d2: v7d2 = CALLER 
0x7d4: MSTORE v7b6(0x0) v7d2
0x7d6: MSTORE v7bd(0x20) v7d1
0x7d7: v7d7 = SHA3 v7b6(0x0) v7c2(0x40)
0x7d8: v7d8 = SLOAD v7d7
0x7d9: v7d9(0x7e8) = CONST 
0x7de: v7de(0xffffffff) = CONST 
0x7e3: v7e3(0xf9e) = CONST 
0x7e6: v7e6(0xf9e) = AND v7e3(0xf9e) v7de(0xffffffff)
0x7e7: v7e7_0 = CALLPRIVATE v7e6(0xf9e) v2b3 v7d8 v7d9(0x7e8)
----------------------------------

Begin block 0x7e8
prev = {'0x7ab'}, next = {'0x82c'}
----------------------------------
Block 0x7e8
0x7e9: v7e9(0x1) = CONST 
0x7eb: v7eb(0x1) = CONST 
0x7ed: v7ed(0xa0) = CONST 
0x7ef: v7ef(0x10000000000000000000000000000000000000000) = SHL v7ed(0xa0) v7eb(0x1)
0x7f0: v7f0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ef(0x10000000000000000000000000000000000000000) v7e9(0x1)
0x7f3: v7f3 = AND v2a5 v7f0(0xffffffffffffffffffffffffffffffffffffffff)
0x7f4: v7f4(0x0) = CONST 
0x7f8: MSTORE v7f4(0x0) v7f3
0x7f9: v7f9(0x7) = CONST 
0x7fb: v7fb(0x20) = CONST 
0x7ff: MSTORE v7fb(0x20) v7f9(0x7)
0x800: v800(0x40) = CONST 
0x804: v804 = SHA3 v7f4(0x0) v800(0x40)
0x805: v805 = CALLER 
0x807: MSTORE v7f4(0x0) v805
0x809: MSTORE v7fb(0x20) v804
0x80c: v80c = SHA3 v7f4(0x0) v800(0x40)
0x810: SSTORE v80c v7e7_0
0x813: v813 = AND v2ae v7f0(0xffffffffffffffffffffffffffffffffffffffff)
0x815: MSTORE v7f4(0x0) v813
0x816: v816(0x6) = CONST 
0x81a: MSTORE v7fb(0x20) v816(0x6)
0x81b: v81b = SHA3 v7f4(0x0) v800(0x40)
0x81c: v81c = SLOAD v81b
0x81d: v81d(0x82c) = CONST 
0x822: v822(0xffffffff) = CONST 
0x827: v827(0xfb3) = CONST 
0x82a: v82a(0xfb3) = AND v827(0xfb3) v822(0xffffffff)
0x82b: v82b_0 = CALLPRIVATE v82a(0xfb3) v2b3 v81c v81d(0x82c)
----------------------------------

Begin block 0x82c
prev = {'0x7e8'}, next = {'0x23a0x275'}
----------------------------------
Block 0x82c
0x82d: v82d(0x1) = CONST 
0x82f: v82f(0x1) = CONST 
0x831: v831(0xa0) = CONST 
0x833: v833(0x10000000000000000000000000000000000000000) = SHL v831(0xa0) v82f(0x1)
0x834: v834(0xffffffffffffffffffffffffffffffffffffffff) = SUB v833(0x10000000000000000000000000000000000000000) v82d(0x1)
0x837: v837 = AND v2ae v834(0xffffffffffffffffffffffffffffffffffffffff)
0x838: v838(0x0) = CONST 
0x83c: MSTORE v838(0x0) v837
0x83d: v83d(0x6) = CONST 
0x83f: v83f(0x20) = CONST 
0x843: MSTORE v83f(0x20) v83d(0x6)
0x844: v844(0x40) = CONST 
0x849: v849 = SHA3 v838(0x0) v844(0x40)
0x84d: SSTORE v849 v82b_0
0x84f: v84f = MLOAD v844(0x40)
0x852: MSTORE v84f v2b3
0x854: v854 = MLOAD v844(0x40)
0x859: v859 = AND v2a5 v834(0xffffffffffffffffffffffffffffffffffffffff)
0x85b: v85b(0x0) = CONST 
0x85e: v85e = MLOAD v85b(0x0)
0x85f: v85f(0x20) = CONST 
0x861: v861(0xfc4) = CONST 
0x869: MSTORE v85b(0x0) v85e
0x86e: v86e = SUB v84f v854
0x86f: v86f = ADD v86e v83f(0x20)
0x871: LOG3 v854 v86f v1094(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v859 v837
0x873: v873(0x1) = CONST 
0x87a: JUMP v283(0x23a)
0x1094: v1094(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0x87b
prev = {'0x2c4'}, next = {'0x2cd'}
----------------------------------
Block 0x87b
0x87c: v87c(0x4) = CONST 
0x87e: v87e = SLOAD v87c(0x4)
0x87f: v87f(0xff) = CONST 
0x881: v881 = AND v87f(0xff) v87e
0x883: JUMP v2c6(0x2cd)
----------------------------------

Begin block 0x884
prev = {'0x2ef'}, next = {'0x2630x2e3'}
----------------------------------
Block 0x884
0x885: v885(0x8) = CONST 
0x887: v887 = SLOAD v885(0x8)
0x889: JUMP v2f1(0x263)
----------------------------------

Begin block 0x88a
prev = {'0x304'}, next = {'0x8a1', '0x89d'}
----------------------------------
Block 0x88a
0x88b: v88b(0x1) = CONST 
0x88d: v88d = SLOAD v88b(0x1)
0x88e: v88e(0x1) = CONST 
0x890: v890(0x1) = CONST 
0x892: v892(0xa0) = CONST 
0x894: v894(0x10000000000000000000000000000000000000000) = SHL v892(0xa0) v890(0x1)
0x895: v895(0xffffffffffffffffffffffffffffffffffffffff) = SUB v894(0x10000000000000000000000000000000000000000) v88e(0x1)
0x896: v896 = AND v895(0xffffffffffffffffffffffffffffffffffffffff) v88d
0x897: v897 = CALLER 
0x898: v898 = EQ v897 v896
0x899: v899(0x8a1) = CONST 
0x89c: JUMPI v899(0x8a1) v898
----------------------------------

Begin block 0x89d
prev = {'0x88a'}, next = {}
----------------------------------
Block 0x89d
0x89d: v89d(0x0) = CONST 
0x8a0: REVERT v89d(0x0) v89d(0x0)
----------------------------------

Begin block 0x8a1
prev = {'0x88a'}, next = {'0x1750x2f8'}
----------------------------------
Block 0x8a1
0x8a2: v8a2(0x1) = CONST 
0x8a4: v8a4 = SLOAD v8a2(0x1)
0x8a5: v8a5(0x0) = CONST 
0x8a8: v8a8 = SLOAD v8a5(0x0)
0x8a9: v8a9(0x40) = CONST 
0x8ab: v8ab = MLOAD v8a9(0x40)
0x8ac: v8ac(0x1) = CONST 
0x8ae: v8ae(0x1) = CONST 
0x8b0: v8b0(0xa0) = CONST 
0x8b2: v8b2(0x10000000000000000000000000000000000000000) = SHL v8b0(0xa0) v8ae(0x1)
0x8b3: v8b3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b2(0x10000000000000000000000000000000000000000) v8ac(0x1)
0x8b6: v8b6 = AND v8b3(0xffffffffffffffffffffffffffffffffffffffff) v8a4
0x8ba: v8ba = AND v8a8 v8b3(0xffffffffffffffffffffffffffffffffffffffff)
0x8bc: v8bc(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x8de: LOG3 v8ab v8a5(0x0) v8bc(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v8ba v8b6
0x8df: v8df(0x1) = CONST 
0x8e2: v8e2 = SLOAD v8df(0x1)
0x8e3: v8e3(0x0) = CONST 
0x8e6: v8e6 = SLOAD v8e3(0x0)
0x8e7: v8e7(0x1) = CONST 
0x8e9: v8e9(0x1) = CONST 
0x8eb: v8eb(0xa0) = CONST 
0x8ed: v8ed(0x10000000000000000000000000000000000000000) = SHL v8eb(0xa0) v8e9(0x1)
0x8ee: v8ee(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8ed(0x10000000000000000000000000000000000000000) v8e7(0x1)
0x8ef: v8ef(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v8ee(0xffffffffffffffffffffffffffffffffffffffff)
0x8f2: v8f2 = AND v8ef(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v8e6
0x8f3: v8f3(0x1) = CONST 
0x8f5: v8f5(0x1) = CONST 
0x8f7: v8f7(0xa0) = CONST 
0x8f9: v8f9(0x10000000000000000000000000000000000000000) = SHL v8f7(0xa0) v8f5(0x1)
0x8fa: v8fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8f9(0x10000000000000000000000000000000000000000) v8f3(0x1)
0x8fc: v8fc = AND v8e2 v8fa(0xffffffffffffffffffffffffffffffffffffffff)
0x8fd: v8fd = OR v8fc v8f2
0x900: SSTORE v8e3(0x0) v8fd
0x901: v901 = AND v8ef(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v8e2
0x903: SSTORE v8df(0x1) v901
0x904: JUMP v306(0x175)
----------------------------------

Begin block 0x905
prev = {'0x330'}, next = {'0x918', '0x91c'}
----------------------------------
Block 0x905
0x906: v906(0x0) = CONST 
0x908: v908 = SLOAD v906(0x0)
0x909: v909(0x1) = CONST 
0x90b: v90b(0x1) = CONST 
0x90d: v90d(0xa0) = CONST 
0x90f: v90f(0x10000000000000000000000000000000000000000) = SHL v90d(0xa0) v90b(0x1)
0x910: v910(0xffffffffffffffffffffffffffffffffffffffff) = SUB v90f(0x10000000000000000000000000000000000000000) v909(0x1)
0x911: v911 = AND v910(0xffffffffffffffffffffffffffffffffffffffff) v908
0x912: v912 = CALLER 
0x913: v913 = EQ v912 v911
0x914: v914(0x91c) = CONST 
0x917: JUMPI v914(0x91c) v913
----------------------------------

Begin block 0x918
prev = {'0x905'}, next = {}
----------------------------------
Block 0x918
0x918: v918(0x0) = CONST 
0x91b: REVERT v918(0x0) v918(0x0)
----------------------------------

Begin block 0x91c
prev = {'0x905'}, next = {'0x1750x30d'}
----------------------------------
Block 0x91c
0x91d: v91d(0x1) = CONST 
0x91f: v91f(0x1) = CONST 
0x921: v921(0xa0) = CONST 
0x923: v923(0x10000000000000000000000000000000000000000) = SHL v921(0xa0) v91f(0x1)
0x924: v924(0xffffffffffffffffffffffffffffffffffffffff) = SUB v923(0x10000000000000000000000000000000000000000) v91d(0x1)
0x927: v927 = AND v33c v924(0xffffffffffffffffffffffffffffffffffffffff)
0x928: v928(0x0) = CONST 
0x92c: MSTORE v928(0x0) v927
0x92d: v92d(0x6) = CONST 
0x92f: v92f(0x20) = CONST 
0x933: MSTORE v92f(0x20) v92d(0x6)
0x934: v934(0x40) = CONST 
0x938: v938 = SHA3 v928(0x0) v934(0x40)
0x93a: v93a = SLOAD v938
0x93c: v93c = ADD v341 v93a
0x93e: SSTORE v938 v93c
0x93f: v93f(0x5) = CONST 
0x942: v942 = SLOAD v93f(0x5)
0x944: v944 = ADD v341 v942
0x946: SSTORE v93f(0x5) v944
0x948: v948 = SLOAD v928(0x0)
0x94a: v94a = MLOAD v934(0x40)
0x94d: MSTORE v94a v341
0x94f: v94f = MLOAD v934(0x40)
0x951: v951 = AND v924(0xffffffffffffffffffffffffffffffffffffffff) v948
0x953: v953(0x0) = CONST 
0x956: v956 = MLOAD v953(0x0)
0x957: v957(0x20) = CONST 
0x959: v959(0xfc4) = CONST 
0x961: MSTORE v953(0x0) v956
0x966: v966 = SUB v94a v94f
0x969: v969 = ADD v92f(0x20) v966
0x96b: LOG3 v94f v969 v1099(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v928(0x0) v951
0x96c: v96c(0x0) = CONST 
0x96e: v96e = SLOAD v96c(0x0)
0x96f: v96f(0x40) = CONST 
0x972: v972 = MLOAD v96f(0x40)
0x975: MSTORE v972 v341
0x977: v977 = MLOAD v96f(0x40)
0x978: v978(0x1) = CONST 
0x97a: v97a(0x1) = CONST 
0x97c: v97c(0xa0) = CONST 
0x97e: v97e(0x10000000000000000000000000000000000000000) = SHL v97c(0xa0) v97a(0x1)
0x97f: v97f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v97e(0x10000000000000000000000000000000000000000) v978(0x1)
0x982: v982 = AND v33c v97f(0xffffffffffffffffffffffffffffffffffffffff)
0x984: v984 = AND v96e v97f(0xffffffffffffffffffffffffffffffffffffffff)
0x986: v986(0x0) = CONST 
0x989: v989 = MLOAD v986(0x0)
0x98a: v98a(0x20) = CONST 
0x98c: v98c(0xfc4) = CONST 
0x994: MSTORE v986(0x0) v989
0x999: v999 = SUB v972 v977
0x99a: v99a(0x20) = CONST 
0x99c: v99c = ADD v99a(0x20) v999
0x99e: LOG3 v977 v99c v109e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v984 v982
0x9a1: JUMP v31b(0x175)
0x1099: v1099(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x109e: v109e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0x9a2
prev = {'0x352'}, next = {'0x2630x346'}
----------------------------------
Block 0x9a2
0x9a3: v9a3(0x9) = CONST 
0x9a5: v9a5 = SLOAD v9a3(0x9)
0x9a7: JUMP v354(0x263)
----------------------------------

Begin block 0x9a8
prev = {'0x367'}, next = {'0x3700x35b'}
----------------------------------
Block 0x9a8
0x9a9: v9a9(0x0) = CONST 
0x9ab: v9ab = SLOAD v9a9(0x0)
0x9ac: v9ac(0x1) = CONST 
0x9ae: v9ae(0x1) = CONST 
0x9b0: v9b0(0xa0) = CONST 
0x9b2: v9b2(0x10000000000000000000000000000000000000000) = SHL v9b0(0xa0) v9ae(0x1)
0x9b3: v9b3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9b2(0x10000000000000000000000000000000000000000) v9ac(0x1)
0x9b4: v9b4 = AND v9b3(0xffffffffffffffffffffffffffffffffffffffff) v9ab
0x9b6: JUMP v369(0x370)
----------------------------------

Begin block 0x9b7
prev = {}, next = {'0x6d00x9b7', '0x9f4'}
----------------------------------
function 0x9b7(v9b7arg0)
Block 0x9b7
0x9b8: v9b8(0x2) = CONST 
0x9bb: v9bb = SLOAD v9b8(0x2)
0x9bc: v9bc(0x40) = CONST 
0x9bf: v9bf = MLOAD v9bc(0x40)
0x9c0: v9c0(0x20) = CONST 
0x9c2: v9c2(0x1) = CONST 
0x9c5: v9c5 = AND v9bb v9c2(0x1)
0x9c6: v9c6 = ISZERO v9c5
0x9c7: v9c7(0x100) = CONST 
0x9ca: v9ca = MUL v9c7(0x100) v9c6
0x9cb: v9cb(0x0) = CONST 
0x9cd: v9cd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v9cb(0x0)
0x9ce: v9ce = ADD v9cd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v9ca
0x9d1: v9d1 = AND v9bb v9ce
0x9d4: v9d4 = DIV v9d1 v9b8(0x2)
0x9d5: v9d5(0x1f) = CONST 
0x9d8: v9d8 = ADD v9d4 v9d5(0x1f)
0x9db: v9db = DIV v9d8 v9c0(0x20)
0x9dd: v9dd = MUL v9c0(0x20) v9db
0x9df: v9df = ADD v9bf v9dd
0x9e1: v9e1 = ADD v9c0(0x20) v9df
0x9e4: MSTORE v9bc(0x40) v9e1
0x9e7: MSTORE v9bf v9d4
0x9eb: v9eb = ADD v9bf v9c0(0x20)
0x9ef: v9ef = ISZERO v9d4
0x9f0: v9f0(0x6d0) = CONST 
0x9f3: JUMPI v9f0(0x6d0) v9ef
----------------------------------

Begin block 0x9f4
prev = {'0x9b7'}, next = {'0x9fc', '0x6a50x9b7'}
----------------------------------
Block 0x9f4
0x9f5: v9f5(0x1f) = CONST 
0x9f7: v9f7 = LT v9f5(0x1f) v9d4
0x9f8: v9f8(0x6a5) = CONST 
0x9fb: JUMPI v9f8(0x6a5) v9f7
----------------------------------

Begin block 0x9fc
prev = {'0x9f4'}, next = {'0x6d00x9b7'}
----------------------------------
Block 0x9fc
0x9fc: v9fc(0x100) = CONST 
0xa01: va01 = SLOAD v9b8(0x2)
0xa02: va02 = DIV va01 v9fc(0x100)
0xa03: va03 = MUL va02 v9fc(0x100)
0xa05: MSTORE v9eb va03
0xa07: va07(0x20) = CONST 
0xa09: va09 = ADD va07(0x20) v9eb
0xa0b: va0b(0x6d0) = CONST 
0xa0e: JUMP va0b(0x6d0)
----------------------------------

Begin block 0xa0f
prev = {'0x3a1'}, next = {'0xa1c', '0xa1b'}
----------------------------------
Block 0xa0f
0xa10: va10(0x0) = CONST 
0xa12: va12(0x9) = CONST 
0xa14: va14 = SLOAD va12(0x9)
0xa15: va15 = CALLVALUE 
0xa17: va17(0xa1c) = CONST 
0xa1a: JUMPI va17(0xa1c) va14
----------------------------------

Begin block 0xa1b
prev = {'0xa0f'}, next = {}
----------------------------------
Block 0xa1b
0xa1b: THROW 
----------------------------------

Begin block 0xa1c
prev = {'0xa0f'}, next = {'0xa3d', '0xa39'}
----------------------------------
Block 0xa1c
0xa1d: va1d = ADDRESS 
0xa1e: va1e(0x0) = CONST 
0xa22: MSTORE va1e(0x0) va1d
0xa23: va23(0x6) = CONST 
0xa25: va25(0x20) = CONST 
0xa27: MSTORE va25(0x20) va23(0x6)
0xa28: va28(0x40) = CONST 
0xa2b: va2b = SHA3 va1e(0x0) va28(0x40)
0xa2c: va2c = SLOAD va2b
0xa2f: va2f = DIV va15 va14
0xa33: va33 = GT va2f va2c
0xa34: va34 = ISZERO va33
0xa35: va35(0xa3d) = CONST 
0xa38: JUMPI va35(0xa3d) va34
----------------------------------

Begin block 0xa39
prev = {'0xa1c'}, next = {}
----------------------------------
Block 0xa39
0xa39: va39(0x0) = CONST 
0xa3c: REVERT va39(0x0) va39(0x0)
----------------------------------

Begin block 0xa3d
prev = {'0xa1c'}, next = {'0x2630x3a1'}
----------------------------------
Block 0xa3d
0xa3e: va3e = CALLER 
0xa3f: va3f(0x0) = CONST 
0xa43: MSTORE va3f(0x0) va3e
0xa44: va44(0x6) = CONST 
0xa46: va46(0x20) = CONST 
0xa4a: MSTORE va46(0x20) va44(0x6)
0xa4b: va4b(0x40) = CONST 
0xa4f: va4f = SHA3 va3f(0x0) va4b(0x40)
0xa51: va51 = SLOAD va4f
0xa53: va53 = ADD va2f va51
0xa55: SSTORE va4f va53
0xa56: va56 = ADDRESS 
0xa59: MSTORE va3f(0x0) va56
0xa5d: va5d = SHA3 va3f(0x0) va4b(0x40)
0xa5f: va5f = SLOAD va5d
0xa62: va62 = SUB va5f va2f
0xa64: SSTORE va5d va62
0xa66: va66 = MLOAD va4b(0x40)
0xa69: MSTORE va66 va2f
0xa6b: va6b = MLOAD va4b(0x40)
0xa6c: va6c(0x0) = CONST 
0xa6f: va6f = MLOAD va6c(0x0)
0xa70: va70(0x20) = CONST 
0xa72: va72(0xfc4) = CONST 
0xa7a: MSTORE va6c(0x0) va6f
0xa7f: va7f = SUB va66 va6b
0xa82: va82 = ADD va46(0x20) va7f
0xa84: LOG3 va6b va82 v10a3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) va56 va3e
0xa86: JUMP v3a2(0x263)
0x10a3: v10a3(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0xa87
prev = {'0x3cc'}, next = {'0xaa4', '0xaa0'}
----------------------------------
Block 0xa87
0xa88: va88 = CALLER 
0xa89: va89(0x0) = CONST 
0xa8d: MSTORE va89(0x0) va88
0xa8e: va8e(0xa) = CONST 
0xa90: va90(0x20) = CONST 
0xa92: MSTORE va90(0x20) va8e(0xa)
0xa93: va93(0x40) = CONST 
0xa96: va96 = SHA3 va89(0x0) va93(0x40)
0xa97: va97 = SLOAD va96
0xa98: va98(0xff) = CONST 
0xa9a: va9a = AND va98(0xff) va97
0xa9b: va9b = ISZERO va9a
0xa9c: va9c(0xaa4) = CONST 
0xa9f: JUMPI va9c(0xaa4) va9b
----------------------------------

Begin block 0xaa0
prev = {'0xa87'}, next = {}
----------------------------------
Block 0xaa0
0xaa0: vaa0(0x0) = CONST 
0xaa3: REVERT vaa0(0x0) vaa0(0x0)
----------------------------------

Begin block 0xaa4
prev = {'0xa87'}, next = {'0xad3', '0xab0'}
----------------------------------
Block 0xaa4
0xaa5: vaa5(0xb) = CONST 
0xaa7: vaa7 = SLOAD vaa5(0xb)
0xaa8: vaa8 = CALLER 
0xaa9: vaa9 = BALANCE vaa8
0xaaa: vaaa = LT vaa9 vaa7
0xaab: vaab = ISZERO vaaa
0xaac: vaac(0xad3) = CONST 
0xaaf: JUMPI vaac(0xad3) vaab
----------------------------------

Begin block 0xab0
prev = {'0xaa4'}, next = {'0xacb', '0xaca'}
----------------------------------
Block 0xab0
0xab0: vab0(0xad1) = CONST 
0xab3: vab3(0x8) = CONST 
0xab5: vab5 = SLOAD vab3(0x8)
0xab6: vab6 = CALLER 
0xab7: vab7(0x1) = CONST 
0xab9: vab9(0x1) = CONST 
0xabb: vabb(0xa0) = CONST 
0xabd: vabd(0x10000000000000000000000000000000000000000) = SHL vabb(0xa0) vab9(0x1)
0xabe: vabe(0xffffffffffffffffffffffffffffffffffffffff) = SUB vabd(0x10000000000000000000000000000000000000000) vab7(0x1)
0xabf: vabf = AND vabe(0xffffffffffffffffffffffffffffffffffffffff) vab6
0xac0: vac0 = BALANCE vabf
0xac1: vac1(0xb) = CONST 
0xac3: vac3 = SLOAD vac1(0xb)
0xac4: vac4 = SUB vac3 vac0
0xac6: vac6(0xacb) = CONST 
0xac9: JUMPI vac6(0xacb) vab5
----------------------------------

Begin block 0xaca
prev = {'0xab0'}, next = {}
----------------------------------
Block 0xaca
0xaca: THROW 
----------------------------------

Begin block 0xacb
prev = {'0xae8', '0xab0'}, next = {'0xe4c0x3a9'}
----------------------------------
Block 0xacb
0xacb_0x0: vacb_0 = PHI vac4 vb1f
0xacb_0x1: vacb_1 = PHI vab5 vb0a
0xacc: vacc = DIV vacb_0 vacb_1
0xacd: vacd(0xe4c) = CONST 
0xad0: JUMP vacd(0xe4c)
----------------------------------

Begin block 0xad1
prev = {'0xebf0x3a9'}, next = {'0xad3'}
----------------------------------
Block 0xad1
----------------------------------

Begin block 0xad3
prev = {'0xad1', '0xaa4'}, next = {'0xb50', '0xae8'}
----------------------------------
Block 0xad3
0xad3_0x2: vad3_2 = PHI v3d8 va89(0x0) vb13(0x8fc)
0xad4: vad4(0xb) = CONST 
0xad6: vad6 = SLOAD vad4(0xb)
0xad8: vad8(0x1) = CONST 
0xada: vada(0x1) = CONST 
0xadc: vadc(0xa0) = CONST 
0xade: vade(0x10000000000000000000000000000000000000000) = SHL vadc(0xa0) vada(0x1)
0xadf: vadf(0xffffffffffffffffffffffffffffffffffffffff) = SUB vade(0x10000000000000000000000000000000000000000) vad8(0x1)
0xae0: vae0 = AND vadf(0xffffffffffffffffffffffffffffffffffffffff) vad3_2
0xae1: vae1 = BALANCE vae0
0xae2: vae2 = LT vae1 vad6
0xae3: vae3 = ISZERO vae2
0xae4: vae4(0xb50) = CONST 
0xae7: JUMPI vae4(0xb50) vae3
----------------------------------

Begin block 0xae8
prev = {'0xad3'}, next = {'0xacb', '0xb25'}
----------------------------------
Block 0xae8
0xae8_0x2: vae8_2 = PHI v3d8 va89(0x0) vb13(0x8fc)
0xae8: vae8(0xc) = CONST 
0xaeb: vaeb = SLOAD vae8(0xc)
0xaec: vaec(0x1) = CONST 
0xaee: vaee(0x1) = CONST 
0xaf0: vaf0(0xa0) = CONST 
0xaf2: vaf2(0x10000000000000000000000000000000000000000) = SHL vaf0(0xa0) vaee(0x1)
0xaf3: vaf3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf2(0x10000000000000000000000000000000000000000) vaec(0x1)
0xaf4: vaf4(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vaf3(0xffffffffffffffffffffffffffffffffffffffff)
0xaf5: vaf5 = AND vaf4(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vaeb
0xaf6: vaf6(0x1) = CONST 
0xaf8: vaf8(0x1) = CONST 
0xafa: vafa(0xa0) = CONST 
0xafc: vafc(0x10000000000000000000000000000000000000000) = SHL vafa(0xa0) vaf8(0x1)
0xafd: vafd(0xffffffffffffffffffffffffffffffffffffffff) = SUB vafc(0x10000000000000000000000000000000000000000) vaf6(0x1)
0xb00: vb00 = AND vafd(0xffffffffffffffffffffffffffffffffffffffff) vae8_2
0xb03: vb03 = OR vb00 vaf5
0xb07: SSTORE vae8(0xc) vb03
0xb08: vb08(0x8) = CONST 
0xb0a: vb0a = SLOAD vb08(0x8)
0xb0b: vb0b(0xb) = CONST 
0xb0d: vb0d = SLOAD vb0b(0xb)
0xb11: vb11 = AND vafd(0xffffffffffffffffffffffffffffffffffffffff) vb03
0xb13: vb13(0x8fc) = CONST 
0xb17: vb17(0xb26) = CONST 
0xb1d: vb1d = BALANCE vb00
0xb1f: vb1f = SUB vb0d vb1d
0xb21: vb21(0xacb) = CONST 
0xb24: JUMPI vb21(0xacb) vb0a
----------------------------------

Begin block 0xb25
prev = {'0xae8'}, next = {}
----------------------------------
Block 0xb25
0xb25: THROW 
----------------------------------

Begin block 0xb26
prev = {'0xebf0x3a9'}, next = {'0xb4e', '0xb45'}
----------------------------------
Block 0xb26
0xb26_0x1: vb26_1 = PHI va89(0x0) vb13(0x8fc)
0xb26_0x2: vb26_2 = PHI v3dd vb11
0xb27: vb27(0x40) = CONST 
0xb29: vb29 = MLOAD vb27(0x40)
0xb2b: vb2b = ISZERO v3a9e95
0xb2e: vb2e = MUL vb26_1 vb2b
0xb30: vb30(0x0) = CONST 
0xb38: vb38 = CALL vb2e vb26_2 v3a9e95 vb29 vb30(0x0) vb29 vb30(0x0)
0xb3e: vb3e = ISZERO vb38
0xb40: vb40 = ISZERO vb3e
0xb41: vb41(0xb4e) = CONST 
0xb44: JUMPI vb41(0xb4e) vb40
----------------------------------

Begin block 0xb45
prev = {'0xb26'}, next = {}
----------------------------------
Block 0xb45
0xb45: vb45 = RETURNDATASIZE 
0xb46: vb46(0x0) = CONST 
0xb49: RETURNDATACOPY vb46(0x0) vb46(0x0) vb45
0xb4a: vb4a = RETURNDATASIZE 
0xb4b: vb4b(0x0) = CONST 
0xb4d: REVERT vb4b(0x0) vb4a
----------------------------------

Begin block 0xb4e
prev = {'0xb26'}, next = {'0xb50'}
----------------------------------
Block 0xb4e
----------------------------------

Begin block 0xb50
prev = {'0xad3', '0xb4e'}, next = {'0xb70'}
----------------------------------
Block 0xb50
0xb50_0x1: vb50_1 = PHI v3b7(0x23a) v3dd vb11
0xb51: vb51 = CALLER 
0xb52: vb52(0x0) = CONST 
0xb56: MSTORE vb52(0x0) vb51
0xb57: vb57(0x6) = CONST 
0xb59: vb59(0x20) = CONST 
0xb5b: MSTORE vb59(0x20) vb57(0x6)
0xb5c: vb5c(0x40) = CONST 
0xb5f: vb5f = SHA3 vb52(0x0) vb5c(0x40)
0xb60: vb60 = SLOAD vb5f
0xb61: vb61(0xb70) = CONST 
0xb66: vb66(0xffffffff) = CONST 
0xb6b: vb6b(0xf9e) = CONST 
0xb6e: vb6e(0xf9e) = AND vb6b(0xf9e) vb66(0xffffffff)
0xb6f: vb6f_0 = CALLPRIVATE vb6e(0xf9e) vb50_1 vb60 vb61(0xb70)
----------------------------------

Begin block 0xb70
prev = {'0xb50'}, next = {'0xba2'}
----------------------------------
Block 0xb70
0xb70_0x2: vb70_2 = PHI v3b7(0x23a) v3dd vb11
0xb70_0x3: vb70_3 = PHI v3d8 va89(0x0) vb13(0x8fc)
0xb71: vb71 = CALLER 
0xb72: vb72(0x0) = CONST 
0xb76: MSTORE vb72(0x0) vb71
0xb77: vb77(0x6) = CONST 
0xb79: vb79(0x20) = CONST 
0xb7b: MSTORE vb79(0x20) vb77(0x6)
0xb7c: vb7c(0x40) = CONST 
0xb80: vb80 = SHA3 vb72(0x0) vb7c(0x40)
0xb84: SSTORE vb80 vb6f_0
0xb85: vb85(0x1) = CONST 
0xb87: vb87(0x1) = CONST 
0xb89: vb89(0xa0) = CONST 
0xb8b: vb8b(0x10000000000000000000000000000000000000000) = SHL vb89(0xa0) vb87(0x1)
0xb8c: vb8c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb8b(0x10000000000000000000000000000000000000000) vb85(0x1)
0xb8e: vb8e = AND vb70_3 vb8c(0xffffffffffffffffffffffffffffffffffffffff)
0xb90: MSTORE vb72(0x0) vb8e
0xb91: vb91 = SHA3 vb72(0x0) vb7c(0x40)
0xb92: vb92 = SLOAD vb91
0xb93: vb93(0xba2) = CONST 
0xb98: vb98(0xffffffff) = CONST 
0xb9d: vb9d(0xfb3) = CONST 
0xba0: vba0(0xfb3) = AND vb9d(0xfb3) vb98(0xffffffff)
0xba1: vba1_0 = CALLPRIVATE vba0(0xfb3) vb70_2 vb92 vb93(0xba2)
----------------------------------

Begin block 0xba2
prev = {'0xb70'}, next = {'0x23a0x3a9'}
----------------------------------
Block 0xba2
0xba2_0x2: vba2_2 = PHI v3b7(0x23a) v3dd vb11
0xba2_0x3: vba2_3 = PHI v3d8 va89(0x0) vb13(0x8fc)
0xba2_0x4: vba2_4 = PHI v3b7(0x23a) v3dd vb11
0xba3: vba3(0x1) = CONST 
0xba5: vba5(0x1) = CONST 
0xba7: vba7(0xa0) = CONST 
0xba9: vba9(0x10000000000000000000000000000000000000000) = SHL vba7(0xa0) vba5(0x1)
0xbaa: vbaa(0xffffffffffffffffffffffffffffffffffffffff) = SUB vba9(0x10000000000000000000000000000000000000000) vba3(0x1)
0xbac: vbac = AND vba2_3 vbaa(0xffffffffffffffffffffffffffffffffffffffff)
0xbad: vbad(0x0) = CONST 
0xbb1: MSTORE vbad(0x0) vbac
0xbb2: vbb2(0x6) = CONST 
0xbb4: vbb4(0x20) = CONST 
0xbb8: MSTORE vbb4(0x20) vbb2(0x6)
0xbb9: vbb9(0x40) = CONST 
0xbbe: vbbe = SHA3 vbad(0x0) vbb9(0x40)
0xbc2: SSTORE vbbe vba1_0
0xbc4: vbc4 = MLOAD vbb9(0x40)
0xbc7: MSTORE vbc4 vba2_2
0xbc9: vbc9 = MLOAD vbb9(0x40)
0xbcc: vbcc = CALLER 
0xbce: vbce(0x0) = CONST 
0xbd1: vbd1 = MLOAD vbce(0x0)
0xbd2: vbd2(0x20) = CONST 
0xbd4: vbd4(0xfc4) = CONST 
0xbdc: MSTORE vbce(0x0) vbd1
0xbe0: vbe0 = SUB vbc4 vbc9
0xbe3: vbe3 = ADD vbb4(0x20) vbe0
0xbe5: LOG3 vbc9 vbe3 v10a8(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vbcc vbac
0xbe7: vbe7(0x1) = CONST 
0xbed: JUMP vba2_4
0x10a8: v10a8(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0xbee
prev = {'0x405'}, next = {'0x23a0x3e2'}
----------------------------------
Block 0xbee
0xbef: vbef(0xa) = CONST 
0xbf1: vbf1(0x20) = CONST 
0xbf3: MSTORE vbf1(0x20) vbef(0xa)
0xbf4: vbf4(0x0) = CONST 
0xbf8: MSTORE vbf4(0x0) v410
0xbf9: vbf9(0x40) = CONST 
0xbfc: vbfc = SHA3 vbf4(0x0) vbf9(0x40)
0xbfd: vbfd = SLOAD vbfc
0xbfe: vbfe(0xff) = CONST 
0xc00: vc00 = AND vbfe(0xff) vbfd
0xc02: JUMP v3f0(0x23a)
----------------------------------

Begin block 0xc03
prev = {'0x438'}, next = {'0xc16', '0xc1a'}
----------------------------------
Block 0xc03
0xc04: vc04(0x0) = CONST 
0xc06: vc06 = SLOAD vc04(0x0)
0xc07: vc07(0x1) = CONST 
0xc09: vc09(0x1) = CONST 
0xc0b: vc0b(0xa0) = CONST 
0xc0d: vc0d(0x10000000000000000000000000000000000000000) = SHL vc0b(0xa0) vc09(0x1)
0xc0e: vc0e(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc0d(0x10000000000000000000000000000000000000000) vc07(0x1)
0xc0f: vc0f = AND vc0e(0xffffffffffffffffffffffffffffffffffffffff) vc06
0xc10: vc10 = CALLER 
0xc11: vc11 = EQ vc10 vc0f
0xc12: vc12(0xc1a) = CONST 
0xc15: JUMPI vc12(0xc1a) vc11
----------------------------------

Begin block 0xc16
prev = {'0xc03'}, next = {}
----------------------------------
Block 0xc16
0xc16: vc16(0x0) = CONST 
0xc19: REVERT vc16(0x0) vc16(0x0)
----------------------------------

Begin block 0xc1a
prev = {'0xc03'}, next = {'0x1750x415'}
----------------------------------
Block 0xc1a
0xc1b: vc1b(0x38d7ea4c68000) = CONST 
0xc23: vc23 = MUL vc1b(0x38d7ea4c68000) v43a
0xc24: vc24(0xb) = CONST 
0xc26: SSTORE vc24(0xb) vc23
0xc27: JUMP v423(0x175)
----------------------------------

Begin block 0xc28
prev = {'0x4c6'}, next = {'0xce7'}
----------------------------------
Block 0xc28
0xc29: vc29 = CALLER 
0xc2a: vc2a(0x0) = CONST 
0xc2e: MSTORE vc2a(0x0) vc29
0xc2f: vc2f(0x7) = CONST 
0xc31: vc31(0x20) = CONST 
0xc35: MSTORE vc31(0x20) vc2f(0x7)
0xc36: vc36(0x40) = CONST 
0xc3a: vc3a = SHA3 vc2a(0x0) vc36(0x40)
0xc3b: vc3b(0x1) = CONST 
0xc3d: vc3d(0x1) = CONST 
0xc3f: vc3f(0xa0) = CONST 
0xc41: vc41(0x10000000000000000000000000000000000000000) = SHL vc3f(0xa0) vc3d(0x1)
0xc42: vc42(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc41(0x10000000000000000000000000000000000000000) vc3b(0x1)
0xc44: vc44 = AND v46d vc42(0xffffffffffffffffffffffffffffffffffffffff)
0xc47: MSTORE vc2a(0x0) vc44
0xc4a: MSTORE vc31(0x20) vc3a
0xc4d: vc4d = SHA3 vc2a(0x0) vc36(0x40)
0xc50: SSTORE vc4d v473
0xc52: vc52 = MLOAD vc36(0x40)
0xc55: MSTORE vc52 v473
0xc57: vc57 = MLOAD vc36(0x40)
0xc5e: vc5e(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xc82: vc82 = SUB vc52 vc57
0xc83: vc83 = ADD vc82 vc31(0x20)
0xc85: LOG3 vc57 vc83 vc5e(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) vc29 vc44
0xc86: vc86(0x40) = CONST 
0xc88: vc88 = MLOAD vc86(0x40)
0xc89: vc89(0x8f4ffcb1) = CONST 
0xc8e: vc8e(0xe0) = CONST 
0xc90: vc90(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = SHL vc8e(0xe0) vc89(0x8f4ffcb1)
0xc92: MSTORE vc88 vc90(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0xc93: vc93 = CALLER 
0xc94: vc94(0x4) = CONST 
0xc97: vc97 = ADD vc88 vc94(0x4)
0xc9a: MSTORE vc97 vc93
0xc9b: vc9b(0x24) = CONST 
0xc9e: vc9e = ADD vc88 vc9b(0x24)
0xca1: MSTORE vc9e v473
0xca2: vca2 = ADDRESS 
0xca3: vca3(0x44) = CONST 
0xca6: vca6 = ADD vc88 vca3(0x44)
0xca9: MSTORE vca6 vca2
0xcaa: vcaa(0x80) = CONST 
0xcac: vcac(0x64) = CONST 
0xcaf: vcaf = ADD vc88 vcac(0x64)
0xcb2: MSTORE vcaf vcaa(0x80)
0xcb4: vcb4 = MLOAD v4d9
0xcb5: vcb5(0x84) = CONST 
0xcb8: vcb8 = ADD vc88 vcb5(0x84)
0xcb9: MSTORE vcb8 vcb4
0xcbb: vcbb = MLOAD v4d9
0xcbc: vcbc(0x1) = CONST 
0xcbe: vcbe(0x1) = CONST 
0xcc0: vcc0(0xa0) = CONST 
0xcc2: vcc2(0x10000000000000000000000000000000000000000) = SHL vcc0(0xa0) vcbe(0x1)
0xcc3: vcc3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc2(0x10000000000000000000000000000000000000000) vcbc(0x1)
0xcc5: vcc5 = AND v46d vcc3(0xffffffffffffffffffffffffffffffffffffffff)
0xcc7: vcc7(0x8f4ffcb1) = CONST 
0xcd7: vcd7(0xa4) = CONST 
0xcdb: vcdb = ADD vc88 vcd7(0xa4)
0xcdd: vcdd(0x20) = CONST 
0xce0: vce0 = ADD v4d9 vcdd(0x20)
0xce5: vce5(0x0) = CONST 
----------------------------------

Begin block 0xce7
prev = {'0xcf0', '0xc28'}, next = {'0xcff', '0xcf0'}
----------------------------------
Block 0xce7
0xce7_0x0: vce7_0 = PHI vce5(0x0) vcfa
0xcea: vcea = LT vce7_0 vcbb
0xceb: vceb = ISZERO vcea
0xcec: vcec(0xcff) = CONST 
0xcef: JUMPI vcec(0xcff) vceb
----------------------------------

Begin block 0xcf0
prev = {'0xce7'}, next = {'0xce7'}
----------------------------------
Block 0xcf0
0xcf0_0x0: vcf0_0 = PHI vce5(0x0) vcfa
0xcf2: vcf2 = ADD vcf0_0 vce0
0xcf3: vcf3 = MLOAD vcf2
0xcf6: vcf6 = ADD vcf0_0 vcdb
0xcf7: MSTORE vcf6 vcf3
0xcf8: vcf8(0x20) = CONST 
0xcfa: vcfa = ADD vcf8(0x20) vcf0_0
0xcfb: vcfb(0xce7) = CONST 
0xcfe: JUMP vcfb(0xce7)
----------------------------------

Begin block 0xcff
prev = {'0xce7'}, next = {'0xd2c', '0xd13'}
----------------------------------
Block 0xcff
0xd08: vd08 = ADD vcbb vcdb
0xd0a: vd0a(0x1f) = CONST 
0xd0c: vd0c = AND vd0a(0x1f) vcbb
0xd0e: vd0e = ISZERO vd0c
0xd0f: vd0f(0xd2c) = CONST 
0xd12: JUMPI vd0f(0xd2c) vd0e
----------------------------------

Begin block 0xd13
prev = {'0xcff'}, next = {'0xd2c'}
----------------------------------
Block 0xd13
0xd15: vd15 = SUB vd08 vd0c
0xd17: vd17 = MLOAD vd15
0xd18: vd18(0x1) = CONST 
0xd1b: vd1b(0x20) = CONST 
0xd1d: vd1d = SUB vd1b(0x20) vd0c
0xd1e: vd1e(0x100) = CONST 
0xd21: vd21 = EXP vd1e(0x100) vd1d
0xd22: vd22 = SUB vd21 vd18(0x1)
0xd23: vd23 = NOT vd22
0xd24: vd24 = AND vd23 vd17
0xd26: MSTORE vd15 vd24
0xd27: vd27(0x20) = CONST 
0xd29: vd29 = ADD vd27(0x20) vd15
----------------------------------

Begin block 0xd2c
prev = {'0xcff', '0xd13'}, next = {'0xd4a', '0xd4e'}
----------------------------------
Block 0xd2c
0xd2c_0x1: vd2c_1 = PHI vd08 vd29
0xd35: vd35(0x0) = CONST 
0xd37: vd37(0x40) = CONST 
0xd39: vd39 = MLOAD vd37(0x40)
0xd3c: vd3c = SUB vd2c_1 vd39
0xd3e: vd3e(0x0) = CONST 
0xd42: vd42 = EXTCODESIZE vcc5
0xd43: vd43 = ISZERO vd42
0xd45: vd45 = ISZERO vd43
0xd46: vd46(0xd4e) = CONST 
0xd49: JUMPI vd46(0xd4e) vd45
----------------------------------

Begin block 0xd4a
prev = {'0xd2c'}, next = {}
----------------------------------
Block 0xd4a
0xd4a: vd4a(0x0) = CONST 
0xd4d: REVERT vd4a(0x0) vd4a(0x0)
----------------------------------

Begin block 0xd4e
prev = {'0xd2c'}, next = {'0xd59', '0xd62'}
----------------------------------
Block 0xd4e
0xd50: vd50 = GAS 
0xd51: vd51 = CALL vd50 vcc5 vd3e(0x0) vd39 vd3c vd39 vd35(0x0)
0xd52: vd52 = ISZERO vd51
0xd54: vd54 = ISZERO vd52
0xd55: vd55(0xd62) = CONST 
0xd58: JUMPI vd55(0xd62) vd54
----------------------------------

Begin block 0xd59
prev = {'0xd4e'}, next = {}
----------------------------------
Block 0xd59
0xd59: vd59 = RETURNDATASIZE 
0xd5a: vd5a(0x0) = CONST 
0xd5d: RETURNDATACOPY vd5a(0x0) vd5a(0x0) vd59
0xd5e: vd5e = RETURNDATASIZE 
0xd5f: vd5f(0x0) = CONST 
0xd61: REVERT vd5f(0x0) vd5e
----------------------------------

Begin block 0xd62
prev = {'0xd4e'}, next = {'0x23a0x43f'}
----------------------------------
Block 0xd62
0xd64: vd64(0x1) = CONST 
0xd6f: JUMP v44d(0x23a)
----------------------------------

Begin block 0xd70
prev = {'0x513'}, next = {'0x3700x507'}
----------------------------------
Block 0xd70
0xd71: vd71(0x1) = CONST 
0xd73: vd73 = SLOAD vd71(0x1)
0xd74: vd74(0x1) = CONST 
0xd76: vd76(0x1) = CONST 
0xd78: vd78(0xa0) = CONST 
0xd7a: vd7a(0x10000000000000000000000000000000000000000) = SHL vd78(0xa0) vd76(0x1)
0xd7b: vd7b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd7a(0x10000000000000000000000000000000000000000) vd74(0x1)
0xd7c: vd7c = AND vd7b(0xffffffffffffffffffffffffffffffffffffffff) vd73
0xd7e: JUMP v515(0x370)
----------------------------------

Begin block 0xd7f
prev = {'0x53f'}, next = {'0xd97', '0xd93'}
----------------------------------
Block 0xd7f
0xd80: vd80(0x0) = CONST 
0xd83: vd83 = SLOAD vd80(0x0)
0xd84: vd84(0x1) = CONST 
0xd86: vd86(0x1) = CONST 
0xd88: vd88(0xa0) = CONST 
0xd8a: vd8a(0x10000000000000000000000000000000000000000) = SHL vd88(0xa0) vd86(0x1)
0xd8b: vd8b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd8a(0x10000000000000000000000000000000000000000) vd84(0x1)
0xd8c: vd8c = AND vd8b(0xffffffffffffffffffffffffffffffffffffffff) vd83
0xd8d: vd8d = CALLER 
0xd8e: vd8e = EQ vd8d vd8c
0xd8f: vd8f(0xd97) = CONST 
0xd92: JUMPI vd8f(0xd97) vd8e
----------------------------------

Begin block 0xd93
prev = {'0xd7f'}, next = {}
----------------------------------
Block 0xd93
0xd93: vd93(0x0) = CONST 
0xd96: REVERT vd93(0x0) vd93(0x0)
----------------------------------

Begin block 0xd97
prev = {'0xd7f'}, next = {'0xdea', '0xdee'}
----------------------------------
Block 0xd97
0xd98: vd98(0x0) = CONST 
0xd9b: vd9b = SLOAD vd98(0x0)
0xd9c: vd9c(0x40) = CONST 
0xd9f: vd9f = MLOAD vd9c(0x40)
0xda0: vda0(0xa9059cbb) = CONST 
0xda5: vda5(0xe0) = CONST 
0xda7: vda7(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL vda5(0xe0) vda0(0xa9059cbb)
0xda9: MSTORE vd9f vda7(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0xdaa: vdaa(0x1) = CONST 
0xdac: vdac(0x1) = CONST 
0xdae: vdae(0xa0) = CONST 
0xdb0: vdb0(0x10000000000000000000000000000000000000000) = SHL vdae(0xa0) vdac(0x1)
0xdb1: vdb1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdb0(0x10000000000000000000000000000000000000000) vdaa(0x1)
0xdb4: vdb4 = AND vdb1(0xffffffffffffffffffffffffffffffffffffffff) vd9b
0xdb5: vdb5(0x4) = CONST 
0xdb8: vdb8 = ADD vd9f vdb5(0x4)
0xdb9: MSTORE vdb8 vdb4
0xdba: vdba(0x24) = CONST 
0xdbd: vdbd = ADD vd9f vdba(0x24)
0xdc0: MSTORE vdbd v550
0xdc2: vdc2 = MLOAD vd9c(0x40)
0xdc5: vdc5 = AND v54b vdb1(0xffffffffffffffffffffffffffffffffffffffff)
0xdc7: vdc7(0xa9059cbb) = CONST 
0xdcd: vdcd(0x44) = CONST 
0xdd1: vdd1 = ADD vd9f vdcd(0x44)
0xdd3: vdd3(0x20) = CONST 
0xdd9: vdd9 = SUB vd9f vdc2
0xddc: vddc = ADD vdcd(0x44) vdd9
0xde2: vde2 = EXTCODESIZE vdc5
0xde3: vde3 = ISZERO vde2
0xde5: vde5 = ISZERO vde3
0xde6: vde6(0xdee) = CONST 
0xde9: JUMPI vde6(0xdee) vde5
----------------------------------

Begin block 0xdea
prev = {'0xd97'}, next = {}
----------------------------------
Block 0xdea
0xdea: vdea(0x0) = CONST 
0xded: REVERT vdea(0x0) vdea(0x0)
----------------------------------

Begin block 0xdee
prev = {'0xd97'}, next = {'0xe02', '0xdf9'}
----------------------------------
Block 0xdee
0xdf0: vdf0 = GAS 
0xdf1: vdf1 = CALL vdf0 vdc5 vd98(0x0) vdc2 vddc vdc2 vdd3(0x20)
0xdf2: vdf2 = ISZERO vdf1
0xdf4: vdf4 = ISZERO vdf2
0xdf5: vdf5(0xe02) = CONST 
0xdf8: JUMPI vdf5(0xe02) vdf4
----------------------------------

Begin block 0xdf9
prev = {'0xdee'}, next = {}
----------------------------------
Block 0xdf9
0xdf9: vdf9 = RETURNDATASIZE 
0xdfa: vdfa(0x0) = CONST 
0xdfd: RETURNDATACOPY vdfa(0x0) vdfa(0x0) vdf9
0xdfe: vdfe = RETURNDATASIZE 
0xdff: vdff(0x0) = CONST 
0xe01: REVERT vdff(0x0) vdfe
----------------------------------

Begin block 0xe02
prev = {'0xdee'}, next = {'0xe14', '0xe18'}
----------------------------------
Block 0xe02
0xe07: ve07(0x40) = CONST 
0xe09: ve09 = MLOAD ve07(0x40)
0xe0a: ve0a = RETURNDATASIZE 
0xe0b: ve0b(0x20) = CONST 
0xe0e: ve0e = LT ve0a ve0b(0x20)
0xe0f: ve0f = ISZERO ve0e
0xe10: ve10(0xe18) = CONST 
0xe13: JUMPI ve10(0xe18) ve0f
----------------------------------

Begin block 0xe14
prev = {'0xe02'}, next = {}
----------------------------------
Block 0xe14
0xe14: ve14(0x0) = CONST 
0xe17: REVERT ve14(0x0) ve14(0x0)
----------------------------------

Begin block 0xe18
prev = {'0xe02'}, next = {'0x23a0x51c'}
----------------------------------
Block 0xe18
0xe1a: ve1a = MLOAD ve09
0xe20: JUMP v52a(0x23a)
----------------------------------

Begin block 0xe21
prev = {'0x578'}, next = {'0x2630x555'}
----------------------------------
Block 0xe21
0xe22: ve22(0x1) = CONST 
0xe24: ve24(0x1) = CONST 
0xe26: ve26(0xa0) = CONST 
0xe28: ve28(0x10000000000000000000000000000000000000000) = SHL ve26(0xa0) ve24(0x1)
0xe29: ve29(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve28(0x10000000000000000000000000000000000000000) ve22(0x1)
0xe2c: ve2c = AND ve29(0xffffffffffffffffffffffffffffffffffffffff) v585
0xe2d: ve2d(0x0) = CONST 
0xe31: MSTORE ve2d(0x0) ve2c
0xe32: ve32(0x7) = CONST 
0xe34: ve34(0x20) = CONST 
0xe38: MSTORE ve34(0x20) ve32(0x7)
0xe39: ve39(0x40) = CONST 
0xe3d: ve3d = SHA3 ve2d(0x0) ve39(0x40)
0xe41: ve41 = AND ve29(0xffffffffffffffffffffffffffffffffffffffff) v58b
0xe43: MSTORE ve2d(0x0) ve41
0xe47: MSTORE ve34(0x20) ve3d
0xe48: ve48 = SHA3 ve2d(0x0) ve39(0x40)
0xe49: ve49 = SLOAD ve48
0xe4b: JUMP v563(0x263)
----------------------------------

Begin block 0xe4c0x3a9
prev = {'0xacb'}, next = {'0xe640x3a9', '0xe680x3a9'}
----------------------------------
Block 0xe4c0x3a9
0xe4d0x3a9: v3a9e4d = CALLER 
0xe4e0x3a9: v3a9e4e(0x0) = CONST 
0xe520x3a9: MSTORE v3a9e4e(0x0) v3a9e4d
0xe530x3a9: v3a9e53(0x6) = CONST 
0xe550x3a9: v3a9e55(0x20) = CONST 
0xe570x3a9: MSTORE v3a9e55(0x20) v3a9e53(0x6)
0xe580x3a9: v3a9e58(0x40) = CONST 
0xe5b0x3a9: v3a9e5b = SHA3 v3a9e4e(0x0) v3a9e58(0x40)
0xe5c0x3a9: v3a9e5c = SLOAD v3a9e5b
0xe5e0x3a9: v3a9e5e = GT vacc v3a9e5c
0xe5f0x3a9: v3a9e5f = ISZERO v3a9e5e
0xe600x3a9: v3a9e60(0xe68) = CONST 
0xe630x3a9: JUMPI v3a9e60(0xe68) v3a9e5f
----------------------------------

Begin block 0xe4c0x590
prev = {'0x5b3'}, next = {'0xe640x590', '0xe680x590'}
----------------------------------
Block 0xe4c0x590
0xe4d0x590: v590e4d = CALLER 
0xe4e0x590: v590e4e(0x0) = CONST 
0xe520x590: MSTORE v590e4e(0x0) v590e4d
0xe530x590: v590e53(0x6) = CONST 
0xe550x590: v590e55(0x20) = CONST 
0xe570x590: MSTORE v590e55(0x20) v590e53(0x6)
0xe580x590: v590e58(0x40) = CONST 
0xe5b0x590: v590e5b = SHA3 v590e4e(0x0) v590e58(0x40)
0xe5c0x590: v590e5c = SLOAD v590e5b
0xe5e0x590: v590e5e = GT v5b5 v590e5c
0xe5f0x590: v590e5f = ISZERO v590e5e
0xe600x590: v590e60(0xe68) = CONST 
0xe630x590: JUMPI v590e60(0xe68) v590e5f
----------------------------------

Begin block 0xe640x3a9
prev = {'0xe4c0x3a9'}, next = {}
----------------------------------
Block 0xe640x3a9
0xe640x3a9: v3a9e64(0x0) = CONST 
0xe670x3a9: REVERT v3a9e64(0x0) v3a9e64(0x0)
----------------------------------

Begin block 0xe640x590
prev = {'0xe4c0x590'}, next = {}
----------------------------------
Block 0xe640x590
0xe640x590: v590e64(0x0) = CONST 
0xe670x590: REVERT v590e64(0x0) v590e64(0x0)
----------------------------------

Begin block 0xe680x3a9
prev = {'0xe4c0x3a9'}, next = {'0xeb60x3a9', '0xebf0x3a9'}
----------------------------------
Block 0xe680x3a9
0xe6a0x3a9: v3a9e6a = ADDRESS 
0xe6b0x3a9: v3a9e6b(0x0) = CONST 
0xe6f0x3a9: MSTORE v3a9e6b(0x0) v3a9e6a
0xe700x3a9: v3a9e70(0x6) = CONST 
0xe720x3a9: v3a9e72(0x20) = CONST 
0xe740x3a9: MSTORE v3a9e72(0x20) v3a9e70(0x6)
0xe750x3a9: v3a9e75(0x40) = CONST 
0xe790x3a9: v3a9e79 = SHA3 v3a9e6b(0x0) v3a9e75(0x40)
0xe7b0x3a9: v3a9e7b = SLOAD v3a9e79
0xe7d0x3a9: v3a9e7d = ADD vacc v3a9e7b
0xe7f0x3a9: SSTORE v3a9e79 v3a9e7d
0xe800x3a9: v3a9e80 = CALLER 
0xe830x3a9: MSTORE v3a9e6b(0x0) v3a9e80
0xe860x3a9: v3a9e86 = SHA3 v3a9e6b(0x0) v3a9e75(0x40)
0xe880x3a9: v3a9e88 = SLOAD v3a9e86
0xe8b0x3a9: v3a9e8b = SUB v3a9e88 vacc
0xe8d0x3a9: SSTORE v3a9e86 v3a9e8b
0xe8e0x3a9: v3a9e8e(0x8) = CONST 
0xe900x3a9: v3a9e90 = SLOAD v3a9e8e(0x8)
0xe920x3a9: v3a9e92 = MLOAD v3a9e75(0x40)
0xe950x3a9: v3a9e95 = MUL vacc v3a9e90
0xe9a0x3a9: v3a9e9a = ISZERO v3a9e95
0xe9b0x3a9: v3a9e9b(0x8fc) = CONST 
0xe9e0x3a9: v3a9e9e = MUL v3a9e9b(0x8fc) v3a9e9a
0xea90x3a9: v3a9ea9 = CALL v3a9e9e v3a9e80 v3a9e95 v3a9e92 v3a9e6b(0x0) v3a9e92 v3a9e6b(0x0)
0xeaf0x3a9: v3a9eaf = ISZERO v3a9ea9
0xeb10x3a9: v3a9eb1 = ISZERO v3a9eaf
0xeb20x3a9: v3a9eb2(0xebf) = CONST 
0xeb50x3a9: JUMPI v3a9eb2(0xebf) v3a9eb1
----------------------------------

Begin block 0xe680x590
prev = {'0xe4c0x590'}, next = {'0xebf0x590', '0xeb60x590'}
----------------------------------
Block 0xe680x590
0xe6a0x590: v590e6a = ADDRESS 
0xe6b0x590: v590e6b(0x0) = CONST 
0xe6f0x590: MSTORE v590e6b(0x0) v590e6a
0xe700x590: v590e70(0x6) = CONST 
0xe720x590: v590e72(0x20) = CONST 
0xe740x590: MSTORE v590e72(0x20) v590e70(0x6)
0xe750x590: v590e75(0x40) = CONST 
0xe790x590: v590e79 = SHA3 v590e6b(0x0) v590e75(0x40)
0xe7b0x590: v590e7b = SLOAD v590e79
0xe7d0x590: v590e7d = ADD v5b5 v590e7b
0xe7f0x590: SSTORE v590e79 v590e7d
0xe800x590: v590e80 = CALLER 
0xe830x590: MSTORE v590e6b(0x0) v590e80
0xe860x590: v590e86 = SHA3 v590e6b(0x0) v590e75(0x40)
0xe880x590: v590e88 = SLOAD v590e86
0xe8b0x590: v590e8b = SUB v590e88 v5b5
0xe8d0x590: SSTORE v590e86 v590e8b
0xe8e0x590: v590e8e(0x8) = CONST 
0xe900x590: v590e90 = SLOAD v590e8e(0x8)
0xe920x590: v590e92 = MLOAD v590e75(0x40)
0xe950x590: v590e95 = MUL v5b5 v590e90
0xe9a0x590: v590e9a = ISZERO v590e95
0xe9b0x590: v590e9b(0x8fc) = CONST 
0xe9e0x590: v590e9e = MUL v590e9b(0x8fc) v590e9a
0xea90x590: v590ea9 = CALL v590e9e v590e80 v590e95 v590e92 v590e6b(0x0) v590e92 v590e6b(0x0)
0xeaf0x590: v590eaf = ISZERO v590ea9
0xeb10x590: v590eb1 = ISZERO v590eaf
0xeb20x590: v590eb2(0xebf) = CONST 
0xeb50x590: JUMPI v590eb2(0xebf) v590eb1
----------------------------------

Begin block 0xeb60x3a9
prev = {'0xe680x3a9'}, next = {}
----------------------------------
Block 0xeb60x3a9
0xeb60x3a9: v3a9eb6 = RETURNDATASIZE 
0xeb70x3a9: v3a9eb7(0x0) = CONST 
0xeba0x3a9: RETURNDATACOPY v3a9eb7(0x0) v3a9eb7(0x0) v3a9eb6
0xebb0x3a9: v3a9ebb = RETURNDATASIZE 
0xebc0x3a9: v3a9ebc(0x0) = CONST 
0xebe0x3a9: REVERT v3a9ebc(0x0) v3a9ebb
----------------------------------

Begin block 0xeb60x590
prev = {'0xe680x590'}, next = {}
----------------------------------
Block 0xeb60x590
0xeb60x590: v590eb6 = RETURNDATASIZE 
0xeb70x590: v590eb7(0x0) = CONST 
0xeba0x590: RETURNDATACOPY v590eb7(0x0) v590eb7(0x0) v590eb6
0xebb0x590: v590ebb = RETURNDATASIZE 
0xebc0x590: v590ebc(0x0) = CONST 
0xebe0x590: REVERT v590ebc(0x0) v590ebb
----------------------------------

Begin block 0xebf0x3a9
prev = {'0xe680x3a9'}, next = {'0xad1', '0xb26'}
----------------------------------
Block 0xebf0x3a9
0xebf0x3a9_0x3: vebf3a9_3 = PHI vab0(0xad1) vb17(0xb26)
0xec10x3a9: v3a9ec1(0x40) = CONST 
0xec40x3a9: v3a9ec4 = MLOAD v3a9ec1(0x40)
0xec70x3a9: MSTORE v3a9ec4 vacc
0xec90x3a9: v3a9ec9 = MLOAD v3a9ec1(0x40)
0xeca0x3a9: v3a9eca = ADDRESS 
0xecc0x3a9: v3a9ecc = CALLER 
0xece0x3a9: v3a9ece(0x0) = CONST 
0xed10x3a9: v3a9ed1 = MLOAD v3a9ece(0x0)
0xed20x3a9: v3a9ed2(0x20) = CONST 
0xed40x3a9: v3a9ed4(0xfc4) = CONST 
0xedc0x3a9: MSTORE v3a9ece(0x0) v3a9ed1
0xee00x3a9: v3a9ee0 = SUB v3a9ec4 v3a9ec9
0xee10x3a9: v3a9ee1(0x20) = CONST 
0xee30x3a9: v3a9ee3 = ADD v3a9ee1(0x20) v3a9ee0
0xee50x3a9: LOG3 v3a9ec9 v3a9ee3 v3a910ad(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v3a9ecc v3a9eca
0xee90x3a9: JUMP vebf3a9_3
0x10ad0x3a9: v3a910ad(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0xebf0x590
prev = {'0xe680x590'}, next = {'0x2630x590'}
----------------------------------
Block 0xebf0x590
0xec10x590: v590ec1(0x40) = CONST 
0xec40x590: v590ec4 = MLOAD v590ec1(0x40)
0xec70x590: MSTORE v590ec4 v5b5
0xec90x590: v590ec9 = MLOAD v590ec1(0x40)
0xeca0x590: v590eca = ADDRESS 
0xecc0x590: v590ecc = CALLER 
0xece0x590: v590ece(0x0) = CONST 
0xed10x590: v590ed1 = MLOAD v590ece(0x0)
0xed20x590: v590ed2(0x20) = CONST 
0xed40x590: v590ed4(0xfc4) = CONST 
0xedc0x590: MSTORE v590ece(0x0) v590ed1
0xee00x590: v590ee0 = SUB v590ec4 v590ec9
0xee10x590: v590ee1(0x20) = CONST 
0xee30x590: v590ee3 = ADD v590ee1(0x20) v590ee0
0xee50x590: LOG3 v590ec9 v590ee3 v59010ad(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v590ecc v590eca
0xee90x590: JUMP v59e(0x263)
0x10ad0x590: v59010ad(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
----------------------------------

Begin block 0xeea
prev = {'0x5dd'}, next = {'0xf01', '0xefd'}
----------------------------------
Block 0xeea
0xeeb: veeb(0x0) = CONST 
0xeed: veed = SLOAD veeb(0x0)
0xeee: veee(0x1) = CONST 
0xef0: vef0(0x1) = CONST 
0xef2: vef2(0xa0) = CONST 
0xef4: vef4(0x10000000000000000000000000000000000000000) = SHL vef2(0xa0) vef0(0x1)
0xef5: vef5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vef4(0x10000000000000000000000000000000000000000) veee(0x1)
0xef6: vef6 = AND vef5(0xffffffffffffffffffffffffffffffffffffffff) veed
0xef7: vef7 = CALLER 
0xef8: vef8 = EQ vef7 vef6
0xef9: vef9(0xf01) = CONST 
0xefc: JUMPI vef9(0xf01) vef8
----------------------------------

Begin block 0xefd
prev = {'0xeea'}, next = {}
----------------------------------
Block 0xefd
0xefd: vefd(0x0) = CONST 
0xf00: REVERT vefd(0x0) vefd(0x0)
----------------------------------

Begin block 0xf01
prev = {'0xeea'}, next = {'0x1750x5ba'}
----------------------------------
Block 0xf01
0xf02: vf02(0x1) = CONST 
0xf04: vf04(0x1) = CONST 
0xf06: vf06(0xa0) = CONST 
0xf08: vf08(0x10000000000000000000000000000000000000000) = SHL vf06(0xa0) vf04(0x1)
0xf09: vf09(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf08(0x10000000000000000000000000000000000000000) vf02(0x1)
0xf0b: vf0b = AND v5e9 vf09(0xffffffffffffffffffffffffffffffffffffffff)
0xf0c: vf0c(0x0) = CONST 
0xf10: MSTORE vf0c(0x0) vf0b
0xf11: vf11(0xa) = CONST 
0xf13: vf13(0x20) = CONST 
0xf17: MSTORE vf13(0x20) vf11(0xa)
0xf18: vf18(0x40) = CONST 
0xf1d: vf1d = SHA3 vf0c(0x0) vf18(0x40)
0xf1f: vf1f = SLOAD vf1d
0xf20: vf20(0xff) = CONST 
0xf22: vf22(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vf20(0xff)
0xf23: vf23 = AND vf22(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vf1f
0xf25: vf25 = ISZERO v5f0
0xf26: vf26 = ISZERO vf25
0xf29: vf29 = OR vf26 vf23
0xf2c: SSTORE vf1d vf29
0xf2e: vf2e = MLOAD vf18(0x40)
0xf31: MSTORE vf2e vf0b
0xf34: vf34 = ADD vf2e vf13(0x20)
0xf35: MSTORE vf34 vf26
0xf37: vf37 = MLOAD vf18(0x40)
0xf38: vf38(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5) = CONST 
0xf5c: vf5c = SUB vf2e vf37
0xf5f: vf5f = ADD vf18(0x40) vf5c
0xf61: LOG1 vf37 vf5f vf38(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5)
0xf64: JUMP v5c8(0x175)
----------------------------------

Begin block 0xf65
prev = {'0x618'}, next = {'0xf78', '0xf7c'}
----------------------------------
Block 0xf65
0xf66: vf66(0x0) = CONST 
0xf68: vf68 = SLOAD vf66(0x0)
0xf69: vf69(0x1) = CONST 
0xf6b: vf6b(0x1) = CONST 
0xf6d: vf6d(0xa0) = CONST 
0xf6f: vf6f(0x10000000000000000000000000000000000000000) = SHL vf6d(0xa0) vf6b(0x1)
0xf70: vf70(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf6f(0x10000000000000000000000000000000000000000) vf69(0x1)
0xf71: vf71 = AND vf70(0xffffffffffffffffffffffffffffffffffffffff) vf68
0xf72: vf72 = CALLER 
0xf73: vf73 = EQ vf72 vf71
0xf74: vf74(0xf7c) = CONST 
0xf77: JUMPI vf74(0xf7c) vf73
----------------------------------

Begin block 0xf78
prev = {'0xf65'}, next = {}
----------------------------------
Block 0xf78
0xf78: vf78(0x0) = CONST 
0xf7b: REVERT vf78(0x0) vf78(0x0)
----------------------------------

Begin block 0xf7c
prev = {'0xf65'}, next = {'0x1750x5f5'}
----------------------------------
Block 0xf7c
0xf7d: vf7d(0x1) = CONST 
0xf80: vf80 = SLOAD vf7d(0x1)
0xf81: vf81(0x1) = CONST 
0xf83: vf83(0x1) = CONST 
0xf85: vf85(0xa0) = CONST 
0xf87: vf87(0x10000000000000000000000000000000000000000) = SHL vf85(0xa0) vf83(0x1)
0xf88: vf88(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf87(0x10000000000000000000000000000000000000000) vf81(0x1)
0xf89: vf89(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf88(0xffffffffffffffffffffffffffffffffffffffff)
0xf8a: vf8a = AND vf89(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vf80
0xf8b: vf8b(0x1) = CONST 
0xf8d: vf8d(0x1) = CONST 
0xf8f: vf8f(0xa0) = CONST 
0xf91: vf91(0x10000000000000000000000000000000000000000) = SHL vf8f(0xa0) vf8d(0x1)
0xf92: vf92(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf91(0x10000000000000000000000000000000000000000) vf8b(0x1)
0xf96: vf96 = AND vf92(0xffffffffffffffffffffffffffffffffffffffff) v623
0xf9a: vf9a = OR vf96 vf8a
0xf9c: SSTORE vf7d(0x1) vf9a
0xf9d: JUMP v603(0x175)
----------------------------------

Begin block 0xf9e
prev = {}, next = {'0xfad', '0xfa9'}
----------------------------------
function 0xf9e(vf9earg0, vf9earg1, vf9earg2)
Block 0xf9e
0xf9f: vf9f(0x0) = CONST 
0xfa3: vfa3 = GT vf9earg0 vf9earg1
0xfa4: vfa4 = ISZERO vfa3
0xfa5: vfa5(0xfad) = CONST 
0xfa8: JUMPI vfa5(0xfad) vfa4
----------------------------------

Begin block 0xfa9
prev = {'0xf9e'}, next = {}
----------------------------------
Block 0xfa9
0xfa9: vfa9(0x0) = CONST 
0xfac: REVERT vfa9(0x0) vfa9(0x0)
----------------------------------

Begin block 0xfad
prev = {'0xf9e'}, next = {}
----------------------------------
Block 0xfad
0xfb0: vfb0 = SUB vf9earg1 vf9earg0
0xfb2: RETURNPRIVATE vf9earg2 vfb0
----------------------------------

Begin block 0xfb3
prev = {}, next = {'0x7390xfb3', '0xfbf'}
----------------------------------
function 0xfb3(vfb3arg0, vfb3arg1, vfb3arg2)
Block 0xfb3
0xfb6: vfb6 = ADD vfb3arg0 vfb3arg1
0xfb9: vfb9 = LT vfb6 vfb3arg1
0xfba: vfba = ISZERO vfb9
0xfbb: vfbb(0x739) = CONST 
0xfbe: JUMPI vfbb(0x739) vfba
----------------------------------

Begin block 0xfbf
prev = {'0xfb3'}, next = {}
----------------------------------
Block 0xfbf
0xfbf: vfbf(0x0) = CONST 
0xfc2: REVERT vfbf(0x0) vfbf(0x0)
----------------------------------

Begin block 0x1048
prev = {'0x0', '0x135'}, next = {'0x1400x0'}
----------------------------------
Block 0x1048
0x1049: v1049(0x140) = CONST 
0x104a: CALLPRIVATE v1049(0x140)
----------------------------------

Begin block 0x104b
prev = {'0x108'}, next = {}
----------------------------------
Block 0x104b
0x104c: v104c(0x145) = CONST 
0x104d: CALLPRIVATE v104c(0x145)
----------------------------------

Begin block 0x104e
prev = {'0x114'}, next = {}
----------------------------------
Block 0x104e
0x104f: v104f(0x177) = CONST 
0x1050: CALLPRIVATE v104f(0x177)
----------------------------------

Begin block 0x1051
prev = {'0x11f'}, next = {}
----------------------------------
Block 0x1051
0x1052: v1052(0x201) = CONST 
0x1053: CALLPRIVATE v1052(0x201)
----------------------------------

Begin block 0x1054
prev = {'0x12a'}, next = {}
----------------------------------
Block 0x1054
0x1055: v1055(0x24e) = CONST 
0x1056: CALLPRIVATE v1055(0x24e)
----------------------------------

Begin block 0x1057
prev = {'0x135'}, next = {}
----------------------------------
Block 0x1057
0x1058: v1058(0x275) = CONST 
0x1059: CALLPRIVATE v1058(0x275)
----------------------------------

Begin block 0x105a
prev = {'0xc2'}, next = {}
----------------------------------
Block 0x105a
0x105b: v105b(0x2b8) = CONST 
0x105c: CALLPRIVATE v105b(0x2b8)
----------------------------------

Begin block 0x105d
prev = {'0xcd'}, next = {}
----------------------------------
Block 0x105d
0x105e: v105e(0x2e3) = CONST 
0x105f: CALLPRIVATE v105e(0x2e3)
----------------------------------

Begin block 0x1060
prev = {'0xd8'}, next = {}
----------------------------------
Block 0x1060
0x1061: v1061(0x2f8) = CONST 
0x1062: CALLPRIVATE v1061(0x2f8)
----------------------------------

Begin block 0x1063
prev = {'0xe3'}, next = {}
----------------------------------
Block 0x1063
0x1064: v1064(0x30d) = CONST 
0x1065: CALLPRIVATE v1064(0x30d)
----------------------------------

Begin block 0x1066
prev = {'0xee'}, next = {}
----------------------------------
Block 0x1066
0x1067: v1067(0x346) = CONST 
0x1068: CALLPRIVATE v1067(0x346)
----------------------------------

Begin block 0x1069
prev = {'0xf9'}, next = {}
----------------------------------
Block 0x1069
0x106a: v106a(0x35b) = CONST 
0x106b: CALLPRIVATE v106a(0x35b)
----------------------------------

Begin block 0x106c
prev = {'0x6f'}, next = {}
----------------------------------
Block 0x106c
0x106d: v106d(0x38c) = CONST 
0x106e: CALLPRIVATE v106d(0x38c)
----------------------------------

Begin block 0x106f
prev = {'0x7b'}, next = {}
----------------------------------
Block 0x106f
0x1070: v1070(0x3a1) = CONST 
0x1071: CALLPRIVATE v1070(0x3a1)
----------------------------------

Begin block 0x1072
prev = {'0x86'}, next = {}
----------------------------------
Block 0x1072
0x1073: v1073(0x3a9) = CONST 
0x1074: CALLPRIVATE v1073(0x3a9)
----------------------------------

Begin block 0x1075
prev = {'0x91'}, next = {}
----------------------------------
Block 0x1075
0x1076: v1076(0x3e2) = CONST 
0x1077: CALLPRIVATE v1076(0x3e2)
----------------------------------

Begin block 0x1078
prev = {'0x9c'}, next = {}
----------------------------------
Block 0x1078
0x1079: v1079(0x415) = CONST 
0x107a: CALLPRIVATE v1079(0x415)
----------------------------------

Begin block 0x107b
prev = {'0xa7'}, next = {}
----------------------------------
Block 0x107b
0x107c: v107c(0x43f) = CONST 
0x107d: CALLPRIVATE v107c(0x43f)
----------------------------------

Begin block 0x107e
prev = {'0x29'}, next = {}
----------------------------------
Block 0x107e
0x107f: v107f(0x507) = CONST 
0x1080: CALLPRIVATE v107f(0x507)
----------------------------------

Begin block 0x1081
prev = {'0x34'}, next = {}
----------------------------------
Block 0x1081
0x1082: v1082(0x51c) = CONST 
0x1083: CALLPRIVATE v1082(0x51c)
----------------------------------

Begin block 0x1084
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x1084
0x1085: v1085(0x555) = CONST 
0x1086: CALLPRIVATE v1085(0x555)
----------------------------------

Begin block 0x1087
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x1087
0x1088: v1088(0x590) = CONST 
0x1089: CALLPRIVATE v1088(0x590)
----------------------------------

Begin block 0x108a
prev = {'0x55'}, next = {}
----------------------------------
Block 0x108a
0x108b: v108b(0x5ba) = CONST 
0x108c: CALLPRIVATE v108b(0x5ba)
----------------------------------

Begin block 0x108d
prev = {'0x60'}, next = {}
----------------------------------
Block 0x108d
0x108e: v108e(0x5f5) = CONST 
0x108f: CALLPRIVATE v108e(0x5f5)
----------------------------------
