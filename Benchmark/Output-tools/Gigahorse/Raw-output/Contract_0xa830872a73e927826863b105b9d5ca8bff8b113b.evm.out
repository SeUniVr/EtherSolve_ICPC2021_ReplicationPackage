
Begin block 0x0
prev = {}, next = {'0x18ac', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x187e: v187e(0x18ac) = CONST 
0x187f: JUMPI v187e(0x18ac) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x18af', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x5fefda7) = CONST 
0x3c: v3c = EQ v37(0x5fefda7) v35
0x1880: v1880(0x18af) = CONST 
0x1881: JUMPI v1880(0x18af) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x4c', '0x18b2'}
----------------------------------
Block 0x41
0x42: v42(0x6fdde03) = CONST 
0x47: v47 = EQ v42(0x6fdde03) v35
0x1882: v1882(0x18b2) = CONST 
0x1883: JUMPI v1882(0x18b2) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x18b5', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0x95ea7b3) = CONST 
0x52: v52 = EQ v4d(0x95ea7b3) v35
0x1884: v1884(0x18b5) = CONST 
0x1885: JUMPI v1884(0x18b5) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x18b8', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x18160ddd) = CONST 
0x5d: v5d = EQ v58(0x18160ddd) v35
0x1886: v1886(0x18b8) = CONST 
0x1887: JUMPI v1886(0x18b8) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x18bb', '0x6d'}
----------------------------------
Block 0x62
0x63: v63(0x23b872dd) = CONST 
0x68: v68 = EQ v63(0x23b872dd) v35
0x1888: v1888(0x18bb) = CONST 
0x1889: JUMPI v1888(0x18bb) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x18be', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x313ce567) = CONST 
0x73: v73 = EQ v6e(0x313ce567) v35
0x188a: v188a(0x18be) = CONST 
0x188b: JUMPI v188a(0x18be) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x18c1', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x42966c68) = CONST 
0x7e: v7e = EQ v79(0x42966c68) v35
0x188c: v188c(0x18c1) = CONST 
0x188d: JUMPI v188c(0x18c1) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x18c4', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x4b750334) = CONST 
0x89: v89 = EQ v84(0x4b750334) v35
0x188e: v188e(0x18c4) = CONST 
0x188f: JUMPI v188e(0x18c4) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x18c7', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x70a08231) = CONST 
0x94: v94 = EQ v8f(0x70a08231) v35
0x1890: v1890(0x18c7) = CONST 
0x1891: JUMPI v1890(0x18c7) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0x18ca', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x79c65068) = CONST 
0x9f: v9f = EQ v9a(0x79c65068) v35
0x1892: v1892(0x18ca) = CONST 
0x1893: JUMPI v1892(0x18ca) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xaf', '0x18cd'}
----------------------------------
Block 0xa4
0xa5: va5(0x79cc6790) = CONST 
0xaa: vaa = EQ va5(0x79cc6790) v35
0x1894: v1894(0x18cd) = CONST 
0x1895: JUMPI v1894(0x18cd) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0x18d0', '0xba'}
----------------------------------
Block 0xaf
0xb0: vb0(0x8620410b) = CONST 
0xb5: vb5 = EQ vb0(0x8620410b) v35
0x1896: v1896(0x18d0) = CONST 
0x1897: JUMPI v1896(0x18d0) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0xc5', '0x18d3'}
----------------------------------
Block 0xba
0xbb: vbb(0x8da5cb5b) = CONST 
0xc0: vc0 = EQ vbb(0x8da5cb5b) v35
0x1898: v1898(0x18d3) = CONST 
0x1899: JUMPI v1898(0x18d3) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0x18d6', '0xd0'}
----------------------------------
Block 0xc5
0xc6: vc6(0x95d89b41) = CONST 
0xcb: vcb = EQ vc6(0x95d89b41) v35
0x189a: v189a(0x18d6) = CONST 
0x189b: JUMPI v189a(0x18d6) vcb
----------------------------------

Begin block 0xd0
prev = {'0xc5'}, next = {'0xdb', '0x18d9'}
----------------------------------
Block 0xd0
0xd1: vd1(0xa6f2ae3a) = CONST 
0xd6: vd6 = EQ vd1(0xa6f2ae3a) v35
0x189c: v189c(0x18d9) = CONST 
0x189d: JUMPI v189c(0x18d9) vd6
----------------------------------

Begin block 0xdb
prev = {'0xd0'}, next = {'0x18dc', '0xe6'}
----------------------------------
Block 0xdb
0xdc: vdc(0xa9059cbb) = CONST 
0xe1: ve1 = EQ vdc(0xa9059cbb) v35
0x189e: v189e(0x18dc) = CONST 
0x189f: JUMPI v189e(0x18dc) ve1
----------------------------------

Begin block 0xe6
prev = {'0xdb'}, next = {'0xf1', '0x18df'}
----------------------------------
Block 0xe6
0xe7: ve7(0xb414d4b6) = CONST 
0xec: vec = EQ ve7(0xb414d4b6) v35
0x18a0: v18a0(0x18df) = CONST 
0x18a1: JUMPI v18a0(0x18df) vec
----------------------------------

Begin block 0xf1
prev = {'0xe6'}, next = {'0x18e2', '0xfc'}
----------------------------------
Block 0xf1
0xf2: vf2(0xcae9ca51) = CONST 
0xf7: vf7 = EQ vf2(0xcae9ca51) v35
0x18a2: v18a2(0x18e2) = CONST 
0x18a3: JUMPI v18a2(0x18e2) vf7
----------------------------------

Begin block 0xfc
prev = {'0xf1'}, next = {'0x107', '0x18e5'}
----------------------------------
Block 0xfc
0xfd: vfd(0xdd62ed3e) = CONST 
0x102: v102 = EQ vfd(0xdd62ed3e) v35
0x18a4: v18a4(0x18e5) = CONST 
0x18a5: JUMPI v18a4(0x18e5) v102
----------------------------------

Begin block 0x107
prev = {'0xfc'}, next = {'0x18e8', '0x112'}
----------------------------------
Block 0x107
0x108: v108(0xe4849b32) = CONST 
0x10d: v10d = EQ v108(0xe4849b32) v35
0x18a6: v18a6(0x18e8) = CONST 
0x18a7: JUMPI v18a6(0x18e8) v10d
----------------------------------

Begin block 0x112
prev = {'0x107'}, next = {'0x18eb', '0x11d'}
----------------------------------
Block 0x112
0x113: v113(0xe724529c) = CONST 
0x118: v118 = EQ v113(0xe724529c) v35
0x18a8: v18a8(0x18eb) = CONST 
0x18a9: JUMPI v18a8(0x18eb) v118
----------------------------------

Begin block 0x11d
prev = {'0x112'}, next = {'0x18ac', '0x18ee'}
----------------------------------
Block 0x11d
0x11e: v11e(0xf2fde38b) = CONST 
0x123: v123 = EQ v11e(0xf2fde38b) v35
0x18aa: v18aa(0x18ee) = CONST 
0x18ab: JUMPI v18aa(0x18ee) v123
----------------------------------

Begin block 0x128
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x128
0x129: v129(0x0) = CONST 
0x12c: REVERT v129(0x0) v129(0x0)
----------------------------------

Begin block 0x12d
prev = {}, next = {'0x135', '0x139'}
----------------------------------
function setPrices(uint256,uint256)()
Block 0x12d
0x12e: v12e = CALLVALUE 
0x130: v130 = ISZERO v12e
0x131: v131(0x139) = CONST 
0x134: JUMPI v131(0x139) v130
----------------------------------

Begin block 0x135
prev = {'0x12d'}, next = {}
----------------------------------
Block 0x135
0x135: v135(0x0) = CONST 
0x138: REVERT v135(0x0) v135(0x0)
----------------------------------

Begin block 0x139
prev = {'0x12d'}, next = {'0x870'}
----------------------------------
Block 0x139
0x13b: v13b(0x162) = CONST 
0x13e: v13e(0x4) = CONST 
0x141: v141 = CALLDATASIZE 
0x142: v142 = SUB v141 v13e(0x4)
0x144: v144 = ADD v13e(0x4) v142
0x148: v148 = CALLDATALOAD v13e(0x4)
0x14a: v14a(0x20) = CONST 
0x14c: v14c(0x24) = ADD v14a(0x20) v13e(0x4)
0x152: v152 = CALLDATALOAD v14c(0x24)
0x154: v154(0x20) = CONST 
0x156: v156(0x44) = ADD v154(0x20) v14c(0x24)
0x15e: v15e(0x870) = CONST 
0x161: JUMP v15e(0x870)
----------------------------------

Begin block 0x162
prev = {'0x8cb'}, next = {}
----------------------------------
Block 0x162
0x163: STOP 
----------------------------------

Begin block 0x164
prev = {}, next = {'0x16c', '0x170'}
----------------------------------
function name()()
Block 0x164
0x165: v165 = CALLVALUE 
0x167: v167 = ISZERO v165
0x168: v168(0x170) = CONST 
0x16b: JUMPI v168(0x170) v167
----------------------------------

Begin block 0x16c
prev = {'0x164'}, next = {}
----------------------------------
Block 0x16c
0x16c: v16c(0x0) = CONST 
0x16f: REVERT v16c(0x0) v16c(0x0)
----------------------------------

Begin block 0x170
prev = {'0x164'}, next = {'0x8dd'}
----------------------------------
Block 0x170
0x172: v172(0x179) = CONST 
0x175: v175(0x8dd) = CONST 
0x178: JUMP v175(0x8dd)
----------------------------------

Begin block 0x179
prev = {'0x973'}, next = {'0x19e'}
----------------------------------
Block 0x179
0x17a: v17a(0x40) = CONST 
0x17c: v17c = MLOAD v17a(0x40)
0x17f: v17f(0x20) = CONST 
0x181: v181 = ADD v17f(0x20) v17c
0x184: v184 = SUB v181 v17c
0x186: MSTORE v17c v184
0x18a: v18a = MLOAD v902
0x18c: MSTORE v181 v18a
0x18d: v18d(0x20) = CONST 
0x18f: v18f = ADD v18d(0x20) v181
0x193: v193 = MLOAD v902
0x195: v195(0x20) = CONST 
0x197: v197 = ADD v195(0x20) v902
0x19c: v19c(0x0) = CONST 
----------------------------------

Begin block 0x19e
prev = {'0x1a7', '0x179'}, next = {'0x1a7', '0x1b9'}
----------------------------------
Block 0x19e
0x19e_0x0: v19e_0 = PHI v19c(0x0) v1b2
0x1a1: v1a1 = LT v19e_0 v193
0x1a2: v1a2 = ISZERO v1a1
0x1a3: v1a3(0x1b9) = CONST 
0x1a6: JUMPI v1a3(0x1b9) v1a2
----------------------------------

Begin block 0x1a7
prev = {'0x19e'}, next = {'0x19e'}
----------------------------------
Block 0x1a7
0x1a7_0x0: v1a7_0 = PHI v19c(0x0) v1b2
0x1a9: v1a9 = ADD v197 v1a7_0
0x1aa: v1aa = MLOAD v1a9
0x1ad: v1ad = ADD v18f v1a7_0
0x1ae: MSTORE v1ad v1aa
0x1af: v1af(0x20) = CONST 
0x1b2: v1b2 = ADD v1a7_0 v1af(0x20)
0x1b5: v1b5(0x19e) = CONST 
0x1b8: JUMP v1b5(0x19e)
----------------------------------

Begin block 0x1b9
prev = {'0x19e'}, next = {'0x1e6', '0x1cd'}
----------------------------------
Block 0x1b9
0x1c2: v1c2 = ADD v193 v18f
0x1c4: v1c4(0x1f) = CONST 
0x1c6: v1c6 = AND v1c4(0x1f) v193
0x1c8: v1c8 = ISZERO v1c6
0x1c9: v1c9(0x1e6) = CONST 
0x1cc: JUMPI v1c9(0x1e6) v1c8
----------------------------------

Begin block 0x1cd
prev = {'0x1b9'}, next = {'0x1e6'}
----------------------------------
Block 0x1cd
0x1cf: v1cf = SUB v1c2 v1c6
0x1d1: v1d1 = MLOAD v1cf
0x1d2: v1d2(0x1) = CONST 
0x1d5: v1d5(0x20) = CONST 
0x1d7: v1d7 = SUB v1d5(0x20) v1c6
0x1d8: v1d8(0x100) = CONST 
0x1db: v1db = EXP v1d8(0x100) v1d7
0x1dc: v1dc = SUB v1db v1d2(0x1)
0x1dd: v1dd = NOT v1dc
0x1de: v1de = AND v1dd v1d1
0x1e0: MSTORE v1cf v1de
0x1e1: v1e1(0x20) = CONST 
0x1e3: v1e3 = ADD v1e1(0x20) v1cf
----------------------------------

Begin block 0x1e6
prev = {'0x1b9', '0x1cd'}, next = {}
----------------------------------
Block 0x1e6
0x1e6_0x1: v1e6_1 = PHI v1c2 v1e3
0x1ec: v1ec(0x40) = CONST 
0x1ee: v1ee = MLOAD v1ec(0x40)
0x1f1: v1f1 = SUB v1e6_1 v1ee
0x1f3: RETURN v1ee v1f1
----------------------------------

Begin block 0x1f4
prev = {}, next = {'0x1fc', '0x200'}
----------------------------------
function approve(address,uint256)()
Block 0x1f4
0x1f5: v1f5 = CALLVALUE 
0x1f7: v1f7 = ISZERO v1f5
0x1f8: v1f8(0x200) = CONST 
0x1fb: JUMPI v1f8(0x200) v1f7
----------------------------------

Begin block 0x1fc
prev = {'0x1f4'}, next = {}
----------------------------------
Block 0x1fc
0x1fc: v1fc(0x0) = CONST 
0x1ff: REVERT v1fc(0x0) v1fc(0x0)
----------------------------------

Begin block 0x200
prev = {'0x1f4'}, next = {'0x23f'}
----------------------------------
Block 0x200
0x202: v202(0x23f) = CONST 
0x205: v205(0x4) = CONST 
0x208: v208 = CALLDATASIZE 
0x209: v209 = SUB v208 v205(0x4)
0x20b: v20b = ADD v205(0x4) v209
0x20f: v20f = CALLDATALOAD v205(0x4)
0x210: v210(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x225: v225 = AND v210(0xffffffffffffffffffffffffffffffffffffffff) v20f
0x227: v227(0x20) = CONST 
0x229: v229(0x24) = ADD v227(0x20) v205(0x4)
0x22f: v22f = CALLDATALOAD v229(0x24)
0x231: v231(0x20) = CONST 
0x233: v233(0x44) = ADD v231(0x20) v229(0x24)
0x23b: v23b(0x97b) = CONST 
0x23e: v23e_0 = CALLPRIVATE v23b(0x97b) v22f v225 v202(0x23f)
----------------------------------

Begin block 0x23f
prev = {'0x200'}, next = {}
----------------------------------
Block 0x23f
0x240: v240(0x40) = CONST 
0x242: v242 = MLOAD v240(0x40)
0x245: v245 = ISZERO v23e_0
0x246: v246 = ISZERO v245
0x247: v247 = ISZERO v246
0x248: v248 = ISZERO v247
0x24a: MSTORE v242 v248
0x24b: v24b(0x20) = CONST 
0x24d: v24d = ADD v24b(0x20) v242
0x251: v251(0x40) = CONST 
0x253: v253 = MLOAD v251(0x40)
0x256: v256 = SUB v24d v253
0x258: RETURN v253 v256
----------------------------------

Begin block 0x259
prev = {}, next = {'0x261', '0x265'}
----------------------------------
function totalSupply()()
Block 0x259
0x25a: v25a = CALLVALUE 
0x25c: v25c = ISZERO v25a
0x25d: v25d(0x265) = CONST 
0x260: JUMPI v25d(0x265) v25c
----------------------------------

Begin block 0x261
prev = {'0x259'}, next = {}
----------------------------------
Block 0x261
0x261: v261(0x0) = CONST 
0x264: REVERT v261(0x0) v261(0x0)
----------------------------------

Begin block 0x265
prev = {'0x259'}, next = {'0xa6d'}
----------------------------------
Block 0x265
0x267: v267(0x26e) = CONST 
0x26a: v26a(0xa6d) = CONST 
0x26d: JUMP v26a(0xa6d)
----------------------------------

Begin block 0x26e
prev = {'0xa6d'}, next = {}
----------------------------------
Block 0x26e
0x26f: v26f(0x40) = CONST 
0x271: v271 = MLOAD v26f(0x40)
0x275: MSTORE v271 va70
0x276: v276(0x20) = CONST 
0x278: v278 = ADD v276(0x20) v271
0x27c: v27c(0x40) = CONST 
0x27e: v27e = MLOAD v27c(0x40)
0x281: v281 = SUB v278 v27e
0x283: RETURN v27e v281
----------------------------------

Begin block 0x284
prev = {}, next = {'0x28c', '0x290'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x284
0x285: v285 = CALLVALUE 
0x287: v287 = ISZERO v285
0x288: v288(0x290) = CONST 
0x28b: JUMPI v288(0x290) v287
----------------------------------

Begin block 0x28c
prev = {'0x284'}, next = {}
----------------------------------
Block 0x28c
0x28c: v28c(0x0) = CONST 
0x28f: REVERT v28c(0x0) v28c(0x0)
----------------------------------

Begin block 0x290
prev = {'0x284'}, next = {'0xa73'}
----------------------------------
Block 0x290
0x292: v292(0x2ef) = CONST 
0x295: v295(0x4) = CONST 
0x298: v298 = CALLDATASIZE 
0x299: v299 = SUB v298 v295(0x4)
0x29b: v29b = ADD v295(0x4) v299
0x29f: v29f = CALLDATALOAD v295(0x4)
0x2a0: v2a0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2b5: v2b5 = AND v2a0(0xffffffffffffffffffffffffffffffffffffffff) v29f
0x2b7: v2b7(0x20) = CONST 
0x2b9: v2b9(0x24) = ADD v2b7(0x20) v295(0x4)
0x2bf: v2bf = CALLDATALOAD v2b9(0x24)
0x2c0: v2c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2d5: v2d5 = AND v2c0(0xffffffffffffffffffffffffffffffffffffffff) v2bf
0x2d7: v2d7(0x20) = CONST 
0x2d9: v2d9(0x44) = ADD v2d7(0x20) v2b9(0x24)
0x2df: v2df = CALLDATALOAD v2d9(0x44)
0x2e1: v2e1(0x20) = CONST 
0x2e3: v2e3(0x64) = ADD v2e1(0x20) v2d9(0x44)
0x2eb: v2eb(0xa73) = CONST 
0x2ee: JUMP v2eb(0xa73)
----------------------------------

Begin block 0x2ef
prev = {'0xb95'}, next = {}
----------------------------------
Block 0x2ef
0x2f0: v2f0(0x40) = CONST 
0x2f2: v2f2 = MLOAD v2f0(0x40)
0x2f5: v2f5 = ISZERO vb96(0x1)
0x2f6: v2f6 = ISZERO v2f5
0x2f7: v2f7 = ISZERO v2f6
0x2f8: v2f8 = ISZERO v2f7
0x2fa: MSTORE v2f2 v2f8
0x2fb: v2fb(0x20) = CONST 
0x2fd: v2fd = ADD v2fb(0x20) v2f2
0x301: v301(0x40) = CONST 
0x303: v303 = MLOAD v301(0x40)
0x306: v306 = SUB v2fd v303
0x308: RETURN v303 v306
----------------------------------

Begin block 0x309
prev = {}, next = {'0x311', '0x315'}
----------------------------------
function decimals()()
Block 0x309
0x30a: v30a = CALLVALUE 
0x30c: v30c = ISZERO v30a
0x30d: v30d(0x315) = CONST 
0x310: JUMPI v30d(0x315) v30c
----------------------------------

Begin block 0x311
prev = {'0x309'}, next = {}
----------------------------------
Block 0x311
0x311: v311(0x0) = CONST 
0x314: REVERT v311(0x0) v311(0x0)
----------------------------------

Begin block 0x315
prev = {'0x309'}, next = {'0xba0'}
----------------------------------
Block 0x315
0x317: v317(0x31e) = CONST 
0x31a: v31a(0xba0) = CONST 
0x31d: JUMP v31a(0xba0)
----------------------------------

Begin block 0x31e
prev = {'0xba0'}, next = {}
----------------------------------
Block 0x31e
0x31f: v31f(0x40) = CONST 
0x321: v321 = MLOAD v31f(0x40)
0x324: v324(0xff) = CONST 
0x326: v326 = AND v324(0xff) vbb0
0x327: v327(0xff) = CONST 
0x329: v329 = AND v327(0xff) v326
0x32b: MSTORE v321 v329
0x32c: v32c(0x20) = CONST 
0x32e: v32e = ADD v32c(0x20) v321
0x332: v332(0x40) = CONST 
0x334: v334 = MLOAD v332(0x40)
0x337: v337 = SUB v32e v334
0x339: RETURN v334 v337
----------------------------------

Begin block 0x33a
prev = {}, next = {'0x346', '0x342'}
----------------------------------
function burn(uint256)()
Block 0x33a
0x33b: v33b = CALLVALUE 
0x33d: v33d = ISZERO v33b
0x33e: v33e(0x346) = CONST 
0x341: JUMPI v33e(0x346) v33d
----------------------------------

Begin block 0x342
prev = {'0x33a'}, next = {}
----------------------------------
Block 0x342
0x342: v342(0x0) = CONST 
0x345: REVERT v342(0x0) v342(0x0)
----------------------------------

Begin block 0x346
prev = {'0x33a'}, next = {'0xbb3'}
----------------------------------
Block 0x346
0x348: v348(0x365) = CONST 
0x34b: v34b(0x4) = CONST 
0x34e: v34e = CALLDATASIZE 
0x34f: v34f = SUB v34e v34b(0x4)
0x351: v351 = ADD v34b(0x4) v34f
0x355: v355 = CALLDATALOAD v34b(0x4)
0x357: v357(0x20) = CONST 
0x359: v359(0x24) = ADD v357(0x20) v34b(0x4)
0x361: v361(0xbb3) = CONST 
0x364: JUMP v361(0xbb3)
----------------------------------

Begin block 0x365
prev = {'0xc03'}, next = {}
----------------------------------
Block 0x365
0x366: v366(0x40) = CONST 
0x368: v368 = MLOAD v366(0x40)
0x36b: v36b = ISZERO vcaf(0x1)
0x36c: v36c = ISZERO v36b
0x36d: v36d = ISZERO v36c
0x36e: v36e = ISZERO v36d
0x370: MSTORE v368 v36e
0x371: v371(0x20) = CONST 
0x373: v373 = ADD v371(0x20) v368
0x377: v377(0x40) = CONST 
0x379: v379 = MLOAD v377(0x40)
0x37c: v37c = SUB v373 v379
0x37e: RETURN v379 v37c
----------------------------------

Begin block 0x37f
prev = {}, next = {'0x38b', '0x387'}
----------------------------------
function sellPrice()()
Block 0x37f
0x380: v380 = CALLVALUE 
0x382: v382 = ISZERO v380
0x383: v383(0x38b) = CONST 
0x386: JUMPI v383(0x38b) v382
----------------------------------

Begin block 0x387
prev = {'0x37f'}, next = {}
----------------------------------
Block 0x387
0x387: v387(0x0) = CONST 
0x38a: REVERT v387(0x0) v387(0x0)
----------------------------------

Begin block 0x38b
prev = {'0x37f'}, next = {'0xcb7'}
----------------------------------
Block 0x38b
0x38d: v38d(0x394) = CONST 
0x390: v390(0xcb7) = CONST 
0x393: JUMP v390(0xcb7)
----------------------------------

Begin block 0x394
prev = {'0xcb7'}, next = {}
----------------------------------
Block 0x394
0x395: v395(0x40) = CONST 
0x397: v397 = MLOAD v395(0x40)
0x39b: MSTORE v397 vcba
0x39c: v39c(0x20) = CONST 
0x39e: v39e = ADD v39c(0x20) v397
0x3a2: v3a2(0x40) = CONST 
0x3a4: v3a4 = MLOAD v3a2(0x40)
0x3a7: v3a7 = SUB v39e v3a4
0x3a9: RETURN v3a4 v3a7
----------------------------------

Begin block 0x3aa
prev = {}, next = {'0x3b2', '0x3b6'}
----------------------------------
function balanceOf(address)()
Block 0x3aa
0x3ab: v3ab = CALLVALUE 
0x3ad: v3ad = ISZERO v3ab
0x3ae: v3ae(0x3b6) = CONST 
0x3b1: JUMPI v3ae(0x3b6) v3ad
----------------------------------

Begin block 0x3b2
prev = {'0x3aa'}, next = {}
----------------------------------
Block 0x3b2
0x3b2: v3b2(0x0) = CONST 
0x3b5: REVERT v3b2(0x0) v3b2(0x0)
----------------------------------

Begin block 0x3b6
prev = {'0x3aa'}, next = {'0xcbd'}
----------------------------------
Block 0x3b6
0x3b8: v3b8(0x3eb) = CONST 
0x3bb: v3bb(0x4) = CONST 
0x3be: v3be = CALLDATASIZE 
0x3bf: v3bf = SUB v3be v3bb(0x4)
0x3c1: v3c1 = ADD v3bb(0x4) v3bf
0x3c5: v3c5 = CALLDATALOAD v3bb(0x4)
0x3c6: v3c6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3db: v3db = AND v3c6(0xffffffffffffffffffffffffffffffffffffffff) v3c5
0x3dd: v3dd(0x20) = CONST 
0x3df: v3df(0x24) = ADD v3dd(0x20) v3bb(0x4)
0x3e7: v3e7(0xcbd) = CONST 
0x3ea: JUMP v3e7(0xcbd)
----------------------------------

Begin block 0x3eb
prev = {'0xcbd'}, next = {}
----------------------------------
Block 0x3eb
0x3ec: v3ec(0x40) = CONST 
0x3ee: v3ee = MLOAD v3ec(0x40)
0x3f2: MSTORE v3ee vcd2
0x3f3: v3f3(0x20) = CONST 
0x3f5: v3f5 = ADD v3f3(0x20) v3ee
0x3f9: v3f9(0x40) = CONST 
0x3fb: v3fb = MLOAD v3f9(0x40)
0x3fe: v3fe = SUB v3f5 v3fb
0x400: RETURN v3fb v3fe
----------------------------------

Begin block 0x401
prev = {}, next = {'0x40d', '0x409'}
----------------------------------
function mintToken(address,uint256)()
Block 0x401
0x402: v402 = CALLVALUE 
0x404: v404 = ISZERO v402
0x405: v405(0x40d) = CONST 
0x408: JUMPI v405(0x40d) v404
----------------------------------

Begin block 0x409
prev = {'0x401'}, next = {}
----------------------------------
Block 0x409
0x409: v409(0x0) = CONST 
0x40c: REVERT v409(0x0) v409(0x0)
----------------------------------

Begin block 0x40d
prev = {'0x401'}, next = {'0xcd5'}
----------------------------------
Block 0x40d
0x40f: v40f(0x44c) = CONST 
0x412: v412(0x4) = CONST 
0x415: v415 = CALLDATASIZE 
0x416: v416 = SUB v415 v412(0x4)
0x418: v418 = ADD v412(0x4) v416
0x41c: v41c = CALLDATALOAD v412(0x4)
0x41d: v41d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x432: v432 = AND v41d(0xffffffffffffffffffffffffffffffffffffffff) v41c
0x434: v434(0x20) = CONST 
0x436: v436(0x24) = ADD v434(0x20) v412(0x4)
0x43c: v43c = CALLDATALOAD v436(0x24)
0x43e: v43e(0x20) = CONST 
0x440: v440(0x44) = ADD v43e(0x20) v436(0x24)
0x448: v448(0xcd5) = CONST 
0x44b: JUMP v448(0xcd5)
----------------------------------

Begin block 0x44c
prev = {'0xd30'}, next = {}
----------------------------------
Block 0x44c
0x44d: STOP 
----------------------------------

Begin block 0x44e
prev = {}, next = {'0x456', '0x45a'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x44e
0x44f: v44f = CALLVALUE 
0x451: v451 = ISZERO v44f
0x452: v452(0x45a) = CONST 
0x455: JUMPI v452(0x45a) v451
----------------------------------

Begin block 0x456
prev = {'0x44e'}, next = {}
----------------------------------
Block 0x456
0x456: v456(0x0) = CONST 
0x459: REVERT v456(0x0) v456(0x0)
----------------------------------

Begin block 0x45a
prev = {'0x44e'}, next = {'0xe5c'}
----------------------------------
Block 0x45a
0x45c: v45c(0x499) = CONST 
0x45f: v45f(0x4) = CONST 
0x462: v462 = CALLDATASIZE 
0x463: v463 = SUB v462 v45f(0x4)
0x465: v465 = ADD v45f(0x4) v463
0x469: v469 = CALLDATALOAD v45f(0x4)
0x46a: v46a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x47f: v47f = AND v46a(0xffffffffffffffffffffffffffffffffffffffff) v469
0x481: v481(0x20) = CONST 
0x483: v483(0x24) = ADD v481(0x20) v45f(0x4)
0x489: v489 = CALLDATALOAD v483(0x24)
0x48b: v48b(0x20) = CONST 
0x48d: v48d(0x44) = ADD v48b(0x20) v483(0x24)
0x495: v495(0xe5c) = CONST 
0x498: JUMP v495(0xe5c)
----------------------------------

Begin block 0x499
prev = {'0xf37'}, next = {}
----------------------------------
Block 0x499
0x49a: v49a(0x40) = CONST 
0x49c: v49c = MLOAD v49a(0x40)
0x49f: v49f = ISZERO v106d(0x1)
0x4a0: v4a0 = ISZERO v49f
0x4a1: v4a1 = ISZERO v4a0
0x4a2: v4a2 = ISZERO v4a1
0x4a4: MSTORE v49c v4a2
0x4a5: v4a5(0x20) = CONST 
0x4a7: v4a7 = ADD v4a5(0x20) v49c
0x4ab: v4ab(0x40) = CONST 
0x4ad: v4ad = MLOAD v4ab(0x40)
0x4b0: v4b0 = SUB v4a7 v4ad
0x4b2: RETURN v4ad v4b0
----------------------------------

Begin block 0x4b3
prev = {}, next = {'0x4bb', '0x4bf'}
----------------------------------
function buyPrice()()
Block 0x4b3
0x4b4: v4b4 = CALLVALUE 
0x4b6: v4b6 = ISZERO v4b4
0x4b7: v4b7(0x4bf) = CONST 
0x4ba: JUMPI v4b7(0x4bf) v4b6
----------------------------------

Begin block 0x4bb
prev = {'0x4b3'}, next = {}
----------------------------------
Block 0x4bb
0x4bb: v4bb(0x0) = CONST 
0x4be: REVERT v4bb(0x0) v4bb(0x0)
----------------------------------

Begin block 0x4bf
prev = {'0x4b3'}, next = {'0x1076'}
----------------------------------
Block 0x4bf
0x4c1: v4c1(0x4c8) = CONST 
0x4c4: v4c4(0x1076) = CONST 
0x4c7: JUMP v4c4(0x1076)
----------------------------------

Begin block 0x4c8
prev = {'0x1076'}, next = {}
----------------------------------
Block 0x4c8
0x4c9: v4c9(0x40) = CONST 
0x4cb: v4cb = MLOAD v4c9(0x40)
0x4cf: MSTORE v4cb v1079
0x4d0: v4d0(0x20) = CONST 
0x4d2: v4d2 = ADD v4d0(0x20) v4cb
0x4d6: v4d6(0x40) = CONST 
0x4d8: v4d8 = MLOAD v4d6(0x40)
0x4db: v4db = SUB v4d2 v4d8
0x4dd: RETURN v4d8 v4db
----------------------------------

Begin block 0x4de
prev = {}, next = {'0x4e6', '0x4ea'}
----------------------------------
function owner()()
Block 0x4de
0x4df: v4df = CALLVALUE 
0x4e1: v4e1 = ISZERO v4df
0x4e2: v4e2(0x4ea) = CONST 
0x4e5: JUMPI v4e2(0x4ea) v4e1
----------------------------------

Begin block 0x4e6
prev = {'0x4de'}, next = {}
----------------------------------
Block 0x4e6
0x4e6: v4e6(0x0) = CONST 
0x4e9: REVERT v4e6(0x0) v4e6(0x0)
----------------------------------

Begin block 0x4ea
prev = {'0x4de'}, next = {'0x107c'}
----------------------------------
Block 0x4ea
0x4ec: v4ec(0x4f3) = CONST 
0x4ef: v4ef(0x107c) = CONST 
0x4f2: JUMP v4ef(0x107c)
----------------------------------

Begin block 0x4f3
prev = {'0x107c'}, next = {}
----------------------------------
Block 0x4f3
0x4f4: v4f4(0x40) = CONST 
0x4f6: v4f6 = MLOAD v4f4(0x40)
0x4f9: v4f9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x50e: v50e = AND v4f9(0xffffffffffffffffffffffffffffffffffffffff) v109e
0x50f: v50f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x524: v524 = AND v50f(0xffffffffffffffffffffffffffffffffffffffff) v50e
0x526: MSTORE v4f6 v524
0x527: v527(0x20) = CONST 
0x529: v529 = ADD v527(0x20) v4f6
0x52d: v52d(0x40) = CONST 
0x52f: v52f = MLOAD v52d(0x40)
0x532: v532 = SUB v529 v52f
0x534: RETURN v52f v532
----------------------------------

Begin block 0x535
prev = {}, next = {'0x53d', '0x541'}
----------------------------------
function symbol()()
Block 0x535
0x536: v536 = CALLVALUE 
0x538: v538 = ISZERO v536
0x539: v539(0x541) = CONST 
0x53c: JUMPI v539(0x541) v538
----------------------------------

Begin block 0x53d
prev = {'0x535'}, next = {}
----------------------------------
Block 0x53d
0x53d: v53d(0x0) = CONST 
0x540: REVERT v53d(0x0) v53d(0x0)
----------------------------------

Begin block 0x541
prev = {'0x535'}, next = {'0x10a1'}
----------------------------------
Block 0x541
0x543: v543(0x54a) = CONST 
0x546: v546(0x10a1) = CONST 
0x549: JUMP v546(0x10a1)
----------------------------------

Begin block 0x54a
prev = {'0x1137'}, next = {'0x56f'}
----------------------------------
Block 0x54a
0x54b: v54b(0x40) = CONST 
0x54d: v54d = MLOAD v54b(0x40)
0x550: v550(0x20) = CONST 
0x552: v552 = ADD v550(0x20) v54d
0x555: v555 = SUB v552 v54d
0x557: MSTORE v54d v555
0x55b: v55b = MLOAD v10c6
0x55d: MSTORE v552 v55b
0x55e: v55e(0x20) = CONST 
0x560: v560 = ADD v55e(0x20) v552
0x564: v564 = MLOAD v10c6
0x566: v566(0x20) = CONST 
0x568: v568 = ADD v566(0x20) v10c6
0x56d: v56d(0x0) = CONST 
----------------------------------

Begin block 0x56f
prev = {'0x578', '0x54a'}, next = {'0x578', '0x58a'}
----------------------------------
Block 0x56f
0x56f_0x0: v56f_0 = PHI v56d(0x0) v583
0x572: v572 = LT v56f_0 v564
0x573: v573 = ISZERO v572
0x574: v574(0x58a) = CONST 
0x577: JUMPI v574(0x58a) v573
----------------------------------

Begin block 0x578
prev = {'0x56f'}, next = {'0x56f'}
----------------------------------
Block 0x578
0x578_0x0: v578_0 = PHI v56d(0x0) v583
0x57a: v57a = ADD v568 v578_0
0x57b: v57b = MLOAD v57a
0x57e: v57e = ADD v560 v578_0
0x57f: MSTORE v57e v57b
0x580: v580(0x20) = CONST 
0x583: v583 = ADD v578_0 v580(0x20)
0x586: v586(0x56f) = CONST 
0x589: JUMP v586(0x56f)
----------------------------------

Begin block 0x58a
prev = {'0x56f'}, next = {'0x59e', '0x5b7'}
----------------------------------
Block 0x58a
0x593: v593 = ADD v564 v560
0x595: v595(0x1f) = CONST 
0x597: v597 = AND v595(0x1f) v564
0x599: v599 = ISZERO v597
0x59a: v59a(0x5b7) = CONST 
0x59d: JUMPI v59a(0x5b7) v599
----------------------------------

Begin block 0x59e
prev = {'0x58a'}, next = {'0x5b7'}
----------------------------------
Block 0x59e
0x5a0: v5a0 = SUB v593 v597
0x5a2: v5a2 = MLOAD v5a0
0x5a3: v5a3(0x1) = CONST 
0x5a6: v5a6(0x20) = CONST 
0x5a8: v5a8 = SUB v5a6(0x20) v597
0x5a9: v5a9(0x100) = CONST 
0x5ac: v5ac = EXP v5a9(0x100) v5a8
0x5ad: v5ad = SUB v5ac v5a3(0x1)
0x5ae: v5ae = NOT v5ad
0x5af: v5af = AND v5ae v5a2
0x5b1: MSTORE v5a0 v5af
0x5b2: v5b2(0x20) = CONST 
0x5b4: v5b4 = ADD v5b2(0x20) v5a0
----------------------------------

Begin block 0x5b7
prev = {'0x59e', '0x58a'}, next = {}
----------------------------------
Block 0x5b7
0x5b7_0x1: v5b7_1 = PHI v593 v5b4
0x5bd: v5bd(0x40) = CONST 
0x5bf: v5bf = MLOAD v5bd(0x40)
0x5c2: v5c2 = SUB v5b7_1 v5bf
0x5c4: RETURN v5bf v5c2
----------------------------------

Begin block 0x5c5
prev = {}, next = {'0x113f'}
----------------------------------
function buy()()
Block 0x5c5
0x5c6: v5c6(0x5cd) = CONST 
0x5c9: v5c9(0x113f) = CONST 
0x5cc: JUMP v5c9(0x113f)
----------------------------------

Begin block 0x5cd
prev = {'0x115c'}, next = {}
----------------------------------
Block 0x5cd
0x5ce: STOP 
----------------------------------

Begin block 0x5cf
prev = {}, next = {'0x5db', '0x5d7'}
----------------------------------
function transfer(address,uint256)()
Block 0x5cf
0x5d0: v5d0 = CALLVALUE 
0x5d2: v5d2 = ISZERO v5d0
0x5d3: v5d3(0x5db) = CONST 
0x5d6: JUMPI v5d3(0x5db) v5d2
----------------------------------

Begin block 0x5d7
prev = {'0x5cf'}, next = {}
----------------------------------
Block 0x5d7
0x5d7: v5d7(0x0) = CONST 
0x5da: REVERT v5d7(0x0) v5d7(0x0)
----------------------------------

Begin block 0x5db
prev = {'0x5cf'}, next = {'0x115f'}
----------------------------------
Block 0x5db
0x5dd: v5dd(0x61a) = CONST 
0x5e0: v5e0(0x4) = CONST 
0x5e3: v5e3 = CALLDATASIZE 
0x5e4: v5e4 = SUB v5e3 v5e0(0x4)
0x5e6: v5e6 = ADD v5e0(0x4) v5e4
0x5ea: v5ea = CALLDATALOAD v5e0(0x4)
0x5eb: v5eb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x600: v600 = AND v5eb(0xffffffffffffffffffffffffffffffffffffffff) v5ea
0x602: v602(0x20) = CONST 
0x604: v604(0x24) = ADD v602(0x20) v5e0(0x4)
0x60a: v60a = CALLDATALOAD v604(0x24)
0x60c: v60c(0x20) = CONST 
0x60e: v60e(0x44) = ADD v60c(0x20) v604(0x24)
0x616: v616(0x115f) = CONST 
0x619: JUMP v616(0x115f)
----------------------------------

Begin block 0x61a
prev = {'0x116c'}, next = {}
----------------------------------
Block 0x61a
0x61b: v61b(0x40) = CONST 
0x61d: v61d = MLOAD v61b(0x40)
0x620: v620 = ISZERO v116d(0x1)
0x621: v621 = ISZERO v620
0x622: v622 = ISZERO v621
0x623: v623 = ISZERO v622
0x625: MSTORE v61d v623
0x626: v626(0x20) = CONST 
0x628: v628 = ADD v626(0x20) v61d
0x62c: v62c(0x40) = CONST 
0x62e: v62e = MLOAD v62c(0x40)
0x631: v631 = SUB v628 v62e
0x633: RETURN v62e v631
----------------------------------

Begin block 0x634
prev = {}, next = {'0x63c', '0x640'}
----------------------------------
function frozenAccount(address)()
Block 0x634
0x635: v635 = CALLVALUE 
0x637: v637 = ISZERO v635
0x638: v638(0x640) = CONST 
0x63b: JUMPI v638(0x640) v637
----------------------------------

Begin block 0x63c
prev = {'0x634'}, next = {}
----------------------------------
Block 0x63c
0x63c: v63c(0x0) = CONST 
0x63f: REVERT v63c(0x0) v63c(0x0)
----------------------------------

Begin block 0x640
prev = {'0x634'}, next = {'0x1176'}
----------------------------------
Block 0x640
0x642: v642(0x675) = CONST 
0x645: v645(0x4) = CONST 
0x648: v648 = CALLDATASIZE 
0x649: v649 = SUB v648 v645(0x4)
0x64b: v64b = ADD v645(0x4) v649
0x64f: v64f = CALLDATALOAD v645(0x4)
0x650: v650(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x665: v665 = AND v650(0xffffffffffffffffffffffffffffffffffffffff) v64f
0x667: v667(0x20) = CONST 
0x669: v669(0x24) = ADD v667(0x20) v645(0x4)
0x671: v671(0x1176) = CONST 
0x674: JUMP v671(0x1176)
----------------------------------

Begin block 0x675
prev = {'0x1176'}, next = {}
----------------------------------
Block 0x675
0x676: v676(0x40) = CONST 
0x678: v678 = MLOAD v676(0x40)
0x67b: v67b = ISZERO v1193
0x67c: v67c = ISZERO v67b
0x67d: v67d = ISZERO v67c
0x67e: v67e = ISZERO v67d
0x680: MSTORE v678 v67e
0x681: v681(0x20) = CONST 
0x683: v683 = ADD v681(0x20) v678
0x687: v687(0x40) = CONST 
0x689: v689 = MLOAD v687(0x40)
0x68c: v68c = SUB v683 v689
0x68e: RETURN v689 v68c
----------------------------------

Begin block 0x68f
prev = {}, next = {'0x697', '0x69b'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x68f
0x690: v690 = CALLVALUE 
0x692: v692 = ISZERO v690
0x693: v693(0x69b) = CONST 
0x696: JUMPI v693(0x69b) v692
----------------------------------

Begin block 0x697
prev = {'0x68f'}, next = {}
----------------------------------
Block 0x697
0x697: v697(0x0) = CONST 
0x69a: REVERT v697(0x0) v697(0x0)
----------------------------------

Begin block 0x69b
prev = {'0x68f'}, next = {'0x1196'}
----------------------------------
Block 0x69b
0x69d: v69d(0x720) = CONST 
0x6a0: v6a0(0x4) = CONST 
0x6a3: v6a3 = CALLDATASIZE 
0x6a4: v6a4 = SUB v6a3 v6a0(0x4)
0x6a6: v6a6 = ADD v6a0(0x4) v6a4
0x6aa: v6aa = CALLDATALOAD v6a0(0x4)
0x6ab: v6ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c0: v6c0 = AND v6ab(0xffffffffffffffffffffffffffffffffffffffff) v6aa
0x6c2: v6c2(0x20) = CONST 
0x6c4: v6c4(0x24) = ADD v6c2(0x20) v6a0(0x4)
0x6ca: v6ca = CALLDATALOAD v6c4(0x24)
0x6cc: v6cc(0x20) = CONST 
0x6ce: v6ce(0x44) = ADD v6cc(0x20) v6c4(0x24)
0x6d4: v6d4 = CALLDATALOAD v6ce(0x44)
0x6d6: v6d6(0x20) = CONST 
0x6d8: v6d8(0x64) = ADD v6d6(0x20) v6ce(0x44)
0x6db: v6db = ADD v6a0(0x4) v6d4
0x6dd: v6dd = CALLDATALOAD v6db
0x6df: v6df(0x20) = CONST 
0x6e1: v6e1 = ADD v6df(0x20) v6db
0x6e5: v6e5(0x1f) = CONST 
0x6e7: v6e7 = ADD v6e5(0x1f) v6dd
0x6e8: v6e8(0x20) = CONST 
0x6ec: v6ec = DIV v6e7 v6e8(0x20)
0x6ed: v6ed = MUL v6ec v6e8(0x20)
0x6ee: v6ee(0x20) = CONST 
0x6f0: v6f0 = ADD v6ee(0x20) v6ed
0x6f1: v6f1(0x40) = CONST 
0x6f3: v6f3 = MLOAD v6f1(0x40)
0x6f6: v6f6 = ADD v6f3 v6f0
0x6f7: v6f7(0x40) = CONST 
0x6f9: MSTORE v6f7(0x40) v6f6
0x701: MSTORE v6f3 v6dd
0x702: v702(0x20) = CONST 
0x704: v704 = ADD v702(0x20) v6f3
0x70a: CALLDATACOPY v704 v6e1 v6dd
0x70c: v70c = ADD v704 v6dd
0x71c: v71c(0x1196) = CONST 
0x71f: JUMP v71c(0x1196)
----------------------------------

Begin block 0x720
prev = {'0x1311'}, next = {}
----------------------------------
Block 0x720
0x720_0x0: v720_0 = PHI v1197(0x0) v1308(0x1)
0x721: v721(0x40) = CONST 
0x723: v723 = MLOAD v721(0x40)
0x726: v726 = ISZERO v720_0
0x727: v727 = ISZERO v726
0x728: v728 = ISZERO v727
0x729: v729 = ISZERO v728
0x72b: MSTORE v723 v729
0x72c: v72c(0x20) = CONST 
0x72e: v72e = ADD v72c(0x20) v723
0x732: v732(0x40) = CONST 
0x734: v734 = MLOAD v732(0x40)
0x737: v737 = SUB v72e v734
0x739: RETURN v734 v737
----------------------------------

Begin block 0x73a
prev = {}, next = {'0x742', '0x746'}
----------------------------------
function allowance(address,address)()
Block 0x73a
0x73b: v73b = CALLVALUE 
0x73d: v73d = ISZERO v73b
0x73e: v73e(0x746) = CONST 
0x741: JUMPI v73e(0x746) v73d
----------------------------------

Begin block 0x742
prev = {'0x73a'}, next = {}
----------------------------------
Block 0x742
0x742: v742(0x0) = CONST 
0x745: REVERT v742(0x0) v742(0x0)
----------------------------------

Begin block 0x746
prev = {'0x73a'}, next = {'0x1319'}
----------------------------------
Block 0x746
0x748: v748(0x79b) = CONST 
0x74b: v74b(0x4) = CONST 
0x74e: v74e = CALLDATASIZE 
0x74f: v74f = SUB v74e v74b(0x4)
0x751: v751 = ADD v74b(0x4) v74f
0x755: v755 = CALLDATALOAD v74b(0x4)
0x756: v756(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x76b: v76b = AND v756(0xffffffffffffffffffffffffffffffffffffffff) v755
0x76d: v76d(0x20) = CONST 
0x76f: v76f(0x24) = ADD v76d(0x20) v74b(0x4)
0x775: v775 = CALLDATALOAD v76f(0x24)
0x776: v776(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78b: v78b = AND v776(0xffffffffffffffffffffffffffffffffffffffff) v775
0x78d: v78d(0x20) = CONST 
0x78f: v78f(0x44) = ADD v78d(0x20) v76f(0x24)
0x797: v797(0x1319) = CONST 
0x79a: JUMP v797(0x1319)
----------------------------------

Begin block 0x79b
prev = {'0x1319'}, next = {}
----------------------------------
Block 0x79b
0x79c: v79c(0x40) = CONST 
0x79e: v79e = MLOAD v79c(0x40)
0x7a2: MSTORE v79e v133b
0x7a3: v7a3(0x20) = CONST 
0x7a5: v7a5 = ADD v7a3(0x20) v79e
0x7a9: v7a9(0x40) = CONST 
0x7ab: v7ab = MLOAD v7a9(0x40)
0x7ae: v7ae = SUB v7a5 v7ab
0x7b0: RETURN v7ab v7ae
----------------------------------

Begin block 0x7b1
prev = {}, next = {'0x7b9', '0x7bd'}
----------------------------------
function sell(uint256)()
Block 0x7b1
0x7b2: v7b2 = CALLVALUE 
0x7b4: v7b4 = ISZERO v7b2
0x7b5: v7b5(0x7bd) = CONST 
0x7b8: JUMPI v7b5(0x7bd) v7b4
----------------------------------

Begin block 0x7b9
prev = {'0x7b1'}, next = {}
----------------------------------
Block 0x7b9
0x7b9: v7b9(0x0) = CONST 
0x7bc: REVERT v7b9(0x0) v7b9(0x0)
----------------------------------

Begin block 0x7bd
prev = {'0x7b1'}, next = {'0x133e'}
----------------------------------
Block 0x7bd
0x7bf: v7bf(0x7dc) = CONST 
0x7c2: v7c2(0x4) = CONST 
0x7c5: v7c5 = CALLDATASIZE 
0x7c6: v7c6 = SUB v7c5 v7c2(0x4)
0x7c8: v7c8 = ADD v7c2(0x4) v7c6
0x7cc: v7cc = CALLDATALOAD v7c2(0x4)
0x7ce: v7ce(0x20) = CONST 
0x7d0: v7d0(0x24) = ADD v7ce(0x20) v7c2(0x4)
0x7d8: v7d8(0x133e) = CONST 
0x7db: JUMP v7d8(0x133e)
----------------------------------

Begin block 0x7dc
prev = {'0x13c2'}, next = {}
----------------------------------
Block 0x7dc
0x7dd: STOP 
----------------------------------

Begin block 0x7de
prev = {}, next = {'0x7e6', '0x7ea'}
----------------------------------
function freezeAccount(address,bool)()
Block 0x7de
0x7df: v7df = CALLVALUE 
0x7e1: v7e1 = ISZERO v7df
0x7e2: v7e2(0x7ea) = CONST 
0x7e5: JUMPI v7e2(0x7ea) v7e1
----------------------------------

Begin block 0x7e6
prev = {'0x7de'}, next = {}
----------------------------------
Block 0x7e6
0x7e6: v7e6(0x0) = CONST 
0x7e9: REVERT v7e6(0x0) v7e6(0x0)
----------------------------------

Begin block 0x7ea
prev = {'0x7de'}, next = {'0x13c7'}
----------------------------------
Block 0x7ea
0x7ec: v7ec(0x82b) = CONST 
0x7ef: v7ef(0x4) = CONST 
0x7f2: v7f2 = CALLDATASIZE 
0x7f3: v7f3 = SUB v7f2 v7ef(0x4)
0x7f5: v7f5 = ADD v7ef(0x4) v7f3
0x7f9: v7f9 = CALLDATALOAD v7ef(0x4)
0x7fa: v7fa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x80f: v80f = AND v7fa(0xffffffffffffffffffffffffffffffffffffffff) v7f9
0x811: v811(0x20) = CONST 
0x813: v813(0x24) = ADD v811(0x20) v7ef(0x4)
0x819: v819 = CALLDATALOAD v813(0x24)
0x81a: v81a = ISZERO v819
0x81b: v81b = ISZERO v81a
0x81d: v81d(0x20) = CONST 
0x81f: v81f(0x44) = ADD v81d(0x20) v813(0x24)
0x827: v827(0x13c7) = CONST 
0x82a: JUMP v827(0x13c7)
----------------------------------

Begin block 0x82b
prev = {'0x1422'}, next = {}
----------------------------------
Block 0x82b
0x82c: STOP 
----------------------------------

Begin block 0x82d
prev = {}, next = {'0x835', '0x839'}
----------------------------------
function transferOwnership(address)()
Block 0x82d
0x82e: v82e = CALLVALUE 
0x830: v830 = ISZERO v82e
0x831: v831(0x839) = CONST 
0x834: JUMPI v831(0x839) v830
----------------------------------

Begin block 0x835
prev = {'0x82d'}, next = {}
----------------------------------
Block 0x835
0x835: v835(0x0) = CONST 
0x838: REVERT v835(0x0) v835(0x0)
----------------------------------

Begin block 0x839
prev = {'0x82d'}, next = {'0x14ec'}
----------------------------------
Block 0x839
0x83b: v83b(0x86e) = CONST 
0x83e: v83e(0x4) = CONST 
0x841: v841 = CALLDATASIZE 
0x842: v842 = SUB v841 v83e(0x4)
0x844: v844 = ADD v83e(0x4) v842
0x848: v848 = CALLDATALOAD v83e(0x4)
0x849: v849(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x85e: v85e = AND v849(0xffffffffffffffffffffffffffffffffffffffff) v848
0x860: v860(0x20) = CONST 
0x862: v862(0x24) = ADD v860(0x20) v83e(0x4)
0x86a: v86a(0x14ec) = CONST 
0x86d: JUMP v86a(0x14ec)
----------------------------------

Begin block 0x86e
prev = {'0x1547'}, next = {}
----------------------------------
Block 0x86e
0x86f: STOP 
----------------------------------

Begin block 0x870
prev = {'0x139'}, next = {'0x8cb', '0x8c7'}
----------------------------------
Block 0x870
0x871: v871(0x0) = CONST 
0x875: v875 = SLOAD v871(0x0)
0x877: v877(0x100) = CONST 
0x87a: v87a(0x1) = EXP v877(0x100) v871(0x0)
0x87c: v87c = DIV v875 v87a(0x1)
0x87d: v87d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x892: v892 = AND v87d(0xffffffffffffffffffffffffffffffffffffffff) v87c
0x893: v893(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a8: v8a8 = AND v893(0xffffffffffffffffffffffffffffffffffffffff) v892
0x8a9: v8a9 = CALLER 
0x8aa: v8aa(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8bf: v8bf = AND v8aa(0xffffffffffffffffffffffffffffffffffffffff) v8a9
0x8c0: v8c0 = EQ v8bf v8a8
0x8c1: v8c1 = ISZERO v8c0
0x8c2: v8c2 = ISZERO v8c1
0x8c3: v8c3(0x8cb) = CONST 
0x8c6: JUMPI v8c3(0x8cb) v8c2
----------------------------------

Begin block 0x8c7
prev = {'0x870'}, next = {}
----------------------------------
Block 0x8c7
0x8c7: v8c7(0x0) = CONST 
0x8ca: REVERT v8c7(0x0) v8c7(0x0)
----------------------------------

Begin block 0x8cb
prev = {'0x870'}, next = {'0x162'}
----------------------------------
Block 0x8cb
0x8cd: v8cd(0x7) = CONST 
0x8d1: SSTORE v8cd(0x7) v148
0x8d4: v8d4(0x8) = CONST 
0x8d8: SSTORE v8d4(0x8) v152
0x8dc: JUMP v13b(0x162)
----------------------------------

Begin block 0x8dd
prev = {'0x170'}, next = {'0x973', '0x92d'}
----------------------------------
Block 0x8dd
0x8de: v8de(0x1) = CONST 
0x8e1: v8e1 = SLOAD v8de(0x1)
0x8e2: v8e2(0x1) = CONST 
0x8e5: v8e5(0x1) = CONST 
0x8e7: v8e7 = AND v8e5(0x1) v8e1
0x8e8: v8e8 = ISZERO v8e7
0x8e9: v8e9(0x100) = CONST 
0x8ec: v8ec = MUL v8e9(0x100) v8e8
0x8ed: v8ed = SUB v8ec v8e2(0x1)
0x8ee: v8ee = AND v8ed v8e1
0x8ef: v8ef(0x2) = CONST 
0x8f2: v8f2 = DIV v8ee v8ef(0x2)
0x8f4: v8f4(0x1f) = CONST 
0x8f6: v8f6 = ADD v8f4(0x1f) v8f2
0x8f7: v8f7(0x20) = CONST 
0x8fb: v8fb = DIV v8f6 v8f7(0x20)
0x8fc: v8fc = MUL v8fb v8f7(0x20)
0x8fd: v8fd(0x20) = CONST 
0x8ff: v8ff = ADD v8fd(0x20) v8fc
0x900: v900(0x40) = CONST 
0x902: v902 = MLOAD v900(0x40)
0x905: v905 = ADD v902 v8ff
0x906: v906(0x40) = CONST 
0x908: MSTORE v906(0x40) v905
0x90f: MSTORE v902 v8f2
0x910: v910(0x20) = CONST 
0x912: v912 = ADD v910(0x20) v902
0x915: v915 = SLOAD v8de(0x1)
0x916: v916(0x1) = CONST 
0x919: v919(0x1) = CONST 
0x91b: v91b = AND v919(0x1) v915
0x91c: v91c = ISZERO v91b
0x91d: v91d(0x100) = CONST 
0x920: v920 = MUL v91d(0x100) v91c
0x921: v921 = SUB v920 v916(0x1)
0x922: v922 = AND v921 v915
0x923: v923(0x2) = CONST 
0x926: v926 = DIV v922 v923(0x2)
0x928: v928 = ISZERO v926
0x929: v929(0x973) = CONST 
0x92c: JUMPI v929(0x973) v928
----------------------------------

Begin block 0x92d
prev = {'0x8dd'}, next = {'0x935', '0x948'}
----------------------------------
Block 0x92d
0x92e: v92e(0x1f) = CONST 
0x930: v930 = LT v92e(0x1f) v926
0x931: v931(0x948) = CONST 
0x934: JUMPI v931(0x948) v930
----------------------------------

Begin block 0x935
prev = {'0x92d'}, next = {'0x973'}
----------------------------------
Block 0x935
0x935: v935(0x100) = CONST 
0x93a: v93a = SLOAD v8de(0x1)
0x93b: v93b = DIV v93a v935(0x100)
0x93c: v93c = MUL v93b v935(0x100)
0x93e: MSTORE v912 v93c
0x940: v940(0x20) = CONST 
0x942: v942 = ADD v940(0x20) v912
0x944: v944(0x973) = CONST 
0x947: JUMP v944(0x973)
----------------------------------

Begin block 0x948
prev = {'0x92d'}, next = {'0x956'}
----------------------------------
Block 0x948
0x94a: v94a = ADD v912 v926
0x94d: v94d(0x0) = CONST 
0x94f: MSTORE v94d(0x0) v8de(0x1)
0x950: v950(0x20) = CONST 
0x952: v952(0x0) = CONST 
0x954: v954 = SHA3 v952(0x0) v950(0x20)
----------------------------------

Begin block 0x956
prev = {'0x948', '0x956'}, next = {'0x956', '0x96a'}
----------------------------------
Block 0x956
0x956_0x0: v956_0 = PHI v912 v962
0x956_0x1: v956_1 = PHI v954 v95e
0x958: v958 = SLOAD v956_1
0x95a: MSTORE v956_0 v958
0x95c: v95c(0x1) = CONST 
0x95e: v95e = ADD v95c(0x1) v956_1
0x960: v960(0x20) = CONST 
0x962: v962 = ADD v960(0x20) v956_0
0x965: v965 = GT v94a v962
0x966: v966(0x956) = CONST 
0x969: JUMPI v966(0x956) v965
----------------------------------

Begin block 0x96a
prev = {'0x956'}, next = {'0x973'}
----------------------------------
Block 0x96a
0x96c: v96c = SUB v962 v94a
0x96d: v96d(0x1f) = CONST 
0x96f: v96f = AND v96d(0x1f) v96c
0x971: v971 = ADD v94a v96f
----------------------------------

Begin block 0x973
prev = {'0x935', '0x8dd', '0x96a'}, next = {'0x179'}
----------------------------------
Block 0x973
0x97a: JUMP v172(0x179)
----------------------------------

Begin block 0x97b
prev = {}, next = {}
----------------------------------
function 0x97b(v97barg0, v97barg1, v97barg2)
Block 0x97b
0x97c: v97c(0x0) = CONST 
0x97f: v97f(0x6) = CONST 
0x981: v981(0x0) = CONST 
0x983: v983 = CALLER 
0x984: v984(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x999: v999 = AND v984(0xffffffffffffffffffffffffffffffffffffffff) v983
0x99a: v99a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9af: v9af = AND v99a(0xffffffffffffffffffffffffffffffffffffffff) v999
0x9b1: MSTORE v981(0x0) v9af
0x9b2: v9b2(0x20) = CONST 
0x9b4: v9b4(0x20) = ADD v9b2(0x20) v981(0x0)
0x9b7: MSTORE v9b4(0x20) v97f(0x6)
0x9b8: v9b8(0x20) = CONST 
0x9ba: v9ba(0x40) = ADD v9b8(0x20) v9b4(0x20)
0x9bb: v9bb(0x0) = CONST 
0x9bd: v9bd = SHA3 v9bb(0x0) v9ba(0x40)
0x9be: v9be(0x0) = CONST 
0x9c1: v9c1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d6: v9d6 = AND v9c1(0xffffffffffffffffffffffffffffffffffffffff) v97barg1
0x9d7: v9d7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ec: v9ec = AND v9d7(0xffffffffffffffffffffffffffffffffffffffff) v9d6
0x9ee: MSTORE v9be(0x0) v9ec
0x9ef: v9ef(0x20) = CONST 
0x9f1: v9f1(0x20) = ADD v9ef(0x20) v9be(0x0)
0x9f4: MSTORE v9f1(0x20) v9bd
0x9f5: v9f5(0x20) = CONST 
0x9f7: v9f7(0x40) = ADD v9f5(0x20) v9f1(0x20)
0x9f8: v9f8(0x0) = CONST 
0x9fa: v9fa = SHA3 v9f8(0x0) v9f7(0x40)
0x9fd: SSTORE v9fa v97barg0
0xa00: va00(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa15: va15 = AND va00(0xffffffffffffffffffffffffffffffffffffffff) v97barg1
0xa16: va16 = CALLER 
0xa17: va17(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa2c: va2c = AND va17(0xffffffffffffffffffffffffffffffffffffffff) va16
0xa2d: va2d(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa4f: va4f(0x40) = CONST 
0xa51: va51 = MLOAD va4f(0x40)
0xa55: MSTORE va51 v97barg0
0xa56: va56(0x20) = CONST 
0xa58: va58 = ADD va56(0x20) va51
0xa5c: va5c(0x40) = CONST 
0xa5e: va5e = MLOAD va5c(0x40)
0xa61: va61 = SUB va58 va5e
0xa63: LOG3 va5e va61 va2d(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va2c va15
0xa64: va64(0x1) = CONST 
0xa6c: RETURNPRIVATE v97barg2 va64(0x1)
----------------------------------

Begin block 0xa6d
prev = {'0x265'}, next = {'0x26e'}
----------------------------------
Block 0xa6d
0xa6e: va6e(0x4) = CONST 
0xa70: va70 = SLOAD va6e(0x4)
0xa72: JUMP v267(0x26e)
----------------------------------

Begin block 0xa73
prev = {'0x290'}, next = {'0xafc', '0xb00'}
----------------------------------
Block 0xa73
0xa74: va74(0x0) = CONST 
0xa76: va76(0x6) = CONST 
0xa78: va78(0x0) = CONST 
0xa7b: va7b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa90: va90 = AND va7b(0xffffffffffffffffffffffffffffffffffffffff) v2b5
0xa91: va91(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa6: vaa6 = AND va91(0xffffffffffffffffffffffffffffffffffffffff) va90
0xaa8: MSTORE va78(0x0) vaa6
0xaa9: vaa9(0x20) = CONST 
0xaab: vaab(0x20) = ADD vaa9(0x20) va78(0x0)
0xaae: MSTORE vaab(0x20) va76(0x6)
0xaaf: vaaf(0x20) = CONST 
0xab1: vab1(0x40) = ADD vaaf(0x20) vaab(0x20)
0xab2: vab2(0x0) = CONST 
0xab4: vab4 = SHA3 vab2(0x0) vab1(0x40)
0xab5: vab5(0x0) = CONST 
0xab7: vab7 = CALLER 
0xab8: vab8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xacd: vacd = AND vab8(0xffffffffffffffffffffffffffffffffffffffff) vab7
0xace: vace(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xae3: vae3 = AND vace(0xffffffffffffffffffffffffffffffffffffffff) vacd
0xae5: MSTORE vab5(0x0) vae3
0xae6: vae6(0x20) = CONST 
0xae8: vae8(0x20) = ADD vae6(0x20) vab5(0x0)
0xaeb: MSTORE vae8(0x20) vab4
0xaec: vaec(0x20) = CONST 
0xaee: vaee(0x40) = ADD vaec(0x20) vae8(0x20)
0xaef: vaef(0x0) = CONST 
0xaf1: vaf1 = SHA3 vaef(0x0) vaee(0x40)
0xaf2: vaf2 = SLOAD vaf1
0xaf4: vaf4 = GT v2df vaf2
0xaf5: vaf5 = ISZERO vaf4
0xaf6: vaf6 = ISZERO vaf5
0xaf7: vaf7 = ISZERO vaf6
0xaf8: vaf8(0xb00) = CONST 
0xafb: JUMPI vaf8(0xb00) vaf7
----------------------------------

Begin block 0xafc
prev = {'0xa73'}, next = {}
----------------------------------
Block 0xafc
0xafc: vafc(0x0) = CONST 
0xaff: REVERT vafc(0x0) vafc(0x0)
----------------------------------

Begin block 0xb00
prev = {'0xa73'}, next = {'0xb95'}
----------------------------------
Block 0xb00
0xb02: vb02(0x6) = CONST 
0xb04: vb04(0x0) = CONST 
0xb07: vb07(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb1c: vb1c = AND vb07(0xffffffffffffffffffffffffffffffffffffffff) v2b5
0xb1d: vb1d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb32: vb32 = AND vb1d(0xffffffffffffffffffffffffffffffffffffffff) vb1c
0xb34: MSTORE vb04(0x0) vb32
0xb35: vb35(0x20) = CONST 
0xb37: vb37(0x20) = ADD vb35(0x20) vb04(0x0)
0xb3a: MSTORE vb37(0x20) vb02(0x6)
0xb3b: vb3b(0x20) = CONST 
0xb3d: vb3d(0x40) = ADD vb3b(0x20) vb37(0x20)
0xb3e: vb3e(0x0) = CONST 
0xb40: vb40 = SHA3 vb3e(0x0) vb3d(0x40)
0xb41: vb41(0x0) = CONST 
0xb43: vb43 = CALLER 
0xb44: vb44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb59: vb59 = AND vb44(0xffffffffffffffffffffffffffffffffffffffff) vb43
0xb5a: vb5a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb6f: vb6f = AND vb5a(0xffffffffffffffffffffffffffffffffffffffff) vb59
0xb71: MSTORE vb41(0x0) vb6f
0xb72: vb72(0x20) = CONST 
0xb74: vb74(0x20) = ADD vb72(0x20) vb41(0x0)
0xb77: MSTORE vb74(0x20) vb40
0xb78: vb78(0x20) = CONST 
0xb7a: vb7a(0x40) = ADD vb78(0x20) vb74(0x20)
0xb7b: vb7b(0x0) = CONST 
0xb7d: vb7d = SHA3 vb7b(0x0) vb7a(0x40)
0xb7e: vb7e(0x0) = CONST 
0xb82: vb82 = SLOAD vb7d
0xb83: vb83 = SUB vb82 v2df
0xb89: SSTORE vb7d vb83
0xb8b: vb8b(0xb95) = CONST 
0xb91: vb91(0x158a) = CONST 
0xb94: CALLPRIVATE vb91(0x158a) v2df v2d5 v2b5 vb8b(0xb95)
----------------------------------

Begin block 0xb95
prev = {'0xb00'}, next = {'0x2ef'}
----------------------------------
Block 0xb95
0xb96: vb96(0x1) = CONST 
0xb9f: JUMP v292(0x2ef)
----------------------------------

Begin block 0xba0
prev = {'0x315'}, next = {'0x31e'}
----------------------------------
Block 0xba0
0xba1: vba1(0x3) = CONST 
0xba3: vba3(0x0) = CONST 
0xba6: vba6 = SLOAD vba1(0x3)
0xba8: vba8(0x100) = CONST 
0xbab: vbab(0x1) = EXP vba8(0x100) vba3(0x0)
0xbad: vbad = DIV vba6 vbab(0x1)
0xbae: vbae(0xff) = CONST 
0xbb0: vbb0 = AND vbae(0xff) vbad
0xbb2: JUMP v317(0x31e)
----------------------------------

Begin block 0xbb3
prev = {'0x346'}, next = {'0xbff', '0xc03'}
----------------------------------
Block 0xbb3
0xbb4: vbb4(0x0) = CONST 
0xbb7: vbb7(0x5) = CONST 
0xbb9: vbb9(0x0) = CONST 
0xbbb: vbbb = CALLER 
0xbbc: vbbc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbd1: vbd1 = AND vbbc(0xffffffffffffffffffffffffffffffffffffffff) vbbb
0xbd2: vbd2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbe7: vbe7 = AND vbd2(0xffffffffffffffffffffffffffffffffffffffff) vbd1
0xbe9: MSTORE vbb9(0x0) vbe7
0xbea: vbea(0x20) = CONST 
0xbec: vbec(0x20) = ADD vbea(0x20) vbb9(0x0)
0xbef: MSTORE vbec(0x20) vbb7(0x5)
0xbf0: vbf0(0x20) = CONST 
0xbf2: vbf2(0x40) = ADD vbf0(0x20) vbec(0x20)
0xbf3: vbf3(0x0) = CONST 
0xbf5: vbf5 = SHA3 vbf3(0x0) vbf2(0x40)
0xbf6: vbf6 = SLOAD vbf5
0xbf7: vbf7 = LT vbf6 v355
0xbf8: vbf8 = ISZERO vbf7
0xbf9: vbf9 = ISZERO vbf8
0xbfa: vbfa = ISZERO vbf9
0xbfb: vbfb(0xc03) = CONST 
0xbfe: JUMPI vbfb(0xc03) vbfa
----------------------------------

Begin block 0xbff
prev = {'0xbb3'}, next = {}
----------------------------------
Block 0xbff
0xbff: vbff(0x0) = CONST 
0xc02: REVERT vbff(0x0) vbff(0x0)
----------------------------------

Begin block 0xc03
prev = {'0xbb3'}, next = {'0x365'}
----------------------------------
Block 0xc03
0xc05: vc05(0x5) = CONST 
0xc07: vc07(0x0) = CONST 
0xc09: vc09 = CALLER 
0xc0a: vc0a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc1f: vc1f = AND vc0a(0xffffffffffffffffffffffffffffffffffffffff) vc09
0xc20: vc20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc35: vc35 = AND vc20(0xffffffffffffffffffffffffffffffffffffffff) vc1f
0xc37: MSTORE vc07(0x0) vc35
0xc38: vc38(0x20) = CONST 
0xc3a: vc3a(0x20) = ADD vc38(0x20) vc07(0x0)
0xc3d: MSTORE vc3a(0x20) vc05(0x5)
0xc3e: vc3e(0x20) = CONST 
0xc40: vc40(0x40) = ADD vc3e(0x20) vc3a(0x20)
0xc41: vc41(0x0) = CONST 
0xc43: vc43 = SHA3 vc41(0x0) vc40(0x40)
0xc44: vc44(0x0) = CONST 
0xc48: vc48 = SLOAD vc43
0xc49: vc49 = SUB vc48 v355
0xc4f: SSTORE vc43 vc49
0xc52: vc52(0x4) = CONST 
0xc54: vc54(0x0) = CONST 
0xc58: vc58 = SLOAD vc52(0x4)
0xc59: vc59 = SUB vc58 v355
0xc5f: SSTORE vc52(0x4) vc59
0xc61: vc61 = CALLER 
0xc62: vc62(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc77: vc77 = AND vc62(0xffffffffffffffffffffffffffffffffffffffff) vc61
0xc78: vc78(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0xc9a: vc9a(0x40) = CONST 
0xc9c: vc9c = MLOAD vc9a(0x40)
0xca0: MSTORE vc9c v355
0xca1: vca1(0x20) = CONST 
0xca3: vca3 = ADD vca1(0x20) vc9c
0xca7: vca7(0x40) = CONST 
0xca9: vca9 = MLOAD vca7(0x40)
0xcac: vcac = SUB vca3 vca9
0xcae: LOG2 vca9 vcac vc78(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) vc77
0xcaf: vcaf(0x1) = CONST 
0xcb6: JUMP v348(0x365)
----------------------------------

Begin block 0xcb7
prev = {'0x38b'}, next = {'0x394'}
----------------------------------
Block 0xcb7
0xcb8: vcb8(0x7) = CONST 
0xcba: vcba = SLOAD vcb8(0x7)
0xcbc: JUMP v38d(0x394)
----------------------------------

Begin block 0xcbd
prev = {'0x3b6'}, next = {'0x3eb'}
----------------------------------
Block 0xcbd
0xcbe: vcbe(0x5) = CONST 
0xcc0: vcc0(0x20) = CONST 
0xcc2: MSTORE vcc0(0x20) vcbe(0x5)
0xcc4: vcc4(0x0) = CONST 
0xcc6: MSTORE vcc4(0x0) v3db
0xcc7: vcc7(0x40) = CONST 
0xcc9: vcc9(0x0) = CONST 
0xccb: vccb = SHA3 vcc9(0x0) vcc7(0x40)
0xccc: vccc(0x0) = CONST 
0xcd2: vcd2 = SLOAD vccb
0xcd4: JUMP v3b8(0x3eb)
----------------------------------

Begin block 0xcd5
prev = {'0x40d'}, next = {'0xd2c', '0xd30'}
----------------------------------
Block 0xcd5
0xcd6: vcd6(0x0) = CONST 
0xcda: vcda = SLOAD vcd6(0x0)
0xcdc: vcdc(0x100) = CONST 
0xcdf: vcdf(0x1) = EXP vcdc(0x100) vcd6(0x0)
0xce1: vce1 = DIV vcda vcdf(0x1)
0xce2: vce2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcf7: vcf7 = AND vce2(0xffffffffffffffffffffffffffffffffffffffff) vce1
0xcf8: vcf8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd0d: vd0d = AND vcf8(0xffffffffffffffffffffffffffffffffffffffff) vcf7
0xd0e: vd0e = CALLER 
0xd0f: vd0f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd24: vd24 = AND vd0f(0xffffffffffffffffffffffffffffffffffffffff) vd0e
0xd25: vd25 = EQ vd24 vd0d
0xd26: vd26 = ISZERO vd25
0xd27: vd27 = ISZERO vd26
0xd28: vd28(0xd30) = CONST 
0xd2b: JUMPI vd28(0xd30) vd27
----------------------------------

Begin block 0xd2c
prev = {'0xcd5'}, next = {}
----------------------------------
Block 0xd2c
0xd2c: vd2c(0x0) = CONST 
0xd2f: REVERT vd2c(0x0) vd2c(0x0)
----------------------------------

Begin block 0xd30
prev = {'0xcd5'}, next = {'0x44c'}
----------------------------------
Block 0xd30
0xd32: vd32(0x5) = CONST 
0xd34: vd34(0x0) = CONST 
0xd37: vd37(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4c: vd4c = AND vd37(0xffffffffffffffffffffffffffffffffffffffff) v432
0xd4d: vd4d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd62: vd62 = AND vd4d(0xffffffffffffffffffffffffffffffffffffffff) vd4c
0xd64: MSTORE vd34(0x0) vd62
0xd65: vd65(0x20) = CONST 
0xd67: vd67(0x20) = ADD vd65(0x20) vd34(0x0)
0xd6a: MSTORE vd67(0x20) vd32(0x5)
0xd6b: vd6b(0x20) = CONST 
0xd6d: vd6d(0x40) = ADD vd6b(0x20) vd67(0x20)
0xd6e: vd6e(0x0) = CONST 
0xd70: vd70 = SHA3 vd6e(0x0) vd6d(0x40)
0xd71: vd71(0x0) = CONST 
0xd75: vd75 = SLOAD vd70
0xd76: vd76 = ADD vd75 v43c
0xd7c: SSTORE vd70 vd76
0xd7f: vd7f(0x4) = CONST 
0xd81: vd81(0x0) = CONST 
0xd85: vd85 = SLOAD vd7f(0x4)
0xd86: vd86 = ADD vd85 v43c
0xd8c: SSTORE vd7f(0x4) vd86
0xd8e: vd8e = ADDRESS 
0xd8f: vd8f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xda4: vda4 = AND vd8f(0xffffffffffffffffffffffffffffffffffffffff) vd8e
0xda5: vda5(0x0) = CONST 
0xda7: vda7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdbc: vdbc(0x0) = AND vda7(0xffffffffffffffffffffffffffffffffffffffff) vda5(0x0)
0xdbd: vdbd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xddf: vddf(0x40) = CONST 
0xde1: vde1 = MLOAD vddf(0x40)
0xde5: MSTORE vde1 v43c
0xde6: vde6(0x20) = CONST 
0xde8: vde8 = ADD vde6(0x20) vde1
0xdec: vdec(0x40) = CONST 
0xdee: vdee = MLOAD vdec(0x40)
0xdf1: vdf1 = SUB vde8 vdee
0xdf3: LOG3 vdee vdf1 vdbd(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vdbc(0x0) vda4
0xdf5: vdf5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe0a: ve0a = AND vdf5(0xffffffffffffffffffffffffffffffffffffffff) v432
0xe0b: ve0b = ADDRESS 
0xe0c: ve0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe21: ve21 = AND ve0c(0xffffffffffffffffffffffffffffffffffffffff) ve0b
0xe22: ve22(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xe44: ve44(0x40) = CONST 
0xe46: ve46 = MLOAD ve44(0x40)
0xe4a: MSTORE ve46 v43c
0xe4b: ve4b(0x20) = CONST 
0xe4d: ve4d = ADD ve4b(0x20) ve46
0xe51: ve51(0x40) = CONST 
0xe53: ve53 = MLOAD ve51(0x40)
0xe56: ve56 = SUB ve4d ve53
0xe58: LOG3 ve53 ve56 ve22(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) ve21 ve0a
0xe5b: JUMP v40f(0x44c)
----------------------------------

Begin block 0xe5c
prev = {'0x45a'}, next = {'0xeac', '0xea8'}
----------------------------------
Block 0xe5c
0xe5d: ve5d(0x0) = CONST 
0xe60: ve60(0x5) = CONST 
0xe62: ve62(0x0) = CONST 
0xe65: ve65(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe7a: ve7a = AND ve65(0xffffffffffffffffffffffffffffffffffffffff) v47f
0xe7b: ve7b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe90: ve90 = AND ve7b(0xffffffffffffffffffffffffffffffffffffffff) ve7a
0xe92: MSTORE ve62(0x0) ve90
0xe93: ve93(0x20) = CONST 
0xe95: ve95(0x20) = ADD ve93(0x20) ve62(0x0)
0xe98: MSTORE ve95(0x20) ve60(0x5)
0xe99: ve99(0x20) = CONST 
0xe9b: ve9b(0x40) = ADD ve99(0x20) ve95(0x20)
0xe9c: ve9c(0x0) = CONST 
0xe9e: ve9e = SHA3 ve9c(0x0) ve9b(0x40)
0xe9f: ve9f = SLOAD ve9e
0xea0: vea0 = LT ve9f v489
0xea1: vea1 = ISZERO vea0
0xea2: vea2 = ISZERO vea1
0xea3: vea3 = ISZERO vea2
0xea4: vea4(0xeac) = CONST 
0xea7: JUMPI vea4(0xeac) vea3
----------------------------------

Begin block 0xea8
prev = {'0xe5c'}, next = {}
----------------------------------
Block 0xea8
0xea8: vea8(0x0) = CONST 
0xeab: REVERT vea8(0x0) vea8(0x0)
----------------------------------

Begin block 0xeac
prev = {'0xe5c'}, next = {'0xf33', '0xf37'}
----------------------------------
Block 0xeac
0xead: vead(0x6) = CONST 
0xeaf: veaf(0x0) = CONST 
0xeb2: veb2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xec7: vec7 = AND veb2(0xffffffffffffffffffffffffffffffffffffffff) v47f
0xec8: vec8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xedd: vedd = AND vec8(0xffffffffffffffffffffffffffffffffffffffff) vec7
0xedf: MSTORE veaf(0x0) vedd
0xee0: vee0(0x20) = CONST 
0xee2: vee2(0x20) = ADD vee0(0x20) veaf(0x0)
0xee5: MSTORE vee2(0x20) vead(0x6)
0xee6: vee6(0x20) = CONST 
0xee8: vee8(0x40) = ADD vee6(0x20) vee2(0x20)
0xee9: vee9(0x0) = CONST 
0xeeb: veeb = SHA3 vee9(0x0) vee8(0x40)
0xeec: veec(0x0) = CONST 
0xeee: veee = CALLER 
0xeef: veef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf04: vf04 = AND veef(0xffffffffffffffffffffffffffffffffffffffff) veee
0xf05: vf05(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf1a: vf1a = AND vf05(0xffffffffffffffffffffffffffffffffffffffff) vf04
0xf1c: MSTORE veec(0x0) vf1a
0xf1d: vf1d(0x20) = CONST 
0xf1f: vf1f(0x20) = ADD vf1d(0x20) veec(0x0)
0xf22: MSTORE vf1f(0x20) veeb
0xf23: vf23(0x20) = CONST 
0xf25: vf25(0x40) = ADD vf23(0x20) vf1f(0x20)
0xf26: vf26(0x0) = CONST 
0xf28: vf28 = SHA3 vf26(0x0) vf25(0x40)
0xf29: vf29 = SLOAD vf28
0xf2b: vf2b = GT v489 vf29
0xf2c: vf2c = ISZERO vf2b
0xf2d: vf2d = ISZERO vf2c
0xf2e: vf2e = ISZERO vf2d
0xf2f: vf2f(0xf37) = CONST 
0xf32: JUMPI vf2f(0xf37) vf2e
----------------------------------

Begin block 0xf33
prev = {'0xeac'}, next = {}
----------------------------------
Block 0xf33
0xf33: vf33(0x0) = CONST 
0xf36: REVERT vf33(0x0) vf33(0x0)
----------------------------------

Begin block 0xf37
prev = {'0xeac'}, next = {'0x499'}
----------------------------------
Block 0xf37
0xf39: vf39(0x5) = CONST 
0xf3b: vf3b(0x0) = CONST 
0xf3e: vf3e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf53: vf53 = AND vf3e(0xffffffffffffffffffffffffffffffffffffffff) v47f
0xf54: vf54(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf69: vf69 = AND vf54(0xffffffffffffffffffffffffffffffffffffffff) vf53
0xf6b: MSTORE vf3b(0x0) vf69
0xf6c: vf6c(0x20) = CONST 
0xf6e: vf6e(0x20) = ADD vf6c(0x20) vf3b(0x0)
0xf71: MSTORE vf6e(0x20) vf39(0x5)
0xf72: vf72(0x20) = CONST 
0xf74: vf74(0x40) = ADD vf72(0x20) vf6e(0x20)
0xf75: vf75(0x0) = CONST 
0xf77: vf77 = SHA3 vf75(0x0) vf74(0x40)
0xf78: vf78(0x0) = CONST 
0xf7c: vf7c = SLOAD vf77
0xf7d: vf7d = SUB vf7c v489
0xf83: SSTORE vf77 vf7d
0xf86: vf86(0x6) = CONST 
0xf88: vf88(0x0) = CONST 
0xf8b: vf8b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa0: vfa0 = AND vf8b(0xffffffffffffffffffffffffffffffffffffffff) v47f
0xfa1: vfa1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfb6: vfb6 = AND vfa1(0xffffffffffffffffffffffffffffffffffffffff) vfa0
0xfb8: MSTORE vf88(0x0) vfb6
0xfb9: vfb9(0x20) = CONST 
0xfbb: vfbb(0x20) = ADD vfb9(0x20) vf88(0x0)
0xfbe: MSTORE vfbb(0x20) vf86(0x6)
0xfbf: vfbf(0x20) = CONST 
0xfc1: vfc1(0x40) = ADD vfbf(0x20) vfbb(0x20)
0xfc2: vfc2(0x0) = CONST 
0xfc4: vfc4 = SHA3 vfc2(0x0) vfc1(0x40)
0xfc5: vfc5(0x0) = CONST 
0xfc7: vfc7 = CALLER 
0xfc8: vfc8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfdd: vfdd = AND vfc8(0xffffffffffffffffffffffffffffffffffffffff) vfc7
0xfde: vfde(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xff3: vff3 = AND vfde(0xffffffffffffffffffffffffffffffffffffffff) vfdd
0xff5: MSTORE vfc5(0x0) vff3
0xff6: vff6(0x20) = CONST 
0xff8: vff8(0x20) = ADD vff6(0x20) vfc5(0x0)
0xffb: MSTORE vff8(0x20) vfc4
0xffc: vffc(0x20) = CONST 
0xffe: vffe(0x40) = ADD vffc(0x20) vff8(0x20)
0xfff: vfff(0x0) = CONST 
0x1001: v1001 = SHA3 vfff(0x0) vffe(0x40)
0x1002: v1002(0x0) = CONST 
0x1006: v1006 = SLOAD v1001
0x1007: v1007 = SUB v1006 v489
0x100d: SSTORE v1001 v1007
0x1010: v1010(0x4) = CONST 
0x1012: v1012(0x0) = CONST 
0x1016: v1016 = SLOAD v1010(0x4)
0x1017: v1017 = SUB v1016 v489
0x101d: SSTORE v1010(0x4) v1017
0x1020: v1020(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1035: v1035 = AND v1020(0xffffffffffffffffffffffffffffffffffffffff) v47f
0x1036: v1036(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x1058: v1058(0x40) = CONST 
0x105a: v105a = MLOAD v1058(0x40)
0x105e: MSTORE v105a v489
0x105f: v105f(0x20) = CONST 
0x1061: v1061 = ADD v105f(0x20) v105a
0x1065: v1065(0x40) = CONST 
0x1067: v1067 = MLOAD v1065(0x40)
0x106a: v106a = SUB v1061 v1067
0x106c: LOG2 v1067 v106a v1036(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v1035
0x106d: v106d(0x1) = CONST 
0x1075: JUMP v45c(0x499)
----------------------------------

Begin block 0x1076
prev = {'0x4bf'}, next = {'0x4c8'}
----------------------------------
Block 0x1076
0x1077: v1077(0x8) = CONST 
0x1079: v1079 = SLOAD v1077(0x8)
0x107b: JUMP v4c1(0x4c8)
----------------------------------

Begin block 0x107c
prev = {'0x4ea'}, next = {'0x4f3'}
----------------------------------
Block 0x107c
0x107d: v107d(0x0) = CONST 
0x1081: v1081 = SLOAD v107d(0x0)
0x1083: v1083(0x100) = CONST 
0x1086: v1086(0x1) = EXP v1083(0x100) v107d(0x0)
0x1088: v1088 = DIV v1081 v1086(0x1)
0x1089: v1089(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x109e: v109e = AND v1089(0xffffffffffffffffffffffffffffffffffffffff) v1088
0x10a0: JUMP v4ec(0x4f3)
----------------------------------

Begin block 0x10a1
prev = {'0x541'}, next = {'0x10f1', '0x1137'}
----------------------------------
Block 0x10a1
0x10a2: v10a2(0x2) = CONST 
0x10a5: v10a5 = SLOAD v10a2(0x2)
0x10a6: v10a6(0x1) = CONST 
0x10a9: v10a9(0x1) = CONST 
0x10ab: v10ab = AND v10a9(0x1) v10a5
0x10ac: v10ac = ISZERO v10ab
0x10ad: v10ad(0x100) = CONST 
0x10b0: v10b0 = MUL v10ad(0x100) v10ac
0x10b1: v10b1 = SUB v10b0 v10a6(0x1)
0x10b2: v10b2 = AND v10b1 v10a5
0x10b3: v10b3(0x2) = CONST 
0x10b6: v10b6 = DIV v10b2 v10b3(0x2)
0x10b8: v10b8(0x1f) = CONST 
0x10ba: v10ba = ADD v10b8(0x1f) v10b6
0x10bb: v10bb(0x20) = CONST 
0x10bf: v10bf = DIV v10ba v10bb(0x20)
0x10c0: v10c0 = MUL v10bf v10bb(0x20)
0x10c1: v10c1(0x20) = CONST 
0x10c3: v10c3 = ADD v10c1(0x20) v10c0
0x10c4: v10c4(0x40) = CONST 
0x10c6: v10c6 = MLOAD v10c4(0x40)
0x10c9: v10c9 = ADD v10c6 v10c3
0x10ca: v10ca(0x40) = CONST 
0x10cc: MSTORE v10ca(0x40) v10c9
0x10d3: MSTORE v10c6 v10b6
0x10d4: v10d4(0x20) = CONST 
0x10d6: v10d6 = ADD v10d4(0x20) v10c6
0x10d9: v10d9 = SLOAD v10a2(0x2)
0x10da: v10da(0x1) = CONST 
0x10dd: v10dd(0x1) = CONST 
0x10df: v10df = AND v10dd(0x1) v10d9
0x10e0: v10e0 = ISZERO v10df
0x10e1: v10e1(0x100) = CONST 
0x10e4: v10e4 = MUL v10e1(0x100) v10e0
0x10e5: v10e5 = SUB v10e4 v10da(0x1)
0x10e6: v10e6 = AND v10e5 v10d9
0x10e7: v10e7(0x2) = CONST 
0x10ea: v10ea = DIV v10e6 v10e7(0x2)
0x10ec: v10ec = ISZERO v10ea
0x10ed: v10ed(0x1137) = CONST 
0x10f0: JUMPI v10ed(0x1137) v10ec
----------------------------------

Begin block 0x10f1
prev = {'0x10a1'}, next = {'0x110c', '0x10f9'}
----------------------------------
Block 0x10f1
0x10f2: v10f2(0x1f) = CONST 
0x10f4: v10f4 = LT v10f2(0x1f) v10ea
0x10f5: v10f5(0x110c) = CONST 
0x10f8: JUMPI v10f5(0x110c) v10f4
----------------------------------

Begin block 0x10f9
prev = {'0x10f1'}, next = {'0x1137'}
----------------------------------
Block 0x10f9
0x10f9: v10f9(0x100) = CONST 
0x10fe: v10fe = SLOAD v10a2(0x2)
0x10ff: v10ff = DIV v10fe v10f9(0x100)
0x1100: v1100 = MUL v10ff v10f9(0x100)
0x1102: MSTORE v10d6 v1100
0x1104: v1104(0x20) = CONST 
0x1106: v1106 = ADD v1104(0x20) v10d6
0x1108: v1108(0x1137) = CONST 
0x110b: JUMP v1108(0x1137)
----------------------------------

Begin block 0x110c
prev = {'0x10f1'}, next = {'0x111a'}
----------------------------------
Block 0x110c
0x110e: v110e = ADD v10d6 v10ea
0x1111: v1111(0x0) = CONST 
0x1113: MSTORE v1111(0x0) v10a2(0x2)
0x1114: v1114(0x20) = CONST 
0x1116: v1116(0x0) = CONST 
0x1118: v1118 = SHA3 v1116(0x0) v1114(0x20)
----------------------------------

Begin block 0x111a
prev = {'0x110c', '0x111a'}, next = {'0x112e', '0x111a'}
----------------------------------
Block 0x111a
0x111a_0x0: v111a_0 = PHI v10d6 v1126
0x111a_0x1: v111a_1 = PHI v1118 v1122
0x111c: v111c = SLOAD v111a_1
0x111e: MSTORE v111a_0 v111c
0x1120: v1120(0x1) = CONST 
0x1122: v1122 = ADD v1120(0x1) v111a_1
0x1124: v1124(0x20) = CONST 
0x1126: v1126 = ADD v1124(0x20) v111a_0
0x1129: v1129 = GT v110e v1126
0x112a: v112a(0x111a) = CONST 
0x112d: JUMPI v112a(0x111a) v1129
----------------------------------

Begin block 0x112e
prev = {'0x111a'}, next = {'0x1137'}
----------------------------------
Block 0x112e
0x1130: v1130 = SUB v1126 v110e
0x1131: v1131(0x1f) = CONST 
0x1133: v1133 = AND v1131(0x1f) v1130
0x1135: v1135 = ADD v110e v1133
----------------------------------

Begin block 0x1137
prev = {'0x112e', '0x10f9', '0x10a1'}, next = {'0x54a'}
----------------------------------
Block 0x1137
0x113e: JUMP v543(0x54a)
----------------------------------

Begin block 0x113f
prev = {'0x5c5'}, next = {'0x114d', '0x114e'}
----------------------------------
Block 0x113f
0x1140: v1140(0x0) = CONST 
0x1142: v1142(0x8) = CONST 
0x1144: v1144 = SLOAD v1142(0x8)
0x1145: v1145 = CALLVALUE 
0x1147: v1147 = ISZERO v1144
0x1148: v1148 = ISZERO v1147
0x1149: v1149(0x114e) = CONST 
0x114c: JUMPI v1149(0x114e) v1148
----------------------------------

Begin block 0x114d
prev = {'0x113f'}, next = {}
----------------------------------
Block 0x114d
0x114d: THROW 
----------------------------------

Begin block 0x114e
prev = {'0x113f'}, next = {'0x115c'}
----------------------------------
Block 0x114e
0x114f: v114f = DIV v1145 v1144
0x1152: v1152(0x115c) = CONST 
0x1155: v1155 = ADDRESS 
0x1156: v1156 = CALLER 
0x1158: v1158(0x158a) = CONST 
0x115b: CALLPRIVATE v1158(0x158a) v114f v1156 v1155 v1152(0x115c)
----------------------------------

Begin block 0x115c
prev = {'0x114e'}, next = {'0x5cd'}
----------------------------------
Block 0x115c
0x115e: JUMP v5c6(0x5cd)
----------------------------------

Begin block 0x115f
prev = {'0x5db'}, next = {'0x116c'}
----------------------------------
Block 0x115f
0x1160: v1160(0x0) = CONST 
0x1162: v1162(0x116c) = CONST 
0x1165: v1165 = CALLER 
0x1168: v1168(0x158a) = CONST 
0x116b: CALLPRIVATE v1168(0x158a) v60a v600 v1165 v1162(0x116c)
----------------------------------

Begin block 0x116c
prev = {'0x115f'}, next = {'0x61a'}
----------------------------------
Block 0x116c
0x116d: v116d(0x1) = CONST 
0x1175: JUMP v5dd(0x61a)
----------------------------------

Begin block 0x1176
prev = {'0x640'}, next = {'0x675'}
----------------------------------
Block 0x1176
0x1177: v1177(0x9) = CONST 
0x1179: v1179(0x20) = CONST 
0x117b: MSTORE v1179(0x20) v1177(0x9)
0x117d: v117d(0x0) = CONST 
0x117f: MSTORE v117d(0x0) v665
0x1180: v1180(0x40) = CONST 
0x1182: v1182(0x0) = CONST 
0x1184: v1184 = SHA3 v1182(0x0) v1180(0x40)
0x1185: v1185(0x0) = CONST 
0x1189: v1189 = SLOAD v1184
0x118b: v118b(0x100) = CONST 
0x118e: v118e(0x1) = EXP v118b(0x100) v1185(0x0)
0x1190: v1190 = DIV v1189 v118e(0x1)
0x1191: v1191(0xff) = CONST 
0x1193: v1193 = AND v1191(0xff) v1190
0x1195: JUMP v642(0x675)
----------------------------------

Begin block 0x1196
prev = {'0x69b'}, next = {'0x11a6'}
----------------------------------
Block 0x1196
0x1197: v1197(0x0) = CONST 
0x119d: v119d(0x11a6) = CONST 
0x11a2: v11a2(0x97b) = CONST 
0x11a5: v11a5_0 = CALLPRIVATE v11a2(0x97b) v6ca v6c0 v119d(0x11a6)
----------------------------------

Begin block 0x11a6
prev = {'0x1196'}, next = {'0x11ac', '0x1310'}
----------------------------------
Block 0x11a6
0x11a7: v11a7 = ISZERO v11a5_0
0x11a8: v11a8(0x1310) = CONST 
0x11ab: JUMPI v11a8(0x1310) v11a7
----------------------------------

Begin block 0x11ac
prev = {'0x11a6'}, next = {'0x1285'}
----------------------------------
Block 0x11ac
0x11ad: v11ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11c2: v11c2 = AND v11ad(0xffffffffffffffffffffffffffffffffffffffff) v6c0
0x11c3: v11c3(0x8f4ffcb1) = CONST 
0x11c8: v11c8 = CALLER 
0x11ca: v11ca = ADDRESS 
0x11cc: v11cc(0x40) = CONST 
0x11ce: v11ce = MLOAD v11cc(0x40)
0x11d0: v11d0(0xffffffff) = CONST 
0x11d5: v11d5(0x8f4ffcb1) = AND v11d0(0xffffffff) v11c3(0x8f4ffcb1)
0x11d6: v11d6(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x11f4: v11f4(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL v11d6(0x100000000000000000000000000000000000000000000000000000000) v11d5(0x8f4ffcb1)
0x11f6: MSTORE v11ce v11f4(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x11f7: v11f7(0x4) = CONST 
0x11f9: v11f9 = ADD v11f7(0x4) v11ce
0x11fc: v11fc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1211: v1211 = AND v11fc(0xffffffffffffffffffffffffffffffffffffffff) v11c8
0x1212: v1212(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1227: v1227 = AND v1212(0xffffffffffffffffffffffffffffffffffffffff) v1211
0x1229: MSTORE v11f9 v1227
0x122a: v122a(0x20) = CONST 
0x122c: v122c = ADD v122a(0x20) v11f9
0x122f: MSTORE v122c v6ca
0x1230: v1230(0x20) = CONST 
0x1232: v1232 = ADD v1230(0x20) v122c
0x1234: v1234(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1249: v1249 = AND v1234(0xffffffffffffffffffffffffffffffffffffffff) v11ca
0x124a: v124a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x125f: v125f = AND v124a(0xffffffffffffffffffffffffffffffffffffffff) v1249
0x1261: MSTORE v1232 v125f
0x1262: v1262(0x20) = CONST 
0x1264: v1264 = ADD v1262(0x20) v1232
0x1266: v1266(0x20) = CONST 
0x1268: v1268 = ADD v1266(0x20) v1264
0x126b: v126b = SUB v1268 v11f9
0x126d: MSTORE v1264 v126b
0x1271: v1271 = MLOAD v6f3
0x1273: MSTORE v1268 v1271
0x1274: v1274(0x20) = CONST 
0x1276: v1276 = ADD v1274(0x20) v1268
0x127a: v127a = MLOAD v6f3
0x127c: v127c(0x20) = CONST 
0x127e: v127e = ADD v127c(0x20) v6f3
0x1283: v1283(0x0) = CONST 
----------------------------------

Begin block 0x1285
prev = {'0x11ac', '0x128e'}, next = {'0x12a0', '0x128e'}
----------------------------------
Block 0x1285
0x1285_0x0: v1285_0 = PHI v1283(0x0) v1299
0x1288: v1288 = LT v1285_0 v127a
0x1289: v1289 = ISZERO v1288
0x128a: v128a(0x12a0) = CONST 
0x128d: JUMPI v128a(0x12a0) v1289
----------------------------------

Begin block 0x128e
prev = {'0x1285'}, next = {'0x1285'}
----------------------------------
Block 0x128e
0x128e_0x0: v128e_0 = PHI v1283(0x0) v1299
0x1290: v1290 = ADD v127e v128e_0
0x1291: v1291 = MLOAD v1290
0x1294: v1294 = ADD v1276 v128e_0
0x1295: MSTORE v1294 v1291
0x1296: v1296(0x20) = CONST 
0x1299: v1299 = ADD v128e_0 v1296(0x20)
0x129c: v129c(0x1285) = CONST 
0x129f: JUMP v129c(0x1285)
----------------------------------

Begin block 0x12a0
prev = {'0x1285'}, next = {'0x12cd', '0x12b4'}
----------------------------------
Block 0x12a0
0x12a9: v12a9 = ADD v127a v1276
0x12ab: v12ab(0x1f) = CONST 
0x12ad: v12ad = AND v12ab(0x1f) v127a
0x12af: v12af = ISZERO v12ad
0x12b0: v12b0(0x12cd) = CONST 
0x12b3: JUMPI v12b0(0x12cd) v12af
----------------------------------

Begin block 0x12b4
prev = {'0x12a0'}, next = {'0x12cd'}
----------------------------------
Block 0x12b4
0x12b6: v12b6 = SUB v12a9 v12ad
0x12b8: v12b8 = MLOAD v12b6
0x12b9: v12b9(0x1) = CONST 
0x12bc: v12bc(0x20) = CONST 
0x12be: v12be = SUB v12bc(0x20) v12ad
0x12bf: v12bf(0x100) = CONST 
0x12c2: v12c2 = EXP v12bf(0x100) v12be
0x12c3: v12c3 = SUB v12c2 v12b9(0x1)
0x12c4: v12c4 = NOT v12c3
0x12c5: v12c5 = AND v12c4 v12b8
0x12c7: MSTORE v12b6 v12c5
0x12c8: v12c8(0x20) = CONST 
0x12ca: v12ca = ADD v12c8(0x20) v12b6
----------------------------------

Begin block 0x12cd
prev = {'0x12a0', '0x12b4'}, next = {'0x12ef', '0x12eb'}
----------------------------------
Block 0x12cd
0x12cd_0x1: v12cd_1 = PHI v12a9 v12ca
0x12d6: v12d6(0x0) = CONST 
0x12d8: v12d8(0x40) = CONST 
0x12da: v12da = MLOAD v12d8(0x40)
0x12dd: v12dd = SUB v12cd_1 v12da
0x12df: v12df(0x0) = CONST 
0x12e3: v12e3 = EXTCODESIZE v11c2
0x12e4: v12e4 = ISZERO v12e3
0x12e6: v12e6 = ISZERO v12e4
0x12e7: v12e7(0x12ef) = CONST 
0x12ea: JUMPI v12e7(0x12ef) v12e6
----------------------------------

Begin block 0x12eb
prev = {'0x12cd'}, next = {}
----------------------------------
Block 0x12eb
0x12eb: v12eb(0x0) = CONST 
0x12ee: REVERT v12eb(0x0) v12eb(0x0)
----------------------------------

Begin block 0x12ef
prev = {'0x12cd'}, next = {'0x12fa', '0x1303'}
----------------------------------
Block 0x12ef
0x12f1: v12f1 = GAS 
0x12f2: v12f2 = CALL v12f1 v11c2 v12df(0x0) v12da v12dd v12da v12d6(0x0)
0x12f3: v12f3 = ISZERO v12f2
0x12f5: v12f5 = ISZERO v12f3
0x12f6: v12f6(0x1303) = CONST 
0x12f9: JUMPI v12f6(0x1303) v12f5
----------------------------------

Begin block 0x12fa
prev = {'0x12ef'}, next = {}
----------------------------------
Block 0x12fa
0x12fa: v12fa = RETURNDATASIZE 
0x12fb: v12fb(0x0) = CONST 
0x12fe: RETURNDATACOPY v12fb(0x0) v12fb(0x0) v12fa
0x12ff: v12ff = RETURNDATASIZE 
0x1300: v1300(0x0) = CONST 
0x1302: REVERT v1300(0x0) v12ff
----------------------------------

Begin block 0x1303
prev = {'0x12ef'}, next = {'0x1311'}
----------------------------------
Block 0x1303
0x1308: v1308(0x1) = CONST 
0x130c: v130c(0x1311) = CONST 
0x130f: JUMP v130c(0x1311)
----------------------------------

Begin block 0x1310
prev = {'0x11a6'}, next = {'0x1311'}
----------------------------------
Block 0x1310
----------------------------------

Begin block 0x1311
prev = {'0x1310', '0x1303'}, next = {'0x720'}
----------------------------------
Block 0x1311
0x1318: JUMP v69d(0x720)
----------------------------------

Begin block 0x1319
prev = {'0x746'}, next = {'0x79b'}
----------------------------------
Block 0x1319
0x131a: v131a(0x6) = CONST 
0x131c: v131c(0x20) = CONST 
0x131e: MSTORE v131c(0x20) v131a(0x6)
0x1320: v1320(0x0) = CONST 
0x1322: MSTORE v1320(0x0) v76b
0x1323: v1323(0x40) = CONST 
0x1325: v1325(0x0) = CONST 
0x1327: v1327 = SHA3 v1325(0x0) v1323(0x40)
0x1328: v1328(0x20) = CONST 
0x132a: MSTORE v1328(0x20) v1327
0x132c: v132c(0x0) = CONST 
0x132e: MSTORE v132c(0x0) v78b
0x132f: v132f(0x40) = CONST 
0x1331: v1331(0x0) = CONST 
0x1333: v1333 = SHA3 v1331(0x0) v132f(0x40)
0x1334: v1334(0x0) = CONST 
0x133b: v133b = SLOAD v1333
0x133d: JUMP v748(0x79b)
----------------------------------

Begin block 0x133e
prev = {'0x7bd'}, next = {'0x1369', '0x136d'}
----------------------------------
Block 0x133e
0x133f: v133f(0x0) = CONST 
0x1341: v1341 = ADDRESS 
0x1344: v1344(0x7) = CONST 
0x1346: v1346 = SLOAD v1344(0x7)
0x1348: v1348 = MUL v7cc v1346
0x134a: v134a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x135f: v135f = AND v134a(0xffffffffffffffffffffffffffffffffffffffff) v1341
0x1360: v1360 = BALANCE v135f
0x1361: v1361 = LT v1360 v1348
0x1362: v1362 = ISZERO v1361
0x1363: v1363 = ISZERO v1362
0x1364: v1364 = ISZERO v1363
0x1365: v1365(0x136d) = CONST 
0x1368: JUMPI v1365(0x136d) v1364
----------------------------------

Begin block 0x1369
prev = {'0x133e'}, next = {}
----------------------------------
Block 0x1369
0x1369: v1369(0x0) = CONST 
0x136c: REVERT v1369(0x0) v1369(0x0)
----------------------------------

Begin block 0x136d
prev = {'0x133e'}, next = {'0x1378'}
----------------------------------
Block 0x136d
0x136e: v136e(0x1378) = CONST 
0x1371: v1371 = CALLER 
0x1372: v1372 = ADDRESS 
0x1374: v1374(0x158a) = CONST 
0x1377: CALLPRIVATE v1374(0x158a) v7cc v1372 v1371 v136e(0x1378)
----------------------------------

Begin block 0x1378
prev = {'0x136d'}, next = {'0x13b9', '0x13c2'}
----------------------------------
Block 0x1378
0x1379: v1379 = CALLER 
0x137a: v137a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x138f: v138f = AND v137a(0xffffffffffffffffffffffffffffffffffffffff) v1379
0x1390: v1390(0x8fc) = CONST 
0x1393: v1393(0x7) = CONST 
0x1395: v1395 = SLOAD v1393(0x7)
0x1397: v1397 = MUL v7cc v1395
0x139a: v139a = ISZERO v1397
0x139b: v139b = MUL v139a v1390(0x8fc)
0x139d: v139d(0x40) = CONST 
0x139f: v139f = MLOAD v139d(0x40)
0x13a0: v13a0(0x0) = CONST 
0x13a2: v13a2(0x40) = CONST 
0x13a4: v13a4 = MLOAD v13a2(0x40)
0x13a7: v13a7 = SUB v139f v13a4
0x13ac: v13ac = CALL v139b v138f v1397 v13a4 v13a7 v13a4 v13a0(0x0)
0x13b2: v13b2 = ISZERO v13ac
0x13b4: v13b4 = ISZERO v13b2
0x13b5: v13b5(0x13c2) = CONST 
0x13b8: JUMPI v13b5(0x13c2) v13b4
----------------------------------

Begin block 0x13b9
prev = {'0x1378'}, next = {}
----------------------------------
Block 0x13b9
0x13b9: v13b9 = RETURNDATASIZE 
0x13ba: v13ba(0x0) = CONST 
0x13bd: RETURNDATACOPY v13ba(0x0) v13ba(0x0) v13b9
0x13be: v13be = RETURNDATASIZE 
0x13bf: v13bf(0x0) = CONST 
0x13c1: REVERT v13bf(0x0) v13be
----------------------------------

Begin block 0x13c2
prev = {'0x1378'}, next = {'0x7dc'}
----------------------------------
Block 0x13c2
0x13c6: JUMP v7bf(0x7dc)
----------------------------------

Begin block 0x13c7
prev = {'0x7ea'}, next = {'0x141e', '0x1422'}
----------------------------------
Block 0x13c7
0x13c8: v13c8(0x0) = CONST 
0x13cc: v13cc = SLOAD v13c8(0x0)
0x13ce: v13ce(0x100) = CONST 
0x13d1: v13d1(0x1) = EXP v13ce(0x100) v13c8(0x0)
0x13d3: v13d3 = DIV v13cc v13d1(0x1)
0x13d4: v13d4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13e9: v13e9 = AND v13d4(0xffffffffffffffffffffffffffffffffffffffff) v13d3
0x13ea: v13ea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x13ff: v13ff = AND v13ea(0xffffffffffffffffffffffffffffffffffffffff) v13e9
0x1400: v1400 = CALLER 
0x1401: v1401(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1416: v1416 = AND v1401(0xffffffffffffffffffffffffffffffffffffffff) v1400
0x1417: v1417 = EQ v1416 v13ff
0x1418: v1418 = ISZERO v1417
0x1419: v1419 = ISZERO v1418
0x141a: v141a(0x1422) = CONST 
0x141d: JUMPI v141a(0x1422) v1419
----------------------------------

Begin block 0x141e
prev = {'0x13c7'}, next = {}
----------------------------------
Block 0x141e
0x141e: v141e(0x0) = CONST 
0x1421: REVERT v141e(0x0) v141e(0x0)
----------------------------------

Begin block 0x1422
prev = {'0x13c7'}, next = {'0x82b'}
----------------------------------
Block 0x1422
0x1424: v1424(0x9) = CONST 
0x1426: v1426(0x0) = CONST 
0x1429: v1429(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x143e: v143e = AND v1429(0xffffffffffffffffffffffffffffffffffffffff) v80f
0x143f: v143f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1454: v1454 = AND v143f(0xffffffffffffffffffffffffffffffffffffffff) v143e
0x1456: MSTORE v1426(0x0) v1454
0x1457: v1457(0x20) = CONST 
0x1459: v1459(0x20) = ADD v1457(0x20) v1426(0x0)
0x145c: MSTORE v1459(0x20) v1424(0x9)
0x145d: v145d(0x20) = CONST 
0x145f: v145f(0x40) = ADD v145d(0x20) v1459(0x20)
0x1460: v1460(0x0) = CONST 
0x1462: v1462 = SHA3 v1460(0x0) v145f(0x40)
0x1463: v1463(0x0) = CONST 
0x1465: v1465(0x100) = CONST 
0x1468: v1468(0x1) = EXP v1465(0x100) v1463(0x0)
0x146a: v146a = SLOAD v1462
0x146c: v146c(0xff) = CONST 
0x146e: v146e(0xff) = MUL v146c(0xff) v1468(0x1)
0x146f: v146f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v146e(0xff)
0x1470: v1470 = AND v146f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v146a
0x1473: v1473 = ISZERO v81b
0x1474: v1474 = ISZERO v1473
0x1475: v1475 = MUL v1474 v1468(0x1)
0x1476: v1476 = OR v1475 v1470
0x1478: SSTORE v1462 v1476
0x147a: v147a(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5) = CONST 
0x149d: v149d(0x40) = CONST 
0x149f: v149f = MLOAD v149d(0x40)
0x14a2: v14a2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14b7: v14b7 = AND v14a2(0xffffffffffffffffffffffffffffffffffffffff) v80f
0x14b8: v14b8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x14cd: v14cd = AND v14b8(0xffffffffffffffffffffffffffffffffffffffff) v14b7
0x14cf: MSTORE v149f v14cd
0x14d0: v14d0(0x20) = CONST 
0x14d2: v14d2 = ADD v14d0(0x20) v149f
0x14d4: v14d4 = ISZERO v81b
0x14d5: v14d5 = ISZERO v14d4
0x14d6: v14d6 = ISZERO v14d5
0x14d7: v14d7 = ISZERO v14d6
0x14d9: MSTORE v14d2 v14d7
0x14da: v14da(0x20) = CONST 
0x14dc: v14dc = ADD v14da(0x20) v14d2
0x14e1: v14e1(0x40) = CONST 
0x14e3: v14e3 = MLOAD v14e1(0x40)
0x14e6: v14e6 = SUB v14dc v14e3
0x14e8: LOG1 v14e3 v14e6 v147a(0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5)
0x14eb: JUMP v7ec(0x82b)
----------------------------------

Begin block 0x14ec
prev = {'0x839'}, next = {'0x1547', '0x1543'}
----------------------------------
Block 0x14ec
0x14ed: v14ed(0x0) = CONST 
0x14f1: v14f1 = SLOAD v14ed(0x0)
0x14f3: v14f3(0x100) = CONST 
0x14f6: v14f6(0x1) = EXP v14f3(0x100) v14ed(0x0)
0x14f8: v14f8 = DIV v14f1 v14f6(0x1)
0x14f9: v14f9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x150e: v150e = AND v14f9(0xffffffffffffffffffffffffffffffffffffffff) v14f8
0x150f: v150f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1524: v1524 = AND v150f(0xffffffffffffffffffffffffffffffffffffffff) v150e
0x1525: v1525 = CALLER 
0x1526: v1526(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x153b: v153b = AND v1526(0xffffffffffffffffffffffffffffffffffffffff) v1525
0x153c: v153c = EQ v153b v1524
0x153d: v153d = ISZERO v153c
0x153e: v153e = ISZERO v153d
0x153f: v153f(0x1547) = CONST 
0x1542: JUMPI v153f(0x1547) v153e
----------------------------------

Begin block 0x1543
prev = {'0x14ec'}, next = {}
----------------------------------
Block 0x1543
0x1543: v1543(0x0) = CONST 
0x1546: REVERT v1543(0x0) v1543(0x0)
----------------------------------

Begin block 0x1547
prev = {'0x14ec'}, next = {'0x86e'}
----------------------------------
Block 0x1547
0x1549: v1549(0x0) = CONST 
0x154c: v154c(0x100) = CONST 
0x154f: v154f(0x1) = EXP v154c(0x100) v1549(0x0)
0x1551: v1551 = SLOAD v1549(0x0)
0x1553: v1553(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1568: v1568(0xffffffffffffffffffffffffffffffffffffffff) = MUL v1553(0xffffffffffffffffffffffffffffffffffffffff) v154f(0x1)
0x1569: v1569(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1568(0xffffffffffffffffffffffffffffffffffffffff)
0x156a: v156a = AND v1569(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v1551
0x156d: v156d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1582: v1582 = AND v156d(0xffffffffffffffffffffffffffffffffffffffff) v85e
0x1583: v1583 = MUL v1582 v154f(0x1)
0x1584: v1584 = OR v1583 v156a
0x1586: SSTORE v1549(0x0) v1584
0x1589: JUMP v83b(0x86e)
----------------------------------

Begin block 0x158a
prev = {}, next = {'0x15c2', '0x15c6'}
----------------------------------
function 0x158a(v158aarg0, v158aarg1, v158aarg2, v158aarg3)
Block 0x158a
0x158b: v158b(0x0) = CONST 
0x158d: v158d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15a2: v15a2(0x0) = AND v158d(0xffffffffffffffffffffffffffffffffffffffff) v158b(0x0)
0x15a4: v15a4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15b9: v15b9 = AND v15a4(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x15ba: v15ba = EQ v15b9 v15a2(0x0)
0x15bb: v15bb = ISZERO v15ba
0x15bc: v15bc = ISZERO v15bb
0x15bd: v15bd = ISZERO v15bc
0x15be: v15be(0x15c6) = CONST 
0x15c1: JUMPI v15be(0x15c6) v15bd
----------------------------------

Begin block 0x15c2
prev = {'0x158a'}, next = {}
----------------------------------
Block 0x15c2
0x15c2: v15c2(0x0) = CONST 
0x15c5: REVERT v15c2(0x0) v15c2(0x0)
----------------------------------

Begin block 0x15c6
prev = {'0x158a'}, next = {'0x1614', '0x1610'}
----------------------------------
Block 0x15c6
0x15c8: v15c8(0x5) = CONST 
0x15ca: v15ca(0x0) = CONST 
0x15cd: v15cd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15e2: v15e2 = AND v15cd(0xffffffffffffffffffffffffffffffffffffffff) v158aarg2
0x15e3: v15e3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x15f8: v15f8 = AND v15e3(0xffffffffffffffffffffffffffffffffffffffff) v15e2
0x15fa: MSTORE v15ca(0x0) v15f8
0x15fb: v15fb(0x20) = CONST 
0x15fd: v15fd(0x20) = ADD v15fb(0x20) v15ca(0x0)
0x1600: MSTORE v15fd(0x20) v15c8(0x5)
0x1601: v1601(0x20) = CONST 
0x1603: v1603(0x40) = ADD v1601(0x20) v15fd(0x20)
0x1604: v1604(0x0) = CONST 
0x1606: v1606 = SHA3 v1604(0x0) v1603(0x40)
0x1607: v1607 = SLOAD v1606
0x1608: v1608 = LT v1607 v158aarg0
0x1609: v1609 = ISZERO v1608
0x160a: v160a = ISZERO v1609
0x160b: v160b = ISZERO v160a
0x160c: v160c(0x1614) = CONST 
0x160f: JUMPI v160c(0x1614) v160b
----------------------------------

Begin block 0x1610
prev = {'0x15c6'}, next = {}
----------------------------------
Block 0x1610
0x1610: v1610(0x0) = CONST 
0x1613: REVERT v1610(0x0) v1610(0x0)
----------------------------------

Begin block 0x1614
prev = {'0x15c6'}, next = {'0x16a3', '0x169f'}
----------------------------------
Block 0x1614
0x1615: v1615(0x5) = CONST 
0x1617: v1617(0x0) = CONST 
0x161a: v161a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x162f: v162f = AND v161a(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x1630: v1630(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1645: v1645 = AND v1630(0xffffffffffffffffffffffffffffffffffffffff) v162f
0x1647: MSTORE v1617(0x0) v1645
0x1648: v1648(0x20) = CONST 
0x164a: v164a(0x20) = ADD v1648(0x20) v1617(0x0)
0x164d: MSTORE v164a(0x20) v1615(0x5)
0x164e: v164e(0x20) = CONST 
0x1650: v1650(0x40) = ADD v164e(0x20) v164a(0x20)
0x1651: v1651(0x0) = CONST 
0x1653: v1653 = SHA3 v1651(0x0) v1650(0x40)
0x1654: v1654 = SLOAD v1653
0x1656: v1656(0x5) = CONST 
0x1658: v1658(0x0) = CONST 
0x165b: v165b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1670: v1670 = AND v165b(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x1671: v1671(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1686: v1686 = AND v1671(0xffffffffffffffffffffffffffffffffffffffff) v1670
0x1688: MSTORE v1658(0x0) v1686
0x1689: v1689(0x20) = CONST 
0x168b: v168b(0x20) = ADD v1689(0x20) v1658(0x0)
0x168e: MSTORE v168b(0x20) v1656(0x5)
0x168f: v168f(0x20) = CONST 
0x1691: v1691(0x40) = ADD v168f(0x20) v168b(0x20)
0x1692: v1692(0x0) = CONST 
0x1694: v1694 = SHA3 v1692(0x0) v1691(0x40)
0x1695: v1695 = SLOAD v1694
0x1696: v1696 = ADD v1695 v158aarg0
0x1697: v1697 = LT v1696 v1654
0x1698: v1698 = ISZERO v1697
0x1699: v1699 = ISZERO v1698
0x169a: v169a = ISZERO v1699
0x169b: v169b(0x16a3) = CONST 
0x169e: JUMPI v169b(0x16a3) v169a
----------------------------------

Begin block 0x169f
prev = {'0x1614'}, next = {}
----------------------------------
Block 0x169f
0x169f: v169f(0x0) = CONST 
0x16a2: REVERT v169f(0x0) v169f(0x0)
----------------------------------

Begin block 0x16a3
prev = {'0x1614'}, next = {'0x16f8', '0x16fc'}
----------------------------------
Block 0x16a3
0x16a4: v16a4(0x9) = CONST 
0x16a6: v16a6(0x0) = CONST 
0x16a9: v16a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16be: v16be = AND v16a9(0xffffffffffffffffffffffffffffffffffffffff) v158aarg2
0x16bf: v16bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x16d4: v16d4 = AND v16bf(0xffffffffffffffffffffffffffffffffffffffff) v16be
0x16d6: MSTORE v16a6(0x0) v16d4
0x16d7: v16d7(0x20) = CONST 
0x16d9: v16d9(0x20) = ADD v16d7(0x20) v16a6(0x0)
0x16dc: MSTORE v16d9(0x20) v16a4(0x9)
0x16dd: v16dd(0x20) = CONST 
0x16df: v16df(0x40) = ADD v16dd(0x20) v16d9(0x20)
0x16e0: v16e0(0x0) = CONST 
0x16e2: v16e2 = SHA3 v16e0(0x0) v16df(0x40)
0x16e3: v16e3(0x0) = CONST 
0x16e6: v16e6 = SLOAD v16e2
0x16e8: v16e8(0x100) = CONST 
0x16eb: v16eb(0x1) = EXP v16e8(0x100) v16e3(0x0)
0x16ed: v16ed = DIV v16e6 v16eb(0x1)
0x16ee: v16ee(0xff) = CONST 
0x16f0: v16f0 = AND v16ee(0xff) v16ed
0x16f1: v16f1 = ISZERO v16f0
0x16f2: v16f2 = ISZERO v16f1
0x16f3: v16f3 = ISZERO v16f2
0x16f4: v16f4(0x16fc) = CONST 
0x16f7: JUMPI v16f4(0x16fc) v16f3
----------------------------------

Begin block 0x16f8
prev = {'0x16a3'}, next = {}
----------------------------------
Block 0x16f8
0x16f8: v16f8(0x0) = CONST 
0x16fb: REVERT v16f8(0x0) v16f8(0x0)
----------------------------------

Begin block 0x16fc
prev = {'0x16a3'}, next = {'0x1751', '0x1755'}
----------------------------------
Block 0x16fc
0x16fd: v16fd(0x9) = CONST 
0x16ff: v16ff(0x0) = CONST 
0x1702: v1702(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1717: v1717 = AND v1702(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x1718: v1718(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x172d: v172d = AND v1718(0xffffffffffffffffffffffffffffffffffffffff) v1717
0x172f: MSTORE v16ff(0x0) v172d
0x1730: v1730(0x20) = CONST 
0x1732: v1732(0x20) = ADD v1730(0x20) v16ff(0x0)
0x1735: MSTORE v1732(0x20) v16fd(0x9)
0x1736: v1736(0x20) = CONST 
0x1738: v1738(0x40) = ADD v1736(0x20) v1732(0x20)
0x1739: v1739(0x0) = CONST 
0x173b: v173b = SHA3 v1739(0x0) v1738(0x40)
0x173c: v173c(0x0) = CONST 
0x173f: v173f = SLOAD v173b
0x1741: v1741(0x100) = CONST 
0x1744: v1744(0x1) = EXP v1741(0x100) v173c(0x0)
0x1746: v1746 = DIV v173f v1744(0x1)
0x1747: v1747(0xff) = CONST 
0x1749: v1749 = AND v1747(0xff) v1746
0x174a: v174a = ISZERO v1749
0x174b: v174b = ISZERO v174a
0x174c: v174c = ISZERO v174b
0x174d: v174d(0x1755) = CONST 
0x1750: JUMPI v174d(0x1755) v174c
----------------------------------

Begin block 0x1751
prev = {'0x16fc'}, next = {}
----------------------------------
Block 0x1751
0x1751: v1751(0x0) = CONST 
0x1754: REVERT v1751(0x0) v1751(0x0)
----------------------------------

Begin block 0x1755
prev = {'0x16fc'}, next = {}
----------------------------------
Block 0x1755
0x1757: v1757(0x5) = CONST 
0x1759: v1759(0x0) = CONST 
0x175c: v175c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1771: v1771 = AND v175c(0xffffffffffffffffffffffffffffffffffffffff) v158aarg2
0x1772: v1772(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1787: v1787 = AND v1772(0xffffffffffffffffffffffffffffffffffffffff) v1771
0x1789: MSTORE v1759(0x0) v1787
0x178a: v178a(0x20) = CONST 
0x178c: v178c(0x20) = ADD v178a(0x20) v1759(0x0)
0x178f: MSTORE v178c(0x20) v1757(0x5)
0x1790: v1790(0x20) = CONST 
0x1792: v1792(0x40) = ADD v1790(0x20) v178c(0x20)
0x1793: v1793(0x0) = CONST 
0x1795: v1795 = SHA3 v1793(0x0) v1792(0x40)
0x1796: v1796(0x0) = CONST 
0x179a: v179a = SLOAD v1795
0x179b: v179b = SUB v179a v158aarg0
0x17a1: SSTORE v1795 v179b
0x17a4: v17a4(0x5) = CONST 
0x17a6: v17a6(0x0) = CONST 
0x17a9: v17a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17be: v17be = AND v17a9(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x17bf: v17bf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x17d4: v17d4 = AND v17bf(0xffffffffffffffffffffffffffffffffffffffff) v17be
0x17d6: MSTORE v17a6(0x0) v17d4
0x17d7: v17d7(0x20) = CONST 
0x17d9: v17d9(0x20) = ADD v17d7(0x20) v17a6(0x0)
0x17dc: MSTORE v17d9(0x20) v17a4(0x5)
0x17dd: v17dd(0x20) = CONST 
0x17df: v17df(0x40) = ADD v17dd(0x20) v17d9(0x20)
0x17e0: v17e0(0x0) = CONST 
0x17e2: v17e2 = SHA3 v17e0(0x0) v17df(0x40)
0x17e3: v17e3(0x0) = CONST 
0x17e7: v17e7 = SLOAD v17e2
0x17e8: v17e8 = ADD v17e7 v158aarg0
0x17ee: SSTORE v17e2 v17e8
0x17f1: v17f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1806: v1806 = AND v17f1(0xffffffffffffffffffffffffffffffffffffffff) v158aarg1
0x1808: v1808(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x181d: v181d = AND v1808(0xffffffffffffffffffffffffffffffffffffffff) v158aarg2
0x181e: v181e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1840: v1840(0x40) = CONST 
0x1842: v1842 = MLOAD v1840(0x40)
0x1846: MSTORE v1842 v158aarg0
0x1847: v1847(0x20) = CONST 
0x1849: v1849 = ADD v1847(0x20) v1842
0x184d: v184d(0x40) = CONST 
0x184f: v184f = MLOAD v184d(0x40)
0x1852: v1852 = SUB v1849 v184f
0x1854: LOG3 v184f v1852 v181e(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v181d v1806
0x1858: RETURNPRIVATE v158aarg3
----------------------------------

Begin block 0x18ac
prev = {'0x11d', '0x0'}, next = {}
----------------------------------
Block 0x18ac
0x18ad: v18ad(0x128) = CONST 
0x18ae: CALLPRIVATE v18ad(0x128)
----------------------------------

Begin block 0x18af
prev = {'0xd'}, next = {}
----------------------------------
Block 0x18af
0x18b0: v18b0(0x12d) = CONST 
0x18b1: CALLPRIVATE v18b0(0x12d)
----------------------------------

Begin block 0x18b2
prev = {'0x41'}, next = {}
----------------------------------
Block 0x18b2
0x18b3: v18b3(0x164) = CONST 
0x18b4: CALLPRIVATE v18b3(0x164)
----------------------------------

Begin block 0x18b5
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x18b5
0x18b6: v18b6(0x1f4) = CONST 
0x18b7: CALLPRIVATE v18b6(0x1f4)
----------------------------------

Begin block 0x18b8
prev = {'0x57'}, next = {}
----------------------------------
Block 0x18b8
0x18b9: v18b9(0x259) = CONST 
0x18ba: CALLPRIVATE v18b9(0x259)
----------------------------------

Begin block 0x18bb
prev = {'0x62'}, next = {}
----------------------------------
Block 0x18bb
0x18bc: v18bc(0x284) = CONST 
0x18bd: CALLPRIVATE v18bc(0x284)
----------------------------------

Begin block 0x18be
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x18be
0x18bf: v18bf(0x309) = CONST 
0x18c0: CALLPRIVATE v18bf(0x309)
----------------------------------

Begin block 0x18c1
prev = {'0x78'}, next = {}
----------------------------------
Block 0x18c1
0x18c2: v18c2(0x33a) = CONST 
0x18c3: CALLPRIVATE v18c2(0x33a)
----------------------------------

Begin block 0x18c4
prev = {'0x83'}, next = {}
----------------------------------
Block 0x18c4
0x18c5: v18c5(0x37f) = CONST 
0x18c6: CALLPRIVATE v18c5(0x37f)
----------------------------------

Begin block 0x18c7
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x18c7
0x18c8: v18c8(0x3aa) = CONST 
0x18c9: CALLPRIVATE v18c8(0x3aa)
----------------------------------

Begin block 0x18ca
prev = {'0x99'}, next = {}
----------------------------------
Block 0x18ca
0x18cb: v18cb(0x401) = CONST 
0x18cc: CALLPRIVATE v18cb(0x401)
----------------------------------

Begin block 0x18cd
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x18cd
0x18ce: v18ce(0x44e) = CONST 
0x18cf: CALLPRIVATE v18ce(0x44e)
----------------------------------

Begin block 0x18d0
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x18d0
0x18d1: v18d1(0x4b3) = CONST 
0x18d2: CALLPRIVATE v18d1(0x4b3)
----------------------------------

Begin block 0x18d3
prev = {'0xba'}, next = {}
----------------------------------
Block 0x18d3
0x18d4: v18d4(0x4de) = CONST 
0x18d5: CALLPRIVATE v18d4(0x4de)
----------------------------------

Begin block 0x18d6
prev = {'0xc5'}, next = {}
----------------------------------
Block 0x18d6
0x18d7: v18d7(0x535) = CONST 
0x18d8: CALLPRIVATE v18d7(0x535)
----------------------------------

Begin block 0x18d9
prev = {'0xd0'}, next = {}
----------------------------------
Block 0x18d9
0x18da: v18da(0x5c5) = CONST 
0x18db: CALLPRIVATE v18da(0x5c5)
----------------------------------

Begin block 0x18dc
prev = {'0xdb'}, next = {}
----------------------------------
Block 0x18dc
0x18dd: v18dd(0x5cf) = CONST 
0x18de: CALLPRIVATE v18dd(0x5cf)
----------------------------------

Begin block 0x18df
prev = {'0xe6'}, next = {}
----------------------------------
Block 0x18df
0x18e0: v18e0(0x634) = CONST 
0x18e1: CALLPRIVATE v18e0(0x634)
----------------------------------

Begin block 0x18e2
prev = {'0xf1'}, next = {}
----------------------------------
Block 0x18e2
0x18e3: v18e3(0x68f) = CONST 
0x18e4: CALLPRIVATE v18e3(0x68f)
----------------------------------

Begin block 0x18e5
prev = {'0xfc'}, next = {}
----------------------------------
Block 0x18e5
0x18e6: v18e6(0x73a) = CONST 
0x18e7: CALLPRIVATE v18e6(0x73a)
----------------------------------

Begin block 0x18e8
prev = {'0x107'}, next = {}
----------------------------------
Block 0x18e8
0x18e9: v18e9(0x7b1) = CONST 
0x18ea: CALLPRIVATE v18e9(0x7b1)
----------------------------------

Begin block 0x18eb
prev = {'0x112'}, next = {}
----------------------------------
Block 0x18eb
0x18ec: v18ec(0x7de) = CONST 
0x18ed: CALLPRIVATE v18ec(0x7de)
----------------------------------

Begin block 0x18ee
prev = {'0x11d'}, next = {}
----------------------------------
Block 0x18ee
0x18ef: v18ef(0x82d) = CONST 
0x18f0: CALLPRIVATE v18ef(0x82d)
----------------------------------
