
Begin block 0x0
prev = {}, next = {'0xd', '0x1186'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x116a: v116a(0x1186) = CONST 
0x116b: JUMPI v116a(0x1186) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x41', '0x1189'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x6fdde03) = CONST 
0x3c: v3c = EQ v37(0x6fdde03) v35
0x116c: v116c(0x1189) = CONST 
0x116d: JUMPI v116c(0x1189) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0x118c', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95ea7b3) = CONST 
0x47: v47 = EQ v42(0x95ea7b3) v35
0x116e: v116e(0x118c) = CONST 
0x116f: JUMPI v116e(0x118c) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x118f', '0x57'}
----------------------------------
Block 0x4c
0x4d: v4d(0x18160ddd) = CONST 
0x52: v52 = EQ v4d(0x18160ddd) v35
0x1170: v1170(0x118f) = CONST 
0x1171: JUMPI v1170(0x118f) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x62', '0x1192'}
----------------------------------
Block 0x57
0x58: v58(0x23b872dd) = CONST 
0x5d: v5d = EQ v58(0x23b872dd) v35
0x1172: v1172(0x1192) = CONST 
0x1173: JUMPI v1172(0x1192) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0x1195'}
----------------------------------
Block 0x62
0x63: v63(0x313ce567) = CONST 
0x68: v68 = EQ v63(0x313ce567) v35
0x1174: v1174(0x1195) = CONST 
0x1175: JUMPI v1174(0x1195) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x1198', '0x78'}
----------------------------------
Block 0x6d
0x6e: v6e(0x42966c68) = CONST 
0x73: v73 = EQ v6e(0x42966c68) v35
0x1176: v1176(0x1198) = CONST 
0x1177: JUMPI v1176(0x1198) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x119b', '0x83'}
----------------------------------
Block 0x78
0x79: v79(0x70a08231) = CONST 
0x7e: v7e = EQ v79(0x70a08231) v35
0x1178: v1178(0x119b) = CONST 
0x1179: JUMPI v1178(0x119b) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0x8e', '0x119e'}
----------------------------------
Block 0x83
0x84: v84(0x79c65068) = CONST 
0x89: v89 = EQ v84(0x79c65068) v35
0x117a: v117a(0x119e) = CONST 
0x117b: JUMPI v117a(0x119e) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0x11a1', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x8da5cb5b) = CONST 
0x94: v94 = EQ v8f(0x8da5cb5b) v35
0x117c: v117c(0x11a1) = CONST 
0x117d: JUMPI v117c(0x11a1) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0x11a4', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x95d89b41) = CONST 
0x9f: v9f = EQ v9a(0x95d89b41) v35
0x117e: v117e(0x11a4) = CONST 
0x117f: JUMPI v117e(0x11a4) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xaf', '0x11a7'}
----------------------------------
Block 0xa4
0xa5: va5(0xa9059cbb) = CONST 
0xaa: vaa = EQ va5(0xa9059cbb) v35
0x1180: v1180(0x11a7) = CONST 
0x1181: JUMPI v1180(0x11a7) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0x11aa', '0xba'}
----------------------------------
Block 0xaf
0xb0: vb0(0xdd62ed3e) = CONST 
0xb5: vb5 = EQ vb0(0xdd62ed3e) v35
0x1182: v1182(0x11aa) = CONST 
0x1183: JUMPI v1182(0x11aa) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0x11ad', '0x1186'}
----------------------------------
Block 0xba
0xbb: vbb(0xf2fde38b) = CONST 
0xc0: vc0 = EQ vbb(0xf2fde38b) v35
0x1184: v1184(0x11ad) = CONST 
0x1185: JUMPI v1184(0x11ad) vc0
----------------------------------

Begin block 0xc5
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xc5
0xc6: vc6(0x0) = CONST 
0xc9: REVERT vc6(0x0) vc6(0x0)
----------------------------------

Begin block 0xca
prev = {}, next = {'0xd6', '0xd2'}
----------------------------------
function name()()
Block 0xca
0xcb: vcb = CALLVALUE 
0xcd: vcd = ISZERO vcb
0xce: vce(0xd6) = CONST 
0xd1: JUMPI vce(0xd6) vcd
----------------------------------

Begin block 0xd2
prev = {'0xca'}, next = {}
----------------------------------
Block 0xd2
0xd2: vd2(0x0) = CONST 
0xd5: REVERT vd2(0x0) vd2(0x0)
----------------------------------

Begin block 0xd6
prev = {'0xca'}, next = {'0x58f'}
----------------------------------
Block 0xd6
0xd8: vd8(0xdf) = CONST 
0xdb: vdb(0x58f) = CONST 
0xde: JUMP vdb(0x58f)
----------------------------------

Begin block 0xdf
prev = {'0x625'}, next = {'0x104'}
----------------------------------
Block 0xdf
0xe0: ve0(0x40) = CONST 
0xe2: ve2 = MLOAD ve0(0x40)
0xe5: ve5(0x20) = CONST 
0xe7: ve7 = ADD ve5(0x20) ve2
0xea: vea = SUB ve7 ve2
0xec: MSTORE ve2 vea
0xf0: vf0 = MLOAD v5b4
0xf2: MSTORE ve7 vf0
0xf3: vf3(0x20) = CONST 
0xf5: vf5 = ADD vf3(0x20) ve7
0xf9: vf9 = MLOAD v5b4
0xfb: vfb(0x20) = CONST 
0xfd: vfd = ADD vfb(0x20) v5b4
0x102: v102(0x0) = CONST 
----------------------------------

Begin block 0x104
prev = {'0xdf', '0x10d'}, next = {'0x11f', '0x10d'}
----------------------------------
Block 0x104
0x104_0x0: v104_0 = PHI v102(0x0) v118
0x107: v107 = LT v104_0 vf9
0x108: v108 = ISZERO v107
0x109: v109(0x11f) = CONST 
0x10c: JUMPI v109(0x11f) v108
----------------------------------

Begin block 0x10d
prev = {'0x104'}, next = {'0x104'}
----------------------------------
Block 0x10d
0x10d_0x0: v10d_0 = PHI v102(0x0) v118
0x10f: v10f = ADD vfd v10d_0
0x110: v110 = MLOAD v10f
0x113: v113 = ADD vf5 v10d_0
0x114: MSTORE v113 v110
0x115: v115(0x20) = CONST 
0x118: v118 = ADD v10d_0 v115(0x20)
0x11b: v11b(0x104) = CONST 
0x11e: JUMP v11b(0x104)
----------------------------------

Begin block 0x11f
prev = {'0x104'}, next = {'0x133', '0x14c'}
----------------------------------
Block 0x11f
0x128: v128 = ADD vf9 vf5
0x12a: v12a(0x1f) = CONST 
0x12c: v12c = AND v12a(0x1f) vf9
0x12e: v12e = ISZERO v12c
0x12f: v12f(0x14c) = CONST 
0x132: JUMPI v12f(0x14c) v12e
----------------------------------

Begin block 0x133
prev = {'0x11f'}, next = {'0x14c'}
----------------------------------
Block 0x133
0x135: v135 = SUB v128 v12c
0x137: v137 = MLOAD v135
0x138: v138(0x1) = CONST 
0x13b: v13b(0x20) = CONST 
0x13d: v13d = SUB v13b(0x20) v12c
0x13e: v13e(0x100) = CONST 
0x141: v141 = EXP v13e(0x100) v13d
0x142: v142 = SUB v141 v138(0x1)
0x143: v143 = NOT v142
0x144: v144 = AND v143 v137
0x146: MSTORE v135 v144
0x147: v147(0x20) = CONST 
0x149: v149 = ADD v147(0x20) v135
----------------------------------

Begin block 0x14c
prev = {'0x11f', '0x133'}, next = {}
----------------------------------
Block 0x14c
0x14c_0x1: v14c_1 = PHI v128 v149
0x152: v152(0x40) = CONST 
0x154: v154 = MLOAD v152(0x40)
0x157: v157 = SUB v14c_1 v154
0x159: RETURN v154 v157
----------------------------------

Begin block 0x15a
prev = {}, next = {'0x166', '0x162'}
----------------------------------
function approve(address,uint256)()
Block 0x15a
0x15b: v15b = CALLVALUE 
0x15d: v15d = ISZERO v15b
0x15e: v15e(0x166) = CONST 
0x161: JUMPI v15e(0x166) v15d
----------------------------------

Begin block 0x162
prev = {'0x15a'}, next = {}
----------------------------------
Block 0x162
0x162: v162(0x0) = CONST 
0x165: REVERT v162(0x0) v162(0x0)
----------------------------------

Begin block 0x166
prev = {'0x15a'}, next = {'0x62d'}
----------------------------------
Block 0x166
0x168: v168(0x1a5) = CONST 
0x16b: v16b(0x4) = CONST 
0x16e: v16e = CALLDATASIZE 
0x16f: v16f = SUB v16e v16b(0x4)
0x171: v171 = ADD v16b(0x4) v16f
0x175: v175 = CALLDATALOAD v16b(0x4)
0x176: v176(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x18b: v18b = AND v176(0xffffffffffffffffffffffffffffffffffffffff) v175
0x18d: v18d(0x20) = CONST 
0x18f: v18f(0x24) = ADD v18d(0x20) v16b(0x4)
0x195: v195 = CALLDATALOAD v18f(0x24)
0x197: v197(0x20) = CONST 
0x199: v199(0x44) = ADD v197(0x20) v18f(0x24)
0x1a1: v1a1(0x62d) = CONST 
0x1a4: JUMP v1a1(0x62d)
----------------------------------

Begin block 0x1a5
prev = {'0x62d'}, next = {}
----------------------------------
Block 0x1a5
0x1a6: v1a6(0x40) = CONST 
0x1a8: v1a8 = MLOAD v1a6(0x40)
0x1ab: v1ab = ISZERO v716(0x1)
0x1ac: v1ac = ISZERO v1ab
0x1ad: v1ad = ISZERO v1ac
0x1ae: v1ae = ISZERO v1ad
0x1b0: MSTORE v1a8 v1ae
0x1b1: v1b1(0x20) = CONST 
0x1b3: v1b3 = ADD v1b1(0x20) v1a8
0x1b7: v1b7(0x40) = CONST 
0x1b9: v1b9 = MLOAD v1b7(0x40)
0x1bc: v1bc = SUB v1b3 v1b9
0x1be: RETURN v1b9 v1bc
----------------------------------

Begin block 0x1bf
prev = {}, next = {'0x1cb', '0x1c7'}
----------------------------------
function totalSupply()()
Block 0x1bf
0x1c0: v1c0 = CALLVALUE 
0x1c2: v1c2 = ISZERO v1c0
0x1c3: v1c3(0x1cb) = CONST 
0x1c6: JUMPI v1c3(0x1cb) v1c2
----------------------------------

Begin block 0x1c7
prev = {'0x1bf'}, next = {}
----------------------------------
Block 0x1c7
0x1c7: v1c7(0x0) = CONST 
0x1ca: REVERT v1c7(0x0) v1c7(0x0)
----------------------------------

Begin block 0x1cb
prev = {'0x1bf'}, next = {'0x71f'}
----------------------------------
Block 0x1cb
0x1cd: v1cd(0x1d4) = CONST 
0x1d0: v1d0(0x71f) = CONST 
0x1d3: JUMP v1d0(0x71f)
----------------------------------

Begin block 0x1d4
prev = {'0x71f'}, next = {}
----------------------------------
Block 0x1d4
0x1d5: v1d5(0x40) = CONST 
0x1d7: v1d7 = MLOAD v1d5(0x40)
0x1db: MSTORE v1d7 v724
0x1dc: v1dc(0x20) = CONST 
0x1de: v1de = ADD v1dc(0x20) v1d7
0x1e2: v1e2(0x40) = CONST 
0x1e4: v1e4 = MLOAD v1e2(0x40)
0x1e7: v1e7 = SUB v1de v1e4
0x1e9: RETURN v1e4 v1e7
----------------------------------

Begin block 0x1ea
prev = {}, next = {'0x1f2', '0x1f6'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1ea
0x1eb: v1eb = CALLVALUE 
0x1ed: v1ed = ISZERO v1eb
0x1ee: v1ee(0x1f6) = CONST 
0x1f1: JUMPI v1ee(0x1f6) v1ed
----------------------------------

Begin block 0x1f2
prev = {'0x1ea'}, next = {}
----------------------------------
Block 0x1f2
0x1f2: v1f2(0x0) = CONST 
0x1f5: REVERT v1f2(0x0) v1f2(0x0)
----------------------------------

Begin block 0x1f6
prev = {'0x1ea'}, next = {'0x729'}
----------------------------------
Block 0x1f6
0x1f8: v1f8(0x255) = CONST 
0x1fb: v1fb(0x4) = CONST 
0x1fe: v1fe = CALLDATASIZE 
0x1ff: v1ff = SUB v1fe v1fb(0x4)
0x201: v201 = ADD v1fb(0x4) v1ff
0x205: v205 = CALLDATALOAD v1fb(0x4)
0x206: v206(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x21b: v21b = AND v206(0xffffffffffffffffffffffffffffffffffffffff) v205
0x21d: v21d(0x20) = CONST 
0x21f: v21f(0x24) = ADD v21d(0x20) v1fb(0x4)
0x225: v225 = CALLDATALOAD v21f(0x24)
0x226: v226(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x23b: v23b = AND v226(0xffffffffffffffffffffffffffffffffffffffff) v225
0x23d: v23d(0x20) = CONST 
0x23f: v23f(0x44) = ADD v23d(0x20) v21f(0x24)
0x245: v245 = CALLDATALOAD v23f(0x44)
0x247: v247(0x20) = CONST 
0x249: v249(0x64) = ADD v247(0x20) v23f(0x44)
0x251: v251(0x729) = CONST 
0x254: JUMP v251(0x729)
----------------------------------

Begin block 0x255
prev = {'0xa1e'}, next = {}
----------------------------------
Block 0x255
0x255_0x0: v255_0 = PHI va11(0x1) va1a(0x0)
0x256: v256(0x40) = CONST 
0x258: v258 = MLOAD v256(0x40)
0x25b: v25b = ISZERO v255_0
0x25c: v25c = ISZERO v25b
0x25d: v25d = ISZERO v25c
0x25e: v25e = ISZERO v25d
0x260: MSTORE v258 v25e
0x261: v261(0x20) = CONST 
0x263: v263 = ADD v261(0x20) v258
0x267: v267(0x40) = CONST 
0x269: v269 = MLOAD v267(0x40)
0x26c: v26c = SUB v263 v269
0x26e: RETURN v269 v26c
----------------------------------

Begin block 0x26f
prev = {}, next = {'0x27b', '0x277'}
----------------------------------
function decimals()()
Block 0x26f
0x270: v270 = CALLVALUE 
0x272: v272 = ISZERO v270
0x273: v273(0x27b) = CONST 
0x276: JUMPI v273(0x27b) v272
----------------------------------

Begin block 0x277
prev = {'0x26f'}, next = {}
----------------------------------
Block 0x277
0x277: v277(0x0) = CONST 
0x27a: REVERT v277(0x0) v277(0x0)
----------------------------------

Begin block 0x27b
prev = {'0x26f'}, next = {'0xa25'}
----------------------------------
Block 0x27b
0x27d: v27d(0x284) = CONST 
0x280: v280(0xa25) = CONST 
0x283: JUMP v280(0xa25)
----------------------------------

Begin block 0x284
prev = {'0xa25'}, next = {}
----------------------------------
Block 0x284
0x285: v285(0x40) = CONST 
0x287: v287 = MLOAD v285(0x40)
0x28a: v28a(0xff) = CONST 
0x28c: v28c = AND v28a(0xff) va26(0x12)
0x28d: v28d(0xff) = CONST 
0x28f: v28f = AND v28d(0xff) v28c
0x291: MSTORE v287 v28f
0x292: v292(0x20) = CONST 
0x294: v294 = ADD v292(0x20) v287
0x298: v298(0x40) = CONST 
0x29a: v29a = MLOAD v298(0x40)
0x29d: v29d = SUB v294 v29a
0x29f: RETURN v29a v29d
----------------------------------

Begin block 0x2a0
prev = {}, next = {'0x2a8', '0x2ac'}
----------------------------------
function burn(uint256)()
Block 0x2a0
0x2a1: v2a1 = CALLVALUE 
0x2a3: v2a3 = ISZERO v2a1
0x2a4: v2a4(0x2ac) = CONST 
0x2a7: JUMPI v2a4(0x2ac) v2a3
----------------------------------

Begin block 0x2a8
prev = {'0x2a0'}, next = {}
----------------------------------
Block 0x2a8
0x2a8: v2a8(0x0) = CONST 
0x2ab: REVERT v2a8(0x0) v2a8(0x0)
----------------------------------

Begin block 0x2ac
prev = {'0x2a0'}, next = {'0xa2a'}
----------------------------------
Block 0x2ac
0x2ae: v2ae(0x2cb) = CONST 
0x2b1: v2b1(0x4) = CONST 
0x2b4: v2b4 = CALLDATASIZE 
0x2b5: v2b5 = SUB v2b4 v2b1(0x4)
0x2b7: v2b7 = ADD v2b1(0x4) v2b5
0x2bb: v2bb = CALLDATALOAD v2b1(0x4)
0x2bd: v2bd(0x20) = CONST 
0x2bf: v2bf(0x24) = ADD v2bd(0x20) v2b1(0x4)
0x2c7: v2c7(0xa2a) = CONST 
0x2ca: JUMP v2c7(0xa2a)
----------------------------------

Begin block 0x2cb
prev = {'0xad5'}, next = {}
----------------------------------
Block 0x2cb
0x2cc: v2cc(0x40) = CONST 
0x2ce: v2ce = MLOAD v2cc(0x40)
0x2d1: v2d1 = ISZERO vb81(0x1)
0x2d2: v2d2 = ISZERO v2d1
0x2d3: v2d3 = ISZERO v2d2
0x2d4: v2d4 = ISZERO v2d3
0x2d6: MSTORE v2ce v2d4
0x2d7: v2d7(0x20) = CONST 
0x2d9: v2d9 = ADD v2d7(0x20) v2ce
0x2dd: v2dd(0x40) = CONST 
0x2df: v2df = MLOAD v2dd(0x40)
0x2e2: v2e2 = SUB v2d9 v2df
0x2e4: RETURN v2df v2e2
----------------------------------

Begin block 0x2e5
prev = {}, next = {'0x2f1', '0x2ed'}
----------------------------------
function balanceOf(address)()
Block 0x2e5
0x2e6: v2e6 = CALLVALUE 
0x2e8: v2e8 = ISZERO v2e6
0x2e9: v2e9(0x2f1) = CONST 
0x2ec: JUMPI v2e9(0x2f1) v2e8
----------------------------------

Begin block 0x2ed
prev = {'0x2e5'}, next = {}
----------------------------------
Block 0x2ed
0x2ed: v2ed(0x0) = CONST 
0x2f0: REVERT v2ed(0x0) v2ed(0x0)
----------------------------------

Begin block 0x2f1
prev = {'0x2e5'}, next = {'0xb89'}
----------------------------------
Block 0x2f1
0x2f3: v2f3(0x326) = CONST 
0x2f6: v2f6(0x4) = CONST 
0x2f9: v2f9 = CALLDATASIZE 
0x2fa: v2fa = SUB v2f9 v2f6(0x4)
0x2fc: v2fc = ADD v2f6(0x4) v2fa
0x300: v300 = CALLDATALOAD v2f6(0x4)
0x301: v301(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x316: v316 = AND v301(0xffffffffffffffffffffffffffffffffffffffff) v300
0x318: v318(0x20) = CONST 
0x31a: v31a(0x24) = ADD v318(0x20) v2f6(0x4)
0x322: v322(0xb89) = CONST 
0x325: JUMP v322(0xb89)
----------------------------------

Begin block 0x326
prev = {'0xb89'}, next = {}
----------------------------------
Block 0x326
0x327: v327(0x40) = CONST 
0x329: v329 = MLOAD v327(0x40)
0x32d: MSTORE v329 vbcb
0x32e: v32e(0x20) = CONST 
0x330: v330 = ADD v32e(0x20) v329
0x334: v334(0x40) = CONST 
0x336: v336 = MLOAD v334(0x40)
0x339: v339 = SUB v330 v336
0x33b: RETURN v336 v339
----------------------------------

Begin block 0x33c
prev = {}, next = {'0x344', '0x348'}
----------------------------------
function mintToken(address,uint256)()
Block 0x33c
0x33d: v33d = CALLVALUE 
0x33f: v33f = ISZERO v33d
0x340: v340(0x348) = CONST 
0x343: JUMPI v340(0x348) v33f
----------------------------------

Begin block 0x344
prev = {'0x33c'}, next = {}
----------------------------------
Block 0x344
0x344: v344(0x0) = CONST 
0x347: REVERT v344(0x0) v344(0x0)
----------------------------------

Begin block 0x348
prev = {'0x33c'}, next = {'0xbd2'}
----------------------------------
Block 0x348
0x34a: v34a(0x387) = CONST 
0x34d: v34d(0x4) = CONST 
0x350: v350 = CALLDATASIZE 
0x351: v351 = SUB v350 v34d(0x4)
0x353: v353 = ADD v34d(0x4) v351
0x357: v357 = CALLDATALOAD v34d(0x4)
0x358: v358(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x36d: v36d = AND v358(0xffffffffffffffffffffffffffffffffffffffff) v357
0x36f: v36f(0x20) = CONST 
0x371: v371(0x24) = ADD v36f(0x20) v34d(0x4)
0x377: v377 = CALLDATALOAD v371(0x24)
0x379: v379(0x20) = CONST 
0x37b: v37b(0x44) = ADD v379(0x20) v371(0x24)
0x383: v383(0xbd2) = CONST 
0x386: JUMP v383(0xbd2)
----------------------------------

Begin block 0x387
prev = {'0xc2d'}, next = {}
----------------------------------
Block 0x387
0x388: STOP 
----------------------------------

Begin block 0x389
prev = {}, next = {'0x391', '0x395'}
----------------------------------
function owner()()
Block 0x389
0x38a: v38a = CALLVALUE 
0x38c: v38c = ISZERO v38a
0x38d: v38d(0x395) = CONST 
0x390: JUMPI v38d(0x395) v38c
----------------------------------

Begin block 0x391
prev = {'0x389'}, next = {}
----------------------------------
Block 0x391
0x391: v391(0x0) = CONST 
0x394: REVERT v391(0x0) v391(0x0)
----------------------------------

Begin block 0x395
prev = {'0x389'}, next = {'0xd85'}
----------------------------------
Block 0x395
0x397: v397(0x39e) = CONST 
0x39a: v39a(0xd85) = CONST 
0x39d: JUMP v39a(0xd85)
----------------------------------

Begin block 0x39e
prev = {'0xd85'}, next = {}
----------------------------------
Block 0x39e
0x39f: v39f(0x40) = CONST 
0x3a1: v3a1 = MLOAD v39f(0x40)
0x3a4: v3a4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3b9: v3b9 = AND v3a4(0xffffffffffffffffffffffffffffffffffffffff) vda7
0x3ba: v3ba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3cf: v3cf = AND v3ba(0xffffffffffffffffffffffffffffffffffffffff) v3b9
0x3d1: MSTORE v3a1 v3cf
0x3d2: v3d2(0x20) = CONST 
0x3d4: v3d4 = ADD v3d2(0x20) v3a1
0x3d8: v3d8(0x40) = CONST 
0x3da: v3da = MLOAD v3d8(0x40)
0x3dd: v3dd = SUB v3d4 v3da
0x3df: RETURN v3da v3dd
----------------------------------

Begin block 0x3e0
prev = {}, next = {'0x3ec', '0x3e8'}
----------------------------------
function symbol()()
Block 0x3e0
0x3e1: v3e1 = CALLVALUE 
0x3e3: v3e3 = ISZERO v3e1
0x3e4: v3e4(0x3ec) = CONST 
0x3e7: JUMPI v3e4(0x3ec) v3e3
----------------------------------

Begin block 0x3e8
prev = {'0x3e0'}, next = {}
----------------------------------
Block 0x3e8
0x3e8: v3e8(0x0) = CONST 
0x3eb: REVERT v3e8(0x0) v3e8(0x0)
----------------------------------

Begin block 0x3ec
prev = {'0x3e0'}, next = {'0xdaa'}
----------------------------------
Block 0x3ec
0x3ee: v3ee(0x3f5) = CONST 
0x3f1: v3f1(0xdaa) = CONST 
0x3f4: JUMP v3f1(0xdaa)
----------------------------------

Begin block 0x3f5
prev = {'0xe40'}, next = {'0x41a'}
----------------------------------
Block 0x3f5
0x3f6: v3f6(0x40) = CONST 
0x3f8: v3f8 = MLOAD v3f6(0x40)
0x3fb: v3fb(0x20) = CONST 
0x3fd: v3fd = ADD v3fb(0x20) v3f8
0x400: v400 = SUB v3fd v3f8
0x402: MSTORE v3f8 v400
0x406: v406 = MLOAD vdcf
0x408: MSTORE v3fd v406
0x409: v409(0x20) = CONST 
0x40b: v40b = ADD v409(0x20) v3fd
0x40f: v40f = MLOAD vdcf
0x411: v411(0x20) = CONST 
0x413: v413 = ADD v411(0x20) vdcf
0x418: v418(0x0) = CONST 
----------------------------------

Begin block 0x41a
prev = {'0x3f5', '0x423'}, next = {'0x435', '0x423'}
----------------------------------
Block 0x41a
0x41a_0x0: v41a_0 = PHI v418(0x0) v42e
0x41d: v41d = LT v41a_0 v40f
0x41e: v41e = ISZERO v41d
0x41f: v41f(0x435) = CONST 
0x422: JUMPI v41f(0x435) v41e
----------------------------------

Begin block 0x423
prev = {'0x41a'}, next = {'0x41a'}
----------------------------------
Block 0x423
0x423_0x0: v423_0 = PHI v418(0x0) v42e
0x425: v425 = ADD v413 v423_0
0x426: v426 = MLOAD v425
0x429: v429 = ADD v40b v423_0
0x42a: MSTORE v429 v426
0x42b: v42b(0x20) = CONST 
0x42e: v42e = ADD v423_0 v42b(0x20)
0x431: v431(0x41a) = CONST 
0x434: JUMP v431(0x41a)
----------------------------------

Begin block 0x435
prev = {'0x41a'}, next = {'0x462', '0x449'}
----------------------------------
Block 0x435
0x43e: v43e = ADD v40f v40b
0x440: v440(0x1f) = CONST 
0x442: v442 = AND v440(0x1f) v40f
0x444: v444 = ISZERO v442
0x445: v445(0x462) = CONST 
0x448: JUMPI v445(0x462) v444
----------------------------------

Begin block 0x449
prev = {'0x435'}, next = {'0x462'}
----------------------------------
Block 0x449
0x44b: v44b = SUB v43e v442
0x44d: v44d = MLOAD v44b
0x44e: v44e(0x1) = CONST 
0x451: v451(0x20) = CONST 
0x453: v453 = SUB v451(0x20) v442
0x454: v454(0x100) = CONST 
0x457: v457 = EXP v454(0x100) v453
0x458: v458 = SUB v457 v44e(0x1)
0x459: v459 = NOT v458
0x45a: v45a = AND v459 v44d
0x45c: MSTORE v44b v45a
0x45d: v45d(0x20) = CONST 
0x45f: v45f = ADD v45d(0x20) v44b
----------------------------------

Begin block 0x462
prev = {'0x435', '0x449'}, next = {}
----------------------------------
Block 0x462
0x462_0x1: v462_1 = PHI v43e v45f
0x468: v468(0x40) = CONST 
0x46a: v46a = MLOAD v468(0x40)
0x46d: v46d = SUB v462_1 v46a
0x46f: RETURN v46a v46d
----------------------------------

Begin block 0x470
prev = {}, next = {'0x47c', '0x478'}
----------------------------------
function transfer(address,uint256)()
Block 0x470
0x471: v471 = CALLVALUE 
0x473: v473 = ISZERO v471
0x474: v474(0x47c) = CONST 
0x477: JUMPI v474(0x47c) v473
----------------------------------

Begin block 0x478
prev = {'0x470'}, next = {}
----------------------------------
Block 0x478
0x478: v478(0x0) = CONST 
0x47b: REVERT v478(0x0) v478(0x0)
----------------------------------

Begin block 0x47c
prev = {'0x470'}, next = {'0xe48'}
----------------------------------
Block 0x47c
0x47e: v47e(0x4bb) = CONST 
0x481: v481(0x4) = CONST 
0x484: v484 = CALLDATASIZE 
0x485: v485 = SUB v484 v481(0x4)
0x487: v487 = ADD v481(0x4) v485
0x48b: v48b = CALLDATALOAD v481(0x4)
0x48c: v48c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4a1: v4a1 = AND v48c(0xffffffffffffffffffffffffffffffffffffffff) v48b
0x4a3: v4a3(0x20) = CONST 
0x4a5: v4a5(0x24) = ADD v4a3(0x20) v481(0x4)
0x4ab: v4ab = CALLDATALOAD v4a5(0x24)
0x4ad: v4ad(0x20) = CONST 
0x4af: v4af(0x44) = ADD v4ad(0x20) v4a5(0x24)
0x4b7: v4b7(0xe48) = CONST 
0x4ba: JUMP v4b7(0xe48)
----------------------------------

Begin block 0x4bb
prev = {'0x102b'}, next = {}
----------------------------------
Block 0x4bb
0x4bb_0x0: v4bb_0 = PHI v101e(0x1) v1027(0x0)
0x4bc: v4bc(0x40) = CONST 
0x4be: v4be = MLOAD v4bc(0x40)
0x4c1: v4c1 = ISZERO v4bb_0
0x4c2: v4c2 = ISZERO v4c1
0x4c3: v4c3 = ISZERO v4c2
0x4c4: v4c4 = ISZERO v4c3
0x4c6: MSTORE v4be v4c4
0x4c7: v4c7(0x20) = CONST 
0x4c9: v4c9 = ADD v4c7(0x20) v4be
0x4cd: v4cd(0x40) = CONST 
0x4cf: v4cf = MLOAD v4cd(0x40)
0x4d2: v4d2 = SUB v4c9 v4cf
0x4d4: RETURN v4cf v4d2
----------------------------------

Begin block 0x4d5
prev = {}, next = {'0x4e1', '0x4dd'}
----------------------------------
function allowance(address,address)()
Block 0x4d5
0x4d6: v4d6 = CALLVALUE 
0x4d8: v4d8 = ISZERO v4d6
0x4d9: v4d9(0x4e1) = CONST 
0x4dc: JUMPI v4d9(0x4e1) v4d8
----------------------------------

Begin block 0x4dd
prev = {'0x4d5'}, next = {}
----------------------------------
Block 0x4dd
0x4dd: v4dd(0x0) = CONST 
0x4e0: REVERT v4dd(0x0) v4dd(0x0)
----------------------------------

Begin block 0x4e1
prev = {'0x4d5'}, next = {'0x1031'}
----------------------------------
Block 0x4e1
0x4e3: v4e3(0x536) = CONST 
0x4e6: v4e6(0x4) = CONST 
0x4e9: v4e9 = CALLDATASIZE 
0x4ea: v4ea = SUB v4e9 v4e6(0x4)
0x4ec: v4ec = ADD v4e6(0x4) v4ea
0x4f0: v4f0 = CALLDATALOAD v4e6(0x4)
0x4f1: v4f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x506: v506 = AND v4f1(0xffffffffffffffffffffffffffffffffffffffff) v4f0
0x508: v508(0x20) = CONST 
0x50a: v50a(0x24) = ADD v508(0x20) v4e6(0x4)
0x510: v510 = CALLDATALOAD v50a(0x24)
0x511: v511(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x526: v526 = AND v511(0xffffffffffffffffffffffffffffffffffffffff) v510
0x528: v528(0x20) = CONST 
0x52a: v52a(0x44) = ADD v528(0x20) v50a(0x24)
0x532: v532(0x1031) = CONST 
0x535: JUMP v532(0x1031)
----------------------------------

Begin block 0x536
prev = {'0x1031'}, next = {}
----------------------------------
Block 0x536
0x537: v537(0x40) = CONST 
0x539: v539 = MLOAD v537(0x40)
0x53d: MSTORE v539 v10b0
0x53e: v53e(0x20) = CONST 
0x540: v540 = ADD v53e(0x20) v539
0x544: v544(0x40) = CONST 
0x546: v546 = MLOAD v544(0x40)
0x549: v549 = SUB v540 v546
0x54b: RETURN v546 v549
----------------------------------

Begin block 0x54c
prev = {}, next = {'0x554', '0x558'}
----------------------------------
function transferOwnership(address)()
Block 0x54c
0x54d: v54d = CALLVALUE 
0x54f: v54f = ISZERO v54d
0x550: v550(0x558) = CONST 
0x553: JUMPI v550(0x558) v54f
----------------------------------

Begin block 0x554
prev = {'0x54c'}, next = {}
----------------------------------
Block 0x554
0x554: v554(0x0) = CONST 
0x557: REVERT v554(0x0) v554(0x0)
----------------------------------

Begin block 0x558
prev = {'0x54c'}, next = {'0x10b8'}
----------------------------------
Block 0x558
0x55a: v55a(0x58d) = CONST 
0x55d: v55d(0x4) = CONST 
0x560: v560 = CALLDATASIZE 
0x561: v561 = SUB v560 v55d(0x4)
0x563: v563 = ADD v55d(0x4) v561
0x567: v567 = CALLDATALOAD v55d(0x4)
0x568: v568(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x57d: v57d = AND v568(0xffffffffffffffffffffffffffffffffffffffff) v567
0x57f: v57f(0x20) = CONST 
0x581: v581(0x24) = ADD v57f(0x20) v55d(0x4)
0x589: v589(0x10b8) = CONST 
0x58c: JUMP v589(0x10b8)
----------------------------------

Begin block 0x58d
prev = {'0x1113'}, next = {}
----------------------------------
Block 0x58d
0x58e: STOP 
----------------------------------

Begin block 0x58f
prev = {'0xd6'}, next = {'0x5df', '0x625'}
----------------------------------
Block 0x58f
0x590: v590(0x4) = CONST 
0x593: v593 = SLOAD v590(0x4)
0x594: v594(0x1) = CONST 
0x597: v597(0x1) = CONST 
0x599: v599 = AND v597(0x1) v593
0x59a: v59a = ISZERO v599
0x59b: v59b(0x100) = CONST 
0x59e: v59e = MUL v59b(0x100) v59a
0x59f: v59f = SUB v59e v594(0x1)
0x5a0: v5a0 = AND v59f v593
0x5a1: v5a1(0x2) = CONST 
0x5a4: v5a4 = DIV v5a0 v5a1(0x2)
0x5a6: v5a6(0x1f) = CONST 
0x5a8: v5a8 = ADD v5a6(0x1f) v5a4
0x5a9: v5a9(0x20) = CONST 
0x5ad: v5ad = DIV v5a8 v5a9(0x20)
0x5ae: v5ae = MUL v5ad v5a9(0x20)
0x5af: v5af(0x20) = CONST 
0x5b1: v5b1 = ADD v5af(0x20) v5ae
0x5b2: v5b2(0x40) = CONST 
0x5b4: v5b4 = MLOAD v5b2(0x40)
0x5b7: v5b7 = ADD v5b4 v5b1
0x5b8: v5b8(0x40) = CONST 
0x5ba: MSTORE v5b8(0x40) v5b7
0x5c1: MSTORE v5b4 v5a4
0x5c2: v5c2(0x20) = CONST 
0x5c4: v5c4 = ADD v5c2(0x20) v5b4
0x5c7: v5c7 = SLOAD v590(0x4)
0x5c8: v5c8(0x1) = CONST 
0x5cb: v5cb(0x1) = CONST 
0x5cd: v5cd = AND v5cb(0x1) v5c7
0x5ce: v5ce = ISZERO v5cd
0x5cf: v5cf(0x100) = CONST 
0x5d2: v5d2 = MUL v5cf(0x100) v5ce
0x5d3: v5d3 = SUB v5d2 v5c8(0x1)
0x5d4: v5d4 = AND v5d3 v5c7
0x5d5: v5d5(0x2) = CONST 
0x5d8: v5d8 = DIV v5d4 v5d5(0x2)
0x5da: v5da = ISZERO v5d8
0x5db: v5db(0x625) = CONST 
0x5de: JUMPI v5db(0x625) v5da
----------------------------------

Begin block 0x5df
prev = {'0x58f'}, next = {'0x5e7', '0x5fa'}
----------------------------------
Block 0x5df
0x5e0: v5e0(0x1f) = CONST 
0x5e2: v5e2 = LT v5e0(0x1f) v5d8
0x5e3: v5e3(0x5fa) = CONST 
0x5e6: JUMPI v5e3(0x5fa) v5e2
----------------------------------

Begin block 0x5e7
prev = {'0x5df'}, next = {'0x625'}
----------------------------------
Block 0x5e7
0x5e7: v5e7(0x100) = CONST 
0x5ec: v5ec = SLOAD v590(0x4)
0x5ed: v5ed = DIV v5ec v5e7(0x100)
0x5ee: v5ee = MUL v5ed v5e7(0x100)
0x5f0: MSTORE v5c4 v5ee
0x5f2: v5f2(0x20) = CONST 
0x5f4: v5f4 = ADD v5f2(0x20) v5c4
0x5f6: v5f6(0x625) = CONST 
0x5f9: JUMP v5f6(0x625)
----------------------------------

Begin block 0x5fa
prev = {'0x5df'}, next = {'0x608'}
----------------------------------
Block 0x5fa
0x5fc: v5fc = ADD v5c4 v5d8
0x5ff: v5ff(0x0) = CONST 
0x601: MSTORE v5ff(0x0) v590(0x4)
0x602: v602(0x20) = CONST 
0x604: v604(0x0) = CONST 
0x606: v606 = SHA3 v604(0x0) v602(0x20)
----------------------------------

Begin block 0x608
prev = {'0x608', '0x5fa'}, next = {'0x608', '0x61c'}
----------------------------------
Block 0x608
0x608_0x0: v608_0 = PHI v5c4 v614
0x608_0x1: v608_1 = PHI v606 v610
0x60a: v60a = SLOAD v608_1
0x60c: MSTORE v608_0 v60a
0x60e: v60e(0x1) = CONST 
0x610: v610 = ADD v60e(0x1) v608_1
0x612: v612(0x20) = CONST 
0x614: v614 = ADD v612(0x20) v608_0
0x617: v617 = GT v5fc v614
0x618: v618(0x608) = CONST 
0x61b: JUMPI v618(0x608) v617
----------------------------------

Begin block 0x61c
prev = {'0x608'}, next = {'0x625'}
----------------------------------
Block 0x61c
0x61e: v61e = SUB v614 v5fc
0x61f: v61f(0x1f) = CONST 
0x621: v621 = AND v61f(0x1f) v61e
0x623: v623 = ADD v5fc v621
----------------------------------

Begin block 0x625
prev = {'0x58f', '0x5e7', '0x61c'}, next = {'0xdf'}
----------------------------------
Block 0x625
0x62c: JUMP vd8(0xdf)
----------------------------------

Begin block 0x62d
prev = {'0x166'}, next = {'0x1a5'}
----------------------------------
Block 0x62d
0x62e: v62e(0x0) = CONST 
0x631: v631(0x2) = CONST 
0x633: v633(0x0) = CONST 
0x635: v635 = CALLER 
0x636: v636(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x64b: v64b = AND v636(0xffffffffffffffffffffffffffffffffffffffff) v635
0x64c: v64c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x661: v661 = AND v64c(0xffffffffffffffffffffffffffffffffffffffff) v64b
0x663: MSTORE v633(0x0) v661
0x664: v664(0x20) = CONST 
0x666: v666(0x20) = ADD v664(0x20) v633(0x0)
0x669: MSTORE v666(0x20) v631(0x2)
0x66a: v66a(0x20) = CONST 
0x66c: v66c(0x40) = ADD v66a(0x20) v666(0x20)
0x66d: v66d(0x0) = CONST 
0x66f: v66f = SHA3 v66d(0x0) v66c(0x40)
0x670: v670(0x0) = CONST 
0x673: v673(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x688: v688 = AND v673(0xffffffffffffffffffffffffffffffffffffffff) v18b
0x689: v689(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x69e: v69e = AND v689(0xffffffffffffffffffffffffffffffffffffffff) v688
0x6a0: MSTORE v670(0x0) v69e
0x6a1: v6a1(0x20) = CONST 
0x6a3: v6a3(0x20) = ADD v6a1(0x20) v670(0x0)
0x6a6: MSTORE v6a3(0x20) v66f
0x6a7: v6a7(0x20) = CONST 
0x6a9: v6a9(0x40) = ADD v6a7(0x20) v6a3(0x20)
0x6aa: v6aa(0x0) = CONST 
0x6ac: v6ac = SHA3 v6aa(0x0) v6a9(0x40)
0x6af: SSTORE v6ac v195
0x6b2: v6b2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c7: v6c7 = AND v6b2(0xffffffffffffffffffffffffffffffffffffffff) v18b
0x6c8: v6c8 = CALLER 
0x6c9: v6c9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6de: v6de = AND v6c9(0xffffffffffffffffffffffffffffffffffffffff) v6c8
0x6df: v6df(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x701: v701(0x40) = CONST 
0x703: v703 = MLOAD v701(0x40)
0x707: MSTORE v703 v195
0x708: v708(0x20) = CONST 
0x70a: v70a = ADD v708(0x20) v703
0x70e: v70e(0x40) = CONST 
0x710: v710 = MLOAD v70e(0x40)
0x713: v713 = SUB v70a v710
0x715: LOG3 v710 v713 v6df(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v6de v6c7
0x716: v716(0x1) = CONST 
0x71e: JUMP v168(0x1a5)
----------------------------------

Begin block 0x71f
prev = {'0x1cb'}, next = {'0x1d4'}
----------------------------------
Block 0x71f
0x720: v720(0x0) = CONST 
0x722: v722(0x3) = CONST 
0x724: v724 = SLOAD v722(0x3)
0x728: JUMP v1cd(0x1d4)
----------------------------------

Begin block 0x729
prev = {'0x1f6'}, next = {'0x775', '0x7f6'}
----------------------------------
Block 0x729
0x72a: v72a(0x0) = CONST 
0x72d: v72d(0x1) = CONST 
0x72f: v72f(0x0) = CONST 
0x732: v732(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x747: v747 = AND v732(0xffffffffffffffffffffffffffffffffffffffff) v21b
0x748: v748(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x75d: v75d = AND v748(0xffffffffffffffffffffffffffffffffffffffff) v747
0x75f: MSTORE v72f(0x0) v75d
0x760: v760(0x20) = CONST 
0x762: v762(0x20) = ADD v760(0x20) v72f(0x0)
0x765: MSTORE v762(0x20) v72d(0x1)
0x766: v766(0x20) = CONST 
0x768: v768(0x40) = ADD v766(0x20) v762(0x20)
0x769: v769(0x0) = CONST 
0x76b: v76b = SHA3 v769(0x0) v768(0x40)
0x76c: v76c = SLOAD v76b
0x76d: v76d = LT v76c v245
0x76e: v76e = ISZERO v76d
0x770: v770 = ISZERO v76e
0x771: v771(0x7f6) = CONST 
0x774: JUMPI v771(0x7f6) v770
----------------------------------

Begin block 0x775
prev = {'0x729'}, next = {'0x7f6'}
----------------------------------
Block 0x775
0x777: v777(0x2) = CONST 
0x779: v779(0x0) = CONST 
0x77c: v77c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x791: v791 = AND v77c(0xffffffffffffffffffffffffffffffffffffffff) v21b
0x792: v792(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7a7: v7a7 = AND v792(0xffffffffffffffffffffffffffffffffffffffff) v791
0x7a9: MSTORE v779(0x0) v7a7
0x7aa: v7aa(0x20) = CONST 
0x7ac: v7ac(0x20) = ADD v7aa(0x20) v779(0x0)
0x7af: MSTORE v7ac(0x20) v777(0x2)
0x7b0: v7b0(0x20) = CONST 
0x7b2: v7b2(0x40) = ADD v7b0(0x20) v7ac(0x20)
0x7b3: v7b3(0x0) = CONST 
0x7b5: v7b5 = SHA3 v7b3(0x0) v7b2(0x40)
0x7b6: v7b6(0x0) = CONST 
0x7b8: v7b8 = CALLER 
0x7b9: v7b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ce: v7ce = AND v7b9(0xffffffffffffffffffffffffffffffffffffffff) v7b8
0x7cf: v7cf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7e4: v7e4 = AND v7cf(0xffffffffffffffffffffffffffffffffffffffff) v7ce
0x7e6: MSTORE v7b6(0x0) v7e4
0x7e7: v7e7(0x20) = CONST 
0x7e9: v7e9(0x20) = ADD v7e7(0x20) v7b6(0x0)
0x7ec: MSTORE v7e9(0x20) v7b5
0x7ed: v7ed(0x20) = CONST 
0x7ef: v7ef(0x40) = ADD v7ed(0x20) v7e9(0x20)
0x7f0: v7f0(0x0) = CONST 
0x7f2: v7f2 = SHA3 v7f0(0x0) v7ef(0x40)
0x7f3: v7f3 = SLOAD v7f2
0x7f4: v7f4 = LT v7f3 v245
0x7f5: v7f5 = ISZERO v7f4
----------------------------------

Begin block 0x7f6
prev = {'0x775', '0x729'}, next = {'0x7fd', '0x882'}
----------------------------------
Block 0x7f6
0x7f6_0x0: v7f6_0 = PHI v76e v7f5
0x7f8: v7f8 = ISZERO v7f6_0
0x7f9: v7f9(0x882) = CONST 
0x7fc: JUMPI v7f9(0x882) v7f8
----------------------------------

Begin block 0x7fd
prev = {'0x7f6'}, next = {'0x882'}
----------------------------------
Block 0x7fd
0x7fe: v7fe(0x1) = CONST 
0x800: v800(0x0) = CONST 
0x803: v803(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x818: v818 = AND v803(0xffffffffffffffffffffffffffffffffffffffff) v23b
0x819: v819(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82e: v82e = AND v819(0xffffffffffffffffffffffffffffffffffffffff) v818
0x830: MSTORE v800(0x0) v82e
0x831: v831(0x20) = CONST 
0x833: v833(0x20) = ADD v831(0x20) v800(0x0)
0x836: MSTORE v833(0x20) v7fe(0x1)
0x837: v837(0x20) = CONST 
0x839: v839(0x40) = ADD v837(0x20) v833(0x20)
0x83a: v83a(0x0) = CONST 
0x83c: v83c = SHA3 v83a(0x0) v839(0x40)
0x83d: v83d = SLOAD v83c
0x83f: v83f(0x1) = CONST 
0x841: v841(0x0) = CONST 
0x844: v844(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x859: v859 = AND v844(0xffffffffffffffffffffffffffffffffffffffff) v23b
0x85a: v85a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86f: v86f = AND v85a(0xffffffffffffffffffffffffffffffffffffffff) v859
0x871: MSTORE v841(0x0) v86f
0x872: v872(0x20) = CONST 
0x874: v874(0x20) = ADD v872(0x20) v841(0x0)
0x877: MSTORE v874(0x20) v83f(0x1)
0x878: v878(0x20) = CONST 
0x87a: v87a(0x40) = ADD v878(0x20) v874(0x20)
0x87b: v87b(0x0) = CONST 
0x87d: v87d = SHA3 v87b(0x0) v87a(0x40)
0x87e: v87e = SLOAD v87d
0x87f: v87f = ADD v87e v245
0x880: v880 = LT v87f v83d
0x881: v881 = ISZERO v880
----------------------------------

Begin block 0x882
prev = {'0x7fd', '0x7f6'}, next = {'0x888', '0xa19'}
----------------------------------
Block 0x882
0x882_0x0: v882_0 = PHI v76e v7f5 v881
0x883: v883 = ISZERO v882_0
0x884: v884(0xa19) = CONST 
0x887: JUMPI v884(0xa19) v883
----------------------------------

Begin block 0x888
prev = {'0x882'}, next = {'0xa1e'}
----------------------------------
Block 0x888
0x889: v889(0x1) = CONST 
0x88b: v88b(0x0) = CONST 
0x88e: v88e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a3: v8a3 = AND v88e(0xffffffffffffffffffffffffffffffffffffffff) v23b
0x8a4: v8a4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8b9: v8b9 = AND v8a4(0xffffffffffffffffffffffffffffffffffffffff) v8a3
0x8bb: MSTORE v88b(0x0) v8b9
0x8bc: v8bc(0x20) = CONST 
0x8be: v8be(0x20) = ADD v8bc(0x20) v88b(0x0)
0x8c1: MSTORE v8be(0x20) v889(0x1)
0x8c2: v8c2(0x20) = CONST 
0x8c4: v8c4(0x40) = ADD v8c2(0x20) v8be(0x20)
0x8c5: v8c5(0x0) = CONST 
0x8c7: v8c7 = SHA3 v8c5(0x0) v8c4(0x40)
0x8c8: v8c8(0x0) = CONST 
0x8cc: v8cc = SLOAD v8c7
0x8cd: v8cd = ADD v8cc v245
0x8d3: SSTORE v8c7 v8cd
0x8d6: v8d6(0x1) = CONST 
0x8d8: v8d8(0x0) = CONST 
0x8db: v8db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f0: v8f0 = AND v8db(0xffffffffffffffffffffffffffffffffffffffff) v21b
0x8f1: v8f1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x906: v906 = AND v8f1(0xffffffffffffffffffffffffffffffffffffffff) v8f0
0x908: MSTORE v8d8(0x0) v906
0x909: v909(0x20) = CONST 
0x90b: v90b(0x20) = ADD v909(0x20) v8d8(0x0)
0x90e: MSTORE v90b(0x20) v8d6(0x1)
0x90f: v90f(0x20) = CONST 
0x911: v911(0x40) = ADD v90f(0x20) v90b(0x20)
0x912: v912(0x0) = CONST 
0x914: v914 = SHA3 v912(0x0) v911(0x40)
0x915: v915(0x0) = CONST 
0x919: v919 = SLOAD v914
0x91a: v91a = SUB v919 v245
0x920: SSTORE v914 v91a
0x923: v923(0x2) = CONST 
0x925: v925(0x0) = CONST 
0x928: v928(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x93d: v93d = AND v928(0xffffffffffffffffffffffffffffffffffffffff) v21b
0x93e: v93e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x953: v953 = AND v93e(0xffffffffffffffffffffffffffffffffffffffff) v93d
0x955: MSTORE v925(0x0) v953
0x956: v956(0x20) = CONST 
0x958: v958(0x20) = ADD v956(0x20) v925(0x0)
0x95b: MSTORE v958(0x20) v923(0x2)
0x95c: v95c(0x20) = CONST 
0x95e: v95e(0x40) = ADD v95c(0x20) v958(0x20)
0x95f: v95f(0x0) = CONST 
0x961: v961 = SHA3 v95f(0x0) v95e(0x40)
0x962: v962(0x0) = CONST 
0x964: v964 = CALLER 
0x965: v965(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x97a: v97a = AND v965(0xffffffffffffffffffffffffffffffffffffffff) v964
0x97b: v97b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x990: v990 = AND v97b(0xffffffffffffffffffffffffffffffffffffffff) v97a
0x992: MSTORE v962(0x0) v990
0x993: v993(0x20) = CONST 
0x995: v995(0x20) = ADD v993(0x20) v962(0x0)
0x998: MSTORE v995(0x20) v961
0x999: v999(0x20) = CONST 
0x99b: v99b(0x40) = ADD v999(0x20) v995(0x20)
0x99c: v99c(0x0) = CONST 
0x99e: v99e = SHA3 v99c(0x0) v99b(0x40)
0x99f: v99f(0x0) = CONST 
0x9a3: v9a3 = SLOAD v99e
0x9a4: v9a4 = SUB v9a3 v245
0x9aa: SSTORE v99e v9a4
0x9ad: v9ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9c2: v9c2 = AND v9ad(0xffffffffffffffffffffffffffffffffffffffff) v23b
0x9c4: v9c4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d9: v9d9 = AND v9c4(0xffffffffffffffffffffffffffffffffffffffff) v21b
0x9da: v9da(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x9fc: v9fc(0x40) = CONST 
0x9fe: v9fe = MLOAD v9fc(0x40)
0xa02: MSTORE v9fe v245
0xa03: va03(0x20) = CONST 
0xa05: va05 = ADD va03(0x20) v9fe
0xa09: va09(0x40) = CONST 
0xa0b: va0b = MLOAD va09(0x40)
0xa0e: va0e = SUB va05 va0b
0xa10: LOG3 va0b va0e v9da(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v9d9 v9c2
0xa11: va11(0x1) = CONST 
0xa15: va15(0xa1e) = CONST 
0xa18: JUMP va15(0xa1e)
----------------------------------

Begin block 0xa19
prev = {'0x882'}, next = {'0xa1e'}
----------------------------------
Block 0xa19
0xa1a: va1a(0x0) = CONST 
----------------------------------

Begin block 0xa1e
prev = {'0x888', '0xa19'}, next = {'0x255'}
----------------------------------
Block 0xa1e
0xa24: JUMP v1f8(0x255)
----------------------------------

Begin block 0xa25
prev = {'0x27b'}, next = {'0x284'}
----------------------------------
Block 0xa25
0xa26: va26(0x12) = CONST 
0xa29: JUMP v27d(0x284)
----------------------------------

Begin block 0xa2a
prev = {'0x2ac'}, next = {'0xa87', '0xa83'}
----------------------------------
Block 0xa2a
0xa2b: va2b(0x0) = CONST 
0xa2e: va2e(0x0) = CONST 
0xa31: va31 = SLOAD va2b(0x0)
0xa33: va33(0x100) = CONST 
0xa36: va36(0x1) = EXP va33(0x100) va2e(0x0)
0xa38: va38 = DIV va31 va36(0x1)
0xa39: va39(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa4e: va4e = AND va39(0xffffffffffffffffffffffffffffffffffffffff) va38
0xa4f: va4f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa64: va64 = AND va4f(0xffffffffffffffffffffffffffffffffffffffff) va4e
0xa65: va65 = CALLER 
0xa66: va66(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7b: va7b = AND va66(0xffffffffffffffffffffffffffffffffffffffff) va65
0xa7c: va7c = EQ va7b va64
0xa7d: va7d = ISZERO va7c
0xa7e: va7e = ISZERO va7d
0xa7f: va7f(0xa87) = CONST 
0xa82: JUMPI va7f(0xa87) va7e
----------------------------------

Begin block 0xa83
prev = {'0xa2a'}, next = {}
----------------------------------
Block 0xa83
0xa83: va83(0x0) = CONST 
0xa86: REVERT va83(0x0) va83(0x0)
----------------------------------

Begin block 0xa87
prev = {'0xa2a'}, next = {'0xad1', '0xad5'}
----------------------------------
Block 0xa87
0xa89: va89(0x1) = CONST 
0xa8b: va8b(0x0) = CONST 
0xa8d: va8d = CALLER 
0xa8e: va8e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaa3: vaa3 = AND va8e(0xffffffffffffffffffffffffffffffffffffffff) va8d
0xaa4: vaa4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xab9: vab9 = AND vaa4(0xffffffffffffffffffffffffffffffffffffffff) vaa3
0xabb: MSTORE va8b(0x0) vab9
0xabc: vabc(0x20) = CONST 
0xabe: vabe(0x20) = ADD vabc(0x20) va8b(0x0)
0xac1: MSTORE vabe(0x20) va89(0x1)
0xac2: vac2(0x20) = CONST 
0xac4: vac4(0x40) = ADD vac2(0x20) vabe(0x20)
0xac5: vac5(0x0) = CONST 
0xac7: vac7 = SHA3 vac5(0x0) vac4(0x40)
0xac8: vac8 = SLOAD vac7
0xac9: vac9 = LT vac8 v2bb
0xaca: vaca = ISZERO vac9
0xacb: vacb = ISZERO vaca
0xacc: vacc = ISZERO vacb
0xacd: vacd(0xad5) = CONST 
0xad0: JUMPI vacd(0xad5) vacc
----------------------------------

Begin block 0xad1
prev = {'0xa87'}, next = {}
----------------------------------
Block 0xad1
0xad1: vad1(0x0) = CONST 
0xad4: REVERT vad1(0x0) vad1(0x0)
----------------------------------

Begin block 0xad5
prev = {'0xa87'}, next = {'0x2cb'}
----------------------------------
Block 0xad5
0xad7: vad7(0x1) = CONST 
0xad9: vad9(0x0) = CONST 
0xadb: vadb = CALLER 
0xadc: vadc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaf1: vaf1 = AND vadc(0xffffffffffffffffffffffffffffffffffffffff) vadb
0xaf2: vaf2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb07: vb07 = AND vaf2(0xffffffffffffffffffffffffffffffffffffffff) vaf1
0xb09: MSTORE vad9(0x0) vb07
0xb0a: vb0a(0x20) = CONST 
0xb0c: vb0c(0x20) = ADD vb0a(0x20) vad9(0x0)
0xb0f: MSTORE vb0c(0x20) vad7(0x1)
0xb10: vb10(0x20) = CONST 
0xb12: vb12(0x40) = ADD vb10(0x20) vb0c(0x20)
0xb13: vb13(0x0) = CONST 
0xb15: vb15 = SHA3 vb13(0x0) vb12(0x40)
0xb16: vb16(0x0) = CONST 
0xb1a: vb1a = SLOAD vb15
0xb1b: vb1b = SUB vb1a v2bb
0xb21: SSTORE vb15 vb1b
0xb24: vb24(0x3) = CONST 
0xb26: vb26(0x0) = CONST 
0xb2a: vb2a = SLOAD vb24(0x3)
0xb2b: vb2b = SUB vb2a v2bb
0xb31: SSTORE vb24(0x3) vb2b
0xb33: vb33 = CALLER 
0xb34: vb34(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb49: vb49 = AND vb34(0xffffffffffffffffffffffffffffffffffffffff) vb33
0xb4a: vb4a(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0xb6c: vb6c(0x40) = CONST 
0xb6e: vb6e = MLOAD vb6c(0x40)
0xb72: MSTORE vb6e v2bb
0xb73: vb73(0x20) = CONST 
0xb75: vb75 = ADD vb73(0x20) vb6e
0xb79: vb79(0x40) = CONST 
0xb7b: vb7b = MLOAD vb79(0x40)
0xb7e: vb7e = SUB vb75 vb7b
0xb80: LOG2 vb7b vb7e vb4a(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) vb49
0xb81: vb81(0x1) = CONST 
0xb88: JUMP v2ae(0x2cb)
----------------------------------

Begin block 0xb89
prev = {'0x2f1'}, next = {'0x326'}
----------------------------------
Block 0xb89
0xb8a: vb8a(0x0) = CONST 
0xb8c: vb8c(0x1) = CONST 
0xb8e: vb8e(0x0) = CONST 
0xb91: vb91(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xba6: vba6 = AND vb91(0xffffffffffffffffffffffffffffffffffffffff) v316
0xba7: vba7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbbc: vbbc = AND vba7(0xffffffffffffffffffffffffffffffffffffffff) vba6
0xbbe: MSTORE vb8e(0x0) vbbc
0xbbf: vbbf(0x20) = CONST 
0xbc1: vbc1(0x20) = ADD vbbf(0x20) vb8e(0x0)
0xbc4: MSTORE vbc1(0x20) vb8c(0x1)
0xbc5: vbc5(0x20) = CONST 
0xbc7: vbc7(0x40) = ADD vbc5(0x20) vbc1(0x20)
0xbc8: vbc8(0x0) = CONST 
0xbca: vbca = SHA3 vbc8(0x0) vbc7(0x40)
0xbcb: vbcb = SLOAD vbca
0xbd1: JUMP v2f3(0x326)
----------------------------------

Begin block 0xbd2
prev = {'0x348'}, next = {'0xc2d', '0xc29'}
----------------------------------
Block 0xbd2
0xbd3: vbd3(0x0) = CONST 
0xbd7: vbd7 = SLOAD vbd3(0x0)
0xbd9: vbd9(0x100) = CONST 
0xbdc: vbdc(0x1) = EXP vbd9(0x100) vbd3(0x0)
0xbde: vbde = DIV vbd7 vbdc(0x1)
0xbdf: vbdf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbf4: vbf4 = AND vbdf(0xffffffffffffffffffffffffffffffffffffffff) vbde
0xbf5: vbf5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0a: vc0a = AND vbf5(0xffffffffffffffffffffffffffffffffffffffff) vbf4
0xc0b: vc0b = CALLER 
0xc0c: vc0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc21: vc21 = AND vc0c(0xffffffffffffffffffffffffffffffffffffffff) vc0b
0xc22: vc22 = EQ vc21 vc0a
0xc23: vc23 = ISZERO vc22
0xc24: vc24 = ISZERO vc23
0xc25: vc25(0xc2d) = CONST 
0xc28: JUMPI vc25(0xc2d) vc24
----------------------------------

Begin block 0xc29
prev = {'0xbd2'}, next = {}
----------------------------------
Block 0xc29
0xc29: vc29(0x0) = CONST 
0xc2c: REVERT vc29(0x0) vc29(0x0)
----------------------------------

Begin block 0xc2d
prev = {'0xbd2'}, next = {'0x387'}
----------------------------------
Block 0xc2d
0xc2f: vc2f(0x1) = CONST 
0xc31: vc31(0x0) = CONST 
0xc34: vc34(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc49: vc49 = AND vc34(0xffffffffffffffffffffffffffffffffffffffff) v36d
0xc4a: vc4a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5f: vc5f = AND vc4a(0xffffffffffffffffffffffffffffffffffffffff) vc49
0xc61: MSTORE vc31(0x0) vc5f
0xc62: vc62(0x20) = CONST 
0xc64: vc64(0x20) = ADD vc62(0x20) vc31(0x0)
0xc67: MSTORE vc64(0x20) vc2f(0x1)
0xc68: vc68(0x20) = CONST 
0xc6a: vc6a(0x40) = ADD vc68(0x20) vc64(0x20)
0xc6b: vc6b(0x0) = CONST 
0xc6d: vc6d = SHA3 vc6b(0x0) vc6a(0x40)
0xc6e: vc6e(0x0) = CONST 
0xc72: vc72 = SLOAD vc6d
0xc73: vc73 = ADD vc72 v377
0xc79: SSTORE vc6d vc73
0xc7c: vc7c(0x3) = CONST 
0xc7e: vc7e(0x0) = CONST 
0xc82: vc82 = SLOAD vc7c(0x3)
0xc83: vc83 = ADD vc82 v377
0xc89: SSTORE vc7c(0x3) vc83
0xc8b: vc8b(0x0) = CONST 
0xc8f: vc8f = SLOAD vc8b(0x0)
0xc91: vc91(0x100) = CONST 
0xc94: vc94(0x1) = EXP vc91(0x100) vc8b(0x0)
0xc96: vc96 = DIV vc8f vc94(0x1)
0xc97: vc97(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcac: vcac = AND vc97(0xffffffffffffffffffffffffffffffffffffffff) vc96
0xcad: vcad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcc2: vcc2 = AND vcad(0xffffffffffffffffffffffffffffffffffffffff) vcac
0xcc3: vcc3(0x0) = CONST 
0xcc5: vcc5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xce7: vce7(0x40) = CONST 
0xce9: vce9 = MLOAD vce7(0x40)
0xced: MSTORE vce9 v377
0xcee: vcee(0x20) = CONST 
0xcf0: vcf0 = ADD vcee(0x20) vce9
0xcf4: vcf4(0x40) = CONST 
0xcf6: vcf6 = MLOAD vcf4(0x40)
0xcf9: vcf9 = SUB vcf0 vcf6
0xcfb: LOG3 vcf6 vcf9 vcc5(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vcc3(0x0) vcc2
0xcfd: vcfd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd12: vd12 = AND vcfd(0xffffffffffffffffffffffffffffffffffffffff) v36d
0xd13: vd13(0x0) = CONST 
0xd17: vd17 = SLOAD vd13(0x0)
0xd19: vd19(0x100) = CONST 
0xd1c: vd1c(0x1) = EXP vd19(0x100) vd13(0x0)
0xd1e: vd1e = DIV vd17 vd1c(0x1)
0xd1f: vd1f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd34: vd34 = AND vd1f(0xffffffffffffffffffffffffffffffffffffffff) vd1e
0xd35: vd35(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd4a: vd4a = AND vd35(0xffffffffffffffffffffffffffffffffffffffff) vd34
0xd4b: vd4b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd6d: vd6d(0x40) = CONST 
0xd6f: vd6f = MLOAD vd6d(0x40)
0xd73: MSTORE vd6f v377
0xd74: vd74(0x20) = CONST 
0xd76: vd76 = ADD vd74(0x20) vd6f
0xd7a: vd7a(0x40) = CONST 
0xd7c: vd7c = MLOAD vd7a(0x40)
0xd7f: vd7f = SUB vd76 vd7c
0xd81: LOG3 vd7c vd7f vd4b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vd4a vd12
0xd84: JUMP v34a(0x387)
----------------------------------

Begin block 0xd85
prev = {'0x395'}, next = {'0x39e'}
----------------------------------
Block 0xd85
0xd86: vd86(0x0) = CONST 
0xd8a: vd8a = SLOAD vd86(0x0)
0xd8c: vd8c(0x100) = CONST 
0xd8f: vd8f(0x1) = EXP vd8c(0x100) vd86(0x0)
0xd91: vd91 = DIV vd8a vd8f(0x1)
0xd92: vd92(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xda7: vda7 = AND vd92(0xffffffffffffffffffffffffffffffffffffffff) vd91
0xda9: JUMP v397(0x39e)
----------------------------------

Begin block 0xdaa
prev = {'0x3ec'}, next = {'0xe40', '0xdfa'}
----------------------------------
Block 0xdaa
0xdab: vdab(0x5) = CONST 
0xdae: vdae = SLOAD vdab(0x5)
0xdaf: vdaf(0x1) = CONST 
0xdb2: vdb2(0x1) = CONST 
0xdb4: vdb4 = AND vdb2(0x1) vdae
0xdb5: vdb5 = ISZERO vdb4
0xdb6: vdb6(0x100) = CONST 
0xdb9: vdb9 = MUL vdb6(0x100) vdb5
0xdba: vdba = SUB vdb9 vdaf(0x1)
0xdbb: vdbb = AND vdba vdae
0xdbc: vdbc(0x2) = CONST 
0xdbf: vdbf = DIV vdbb vdbc(0x2)
0xdc1: vdc1(0x1f) = CONST 
0xdc3: vdc3 = ADD vdc1(0x1f) vdbf
0xdc4: vdc4(0x20) = CONST 
0xdc8: vdc8 = DIV vdc3 vdc4(0x20)
0xdc9: vdc9 = MUL vdc8 vdc4(0x20)
0xdca: vdca(0x20) = CONST 
0xdcc: vdcc = ADD vdca(0x20) vdc9
0xdcd: vdcd(0x40) = CONST 
0xdcf: vdcf = MLOAD vdcd(0x40)
0xdd2: vdd2 = ADD vdcf vdcc
0xdd3: vdd3(0x40) = CONST 
0xdd5: MSTORE vdd3(0x40) vdd2
0xddc: MSTORE vdcf vdbf
0xddd: vddd(0x20) = CONST 
0xddf: vddf = ADD vddd(0x20) vdcf
0xde2: vde2 = SLOAD vdab(0x5)
0xde3: vde3(0x1) = CONST 
0xde6: vde6(0x1) = CONST 
0xde8: vde8 = AND vde6(0x1) vde2
0xde9: vde9 = ISZERO vde8
0xdea: vdea(0x100) = CONST 
0xded: vded = MUL vdea(0x100) vde9
0xdee: vdee = SUB vded vde3(0x1)
0xdef: vdef = AND vdee vde2
0xdf0: vdf0(0x2) = CONST 
0xdf3: vdf3 = DIV vdef vdf0(0x2)
0xdf5: vdf5 = ISZERO vdf3
0xdf6: vdf6(0xe40) = CONST 
0xdf9: JUMPI vdf6(0xe40) vdf5
----------------------------------

Begin block 0xdfa
prev = {'0xdaa'}, next = {'0xe02', '0xe15'}
----------------------------------
Block 0xdfa
0xdfb: vdfb(0x1f) = CONST 
0xdfd: vdfd = LT vdfb(0x1f) vdf3
0xdfe: vdfe(0xe15) = CONST 
0xe01: JUMPI vdfe(0xe15) vdfd
----------------------------------

Begin block 0xe02
prev = {'0xdfa'}, next = {'0xe40'}
----------------------------------
Block 0xe02
0xe02: ve02(0x100) = CONST 
0xe07: ve07 = SLOAD vdab(0x5)
0xe08: ve08 = DIV ve07 ve02(0x100)
0xe09: ve09 = MUL ve08 ve02(0x100)
0xe0b: MSTORE vddf ve09
0xe0d: ve0d(0x20) = CONST 
0xe0f: ve0f = ADD ve0d(0x20) vddf
0xe11: ve11(0xe40) = CONST 
0xe14: JUMP ve11(0xe40)
----------------------------------

Begin block 0xe15
prev = {'0xdfa'}, next = {'0xe23'}
----------------------------------
Block 0xe15
0xe17: ve17 = ADD vddf vdf3
0xe1a: ve1a(0x0) = CONST 
0xe1c: MSTORE ve1a(0x0) vdab(0x5)
0xe1d: ve1d(0x20) = CONST 
0xe1f: ve1f(0x0) = CONST 
0xe21: ve21 = SHA3 ve1f(0x0) ve1d(0x20)
----------------------------------

Begin block 0xe23
prev = {'0xe23', '0xe15'}, next = {'0xe37', '0xe23'}
----------------------------------
Block 0xe23
0xe23_0x0: ve23_0 = PHI vddf ve2f
0xe23_0x1: ve23_1 = PHI ve21 ve2b
0xe25: ve25 = SLOAD ve23_1
0xe27: MSTORE ve23_0 ve25
0xe29: ve29(0x1) = CONST 
0xe2b: ve2b = ADD ve29(0x1) ve23_1
0xe2d: ve2d(0x20) = CONST 
0xe2f: ve2f = ADD ve2d(0x20) ve23_0
0xe32: ve32 = GT ve17 ve2f
0xe33: ve33(0xe23) = CONST 
0xe36: JUMPI ve33(0xe23) ve32
----------------------------------

Begin block 0xe37
prev = {'0xe23'}, next = {'0xe40'}
----------------------------------
Block 0xe37
0xe39: ve39 = SUB ve2f ve17
0xe3a: ve3a(0x1f) = CONST 
0xe3c: ve3c = AND ve3a(0x1f) ve39
0xe3e: ve3e = ADD ve17 ve3c
----------------------------------

Begin block 0xe40
prev = {'0xe37', '0xdaa', '0xe02'}, next = {'0x3f5'}
----------------------------------
Block 0xe40
0xe47: JUMP v3ee(0x3f5)
----------------------------------

Begin block 0xe48
prev = {'0x47c'}, next = {'0xe94', '0xf19'}
----------------------------------
Block 0xe48
0xe49: ve49(0x0) = CONST 
0xe4c: ve4c(0x1) = CONST 
0xe4e: ve4e(0x0) = CONST 
0xe50: ve50 = CALLER 
0xe51: ve51(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe66: ve66 = AND ve51(0xffffffffffffffffffffffffffffffffffffffff) ve50
0xe67: ve67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe7c: ve7c = AND ve67(0xffffffffffffffffffffffffffffffffffffffff) ve66
0xe7e: MSTORE ve4e(0x0) ve7c
0xe7f: ve7f(0x20) = CONST 
0xe81: ve81(0x20) = ADD ve7f(0x20) ve4e(0x0)
0xe84: MSTORE ve81(0x20) ve4c(0x1)
0xe85: ve85(0x20) = CONST 
0xe87: ve87(0x40) = ADD ve85(0x20) ve81(0x20)
0xe88: ve88(0x0) = CONST 
0xe8a: ve8a = SHA3 ve88(0x0) ve87(0x40)
0xe8b: ve8b = SLOAD ve8a
0xe8c: ve8c = LT ve8b v4ab
0xe8d: ve8d = ISZERO ve8c
0xe8f: ve8f = ISZERO ve8d
0xe90: ve90(0xf19) = CONST 
0xe93: JUMPI ve90(0xf19) ve8f
----------------------------------

Begin block 0xe94
prev = {'0xe48'}, next = {'0xf19'}
----------------------------------
Block 0xe94
0xe95: ve95(0x1) = CONST 
0xe97: ve97(0x0) = CONST 
0xe9a: ve9a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeaf: veaf = AND ve9a(0xffffffffffffffffffffffffffffffffffffffff) v4a1
0xeb0: veb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xec5: vec5 = AND veb0(0xffffffffffffffffffffffffffffffffffffffff) veaf
0xec7: MSTORE ve97(0x0) vec5
0xec8: vec8(0x20) = CONST 
0xeca: veca(0x20) = ADD vec8(0x20) ve97(0x0)
0xecd: MSTORE veca(0x20) ve95(0x1)
0xece: vece(0x20) = CONST 
0xed0: ved0(0x40) = ADD vece(0x20) veca(0x20)
0xed1: ved1(0x0) = CONST 
0xed3: ved3 = SHA3 ved1(0x0) ved0(0x40)
0xed4: ved4 = SLOAD ved3
0xed6: ved6(0x1) = CONST 
0xed8: ved8(0x0) = CONST 
0xedb: vedb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xef0: vef0 = AND vedb(0xffffffffffffffffffffffffffffffffffffffff) v4a1
0xef1: vef1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf06: vf06 = AND vef1(0xffffffffffffffffffffffffffffffffffffffff) vef0
0xf08: MSTORE ved8(0x0) vf06
0xf09: vf09(0x20) = CONST 
0xf0b: vf0b(0x20) = ADD vf09(0x20) ved8(0x0)
0xf0e: MSTORE vf0b(0x20) ved6(0x1)
0xf0f: vf0f(0x20) = CONST 
0xf11: vf11(0x40) = ADD vf0f(0x20) vf0b(0x20)
0xf12: vf12(0x0) = CONST 
0xf14: vf14 = SHA3 vf12(0x0) vf11(0x40)
0xf15: vf15 = SLOAD vf14
0xf16: vf16 = ADD vf15 v4ab
0xf17: vf17 = LT vf16 ved4
0xf18: vf18 = ISZERO vf17
----------------------------------

Begin block 0xf19
prev = {'0xe94', '0xe48'}, next = {'0x1026', '0xf1f'}
----------------------------------
Block 0xf19
0xf19_0x0: vf19_0 = PHI ve8d vf18
0xf1a: vf1a = ISZERO vf19_0
0xf1b: vf1b(0x1026) = CONST 
0xf1e: JUMPI vf1b(0x1026) vf1a
----------------------------------

Begin block 0xf1f
prev = {'0xf19'}, next = {'0x102b'}
----------------------------------
Block 0xf1f
0xf20: vf20(0x1) = CONST 
0xf22: vf22(0x0) = CONST 
0xf24: vf24 = CALLER 
0xf25: vf25(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf3a: vf3a = AND vf25(0xffffffffffffffffffffffffffffffffffffffff) vf24
0xf3b: vf3b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf50: vf50 = AND vf3b(0xffffffffffffffffffffffffffffffffffffffff) vf3a
0xf52: MSTORE vf22(0x0) vf50
0xf53: vf53(0x20) = CONST 
0xf55: vf55(0x20) = ADD vf53(0x20) vf22(0x0)
0xf58: MSTORE vf55(0x20) vf20(0x1)
0xf59: vf59(0x20) = CONST 
0xf5b: vf5b(0x40) = ADD vf59(0x20) vf55(0x20)
0xf5c: vf5c(0x0) = CONST 
0xf5e: vf5e = SHA3 vf5c(0x0) vf5b(0x40)
0xf5f: vf5f(0x0) = CONST 
0xf63: vf63 = SLOAD vf5e
0xf64: vf64 = SUB vf63 v4ab
0xf6a: SSTORE vf5e vf64
0xf6d: vf6d(0x1) = CONST 
0xf6f: vf6f(0x0) = CONST 
0xf72: vf72(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf87: vf87 = AND vf72(0xffffffffffffffffffffffffffffffffffffffff) v4a1
0xf88: vf88(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf9d: vf9d = AND vf88(0xffffffffffffffffffffffffffffffffffffffff) vf87
0xf9f: MSTORE vf6f(0x0) vf9d
0xfa0: vfa0(0x20) = CONST 
0xfa2: vfa2(0x20) = ADD vfa0(0x20) vf6f(0x0)
0xfa5: MSTORE vfa2(0x20) vf6d(0x1)
0xfa6: vfa6(0x20) = CONST 
0xfa8: vfa8(0x40) = ADD vfa6(0x20) vfa2(0x20)
0xfa9: vfa9(0x0) = CONST 
0xfab: vfab = SHA3 vfa9(0x0) vfa8(0x40)
0xfac: vfac(0x0) = CONST 
0xfb0: vfb0 = SLOAD vfab
0xfb1: vfb1 = ADD vfb0 v4ab
0xfb7: SSTORE vfab vfb1
0xfba: vfba(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfcf: vfcf = AND vfba(0xffffffffffffffffffffffffffffffffffffffff) v4a1
0xfd0: vfd0 = CALLER 
0xfd1: vfd1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfe6: vfe6 = AND vfd1(0xffffffffffffffffffffffffffffffffffffffff) vfd0
0xfe7: vfe7(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1009: v1009(0x40) = CONST 
0x100b: v100b = MLOAD v1009(0x40)
0x100f: MSTORE v100b v4ab
0x1010: v1010(0x20) = CONST 
0x1012: v1012 = ADD v1010(0x20) v100b
0x1016: v1016(0x40) = CONST 
0x1018: v1018 = MLOAD v1016(0x40)
0x101b: v101b = SUB v1012 v1018
0x101d: LOG3 v1018 v101b vfe7(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vfe6 vfcf
0x101e: v101e(0x1) = CONST 
0x1022: v1022(0x102b) = CONST 
0x1025: JUMP v1022(0x102b)
----------------------------------

Begin block 0x1026
prev = {'0xf19'}, next = {'0x102b'}
----------------------------------
Block 0x1026
0x1027: v1027(0x0) = CONST 
----------------------------------

Begin block 0x102b
prev = {'0x1026', '0xf1f'}, next = {'0x4bb'}
----------------------------------
Block 0x102b
0x1030: JUMP v47e(0x4bb)
----------------------------------

Begin block 0x1031
prev = {'0x4e1'}, next = {'0x536'}
----------------------------------
Block 0x1031
0x1032: v1032(0x0) = CONST 
0x1034: v1034(0x2) = CONST 
0x1036: v1036(0x0) = CONST 
0x1039: v1039(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x104e: v104e = AND v1039(0xffffffffffffffffffffffffffffffffffffffff) v506
0x104f: v104f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1064: v1064 = AND v104f(0xffffffffffffffffffffffffffffffffffffffff) v104e
0x1066: MSTORE v1036(0x0) v1064
0x1067: v1067(0x20) = CONST 
0x1069: v1069(0x20) = ADD v1067(0x20) v1036(0x0)
0x106c: MSTORE v1069(0x20) v1034(0x2)
0x106d: v106d(0x20) = CONST 
0x106f: v106f(0x40) = ADD v106d(0x20) v1069(0x20)
0x1070: v1070(0x0) = CONST 
0x1072: v1072 = SHA3 v1070(0x0) v106f(0x40)
0x1073: v1073(0x0) = CONST 
0x1076: v1076(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108b: v108b = AND v1076(0xffffffffffffffffffffffffffffffffffffffff) v526
0x108c: v108c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10a1: v10a1 = AND v108c(0xffffffffffffffffffffffffffffffffffffffff) v108b
0x10a3: MSTORE v1073(0x0) v10a1
0x10a4: v10a4(0x20) = CONST 
0x10a6: v10a6(0x20) = ADD v10a4(0x20) v1073(0x0)
0x10a9: MSTORE v10a6(0x20) v1072
0x10aa: v10aa(0x20) = CONST 
0x10ac: v10ac(0x40) = ADD v10aa(0x20) v10a6(0x20)
0x10ad: v10ad(0x0) = CONST 
0x10af: v10af = SHA3 v10ad(0x0) v10ac(0x40)
0x10b0: v10b0 = SLOAD v10af
0x10b7: JUMP v4e3(0x536)
----------------------------------

Begin block 0x10b8
prev = {'0x558'}, next = {'0x1113', '0x110f'}
----------------------------------
Block 0x10b8
0x10b9: v10b9(0x0) = CONST 
0x10bd: v10bd = SLOAD v10b9(0x0)
0x10bf: v10bf(0x100) = CONST 
0x10c2: v10c2(0x1) = EXP v10bf(0x100) v10b9(0x0)
0x10c4: v10c4 = DIV v10bd v10c2(0x1)
0x10c5: v10c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10da: v10da = AND v10c5(0xffffffffffffffffffffffffffffffffffffffff) v10c4
0x10db: v10db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10f0: v10f0 = AND v10db(0xffffffffffffffffffffffffffffffffffffffff) v10da
0x10f1: v10f1 = CALLER 
0x10f2: v10f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1107: v1107 = AND v10f2(0xffffffffffffffffffffffffffffffffffffffff) v10f1
0x1108: v1108 = EQ v1107 v10f0
0x1109: v1109 = ISZERO v1108
0x110a: v110a = ISZERO v1109
0x110b: v110b(0x1113) = CONST 
0x110e: JUMPI v110b(0x1113) v110a
----------------------------------

Begin block 0x110f
prev = {'0x10b8'}, next = {}
----------------------------------
Block 0x110f
0x110f: v110f(0x0) = CONST 
0x1112: REVERT v110f(0x0) v110f(0x0)
----------------------------------

Begin block 0x1113
prev = {'0x10b8'}, next = {'0x58d'}
----------------------------------
Block 0x1113
0x1115: v1115(0x0) = CONST 
0x1118: v1118(0x100) = CONST 
0x111b: v111b(0x1) = EXP v1118(0x100) v1115(0x0)
0x111d: v111d = SLOAD v1115(0x0)
0x111f: v111f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1134: v1134(0xffffffffffffffffffffffffffffffffffffffff) = MUL v111f(0xffffffffffffffffffffffffffffffffffffffff) v111b(0x1)
0x1135: v1135(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1134(0xffffffffffffffffffffffffffffffffffffffff)
0x1136: v1136 = AND v1135(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v111d
0x1139: v1139(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x114e: v114e = AND v1139(0xffffffffffffffffffffffffffffffffffffffff) v57d
0x114f: v114f = MUL v114e v111b(0x1)
0x1150: v1150 = OR v114f v1136
0x1152: SSTORE v1115(0x0) v1150
0x1155: JUMP v55a(0x58d)
----------------------------------

Begin block 0x1186
prev = {'0xba', '0x0'}, next = {}
----------------------------------
Block 0x1186
0x1187: v1187(0xc5) = CONST 
0x1188: CALLPRIVATE v1187(0xc5)
----------------------------------

Begin block 0x1189
prev = {'0xd'}, next = {}
----------------------------------
Block 0x1189
0x118a: v118a(0xca) = CONST 
0x118b: CALLPRIVATE v118a(0xca)
----------------------------------

Begin block 0x118c
prev = {'0x41'}, next = {}
----------------------------------
Block 0x118c
0x118d: v118d(0x15a) = CONST 
0x118e: CALLPRIVATE v118d(0x15a)
----------------------------------

Begin block 0x118f
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x118f
0x1190: v1190(0x1bf) = CONST 
0x1191: CALLPRIVATE v1190(0x1bf)
----------------------------------

Begin block 0x1192
prev = {'0x57'}, next = {}
----------------------------------
Block 0x1192
0x1193: v1193(0x1ea) = CONST 
0x1194: CALLPRIVATE v1193(0x1ea)
----------------------------------

Begin block 0x1195
prev = {'0x62'}, next = {}
----------------------------------
Block 0x1195
0x1196: v1196(0x26f) = CONST 
0x1197: CALLPRIVATE v1196(0x26f)
----------------------------------

Begin block 0x1198
prev = {'0x6d'}, next = {}
----------------------------------
Block 0x1198
0x1199: v1199(0x2a0) = CONST 
0x119a: CALLPRIVATE v1199(0x2a0)
----------------------------------

Begin block 0x119b
prev = {'0x78'}, next = {}
----------------------------------
Block 0x119b
0x119c: v119c(0x2e5) = CONST 
0x119d: CALLPRIVATE v119c(0x2e5)
----------------------------------

Begin block 0x119e
prev = {'0x83'}, next = {}
----------------------------------
Block 0x119e
0x119f: v119f(0x33c) = CONST 
0x11a0: CALLPRIVATE v119f(0x33c)
----------------------------------

Begin block 0x11a1
prev = {'0x8e'}, next = {}
----------------------------------
Block 0x11a1
0x11a2: v11a2(0x389) = CONST 
0x11a3: CALLPRIVATE v11a2(0x389)
----------------------------------

Begin block 0x11a4
prev = {'0x99'}, next = {}
----------------------------------
Block 0x11a4
0x11a5: v11a5(0x3e0) = CONST 
0x11a6: CALLPRIVATE v11a5(0x3e0)
----------------------------------

Begin block 0x11a7
prev = {'0xa4'}, next = {}
----------------------------------
Block 0x11a7
0x11a8: v11a8(0x470) = CONST 
0x11a9: CALLPRIVATE v11a8(0x470)
----------------------------------

Begin block 0x11aa
prev = {'0xaf'}, next = {}
----------------------------------
Block 0x11aa
0x11ab: v11ab(0x4d5) = CONST 
0x11ac: CALLPRIVATE v11ab(0x4d5)
----------------------------------

Begin block 0x11ad
prev = {'0xba'}, next = {}
----------------------------------
Block 0x11ad
0x11ae: v11ae(0x54c) = CONST 
0x11af: CALLPRIVATE v11ae(0x54c)
----------------------------------
