
Begin block 0x0
prev = {}, next = {'0xc', '0x10'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0xebf', '0x1a'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0xea7: vea7(0xebf) = CONST 
0xea8: JUMPI vea7(0xebf) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x71', '0x2b'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x39509351) = CONST 
0x26: v26 = GT v21(0x39509351) v1f
0x27: v27(0x71) = CONST 
0x2a: JUMPI v27(0x71) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0xed1', '0x36'}
----------------------------------
Block 0x2b
0x2c: v2c(0x39509351) = CONST 
0x31: v31 = EQ v2c(0x39509351) v1f
0xea9: vea9(0xed1) = CONST 
0xeaa: JUMPI vea9(0xed1) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0xed4', '0x41'}
----------------------------------
Block 0x36
0x37: v37(0x70a08231) = CONST 
0x3c: v3c = EQ v37(0x70a08231) v1f
0xeab: veab(0xed4) = CONST 
0xeac: JUMPI veab(0xed4) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0xed7', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0x95d89b41) = CONST 
0x47: v47 = EQ v42(0x95d89b41) v1f
0xead: vead(0xed7) = CONST 
0xeae: JUMPI vead(0xed7) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0xeda'}
----------------------------------
Block 0x4c
0x4d: v4d(0xa457c2d7) = CONST 
0x52: v52 = EQ v4d(0xa457c2d7) v1f
0xeaf: veaf(0xeda) = CONST 
0xeb0: JUMPI veaf(0xeda) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0xedd', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0xa9059cbb) = CONST 
0x5d: v5d = EQ v58(0xa9059cbb) v1f
0xeb1: veb1(0xedd) = CONST 
0xeb2: JUMPI veb1(0xedd) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0xee0', '0x6d'}
----------------------------------
Block 0x62
0x63: v63(0xdd62ed3e) = CONST 
0x68: v68 = EQ v63(0xdd62ed3e) v1f
0xeb3: veb3(0xee0) = CONST 
0xeb4: JUMPI veb3(0xee0) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0xa90x0'}
----------------------------------
Block 0x6d
0x6d: v6d(0xa9) = CONST 
0x70: JUMP v6d(0xa9)
----------------------------------

Begin block 0x71
prev = {'0x1a'}, next = {'0xec2', '0x7d'}
----------------------------------
Block 0x71
0x73: v73(0x6fdde03) = CONST 
0x78: v78 = EQ v73(0x6fdde03) v1f
0xeb5: veb5(0xec2) = CONST 
0xeb6: JUMPI veb5(0xec2) v78
----------------------------------

Begin block 0x7d
prev = {'0x71'}, next = {'0xec5', '0x88'}
----------------------------------
Block 0x7d
0x7e: v7e(0x95ea7b3) = CONST 
0x83: v83 = EQ v7e(0x95ea7b3) v1f
0xeb7: veb7(0xec5) = CONST 
0xeb8: JUMPI veb7(0xec5) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0x93', '0xec8'}
----------------------------------
Block 0x88
0x89: v89(0x18160ddd) = CONST 
0x8e: v8e = EQ v89(0x18160ddd) v1f
0xeb9: veb9(0xec8) = CONST 
0xeba: JUMPI veb9(0xec8) v8e
----------------------------------

Begin block 0x93
prev = {'0x88'}, next = {'0x9e', '0xecb'}
----------------------------------
Block 0x93
0x94: v94(0x23b872dd) = CONST 
0x99: v99 = EQ v94(0x23b872dd) v1f
0xebb: vebb(0xecb) = CONST 
0xebc: JUMPI vebb(0xecb) v99
----------------------------------

Begin block 0x9e
prev = {'0x93'}, next = {'0xece', '0xebf'}
----------------------------------
Block 0x9e
0x9f: v9f(0x313ce567) = CONST 
0xa4: va4 = EQ v9f(0x313ce567) v1f
0xebd: vebd(0xece) = CONST 
0xebe: JUMPI vebd(0xece) va4
----------------------------------

Begin block 0xa9
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xa9
0xaa: vaa(0x0) = CONST 
0xad: REVERT vaa(0x0) vaa(0x0)
----------------------------------

Begin block 0xa90x0
prev = {'0xebf', '0x6d'}, next = {}
----------------------------------
Block 0xa90x0
0xaa0x0: v0aa(0x0) = CONST 
0xad0x0: REVERT v0aa(0x0) v0aa(0x0)
----------------------------------

Begin block 0xae
prev = {}, next = {'0x4de'}
----------------------------------
function name()()
Block 0xae
0xaf: vaf(0xb6) = CONST 
0xb2: vb2(0x4de) = CONST 
0xb5: JUMP vb2(0x4de)
----------------------------------

Begin block 0xb6
prev = {'0x4de'}, next = {'0xdb'}
----------------------------------
Block 0xb6
0xb7: vb7(0x40) = CONST 
0xb9: vb9 = MLOAD vb7(0x40)
0xbc: vbc(0x20) = CONST 
0xbe: vbe = ADD vbc(0x20) vb9
0xc1: vc1 = SUB vbe vb9
0xc3: MSTORE vb9 vc1
0xc7: vc7 = MLOAD v4e1
0xc9: MSTORE vbe vc7
0xca: vca(0x20) = CONST 
0xcc: vcc = ADD vca(0x20) vbe
0xd0: vd0 = MLOAD v4e1
0xd2: vd2(0x20) = CONST 
0xd4: vd4 = ADD vd2(0x20) v4e1
0xd9: vd9(0x0) = CONST 
----------------------------------

Begin block 0xdb
prev = {'0xe4', '0xb6'}, next = {'0xf6', '0xe4'}
----------------------------------
Block 0xdb
0xdb_0x0: vdb_0 = PHI vd9(0x0) vef
0xde: vde = LT vdb_0 vd0
0xdf: vdf = ISZERO vde
0xe0: ve0(0xf6) = CONST 
0xe3: JUMPI ve0(0xf6) vdf
----------------------------------

Begin block 0xe4
prev = {'0xdb'}, next = {'0xdb'}
----------------------------------
Block 0xe4
0xe4_0x0: ve4_0 = PHI vd9(0x0) vef
0xe6: ve6 = ADD vd4 ve4_0
0xe7: ve7 = MLOAD ve6
0xea: vea = ADD vcc ve4_0
0xeb: MSTORE vea ve7
0xec: vec(0x20) = CONST 
0xef: vef = ADD ve4_0 vec(0x20)
0xf2: vf2(0xdb) = CONST 
0xf5: JUMP vf2(0xdb)
----------------------------------

Begin block 0xf6
prev = {'0xdb'}, next = {'0x123', '0x10a'}
----------------------------------
Block 0xf6
0xff: vff = ADD vd0 vcc
0x101: v101(0x1f) = CONST 
0x103: v103 = AND v101(0x1f) vd0
0x105: v105 = ISZERO v103
0x106: v106(0x123) = CONST 
0x109: JUMPI v106(0x123) v105
----------------------------------

Begin block 0x10a
prev = {'0xf6'}, next = {'0x123'}
----------------------------------
Block 0x10a
0x10c: v10c = SUB vff v103
0x10e: v10e = MLOAD v10c
0x10f: v10f(0x1) = CONST 
0x112: v112(0x20) = CONST 
0x114: v114 = SUB v112(0x20) v103
0x115: v115(0x100) = CONST 
0x118: v118 = EXP v115(0x100) v114
0x119: v119 = SUB v118 v10f(0x1)
0x11a: v11a = NOT v119
0x11b: v11b = AND v11a v10e
0x11d: MSTORE v10c v11b
0x11e: v11e(0x20) = CONST 
0x120: v120 = ADD v11e(0x20) v10c
----------------------------------

Begin block 0x123
prev = {'0xf6', '0x10a'}, next = {}
----------------------------------
Block 0x123
0x123_0x1: v123_1 = PHI vff v120
0x129: v129(0x40) = CONST 
0x12b: v12b = MLOAD v129(0x40)
0x12e: v12e = SUB v123_1 v12b
0x130: RETURN v12b v12e
----------------------------------

Begin block 0x131
prev = {}, next = {'0x143', '0x147'}
----------------------------------
function approve(address,uint256)()
Block 0x131
0x132: v132(0x17d) = CONST 
0x135: v135(0x4) = CONST 
0x138: v138 = CALLDATASIZE 
0x139: v139 = SUB v138 v135(0x4)
0x13a: v13a(0x40) = CONST 
0x13d: v13d = LT v139 v13a(0x40)
0x13e: v13e = ISZERO v13d
0x13f: v13f(0x147) = CONST 
0x142: JUMPI v13f(0x147) v13e
----------------------------------

Begin block 0x143
prev = {'0x131'}, next = {}
----------------------------------
Block 0x143
0x143: v143(0x0) = CONST 
0x146: REVERT v143(0x0) v143(0x0)
----------------------------------

Begin block 0x147
prev = {'0x131'}, next = {'0x517'}
----------------------------------
Block 0x147
0x149: v149 = ADD v135(0x4) v139
0x14d: v14d = CALLDATALOAD v135(0x4)
0x14e: v14e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x163: v163 = AND v14e(0xffffffffffffffffffffffffffffffffffffffff) v14d
0x165: v165(0x20) = CONST 
0x167: v167 = ADD v165(0x20) v135(0x4)
0x16d: v16d = CALLDATALOAD v167
0x16f: v16f(0x20) = CONST 
0x171: v171 = ADD v16f(0x20) v167
0x179: v179(0x517) = CONST 
0x17c: JUMP v179(0x517)
----------------------------------

Begin block 0x17d
prev = {'0x524'}, next = {}
----------------------------------
Block 0x17d
0x17e: v17e(0x40) = CONST 
0x180: v180 = MLOAD v17e(0x40)
0x183: v183 = ISZERO v525(0x1)
0x184: v184 = ISZERO v183
0x185: v185 = ISZERO v184
0x186: v186 = ISZERO v185
0x188: MSTORE v180 v186
0x189: v189(0x20) = CONST 
0x18b: v18b = ADD v189(0x20) v180
0x18f: v18f(0x40) = CONST 
0x191: v191 = MLOAD v18f(0x40)
0x194: v194 = SUB v18b v191
0x196: RETURN v191 v194
----------------------------------

Begin block 0x197
prev = {}, next = {'0x52e'}
----------------------------------
function totalSupply()()
Block 0x197
0x198: v198(0x19f) = CONST 
0x19b: v19b(0x52e) = CONST 
0x19e: JUMP v19b(0x52e)
----------------------------------

Begin block 0x19f
prev = {'0x52e'}, next = {}
----------------------------------
Block 0x19f
0x1a0: v1a0(0x40) = CONST 
0x1a2: v1a2 = MLOAD v1a0(0x40)
0x1a6: MSTORE v1a2 v533
0x1a7: v1a7(0x20) = CONST 
0x1a9: v1a9 = ADD v1a7(0x20) v1a2
0x1ad: v1ad(0x40) = CONST 
0x1af: v1af = MLOAD v1ad(0x40)
0x1b2: v1b2 = SUB v1a9 v1af
0x1b4: RETURN v1af v1b2
----------------------------------

Begin block 0x1b5
prev = {}, next = {'0x1c7', '0x1cb'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1b5
0x1b6: v1b6(0x221) = CONST 
0x1b9: v1b9(0x4) = CONST 
0x1bc: v1bc = CALLDATASIZE 
0x1bd: v1bd = SUB v1bc v1b9(0x4)
0x1be: v1be(0x60) = CONST 
0x1c1: v1c1 = LT v1bd v1be(0x60)
0x1c2: v1c2 = ISZERO v1c1
0x1c3: v1c3(0x1cb) = CONST 
0x1c6: JUMPI v1c3(0x1cb) v1c2
----------------------------------

Begin block 0x1c7
prev = {'0x1b5'}, next = {}
----------------------------------
Block 0x1c7
0x1c7: v1c7(0x0) = CONST 
0x1ca: REVERT v1c7(0x0) v1c7(0x0)
----------------------------------

Begin block 0x1cb
prev = {'0x1b5'}, next = {'0x538'}
----------------------------------
Block 0x1cb
0x1cd: v1cd = ADD v1b9(0x4) v1bd
0x1d1: v1d1 = CALLDATALOAD v1b9(0x4)
0x1d2: v1d2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1e7: v1e7 = AND v1d2(0xffffffffffffffffffffffffffffffffffffffff) v1d1
0x1e9: v1e9(0x20) = CONST 
0x1eb: v1eb = ADD v1e9(0x20) v1b9(0x4)
0x1f1: v1f1 = CALLDATALOAD v1eb
0x1f2: v1f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x207: v207 = AND v1f2(0xffffffffffffffffffffffffffffffffffffffff) v1f1
0x209: v209(0x20) = CONST 
0x20b: v20b = ADD v209(0x20) v1eb
0x211: v211 = CALLDATALOAD v20b
0x213: v213(0x20) = CONST 
0x215: v215 = ADD v213(0x20) v20b
0x21d: v21d(0x538) = CONST 
0x220: JUMP v21d(0x538)
----------------------------------

Begin block 0x221
prev = {'0x5de'}, next = {}
----------------------------------
Block 0x221
0x222: v222(0x40) = CONST 
0x224: v224 = MLOAD v222(0x40)
0x227: v227 = ISZERO v5df(0x1)
0x228: v228 = ISZERO v227
0x229: v229 = ISZERO v228
0x22a: v22a = ISZERO v229
0x22c: MSTORE v224 v22a
0x22d: v22d(0x20) = CONST 
0x22f: v22f = ADD v22d(0x20) v224
0x233: v233(0x40) = CONST 
0x235: v235 = MLOAD v233(0x40)
0x238: v238 = SUB v22f v235
0x23a: RETURN v235 v238
----------------------------------

Begin block 0x23b
prev = {}, next = {'0x5e9'}
----------------------------------
function decimals()()
Block 0x23b
0x23c: v23c(0x243) = CONST 
0x23f: v23f(0x5e9) = CONST 
0x242: JUMP v23f(0x5e9)
----------------------------------

Begin block 0x243
prev = {'0x5e9'}, next = {}
----------------------------------
Block 0x243
0x244: v244(0x40) = CONST 
0x246: v246 = MLOAD v244(0x40)
0x24a: MSTORE v246 v5ea(0x12)
0x24b: v24b(0x20) = CONST 
0x24d: v24d = ADD v24b(0x20) v246
0x251: v251(0x40) = CONST 
0x253: v253 = MLOAD v251(0x40)
0x256: v256 = SUB v24d v253
0x258: RETURN v253 v256
----------------------------------

Begin block 0x259
prev = {}, next = {'0x26f', '0x26b'}
----------------------------------
function increaseAllowance(address,uint256)()
Block 0x259
0x25a: v25a(0x2a5) = CONST 
0x25d: v25d(0x4) = CONST 
0x260: v260 = CALLDATASIZE 
0x261: v261 = SUB v260 v25d(0x4)
0x262: v262(0x40) = CONST 
0x265: v265 = LT v261 v262(0x40)
0x266: v266 = ISZERO v265
0x267: v267(0x26f) = CONST 
0x26a: JUMPI v267(0x26f) v266
----------------------------------

Begin block 0x26b
prev = {'0x259'}, next = {}
----------------------------------
Block 0x26b
0x26b: v26b(0x0) = CONST 
0x26e: REVERT v26b(0x0) v26b(0x0)
----------------------------------

Begin block 0x26f
prev = {'0x259'}, next = {'0x5ee'}
----------------------------------
Block 0x26f
0x271: v271 = ADD v25d(0x4) v261
0x275: v275 = CALLDATALOAD v25d(0x4)
0x276: v276(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x28b: v28b = AND v276(0xffffffffffffffffffffffffffffffffffffffff) v275
0x28d: v28d(0x20) = CONST 
0x28f: v28f = ADD v28d(0x20) v25d(0x4)
0x295: v295 = CALLDATALOAD v28f
0x297: v297(0x20) = CONST 
0x299: v299 = ADD v297(0x20) v28f
0x2a1: v2a1(0x5ee) = CONST 
0x2a4: JUMP v2a1(0x5ee)
----------------------------------

Begin block 0x2a5
prev = {'0x689'}, next = {}
----------------------------------
Block 0x2a5
0x2a6: v2a6(0x40) = CONST 
0x2a8: v2a8 = MLOAD v2a6(0x40)
0x2ab: v2ab = ISZERO v68a(0x1)
0x2ac: v2ac = ISZERO v2ab
0x2ad: v2ad = ISZERO v2ac
0x2ae: v2ae = ISZERO v2ad
0x2b0: MSTORE v2a8 v2ae
0x2b1: v2b1(0x20) = CONST 
0x2b3: v2b3 = ADD v2b1(0x20) v2a8
0x2b7: v2b7(0x40) = CONST 
0x2b9: v2b9 = MLOAD v2b7(0x40)
0x2bc: v2bc = SUB v2b3 v2b9
0x2be: RETURN v2b9 v2bc
----------------------------------

Begin block 0x2bf
prev = {}, next = {'0x2d1', '0x2d5'}
----------------------------------
function balanceOf(address)()
Block 0x2bf
0x2c0: v2c0(0x301) = CONST 
0x2c3: v2c3(0x4) = CONST 
0x2c6: v2c6 = CALLDATASIZE 
0x2c7: v2c7 = SUB v2c6 v2c3(0x4)
0x2c8: v2c8(0x20) = CONST 
0x2cb: v2cb = LT v2c7 v2c8(0x20)
0x2cc: v2cc = ISZERO v2cb
0x2cd: v2cd(0x2d5) = CONST 
0x2d0: JUMPI v2cd(0x2d5) v2cc
----------------------------------

Begin block 0x2d1
prev = {'0x2bf'}, next = {}
----------------------------------
Block 0x2d1
0x2d1: v2d1(0x0) = CONST 
0x2d4: REVERT v2d1(0x0) v2d1(0x0)
----------------------------------

Begin block 0x2d5
prev = {'0x2bf'}, next = {'0x693'}
----------------------------------
Block 0x2d5
0x2d7: v2d7 = ADD v2c3(0x4) v2c7
0x2db: v2db = CALLDATALOAD v2c3(0x4)
0x2dc: v2dc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2f1: v2f1 = AND v2dc(0xffffffffffffffffffffffffffffffffffffffff) v2db
0x2f3: v2f3(0x20) = CONST 
0x2f5: v2f5 = ADD v2f3(0x20) v2c3(0x4)
0x2fd: v2fd(0x693) = CONST 
0x300: JUMP v2fd(0x693)
----------------------------------

Begin block 0x301
prev = {'0x693'}, next = {}
----------------------------------
Block 0x301
0x302: v302(0x40) = CONST 
0x304: v304 = MLOAD v302(0x40)
0x308: MSTORE v304 v6d4
0x309: v309(0x20) = CONST 
0x30b: v30b = ADD v309(0x20) v304
0x30f: v30f(0x40) = CONST 
0x311: v311 = MLOAD v30f(0x40)
0x314: v314 = SUB v30b v311
0x316: RETURN v311 v314
----------------------------------

Begin block 0x317
prev = {}, next = {'0x6db'}
----------------------------------
function symbol()()
Block 0x317
0x318: v318(0x31f) = CONST 
0x31b: v31b(0x6db) = CONST 
0x31e: JUMP v31b(0x6db)
----------------------------------

Begin block 0x31f
prev = {'0x6db'}, next = {'0x344'}
----------------------------------
Block 0x31f
0x320: v320(0x40) = CONST 
0x322: v322 = MLOAD v320(0x40)
0x325: v325(0x20) = CONST 
0x327: v327 = ADD v325(0x20) v322
0x32a: v32a = SUB v327 v322
0x32c: MSTORE v322 v32a
0x330: v330 = MLOAD v6de
0x332: MSTORE v327 v330
0x333: v333(0x20) = CONST 
0x335: v335 = ADD v333(0x20) v327
0x339: v339 = MLOAD v6de
0x33b: v33b(0x20) = CONST 
0x33d: v33d = ADD v33b(0x20) v6de
0x342: v342(0x0) = CONST 
----------------------------------

Begin block 0x344
prev = {'0x34d', '0x31f'}, next = {'0x35f', '0x34d'}
----------------------------------
Block 0x344
0x344_0x0: v344_0 = PHI v342(0x0) v358
0x347: v347 = LT v344_0 v339
0x348: v348 = ISZERO v347
0x349: v349(0x35f) = CONST 
0x34c: JUMPI v349(0x35f) v348
----------------------------------

Begin block 0x34d
prev = {'0x344'}, next = {'0x344'}
----------------------------------
Block 0x34d
0x34d_0x0: v34d_0 = PHI v342(0x0) v358
0x34f: v34f = ADD v33d v34d_0
0x350: v350 = MLOAD v34f
0x353: v353 = ADD v335 v34d_0
0x354: MSTORE v353 v350
0x355: v355(0x20) = CONST 
0x358: v358 = ADD v34d_0 v355(0x20)
0x35b: v35b(0x344) = CONST 
0x35e: JUMP v35b(0x344)
----------------------------------

Begin block 0x35f
prev = {'0x344'}, next = {'0x38c', '0x373'}
----------------------------------
Block 0x35f
0x368: v368 = ADD v339 v335
0x36a: v36a(0x1f) = CONST 
0x36c: v36c = AND v36a(0x1f) v339
0x36e: v36e = ISZERO v36c
0x36f: v36f(0x38c) = CONST 
0x372: JUMPI v36f(0x38c) v36e
----------------------------------

Begin block 0x373
prev = {'0x35f'}, next = {'0x38c'}
----------------------------------
Block 0x373
0x375: v375 = SUB v368 v36c
0x377: v377 = MLOAD v375
0x378: v378(0x1) = CONST 
0x37b: v37b(0x20) = CONST 
0x37d: v37d = SUB v37b(0x20) v36c
0x37e: v37e(0x100) = CONST 
0x381: v381 = EXP v37e(0x100) v37d
0x382: v382 = SUB v381 v378(0x1)
0x383: v383 = NOT v382
0x384: v384 = AND v383 v377
0x386: MSTORE v375 v384
0x387: v387(0x20) = CONST 
0x389: v389 = ADD v387(0x20) v375
----------------------------------

Begin block 0x38c
prev = {'0x35f', '0x373'}, next = {}
----------------------------------
Block 0x38c
0x38c_0x1: v38c_1 = PHI v368 v389
0x392: v392(0x40) = CONST 
0x394: v394 = MLOAD v392(0x40)
0x397: v397 = SUB v38c_1 v394
0x399: RETURN v394 v397
----------------------------------

Begin block 0x39a
prev = {}, next = {'0x3ac', '0x3b0'}
----------------------------------
function decreaseAllowance(address,uint256)()
Block 0x39a
0x39b: v39b(0x3e6) = CONST 
0x39e: v39e(0x4) = CONST 
0x3a1: v3a1 = CALLDATASIZE 
0x3a2: v3a2 = SUB v3a1 v39e(0x4)
0x3a3: v3a3(0x40) = CONST 
0x3a6: v3a6 = LT v3a2 v3a3(0x40)
0x3a7: v3a7 = ISZERO v3a6
0x3a8: v3a8(0x3b0) = CONST 
0x3ab: JUMPI v3a8(0x3b0) v3a7
----------------------------------

Begin block 0x3ac
prev = {'0x39a'}, next = {}
----------------------------------
Block 0x3ac
0x3ac: v3ac(0x0) = CONST 
0x3af: REVERT v3ac(0x0) v3ac(0x0)
----------------------------------

Begin block 0x3b0
prev = {'0x39a'}, next = {'0x714'}
----------------------------------
Block 0x3b0
0x3b2: v3b2 = ADD v39e(0x4) v3a2
0x3b6: v3b6 = CALLDATALOAD v39e(0x4)
0x3b7: v3b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3cc: v3cc = AND v3b7(0xffffffffffffffffffffffffffffffffffffffff) v3b6
0x3ce: v3ce(0x20) = CONST 
0x3d0: v3d0 = ADD v3ce(0x20) v39e(0x4)
0x3d6: v3d6 = CALLDATALOAD v3d0
0x3d8: v3d8(0x20) = CONST 
0x3da: v3da = ADD v3d8(0x20) v3d0
0x3e2: v3e2(0x714) = CONST 
0x3e5: JUMP v3e2(0x714)
----------------------------------

Begin block 0x3e6
prev = {'0x7af'}, next = {}
----------------------------------
Block 0x3e6
0x3e7: v3e7(0x40) = CONST 
0x3e9: v3e9 = MLOAD v3e7(0x40)
0x3ec: v3ec = ISZERO v7b0(0x1)
0x3ed: v3ed = ISZERO v3ec
0x3ee: v3ee = ISZERO v3ed
0x3ef: v3ef = ISZERO v3ee
0x3f1: MSTORE v3e9 v3ef
0x3f2: v3f2(0x20) = CONST 
0x3f4: v3f4 = ADD v3f2(0x20) v3e9
0x3f8: v3f8(0x40) = CONST 
0x3fa: v3fa = MLOAD v3f8(0x40)
0x3fd: v3fd = SUB v3f4 v3fa
0x3ff: RETURN v3fa v3fd
----------------------------------

Begin block 0x400
prev = {}, next = {'0x416', '0x412'}
----------------------------------
function transfer(address,uint256)()
Block 0x400
0x401: v401(0x44c) = CONST 
0x404: v404(0x4) = CONST 
0x407: v407 = CALLDATASIZE 
0x408: v408 = SUB v407 v404(0x4)
0x409: v409(0x40) = CONST 
0x40c: v40c = LT v408 v409(0x40)
0x40d: v40d = ISZERO v40c
0x40e: v40e(0x416) = CONST 
0x411: JUMPI v40e(0x416) v40d
----------------------------------

Begin block 0x412
prev = {'0x400'}, next = {}
----------------------------------
Block 0x412
0x412: v412(0x0) = CONST 
0x415: REVERT v412(0x0) v412(0x0)
----------------------------------

Begin block 0x416
prev = {'0x400'}, next = {'0x7b9'}
----------------------------------
Block 0x416
0x418: v418 = ADD v404(0x4) v408
0x41c: v41c = CALLDATALOAD v404(0x4)
0x41d: v41d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x432: v432 = AND v41d(0xffffffffffffffffffffffffffffffffffffffff) v41c
0x434: v434(0x20) = CONST 
0x436: v436 = ADD v434(0x20) v404(0x4)
0x43c: v43c = CALLDATALOAD v436
0x43e: v43e(0x20) = CONST 
0x440: v440 = ADD v43e(0x20) v436
0x448: v448(0x7b9) = CONST 
0x44b: JUMP v448(0x7b9)
----------------------------------

Begin block 0x44c
prev = {'0x7c6'}, next = {}
----------------------------------
Block 0x44c
0x44d: v44d(0x40) = CONST 
0x44f: v44f = MLOAD v44d(0x40)
0x452: v452 = ISZERO v7c7(0x1)
0x453: v453 = ISZERO v452
0x454: v454 = ISZERO v453
0x455: v455 = ISZERO v454
0x457: MSTORE v44f v455
0x458: v458(0x20) = CONST 
0x45a: v45a = ADD v458(0x20) v44f
0x45e: v45e(0x40) = CONST 
0x460: v460 = MLOAD v45e(0x40)
0x463: v463 = SUB v45a v460
0x465: RETURN v460 v463
----------------------------------

Begin block 0x466
prev = {}, next = {'0x47c', '0x478'}
----------------------------------
function allowance(address,address)()
Block 0x466
0x467: v467(0x4c8) = CONST 
0x46a: v46a(0x4) = CONST 
0x46d: v46d = CALLDATASIZE 
0x46e: v46e = SUB v46d v46a(0x4)
0x46f: v46f(0x40) = CONST 
0x472: v472 = LT v46e v46f(0x40)
0x473: v473 = ISZERO v472
0x474: v474(0x47c) = CONST 
0x477: JUMPI v474(0x47c) v473
----------------------------------

Begin block 0x478
prev = {'0x466'}, next = {}
----------------------------------
Block 0x478
0x478: v478(0x0) = CONST 
0x47b: REVERT v478(0x0) v478(0x0)
----------------------------------

Begin block 0x47c
prev = {'0x466'}, next = {'0x7d0'}
----------------------------------
Block 0x47c
0x47e: v47e = ADD v46a(0x4) v46e
0x482: v482 = CALLDATALOAD v46a(0x4)
0x483: v483(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x498: v498 = AND v483(0xffffffffffffffffffffffffffffffffffffffff) v482
0x49a: v49a(0x20) = CONST 
0x49c: v49c = ADD v49a(0x20) v46a(0x4)
0x4a2: v4a2 = CALLDATALOAD v49c
0x4a3: v4a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4b8: v4b8 = AND v4a3(0xffffffffffffffffffffffffffffffffffffffff) v4a2
0x4ba: v4ba(0x20) = CONST 
0x4bc: v4bc = ADD v4ba(0x20) v49c
0x4c4: v4c4(0x7d0) = CONST 
0x4c7: JUMP v4c4(0x7d0)
----------------------------------

Begin block 0x4c8
prev = {'0x7d0'}, next = {}
----------------------------------
Block 0x4c8
0x4c9: v4c9(0x40) = CONST 
0x4cb: v4cb = MLOAD v4c9(0x40)
0x4cf: MSTORE v4cb v84f
0x4d0: v4d0(0x20) = CONST 
0x4d2: v4d2 = ADD v4d0(0x20) v4cb
0x4d6: v4d6(0x40) = CONST 
0x4d8: v4d8 = MLOAD v4d6(0x40)
0x4db: v4db = SUB v4d2 v4d8
0x4dd: RETURN v4d8 v4db
----------------------------------

Begin block 0x4de
prev = {'0xae'}, next = {'0xb6'}
----------------------------------
Block 0x4de
0x4df: v4df(0x40) = CONST 
0x4e1: v4e1 = MLOAD v4df(0x40)
0x4e3: v4e3(0x40) = CONST 
0x4e5: v4e5 = ADD v4e3(0x40) v4e1
0x4e6: v4e6(0x40) = CONST 
0x4e8: MSTORE v4e6(0x40) v4e5
0x4ea: v4ea(0x4) = CONST 
0x4ed: MSTORE v4e1 v4ea(0x4)
0x4ee: v4ee(0x20) = CONST 
0x4f0: v4f0 = ADD v4ee(0x20) v4e1
0x4f1: v4f1(0x5344414700000000000000000000000000000000000000000000000000000000) = CONST 
0x513: MSTORE v4f0 v4f1(0x5344414700000000000000000000000000000000000000000000000000000000)
0x516: JUMP vaf(0xb6)
----------------------------------

Begin block 0x517
prev = {'0x147'}, next = {'0x524'}
----------------------------------
Block 0x517
0x518: v518(0x0) = CONST 
0x51a: v51a(0x524) = CONST 
0x51d: v51d = CALLER 
0x520: v520(0x857) = CONST 
0x523: CALLPRIVATE v520(0x857) v16d v163 v51d v51a(0x524)
----------------------------------

Begin block 0x524
prev = {'0x517'}, next = {'0x17d'}
----------------------------------
Block 0x524
0x525: v525(0x1) = CONST 
0x52d: JUMP v132(0x17d)
----------------------------------

Begin block 0x52e
prev = {'0x197'}, next = {'0x19f'}
----------------------------------
Block 0x52e
0x52f: v52f(0x0) = CONST 
0x531: v531(0x2) = CONST 
0x533: v533 = SLOAD v531(0x2)
0x537: JUMP v198(0x19f)
----------------------------------

Begin block 0x538
prev = {'0x1cb'}, next = {'0x545'}
----------------------------------
Block 0x538
0x539: v539(0x0) = CONST 
0x53b: v53b(0x545) = CONST 
0x541: v541(0xa4e) = CONST 
0x544: CALLPRIVATE v541(0xa4e) v211 v207 v1e7 v53b(0x545)
----------------------------------

Begin block 0x545
prev = {'0x538'}, next = {'0x5d9'}
----------------------------------
Block 0x545
0x546: v546(0x5de) = CONST 
0x54a: v54a = CALLER 
0x54b: v54b(0x5d9) = CONST 
0x54f: v54f(0x1) = CONST 
0x551: v551(0x0) = CONST 
0x554: v554(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x569: v569 = AND v554(0xffffffffffffffffffffffffffffffffffffffff) v1e7
0x56a: v56a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x57f: v57f = AND v56a(0xffffffffffffffffffffffffffffffffffffffff) v569
0x581: MSTORE v551(0x0) v57f
0x582: v582(0x20) = CONST 
0x584: v584(0x20) = ADD v582(0x20) v551(0x0)
0x587: MSTORE v584(0x20) v54f(0x1)
0x588: v588(0x20) = CONST 
0x58a: v58a(0x40) = ADD v588(0x20) v584(0x20)
0x58b: v58b(0x0) = CONST 
0x58d: v58d = SHA3 v58b(0x0) v58a(0x40)
0x58e: v58e(0x0) = CONST 
0x590: v590 = CALLER 
0x591: v591(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5a6: v5a6 = AND v591(0xffffffffffffffffffffffffffffffffffffffff) v590
0x5a7: v5a7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5bc: v5bc = AND v5a7(0xffffffffffffffffffffffffffffffffffffffff) v5a6
0x5be: MSTORE v58e(0x0) v5bc
0x5bf: v5bf(0x20) = CONST 
0x5c1: v5c1(0x20) = ADD v5bf(0x20) v58e(0x0)
0x5c4: MSTORE v5c1(0x20) v58d
0x5c5: v5c5(0x20) = CONST 
0x5c7: v5c7(0x40) = ADD v5c5(0x20) v5c1(0x20)
0x5c8: v5c8(0x0) = CONST 
0x5ca: v5ca = SHA3 v5c8(0x0) v5c7(0x40)
0x5cb: v5cb = SLOAD v5ca
0x5cc: v5cc(0xcea) = CONST 
0x5d2: v5d2(0xffffffff) = CONST 
0x5d7: v5d7(0xcea) = AND v5d2(0xffffffff) v5cc(0xcea)
0x5d8: v5d8_0 = CALLPRIVATE v5d7(0xcea) v211 v5cb v54b(0x5d9)
----------------------------------

Begin block 0x5d9
prev = {'0x545'}, next = {'0x5de'}
----------------------------------
Block 0x5d9
0x5da: v5da(0x857) = CONST 
0x5dd: CALLPRIVATE v5da(0x857) v5d8_0 v54a v1e7 v546(0x5de)
----------------------------------

Begin block 0x5de
prev = {'0x5d9'}, next = {'0x221'}
----------------------------------
Block 0x5de
0x5df: v5df(0x1) = CONST 
0x5e8: JUMP v1b6(0x221)
----------------------------------

Begin block 0x5e9
prev = {'0x23b'}, next = {'0x243'}
----------------------------------
Block 0x5e9
0x5ea: v5ea(0x12) = CONST 
0x5ed: JUMP v23c(0x243)
----------------------------------

Begin block 0x5ee
prev = {'0x26f'}, next = {'0x684'}
----------------------------------
Block 0x5ee
0x5ef: v5ef(0x0) = CONST 
0x5f1: v5f1(0x689) = CONST 
0x5f4: v5f4 = CALLER 
0x5f6: v5f6(0x684) = CONST 
0x5fa: v5fa(0x1) = CONST 
0x5fc: v5fc(0x0) = CONST 
0x5fe: v5fe = CALLER 
0x5ff: v5ff(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x614: v614 = AND v5ff(0xffffffffffffffffffffffffffffffffffffffff) v5fe
0x615: v615(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x62a: v62a = AND v615(0xffffffffffffffffffffffffffffffffffffffff) v614
0x62c: MSTORE v5fc(0x0) v62a
0x62d: v62d(0x20) = CONST 
0x62f: v62f(0x20) = ADD v62d(0x20) v5fc(0x0)
0x632: MSTORE v62f(0x20) v5fa(0x1)
0x633: v633(0x20) = CONST 
0x635: v635(0x40) = ADD v633(0x20) v62f(0x20)
0x636: v636(0x0) = CONST 
0x638: v638 = SHA3 v636(0x0) v635(0x40)
0x639: v639(0x0) = CONST 
0x63c: v63c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x651: v651 = AND v63c(0xffffffffffffffffffffffffffffffffffffffff) v28b
0x652: v652(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x667: v667 = AND v652(0xffffffffffffffffffffffffffffffffffffffff) v651
0x669: MSTORE v639(0x0) v667
0x66a: v66a(0x20) = CONST 
0x66c: v66c(0x20) = ADD v66a(0x20) v639(0x0)
0x66f: MSTORE v66c(0x20) v638
0x670: v670(0x20) = CONST 
0x672: v672(0x40) = ADD v670(0x20) v66c(0x20)
0x673: v673(0x0) = CONST 
0x675: v675 = SHA3 v673(0x0) v672(0x40)
0x676: v676 = SLOAD v675
0x677: v677(0xd73) = CONST 
0x67d: v67d(0xffffffff) = CONST 
0x682: v682(0xd73) = AND v67d(0xffffffff) v677(0xd73)
0x683: v683_0 = CALLPRIVATE v682(0xd73) v295 v676 v5f6(0x684)
----------------------------------

Begin block 0x684
prev = {'0x5ee'}, next = {'0x689'}
----------------------------------
Block 0x684
0x685: v685(0x857) = CONST 
0x688: CALLPRIVATE v685(0x857) v683_0 v28b v5f4 v5f1(0x689)
----------------------------------

Begin block 0x689
prev = {'0x684'}, next = {'0x2a5'}
----------------------------------
Block 0x689
0x68a: v68a(0x1) = CONST 
0x692: JUMP v25a(0x2a5)
----------------------------------

Begin block 0x693
prev = {'0x2d5'}, next = {'0x301'}
----------------------------------
Block 0x693
0x694: v694(0x0) = CONST 
0x697: v697(0x0) = CONST 
0x69a: v69a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6af: v6af = AND v69a(0xffffffffffffffffffffffffffffffffffffffff) v2f1
0x6b0: v6b0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6c5: v6c5 = AND v6b0(0xffffffffffffffffffffffffffffffffffffffff) v6af
0x6c7: MSTORE v697(0x0) v6c5
0x6c8: v6c8(0x20) = CONST 
0x6ca: v6ca(0x20) = ADD v6c8(0x20) v697(0x0)
0x6cd: MSTORE v6ca(0x20) v694(0x0)
0x6ce: v6ce(0x20) = CONST 
0x6d0: v6d0(0x40) = ADD v6ce(0x20) v6ca(0x20)
0x6d1: v6d1(0x0) = CONST 
0x6d3: v6d3 = SHA3 v6d1(0x0) v6d0(0x40)
0x6d4: v6d4 = SLOAD v6d3
0x6da: JUMP v2c0(0x301)
----------------------------------

Begin block 0x6db
prev = {'0x317'}, next = {'0x31f'}
----------------------------------
Block 0x6db
0x6dc: v6dc(0x40) = CONST 
0x6de: v6de = MLOAD v6dc(0x40)
0x6e0: v6e0(0x40) = CONST 
0x6e2: v6e2 = ADD v6e0(0x40) v6de
0x6e3: v6e3(0x40) = CONST 
0x6e5: MSTORE v6e3(0x40) v6e2
0x6e7: v6e7(0x4) = CONST 
0x6ea: MSTORE v6de v6e7(0x4)
0x6eb: v6eb(0x20) = CONST 
0x6ed: v6ed = ADD v6eb(0x20) v6de
0x6ee: v6ee(0x5344414700000000000000000000000000000000000000000000000000000000) = CONST 
0x710: MSTORE v6ed v6ee(0x5344414700000000000000000000000000000000000000000000000000000000)
0x713: JUMP v318(0x31f)
----------------------------------

Begin block 0x714
prev = {'0x3b0'}, next = {'0x7aa'}
----------------------------------
Block 0x714
0x715: v715(0x0) = CONST 
0x717: v717(0x7af) = CONST 
0x71a: v71a = CALLER 
0x71c: v71c(0x7aa) = CONST 
0x720: v720(0x1) = CONST 
0x722: v722(0x0) = CONST 
0x724: v724 = CALLER 
0x725: v725(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x73a: v73a = AND v725(0xffffffffffffffffffffffffffffffffffffffff) v724
0x73b: v73b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x750: v750 = AND v73b(0xffffffffffffffffffffffffffffffffffffffff) v73a
0x752: MSTORE v722(0x0) v750
0x753: v753(0x20) = CONST 
0x755: v755(0x20) = ADD v753(0x20) v722(0x0)
0x758: MSTORE v755(0x20) v720(0x1)
0x759: v759(0x20) = CONST 
0x75b: v75b(0x40) = ADD v759(0x20) v755(0x20)
0x75c: v75c(0x0) = CONST 
0x75e: v75e = SHA3 v75c(0x0) v75b(0x40)
0x75f: v75f(0x0) = CONST 
0x762: v762(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x777: v777 = AND v762(0xffffffffffffffffffffffffffffffffffffffff) v3cc
0x778: v778(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x78d: v78d = AND v778(0xffffffffffffffffffffffffffffffffffffffff) v777
0x78f: MSTORE v75f(0x0) v78d
0x790: v790(0x20) = CONST 
0x792: v792(0x20) = ADD v790(0x20) v75f(0x0)
0x795: MSTORE v792(0x20) v75e
0x796: v796(0x20) = CONST 
0x798: v798(0x40) = ADD v796(0x20) v792(0x20)
0x799: v799(0x0) = CONST 
0x79b: v79b = SHA3 v799(0x0) v798(0x40)
0x79c: v79c = SLOAD v79b
0x79d: v79d(0xcea) = CONST 
0x7a3: v7a3(0xffffffff) = CONST 
0x7a8: v7a8(0xcea) = AND v7a3(0xffffffff) v79d(0xcea)
0x7a9: v7a9_0 = CALLPRIVATE v7a8(0xcea) v3d6 v79c v71c(0x7aa)
----------------------------------

Begin block 0x7aa
prev = {'0x714'}, next = {'0x7af'}
----------------------------------
Block 0x7aa
0x7ab: v7ab(0x857) = CONST 
0x7ae: CALLPRIVATE v7ab(0x857) v7a9_0 v3cc v71a v717(0x7af)
----------------------------------

Begin block 0x7af
prev = {'0x7aa'}, next = {'0x3e6'}
----------------------------------
Block 0x7af
0x7b0: v7b0(0x1) = CONST 
0x7b8: JUMP v39b(0x3e6)
----------------------------------

Begin block 0x7b9
prev = {'0x416'}, next = {'0x7c6'}
----------------------------------
Block 0x7b9
0x7ba: v7ba(0x0) = CONST 
0x7bc: v7bc(0x7c6) = CONST 
0x7bf: v7bf = CALLER 
0x7c2: v7c2(0xa4e) = CONST 
0x7c5: CALLPRIVATE v7c2(0xa4e) v43c v432 v7bf v7bc(0x7c6)
----------------------------------

Begin block 0x7c6
prev = {'0x7b9'}, next = {'0x44c'}
----------------------------------
Block 0x7c6
0x7c7: v7c7(0x1) = CONST 
0x7cf: JUMP v401(0x44c)
----------------------------------

Begin block 0x7d0
prev = {'0x47c'}, next = {'0x4c8'}
----------------------------------
Block 0x7d0
0x7d1: v7d1(0x0) = CONST 
0x7d3: v7d3(0x1) = CONST 
0x7d5: v7d5(0x0) = CONST 
0x7d8: v7d8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ed: v7ed = AND v7d8(0xffffffffffffffffffffffffffffffffffffffff) v498
0x7ee: v7ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x803: v803 = AND v7ee(0xffffffffffffffffffffffffffffffffffffffff) v7ed
0x805: MSTORE v7d5(0x0) v803
0x806: v806(0x20) = CONST 
0x808: v808(0x20) = ADD v806(0x20) v7d5(0x0)
0x80b: MSTORE v808(0x20) v7d3(0x1)
0x80c: v80c(0x20) = CONST 
0x80e: v80e(0x40) = ADD v80c(0x20) v808(0x20)
0x80f: v80f(0x0) = CONST 
0x811: v811 = SHA3 v80f(0x0) v80e(0x40)
0x812: v812(0x0) = CONST 
0x815: v815(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x82a: v82a = AND v815(0xffffffffffffffffffffffffffffffffffffffff) v4b8
0x82b: v82b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x840: v840 = AND v82b(0xffffffffffffffffffffffffffffffffffffffff) v82a
0x842: MSTORE v812(0x0) v840
0x843: v843(0x20) = CONST 
0x845: v845(0x20) = ADD v843(0x20) v812(0x0)
0x848: MSTORE v845(0x20) v811
0x849: v849(0x20) = CONST 
0x84b: v84b(0x40) = ADD v849(0x20) v845(0x20)
0x84c: v84c(0x0) = CONST 
0x84e: v84e = SHA3 v84c(0x0) v84b(0x40)
0x84f: v84f = SLOAD v84e
0x856: JUMP v467(0x4c8)
----------------------------------

Begin block 0x857
prev = {}, next = {'0x88d', '0x8dd'}
----------------------------------
function 0x857(v857arg0, v857arg1, v857arg2, v857arg3)
Block 0x857
0x858: v858(0x0) = CONST 
0x85a: v85a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x86f: v86f(0x0) = AND v85a(0xffffffffffffffffffffffffffffffffffffffff) v858(0x0)
0x871: v871(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x886: v886 = AND v871(0xffffffffffffffffffffffffffffffffffffffff) v857arg2
0x887: v887 = EQ v886 v86f(0x0)
0x888: v888 = ISZERO v887
0x889: v889(0x8dd) = CONST 
0x88c: JUMPI v889(0x8dd) v888
----------------------------------

Begin block 0x88d
prev = {'0x857'}, next = {}
----------------------------------
Block 0x88d
0x88d: v88d(0x40) = CONST 
0x88f: v88f = MLOAD v88d(0x40)
0x890: v890(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x8b2: MSTORE v88f v890(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x8b3: v8b3(0x4) = CONST 
0x8b5: v8b5 = ADD v8b3(0x4) v88f
0x8b8: v8b8(0x20) = CONST 
0x8ba: v8ba = ADD v8b8(0x20) v8b5
0x8bd: v8bd = SUB v8ba v8b5
0x8bf: MSTORE v8b5 v8bd
0x8c0: v8c0(0x24) = CONST 
0x8c3: MSTORE v8ba v8c0(0x24)
0x8c4: v8c4(0x20) = CONST 
0x8c6: v8c6 = ADD v8c4(0x20) v8ba
0x8c8: v8c8(0xe66) = CONST 
0x8cb: v8cb(0x24) = CONST 
0x8ce: CODECOPY v8c6 v8c8(0xe66) v8cb(0x24)
0x8cf: v8cf(0x40) = CONST 
0x8d1: v8d1 = ADD v8cf(0x40) v8c6
0x8d5: v8d5(0x40) = CONST 
0x8d7: v8d7 = MLOAD v8d5(0x40)
0x8da: v8da = SUB v8d1 v8d7
0x8dc: REVERT v8d7 v8da
----------------------------------

Begin block 0x8dd
prev = {'0x857'}, next = {'0x913', '0x963'}
----------------------------------
Block 0x8dd
0x8de: v8de(0x0) = CONST 
0x8e0: v8e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f5: v8f5(0x0) = AND v8e0(0xffffffffffffffffffffffffffffffffffffffff) v8de(0x0)
0x8f7: v8f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x90c: v90c = AND v8f7(0xffffffffffffffffffffffffffffffffffffffff) v857arg1
0x90d: v90d = EQ v90c v8f5(0x0)
0x90e: v90e = ISZERO v90d
0x90f: v90f(0x963) = CONST 
0x912: JUMPI v90f(0x963) v90e
----------------------------------

Begin block 0x913
prev = {'0x8dd'}, next = {}
----------------------------------
Block 0x913
0x913: v913(0x40) = CONST 
0x915: v915 = MLOAD v913(0x40)
0x916: v916(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0x938: MSTORE v915 v916(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x939: v939(0x4) = CONST 
0x93b: v93b = ADD v939(0x4) v915
0x93e: v93e(0x20) = CONST 
0x940: v940 = ADD v93e(0x20) v93b
0x943: v943 = SUB v940 v93b
0x945: MSTORE v93b v943
0x946: v946(0x22) = CONST 
0x949: MSTORE v940 v946(0x22)
0x94a: v94a(0x20) = CONST 
0x94c: v94c = ADD v94a(0x20) v940
0x94e: v94e(0xe1f) = CONST 
0x951: v951(0x22) = CONST 
0x954: CODECOPY v94c v94e(0xe1f) v951(0x22)
0x955: v955(0x40) = CONST 
0x957: v957 = ADD v955(0x40) v94c
0x95b: v95b(0x40) = CONST 
0x95d: v95d = MLOAD v95b(0x40)
0x960: v960 = SUB v957 v95d
0x962: REVERT v95d v960
----------------------------------

Begin block 0x963
prev = {'0x8dd'}, next = {}
----------------------------------
Block 0x963
0x965: v965(0x1) = CONST 
0x967: v967(0x0) = CONST 
0x96a: v96a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x97f: v97f = AND v96a(0xffffffffffffffffffffffffffffffffffffffff) v857arg2
0x980: v980(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x995: v995 = AND v980(0xffffffffffffffffffffffffffffffffffffffff) v97f
0x997: MSTORE v967(0x0) v995
0x998: v998(0x20) = CONST 
0x99a: v99a(0x20) = ADD v998(0x20) v967(0x0)
0x99d: MSTORE v99a(0x20) v965(0x1)
0x99e: v99e(0x20) = CONST 
0x9a0: v9a0(0x40) = ADD v99e(0x20) v99a(0x20)
0x9a1: v9a1(0x0) = CONST 
0x9a3: v9a3 = SHA3 v9a1(0x0) v9a0(0x40)
0x9a4: v9a4(0x0) = CONST 
0x9a7: v9a7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9bc: v9bc = AND v9a7(0xffffffffffffffffffffffffffffffffffffffff) v857arg1
0x9bd: v9bd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9d2: v9d2 = AND v9bd(0xffffffffffffffffffffffffffffffffffffffff) v9bc
0x9d4: MSTORE v9a4(0x0) v9d2
0x9d5: v9d5(0x20) = CONST 
0x9d7: v9d7(0x20) = ADD v9d5(0x20) v9a4(0x0)
0x9da: MSTORE v9d7(0x20) v9a3
0x9db: v9db(0x20) = CONST 
0x9dd: v9dd(0x40) = ADD v9db(0x20) v9d7(0x20)
0x9de: v9de(0x0) = CONST 
0x9e0: v9e0 = SHA3 v9de(0x0) v9dd(0x40)
0x9e3: SSTORE v9e0 v857arg0
0x9e6: v9e6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9fb: v9fb = AND v9e6(0xffffffffffffffffffffffffffffffffffffffff) v857arg1
0x9fd: v9fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa12: va12 = AND v9fd(0xffffffffffffffffffffffffffffffffffffffff) v857arg2
0xa13: va13(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0xa35: va35(0x40) = CONST 
0xa37: va37 = MLOAD va35(0x40)
0xa3b: MSTORE va37 v857arg0
0xa3c: va3c(0x20) = CONST 
0xa3e: va3e = ADD va3c(0x20) va37
0xa42: va42(0x40) = CONST 
0xa44: va44 = MLOAD va42(0x40)
0xa47: va47 = SUB va3e va44
0xa49: LOG3 va44 va47 va13(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) va12 v9fb
0xa4d: RETURNPRIVATE v857arg3
----------------------------------

Begin block 0xa4e
prev = {}, next = {'0xa84', '0xad4'}
----------------------------------
function 0xa4e(va4earg0, va4earg1, va4earg2, va4earg3)
Block 0xa4e
0xa4f: va4f(0x0) = CONST 
0xa51: va51(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa66: va66(0x0) = AND va51(0xffffffffffffffffffffffffffffffffffffffff) va4f(0x0)
0xa68: va68(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa7d: va7d = AND va68(0xffffffffffffffffffffffffffffffffffffffff) va4earg2
0xa7e: va7e = EQ va7d va66(0x0)
0xa7f: va7f = ISZERO va7e
0xa80: va80(0xad4) = CONST 
0xa83: JUMPI va80(0xad4) va7f
----------------------------------

Begin block 0xa84
prev = {'0xa4e'}, next = {}
----------------------------------
Block 0xa84
0xa84: va84(0x40) = CONST 
0xa86: va86 = MLOAD va84(0x40)
0xa87: va87(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xaa9: MSTORE va86 va87(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xaaa: vaaa(0x4) = CONST 
0xaac: vaac = ADD vaaa(0x4) va86
0xaaf: vaaf(0x20) = CONST 
0xab1: vab1 = ADD vaaf(0x20) vaac
0xab4: vab4 = SUB vab1 vaac
0xab6: MSTORE vaac vab4
0xab7: vab7(0x25) = CONST 
0xaba: MSTORE vab1 vab7(0x25)
0xabb: vabb(0x20) = CONST 
0xabd: vabd = ADD vabb(0x20) vab1
0xabf: vabf(0xe41) = CONST 
0xac2: vac2(0x25) = CONST 
0xac5: CODECOPY vabd vabf(0xe41) vac2(0x25)
0xac6: vac6(0x40) = CONST 
0xac8: vac8 = ADD vac6(0x40) vabd
0xacc: vacc(0x40) = CONST 
0xace: vace = MLOAD vacc(0x40)
0xad1: vad1 = SUB vac8 vace
0xad3: REVERT vace vad1
----------------------------------

Begin block 0xad4
prev = {'0xa4e'}, next = {'0xb5a', '0xb0a'}
----------------------------------
Block 0xad4
0xad5: vad5(0x0) = CONST 
0xad7: vad7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaec: vaec(0x0) = AND vad7(0xffffffffffffffffffffffffffffffffffffffff) vad5(0x0)
0xaee: vaee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb03: vb03 = AND vaee(0xffffffffffffffffffffffffffffffffffffffff) va4earg1
0xb04: vb04 = EQ vb03 vaec(0x0)
0xb05: vb05 = ISZERO vb04
0xb06: vb06(0xb5a) = CONST 
0xb09: JUMPI vb06(0xb5a) vb05
----------------------------------

Begin block 0xb0a
prev = {'0xad4'}, next = {}
----------------------------------
Block 0xb0a
0xb0a: vb0a(0x40) = CONST 
0xb0c: vb0c = MLOAD vb0a(0x40)
0xb0d: vb0d(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xb2f: MSTORE vb0c vb0d(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xb30: vb30(0x4) = CONST 
0xb32: vb32 = ADD vb30(0x4) vb0c
0xb35: vb35(0x20) = CONST 
0xb37: vb37 = ADD vb35(0x20) vb32
0xb3a: vb3a = SUB vb37 vb32
0xb3c: MSTORE vb32 vb3a
0xb3d: vb3d(0x23) = CONST 
0xb40: MSTORE vb37 vb3d(0x23)
0xb41: vb41(0x20) = CONST 
0xb43: vb43 = ADD vb41(0x20) vb37
0xb45: vb45(0xdfc) = CONST 
0xb48: vb48(0x23) = CONST 
0xb4b: CODECOPY vb43 vb45(0xdfc) vb48(0x23)
0xb4c: vb4c(0x40) = CONST 
0xb4e: vb4e = ADD vb4c(0x40) vb43
0xb52: vb52(0x40) = CONST 
0xb54: vb54 = MLOAD vb52(0x40)
0xb57: vb57 = SUB vb4e vb54
0xb59: REVERT vb54 vb57
----------------------------------

Begin block 0xb5a
prev = {'0xad4'}, next = {'0xbab'}
----------------------------------
Block 0xb5a
0xb5b: vb5b(0xbab) = CONST 
0xb5f: vb5f(0x0) = CONST 
0xb63: vb63(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb78: vb78 = AND vb63(0xffffffffffffffffffffffffffffffffffffffff) va4earg2
0xb79: vb79(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb8e: vb8e = AND vb79(0xffffffffffffffffffffffffffffffffffffffff) vb78
0xb90: MSTORE vb5f(0x0) vb8e
0xb91: vb91(0x20) = CONST 
0xb93: vb93(0x20) = ADD vb91(0x20) vb5f(0x0)
0xb96: MSTORE vb93(0x20) vb5f(0x0)
0xb97: vb97(0x20) = CONST 
0xb99: vb99(0x40) = ADD vb97(0x20) vb93(0x20)
0xb9a: vb9a(0x0) = CONST 
0xb9c: vb9c = SHA3 vb9a(0x0) vb99(0x40)
0xb9d: vb9d = SLOAD vb9c
0xb9e: vb9e(0xcea) = CONST 
0xba4: vba4(0xffffffff) = CONST 
0xba9: vba9(0xcea) = AND vba4(0xffffffff) vb9e(0xcea)
0xbaa: vbaa_0 = CALLPRIVATE vba9(0xcea) va4earg0 vb9d vb5b(0xbab)
----------------------------------

Begin block 0xbab
prev = {'0xb5a'}, next = {'0xc3e'}
----------------------------------
Block 0xbab
0xbac: vbac(0x0) = CONST 
0xbb0: vbb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbc5: vbc5 = AND vbb0(0xffffffffffffffffffffffffffffffffffffffff) va4earg2
0xbc6: vbc6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbdb: vbdb = AND vbc6(0xffffffffffffffffffffffffffffffffffffffff) vbc5
0xbdd: MSTORE vbac(0x0) vbdb
0xbde: vbde(0x20) = CONST 
0xbe0: vbe0(0x20) = ADD vbde(0x20) vbac(0x0)
0xbe3: MSTORE vbe0(0x20) vbac(0x0)
0xbe4: vbe4(0x20) = CONST 
0xbe6: vbe6(0x40) = ADD vbe4(0x20) vbe0(0x20)
0xbe7: vbe7(0x0) = CONST 
0xbe9: vbe9 = SHA3 vbe7(0x0) vbe6(0x40)
0xbec: SSTORE vbe9 vbaa_0
0xbee: vbee(0xc3e) = CONST 
0xbf2: vbf2(0x0) = CONST 
0xbf6: vbf6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc0b: vc0b = AND vbf6(0xffffffffffffffffffffffffffffffffffffffff) va4earg1
0xc0c: vc0c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc21: vc21 = AND vc0c(0xffffffffffffffffffffffffffffffffffffffff) vc0b
0xc23: MSTORE vbf2(0x0) vc21
0xc24: vc24(0x20) = CONST 
0xc26: vc26(0x20) = ADD vc24(0x20) vbf2(0x0)
0xc29: MSTORE vc26(0x20) vbf2(0x0)
0xc2a: vc2a(0x20) = CONST 
0xc2c: vc2c(0x40) = ADD vc2a(0x20) vc26(0x20)
0xc2d: vc2d(0x0) = CONST 
0xc2f: vc2f = SHA3 vc2d(0x0) vc2c(0x40)
0xc30: vc30 = SLOAD vc2f
0xc31: vc31(0xd73) = CONST 
0xc37: vc37(0xffffffff) = CONST 
0xc3c: vc3c(0xd73) = AND vc37(0xffffffff) vc31(0xd73)
0xc3d: vc3d_0 = CALLPRIVATE vc3c(0xd73) va4earg0 vc30 vbee(0xc3e)
----------------------------------

Begin block 0xc3e
prev = {'0xbab'}, next = {}
----------------------------------
Block 0xc3e
0xc3f: vc3f(0x0) = CONST 
0xc43: vc43(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc58: vc58 = AND vc43(0xffffffffffffffffffffffffffffffffffffffff) va4earg1
0xc59: vc59(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc6e: vc6e = AND vc59(0xffffffffffffffffffffffffffffffffffffffff) vc58
0xc70: MSTORE vc3f(0x0) vc6e
0xc71: vc71(0x20) = CONST 
0xc73: vc73(0x20) = ADD vc71(0x20) vc3f(0x0)
0xc76: MSTORE vc73(0x20) vc3f(0x0)
0xc77: vc77(0x20) = CONST 
0xc79: vc79(0x40) = ADD vc77(0x20) vc73(0x20)
0xc7a: vc7a(0x0) = CONST 
0xc7c: vc7c = SHA3 vc7a(0x0) vc79(0x40)
0xc7f: SSTORE vc7c vc3d_0
0xc82: vc82(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc97: vc97 = AND vc82(0xffffffffffffffffffffffffffffffffffffffff) va4earg1
0xc99: vc99(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcae: vcae = AND vc99(0xffffffffffffffffffffffffffffffffffffffff) va4earg2
0xcaf: vcaf(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xcd1: vcd1(0x40) = CONST 
0xcd3: vcd3 = MLOAD vcd1(0x40)
0xcd7: MSTORE vcd3 va4earg0
0xcd8: vcd8(0x20) = CONST 
0xcda: vcda = ADD vcd8(0x20) vcd3
0xcde: vcde(0x40) = CONST 
0xce0: vce0 = MLOAD vcde(0x40)
0xce3: vce3 = SUB vcda vce0
0xce5: LOG3 vce0 vce3 vcaf(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vcae vc97
0xce9: RETURNPRIVATE va4earg3
----------------------------------

Begin block 0xcea
prev = {}, next = {'0xcf5', '0xd62'}
----------------------------------
function 0xcea(vceaarg0, vceaarg1, vceaarg2)
Block 0xcea
0xceb: vceb(0x0) = CONST 
0xcef: vcef = GT vceaarg0 vceaarg1
0xcf0: vcf0 = ISZERO vcef
0xcf1: vcf1(0xd62) = CONST 
0xcf4: JUMPI vcf1(0xd62) vcf0
----------------------------------

Begin block 0xcf5
prev = {'0xcea'}, next = {}
----------------------------------
Block 0xcf5
0xcf5: vcf5(0x40) = CONST 
0xcf7: vcf7 = MLOAD vcf5(0x40)
0xcf8: vcf8(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xd1a: MSTORE vcf7 vcf8(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xd1b: vd1b(0x4) = CONST 
0xd1d: vd1d = ADD vd1b(0x4) vcf7
0xd20: vd20(0x20) = CONST 
0xd22: vd22 = ADD vd20(0x20) vd1d
0xd25: vd25 = SUB vd22 vd1d
0xd27: MSTORE vd1d vd25
0xd28: vd28(0x1e) = CONST 
0xd2b: MSTORE vd22 vd28(0x1e)
0xd2c: vd2c(0x20) = CONST 
0xd2e: vd2e = ADD vd2c(0x20) vd22
0xd30: vd30(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
0xd52: MSTORE vd2e vd30(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
0xd54: vd54(0x20) = CONST 
0xd56: vd56 = ADD vd54(0x20) vd2e
0xd5a: vd5a(0x40) = CONST 
0xd5c: vd5c = MLOAD vd5a(0x40)
0xd5f: vd5f = SUB vd56 vd5c
0xd61: REVERT vd5c vd5f
----------------------------------

Begin block 0xd62
prev = {'0xcea'}, next = {}
----------------------------------
Block 0xd62
0xd63: vd63(0x0) = CONST 
0xd67: vd67 = SUB vceaarg1 vceaarg0
0xd72: RETURNPRIVATE vceaarg2 vd67
----------------------------------

Begin block 0xd73
prev = {}, next = {'0xd84', '0xdf1'}
----------------------------------
function 0xd73(vd73arg0, vd73arg1, vd73arg2)
Block 0xd73
0xd74: vd74(0x0) = CONST 
0xd79: vd79 = ADD vd73arg1 vd73arg0
0xd7e: vd7e = LT vd79 vd73arg1
0xd7f: vd7f = ISZERO vd7e
0xd80: vd80(0xdf1) = CONST 
0xd83: JUMPI vd80(0xdf1) vd7f
----------------------------------

Begin block 0xd84
prev = {'0xd73'}, next = {}
----------------------------------
Block 0xd84
0xd84: vd84(0x40) = CONST 
0xd86: vd86 = MLOAD vd84(0x40)
0xd87: vd87(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
0xda9: MSTORE vd86 vd87(0x8c379a000000000000000000000000000000000000000000000000000000000)
0xdaa: vdaa(0x4) = CONST 
0xdac: vdac = ADD vdaa(0x4) vd86
0xdaf: vdaf(0x20) = CONST 
0xdb1: vdb1 = ADD vdaf(0x20) vdac
0xdb4: vdb4 = SUB vdb1 vdac
0xdb6: MSTORE vdac vdb4
0xdb7: vdb7(0x1b) = CONST 
0xdba: MSTORE vdb1 vdb7(0x1b)
0xdbb: vdbb(0x20) = CONST 
0xdbd: vdbd = ADD vdbb(0x20) vdb1
0xdbf: vdbf(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
0xde1: MSTORE vdbd vdbf(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
0xde3: vde3(0x20) = CONST 
0xde5: vde5 = ADD vde3(0x20) vdbd
0xde9: vde9(0x40) = CONST 
0xdeb: vdeb = MLOAD vde9(0x40)
0xdee: vdee = SUB vde5 vdeb
0xdf0: REVERT vdeb vdee
----------------------------------

Begin block 0xdf1
prev = {'0xd73'}, next = {}
----------------------------------
Block 0xdf1
0xdfa: RETURNPRIVATE vd73arg2 vd79
----------------------------------

Begin block 0xebf
prev = {'0x9e', '0x10'}, next = {'0xa90x0'}
----------------------------------
Block 0xebf
0xec0: vec0(0xa9) = CONST 
0xec1: CALLPRIVATE vec0(0xa9)
----------------------------------

Begin block 0xec2
prev = {'0x71'}, next = {}
----------------------------------
Block 0xec2
0xec3: vec3(0xae) = CONST 
0xec4: CALLPRIVATE vec3(0xae)
----------------------------------

Begin block 0xec5
prev = {'0x7d'}, next = {}
----------------------------------
Block 0xec5
0xec6: vec6(0x131) = CONST 
0xec7: CALLPRIVATE vec6(0x131)
----------------------------------

Begin block 0xec8
prev = {'0x88'}, next = {}
----------------------------------
Block 0xec8
0xec9: vec9(0x197) = CONST 
0xeca: CALLPRIVATE vec9(0x197)
----------------------------------

Begin block 0xecb
prev = {'0x93'}, next = {}
----------------------------------
Block 0xecb
0xecc: vecc(0x1b5) = CONST 
0xecd: CALLPRIVATE vecc(0x1b5)
----------------------------------

Begin block 0xece
prev = {'0x9e'}, next = {}
----------------------------------
Block 0xece
0xecf: vecf(0x23b) = CONST 
0xed0: CALLPRIVATE vecf(0x23b)
----------------------------------

Begin block 0xed1
prev = {'0x2b'}, next = {}
----------------------------------
Block 0xed1
0xed2: ved2(0x259) = CONST 
0xed3: CALLPRIVATE ved2(0x259)
----------------------------------

Begin block 0xed4
prev = {'0x36'}, next = {}
----------------------------------
Block 0xed4
0xed5: ved5(0x2bf) = CONST 
0xed6: CALLPRIVATE ved5(0x2bf)
----------------------------------

Begin block 0xed7
prev = {'0x41'}, next = {}
----------------------------------
Block 0xed7
0xed8: ved8(0x317) = CONST 
0xed9: CALLPRIVATE ved8(0x317)
----------------------------------

Begin block 0xeda
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xeda
0xedb: vedb(0x39a) = CONST 
0xedc: CALLPRIVATE vedb(0x39a)
----------------------------------

Begin block 0xedd
prev = {'0x57'}, next = {}
----------------------------------
Block 0xedd
0xede: vede(0x400) = CONST 
0xedf: CALLPRIVATE vede(0x400)
----------------------------------

Begin block 0xee0
prev = {'0x62'}, next = {}
----------------------------------
Block 0xee0
0xee1: vee1(0x466) = CONST 
0xee2: CALLPRIVATE vee1(0x466)
----------------------------------
