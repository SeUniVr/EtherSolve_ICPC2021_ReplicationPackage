
Begin block 0x0
prev = {}, next = {'0x10', '0xc'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5 = CALLVALUE 
0x7: v7 = ISZERO v5
0x8: v8(0x10) = CONST 
0xb: JUMPI v8(0x10) v7
----------------------------------

Begin block 0xc
prev = {'0x0'}, next = {}
----------------------------------
Block 0xc
0xc: vc(0x0) = CONST 
0xf: REVERT vc(0x0) vc(0x0)
----------------------------------

Begin block 0x10
prev = {'0x0'}, next = {'0x1a', '0x8fb'}
----------------------------------
Block 0x10
0x12: v12(0x4) = CONST 
0x14: v14 = CALLDATASIZE 
0x15: v15 = LT v14 v12(0x4)
0x8e3: v8e3(0x8fb) = CONST 
0x8e4: JUMPI v8e3(0x8fb) v15
----------------------------------

Begin block 0x1a
prev = {'0x10'}, next = {'0x71', '0x2b'}
----------------------------------
Block 0x1a
0x1a: v1a(0x0) = CONST 
0x1c: v1c = CALLDATALOAD v1a(0x0)
0x1d: v1d(0xe0) = CONST 
0x1f: v1f = SHR v1d(0xe0) v1c
0x21: v21(0x8da5cb5b) = CONST 
0x26: v26 = GT v21(0x8da5cb5b) v1f
0x27: v27(0x71) = CONST 
0x2a: JUMPI v27(0x71) v26
----------------------------------

Begin block 0x2b
prev = {'0x1a'}, next = {'0x36', '0x90d'}
----------------------------------
Block 0x2b
0x2c: v2c(0x8da5cb5b) = CONST 
0x31: v31 = EQ v2c(0x8da5cb5b) v1f
0x8e5: v8e5(0x90d) = CONST 
0x8e6: JUMPI v8e5(0x90d) v31
----------------------------------

Begin block 0x36
prev = {'0x2b'}, next = {'0x910', '0x41'}
----------------------------------
Block 0x36
0x37: v37(0x8f32d59b) = CONST 
0x3c: v3c = EQ v37(0x8f32d59b) v1f
0x8e7: v8e7(0x910) = CONST 
0x8e8: JUMPI v8e7(0x910) v3c
----------------------------------

Begin block 0x41
prev = {'0x36'}, next = {'0x4c', '0x913'}
----------------------------------
Block 0x41
0x42: v42(0xc4d66de8) = CONST 
0x47: v47 = EQ v42(0xc4d66de8) v1f
0x8e9: v8e9(0x913) = CONST 
0x8ea: JUMPI v8e9(0x913) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0x916'}
----------------------------------
Block 0x4c
0x4d: v4d(0xd4ce1415) = CONST 
0x52: v52 = EQ v4d(0xd4ce1415) v1f
0x8eb: v8eb(0x916) = CONST 
0x8ec: JUMPI v8eb(0x916) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0x62', '0x919'}
----------------------------------
Block 0x57
0x58: v58(0xd8b964e6) = CONST 
0x5d: v5d = EQ v58(0xd8b964e6) v1f
0x8ed: v8ed(0x919) = CONST 
0x8ee: JUMPI v8ed(0x919) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0x91c'}
----------------------------------
Block 0x62
0x63: v63(0xf2fde38b) = CONST 
0x68: v68 = EQ v63(0xf2fde38b) v1f
0x8ef: v8ef(0x91c) = CONST 
0x8f0: JUMPI v8ef(0x91c) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0xa90x0'}
----------------------------------
Block 0x6d
0x6d: v6d(0xa9) = CONST 
0x70: JUMP v6d(0xa9)
----------------------------------

Begin block 0x71
prev = {'0x1a'}, next = {'0x8fe', '0x7d'}
----------------------------------
Block 0x71
0x73: v73(0x36dffedf) = CONST 
0x78: v78 = EQ v73(0x36dffedf) v1f
0x8f1: v8f1(0x8fe) = CONST 
0x8f2: JUMPI v8f1(0x8fe) v78
----------------------------------

Begin block 0x7d
prev = {'0x71'}, next = {'0x901', '0x88'}
----------------------------------
Block 0x7d
0x7e: v7e(0x3d140d21) = CONST 
0x83: v83 = EQ v7e(0x3d140d21) v1f
0x8f3: v8f3(0x901) = CONST 
0x8f4: JUMPI v8f3(0x901) v83
----------------------------------

Begin block 0x88
prev = {'0x7d'}, next = {'0x904', '0x93'}
----------------------------------
Block 0x88
0x89: v89(0x63eb963a) = CONST 
0x8e: v8e = EQ v89(0x63eb963a) v1f
0x8f5: v8f5(0x904) = CONST 
0x8f6: JUMPI v8f5(0x904) v8e
----------------------------------

Begin block 0x93
prev = {'0x88'}, next = {'0x907', '0x9e'}
----------------------------------
Block 0x93
0x94: v94(0x715018a6) = CONST 
0x99: v99 = EQ v94(0x715018a6) v1f
0x8f7: v8f7(0x907) = CONST 
0x8f8: JUMPI v8f7(0x907) v99
----------------------------------

Begin block 0x9e
prev = {'0x93'}, next = {'0x90a', '0x8fb'}
----------------------------------
Block 0x9e
0x9f: v9f(0x7f4ab1dd) = CONST 
0xa4: va4 = EQ v9f(0x7f4ab1dd) v1f
0x8f9: v8f9(0x90a) = CONST 
0x8fa: JUMPI v8f9(0x90a) va4
----------------------------------

Begin block 0xa9
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xa9
0xaa: vaa(0x0) = CONST 
0xad: REVERT vaa(0x0) vaa(0x0)
----------------------------------

Begin block 0xa90x0
prev = {'0x6d', '0x8fb'}, next = {}
----------------------------------
Block 0xa90x0
0xaa0x0: v0aa(0x0) = CONST 
0xad0x0: REVERT v0aa(0x0) v0aa(0x0)
----------------------------------

Begin block 0xae
prev = {}, next = {'0xc0', '0xc4'}
----------------------------------
function authorizeTransfer(address,address,uint256,bool)()
Block 0xae
0xaf: vaf(0xec) = CONST 
0xb2: vb2(0x4) = CONST 
0xb5: vb5 = CALLDATASIZE 
0xb6: vb6 = SUB vb5 vb2(0x4)
0xb7: vb7(0x80) = CONST 
0xba: vba = LT vb6 vb7(0x80)
0xbb: vbb = ISZERO vba
0xbc: vbc(0xc4) = CONST 
0xbf: JUMPI vbc(0xc4) vbb
----------------------------------

Begin block 0xc0
prev = {'0xae'}, next = {}
----------------------------------
Block 0xc0
0xc0: vc0(0x0) = CONST 
0xc3: REVERT vc0(0x0) vc0(0x0)
----------------------------------

Begin block 0xc4
prev = {'0xae'}, next = {'0x2bf'}
----------------------------------
Block 0xc4
0xc6: vc6(0x1) = CONST 
0xc8: vc8(0x1) = CONST 
0xca: vca(0xa0) = CONST 
0xcc: vcc(0x10000000000000000000000000000000000000000) = SHL vca(0xa0) vc8(0x1)
0xcd: vcd(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc(0x10000000000000000000000000000000000000000) vc6(0x1)
0xcf: vcf = CALLDATALOAD vb2(0x4)
0xd1: vd1 = AND vcd(0xffffffffffffffffffffffffffffffffffffffff) vcf
0xd3: vd3(0x20) = CONST 
0xd6: vd6 = ADD vb2(0x4) vd3(0x20)
0xd7: vd7 = CALLDATALOAD vd6
0xda: vda = AND vcd(0xffffffffffffffffffffffffffffffffffffffff) vd7
0xdc: vdc(0x40) = CONST 
0xdf: vdf = ADD vb2(0x4) vdc(0x40)
0xe0: ve0 = CALLDATALOAD vdf
0xe2: ve2(0x60) = CONST 
0xe4: ve4 = ADD ve2(0x60) vb2(0x4)
0xe5: ve5 = CALLDATALOAD ve4
0xe6: ve6 = ISZERO ve5
0xe7: ve7 = ISZERO ve6
0xe8: ve8(0x2bf) = CONST 
0xeb: JUMP ve8(0x2bf)
----------------------------------

Begin block 0xec0xae
prev = {'0x364'}, next = {}
----------------------------------
Block 0xec0xae
0xed0xae: STOP 
----------------------------------

Begin block 0xec0xee
prev = {'0x3c3'}, next = {}
----------------------------------
Block 0xec0xee
0xed0xee: STOP 
----------------------------------

Begin block 0xec0x140
prev = {'0x48b'}, next = {}
----------------------------------
Block 0xec0x140
0xed0x140: STOP 
----------------------------------

Begin block 0xec0x201
prev = {'0x59b'}, next = {}
----------------------------------
Block 0xec0x201
0xed0x201: STOP 
----------------------------------

Begin block 0xec0x299
prev = {'0x6c1'}, next = {}
----------------------------------
Block 0xec0x299
0xed0x299: STOP 
----------------------------------

Begin block 0xee
prev = {}, next = {'0x100', '0x104'}
----------------------------------
function 0x3d140d21()
Block 0xee
0xef: vef(0xec) = CONST 
0xf2: vf2(0x4) = CONST 
0xf5: vf5 = CALLDATASIZE 
0xf6: vf6 = SUB vf5 vf2(0x4)
0xf7: vf7(0x40) = CONST 
0xfa: vfa = LT vf6 vf7(0x40)
0xfb: vfb = ISZERO vfa
0xfc: vfc(0x104) = CONST 
0xff: JUMPI vfc(0x104) vfb
----------------------------------

Begin block 0x100
prev = {'0xee'}, next = {}
----------------------------------
Block 0x100
0x100: v100(0x0) = CONST 
0x103: REVERT v100(0x0) v100(0x0)
----------------------------------

Begin block 0x104
prev = {'0xee'}, next = {'0x36a'}
----------------------------------
Block 0x104
0x106: v106(0x1) = CONST 
0x108: v108(0x1) = CONST 
0x10a: v10a(0xa0) = CONST 
0x10c: v10c(0x10000000000000000000000000000000000000000) = SHL v10a(0xa0) v108(0x1)
0x10d: v10d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10c(0x10000000000000000000000000000000000000000) v106(0x1)
0x10f: v10f = CALLDATALOAD vf2(0x4)
0x110: v110 = AND v10f v10d(0xffffffffffffffffffffffffffffffffffffffff)
0x112: v112(0x20) = CONST 
0x114: v114 = ADD v112(0x20) vf2(0x4)
0x115: v115 = CALLDATALOAD v114
0x116: v116 = ISZERO v115
0x117: v117 = ISZERO v116
0x118: v118(0x36a) = CONST 
0x11b: JUMP v118(0x36a)
----------------------------------

Begin block 0x11c
prev = {}, next = {'0x423'}
----------------------------------
function dat()()
Block 0x11c
0x11d: v11d(0x124) = CONST 
0x120: v120(0x423) = CONST 
0x123: JUMP v120(0x423)
----------------------------------

Begin block 0x1240x11c
prev = {'0x423'}, next = {}
----------------------------------
Block 0x1240x11c
0x1250x11c: v11c125(0x40) = CONST 
0x1280x11c: v11c128 = MLOAD v11c125(0x40)
0x1290x11c: v11c129(0x1) = CONST 
0x12b0x11c: v11c12b(0x1) = CONST 
0x12d0x11c: v11c12d(0xa0) = CONST 
0x12f0x11c: v11c12f(0x10000000000000000000000000000000000000000) = SHL v11c12d(0xa0) v11c12b(0x1)
0x1300x11c: v11c130(0xffffffffffffffffffffffffffffffffffffffff) = SUB v11c12f(0x10000000000000000000000000000000000000000) v11c129(0x1)
0x1330x11c: v11c133 = AND v42f v11c130(0xffffffffffffffffffffffffffffffffffffffff)
0x1350x11c: MSTORE v11c128 v11c133
0x1360x11c: v11c136 = MLOAD v11c125(0x40)
0x13a0x11c: v11c13a = SUB v11c128 v11c136
0x13b0x11c: v11c13b(0x20) = CONST 
0x13d0x11c: v11c13d = ADD v11c13b(0x20) v11c13a
0x13f0x11c: RETURN v11c136 v11c13d
----------------------------------

Begin block 0x1240x1dd
prev = {'0x55d'}, next = {}
----------------------------------
Block 0x1240x1dd
0x1250x1dd: v1dd125(0x40) = CONST 
0x1280x1dd: v1dd128 = MLOAD v1dd125(0x40)
0x1290x1dd: v1dd129(0x1) = CONST 
0x12b0x1dd: v1dd12b(0x1) = CONST 
0x12d0x1dd: v1dd12d(0xa0) = CONST 
0x12f0x1dd: v1dd12f(0x10000000000000000000000000000000000000000) = SHL v1dd12d(0xa0) v1dd12b(0x1)
0x1300x1dd: v1dd130(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1dd12f(0x10000000000000000000000000000000000000000) v1dd129(0x1)
0x1330x1dd: v1dd133 = AND v569 v1dd130(0xffffffffffffffffffffffffffffffffffffffff)
0x1350x1dd: MSTORE v1dd128 v1dd133
0x1360x1dd: v1dd136 = MLOAD v1dd125(0x40)
0x13a0x1dd: v1dd13a = SUB v1dd128 v1dd136
0x13b0x1dd: v1dd13b(0x20) = CONST 
0x13d0x1dd: v1dd13d = ADD v1dd13b(0x20) v1dd13a
0x13f0x1dd: RETURN v1dd136 v1dd13d
----------------------------------

Begin block 0x140
prev = {}, next = {'0x432'}
----------------------------------
function renounceOwnership()()
Block 0x140
0x141: v141(0xec) = CONST 
0x144: v144(0x432) = CONST 
0x147: JUMP v144(0x432)
----------------------------------

Begin block 0x148
prev = {}, next = {'0x15a', '0x15e'}
----------------------------------
function messageForTransferRestriction(uint8)()
Block 0x148
0x149: v149(0x168) = CONST 
0x14c: v14c(0x4) = CONST 
0x14f: v14f = CALLDATASIZE 
0x150: v150 = SUB v14f v14c(0x4)
0x151: v151(0x20) = CONST 
0x154: v154 = LT v150 v151(0x20)
0x155: v155 = ISZERO v154
0x156: v156(0x15e) = CONST 
0x159: JUMPI v156(0x15e) v155
----------------------------------

Begin block 0x15a
prev = {'0x148'}, next = {}
----------------------------------
Block 0x15a
0x15a: v15a(0x0) = CONST 
0x15d: REVERT v15a(0x0) v15a(0x0)
----------------------------------

Begin block 0x15e
prev = {'0x148'}, next = {'0x4d5'}
----------------------------------
Block 0x15e
0x160: v160 = CALLDATALOAD v14c(0x4)
0x161: v161(0xff) = CONST 
0x163: v163 = AND v161(0xff) v160
0x164: v164(0x4d5) = CONST 
0x167: JUMP v164(0x4d5)
----------------------------------

Begin block 0x168
prev = {'0x558'}, next = {'0x18a'}
----------------------------------
Block 0x168
0x168_0x0: v168_0 = PHI v4e4 v514 v537
0x169: v169(0x40) = CONST 
0x16c: v16c = MLOAD v169(0x40)
0x16d: v16d(0x20) = CONST 
0x171: MSTORE v16c v16d(0x20)
0x173: v173 = MLOAD v168_0
0x176: v176 = ADD v16c v16d(0x20)
0x177: MSTORE v176 v173
0x179: v179 = MLOAD v168_0
0x180: v180 = ADD v16c v169(0x40)
0x183: v183 = ADD v168_0 v16d(0x20)
0x188: v188(0x0) = CONST 
----------------------------------

Begin block 0x18a
prev = {'0x193', '0x168'}, next = {'0x193', '0x1a2'}
----------------------------------
Block 0x18a
0x18a_0x0: v18a_0 = PHI v188(0x0) v19d
0x18d: v18d = LT v18a_0 v179
0x18e: v18e = ISZERO v18d
0x18f: v18f(0x1a2) = CONST 
0x192: JUMPI v18f(0x1a2) v18e
----------------------------------

Begin block 0x193
prev = {'0x18a'}, next = {'0x18a'}
----------------------------------
Block 0x193
0x193_0x0: v193_0 = PHI v188(0x0) v19d
0x195: v195 = ADD v193_0 v183
0x196: v196 = MLOAD v195
0x199: v199 = ADD v193_0 v180
0x19a: MSTORE v199 v196
0x19b: v19b(0x20) = CONST 
0x19d: v19d = ADD v19b(0x20) v193_0
0x19e: v19e(0x18a) = CONST 
0x1a1: JUMP v19e(0x18a)
----------------------------------

Begin block 0x1a2
prev = {'0x18a'}, next = {'0x1cf', '0x1b6'}
----------------------------------
Block 0x1a2
0x1ab: v1ab = ADD v179 v180
0x1ad: v1ad(0x1f) = CONST 
0x1af: v1af = AND v1ad(0x1f) v179
0x1b1: v1b1 = ISZERO v1af
0x1b2: v1b2(0x1cf) = CONST 
0x1b5: JUMPI v1b2(0x1cf) v1b1
----------------------------------

Begin block 0x1b6
prev = {'0x1a2'}, next = {'0x1cf'}
----------------------------------
Block 0x1b6
0x1b8: v1b8 = SUB v1ab v1af
0x1ba: v1ba = MLOAD v1b8
0x1bb: v1bb(0x1) = CONST 
0x1be: v1be(0x20) = CONST 
0x1c0: v1c0 = SUB v1be(0x20) v1af
0x1c1: v1c1(0x100) = CONST 
0x1c4: v1c4 = EXP v1c1(0x100) v1c0
0x1c5: v1c5 = SUB v1c4 v1bb(0x1)
0x1c6: v1c6 = NOT v1c5
0x1c7: v1c7 = AND v1c6 v1ba
0x1c9: MSTORE v1b8 v1c7
0x1ca: v1ca(0x20) = CONST 
0x1cc: v1cc = ADD v1ca(0x20) v1b8
----------------------------------

Begin block 0x1cf
prev = {'0x1b6', '0x1a2'}, next = {}
----------------------------------
Block 0x1cf
0x1cf_0x1: v1cf_1 = PHI v1ab v1cc
0x1d5: v1d5(0x40) = CONST 
0x1d7: v1d7 = MLOAD v1d5(0x40)
0x1da: v1da = SUB v1cf_1 v1d7
0x1dc: RETURN v1d7 v1da
----------------------------------

Begin block 0x1dd
prev = {}, next = {'0x55d'}
----------------------------------
function owner()()
Block 0x1dd
0x1de: v1de(0x124) = CONST 
0x1e1: v1e1(0x55d) = CONST 
0x1e4: JUMP v1e1(0x55d)
----------------------------------

Begin block 0x1e5
prev = {}, next = {'0x1ed0x1e5'}
----------------------------------
function isOwner()()
Block 0x1e5
0x1e6: v1e6(0x1ed) = CONST 
0x1e9: v1e9(0x56c) = CONST 
0x1ec: v1ec_0 = CALLPRIVATE v1e9(0x56c) v1e6(0x1ed)
----------------------------------

Begin block 0x1ed0x1e5
prev = {'0x1e5'}, next = {}
----------------------------------
Block 0x1ed0x1e5
0x1ee0x1e5: v1e51ee(0x40) = CONST 
0x1f10x1e5: v1e51f1 = MLOAD v1e51ee(0x40)
0x1f30x1e5: v1e51f3 = ISZERO v1ec_0
0x1f40x1e5: v1e51f4 = ISZERO v1e51f3
0x1f60x1e5: MSTORE v1e51f1 v1e51f4
0x1f70x1e5: v1e51f7 = MLOAD v1e51ee(0x40)
0x1fb0x1e5: v1e51fb = SUB v1e51f1 v1e51f7
0x1fc0x1e5: v1e51fc(0x20) = CONST 
0x1fe0x1e5: v1e51fe = ADD v1e51fc(0x20) v1e51fb
0x2000x1e5: RETURN v1e51f7 v1e51fe
----------------------------------

Begin block 0x1ed0x273
prev = {'0x64a'}, next = {}
----------------------------------
Block 0x1ed0x273
0x1ee0x273: v2731ee(0x40) = CONST 
0x1f10x273: v2731f1 = MLOAD v2731ee(0x40)
0x1f30x273: v2731f3 = ISZERO v65c
0x1f40x273: v2731f4 = ISZERO v2731f3
0x1f60x273: MSTORE v2731f1 v2731f4
0x1f70x273: v2731f7 = MLOAD v2731ee(0x40)
0x1fb0x273: v2731fb = SUB v2731f1 v2731f7
0x1fc0x273: v2731fc(0x20) = CONST 
0x1fe0x273: v2731fe = ADD v2731fc(0x20) v2731fb
0x2000x273: RETURN v2731f7 v2731fe
----------------------------------

Begin block 0x201
prev = {}, next = {'0x213', '0x217'}
----------------------------------
function initialize(address)()
Block 0x201
0x202: v202(0xec) = CONST 
0x205: v205(0x4) = CONST 
0x208: v208 = CALLDATASIZE 
0x209: v209 = SUB v208 v205(0x4)
0x20a: v20a(0x20) = CONST 
0x20d: v20d = LT v209 v20a(0x20)
0x20e: v20e = ISZERO v20d
0x20f: v20f(0x217) = CONST 
0x212: JUMPI v20f(0x217) v20e
----------------------------------

Begin block 0x213
prev = {'0x201'}, next = {}
----------------------------------
Block 0x213
0x213: v213(0x0) = CONST 
0x216: REVERT v213(0x0) v213(0x0)
----------------------------------

Begin block 0x217
prev = {'0x201'}, next = {'0x592'}
----------------------------------
Block 0x217
0x219: v219 = CALLDATALOAD v205(0x4)
0x21a: v21a(0x1) = CONST 
0x21c: v21c(0x1) = CONST 
0x21e: v21e(0xa0) = CONST 
0x220: v220(0x10000000000000000000000000000000000000000) = SHL v21e(0xa0) v21c(0x1)
0x221: v221(0xffffffffffffffffffffffffffffffffffffffff) = SUB v220(0x10000000000000000000000000000000000000000) v21a(0x1)
0x222: v222 = AND v221(0xffffffffffffffffffffffffffffffffffffffff) v219
0x223: v223(0x592) = CONST 
0x226: JUMP v223(0x592)
----------------------------------

Begin block 0x227
prev = {}, next = {'0x239', '0x23d'}
----------------------------------
function detectTransferRestriction(address,address,uint256)()
Block 0x227
0x228: v228(0x25d) = CONST 
0x22b: v22b(0x4) = CONST 
0x22e: v22e = CALLDATASIZE 
0x22f: v22f = SUB v22e v22b(0x4)
0x230: v230(0x60) = CONST 
0x233: v233 = LT v22f v230(0x60)
0x234: v234 = ISZERO v233
0x235: v235(0x23d) = CONST 
0x238: JUMPI v235(0x23d) v234
----------------------------------

Begin block 0x239
prev = {'0x227'}, next = {}
----------------------------------
Block 0x239
0x239: v239(0x0) = CONST 
0x23c: REVERT v239(0x0) v239(0x0)
----------------------------------

Begin block 0x23d
prev = {'0x227'}, next = {'0x5f20x227'}
----------------------------------
Block 0x23d
0x23f: v23f(0x1) = CONST 
0x241: v241(0x1) = CONST 
0x243: v243(0xa0) = CONST 
0x245: v245(0x10000000000000000000000000000000000000000) = SHL v243(0xa0) v241(0x1)
0x246: v246(0xffffffffffffffffffffffffffffffffffffffff) = SUB v245(0x10000000000000000000000000000000000000000) v23f(0x1)
0x248: v248 = CALLDATALOAD v22b(0x4)
0x24a: v24a = AND v246(0xffffffffffffffffffffffffffffffffffffffff) v248
0x24c: v24c(0x20) = CONST 
0x24f: v24f = ADD v22b(0x4) v24c(0x20)
0x250: v250 = CALLDATALOAD v24f
0x253: v253 = AND v246(0xffffffffffffffffffffffffffffffffffffffff) v250
0x255: v255(0x40) = CONST 
0x257: v257 = ADD v255(0x40) v22b(0x4)
0x258: v258 = CALLDATALOAD v257
0x259: v259(0x5f2) = CONST 
0x25c: JUMP v259(0x5f2)
----------------------------------

Begin block 0x25d
prev = {'0x6430x227'}, next = {}
----------------------------------
Block 0x25d
0x25d_0x0: v25d_0 = PHI v227641(0x1) v227639(0x0)
0x25e: v25e(0x40) = CONST 
0x261: v261 = MLOAD v25e(0x40)
0x262: v262(0xff) = CONST 
0x266: v266 = AND v25d_0 v262(0xff)
0x268: MSTORE v261 v266
0x269: v269 = MLOAD v25e(0x40)
0x26d: v26d = SUB v261 v269
0x26e: v26e(0x20) = CONST 
0x270: v270 = ADD v26e(0x20) v26d
0x272: RETURN v269 v270
----------------------------------

Begin block 0x273
prev = {}, next = {'0x289', '0x285'}
----------------------------------
function approved(address)()
Block 0x273
0x274: v274(0x1ed) = CONST 
0x277: v277(0x4) = CONST 
0x27a: v27a = CALLDATASIZE 
0x27b: v27b = SUB v27a v277(0x4)
0x27c: v27c(0x20) = CONST 
0x27f: v27f = LT v27b v27c(0x20)
0x280: v280 = ISZERO v27f
0x281: v281(0x289) = CONST 
0x284: JUMPI v281(0x289) v280
----------------------------------

Begin block 0x285
prev = {'0x273'}, next = {}
----------------------------------
Block 0x285
0x285: v285(0x0) = CONST 
0x288: REVERT v285(0x0) v285(0x0)
----------------------------------

Begin block 0x289
prev = {'0x273'}, next = {'0x64a'}
----------------------------------
Block 0x289
0x28b: v28b = CALLDATALOAD v277(0x4)
0x28c: v28c(0x1) = CONST 
0x28e: v28e(0x1) = CONST 
0x290: v290(0xa0) = CONST 
0x292: v292(0x10000000000000000000000000000000000000000) = SHL v290(0xa0) v28e(0x1)
0x293: v293(0xffffffffffffffffffffffffffffffffffffffff) = SUB v292(0x10000000000000000000000000000000000000000) v28c(0x1)
0x294: v294 = AND v293(0xffffffffffffffffffffffffffffffffffffffff) v28b
0x295: v295(0x64a) = CONST 
0x298: JUMP v295(0x64a)
----------------------------------

Begin block 0x299
prev = {}, next = {'0x2af', '0x2ab'}
----------------------------------
function transferOwnership(address)()
Block 0x299
0x29a: v29a(0xec) = CONST 
0x29d: v29d(0x4) = CONST 
0x2a0: v2a0 = CALLDATASIZE 
0x2a1: v2a1 = SUB v2a0 v29d(0x4)
0x2a2: v2a2(0x20) = CONST 
0x2a5: v2a5 = LT v2a1 v2a2(0x20)
0x2a6: v2a6 = ISZERO v2a5
0x2a7: v2a7(0x2af) = CONST 
0x2aa: JUMPI v2a7(0x2af) v2a6
----------------------------------

Begin block 0x2ab
prev = {'0x299'}, next = {}
----------------------------------
Block 0x2ab
0x2ab: v2ab(0x0) = CONST 
0x2ae: REVERT v2ab(0x0) v2ab(0x0)
----------------------------------

Begin block 0x2af
prev = {'0x299'}, next = {'0x65f'}
----------------------------------
Block 0x2af
0x2b1: v2b1 = CALLDATALOAD v29d(0x4)
0x2b2: v2b2(0x1) = CONST 
0x2b4: v2b4(0x1) = CONST 
0x2b6: v2b6(0xa0) = CONST 
0x2b8: v2b8(0x10000000000000000000000000000000000000000) = SHL v2b6(0xa0) v2b4(0x1)
0x2b9: v2b9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2b8(0x10000000000000000000000000000000000000000) v2b2(0x1)
0x2ba: v2ba = AND v2b9(0xffffffffffffffffffffffffffffffffffffffff) v2b1
0x2bb: v2bb(0x65f) = CONST 
0x2be: JUMP v2bb(0x65f)
----------------------------------

Begin block 0x2bf
prev = {'0xc4'}, next = {'0x2d2', '0x312'}
----------------------------------
Block 0x2bf
0x2c0: v2c0(0x67) = CONST 
0x2c2: v2c2 = SLOAD v2c0(0x67)
0x2c3: v2c3(0x1) = CONST 
0x2c5: v2c5(0x1) = CONST 
0x2c7: v2c7(0xa0) = CONST 
0x2c9: v2c9(0x10000000000000000000000000000000000000000) = SHL v2c7(0xa0) v2c5(0x1)
0x2ca: v2ca(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c9(0x10000000000000000000000000000000000000000) v2c3(0x1)
0x2cb: v2cb = AND v2ca(0xffffffffffffffffffffffffffffffffffffffff) v2c2
0x2cc: v2cc = CALLER 
0x2cd: v2cd = EQ v2cc v2cb
0x2ce: v2ce(0x312) = CONST 
0x2d1: JUMPI v2ce(0x312) v2cd
----------------------------------

Begin block 0x2d2
prev = {'0x2bf'}, next = {}
----------------------------------
Block 0x2d2
0x2d2: v2d2(0x40) = CONST 
0x2d5: v2d5 = MLOAD v2d2(0x40)
0x2d6: v2d6(0x461bcd) = CONST 
0x2da: v2da(0xe5) = CONST 
0x2dc: v2dc(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2da(0xe5) v2d6(0x461bcd)
0x2de: MSTORE v2d5 v2dc(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x2df: v2df(0x20) = CONST 
0x2e1: v2e1(0x4) = CONST 
0x2e4: v2e4 = ADD v2d5 v2e1(0x4)
0x2e5: MSTORE v2e4 v2df(0x20)
0x2e6: v2e6(0x11) = CONST 
0x2e8: v2e8(0x24) = CONST 
0x2eb: v2eb = ADD v2d5 v2e8(0x24)
0x2ec: MSTORE v2eb v2e6(0x11)
0x2ed: v2ed(0x43414c4c5f5649415f4441545f4f4e4c59) = CONST 
0x2ff: v2ff(0x78) = CONST 
0x301: v301(0x43414c4c5f5649415f4441545f4f4e4c59000000000000000000000000000000) = SHL v2ff(0x78) v2ed(0x43414c4c5f5649415f4441545f4f4e4c59)
0x302: v302(0x44) = CONST 
0x305: v305 = ADD v2d5 v302(0x44)
0x306: MSTORE v305 v301(0x43414c4c5f5649415f4441545f4f4e4c59000000000000000000000000000000)
0x308: v308 = MLOAD v2d2(0x40)
0x30c: v30c = SUB v2d5 v308
0x30d: v30d(0x64) = CONST 
0x30f: v30f = ADD v30d(0x64) v30c
0x311: REVERT v308 v30f
----------------------------------

Begin block 0x312
prev = {'0x2bf'}, next = {'0x5f20xae'}
----------------------------------
Block 0x312
0x313: v313(0x31d) = CONST 
0x319: v319(0x5f2) = CONST 
0x31c: JUMP v319(0x5f2)
----------------------------------

Begin block 0x31d
prev = {'0x6430xae'}, next = {'0x326', '0x364'}
----------------------------------
Block 0x31d
0x31d_0x0: v31d_0 = PHI vae641(0x1) vae639(0x0)
0x31e: v31e(0xff) = CONST 
0x320: v320 = AND v31e(0xff) v31d_0
0x321: v321 = ISZERO v320
0x322: v322(0x364) = CONST 
0x325: JUMPI v322(0x364) v321
----------------------------------

Begin block 0x326
prev = {'0x31d'}, next = {}
----------------------------------
Block 0x326
0x326: v326(0x40) = CONST 
0x329: v329 = MLOAD v326(0x40)
0x32a: v32a(0x461bcd) = CONST 
0x32e: v32e(0xe5) = CONST 
0x330: v330(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v32e(0xe5) v32a(0x461bcd)
0x332: MSTORE v329 v330(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x333: v333(0x20) = CONST 
0x335: v335(0x4) = CONST 
0x338: v338 = ADD v329 v335(0x4)
0x339: MSTORE v338 v333(0x20)
0x33a: v33a(0xf) = CONST 
0x33c: v33c(0x24) = CONST 
0x33f: v33f = ADD v329 v33c(0x24)
0x340: MSTORE v33f v33a(0xf)
0x341: v341(0x1514905394d1915497d11153925151) = CONST 
0x351: v351(0x8a) = CONST 
0x353: v353(0x5452414e534645525f44454e4945440000000000000000000000000000000000) = SHL v351(0x8a) v341(0x1514905394d1915497d11153925151)
0x354: v354(0x44) = CONST 
0x357: v357 = ADD v329 v354(0x44)
0x358: MSTORE v357 v353(0x5452414e534645525f44454e4945440000000000000000000000000000000000)
0x35a: v35a = MLOAD v326(0x40)
0x35e: v35e = SUB v329 v35a
0x35f: v35f(0x64) = CONST 
0x361: v361 = ADD v35f(0x64) v35e
0x363: REVERT v35a v361
----------------------------------

Begin block 0x364
prev = {'0x31d'}, next = {'0xec0xae'}
----------------------------------
Block 0x364
0x369: JUMP vaf(0xec)
----------------------------------

Begin block 0x36a
prev = {'0x104'}, next = {'0x372'}
----------------------------------
Block 0x36a
0x36b: v36b(0x372) = CONST 
0x36e: v36e(0x56c) = CONST 
0x371: v371_0 = CALLPRIVATE v36e(0x56c) v36b(0x372)
----------------------------------

Begin block 0x372
prev = {'0x36a'}, next = {'0x3c3', '0x377'}
----------------------------------
Block 0x372
0x373: v373(0x3c3) = CONST 
0x376: JUMPI v373(0x3c3) v371_0
----------------------------------

Begin block 0x377
prev = {'0x372'}, next = {}
----------------------------------
Block 0x377
0x377: v377(0x40) = CONST 
0x37a: v37a = MLOAD v377(0x40)
0x37b: v37b(0x461bcd) = CONST 
0x37f: v37f(0xe5) = CONST 
0x381: v381(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v37f(0xe5) v37b(0x461bcd)
0x383: MSTORE v37a v381(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x384: v384(0x20) = CONST 
0x386: v386(0x4) = CONST 
0x389: v389 = ADD v37a v386(0x4)
0x38c: MSTORE v389 v384(0x20)
0x38d: v38d(0x24) = CONST 
0x390: v390 = ADD v37a v38d(0x24)
0x391: MSTORE v390 v384(0x20)
0x392: v392(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x3b3: v3b3(0x44) = CONST 
0x3b6: v3b6 = ADD v37a v3b3(0x44)
0x3b7: MSTORE v3b6 v392(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x3b9: v3b9 = MLOAD v377(0x40)
0x3bd: v3bd = SUB v37a v3b9
0x3be: v3be(0x64) = CONST 
0x3c0: v3c0 = ADD v3be(0x64) v3bd
0x3c2: REVERT v3b9 v3c0
----------------------------------

Begin block 0x3c3
prev = {'0x372'}, next = {'0xec0xee'}
----------------------------------
Block 0x3c3
0x3c4: v3c4(0x1) = CONST 
0x3c6: v3c6(0x1) = CONST 
0x3c8: v3c8(0xa0) = CONST 
0x3ca: v3ca(0x10000000000000000000000000000000000000000) = SHL v3c8(0xa0) v3c6(0x1)
0x3cb: v3cb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ca(0x10000000000000000000000000000000000000000) v3c4(0x1)
0x3cd: v3cd = AND v110 v3cb(0xffffffffffffffffffffffffffffffffffffffff)
0x3ce: v3ce(0x0) = CONST 
0x3d2: MSTORE v3ce(0x0) v3cd
0x3d3: v3d3(0x66) = CONST 
0x3d5: v3d5(0x20) = CONST 
0x3d9: MSTORE v3d5(0x20) v3d3(0x66)
0x3da: v3da(0x40) = CONST 
0x3df: v3df = SHA3 v3ce(0x0) v3da(0x40)
0x3e1: v3e1 = SLOAD v3df
0x3e2: v3e2(0xff) = CONST 
0x3e4: v3e4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v3e2(0xff)
0x3e5: v3e5 = AND v3e4(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v3e1
0x3e7: v3e7 = ISZERO v117
0x3e8: v3e8 = ISZERO v3e7
0x3eb: v3eb = OR v3e8 v3e5
0x3ee: SSTORE v3df v3eb
0x3f0: v3f0 = MLOAD v3da(0x40)
0x3f3: MSTORE v3f0 v3e8
0x3f5: v3f5 = MLOAD v3da(0x40)
0x3f6: v3f6(0x1f478f1e5aee36a892d86e821aba410dc0934cb0ebd0241dd753708338845453) = CONST 
0x41a: v41a = SUB v3f0 v3f5
0x41d: v41d = ADD v3d5(0x20) v41a
0x41f: LOG2 v3f5 v41d v3f6(0x1f478f1e5aee36a892d86e821aba410dc0934cb0ebd0241dd753708338845453) v3cd
0x422: JUMP vef(0xec)
----------------------------------

Begin block 0x423
prev = {'0x11c'}, next = {'0x1240x11c'}
----------------------------------
Block 0x423
0x424: v424(0x67) = CONST 
0x426: v426 = SLOAD v424(0x67)
0x427: v427(0x1) = CONST 
0x429: v429(0x1) = CONST 
0x42b: v42b(0xa0) = CONST 
0x42d: v42d(0x10000000000000000000000000000000000000000) = SHL v42b(0xa0) v429(0x1)
0x42e: v42e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v42d(0x10000000000000000000000000000000000000000) v427(0x1)
0x42f: v42f = AND v42e(0xffffffffffffffffffffffffffffffffffffffff) v426
0x431: JUMP v11d(0x124)
----------------------------------

Begin block 0x432
prev = {'0x140'}, next = {'0x43a'}
----------------------------------
Block 0x432
0x433: v433(0x43a) = CONST 
0x436: v436(0x56c) = CONST 
0x439: v439_0 = CALLPRIVATE v436(0x56c) v433(0x43a)
----------------------------------

Begin block 0x43a
prev = {'0x432'}, next = {'0x48b', '0x43f'}
----------------------------------
Block 0x43a
0x43b: v43b(0x48b) = CONST 
0x43e: JUMPI v43b(0x48b) v439_0
----------------------------------

Begin block 0x43f
prev = {'0x43a'}, next = {}
----------------------------------
Block 0x43f
0x43f: v43f(0x40) = CONST 
0x442: v442 = MLOAD v43f(0x40)
0x443: v443(0x461bcd) = CONST 
0x447: v447(0xe5) = CONST 
0x449: v449(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v447(0xe5) v443(0x461bcd)
0x44b: MSTORE v442 v449(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x44c: v44c(0x20) = CONST 
0x44e: v44e(0x4) = CONST 
0x451: v451 = ADD v442 v44e(0x4)
0x454: MSTORE v451 v44c(0x20)
0x455: v455(0x24) = CONST 
0x458: v458 = ADD v442 v455(0x24)
0x459: MSTORE v458 v44c(0x20)
0x45a: v45a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x47b: v47b(0x44) = CONST 
0x47e: v47e = ADD v442 v47b(0x44)
0x47f: MSTORE v47e v45a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x481: v481 = MLOAD v43f(0x40)
0x485: v485 = SUB v442 v481
0x486: v486(0x64) = CONST 
0x488: v488 = ADD v486(0x64) v485
0x48a: REVERT v481 v488
----------------------------------

Begin block 0x48b
prev = {'0x43a'}, next = {'0xec0x140'}
----------------------------------
Block 0x48b
0x48c: v48c(0x33) = CONST 
0x48e: v48e = SLOAD v48c(0x33)
0x48f: v48f(0x40) = CONST 
0x491: v491 = MLOAD v48f(0x40)
0x492: v492(0x0) = CONST 
0x495: v495(0x1) = CONST 
0x497: v497(0x1) = CONST 
0x499: v499(0xa0) = CONST 
0x49b: v49b(0x10000000000000000000000000000000000000000) = SHL v499(0xa0) v497(0x1)
0x49c: v49c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v49b(0x10000000000000000000000000000000000000000) v495(0x1)
0x49d: v49d = AND v49c(0xffffffffffffffffffffffffffffffffffffffff) v48e
0x49f: v49f(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x4c3: LOG3 v491 v492(0x0) v49f(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v49d v492(0x0)
0x4c4: v4c4(0x33) = CONST 
0x4c7: v4c7 = SLOAD v4c4(0x33)
0x4c8: v4c8(0x1) = CONST 
0x4ca: v4ca(0x1) = CONST 
0x4cc: v4cc(0xa0) = CONST 
0x4ce: v4ce(0x10000000000000000000000000000000000000000) = SHL v4cc(0xa0) v4ca(0x1)
0x4cf: v4cf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ce(0x10000000000000000000000000000000000000000) v4c8(0x1)
0x4d0: v4d0(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v4cf(0xffffffffffffffffffffffffffffffffffffffff)
0x4d1: v4d1 = AND v4d0(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v4c7
0x4d3: SSTORE v4c4(0x33) v4d1
0x4d4: JUMP v141(0xec)
----------------------------------

Begin block 0x4d5
prev = {'0x15e'}, next = {'0x4e0', '0x503'}
----------------------------------
Block 0x4d5
0x4d6: v4d6(0x60) = CONST 
0x4d8: v4d8(0xff) = CONST 
0x4db: v4db = AND v163 v4d8(0xff)
0x4dc: v4dc(0x503) = CONST 
0x4df: JUMPI v4dc(0x503) v4db
----------------------------------

Begin block 0x4e0
prev = {'0x4d5'}, next = {'0x558'}
----------------------------------
Block 0x4e0
0x4e1: v4e1(0x40) = CONST 
0x4e4: v4e4 = MLOAD v4e1(0x40)
0x4e7: v4e7 = ADD v4e1(0x40) v4e4
0x4ea: MSTORE v4e1(0x40) v4e7
0x4eb: v4eb(0x7) = CONST 
0x4ee: MSTORE v4e4 v4eb(0x7)
0x4ef: v4ef(0x53554343455353) = CONST 
0x4f7: v4f7(0xc8) = CONST 
0x4f9: v4f9(0x5355434345535300000000000000000000000000000000000000000000000000) = SHL v4f7(0xc8) v4ef(0x53554343455353)
0x4fa: v4fa(0x20) = CONST 
0x4fd: v4fd = ADD v4e4 v4fa(0x20)
0x4fe: MSTORE v4fd v4f9(0x5355434345535300000000000000000000000000000000000000000000000000)
0x4ff: v4ff(0x558) = CONST 
0x502: JUMP v4ff(0x558)
----------------------------------

Begin block 0x503
prev = {'0x4d5'}, next = {'0x510', '0x532'}
----------------------------------
Block 0x503
0x505: v505(0xff) = CONST 
0x507: v507 = AND v505(0xff) v163
0x508: v508(0x1) = CONST 
0x50a: v50a = EQ v508(0x1) v507
0x50b: v50b = ISZERO v50a
0x50c: v50c(0x532) = CONST 
0x50f: JUMPI v50c(0x532) v50b
----------------------------------

Begin block 0x510
prev = {'0x503'}, next = {'0x558'}
----------------------------------
Block 0x510
0x511: v511(0x40) = CONST 
0x514: v514 = MLOAD v511(0x40)
0x517: v517 = ADD v511(0x40) v514
0x51a: MSTORE v511(0x40) v517
0x51b: v51b(0x6) = CONST 
0x51e: MSTORE v514 v51b(0x6)
0x51f: v51f(0x111153925151) = CONST 
0x526: v526(0xd2) = CONST 
0x528: v528(0x44454e4945440000000000000000000000000000000000000000000000000000) = SHL v526(0xd2) v51f(0x111153925151)
0x529: v529(0x20) = CONST 
0x52c: v52c = ADD v514 v529(0x20)
0x52d: MSTORE v52c v528(0x44454e4945440000000000000000000000000000000000000000000000000000)
0x52e: v52e(0x558) = CONST 
0x531: JUMP v52e(0x558)
----------------------------------

Begin block 0x532
prev = {'0x503'}, next = {'0x558'}
----------------------------------
Block 0x532
0x534: v534(0x40) = CONST 
0x537: v537 = MLOAD v534(0x40)
0x53a: v53a = ADD v534(0x40) v537
0x53d: MSTORE v534(0x40) v53a
0x53e: v53e(0xd) = CONST 
0x541: MSTORE v537 v53e(0xd)
0x542: v542(0x2aa725a727aba72fa2a92927a9) = CONST 
0x550: v550(0x99) = CONST 
0x552: v552(0x554e4b4e4f574e5f4552524f5200000000000000000000000000000000000000) = SHL v550(0x99) v542(0x2aa725a727aba72fa2a92927a9)
0x553: v553(0x20) = CONST 
0x556: v556 = ADD v537 v553(0x20)
0x557: MSTORE v556 v552(0x554e4b4e4f574e5f4552524f5200000000000000000000000000000000000000)
----------------------------------

Begin block 0x558
prev = {'0x4e0', '0x510', '0x532'}, next = {'0x168'}
----------------------------------
Block 0x558
0x55c: JUMP v149(0x168)
----------------------------------

Begin block 0x55d
prev = {'0x1dd'}, next = {'0x1240x1dd'}
----------------------------------
Block 0x55d
0x55e: v55e(0x33) = CONST 
0x560: v560 = SLOAD v55e(0x33)
0x561: v561(0x1) = CONST 
0x563: v563(0x1) = CONST 
0x565: v565(0xa0) = CONST 
0x567: v567(0x10000000000000000000000000000000000000000) = SHL v565(0xa0) v563(0x1)
0x568: v568(0xffffffffffffffffffffffffffffffffffffffff) = SUB v567(0x10000000000000000000000000000000000000000) v561(0x1)
0x569: v569 = AND v568(0xffffffffffffffffffffffffffffffffffffffff) v560
0x56b: JUMP v1de(0x124)
----------------------------------

Begin block 0x56c
prev = {}, next = {'0x6c4'}
----------------------------------
function 0x56c(v56carg0)
Block 0x56c
0x56d: v56d(0x33) = CONST 
0x56f: v56f = SLOAD v56d(0x33)
0x570: v570(0x0) = CONST 
0x573: v573(0x1) = CONST 
0x575: v575(0x1) = CONST 
0x577: v577(0xa0) = CONST 
0x579: v579(0x10000000000000000000000000000000000000000) = SHL v577(0xa0) v575(0x1)
0x57a: v57a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v579(0x10000000000000000000000000000000000000000) v573(0x1)
0x57b: v57b = AND v57a(0xffffffffffffffffffffffffffffffffffffffff) v56f
0x57c: v57c(0x583) = CONST 
0x57f: v57f(0x6c4) = CONST 
0x582: JUMP v57f(0x6c4)
----------------------------------

Begin block 0x583
prev = {'0x6c4'}, next = {}
----------------------------------
Block 0x583
0x584: v584(0x1) = CONST 
0x586: v586(0x1) = CONST 
0x588: v588(0xa0) = CONST 
0x58a: v58a(0x10000000000000000000000000000000000000000) = SHL v588(0xa0) v586(0x1)
0x58b: v58b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v58a(0x10000000000000000000000000000000000000000) v584(0x1)
0x58c: v58c = AND v58b(0xffffffffffffffffffffffffffffffffffffffff) v6c5
0x58d: v58d = EQ v58c v57b
0x591: RETURNPRIVATE v56carg0 v58d
----------------------------------

Begin block 0x592
prev = {'0x217'}, next = {'0x6c8'}
----------------------------------
Block 0x592
0x593: v593(0x59b) = CONST 
0x596: v596 = CALLER 
0x597: v597(0x6c8) = CONST 
0x59a: JUMP v597(0x6c8)
----------------------------------

Begin block 0x59b
prev = {'0x7b6'}, next = {'0xec0x201'}
----------------------------------
Block 0x59b
0x59c: v59c(0x67) = CONST 
0x59f: v59f = SLOAD v59c(0x67)
0x5a0: v5a0(0x1) = CONST 
0x5a2: v5a2(0x1) = CONST 
0x5a4: v5a4(0xa0) = CONST 
0x5a6: v5a6(0x10000000000000000000000000000000000000000) = SHL v5a4(0xa0) v5a2(0x1)
0x5a7: v5a7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5a6(0x10000000000000000000000000000000000000000) v5a0(0x1)
0x5a8: v5a8(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v5a7(0xffffffffffffffffffffffffffffffffffffffff)
0x5a9: v5a9 = AND v5a8(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v59f
0x5aa: v5aa(0x1) = CONST 
0x5ac: v5ac(0x1) = CONST 
0x5ae: v5ae(0xa0) = CONST 
0x5b0: v5b0(0x10000000000000000000000000000000000000000) = SHL v5ae(0xa0) v5ac(0x1)
0x5b1: v5b1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5b0(0x10000000000000000000000000000000000000000) v5aa(0x1)
0x5b5: v5b5 = AND v5b1(0xffffffffffffffffffffffffffffffffffffffff) v222
0x5b9: v5b9 = OR v5b5 v5a9
0x5bb: SSTORE v59c(0x67) v5b9
0x5bc: v5bc(0x0) = CONST 
0x5bf: MSTORE v5bc(0x0) v5bc(0x0)
0x5c0: v5c0(0x66) = CONST 
0x5c2: v5c2(0x20) = CONST 
0x5c4: MSTORE v5c2(0x20) v5c0(0x66)
0x5c5: v5c5(0x6f48904484b35701cf1f41ad9068b394adf7e2f8a59d2309a04d10a155eaa72b) = CONST 
0x5e7: v5e7 = SLOAD v5c5(0x6f48904484b35701cf1f41ad9068b394adf7e2f8a59d2309a04d10a155eaa72b)
0x5e8: v5e8(0xff) = CONST 
0x5ea: v5ea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v5e8(0xff)
0x5eb: v5eb = AND v5ea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v5e7
0x5ec: v5ec(0x1) = CONST 
0x5ee: v5ee = OR v5ec(0x1) v5eb
0x5f0: SSTORE v5c5(0x6f48904484b35701cf1f41ad9068b394adf7e2f8a59d2309a04d10a155eaa72b) v5ee
0x5f1: JUMP v202(0xec)
----------------------------------

Begin block 0x5f20xae
prev = {'0x312'}, next = {'0x6320xae', '0x6150xae'}
----------------------------------
Block 0x5f20xae
0x5f30xae: vae5f3(0x1) = CONST 
0x5f50xae: vae5f5(0x1) = CONST 
0x5f70xae: vae5f7(0xa0) = CONST 
0x5f90xae: vae5f9(0x10000000000000000000000000000000000000000) = SHL vae5f7(0xa0) vae5f5(0x1)
0x5fa0xae: vae5fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae5f9(0x10000000000000000000000000000000000000000) vae5f3(0x1)
0x5fc0xae: vae5fc = AND vd1 vae5fa(0xffffffffffffffffffffffffffffffffffffffff)
0x5fd0xae: vae5fd(0x0) = CONST 
0x6010xae: MSTORE vae5fd(0x0) vae5fc
0x6020xae: vae602(0x66) = CONST 
0x6040xae: vae604(0x20) = CONST 
0x6060xae: MSTORE vae604(0x20) vae602(0x66)
0x6070xae: vae607(0x40) = CONST 
0x60a0xae: vae60a = SHA3 vae5fd(0x0) vae607(0x40)
0x60b0xae: vae60b = SLOAD vae60a
0x60c0xae: vae60c(0xff) = CONST 
0x60e0xae: vae60e = AND vae60c(0xff) vae60b
0x6100xae: vae610 = ISZERO vae60e
0x6110xae: vae611(0x632) = CONST 
0x6140xae: JUMPI vae611(0x632) vae610
----------------------------------

Begin block 0x5f20x227
prev = {'0x23d'}, next = {'0x6320x227', '0x6150x227'}
----------------------------------
Block 0x5f20x227
0x5f30x227: v2275f3(0x1) = CONST 
0x5f50x227: v2275f5(0x1) = CONST 
0x5f70x227: v2275f7(0xa0) = CONST 
0x5f90x227: v2275f9(0x10000000000000000000000000000000000000000) = SHL v2275f7(0xa0) v2275f5(0x1)
0x5fa0x227: v2275fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2275f9(0x10000000000000000000000000000000000000000) v2275f3(0x1)
0x5fc0x227: v2275fc = AND v24a v2275fa(0xffffffffffffffffffffffffffffffffffffffff)
0x5fd0x227: v2275fd(0x0) = CONST 
0x6010x227: MSTORE v2275fd(0x0) v2275fc
0x6020x227: v227602(0x66) = CONST 
0x6040x227: v227604(0x20) = CONST 
0x6060x227: MSTORE v227604(0x20) v227602(0x66)
0x6070x227: v227607(0x40) = CONST 
0x60a0x227: v22760a = SHA3 v2275fd(0x0) v227607(0x40)
0x60b0x227: v22760b = SLOAD v22760a
0x60c0x227: v22760c(0xff) = CONST 
0x60e0x227: v22760e = AND v22760c(0xff) v22760b
0x6100x227: v227610 = ISZERO v22760e
0x6110x227: v227611(0x632) = CONST 
0x6140x227: JUMPI v227611(0x632) v227610
----------------------------------

Begin block 0x6150xae
prev = {'0x5f20xae'}, next = {'0x6320xae'}
----------------------------------
Block 0x6150xae
0x6160xae: vae616(0x1) = CONST 
0x6180xae: vae618(0x1) = CONST 
0x61a0xae: vae61a(0xa0) = CONST 
0x61c0xae: vae61c(0x10000000000000000000000000000000000000000) = SHL vae61a(0xa0) vae618(0x1)
0x61d0xae: vae61d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae61c(0x10000000000000000000000000000000000000000) vae616(0x1)
0x61f0xae: vae61f = AND vda vae61d(0xffffffffffffffffffffffffffffffffffffffff)
0x6200xae: vae620(0x0) = CONST 
0x6240xae: MSTORE vae620(0x0) vae61f
0x6250xae: vae625(0x66) = CONST 
0x6270xae: vae627(0x20) = CONST 
0x6290xae: MSTORE vae627(0x20) vae625(0x66)
0x62a0xae: vae62a(0x40) = CONST 
0x62d0xae: vae62d = SHA3 vae620(0x0) vae62a(0x40)
0x62e0xae: vae62e = SLOAD vae62d
0x62f0xae: vae62f(0xff) = CONST 
0x6310xae: vae631 = AND vae62f(0xff) vae62e
----------------------------------

Begin block 0x6150x227
prev = {'0x5f20x227'}, next = {'0x6320x227'}
----------------------------------
Block 0x6150x227
0x6160x227: v227616(0x1) = CONST 
0x6180x227: v227618(0x1) = CONST 
0x61a0x227: v22761a(0xa0) = CONST 
0x61c0x227: v22761c(0x10000000000000000000000000000000000000000) = SHL v22761a(0xa0) v227618(0x1)
0x61d0x227: v22761d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v22761c(0x10000000000000000000000000000000000000000) v227616(0x1)
0x61f0x227: v22761f = AND v253 v22761d(0xffffffffffffffffffffffffffffffffffffffff)
0x6200x227: v227620(0x0) = CONST 
0x6240x227: MSTORE v227620(0x0) v22761f
0x6250x227: v227625(0x66) = CONST 
0x6270x227: v227627(0x20) = CONST 
0x6290x227: MSTORE v227627(0x20) v227625(0x66)
0x62a0x227: v22762a(0x40) = CONST 
0x62d0x227: v22762d = SHA3 v227620(0x0) v22762a(0x40)
0x62e0x227: v22762e = SLOAD v22762d
0x62f0x227: v22762f(0xff) = CONST 
0x6310x227: v227631 = AND v22762f(0xff) v22762e
----------------------------------

Begin block 0x6320xae
prev = {'0x5f20xae', '0x6150xae'}, next = {'0x6380xae', '0x63f0xae'}
----------------------------------
Block 0x6320xae
0x6320xae_0x0: v632ae_0 = PHI vae60e vae631
0x6330xae: vae633 = ISZERO v632ae_0
0x6340xae: vae634(0x63f) = CONST 
0x6370xae: JUMPI vae634(0x63f) vae633
----------------------------------

Begin block 0x6320x227
prev = {'0x5f20x227', '0x6150x227'}, next = {'0x6380x227', '0x63f0x227'}
----------------------------------
Block 0x6320x227
0x6320x227_0x0: v632227_0 = PHI v22760e v227631
0x6330x227: v227633 = ISZERO v632227_0
0x6340x227: v227634(0x63f) = CONST 
0x6370x227: JUMPI v227634(0x63f) v227633
----------------------------------

Begin block 0x6380xae
prev = {'0x6320xae'}, next = {'0x6430xae'}
----------------------------------
Block 0x6380xae
0x6390xae: vae639(0x0) = CONST 
0x63b0xae: vae63b(0x643) = CONST 
0x63e0xae: JUMP vae63b(0x643)
----------------------------------

Begin block 0x6380x227
prev = {'0x6320x227'}, next = {'0x6430x227'}
----------------------------------
Block 0x6380x227
0x6390x227: v227639(0x0) = CONST 
0x63b0x227: v22763b(0x643) = CONST 
0x63e0x227: JUMP v22763b(0x643)
----------------------------------

Begin block 0x63f0xae
prev = {'0x6320xae'}, next = {'0x6430xae'}
----------------------------------
Block 0x63f0xae
0x6410xae: vae641(0x1) = CONST 
----------------------------------

Begin block 0x63f0x227
prev = {'0x6320x227'}, next = {'0x6430x227'}
----------------------------------
Block 0x63f0x227
0x6410x227: v227641(0x1) = CONST 
----------------------------------

Begin block 0x6430xae
prev = {'0x6380xae', '0x63f0xae'}, next = {'0x31d'}
----------------------------------
Block 0x6430xae
0x6490xae: JUMP v313(0x31d)
----------------------------------

Begin block 0x6430x227
prev = {'0x6380x227', '0x63f0x227'}, next = {'0x25d'}
----------------------------------
Block 0x6430x227
0x6490x227: JUMP v228(0x25d)
----------------------------------

Begin block 0x64a
prev = {'0x289'}, next = {'0x1ed0x273'}
----------------------------------
Block 0x64a
0x64b: v64b(0x66) = CONST 
0x64d: v64d(0x20) = CONST 
0x64f: MSTORE v64d(0x20) v64b(0x66)
0x650: v650(0x0) = CONST 
0x654: MSTORE v650(0x0) v294
0x655: v655(0x40) = CONST 
0x658: v658 = SHA3 v650(0x0) v655(0x40)
0x659: v659 = SLOAD v658
0x65a: v65a(0xff) = CONST 
0x65c: v65c = AND v65a(0xff) v659
0x65e: JUMP v274(0x1ed)
----------------------------------

Begin block 0x65f
prev = {'0x2af'}, next = {'0x667'}
----------------------------------
Block 0x65f
0x660: v660(0x667) = CONST 
0x663: v663(0x56c) = CONST 
0x666: v666_0 = CALLPRIVATE v663(0x56c) v660(0x667)
----------------------------------

Begin block 0x667
prev = {'0x65f'}, next = {'0x66c', '0x6b8'}
----------------------------------
Block 0x667
0x668: v668(0x6b8) = CONST 
0x66b: JUMPI v668(0x6b8) v666_0
----------------------------------

Begin block 0x66c
prev = {'0x667'}, next = {}
----------------------------------
Block 0x66c
0x66c: v66c(0x40) = CONST 
0x66f: v66f = MLOAD v66c(0x40)
0x670: v670(0x461bcd) = CONST 
0x674: v674(0xe5) = CONST 
0x676: v676(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v674(0xe5) v670(0x461bcd)
0x678: MSTORE v66f v676(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x679: v679(0x20) = CONST 
0x67b: v67b(0x4) = CONST 
0x67e: v67e = ADD v66f v67b(0x4)
0x681: MSTORE v67e v679(0x20)
0x682: v682(0x24) = CONST 
0x685: v685 = ADD v66f v682(0x24)
0x686: MSTORE v685 v679(0x20)
0x687: v687(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
0x6a8: v6a8(0x44) = CONST 
0x6ab: v6ab = ADD v66f v6a8(0x44)
0x6ac: MSTORE v6ab v687(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
0x6ae: v6ae = MLOAD v66c(0x40)
0x6b2: v6b2 = SUB v66f v6ae
0x6b3: v6b3(0x64) = CONST 
0x6b5: v6b5 = ADD v6b3(0x64) v6b2
0x6b7: REVERT v6ae v6b5
----------------------------------

Begin block 0x6b8
prev = {'0x667'}, next = {'0x7ba'}
----------------------------------
Block 0x6b8
0x6b9: v6b9(0x6c1) = CONST 
0x6bd: v6bd(0x7ba) = CONST 
0x6c0: JUMP v6bd(0x7ba)
----------------------------------

Begin block 0x6c1
prev = {'0x7ff'}, next = {'0xec0x299'}
----------------------------------
Block 0x6c1
0x6c3: JUMP v29a(0xec)
----------------------------------

Begin block 0x6c4
prev = {'0x56c'}, next = {'0x583'}
----------------------------------
Block 0x6c4
0x6c5: v6c5 = CALLER 
0x6c7: JUMP v57c(0x583)
----------------------------------

Begin block 0x6c8
prev = {'0x592'}, next = {'0x6e1', '0x6d9'}
----------------------------------
Block 0x6c8
0x6c9: v6c9(0x0) = CONST 
0x6cb: v6cb = SLOAD v6c9(0x0)
0x6cc: v6cc(0x100) = CONST 
0x6d0: v6d0 = DIV v6cb v6cc(0x100)
0x6d1: v6d1(0xff) = CONST 
0x6d3: v6d3 = AND v6d1(0xff) v6d0
0x6d5: v6d5(0x6e1) = CONST 
0x6d8: JUMPI v6d5(0x6e1) v6d3
----------------------------------

Begin block 0x6d9
prev = {'0x6c8'}, next = {'0x85b'}
----------------------------------
Block 0x6d9
0x6da: v6da(0x6e1) = CONST 
0x6dd: v6dd(0x85b) = CONST 
0x6e0: JUMP v6dd(0x85b)
----------------------------------

Begin block 0x6e1
prev = {'0x6c8', '0x85b'}, next = {'0x6e7', '0x6ef'}
----------------------------------
Block 0x6e1
0x6e1_0x0: v6e1_0 = PHI v6d3 v85e
0x6e3: v6e3(0x6ef) = CONST 
0x6e6: JUMPI v6e3(0x6ef) v6e1_0
----------------------------------

Begin block 0x6e7
prev = {'0x6e1'}, next = {'0x6ef'}
----------------------------------
Block 0x6e7
0x6e8: v6e8(0x0) = CONST 
0x6ea: v6ea = SLOAD v6e8(0x0)
0x6eb: v6eb(0xff) = CONST 
0x6ed: v6ed = AND v6eb(0xff) v6ea
0x6ee: v6ee = ISZERO v6ed
----------------------------------

Begin block 0x6ef
prev = {'0x6e7', '0x6e1'}, next = {'0x72a', '0x6f4'}
----------------------------------
Block 0x6ef
0x6ef_0x0: v6ef_0 = PHI v6d3 v6ee v85e
0x6f0: v6f0(0x72a) = CONST 
0x6f3: JUMPI v6f0(0x72a) v6ef_0
----------------------------------

Begin block 0x6f4
prev = {'0x6ef'}, next = {}
----------------------------------
Block 0x6f4
0x6f4: v6f4(0x40) = CONST 
0x6f6: v6f6 = MLOAD v6f4(0x40)
0x6f7: v6f7(0x461bcd) = CONST 
0x6fb: v6fb(0xe5) = CONST 
0x6fd: v6fd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6fb(0xe5) v6f7(0x461bcd)
0x6ff: MSTORE v6f6 v6fd(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x700: v700(0x4) = CONST 
0x702: v702 = ADD v700(0x4) v6f6
0x705: v705(0x20) = CONST 
0x707: v707 = ADD v705(0x20) v702
0x70a: v70a = SUB v707 v702
0x70c: MSTORE v702 v70a
0x70d: v70d(0x2e) = CONST 
0x710: MSTORE v707 v70d(0x2e)
0x711: v711(0x20) = CONST 
0x713: v713 = ADD v711(0x20) v707
0x715: v715(0x888) = CONST 
0x718: v718(0x2e) = CONST 
0x71b: CODECOPY v713 v715(0x888) v718(0x2e)
0x71c: v71c(0x40) = CONST 
0x71e: v71e = ADD v71c(0x40) v713
0x722: v722(0x40) = CONST 
0x724: v724 = MLOAD v722(0x40)
0x727: v727 = SUB v71e v724
0x729: REVERT v724 v727
----------------------------------

Begin block 0x72a
prev = {'0x6ef'}, next = {'0x755', '0x73d'}
----------------------------------
Block 0x72a
0x72b: v72b(0x0) = CONST 
0x72d: v72d = SLOAD v72b(0x0)
0x72e: v72e(0x100) = CONST 
0x732: v732 = DIV v72d v72e(0x100)
0x733: v733(0xff) = CONST 
0x735: v735 = AND v733(0xff) v732
0x736: v736 = ISZERO v735
0x738: v738 = ISZERO v736
0x739: v739(0x755) = CONST 
0x73c: JUMPI v739(0x755) v738
----------------------------------

Begin block 0x73d
prev = {'0x72a'}, next = {'0x755'}
----------------------------------
Block 0x73d
0x73d: v73d(0x0) = CONST 
0x740: v740 = SLOAD v73d(0x0)
0x741: v741(0xff) = CONST 
0x743: v743(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v741(0xff)
0x744: v744(0xff00) = CONST 
0x747: v747(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v744(0xff00)
0x74a: v74a = AND v740 v747(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
0x74b: v74b(0x100) = CONST 
0x74e: v74e = OR v74b(0x100) v74a
0x74f: v74f = AND v74e v743(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
0x750: v750(0x1) = CONST 
0x752: v752 = OR v750(0x1) v74f
0x754: SSTORE v73d(0x0) v752
----------------------------------

Begin block 0x755
prev = {'0x73d', '0x72a'}, next = {'0x7b6', '0x7ab'}
----------------------------------
Block 0x755
0x756: v756(0x33) = CONST 
0x759: v759 = SLOAD v756(0x33)
0x75a: v75a(0x1) = CONST 
0x75c: v75c(0x1) = CONST 
0x75e: v75e(0xa0) = CONST 
0x760: v760(0x10000000000000000000000000000000000000000) = SHL v75e(0xa0) v75c(0x1)
0x761: v761(0xffffffffffffffffffffffffffffffffffffffff) = SUB v760(0x10000000000000000000000000000000000000000) v75a(0x1)
0x762: v762(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v761(0xffffffffffffffffffffffffffffffffffffffff)
0x763: v763 = AND v762(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v759
0x764: v764(0x1) = CONST 
0x766: v766(0x1) = CONST 
0x768: v768(0xa0) = CONST 
0x76a: v76a(0x10000000000000000000000000000000000000000) = SHL v768(0xa0) v766(0x1)
0x76b: v76b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v76a(0x10000000000000000000000000000000000000000) v764(0x1)
0x76e: v76e = AND v76b(0xffffffffffffffffffffffffffffffffffffffff) v596
0x772: v772 = OR v76e v763
0x776: SSTORE v756(0x33) v772
0x777: v777(0x40) = CONST 
0x779: v779 = MLOAD v777(0x40)
0x77b: v77b = AND v772 v76b(0xffffffffffffffffffffffffffffffffffffffff)
0x77d: v77d(0x0) = CONST 
0x780: v780(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x7a4: LOG3 v779 v77d(0x0) v780(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v77d(0x0) v77b
0x7a6: v7a6 = ISZERO v736
0x7a7: v7a7(0x7b6) = CONST 
0x7aa: JUMPI v7a7(0x7b6) v7a6
----------------------------------

Begin block 0x7ab
prev = {'0x755'}, next = {'0x7b6'}
----------------------------------
Block 0x7ab
0x7ab: v7ab(0x0) = CONST 
0x7ae: v7ae = SLOAD v7ab(0x0)
0x7af: v7af(0xff00) = CONST 
0x7b2: v7b2(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v7af(0xff00)
0x7b3: v7b3 = AND v7b2(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) v7ae
0x7b5: SSTORE v7ab(0x0) v7b3
----------------------------------

Begin block 0x7b6
prev = {'0x755', '0x7ab'}, next = {'0x59b'}
----------------------------------
Block 0x7b6
0x7b9: JUMP v593(0x59b)
----------------------------------

Begin block 0x7ba
prev = {'0x6b8'}, next = {'0x7ff', '0x7c9'}
----------------------------------
Block 0x7ba
0x7bb: v7bb(0x1) = CONST 
0x7bd: v7bd(0x1) = CONST 
0x7bf: v7bf(0xa0) = CONST 
0x7c1: v7c1(0x10000000000000000000000000000000000000000) = SHL v7bf(0xa0) v7bd(0x1)
0x7c2: v7c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7c1(0x10000000000000000000000000000000000000000) v7bb(0x1)
0x7c4: v7c4 = AND v2ba v7c2(0xffffffffffffffffffffffffffffffffffffffff)
0x7c5: v7c5(0x7ff) = CONST 
0x7c8: JUMPI v7c5(0x7ff) v7c4
----------------------------------

Begin block 0x7c9
prev = {'0x7ba'}, next = {}
----------------------------------
Block 0x7c9
0x7c9: v7c9(0x40) = CONST 
0x7cb: v7cb = MLOAD v7c9(0x40)
0x7cc: v7cc(0x461bcd) = CONST 
0x7d0: v7d0(0xe5) = CONST 
0x7d2: v7d2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v7d0(0xe5) v7cc(0x461bcd)
0x7d4: MSTORE v7cb v7d2(0x8c379a000000000000000000000000000000000000000000000000000000000)
0x7d5: v7d5(0x4) = CONST 
0x7d7: v7d7 = ADD v7d5(0x4) v7cb
0x7da: v7da(0x20) = CONST 
0x7dc: v7dc = ADD v7da(0x20) v7d7
0x7df: v7df = SUB v7dc v7d7
0x7e1: MSTORE v7d7 v7df
0x7e2: v7e2(0x26) = CONST 
0x7e5: MSTORE v7dc v7e2(0x26)
0x7e6: v7e6(0x20) = CONST 
0x7e8: v7e8 = ADD v7e6(0x20) v7dc
0x7ea: v7ea(0x862) = CONST 
0x7ed: v7ed(0x26) = CONST 
0x7f0: CODECOPY v7e8 v7ea(0x862) v7ed(0x26)
0x7f1: v7f1(0x40) = CONST 
0x7f3: v7f3 = ADD v7f1(0x40) v7e8
0x7f7: v7f7(0x40) = CONST 
0x7f9: v7f9 = MLOAD v7f7(0x40)
0x7fc: v7fc = SUB v7f3 v7f9
0x7fe: REVERT v7f9 v7fc
----------------------------------

Begin block 0x7ff
prev = {'0x7ba'}, next = {'0x6c1'}
----------------------------------
Block 0x7ff
0x800: v800(0x33) = CONST 
0x802: v802 = SLOAD v800(0x33)
0x803: v803(0x40) = CONST 
0x805: v805 = MLOAD v803(0x40)
0x806: v806(0x1) = CONST 
0x808: v808(0x1) = CONST 
0x80a: v80a(0xa0) = CONST 
0x80c: v80c(0x10000000000000000000000000000000000000000) = SHL v80a(0xa0) v808(0x1)
0x80d: v80d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v80c(0x10000000000000000000000000000000000000000) v806(0x1)
0x810: v810 = AND v2ba v80d(0xffffffffffffffffffffffffffffffffffffffff)
0x812: v812 = AND v802 v80d(0xffffffffffffffffffffffffffffffffffffffff)
0x814: v814(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x836: v836(0x0) = CONST 
0x839: LOG3 v805 v836(0x0) v814(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v812 v810
0x83a: v83a(0x33) = CONST 
0x83d: v83d = SLOAD v83a(0x33)
0x83e: v83e(0x1) = CONST 
0x840: v840(0x1) = CONST 
0x842: v842(0xa0) = CONST 
0x844: v844(0x10000000000000000000000000000000000000000) = SHL v842(0xa0) v840(0x1)
0x845: v845(0xffffffffffffffffffffffffffffffffffffffff) = SUB v844(0x10000000000000000000000000000000000000000) v83e(0x1)
0x846: v846(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v845(0xffffffffffffffffffffffffffffffffffffffff)
0x847: v847 = AND v846(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v83d
0x848: v848(0x1) = CONST 
0x84a: v84a(0x1) = CONST 
0x84c: v84c(0xa0) = CONST 
0x84e: v84e(0x10000000000000000000000000000000000000000) = SHL v84c(0xa0) v84a(0x1)
0x84f: v84f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v84e(0x10000000000000000000000000000000000000000) v848(0x1)
0x853: v853 = AND v84f(0xffffffffffffffffffffffffffffffffffffffff) v2ba
0x857: v857 = OR v853 v847
0x859: SSTORE v83a(0x33) v857
0x85a: JUMP v6b9(0x6c1)
----------------------------------

Begin block 0x85b
prev = {'0x6d9'}, next = {'0x6e1'}
----------------------------------
Block 0x85b
0x85c: v85c = ADDRESS 
0x85d: v85d = EXTCODESIZE v85c
0x85e: v85e = ISZERO v85d
0x860: JUMP v6da(0x6e1)
----------------------------------

Begin block 0x8fb
prev = {'0x10', '0x9e'}, next = {'0xa90x0'}
----------------------------------
Block 0x8fb
0x8fc: v8fc(0xa9) = CONST 
0x8fd: CALLPRIVATE v8fc(0xa9)
----------------------------------

Begin block 0x8fe
prev = {'0x71'}, next = {}
----------------------------------
Block 0x8fe
0x8ff: v8ff(0xae) = CONST 
0x900: CALLPRIVATE v8ff(0xae)
----------------------------------

Begin block 0x901
prev = {'0x7d'}, next = {}
----------------------------------
Block 0x901
0x902: v902(0xee) = CONST 
0x903: CALLPRIVATE v902(0xee)
----------------------------------

Begin block 0x904
prev = {'0x88'}, next = {}
----------------------------------
Block 0x904
0x905: v905(0x11c) = CONST 
0x906: CALLPRIVATE v905(0x11c)
----------------------------------

Begin block 0x907
prev = {'0x93'}, next = {}
----------------------------------
Block 0x907
0x908: v908(0x140) = CONST 
0x909: CALLPRIVATE v908(0x140)
----------------------------------

Begin block 0x90a
prev = {'0x9e'}, next = {}
----------------------------------
Block 0x90a
0x90b: v90b(0x148) = CONST 
0x90c: CALLPRIVATE v90b(0x148)
----------------------------------

Begin block 0x90d
prev = {'0x2b'}, next = {}
----------------------------------
Block 0x90d
0x90e: v90e(0x1dd) = CONST 
0x90f: CALLPRIVATE v90e(0x1dd)
----------------------------------

Begin block 0x910
prev = {'0x36'}, next = {}
----------------------------------
Block 0x910
0x911: v911(0x1e5) = CONST 
0x912: CALLPRIVATE v911(0x1e5)
----------------------------------

Begin block 0x913
prev = {'0x41'}, next = {}
----------------------------------
Block 0x913
0x914: v914(0x201) = CONST 
0x915: CALLPRIVATE v914(0x201)
----------------------------------

Begin block 0x916
prev = {'0x4c'}, next = {}
----------------------------------
Block 0x916
0x917: v917(0x227) = CONST 
0x918: CALLPRIVATE v917(0x227)
----------------------------------

Begin block 0x919
prev = {'0x57'}, next = {}
----------------------------------
Block 0x919
0x91a: v91a(0x273) = CONST 
0x91b: CALLPRIVATE v91a(0x273)
----------------------------------

Begin block 0x91c
prev = {'0x62'}, next = {}
----------------------------------
Block 0x91c
0x91d: v91d(0x299) = CONST 
0x91e: CALLPRIVATE v91d(0x299)
----------------------------------
