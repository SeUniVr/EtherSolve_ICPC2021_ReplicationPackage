
Begin block 0x0
prev = {}, next = {'0xb', '0xc3'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x60) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x60)
0x5: v5 = CALLDATASIZE 
0x6: v6 = ISZERO v5
0x7: v7(0xc3) = CONST 
0xa: JUMPI v7(0xc3) v6
----------------------------------

Begin block 0xb
prev = {'0x0'}, next = {'0x3f', '0x12d7'}
----------------------------------
Block 0xb
0xb: vb(0x0) = CONST 
0xd: vd = CALLDATALOAD vb(0x0)
0xe: ve(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2d: v2d = DIV vd ve(0x100000000000000000000000000000000000000000000000000000000)
0x2e: v2e(0xffffffff) = CONST 
0x33: v33 = AND v2e(0xffffffff) v2d
0x35: v35(0x6fdde03) = CONST 
0x3a: v3a = EQ v35(0x6fdde03) v33
0x12bd: v12bd(0x12d7) = CONST 
0x12be: JUMPI v12bd(0x12d7) v3a
----------------------------------

Begin block 0x3f
prev = {'0xb'}, next = {'0x12da', '0x4a'}
----------------------------------
Block 0x3f
0x40: v40(0x95ea7b3) = CONST 
0x45: v45 = EQ v40(0x95ea7b3) v33
0x12bf: v12bf(0x12da) = CONST 
0x12c0: JUMPI v12bf(0x12da) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0x12dd', '0x55'}
----------------------------------
Block 0x4a
0x4b: v4b(0x18160ddd) = CONST 
0x50: v50 = EQ v4b(0x18160ddd) v33
0x12c1: v12c1(0x12dd) = CONST 
0x12c2: JUMPI v12c1(0x12dd) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0x12e0', '0x60'}
----------------------------------
Block 0x55
0x56: v56(0x23b872dd) = CONST 
0x5b: v5b = EQ v56(0x23b872dd) v33
0x12c3: v12c3(0x12e0) = CONST 
0x12c4: JUMPI v12c3(0x12e0) v5b
----------------------------------

Begin block 0x60
prev = {'0x55'}, next = {'0x12e3', '0x6b'}
----------------------------------
Block 0x60
0x61: v61(0x313ce567) = CONST 
0x66: v66 = EQ v61(0x313ce567) v33
0x12c5: v12c5(0x12e3) = CONST 
0x12c6: JUMPI v12c5(0x12e3) v66
----------------------------------

Begin block 0x6b
prev = {'0x60'}, next = {'0x76', '0x12e6'}
----------------------------------
Block 0x6b
0x6c: v6c(0x42966c68) = CONST 
0x71: v71 = EQ v6c(0x42966c68) v33
0x12c7: v12c7(0x12e6) = CONST 
0x12c8: JUMPI v12c7(0x12e6) v71
----------------------------------

Begin block 0x76
prev = {'0x6b'}, next = {'0x81', '0x12e9'}
----------------------------------
Block 0x76
0x77: v77(0x70a08231) = CONST 
0x7c: v7c = EQ v77(0x70a08231) v33
0x12c9: v12c9(0x12e9) = CONST 
0x12ca: JUMPI v12c9(0x12e9) v7c
----------------------------------

Begin block 0x81
prev = {'0x76'}, next = {'0x8c', '0x12ec'}
----------------------------------
Block 0x81
0x82: v82(0x79cc6790) = CONST 
0x87: v87 = EQ v82(0x79cc6790) v33
0x12cb: v12cb(0x12ec) = CONST 
0x12cc: JUMPI v12cb(0x12ec) v87
----------------------------------

Begin block 0x8c
prev = {'0x81'}, next = {'0x12ef', '0x97'}
----------------------------------
Block 0x8c
0x8d: v8d(0x95d89b41) = CONST 
0x92: v92 = EQ v8d(0x95d89b41) v33
0x12cd: v12cd(0x12ef) = CONST 
0x12ce: JUMPI v12cd(0x12ef) v92
----------------------------------

Begin block 0x97
prev = {'0x8c'}, next = {'0x12f2', '0xa2'}
----------------------------------
Block 0x97
0x98: v98(0x9dbf0087) = CONST 
0x9d: v9d = EQ v98(0x9dbf0087) v33
0x12cf: v12cf(0x12f2) = CONST 
0x12d0: JUMPI v12cf(0x12f2) v9d
----------------------------------

Begin block 0xa2
prev = {'0x97'}, next = {'0xad', '0x12f5'}
----------------------------------
Block 0xa2
0xa3: va3(0xa9059cbb) = CONST 
0xa8: va8 = EQ va3(0xa9059cbb) v33
0x12d1: v12d1(0x12f5) = CONST 
0x12d2: JUMPI v12d1(0x12f5) va8
----------------------------------

Begin block 0xad
prev = {'0xa2'}, next = {'0x12f8', '0xb8'}
----------------------------------
Block 0xad
0xae: vae(0xcae9ca51) = CONST 
0xb3: vb3 = EQ vae(0xcae9ca51) v33
0x12d3: v12d3(0x12f8) = CONST 
0x12d4: JUMPI v12d3(0x12f8) vb3
----------------------------------

Begin block 0xb8
prev = {'0xad'}, next = {'0x12fb', '0xc3'}
----------------------------------
Block 0xb8
0xb9: vb9(0xdd62ed3e) = CONST 
0xbe: vbe = EQ vb9(0xdd62ed3e) v33
0x12d5: v12d5(0x12fb) = CONST 
0x12d6: JUMPI v12d5(0x12fb) vbe
----------------------------------

Begin block 0xc3
prev = {'0xb8', '0x0'}, next = {}
----------------------------------
Block 0xc3
0xc4: vc4(0x0) = CONST 
0xc7: REVERT vc4(0x0) vc4(0x0)
----------------------------------

Begin block 0xc8
prev = {}, next = {'0xcf', '0xd3'}
----------------------------------
function name()()
Block 0xc8
0xc9: vc9 = CALLVALUE 
0xca: vca = ISZERO vc9
0xcb: vcb(0xd3) = CONST 
0xce: JUMPI vcb(0xd3) vca
----------------------------------

Begin block 0xcf
prev = {'0xc8'}, next = {}
----------------------------------
Block 0xcf
0xcf: vcf(0x0) = CONST 
0xd2: REVERT vcf(0x0) vcf(0x0)
----------------------------------

Begin block 0xd3
prev = {'0xc8'}, next = {'0x5e7'}
----------------------------------
Block 0xd3
0xd4: vd4(0xdb) = CONST 
0xd7: vd7(0x5e7) = CONST 
0xda: JUMP vd7(0x5e7)
----------------------------------

Begin block 0xdb
prev = {'0x67d'}, next = {'0x100'}
----------------------------------
Block 0xdb
0xdc: vdc(0x40) = CONST 
0xde: vde = MLOAD vdc(0x40)
0xe1: ve1(0x20) = CONST 
0xe3: ve3 = ADD ve1(0x20) vde
0xe6: ve6 = SUB ve3 vde
0xe8: MSTORE vde ve6
0xec: vec = MLOAD v60c
0xee: MSTORE ve3 vec
0xef: vef(0x20) = CONST 
0xf1: vf1 = ADD vef(0x20) ve3
0xf5: vf5 = MLOAD v60c
0xf7: vf7(0x20) = CONST 
0xf9: vf9 = ADD vf7(0x20) v60c
0xfe: vfe(0x0) = CONST 
----------------------------------

Begin block 0x100
prev = {'0xdb', '0x111'}, next = {'0x109', '0x11c'}
----------------------------------
Block 0x100
0x100_0x0: v100_0 = PHI vfe(0x0) v115
0x103: v103 = LT v100_0 vf5
0x104: v104 = ISZERO v103
0x105: v105(0x11c) = CONST 
0x108: JUMPI v105(0x11c) v104
----------------------------------

Begin block 0x109
prev = {'0x100'}, next = {'0x111'}
----------------------------------
Block 0x109
0x109_0x0: v109_0 = PHI vfe(0x0) v115
0x10b: v10b = ADD vf9 v109_0
0x10c: v10c = MLOAD v10b
0x10f: v10f = ADD vf1 v109_0
0x110: MSTORE v10f v10c
----------------------------------

Begin block 0x111
prev = {'0x109'}, next = {'0x100'}
----------------------------------
Block 0x111
0x111_0x0: v111_0 = PHI vfe(0x0) v115
0x112: v112(0x20) = CONST 
0x115: v115 = ADD v111_0 v112(0x20)
0x118: v118(0x100) = CONST 
0x11b: JUMP v118(0x100)
----------------------------------

Begin block 0x11c
prev = {'0x100'}, next = {'0x130', '0x149'}
----------------------------------
Block 0x11c
0x125: v125 = ADD vf5 vf1
0x127: v127(0x1f) = CONST 
0x129: v129 = AND v127(0x1f) vf5
0x12b: v12b = ISZERO v129
0x12c: v12c(0x149) = CONST 
0x12f: JUMPI v12c(0x149) v12b
----------------------------------

Begin block 0x130
prev = {'0x11c'}, next = {'0x149'}
----------------------------------
Block 0x130
0x132: v132 = SUB v125 v129
0x134: v134 = MLOAD v132
0x135: v135(0x1) = CONST 
0x138: v138(0x20) = CONST 
0x13a: v13a = SUB v138(0x20) v129
0x13b: v13b(0x100) = CONST 
0x13e: v13e = EXP v13b(0x100) v13a
0x13f: v13f = SUB v13e v135(0x1)
0x140: v140 = NOT v13f
0x141: v141 = AND v140 v134
0x143: MSTORE v132 v141
0x144: v144(0x20) = CONST 
0x146: v146 = ADD v144(0x20) v132
----------------------------------

Begin block 0x149
prev = {'0x11c', '0x130'}, next = {}
----------------------------------
Block 0x149
0x149_0x1: v149_1 = PHI v125 v146
0x14f: v14f(0x40) = CONST 
0x151: v151 = MLOAD v14f(0x40)
0x154: v154 = SUB v149_1 v151
0x156: RETURN v151 v154
----------------------------------

Begin block 0x157
prev = {}, next = {'0x15e', '0x162'}
----------------------------------
function approve(address,uint256)()
Block 0x157
0x158: v158 = CALLVALUE 
0x159: v159 = ISZERO v158
0x15a: v15a(0x162) = CONST 
0x15d: JUMPI v15a(0x162) v159
----------------------------------

Begin block 0x15e
prev = {'0x157'}, next = {}
----------------------------------
Block 0x15e
0x15e: v15e(0x0) = CONST 
0x161: REVERT v15e(0x0) v15e(0x0)
----------------------------------

Begin block 0x162
prev = {'0x157'}, next = {'0x197'}
----------------------------------
Block 0x162
0x163: v163(0x197) = CONST 
0x166: v166(0x4) = CONST 
0x16a: v16a = CALLDATALOAD v166(0x4)
0x16b: v16b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x180: v180 = AND v16b(0xffffffffffffffffffffffffffffffffffffffff) v16a
0x182: v182(0x20) = CONST 
0x184: v184(0x24) = ADD v182(0x20) v166(0x4)
0x189: v189 = CALLDATALOAD v184(0x24)
0x18b: v18b(0x20) = CONST 
0x18d: v18d(0x44) = ADD v18b(0x20) v184(0x24)
0x193: v193(0x685) = CONST 
0x196: v196_0 = CALLPRIVATE v193(0x685) v189 v180 v163(0x197)
----------------------------------

Begin block 0x197
prev = {'0x162'}, next = {}
----------------------------------
Block 0x197
0x198: v198(0x40) = CONST 
0x19a: v19a = MLOAD v198(0x40)
0x19d: v19d = ISZERO v196_0
0x19e: v19e = ISZERO v19d
0x19f: v19f = ISZERO v19e
0x1a0: v1a0 = ISZERO v19f
0x1a2: MSTORE v19a v1a0
0x1a3: v1a3(0x20) = CONST 
0x1a5: v1a5 = ADD v1a3(0x20) v19a
0x1a9: v1a9(0x40) = CONST 
0x1ab: v1ab = MLOAD v1a9(0x40)
0x1ae: v1ae = SUB v1a5 v1ab
0x1b0: RETURN v1ab v1ae
----------------------------------

Begin block 0x1b1
prev = {}, next = {'0x1b8', '0x1bc'}
----------------------------------
function totalSupply()()
Block 0x1b1
0x1b2: v1b2 = CALLVALUE 
0x1b3: v1b3 = ISZERO v1b2
0x1b4: v1b4(0x1bc) = CONST 
0x1b7: JUMPI v1b4(0x1bc) v1b3
----------------------------------

Begin block 0x1b8
prev = {'0x1b1'}, next = {}
----------------------------------
Block 0x1b8
0x1b8: v1b8(0x0) = CONST 
0x1bb: REVERT v1b8(0x0) v1b8(0x0)
----------------------------------

Begin block 0x1bc
prev = {'0x1b1'}, next = {'0x713'}
----------------------------------
Block 0x1bc
0x1bd: v1bd(0x1c4) = CONST 
0x1c0: v1c0(0x713) = CONST 
0x1c3: JUMP v1c0(0x713)
----------------------------------

Begin block 0x1c4
prev = {'0x713'}, next = {}
----------------------------------
Block 0x1c4
0x1c5: v1c5(0x40) = CONST 
0x1c7: v1c7 = MLOAD v1c5(0x40)
0x1cb: MSTORE v1c7 v716
0x1cc: v1cc(0x20) = CONST 
0x1ce: v1ce = ADD v1cc(0x20) v1c7
0x1d2: v1d2(0x40) = CONST 
0x1d4: v1d4 = MLOAD v1d2(0x40)
0x1d7: v1d7 = SUB v1ce v1d4
0x1d9: RETURN v1d4 v1d7
----------------------------------

Begin block 0x1da
prev = {}, next = {'0x1e1', '0x1e5'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1da
0x1db: v1db = CALLVALUE 
0x1dc: v1dc = ISZERO v1db
0x1dd: v1dd(0x1e5) = CONST 
0x1e0: JUMPI v1dd(0x1e5) v1dc
----------------------------------

Begin block 0x1e1
prev = {'0x1da'}, next = {}
----------------------------------
Block 0x1e1
0x1e1: v1e1(0x0) = CONST 
0x1e4: REVERT v1e1(0x0) v1e1(0x0)
----------------------------------

Begin block 0x1e5
prev = {'0x1da'}, next = {'0x719'}
----------------------------------
Block 0x1e5
0x1e6: v1e6(0x239) = CONST 
0x1e9: v1e9(0x4) = CONST 
0x1ed: v1ed = CALLDATALOAD v1e9(0x4)
0x1ee: v1ee(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x203: v203 = AND v1ee(0xffffffffffffffffffffffffffffffffffffffff) v1ed
0x205: v205(0x20) = CONST 
0x207: v207(0x24) = ADD v205(0x20) v1e9(0x4)
0x20c: v20c = CALLDATALOAD v207(0x24)
0x20d: v20d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x222: v222 = AND v20d(0xffffffffffffffffffffffffffffffffffffffff) v20c
0x224: v224(0x20) = CONST 
0x226: v226(0x44) = ADD v224(0x20) v207(0x24)
0x22b: v22b = CALLDATALOAD v226(0x44)
0x22d: v22d(0x20) = CONST 
0x22f: v22f(0x64) = ADD v22d(0x20) v226(0x44)
0x235: v235(0x719) = CONST 
0x238: JUMP v235(0x719)
----------------------------------

Begin block 0x239
prev = {'0x840'}, next = {}
----------------------------------
Block 0x239
0x23a: v23a(0x40) = CONST 
0x23c: v23c = MLOAD v23a(0x40)
0x23f: v23f = ISZERO v83c(0x1)
0x240: v240 = ISZERO v23f
0x241: v241 = ISZERO v240
0x242: v242 = ISZERO v241
0x244: MSTORE v23c v242
0x245: v245(0x20) = CONST 
0x247: v247 = ADD v245(0x20) v23c
0x24b: v24b(0x40) = CONST 
0x24d: v24d = MLOAD v24b(0x40)
0x250: v250 = SUB v247 v24d
0x252: RETURN v24d v250
----------------------------------

Begin block 0x253
prev = {}, next = {'0x25a', '0x25e'}
----------------------------------
function decimals()()
Block 0x253
0x254: v254 = CALLVALUE 
0x255: v255 = ISZERO v254
0x256: v256(0x25e) = CONST 
0x259: JUMPI v256(0x25e) v255
----------------------------------

Begin block 0x25a
prev = {'0x253'}, next = {}
----------------------------------
Block 0x25a
0x25a: v25a(0x0) = CONST 
0x25d: REVERT v25a(0x0) v25a(0x0)
----------------------------------

Begin block 0x25e
prev = {'0x253'}, next = {'0x847'}
----------------------------------
Block 0x25e
0x25f: v25f(0x266) = CONST 
0x262: v262(0x847) = CONST 
0x265: JUMP v262(0x847)
----------------------------------

Begin block 0x266
prev = {'0x847'}, next = {}
----------------------------------
Block 0x266
0x267: v267(0x40) = CONST 
0x269: v269 = MLOAD v267(0x40)
0x26c: v26c(0xff) = CONST 
0x26e: v26e = AND v26c(0xff) v857
0x26f: v26f(0xff) = CONST 
0x271: v271 = AND v26f(0xff) v26e
0x273: MSTORE v269 v271
0x274: v274(0x20) = CONST 
0x276: v276 = ADD v274(0x20) v269
0x27a: v27a(0x40) = CONST 
0x27c: v27c = MLOAD v27a(0x40)
0x27f: v27f = SUB v276 v27c
0x281: RETURN v27c v27f
----------------------------------

Begin block 0x282
prev = {}, next = {'0x28d', '0x289'}
----------------------------------
function burn(uint256)()
Block 0x282
0x283: v283 = CALLVALUE 
0x284: v284 = ISZERO v283
0x285: v285(0x28d) = CONST 
0x288: JUMPI v285(0x28d) v284
----------------------------------

Begin block 0x289
prev = {'0x282'}, next = {}
----------------------------------
Block 0x289
0x289: v289(0x0) = CONST 
0x28c: REVERT v289(0x0) v289(0x0)
----------------------------------

Begin block 0x28d
prev = {'0x282'}, next = {'0x85a'}
----------------------------------
Block 0x28d
0x28e: v28e(0x2a3) = CONST 
0x291: v291(0x4) = CONST 
0x295: v295 = CALLDATALOAD v291(0x4)
0x297: v297(0x20) = CONST 
0x299: v299(0x24) = ADD v297(0x20) v291(0x4)
0x29f: v29f(0x85a) = CONST 
0x2a2: JUMP v29f(0x85a)
----------------------------------

Begin block 0x2a3
prev = {'0x95a'}, next = {}
----------------------------------
Block 0x2a3
0x2a4: v2a4(0x40) = CONST 
0x2a6: v2a6 = MLOAD v2a4(0x40)
0x2a9: v2a9 = ISZERO v956(0x1)
0x2aa: v2aa = ISZERO v2a9
0x2ab: v2ab = ISZERO v2aa
0x2ac: v2ac = ISZERO v2ab
0x2ae: MSTORE v2a6 v2ac
0x2af: v2af(0x20) = CONST 
0x2b1: v2b1 = ADD v2af(0x20) v2a6
0x2b5: v2b5(0x40) = CONST 
0x2b7: v2b7 = MLOAD v2b5(0x40)
0x2ba: v2ba = SUB v2b1 v2b7
0x2bc: RETURN v2b7 v2ba
----------------------------------

Begin block 0x2bd
prev = {}, next = {'0x2c8', '0x2c4'}
----------------------------------
function balanceOf(address)()
Block 0x2bd
0x2be: v2be = CALLVALUE 
0x2bf: v2bf = ISZERO v2be
0x2c0: v2c0(0x2c8) = CONST 
0x2c3: JUMPI v2c0(0x2c8) v2bf
----------------------------------

Begin block 0x2c4
prev = {'0x2bd'}, next = {}
----------------------------------
Block 0x2c4
0x2c4: v2c4(0x0) = CONST 
0x2c7: REVERT v2c4(0x0) v2c4(0x0)
----------------------------------

Begin block 0x2c8
prev = {'0x2bd'}, next = {'0x95f'}
----------------------------------
Block 0x2c8
0x2c9: v2c9(0x2f4) = CONST 
0x2cc: v2cc(0x4) = CONST 
0x2d0: v2d0 = CALLDATALOAD v2cc(0x4)
0x2d1: v2d1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2e6: v2e6 = AND v2d1(0xffffffffffffffffffffffffffffffffffffffff) v2d0
0x2e8: v2e8(0x20) = CONST 
0x2ea: v2ea(0x24) = ADD v2e8(0x20) v2cc(0x4)
0x2f0: v2f0(0x95f) = CONST 
0x2f3: JUMP v2f0(0x95f)
----------------------------------

Begin block 0x2f4
prev = {'0x95f'}, next = {}
----------------------------------
Block 0x2f4
0x2f5: v2f5(0x40) = CONST 
0x2f7: v2f7 = MLOAD v2f5(0x40)
0x2fb: MSTORE v2f7 v974
0x2fc: v2fc(0x20) = CONST 
0x2fe: v2fe = ADD v2fc(0x20) v2f7
0x302: v302(0x40) = CONST 
0x304: v304 = MLOAD v302(0x40)
0x307: v307 = SUB v2fe v304
0x309: RETURN v304 v307
----------------------------------

Begin block 0x30a
prev = {}, next = {'0x311', '0x315'}
----------------------------------
function burnFrom(address,uint256)()
Block 0x30a
0x30b: v30b = CALLVALUE 
0x30c: v30c = ISZERO v30b
0x30d: v30d(0x315) = CONST 
0x310: JUMPI v30d(0x315) v30c
----------------------------------

Begin block 0x311
prev = {'0x30a'}, next = {}
----------------------------------
Block 0x311
0x311: v311(0x0) = CONST 
0x314: REVERT v311(0x0) v311(0x0)
----------------------------------

Begin block 0x315
prev = {'0x30a'}, next = {'0x977'}
----------------------------------
Block 0x315
0x316: v316(0x34a) = CONST 
0x319: v319(0x4) = CONST 
0x31d: v31d = CALLDATALOAD v319(0x4)
0x31e: v31e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x333: v333 = AND v31e(0xffffffffffffffffffffffffffffffffffffffff) v31d
0x335: v335(0x20) = CONST 
0x337: v337(0x24) = ADD v335(0x20) v319(0x4)
0x33c: v33c = CALLDATALOAD v337(0x24)
0x33e: v33e(0x20) = CONST 
0x340: v340(0x44) = ADD v33e(0x20) v337(0x24)
0x346: v346(0x977) = CONST 
0x349: JUMP v346(0x977)
----------------------------------

Begin block 0x34a
prev = {'0xb8c'}, next = {}
----------------------------------
Block 0x34a
0x34b: v34b(0x40) = CONST 
0x34d: v34d = MLOAD v34b(0x40)
0x350: v350 = ISZERO vb88(0x1)
0x351: v351 = ISZERO v350
0x352: v352 = ISZERO v351
0x353: v353 = ISZERO v352
0x355: MSTORE v34d v353
0x356: v356(0x20) = CONST 
0x358: v358 = ADD v356(0x20) v34d
0x35c: v35c(0x40) = CONST 
0x35e: v35e = MLOAD v35c(0x40)
0x361: v361 = SUB v358 v35e
0x363: RETURN v35e v361
----------------------------------

Begin block 0x364
prev = {}, next = {'0x36b', '0x36f'}
----------------------------------
function symbol()()
Block 0x364
0x365: v365 = CALLVALUE 
0x366: v366 = ISZERO v365
0x367: v367(0x36f) = CONST 
0x36a: JUMPI v367(0x36f) v366
----------------------------------

Begin block 0x36b
prev = {'0x364'}, next = {}
----------------------------------
Block 0x36b
0x36b: v36b(0x0) = CONST 
0x36e: REVERT v36b(0x0) v36b(0x0)
----------------------------------

Begin block 0x36f
prev = {'0x364'}, next = {'0xb92'}
----------------------------------
Block 0x36f
0x370: v370(0x377) = CONST 
0x373: v373(0xb92) = CONST 
0x376: JUMP v373(0xb92)
----------------------------------

Begin block 0x377
prev = {'0xc28'}, next = {'0x39c'}
----------------------------------
Block 0x377
0x378: v378(0x40) = CONST 
0x37a: v37a = MLOAD v378(0x40)
0x37d: v37d(0x20) = CONST 
0x37f: v37f = ADD v37d(0x20) v37a
0x382: v382 = SUB v37f v37a
0x384: MSTORE v37a v382
0x388: v388 = MLOAD vbb7
0x38a: MSTORE v37f v388
0x38b: v38b(0x20) = CONST 
0x38d: v38d = ADD v38b(0x20) v37f
0x391: v391 = MLOAD vbb7
0x393: v393(0x20) = CONST 
0x395: v395 = ADD v393(0x20) vbb7
0x39a: v39a(0x0) = CONST 
----------------------------------

Begin block 0x39c
prev = {'0x377', '0x3ad'}, next = {'0x3a5', '0x3b8'}
----------------------------------
Block 0x39c
0x39c_0x0: v39c_0 = PHI v39a(0x0) v3b1
0x39f: v39f = LT v39c_0 v391
0x3a0: v3a0 = ISZERO v39f
0x3a1: v3a1(0x3b8) = CONST 
0x3a4: JUMPI v3a1(0x3b8) v3a0
----------------------------------

Begin block 0x3a5
prev = {'0x39c'}, next = {'0x3ad'}
----------------------------------
Block 0x3a5
0x3a5_0x0: v3a5_0 = PHI v39a(0x0) v3b1
0x3a7: v3a7 = ADD v395 v3a5_0
0x3a8: v3a8 = MLOAD v3a7
0x3ab: v3ab = ADD v38d v3a5_0
0x3ac: MSTORE v3ab v3a8
----------------------------------

Begin block 0x3ad
prev = {'0x3a5'}, next = {'0x39c'}
----------------------------------
Block 0x3ad
0x3ad_0x0: v3ad_0 = PHI v39a(0x0) v3b1
0x3ae: v3ae(0x20) = CONST 
0x3b1: v3b1 = ADD v3ad_0 v3ae(0x20)
0x3b4: v3b4(0x39c) = CONST 
0x3b7: JUMP v3b4(0x39c)
----------------------------------

Begin block 0x3b8
prev = {'0x39c'}, next = {'0x3cc', '0x3e5'}
----------------------------------
Block 0x3b8
0x3c1: v3c1 = ADD v391 v38d
0x3c3: v3c3(0x1f) = CONST 
0x3c5: v3c5 = AND v3c3(0x1f) v391
0x3c7: v3c7 = ISZERO v3c5
0x3c8: v3c8(0x3e5) = CONST 
0x3cb: JUMPI v3c8(0x3e5) v3c7
----------------------------------

Begin block 0x3cc
prev = {'0x3b8'}, next = {'0x3e5'}
----------------------------------
Block 0x3cc
0x3ce: v3ce = SUB v3c1 v3c5
0x3d0: v3d0 = MLOAD v3ce
0x3d1: v3d1(0x1) = CONST 
0x3d4: v3d4(0x20) = CONST 
0x3d6: v3d6 = SUB v3d4(0x20) v3c5
0x3d7: v3d7(0x100) = CONST 
0x3da: v3da = EXP v3d7(0x100) v3d6
0x3db: v3db = SUB v3da v3d1(0x1)
0x3dc: v3dc = NOT v3db
0x3dd: v3dd = AND v3dc v3d0
0x3df: MSTORE v3ce v3dd
0x3e0: v3e0(0x20) = CONST 
0x3e2: v3e2 = ADD v3e0(0x20) v3ce
----------------------------------

Begin block 0x3e5
prev = {'0x3cc', '0x3b8'}, next = {}
----------------------------------
Block 0x3e5
0x3e5_0x1: v3e5_1 = PHI v3c1 v3e2
0x3eb: v3eb(0x40) = CONST 
0x3ed: v3ed = MLOAD v3eb(0x40)
0x3f0: v3f0 = SUB v3e5_1 v3ed
0x3f2: RETURN v3ed v3f0
----------------------------------

Begin block 0x3f3
prev = {}, next = {'0x3fa', '0x3fe'}
----------------------------------
function TokenERC20(uint256,string,string)()
Block 0x3f3
0x3f4: v3f4 = CALLVALUE 
0x3f5: v3f5 = ISZERO v3f4
0x3f6: v3f6(0x3fe) = CONST 
0x3f9: JUMPI v3f6(0x3fe) v3f5
----------------------------------

Begin block 0x3fa
prev = {'0x3f3'}, next = {}
----------------------------------
Block 0x3fa
0x3fa: v3fa(0x0) = CONST 
0x3fd: REVERT v3fa(0x0) v3fa(0x0)
----------------------------------

Begin block 0x3fe
prev = {'0x3f3'}, next = {'0xc30'}
----------------------------------
Block 0x3fe
0x3ff: v3ff(0x49a) = CONST 
0x402: v402(0x4) = CONST 
0x406: v406 = CALLDATALOAD v402(0x4)
0x408: v408(0x20) = CONST 
0x40a: v40a(0x24) = ADD v408(0x20) v402(0x4)
0x40f: v40f = CALLDATALOAD v40a(0x24)
0x411: v411(0x20) = CONST 
0x413: v413(0x44) = ADD v411(0x20) v40a(0x24)
0x416: v416 = ADD v402(0x4) v40f
0x418: v418 = CALLDATALOAD v416
0x41a: v41a(0x20) = CONST 
0x41c: v41c = ADD v41a(0x20) v416
0x420: v420(0x1f) = CONST 
0x422: v422 = ADD v420(0x1f) v418
0x423: v423(0x20) = CONST 
0x427: v427 = DIV v422 v423(0x20)
0x428: v428 = MUL v427 v423(0x20)
0x429: v429(0x20) = CONST 
0x42b: v42b = ADD v429(0x20) v428
0x42c: v42c(0x40) = CONST 
0x42e: v42e = MLOAD v42c(0x40)
0x431: v431 = ADD v42e v42b
0x432: v432(0x40) = CONST 
0x434: MSTORE v432(0x40) v431
0x43c: MSTORE v42e v418
0x43d: v43d(0x20) = CONST 
0x43f: v43f = ADD v43d(0x20) v42e
0x445: CALLDATACOPY v43f v41c v418
0x447: v447 = ADD v43f v418
0x452: v452 = CALLDATALOAD v413(0x44)
0x454: v454(0x20) = CONST 
0x456: v456(0x64) = ADD v454(0x20) v413(0x44)
0x459: v459 = ADD v402(0x4) v452
0x45b: v45b = CALLDATALOAD v459
0x45d: v45d(0x20) = CONST 
0x45f: v45f = ADD v45d(0x20) v459
0x463: v463(0x1f) = CONST 
0x465: v465 = ADD v463(0x1f) v45b
0x466: v466(0x20) = CONST 
0x46a: v46a = DIV v465 v466(0x20)
0x46b: v46b = MUL v46a v466(0x20)
0x46c: v46c(0x20) = CONST 
0x46e: v46e = ADD v46c(0x20) v46b
0x46f: v46f(0x40) = CONST 
0x471: v471 = MLOAD v46f(0x40)
0x474: v474 = ADD v471 v46e
0x475: v475(0x40) = CONST 
0x477: MSTORE v475(0x40) v474
0x47f: MSTORE v471 v45b
0x480: v480(0x20) = CONST 
0x482: v482 = ADD v480(0x20) v471
0x488: CALLDATACOPY v482 v45f v45b
0x48a: v48a = ADD v482 v45b
0x496: v496(0xc30) = CONST 
0x499: JUMP v496(0xc30)
----------------------------------

Begin block 0x49a
prev = {'0xd1c'}, next = {}
----------------------------------
Block 0x49a
0x49b: STOP 
----------------------------------

Begin block 0x49c
prev = {}, next = {'0x4a7', '0x4a3'}
----------------------------------
function transfer(address,uint256)()
Block 0x49c
0x49d: v49d = CALLVALUE 
0x49e: v49e = ISZERO v49d
0x49f: v49f(0x4a7) = CONST 
0x4a2: JUMPI v49f(0x4a7) v49e
----------------------------------

Begin block 0x4a3
prev = {'0x49c'}, next = {}
----------------------------------
Block 0x4a3
0x4a3: v4a3(0x0) = CONST 
0x4a6: REVERT v4a3(0x0) v4a3(0x0)
----------------------------------

Begin block 0x4a7
prev = {'0x49c'}, next = {'0xd21'}
----------------------------------
Block 0x4a7
0x4a8: v4a8(0x4dc) = CONST 
0x4ab: v4ab(0x4) = CONST 
0x4af: v4af = CALLDATALOAD v4ab(0x4)
0x4b0: v4b0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4c5: v4c5 = AND v4b0(0xffffffffffffffffffffffffffffffffffffffff) v4af
0x4c7: v4c7(0x20) = CONST 
0x4c9: v4c9(0x24) = ADD v4c7(0x20) v4ab(0x4)
0x4ce: v4ce = CALLDATALOAD v4c9(0x24)
0x4d0: v4d0(0x20) = CONST 
0x4d2: v4d2(0x44) = ADD v4d0(0x20) v4c9(0x24)
0x4d8: v4d8(0xd21) = CONST 
0x4db: JUMP v4d8(0xd21)
----------------------------------

Begin block 0x4dc
prev = {'0xd2d'}, next = {}
----------------------------------
Block 0x4dc
0x4dd: STOP 
----------------------------------

Begin block 0x4de
prev = {}, next = {'0x4e9', '0x4e5'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x4de
0x4df: v4df = CALLVALUE 
0x4e0: v4e0 = ISZERO v4df
0x4e1: v4e1(0x4e9) = CONST 
0x4e4: JUMPI v4e1(0x4e9) v4e0
----------------------------------

Begin block 0x4e5
prev = {'0x4de'}, next = {}
----------------------------------
Block 0x4e5
0x4e5: v4e5(0x0) = CONST 
0x4e8: REVERT v4e5(0x0) v4e5(0x0)
----------------------------------

Begin block 0x4e9
prev = {'0x4de'}, next = {'0xd31'}
----------------------------------
Block 0x4e9
0x4ea: v4ea(0x561) = CONST 
0x4ed: v4ed(0x4) = CONST 
0x4f1: v4f1 = CALLDATALOAD v4ed(0x4)
0x4f2: v4f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x507: v507 = AND v4f2(0xffffffffffffffffffffffffffffffffffffffff) v4f1
0x509: v509(0x20) = CONST 
0x50b: v50b(0x24) = ADD v509(0x20) v4ed(0x4)
0x510: v510 = CALLDATALOAD v50b(0x24)
0x512: v512(0x20) = CONST 
0x514: v514(0x44) = ADD v512(0x20) v50b(0x24)
0x519: v519 = CALLDATALOAD v514(0x44)
0x51b: v51b(0x20) = CONST 
0x51d: v51d(0x64) = ADD v51b(0x20) v514(0x44)
0x520: v520 = ADD v4ed(0x4) v519
0x522: v522 = CALLDATALOAD v520
0x524: v524(0x20) = CONST 
0x526: v526 = ADD v524(0x20) v520
0x52a: v52a(0x1f) = CONST 
0x52c: v52c = ADD v52a(0x1f) v522
0x52d: v52d(0x20) = CONST 
0x531: v531 = DIV v52c v52d(0x20)
0x532: v532 = MUL v531 v52d(0x20)
0x533: v533(0x20) = CONST 
0x535: v535 = ADD v533(0x20) v532
0x536: v536(0x40) = CONST 
0x538: v538 = MLOAD v536(0x40)
0x53b: v53b = ADD v538 v535
0x53c: v53c(0x40) = CONST 
0x53e: MSTORE v53c(0x40) v53b
0x546: MSTORE v538 v522
0x547: v547(0x20) = CONST 
0x549: v549 = ADD v547(0x20) v538
0x54f: CALLDATACOPY v549 v526 v522
0x551: v551 = ADD v549 v522
0x55d: v55d(0xd31) = CONST 
0x560: JUMP v55d(0xd31)
----------------------------------

Begin block 0x561
prev = {'0xea8'}, next = {}
----------------------------------
Block 0x561
0x561_0x0: v561_0 = PHI vd32(0x0) ve9f(0x1)
0x562: v562(0x40) = CONST 
0x564: v564 = MLOAD v562(0x40)
0x567: v567 = ISZERO v561_0
0x568: v568 = ISZERO v567
0x569: v569 = ISZERO v568
0x56a: v56a = ISZERO v569
0x56c: MSTORE v564 v56a
0x56d: v56d(0x20) = CONST 
0x56f: v56f = ADD v56d(0x20) v564
0x573: v573(0x40) = CONST 
0x575: v575 = MLOAD v573(0x40)
0x578: v578 = SUB v56f v575
0x57a: RETURN v575 v578
----------------------------------

Begin block 0x57b
prev = {}, next = {'0x582', '0x586'}
----------------------------------
function allowance(address,address)()
Block 0x57b
0x57c: v57c = CALLVALUE 
0x57d: v57d = ISZERO v57c
0x57e: v57e(0x586) = CONST 
0x581: JUMPI v57e(0x586) v57d
----------------------------------

Begin block 0x582
prev = {'0x57b'}, next = {}
----------------------------------
Block 0x582
0x582: v582(0x0) = CONST 
0x585: REVERT v582(0x0) v582(0x0)
----------------------------------

Begin block 0x586
prev = {'0x57b'}, next = {'0xeb0'}
----------------------------------
Block 0x586
0x587: v587(0x5d1) = CONST 
0x58a: v58a(0x4) = CONST 
0x58e: v58e = CALLDATALOAD v58a(0x4)
0x58f: v58f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5a4: v5a4 = AND v58f(0xffffffffffffffffffffffffffffffffffffffff) v58e
0x5a6: v5a6(0x20) = CONST 
0x5a8: v5a8(0x24) = ADD v5a6(0x20) v58a(0x4)
0x5ad: v5ad = CALLDATALOAD v5a8(0x24)
0x5ae: v5ae(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5c3: v5c3 = AND v5ae(0xffffffffffffffffffffffffffffffffffffffff) v5ad
0x5c5: v5c5(0x20) = CONST 
0x5c7: v5c7(0x44) = ADD v5c5(0x20) v5a8(0x24)
0x5cd: v5cd(0xeb0) = CONST 
0x5d0: JUMP v5cd(0xeb0)
----------------------------------

Begin block 0x5d1
prev = {'0xeb0'}, next = {}
----------------------------------
Block 0x5d1
0x5d2: v5d2(0x40) = CONST 
0x5d4: v5d4 = MLOAD v5d2(0x40)
0x5d8: MSTORE v5d4 ved2
0x5d9: v5d9(0x20) = CONST 
0x5db: v5db = ADD v5d9(0x20) v5d4
0x5df: v5df(0x40) = CONST 
0x5e1: v5e1 = MLOAD v5df(0x40)
0x5e4: v5e4 = SUB v5db v5e1
0x5e6: RETURN v5e1 v5e4
----------------------------------

Begin block 0x5e7
prev = {'0xd3'}, next = {'0x637', '0x67d'}
----------------------------------
Block 0x5e7
0x5e8: v5e8(0x0) = CONST 
0x5eb: v5eb = SLOAD v5e8(0x0)
0x5ec: v5ec(0x1) = CONST 
0x5ef: v5ef(0x1) = CONST 
0x5f1: v5f1 = AND v5ef(0x1) v5eb
0x5f2: v5f2 = ISZERO v5f1
0x5f3: v5f3(0x100) = CONST 
0x5f6: v5f6 = MUL v5f3(0x100) v5f2
0x5f7: v5f7 = SUB v5f6 v5ec(0x1)
0x5f8: v5f8 = AND v5f7 v5eb
0x5f9: v5f9(0x2) = CONST 
0x5fc: v5fc = DIV v5f8 v5f9(0x2)
0x5fe: v5fe(0x1f) = CONST 
0x600: v600 = ADD v5fe(0x1f) v5fc
0x601: v601(0x20) = CONST 
0x605: v605 = DIV v600 v601(0x20)
0x606: v606 = MUL v605 v601(0x20)
0x607: v607(0x20) = CONST 
0x609: v609 = ADD v607(0x20) v606
0x60a: v60a(0x40) = CONST 
0x60c: v60c = MLOAD v60a(0x40)
0x60f: v60f = ADD v60c v609
0x610: v610(0x40) = CONST 
0x612: MSTORE v610(0x40) v60f
0x619: MSTORE v60c v5fc
0x61a: v61a(0x20) = CONST 
0x61c: v61c = ADD v61a(0x20) v60c
0x61f: v61f = SLOAD v5e8(0x0)
0x620: v620(0x1) = CONST 
0x623: v623(0x1) = CONST 
0x625: v625 = AND v623(0x1) v61f
0x626: v626 = ISZERO v625
0x627: v627(0x100) = CONST 
0x62a: v62a = MUL v627(0x100) v626
0x62b: v62b = SUB v62a v620(0x1)
0x62c: v62c = AND v62b v61f
0x62d: v62d(0x2) = CONST 
0x630: v630 = DIV v62c v62d(0x2)
0x632: v632 = ISZERO v630
0x633: v633(0x67d) = CONST 
0x636: JUMPI v633(0x67d) v632
----------------------------------

Begin block 0x637
prev = {'0x5e7'}, next = {'0x63f', '0x652'}
----------------------------------
Block 0x637
0x638: v638(0x1f) = CONST 
0x63a: v63a = LT v638(0x1f) v630
0x63b: v63b(0x652) = CONST 
0x63e: JUMPI v63b(0x652) v63a
----------------------------------

Begin block 0x63f
prev = {'0x637'}, next = {'0x67d'}
----------------------------------
Block 0x63f
0x63f: v63f(0x100) = CONST 
0x644: v644 = SLOAD v5e8(0x0)
0x645: v645 = DIV v644 v63f(0x100)
0x646: v646 = MUL v645 v63f(0x100)
0x648: MSTORE v61c v646
0x64a: v64a(0x20) = CONST 
0x64c: v64c = ADD v64a(0x20) v61c
0x64e: v64e(0x67d) = CONST 
0x651: JUMP v64e(0x67d)
----------------------------------

Begin block 0x652
prev = {'0x637'}, next = {'0x660'}
----------------------------------
Block 0x652
0x654: v654 = ADD v61c v630
0x657: v657(0x0) = CONST 
0x659: MSTORE v657(0x0) v5e8(0x0)
0x65a: v65a(0x20) = CONST 
0x65c: v65c(0x0) = CONST 
0x65e: v65e = SHA3 v65c(0x0) v65a(0x20)
----------------------------------

Begin block 0x660
prev = {'0x652', '0x660'}, next = {'0x674', '0x660'}
----------------------------------
Block 0x660
0x660_0x0: v660_0 = PHI v61c v66c
0x660_0x1: v660_1 = PHI v65e v668
0x662: v662 = SLOAD v660_1
0x664: MSTORE v660_0 v662
0x666: v666(0x1) = CONST 
0x668: v668 = ADD v666(0x1) v660_1
0x66a: v66a(0x20) = CONST 
0x66c: v66c = ADD v66a(0x20) v660_0
0x66f: v66f = GT v654 v66c
0x670: v670(0x660) = CONST 
0x673: JUMPI v670(0x660) v66f
----------------------------------

Begin block 0x674
prev = {'0x660'}, next = {'0x67d'}
----------------------------------
Block 0x674
0x676: v676 = SUB v66c v654
0x677: v677(0x1f) = CONST 
0x679: v679 = AND v677(0x1f) v676
0x67b: v67b = ADD v654 v679
----------------------------------

Begin block 0x67d
prev = {'0x674', '0x63f', '0x5e7'}, next = {'0xdb'}
----------------------------------
Block 0x67d
0x684: JUMP vd4(0xdb)
----------------------------------

Begin block 0x685
prev = {}, next = {'0x70d'}
----------------------------------
function 0x685(v685arg0, v685arg1, v685arg2)
Block 0x685
0x686: v686(0x0) = CONST 
0x689: v689(0x5) = CONST 
0x68b: v68b(0x0) = CONST 
0x68d: v68d = CALLER 
0x68e: v68e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6a3: v6a3 = AND v68e(0xffffffffffffffffffffffffffffffffffffffff) v68d
0x6a4: v6a4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6b9: v6b9 = AND v6a4(0xffffffffffffffffffffffffffffffffffffffff) v6a3
0x6bb: MSTORE v68b(0x0) v6b9
0x6bc: v6bc(0x20) = CONST 
0x6be: v6be(0x20) = ADD v6bc(0x20) v68b(0x0)
0x6c1: MSTORE v6be(0x20) v689(0x5)
0x6c2: v6c2(0x20) = CONST 
0x6c4: v6c4(0x40) = ADD v6c2(0x20) v6be(0x20)
0x6c5: v6c5(0x0) = CONST 
0x6c7: v6c7 = SHA3 v6c5(0x0) v6c4(0x40)
0x6c8: v6c8(0x0) = CONST 
0x6cb: v6cb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6e0: v6e0 = AND v6cb(0xffffffffffffffffffffffffffffffffffffffff) v685arg1
0x6e1: v6e1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6f6: v6f6 = AND v6e1(0xffffffffffffffffffffffffffffffffffffffff) v6e0
0x6f8: MSTORE v6c8(0x0) v6f6
0x6f9: v6f9(0x20) = CONST 
0x6fb: v6fb(0x20) = ADD v6f9(0x20) v6c8(0x0)
0x6fe: MSTORE v6fb(0x20) v6c7
0x6ff: v6ff(0x20) = CONST 
0x701: v701(0x40) = ADD v6ff(0x20) v6fb(0x20)
0x702: v702(0x0) = CONST 
0x704: v704 = SHA3 v702(0x0) v701(0x40)
0x707: SSTORE v704 v685arg0
0x709: v709(0x1) = CONST 
----------------------------------

Begin block 0x70d
prev = {'0x685'}, next = {}
----------------------------------
Block 0x70d
0x712: RETURNPRIVATE v685arg2 v709(0x1)
----------------------------------

Begin block 0x713
prev = {'0x1bc'}, next = {'0x1c4'}
----------------------------------
Block 0x713
0x714: v714(0x3) = CONST 
0x716: v716 = SLOAD v714(0x3)
0x718: JUMP v1bd(0x1c4)
----------------------------------

Begin block 0x719
prev = {'0x1e5'}, next = {'0x7a6', '0x7a2'}
----------------------------------
Block 0x719
0x71a: v71a(0x0) = CONST 
0x71c: v71c(0x5) = CONST 
0x71e: v71e(0x0) = CONST 
0x721: v721(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x736: v736 = AND v721(0xffffffffffffffffffffffffffffffffffffffff) v203
0x737: v737(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x74c: v74c = AND v737(0xffffffffffffffffffffffffffffffffffffffff) v736
0x74e: MSTORE v71e(0x0) v74c
0x74f: v74f(0x20) = CONST 
0x751: v751(0x20) = ADD v74f(0x20) v71e(0x0)
0x754: MSTORE v751(0x20) v71c(0x5)
0x755: v755(0x20) = CONST 
0x757: v757(0x40) = ADD v755(0x20) v751(0x20)
0x758: v758(0x0) = CONST 
0x75a: v75a = SHA3 v758(0x0) v757(0x40)
0x75b: v75b(0x0) = CONST 
0x75d: v75d = CALLER 
0x75e: v75e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x773: v773 = AND v75e(0xffffffffffffffffffffffffffffffffffffffff) v75d
0x774: v774(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x789: v789 = AND v774(0xffffffffffffffffffffffffffffffffffffffff) v773
0x78b: MSTORE v75b(0x0) v789
0x78c: v78c(0x20) = CONST 
0x78e: v78e(0x20) = ADD v78c(0x20) v75b(0x0)
0x791: MSTORE v78e(0x20) v75a
0x792: v792(0x20) = CONST 
0x794: v794(0x40) = ADD v792(0x20) v78e(0x20)
0x795: v795(0x0) = CONST 
0x797: v797 = SHA3 v795(0x0) v794(0x40)
0x798: v798 = SLOAD v797
0x79a: v79a = GT v22b v798
0x79b: v79b = ISZERO v79a
0x79c: v79c = ISZERO v79b
0x79d: v79d = ISZERO v79c
0x79e: v79e(0x7a6) = CONST 
0x7a1: JUMPI v79e(0x7a6) v79d
----------------------------------

Begin block 0x7a2
prev = {'0x719'}, next = {}
----------------------------------
Block 0x7a2
0x7a2: v7a2(0x0) = CONST 
0x7a5: REVERT v7a2(0x0) v7a2(0x0)
----------------------------------

Begin block 0x7a6
prev = {'0x719'}, next = {'0x83b'}
----------------------------------
Block 0x7a6
0x7a8: v7a8(0x5) = CONST 
0x7aa: v7aa(0x0) = CONST 
0x7ad: v7ad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7c2: v7c2 = AND v7ad(0xffffffffffffffffffffffffffffffffffffffff) v203
0x7c3: v7c3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7d8: v7d8 = AND v7c3(0xffffffffffffffffffffffffffffffffffffffff) v7c2
0x7da: MSTORE v7aa(0x0) v7d8
0x7db: v7db(0x20) = CONST 
0x7dd: v7dd(0x20) = ADD v7db(0x20) v7aa(0x0)
0x7e0: MSTORE v7dd(0x20) v7a8(0x5)
0x7e1: v7e1(0x20) = CONST 
0x7e3: v7e3(0x40) = ADD v7e1(0x20) v7dd(0x20)
0x7e4: v7e4(0x0) = CONST 
0x7e6: v7e6 = SHA3 v7e4(0x0) v7e3(0x40)
0x7e7: v7e7(0x0) = CONST 
0x7e9: v7e9 = CALLER 
0x7ea: v7ea(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ff: v7ff = AND v7ea(0xffffffffffffffffffffffffffffffffffffffff) v7e9
0x800: v800(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x815: v815 = AND v800(0xffffffffffffffffffffffffffffffffffffffff) v7ff
0x817: MSTORE v7e7(0x0) v815
0x818: v818(0x20) = CONST 
0x81a: v81a(0x20) = ADD v818(0x20) v7e7(0x0)
0x81d: MSTORE v81a(0x20) v7e6
0x81e: v81e(0x20) = CONST 
0x820: v820(0x40) = ADD v81e(0x20) v81a(0x20)
0x821: v821(0x0) = CONST 
0x823: v823 = SHA3 v821(0x0) v820(0x40)
0x824: v824(0x0) = CONST 
0x828: v828 = SLOAD v823
0x829: v829 = SUB v828 v22b
0x82f: SSTORE v823 v829
0x831: v831(0x83b) = CONST 
0x837: v837(0xed5) = CONST 
0x83a: CALLPRIVATE v837(0xed5) v22b v222 v203 v831(0x83b)
----------------------------------

Begin block 0x83b
prev = {'0x7a6'}, next = {'0x840'}
----------------------------------
Block 0x83b
0x83c: v83c(0x1) = CONST 
----------------------------------

Begin block 0x840
prev = {'0x83b'}, next = {'0x239'}
----------------------------------
Block 0x840
0x846: JUMP v1e6(0x239)
----------------------------------

Begin block 0x847
prev = {'0x25e'}, next = {'0x266'}
----------------------------------
Block 0x847
0x848: v848(0x2) = CONST 
0x84a: v84a(0x0) = CONST 
0x84d: v84d = SLOAD v848(0x2)
0x84f: v84f(0x100) = CONST 
0x852: v852(0x1) = EXP v84f(0x100) v84a(0x0)
0x854: v854 = DIV v84d v852(0x1)
0x855: v855(0xff) = CONST 
0x857: v857 = AND v855(0xff) v854
0x859: JUMP v25f(0x266)
----------------------------------

Begin block 0x85a
prev = {'0x28d'}, next = {'0x8aa', '0x8a6'}
----------------------------------
Block 0x85a
0x85b: v85b(0x0) = CONST 
0x85e: v85e(0x4) = CONST 
0x860: v860(0x0) = CONST 
0x862: v862 = CALLER 
0x863: v863(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x878: v878 = AND v863(0xffffffffffffffffffffffffffffffffffffffff) v862
0x879: v879(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x88e: v88e = AND v879(0xffffffffffffffffffffffffffffffffffffffff) v878
0x890: MSTORE v860(0x0) v88e
0x891: v891(0x20) = CONST 
0x893: v893(0x20) = ADD v891(0x20) v860(0x0)
0x896: MSTORE v893(0x20) v85e(0x4)
0x897: v897(0x20) = CONST 
0x899: v899(0x40) = ADD v897(0x20) v893(0x20)
0x89a: v89a(0x0) = CONST 
0x89c: v89c = SHA3 v89a(0x0) v899(0x40)
0x89d: v89d = SLOAD v89c
0x89e: v89e = LT v89d v295
0x89f: v89f = ISZERO v89e
0x8a0: v8a0 = ISZERO v89f
0x8a1: v8a1 = ISZERO v8a0
0x8a2: v8a2(0x8aa) = CONST 
0x8a5: JUMPI v8a2(0x8aa) v8a1
----------------------------------

Begin block 0x8a6
prev = {'0x85a'}, next = {}
----------------------------------
Block 0x8a6
0x8a6: v8a6(0x0) = CONST 
0x8a9: REVERT v8a6(0x0) v8a6(0x0)
----------------------------------

Begin block 0x8aa
prev = {'0x85a'}, next = {'0x95a'}
----------------------------------
Block 0x8aa
0x8ac: v8ac(0x4) = CONST 
0x8ae: v8ae(0x0) = CONST 
0x8b0: v8b0 = CALLER 
0x8b1: v8b1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8c6: v8c6 = AND v8b1(0xffffffffffffffffffffffffffffffffffffffff) v8b0
0x8c7: v8c7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8dc: v8dc = AND v8c7(0xffffffffffffffffffffffffffffffffffffffff) v8c6
0x8de: MSTORE v8ae(0x0) v8dc
0x8df: v8df(0x20) = CONST 
0x8e1: v8e1(0x20) = ADD v8df(0x20) v8ae(0x0)
0x8e4: MSTORE v8e1(0x20) v8ac(0x4)
0x8e5: v8e5(0x20) = CONST 
0x8e7: v8e7(0x40) = ADD v8e5(0x20) v8e1(0x20)
0x8e8: v8e8(0x0) = CONST 
0x8ea: v8ea = SHA3 v8e8(0x0) v8e7(0x40)
0x8eb: v8eb(0x0) = CONST 
0x8ef: v8ef = SLOAD v8ea
0x8f0: v8f0 = SUB v8ef v295
0x8f6: SSTORE v8ea v8f0
0x8f9: v8f9(0x3) = CONST 
0x8fb: v8fb(0x0) = CONST 
0x8ff: v8ff = SLOAD v8f9(0x3)
0x900: v900 = SUB v8ff v295
0x906: SSTORE v8f9(0x3) v900
0x908: v908 = CALLER 
0x909: v909(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x91e: v91e = AND v909(0xffffffffffffffffffffffffffffffffffffffff) v908
0x91f: v91f(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0x941: v941(0x40) = CONST 
0x943: v943 = MLOAD v941(0x40)
0x947: MSTORE v943 v295
0x948: v948(0x20) = CONST 
0x94a: v94a = ADD v948(0x20) v943
0x94e: v94e(0x40) = CONST 
0x950: v950 = MLOAD v94e(0x40)
0x953: v953 = SUB v94a v950
0x955: LOG2 v950 v953 v91f(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) v91e
0x956: v956(0x1) = CONST 
----------------------------------

Begin block 0x95a
prev = {'0x8aa'}, next = {'0x2a3'}
----------------------------------
Block 0x95a
0x95e: JUMP v28e(0x2a3)
----------------------------------

Begin block 0x95f
prev = {'0x2c8'}, next = {'0x2f4'}
----------------------------------
Block 0x95f
0x960: v960(0x4) = CONST 
0x962: v962(0x20) = CONST 
0x964: MSTORE v962(0x20) v960(0x4)
0x966: v966(0x0) = CONST 
0x968: MSTORE v966(0x0) v2e6
0x969: v969(0x40) = CONST 
0x96b: v96b(0x0) = CONST 
0x96d: v96d = SHA3 v96b(0x0) v969(0x40)
0x96e: v96e(0x0) = CONST 
0x974: v974 = SLOAD v96d
0x976: JUMP v2c9(0x2f4)
----------------------------------

Begin block 0x977
prev = {'0x315'}, next = {'0x9c3', '0x9c7'}
----------------------------------
Block 0x977
0x978: v978(0x0) = CONST 
0x97b: v97b(0x4) = CONST 
0x97d: v97d(0x0) = CONST 
0x980: v980(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x995: v995 = AND v980(0xffffffffffffffffffffffffffffffffffffffff) v333
0x996: v996(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9ab: v9ab = AND v996(0xffffffffffffffffffffffffffffffffffffffff) v995
0x9ad: MSTORE v97d(0x0) v9ab
0x9ae: v9ae(0x20) = CONST 
0x9b0: v9b0(0x20) = ADD v9ae(0x20) v97d(0x0)
0x9b3: MSTORE v9b0(0x20) v97b(0x4)
0x9b4: v9b4(0x20) = CONST 
0x9b6: v9b6(0x40) = ADD v9b4(0x20) v9b0(0x20)
0x9b7: v9b7(0x0) = CONST 
0x9b9: v9b9 = SHA3 v9b7(0x0) v9b6(0x40)
0x9ba: v9ba = SLOAD v9b9
0x9bb: v9bb = LT v9ba v33c
0x9bc: v9bc = ISZERO v9bb
0x9bd: v9bd = ISZERO v9bc
0x9be: v9be = ISZERO v9bd
0x9bf: v9bf(0x9c7) = CONST 
0x9c2: JUMPI v9bf(0x9c7) v9be
----------------------------------

Begin block 0x9c3
prev = {'0x977'}, next = {}
----------------------------------
Block 0x9c3
0x9c3: v9c3(0x0) = CONST 
0x9c6: REVERT v9c3(0x0) v9c3(0x0)
----------------------------------

Begin block 0x9c7
prev = {'0x977'}, next = {'0xa52', '0xa4e'}
----------------------------------
Block 0x9c7
0x9c8: v9c8(0x5) = CONST 
0x9ca: v9ca(0x0) = CONST 
0x9cd: v9cd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e2: v9e2 = AND v9cd(0xffffffffffffffffffffffffffffffffffffffff) v333
0x9e3: v9e3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9f8: v9f8 = AND v9e3(0xffffffffffffffffffffffffffffffffffffffff) v9e2
0x9fa: MSTORE v9ca(0x0) v9f8
0x9fb: v9fb(0x20) = CONST 
0x9fd: v9fd(0x20) = ADD v9fb(0x20) v9ca(0x0)
0xa00: MSTORE v9fd(0x20) v9c8(0x5)
0xa01: va01(0x20) = CONST 
0xa03: va03(0x40) = ADD va01(0x20) v9fd(0x20)
0xa04: va04(0x0) = CONST 
0xa06: va06 = SHA3 va04(0x0) va03(0x40)
0xa07: va07(0x0) = CONST 
0xa09: va09 = CALLER 
0xa0a: va0a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa1f: va1f = AND va0a(0xffffffffffffffffffffffffffffffffffffffff) va09
0xa20: va20(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa35: va35 = AND va20(0xffffffffffffffffffffffffffffffffffffffff) va1f
0xa37: MSTORE va07(0x0) va35
0xa38: va38(0x20) = CONST 
0xa3a: va3a(0x20) = ADD va38(0x20) va07(0x0)
0xa3d: MSTORE va3a(0x20) va06
0xa3e: va3e(0x20) = CONST 
0xa40: va40(0x40) = ADD va3e(0x20) va3a(0x20)
0xa41: va41(0x0) = CONST 
0xa43: va43 = SHA3 va41(0x0) va40(0x40)
0xa44: va44 = SLOAD va43
0xa46: va46 = GT v33c va44
0xa47: va47 = ISZERO va46
0xa48: va48 = ISZERO va47
0xa49: va49 = ISZERO va48
0xa4a: va4a(0xa52) = CONST 
0xa4d: JUMPI va4a(0xa52) va49
----------------------------------

Begin block 0xa4e
prev = {'0x9c7'}, next = {}
----------------------------------
Block 0xa4e
0xa4e: va4e(0x0) = CONST 
0xa51: REVERT va4e(0x0) va4e(0x0)
----------------------------------

Begin block 0xa52
prev = {'0x9c7'}, next = {'0xb8c'}
----------------------------------
Block 0xa52
0xa54: va54(0x4) = CONST 
0xa56: va56(0x0) = CONST 
0xa59: va59(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa6e: va6e = AND va59(0xffffffffffffffffffffffffffffffffffffffff) v333
0xa6f: va6f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa84: va84 = AND va6f(0xffffffffffffffffffffffffffffffffffffffff) va6e
0xa86: MSTORE va56(0x0) va84
0xa87: va87(0x20) = CONST 
0xa89: va89(0x20) = ADD va87(0x20) va56(0x0)
0xa8c: MSTORE va89(0x20) va54(0x4)
0xa8d: va8d(0x20) = CONST 
0xa8f: va8f(0x40) = ADD va8d(0x20) va89(0x20)
0xa90: va90(0x0) = CONST 
0xa92: va92 = SHA3 va90(0x0) va8f(0x40)
0xa93: va93(0x0) = CONST 
0xa97: va97 = SLOAD va92
0xa98: va98 = SUB va97 v33c
0xa9e: SSTORE va92 va98
0xaa1: vaa1(0x5) = CONST 
0xaa3: vaa3(0x0) = CONST 
0xaa6: vaa6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xabb: vabb = AND vaa6(0xffffffffffffffffffffffffffffffffffffffff) v333
0xabc: vabc(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xad1: vad1 = AND vabc(0xffffffffffffffffffffffffffffffffffffffff) vabb
0xad3: MSTORE vaa3(0x0) vad1
0xad4: vad4(0x20) = CONST 
0xad6: vad6(0x20) = ADD vad4(0x20) vaa3(0x0)
0xad9: MSTORE vad6(0x20) vaa1(0x5)
0xada: vada(0x20) = CONST 
0xadc: vadc(0x40) = ADD vada(0x20) vad6(0x20)
0xadd: vadd(0x0) = CONST 
0xadf: vadf = SHA3 vadd(0x0) vadc(0x40)
0xae0: vae0(0x0) = CONST 
0xae2: vae2 = CALLER 
0xae3: vae3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xaf8: vaf8 = AND vae3(0xffffffffffffffffffffffffffffffffffffffff) vae2
0xaf9: vaf9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb0e: vb0e = AND vaf9(0xffffffffffffffffffffffffffffffffffffffff) vaf8
0xb10: MSTORE vae0(0x0) vb0e
0xb11: vb11(0x20) = CONST 
0xb13: vb13(0x20) = ADD vb11(0x20) vae0(0x0)
0xb16: MSTORE vb13(0x20) vadf
0xb17: vb17(0x20) = CONST 
0xb19: vb19(0x40) = ADD vb17(0x20) vb13(0x20)
0xb1a: vb1a(0x0) = CONST 
0xb1c: vb1c = SHA3 vb1a(0x0) vb19(0x40)
0xb1d: vb1d(0x0) = CONST 
0xb21: vb21 = SLOAD vb1c
0xb22: vb22 = SUB vb21 v33c
0xb28: SSTORE vb1c vb22
0xb2b: vb2b(0x3) = CONST 
0xb2d: vb2d(0x0) = CONST 
0xb31: vb31 = SLOAD vb2b(0x3)
0xb32: vb32 = SUB vb31 v33c
0xb38: SSTORE vb2b(0x3) vb32
0xb3b: vb3b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb50: vb50 = AND vb3b(0xffffffffffffffffffffffffffffffffffffffff) v333
0xb51: vb51(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) = CONST 
0xb73: vb73(0x40) = CONST 
0xb75: vb75 = MLOAD vb73(0x40)
0xb79: MSTORE vb75 v33c
0xb7a: vb7a(0x20) = CONST 
0xb7c: vb7c = ADD vb7a(0x20) vb75
0xb80: vb80(0x40) = CONST 
0xb82: vb82 = MLOAD vb80(0x40)
0xb85: vb85 = SUB vb7c vb82
0xb87: LOG2 vb82 vb85 vb51(0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5) vb50
0xb88: vb88(0x1) = CONST 
----------------------------------

Begin block 0xb8c
prev = {'0xa52'}, next = {'0x34a'}
----------------------------------
Block 0xb8c
0xb91: JUMP v316(0x34a)
----------------------------------

Begin block 0xb92
prev = {'0x36f'}, next = {'0xc28', '0xbe2'}
----------------------------------
Block 0xb92
0xb93: vb93(0x1) = CONST 
0xb96: vb96 = SLOAD vb93(0x1)
0xb97: vb97(0x1) = CONST 
0xb9a: vb9a(0x1) = CONST 
0xb9c: vb9c = AND vb9a(0x1) vb96
0xb9d: vb9d = ISZERO vb9c
0xb9e: vb9e(0x100) = CONST 
0xba1: vba1 = MUL vb9e(0x100) vb9d
0xba2: vba2 = SUB vba1 vb97(0x1)
0xba3: vba3 = AND vba2 vb96
0xba4: vba4(0x2) = CONST 
0xba7: vba7 = DIV vba3 vba4(0x2)
0xba9: vba9(0x1f) = CONST 
0xbab: vbab = ADD vba9(0x1f) vba7
0xbac: vbac(0x20) = CONST 
0xbb0: vbb0 = DIV vbab vbac(0x20)
0xbb1: vbb1 = MUL vbb0 vbac(0x20)
0xbb2: vbb2(0x20) = CONST 
0xbb4: vbb4 = ADD vbb2(0x20) vbb1
0xbb5: vbb5(0x40) = CONST 
0xbb7: vbb7 = MLOAD vbb5(0x40)
0xbba: vbba = ADD vbb7 vbb4
0xbbb: vbbb(0x40) = CONST 
0xbbd: MSTORE vbbb(0x40) vbba
0xbc4: MSTORE vbb7 vba7
0xbc5: vbc5(0x20) = CONST 
0xbc7: vbc7 = ADD vbc5(0x20) vbb7
0xbca: vbca = SLOAD vb93(0x1)
0xbcb: vbcb(0x1) = CONST 
0xbce: vbce(0x1) = CONST 
0xbd0: vbd0 = AND vbce(0x1) vbca
0xbd1: vbd1 = ISZERO vbd0
0xbd2: vbd2(0x100) = CONST 
0xbd5: vbd5 = MUL vbd2(0x100) vbd1
0xbd6: vbd6 = SUB vbd5 vbcb(0x1)
0xbd7: vbd7 = AND vbd6 vbca
0xbd8: vbd8(0x2) = CONST 
0xbdb: vbdb = DIV vbd7 vbd8(0x2)
0xbdd: vbdd = ISZERO vbdb
0xbde: vbde(0xc28) = CONST 
0xbe1: JUMPI vbde(0xc28) vbdd
----------------------------------

Begin block 0xbe2
prev = {'0xb92'}, next = {'0xbfd', '0xbea'}
----------------------------------
Block 0xbe2
0xbe3: vbe3(0x1f) = CONST 
0xbe5: vbe5 = LT vbe3(0x1f) vbdb
0xbe6: vbe6(0xbfd) = CONST 
0xbe9: JUMPI vbe6(0xbfd) vbe5
----------------------------------

Begin block 0xbea
prev = {'0xbe2'}, next = {'0xc28'}
----------------------------------
Block 0xbea
0xbea: vbea(0x100) = CONST 
0xbef: vbef = SLOAD vb93(0x1)
0xbf0: vbf0 = DIV vbef vbea(0x100)
0xbf1: vbf1 = MUL vbf0 vbea(0x100)
0xbf3: MSTORE vbc7 vbf1
0xbf5: vbf5(0x20) = CONST 
0xbf7: vbf7 = ADD vbf5(0x20) vbc7
0xbf9: vbf9(0xc28) = CONST 
0xbfc: JUMP vbf9(0xc28)
----------------------------------

Begin block 0xbfd
prev = {'0xbe2'}, next = {'0xc0b'}
----------------------------------
Block 0xbfd
0xbff: vbff = ADD vbc7 vbdb
0xc02: vc02(0x0) = CONST 
0xc04: MSTORE vc02(0x0) vb93(0x1)
0xc05: vc05(0x20) = CONST 
0xc07: vc07(0x0) = CONST 
0xc09: vc09 = SHA3 vc07(0x0) vc05(0x20)
----------------------------------

Begin block 0xc0b
prev = {'0xbfd', '0xc0b'}, next = {'0xc1f', '0xc0b'}
----------------------------------
Block 0xc0b
0xc0b_0x0: vc0b_0 = PHI vbc7 vc17
0xc0b_0x1: vc0b_1 = PHI vc09 vc13
0xc0d: vc0d = SLOAD vc0b_1
0xc0f: MSTORE vc0b_0 vc0d
0xc11: vc11(0x1) = CONST 
0xc13: vc13 = ADD vc11(0x1) vc0b_1
0xc15: vc15(0x20) = CONST 
0xc17: vc17 = ADD vc15(0x20) vc0b_0
0xc1a: vc1a = GT vbff vc17
0xc1b: vc1b(0xc0b) = CONST 
0xc1e: JUMPI vc1b(0xc0b) vc1a
----------------------------------

Begin block 0xc1f
prev = {'0xc0b'}, next = {'0xc28'}
----------------------------------
Block 0xc1f
0xc21: vc21 = SUB vc17 vbff
0xc22: vc22(0x1f) = CONST 
0xc24: vc24 = AND vc22(0x1f) vc21
0xc26: vc26 = ADD vbff vc24
----------------------------------

Begin block 0xc28
prev = {'0xc1f', '0xbea', '0xb92'}, next = {'0x377'}
----------------------------------
Block 0xc28
0xc2f: JUMP v370(0x377)
----------------------------------

Begin block 0xc30
prev = {'0x3fe'}, next = {'0xcce'}
----------------------------------
Block 0xc30
0xc31: vc31(0x82f79cd9000) = CONST 
0xc38: vc38(0x3) = CONST 
0xc3c: SSTORE vc38(0x3) vc31(0x82f79cd9000)
0xc3e: vc3e(0x3) = CONST 
0xc40: vc40 = SLOAD vc3e(0x3)
0xc41: vc41(0x4) = CONST 
0xc43: vc43(0x0) = CONST 
0xc45: vc45 = CALLER 
0xc46: vc46(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc5b: vc5b = AND vc46(0xffffffffffffffffffffffffffffffffffffffff) vc45
0xc5c: vc5c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc71: vc71 = AND vc5c(0xffffffffffffffffffffffffffffffffffffffff) vc5b
0xc73: MSTORE vc43(0x0) vc71
0xc74: vc74(0x20) = CONST 
0xc76: vc76(0x20) = ADD vc74(0x20) vc43(0x0)
0xc79: MSTORE vc76(0x20) vc41(0x4)
0xc7a: vc7a(0x20) = CONST 
0xc7c: vc7c(0x40) = ADD vc7a(0x20) vc76(0x20)
0xc7d: vc7d(0x0) = CONST 
0xc7f: vc7f = SHA3 vc7d(0x0) vc7c(0x40)
0xc82: SSTORE vc7f vc40
0xc84: vc84(0x40) = CONST 
0xc87: vc87 = MLOAD vc84(0x40)
0xc8a: vc8a = ADD vc87 vc84(0x40)
0xc8b: vc8b(0x40) = CONST 
0xc8d: MSTORE vc8b(0x40) vc8a
0xc8f: vc8f(0x9) = CONST 
0xc92: MSTORE vc87 vc8f(0x9)
0xc93: vc93(0x20) = CONST 
0xc95: vc95 = ADD vc93(0x20) vc87
0xc96: vc96(0x4f6b6578746f6b656e0000000000000000000000000000000000000000000000) = CONST 
0xcb8: MSTORE vc95 vc96(0x4f6b6578746f6b656e0000000000000000000000000000000000000000000000)
0xcba: vcba(0x0) = CONST 
0xcbe: vcbe = MLOAD vc87
0xcc0: vcc0(0x20) = CONST 
0xcc2: vcc2 = ADD vcc0(0x20) vc87
0xcc4: vcc4(0xcce) = CONST 
0xcca: vcca(0x11ec) = CONST 
0xccd: vccd_0 = CALLPRIVATE vcca(0x11ec) vcbe vcc2 vcba(0x0) vcc4(0xcce)
----------------------------------

Begin block 0xcce
prev = {'0xc30'}, next = {'0xd1a'}
----------------------------------
Block 0xcce
0xcd0: vcd0(0x40) = CONST 
0xcd3: vcd3 = MLOAD vcd0(0x40)
0xcd6: vcd6 = ADD vcd3 vcd0(0x40)
0xcd7: vcd7(0x40) = CONST 
0xcd9: MSTORE vcd7(0x40) vcd6
0xcdb: vcdb(0x3) = CONST 
0xcde: MSTORE vcd3 vcdb(0x3)
0xcdf: vcdf(0x20) = CONST 
0xce1: vce1 = ADD vcdf(0x20) vcd3
0xce2: vce2(0x4f4b420000000000000000000000000000000000000000000000000000000000) = CONST 
0xd04: MSTORE vce1 vce2(0x4f4b420000000000000000000000000000000000000000000000000000000000)
0xd06: vd06(0x1) = CONST 
0xd0a: vd0a = MLOAD vcd3
0xd0c: vd0c(0x20) = CONST 
0xd0e: vd0e = ADD vd0c(0x20) vcd3
0xd10: vd10(0xd1a) = CONST 
0xd16: vd16(0x11ec) = CONST 
0xd19: vd19_0 = CALLPRIVATE vd16(0x11ec) vd0a vd0e vd06(0x1) vd10(0xd1a)
----------------------------------

Begin block 0xd1a
prev = {'0xcce'}, next = {'0xd1c'}
----------------------------------
Block 0xd1a
----------------------------------

Begin block 0xd1c
prev = {'0xd1a'}, next = {'0x49a'}
----------------------------------
Block 0xd1c
0xd20: JUMP v3ff(0x49a)
----------------------------------

Begin block 0xd21
prev = {'0x4a7'}, next = {'0xd2c'}
----------------------------------
Block 0xd21
0xd22: vd22(0xd2c) = CONST 
0xd25: vd25 = CALLER 
0xd28: vd28(0xed5) = CONST 
0xd2b: CALLPRIVATE vd28(0xed5) v4ce v4c5 vd25 vd22(0xd2c)
----------------------------------

Begin block 0xd2c
prev = {'0xd21'}, next = {'0xd2d'}
----------------------------------
Block 0xd2c
----------------------------------

Begin block 0xd2d
prev = {'0xd2c'}, next = {'0x4dc'}
----------------------------------
Block 0xd2d
0xd30: JUMP v4a8(0x4dc)
----------------------------------

Begin block 0xd31
prev = {'0x4e9'}, next = {'0xd41'}
----------------------------------
Block 0xd31
0xd32: vd32(0x0) = CONST 
0xd38: vd38(0xd41) = CONST 
0xd3d: vd3d(0x685) = CONST 
0xd40: vd40_0 = CALLPRIVATE vd3d(0x685) v510 v507 vd38(0xd41)
----------------------------------

Begin block 0xd41
prev = {'0xd31'}, next = {'0xd47', '0xea7'}
----------------------------------
Block 0xd41
0xd42: vd42 = ISZERO vd40_0
0xd43: vd43(0xea7) = CONST 
0xd46: JUMPI vd43(0xea7) vd42
----------------------------------

Begin block 0xd47
prev = {'0xd41'}, next = {'0xe20'}
----------------------------------
Block 0xd47
0xd48: vd48(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd5d: vd5d = AND vd48(0xffffffffffffffffffffffffffffffffffffffff) v507
0xd5e: vd5e(0x8f4ffcb1) = CONST 
0xd63: vd63 = CALLER 
0xd65: vd65 = ADDRESS 
0xd67: vd67(0x40) = CONST 
0xd69: vd69 = MLOAD vd67(0x40)
0xd6b: vd6b(0xffffffff) = CONST 
0xd70: vd70(0x8f4ffcb1) = AND vd6b(0xffffffff) vd5e(0x8f4ffcb1)
0xd71: vd71(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xd8f: vd8f(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = MUL vd71(0x100000000000000000000000000000000000000000000000000000000) vd70(0x8f4ffcb1)
0xd91: MSTORE vd69 vd8f(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0xd92: vd92(0x4) = CONST 
0xd94: vd94 = ADD vd92(0x4) vd69
0xd97: vd97(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdac: vdac = AND vd97(0xffffffffffffffffffffffffffffffffffffffff) vd63
0xdad: vdad(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdc2: vdc2 = AND vdad(0xffffffffffffffffffffffffffffffffffffffff) vdac
0xdc4: MSTORE vd94 vdc2
0xdc5: vdc5(0x20) = CONST 
0xdc7: vdc7 = ADD vdc5(0x20) vd94
0xdca: MSTORE vdc7 v510
0xdcb: vdcb(0x20) = CONST 
0xdcd: vdcd = ADD vdcb(0x20) vdc7
0xdcf: vdcf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xde4: vde4 = AND vdcf(0xffffffffffffffffffffffffffffffffffffffff) vd65
0xde5: vde5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xdfa: vdfa = AND vde5(0xffffffffffffffffffffffffffffffffffffffff) vde4
0xdfc: MSTORE vdcd vdfa
0xdfd: vdfd(0x20) = CONST 
0xdff: vdff = ADD vdfd(0x20) vdcd
0xe01: ve01(0x20) = CONST 
0xe03: ve03 = ADD ve01(0x20) vdff
0xe06: ve06 = SUB ve03 vd94
0xe08: MSTORE vdff ve06
0xe0c: ve0c = MLOAD v538
0xe0e: MSTORE ve03 ve0c
0xe0f: ve0f(0x20) = CONST 
0xe11: ve11 = ADD ve0f(0x20) ve03
0xe15: ve15 = MLOAD v538
0xe17: ve17(0x20) = CONST 
0xe19: ve19 = ADD ve17(0x20) v538
0xe1e: ve1e(0x0) = CONST 
----------------------------------

Begin block 0xe20
prev = {'0xd47', '0xe31'}, next = {'0xe3c', '0xe29'}
----------------------------------
Block 0xe20
0xe20_0x0: ve20_0 = PHI ve1e(0x0) ve35
0xe23: ve23 = LT ve20_0 ve15
0xe24: ve24 = ISZERO ve23
0xe25: ve25(0xe3c) = CONST 
0xe28: JUMPI ve25(0xe3c) ve24
----------------------------------

Begin block 0xe29
prev = {'0xe20'}, next = {'0xe31'}
----------------------------------
Block 0xe29
0xe29_0x0: ve29_0 = PHI ve1e(0x0) ve35
0xe2b: ve2b = ADD ve19 ve29_0
0xe2c: ve2c = MLOAD ve2b
0xe2f: ve2f = ADD ve11 ve29_0
0xe30: MSTORE ve2f ve2c
----------------------------------

Begin block 0xe31
prev = {'0xe29'}, next = {'0xe20'}
----------------------------------
Block 0xe31
0xe31_0x0: ve31_0 = PHI ve1e(0x0) ve35
0xe32: ve32(0x20) = CONST 
0xe35: ve35 = ADD ve31_0 ve32(0x20)
0xe38: ve38(0xe20) = CONST 
0xe3b: JUMP ve38(0xe20)
----------------------------------

Begin block 0xe3c
prev = {'0xe20'}, next = {'0xe50', '0xe69'}
----------------------------------
Block 0xe3c
0xe45: ve45 = ADD ve15 ve11
0xe47: ve47(0x1f) = CONST 
0xe49: ve49 = AND ve47(0x1f) ve15
0xe4b: ve4b = ISZERO ve49
0xe4c: ve4c(0xe69) = CONST 
0xe4f: JUMPI ve4c(0xe69) ve4b
----------------------------------

Begin block 0xe50
prev = {'0xe3c'}, next = {'0xe69'}
----------------------------------
Block 0xe50
0xe52: ve52 = SUB ve45 ve49
0xe54: ve54 = MLOAD ve52
0xe55: ve55(0x1) = CONST 
0xe58: ve58(0x20) = CONST 
0xe5a: ve5a = SUB ve58(0x20) ve49
0xe5b: ve5b(0x100) = CONST 
0xe5e: ve5e = EXP ve5b(0x100) ve5a
0xe5f: ve5f = SUB ve5e ve55(0x1)
0xe60: ve60 = NOT ve5f
0xe61: ve61 = AND ve60 ve54
0xe63: MSTORE ve52 ve61
0xe64: ve64(0x20) = CONST 
0xe66: ve66 = ADD ve64(0x20) ve52
----------------------------------

Begin block 0xe69
prev = {'0xe50', '0xe3c'}, next = {'0xe86', '0xe8a'}
----------------------------------
Block 0xe69
0xe69_0x1: ve69_1 = PHI ve45 ve66
0xe72: ve72(0x0) = CONST 
0xe74: ve74(0x40) = CONST 
0xe76: ve76 = MLOAD ve74(0x40)
0xe79: ve79 = SUB ve69_1 ve76
0xe7b: ve7b(0x0) = CONST 
0xe7f: ve7f = EXTCODESIZE vd5d
0xe80: ve80 = ISZERO ve7f
0xe81: ve81 = ISZERO ve80
0xe82: ve82(0xe8a) = CONST 
0xe85: JUMPI ve82(0xe8a) ve81
----------------------------------

Begin block 0xe86
prev = {'0xe69'}, next = {}
----------------------------------
Block 0xe86
0xe86: ve86(0x0) = CONST 
0xe89: REVERT ve86(0x0) ve86(0x0)
----------------------------------

Begin block 0xe8a
prev = {'0xe69'}, next = {'0xe97', '0xe9b'}
----------------------------------
Block 0xe8a
0xe8b: ve8b(0x2c6) = CONST 
0xe8e: ve8e = GAS 
0xe8f: ve8f = SUB ve8e ve8b(0x2c6)
0xe90: ve90 = CALL ve8f vd5d ve7b(0x0) ve76 ve79 ve76 ve72(0x0)
0xe91: ve91 = ISZERO ve90
0xe92: ve92 = ISZERO ve91
0xe93: ve93(0xe9b) = CONST 
0xe96: JUMPI ve93(0xe9b) ve92
----------------------------------

Begin block 0xe97
prev = {'0xe8a'}, next = {}
----------------------------------
Block 0xe97
0xe97: ve97(0x0) = CONST 
0xe9a: REVERT ve97(0x0) ve97(0x0)
----------------------------------

Begin block 0xe9b
prev = {'0xe8a'}, next = {'0xea8'}
----------------------------------
Block 0xe9b
0xe9f: ve9f(0x1) = CONST 
0xea3: vea3(0xea8) = CONST 
0xea6: JUMP vea3(0xea8)
----------------------------------

Begin block 0xea7
prev = {'0xd41'}, next = {'0xea8'}
----------------------------------
Block 0xea7
----------------------------------

Begin block 0xea8
prev = {'0xea7', '0xe9b'}, next = {'0x561'}
----------------------------------
Block 0xea8
0xeaf: JUMP v4ea(0x561)
----------------------------------

Begin block 0xeb0
prev = {'0x586'}, next = {'0x5d1'}
----------------------------------
Block 0xeb0
0xeb1: veb1(0x5) = CONST 
0xeb3: veb3(0x20) = CONST 
0xeb5: MSTORE veb3(0x20) veb1(0x5)
0xeb7: veb7(0x0) = CONST 
0xeb9: MSTORE veb7(0x0) v5a4
0xeba: veba(0x40) = CONST 
0xebc: vebc(0x0) = CONST 
0xebe: vebe = SHA3 vebc(0x0) veba(0x40)
0xebf: vebf(0x20) = CONST 
0xec1: MSTORE vebf(0x20) vebe
0xec3: vec3(0x0) = CONST 
0xec5: MSTORE vec3(0x0) v5c3
0xec6: vec6(0x40) = CONST 
0xec8: vec8(0x0) = CONST 
0xeca: veca = SHA3 vec8(0x0) vec6(0x40)
0xecb: vecb(0x0) = CONST 
0xed2: ved2 = SLOAD veca
0xed4: JUMP v587(0x5d1)
----------------------------------

Begin block 0xed5
prev = {}, next = {'0xefc', '0xef8'}
----------------------------------
function 0xed5(ved5arg0, ved5arg1, ved5arg2, ved5arg3)
Block 0xed5
0xed6: ved6(0x0) = CONST 
0xeda: veda(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xeef: veef = AND veda(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0xef0: vef0 = EQ veef ved6(0x0)
0xef1: vef1 = ISZERO vef0
0xef2: vef2 = ISZERO vef1
0xef3: vef3 = ISZERO vef2
0xef4: vef4(0xefc) = CONST 
0xef7: JUMPI vef4(0xefc) vef3
----------------------------------

Begin block 0xef8
prev = {'0xed5'}, next = {}
----------------------------------
Block 0xef8
0xef8: vef8(0x0) = CONST 
0xefb: REVERT vef8(0x0) vef8(0x0)
----------------------------------

Begin block 0xefc
prev = {'0xed5'}, next = {'0xf46', '0xf4a'}
----------------------------------
Block 0xefc
0xefe: vefe(0x4) = CONST 
0xf00: vf00(0x0) = CONST 
0xf03: vf03(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf18: vf18 = AND vf03(0xffffffffffffffffffffffffffffffffffffffff) ved5arg2
0xf19: vf19(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf2e: vf2e = AND vf19(0xffffffffffffffffffffffffffffffffffffffff) vf18
0xf30: MSTORE vf00(0x0) vf2e
0xf31: vf31(0x20) = CONST 
0xf33: vf33(0x20) = ADD vf31(0x20) vf00(0x0)
0xf36: MSTORE vf33(0x20) vefe(0x4)
0xf37: vf37(0x20) = CONST 
0xf39: vf39(0x40) = ADD vf37(0x20) vf33(0x20)
0xf3a: vf3a(0x0) = CONST 
0xf3c: vf3c = SHA3 vf3a(0x0) vf39(0x40)
0xf3d: vf3d = SLOAD vf3c
0xf3e: vf3e = LT vf3d ved5arg0
0xf3f: vf3f = ISZERO vf3e
0xf40: vf40 = ISZERO vf3f
0xf41: vf41 = ISZERO vf40
0xf42: vf42(0xf4a) = CONST 
0xf45: JUMPI vf42(0xf4a) vf41
----------------------------------

Begin block 0xf46
prev = {'0xefc'}, next = {}
----------------------------------
Block 0xf46
0xf46: vf46(0x0) = CONST 
0xf49: REVERT vf46(0x0) vf46(0x0)
----------------------------------

Begin block 0xf4a
prev = {'0xefc'}, next = {'0xfd4', '0xfd8'}
----------------------------------
Block 0xf4a
0xf4b: vf4b(0x4) = CONST 
0xf4d: vf4d(0x0) = CONST 
0xf50: vf50(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf65: vf65 = AND vf50(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0xf66: vf66(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xf7b: vf7b = AND vf66(0xffffffffffffffffffffffffffffffffffffffff) vf65
0xf7d: MSTORE vf4d(0x0) vf7b
0xf7e: vf7e(0x20) = CONST 
0xf80: vf80(0x20) = ADD vf7e(0x20) vf4d(0x0)
0xf83: MSTORE vf80(0x20) vf4b(0x4)
0xf84: vf84(0x20) = CONST 
0xf86: vf86(0x40) = ADD vf84(0x20) vf80(0x20)
0xf87: vf87(0x0) = CONST 
0xf89: vf89 = SHA3 vf87(0x0) vf86(0x40)
0xf8a: vf8a = SLOAD vf89
0xf8c: vf8c(0x4) = CONST 
0xf8e: vf8e(0x0) = CONST 
0xf91: vf91(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfa6: vfa6 = AND vf91(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0xfa7: vfa7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xfbc: vfbc = AND vfa7(0xffffffffffffffffffffffffffffffffffffffff) vfa6
0xfbe: MSTORE vf8e(0x0) vfbc
0xfbf: vfbf(0x20) = CONST 
0xfc1: vfc1(0x20) = ADD vfbf(0x20) vf8e(0x0)
0xfc4: MSTORE vfc1(0x20) vf8c(0x4)
0xfc5: vfc5(0x20) = CONST 
0xfc7: vfc7(0x40) = ADD vfc5(0x20) vfc1(0x20)
0xfc8: vfc8(0x0) = CONST 
0xfca: vfca = SHA3 vfc8(0x0) vfc7(0x40)
0xfcb: vfcb = SLOAD vfca
0xfcc: vfcc = ADD vfcb ved5arg0
0xfcd: vfcd = GT vfcc vf8a
0xfce: vfce = ISZERO vfcd
0xfcf: vfcf = ISZERO vfce
0xfd0: vfd0(0xfd8) = CONST 
0xfd3: JUMPI vfd0(0xfd8) vfcf
----------------------------------

Begin block 0xfd4
prev = {'0xf4a'}, next = {}
----------------------------------
Block 0xfd4
0xfd4: vfd4(0x0) = CONST 
0xfd7: REVERT vfd4(0x0) vfd4(0x0)
----------------------------------

Begin block 0xfd8
prev = {'0xf4a'}, next = {'0x11e5', '0x11e4'}
----------------------------------
Block 0xfd8
0xfd9: vfd9(0x4) = CONST 
0xfdb: vfdb(0x0) = CONST 
0xfde: vfde(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xff3: vff3 = AND vfde(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0xff4: vff4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1009: v1009 = AND vff4(0xffffffffffffffffffffffffffffffffffffffff) vff3
0x100b: MSTORE vfdb(0x0) v1009
0x100c: v100c(0x20) = CONST 
0x100e: v100e(0x20) = ADD v100c(0x20) vfdb(0x0)
0x1011: MSTORE v100e(0x20) vfd9(0x4)
0x1012: v1012(0x20) = CONST 
0x1014: v1014(0x40) = ADD v1012(0x20) v100e(0x20)
0x1015: v1015(0x0) = CONST 
0x1017: v1017 = SHA3 v1015(0x0) v1014(0x40)
0x1018: v1018 = SLOAD v1017
0x1019: v1019(0x4) = CONST 
0x101b: v101b(0x0) = CONST 
0x101e: v101e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1033: v1033 = AND v101e(0xffffffffffffffffffffffffffffffffffffffff) ved5arg2
0x1034: v1034(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1049: v1049 = AND v1034(0xffffffffffffffffffffffffffffffffffffffff) v1033
0x104b: MSTORE v101b(0x0) v1049
0x104c: v104c(0x20) = CONST 
0x104e: v104e(0x20) = ADD v104c(0x20) v101b(0x0)
0x1051: MSTORE v104e(0x20) v1019(0x4)
0x1052: v1052(0x20) = CONST 
0x1054: v1054(0x40) = ADD v1052(0x20) v104e(0x20)
0x1055: v1055(0x0) = CONST 
0x1057: v1057 = SHA3 v1055(0x0) v1054(0x40)
0x1058: v1058 = SLOAD v1057
0x1059: v1059 = ADD v1058 v1018
0x105d: v105d(0x4) = CONST 
0x105f: v105f(0x0) = CONST 
0x1062: v1062(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1077: v1077 = AND v1062(0xffffffffffffffffffffffffffffffffffffffff) ved5arg2
0x1078: v1078(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x108d: v108d = AND v1078(0xffffffffffffffffffffffffffffffffffffffff) v1077
0x108f: MSTORE v105f(0x0) v108d
0x1090: v1090(0x20) = CONST 
0x1092: v1092(0x20) = ADD v1090(0x20) v105f(0x0)
0x1095: MSTORE v1092(0x20) v105d(0x4)
0x1096: v1096(0x20) = CONST 
0x1098: v1098(0x40) = ADD v1096(0x20) v1092(0x20)
0x1099: v1099(0x0) = CONST 
0x109b: v109b = SHA3 v1099(0x0) v1098(0x40)
0x109c: v109c(0x0) = CONST 
0x10a0: v10a0 = SLOAD v109b
0x10a1: v10a1 = SUB v10a0 ved5arg0
0x10a7: SSTORE v109b v10a1
0x10aa: v10aa(0x4) = CONST 
0x10ac: v10ac(0x0) = CONST 
0x10af: v10af(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10c4: v10c4 = AND v10af(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0x10c5: v10c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x10da: v10da = AND v10c5(0xffffffffffffffffffffffffffffffffffffffff) v10c4
0x10dc: MSTORE v10ac(0x0) v10da
0x10dd: v10dd(0x20) = CONST 
0x10df: v10df(0x20) = ADD v10dd(0x20) v10ac(0x0)
0x10e2: MSTORE v10df(0x20) v10aa(0x4)
0x10e3: v10e3(0x20) = CONST 
0x10e5: v10e5(0x40) = ADD v10e3(0x20) v10df(0x20)
0x10e6: v10e6(0x0) = CONST 
0x10e8: v10e8 = SHA3 v10e6(0x0) v10e5(0x40)
0x10e9: v10e9(0x0) = CONST 
0x10ed: v10ed = SLOAD v10e8
0x10ee: v10ee = ADD v10ed ved5arg0
0x10f4: SSTORE v10e8 v10ee
0x10f7: v10f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x110c: v110c = AND v10f7(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0x110e: v110e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1123: v1123 = AND v110e(0xffffffffffffffffffffffffffffffffffffffff) ved5arg2
0x1124: v1124(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x1146: v1146(0x40) = CONST 
0x1148: v1148 = MLOAD v1146(0x40)
0x114c: MSTORE v1148 ved5arg0
0x114d: v114d(0x20) = CONST 
0x114f: v114f = ADD v114d(0x20) v1148
0x1153: v1153(0x40) = CONST 
0x1155: v1155 = MLOAD v1153(0x40)
0x1158: v1158 = SUB v114f v1155
0x115a: LOG3 v1155 v1158 v1124(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v1123 v110c
0x115c: v115c(0x4) = CONST 
0x115e: v115e(0x0) = CONST 
0x1161: v1161(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1176: v1176 = AND v1161(0xffffffffffffffffffffffffffffffffffffffff) ved5arg1
0x1177: v1177(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x118c: v118c = AND v1177(0xffffffffffffffffffffffffffffffffffffffff) v1176
0x118e: MSTORE v115e(0x0) v118c
0x118f: v118f(0x20) = CONST 
0x1191: v1191(0x20) = ADD v118f(0x20) v115e(0x0)
0x1194: MSTORE v1191(0x20) v115c(0x4)
0x1195: v1195(0x20) = CONST 
0x1197: v1197(0x40) = ADD v1195(0x20) v1191(0x20)
0x1198: v1198(0x0) = CONST 
0x119a: v119a = SHA3 v1198(0x0) v1197(0x40)
0x119b: v119b = SLOAD v119a
0x119c: v119c(0x4) = CONST 
0x119e: v119e(0x0) = CONST 
0x11a1: v11a1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11b6: v11b6 = AND v11a1(0xffffffffffffffffffffffffffffffffffffffff) ved5arg2
0x11b7: v11b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11cc: v11cc = AND v11b7(0xffffffffffffffffffffffffffffffffffffffff) v11b6
0x11ce: MSTORE v119e(0x0) v11cc
0x11cf: v11cf(0x20) = CONST 
0x11d1: v11d1(0x20) = ADD v11cf(0x20) v119e(0x0)
0x11d4: MSTORE v11d1(0x20) v119c(0x4)
0x11d5: v11d5(0x20) = CONST 
0x11d7: v11d7(0x40) = ADD v11d5(0x20) v11d1(0x20)
0x11d8: v11d8(0x0) = CONST 
0x11da: v11da = SHA3 v11d8(0x0) v11d7(0x40)
0x11db: v11db = SLOAD v11da
0x11dc: v11dc = ADD v11db v119b
0x11dd: v11dd = EQ v11dc v1059
0x11de: v11de = ISZERO v11dd
0x11df: v11df = ISZERO v11de
0x11e0: v11e0(0x11e5) = CONST 
0x11e3: JUMPI v11e0(0x11e5) v11df
----------------------------------

Begin block 0x11e4
prev = {'0xfd8'}, next = {}
----------------------------------
Block 0x11e4
0x11e4: THROW 
----------------------------------

Begin block 0x11e5
prev = {'0xfd8'}, next = {'0x11e6'}
----------------------------------
Block 0x11e5
----------------------------------

Begin block 0x11e6
prev = {'0x11e5'}, next = {}
----------------------------------
Block 0x11e6
0x11eb: RETURNPRIVATE ved5arg3
----------------------------------

Begin block 0x11ec
prev = {}, next = {'0x121d', '0x122d'}
----------------------------------
function 0x11ec(v11ecarg0, v11ecarg1, v11ecarg2, v11ecarg3)
Block 0x11ec
0x11ef: v11ef = SLOAD v11ecarg2
0x11f0: v11f0(0x1) = CONST 
0x11f3: v11f3(0x1) = CONST 
0x11f5: v11f5 = AND v11f3(0x1) v11ef
0x11f6: v11f6 = ISZERO v11f5
0x11f7: v11f7(0x100) = CONST 
0x11fa: v11fa = MUL v11f7(0x100) v11f6
0x11fb: v11fb = SUB v11fa v11f0(0x1)
0x11fc: v11fc = AND v11fb v11ef
0x11fd: v11fd(0x2) = CONST 
0x1200: v1200 = DIV v11fc v11fd(0x2)
0x1202: v1202(0x0) = CONST 
0x1204: MSTORE v1202(0x0) v11ecarg2
0x1205: v1205(0x20) = CONST 
0x1207: v1207(0x0) = CONST 
0x1209: v1209 = SHA3 v1207(0x0) v1205(0x20)
0x120b: v120b(0x1f) = CONST 
0x120d: v120d = ADD v120b(0x1f) v1200
0x120e: v120e(0x20) = CONST 
0x1211: v1211 = DIV v120d v120e(0x20)
0x1213: v1213 = ADD v1209 v1211
0x1216: v1216(0x1f) = CONST 
0x1218: v1218 = LT v1216(0x1f) v11ecarg0
0x1219: v1219(0x122d) = CONST 
0x121c: JUMPI v1219(0x122d) v1218
----------------------------------

Begin block 0x121d
prev = {'0x11ec'}, next = {'0x125b'}
----------------------------------
Block 0x121d
0x121e: v121e = MLOAD v11ecarg1
0x121f: v121f(0xff) = CONST 
0x1221: v1221(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v121f(0xff)
0x1222: v1222 = AND v1221(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v121e
0x1225: v1225 = ADD v11ecarg0 v11ecarg0
0x1226: v1226 = OR v1225 v1222
0x1228: SSTORE v11ecarg2 v1226
0x1229: v1229(0x125b) = CONST 
0x122c: JUMP v1229(0x125b)
----------------------------------

Begin block 0x122d
prev = {'0x11ec'}, next = {'0x123c', '0x125b'}
----------------------------------
Block 0x122d
0x1230: v1230 = ADD v11ecarg0 v11ecarg0
0x1231: v1231(0x1) = CONST 
0x1233: v1233 = ADD v1231(0x1) v1230
0x1235: SSTORE v11ecarg2 v1233
0x1237: v1237 = ISZERO v11ecarg0
0x1238: v1238(0x125b) = CONST 
0x123b: JUMPI v1238(0x125b) v1237
----------------------------------

Begin block 0x123c
prev = {'0x122d'}, next = {'0x123f'}
----------------------------------
Block 0x123c
0x123e: v123e = ADD v11ecarg1 v11ecarg0
----------------------------------

Begin block 0x123f
prev = {'0x123c', '0x1248'}, next = {'0x125a', '0x1248'}
----------------------------------
Block 0x123f
0x123f_0x2: v123f_2 = PHI v124f v11ecarg1
0x1242: v1242 = GT v123e v123f_2
0x1243: v1243 = ISZERO v1242
0x1244: v1244(0x125a) = CONST 
0x1247: JUMPI v1244(0x125a) v1243
----------------------------------

Begin block 0x1248
prev = {'0x123f'}, next = {'0x123f'}
----------------------------------
Block 0x1248
0x1248_0x1: v1248_1 = PHI v1209 v1254
0x1248_0x2: v1248_2 = PHI v124f v11ecarg1
0x1249: v1249 = MLOAD v1248_2
0x124b: SSTORE v1248_1 v1249
0x124d: v124d(0x20) = CONST 
0x124f: v124f = ADD v124d(0x20) v1248_2
0x1252: v1252(0x1) = CONST 
0x1254: v1254 = ADD v1252(0x1) v1248_1
0x1256: v1256(0x123f) = CONST 
0x1259: JUMP v1256(0x123f)
----------------------------------

Begin block 0x125a
prev = {'0x123f'}, next = {'0x125b'}
----------------------------------
Block 0x125a
----------------------------------

Begin block 0x125b
prev = {'0x121d', '0x125a', '0x122d'}, next = {'0x126c'}
----------------------------------
Block 0x125b
0x125f: v125f(0x1268) = CONST 
0x1264: v1264(0x126c) = CONST 
0x1267: JUMP v1264(0x126c)
----------------------------------

Begin block 0x1268
prev = {'0x128e'}, next = {}
----------------------------------
Block 0x1268
0x126b: RETURNPRIVATE v11ecarg3 v11ecarg2
----------------------------------

Begin block 0x126c
prev = {'0x125b'}, next = {'0x1272'}
----------------------------------
Block 0x126c
0x126d: v126d(0x128e) = CONST 
----------------------------------

Begin block 0x1272
prev = {'0x126c', '0x127b'}, next = {'0x128a', '0x127b'}
----------------------------------
Block 0x1272
0x1272_0x0: v1272_0 = PHI v1209 v1254 v1285
0x1275: v1275 = GT v1213 v1272_0
0x1276: v1276 = ISZERO v1275
0x1277: v1277(0x128a) = CONST 
0x127a: JUMPI v1277(0x128a) v1276
----------------------------------

Begin block 0x127b
prev = {'0x1272'}, next = {'0x1272'}
----------------------------------
Block 0x127b
0x127b_0x0: v127b_0 = PHI v1209 v1254 v1285
0x127b: v127b(0x0) = CONST 
0x127e: v127e(0x0) = CONST 
0x1281: SSTORE v127b_0 v127e(0x0)
0x1283: v1283(0x1) = CONST 
0x1285: v1285 = ADD v1283(0x1) v127b_0
0x1286: v1286(0x1272) = CONST 
0x1289: JUMP v1286(0x1272)
----------------------------------

Begin block 0x128a
prev = {'0x1272'}, next = {'0x128e'}
----------------------------------
Block 0x128a
0x128d: JUMP v126d(0x128e)
----------------------------------

Begin block 0x128e
prev = {'0x128a'}, next = {'0x1268'}
----------------------------------
Block 0x128e
0x1290: JUMP v125f(0x1268)
----------------------------------

Begin block 0x12d7
prev = {'0xb'}, next = {}
----------------------------------
Block 0x12d7
0x12d8: v12d8(0xc8) = CONST 
0x12d9: CALLPRIVATE v12d8(0xc8)
----------------------------------

Begin block 0x12da
prev = {'0x3f'}, next = {}
----------------------------------
Block 0x12da
0x12db: v12db(0x157) = CONST 
0x12dc: CALLPRIVATE v12db(0x157)
----------------------------------

Begin block 0x12dd
prev = {'0x4a'}, next = {}
----------------------------------
Block 0x12dd
0x12de: v12de(0x1b1) = CONST 
0x12df: CALLPRIVATE v12de(0x1b1)
----------------------------------

Begin block 0x12e0
prev = {'0x55'}, next = {}
----------------------------------
Block 0x12e0
0x12e1: v12e1(0x1da) = CONST 
0x12e2: CALLPRIVATE v12e1(0x1da)
----------------------------------

Begin block 0x12e3
prev = {'0x60'}, next = {}
----------------------------------
Block 0x12e3
0x12e4: v12e4(0x253) = CONST 
0x12e5: CALLPRIVATE v12e4(0x253)
----------------------------------

Begin block 0x12e6
prev = {'0x6b'}, next = {}
----------------------------------
Block 0x12e6
0x12e7: v12e7(0x282) = CONST 
0x12e8: CALLPRIVATE v12e7(0x282)
----------------------------------

Begin block 0x12e9
prev = {'0x76'}, next = {}
----------------------------------
Block 0x12e9
0x12ea: v12ea(0x2bd) = CONST 
0x12eb: CALLPRIVATE v12ea(0x2bd)
----------------------------------

Begin block 0x12ec
prev = {'0x81'}, next = {}
----------------------------------
Block 0x12ec
0x12ed: v12ed(0x30a) = CONST 
0x12ee: CALLPRIVATE v12ed(0x30a)
----------------------------------

Begin block 0x12ef
prev = {'0x8c'}, next = {}
----------------------------------
Block 0x12ef
0x12f0: v12f0(0x364) = CONST 
0x12f1: CALLPRIVATE v12f0(0x364)
----------------------------------

Begin block 0x12f2
prev = {'0x97'}, next = {}
----------------------------------
Block 0x12f2
0x12f3: v12f3(0x3f3) = CONST 
0x12f4: CALLPRIVATE v12f3(0x3f3)
----------------------------------

Begin block 0x12f5
prev = {'0xa2'}, next = {}
----------------------------------
Block 0x12f5
0x12f6: v12f6(0x49c) = CONST 
0x12f7: CALLPRIVATE v12f6(0x49c)
----------------------------------

Begin block 0x12f8
prev = {'0xad'}, next = {}
----------------------------------
Block 0x12f8
0x12f9: v12f9(0x4de) = CONST 
0x12fa: CALLPRIVATE v12f9(0x4de)
----------------------------------

Begin block 0x12fb
prev = {'0xb8'}, next = {}
----------------------------------
Block 0x12fb
0x12fc: v12fc(0x57b) = CONST 
0x12fd: CALLPRIVATE v12fc(0x57b)
----------------------------------
