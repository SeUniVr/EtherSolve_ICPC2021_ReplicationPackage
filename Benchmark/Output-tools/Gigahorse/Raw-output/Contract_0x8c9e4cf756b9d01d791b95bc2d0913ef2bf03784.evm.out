
Begin block 0x0
prev = {}, next = {'0xd62', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xd40: vd40(0xd62) = CONST 
0xd41: JUMPI vd40(0xd62) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x1e', '0x8a'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0xe0) = CONST 
0x12: v12 = SHR v10(0xe0) vf
0x14: v14(0x5c658165) = CONST 
0x19: v19 = GT v14(0x5c658165) v12
0x1a: v1a(0x8a) = CONST 
0x1d: JUMPI v1a(0x8a) v19
----------------------------------

Begin block 0x1e
prev = {'0xd'}, next = {'0x59', '0x29'}
----------------------------------
Block 0x1e
0x1f: v1f(0xa9059cbb) = CONST 
0x24: v24 = GT v1f(0xa9059cbb) v12
0x25: v25(0x59) = CONST 
0x28: JUMPI v25(0x59) v24
----------------------------------

Begin block 0x29
prev = {'0x1e'}, next = {'0x34', '0xd89'}
----------------------------------
Block 0x29
0x2a: v2a(0xa9059cbb) = CONST 
0x2f: v2f = EQ v2a(0xa9059cbb) v12
0xd42: vd42(0xd89) = CONST 
0xd43: JUMPI vd42(0xd89) v2f
----------------------------------

Begin block 0x34
prev = {'0x29'}, next = {'0xd8c', '0x3f'}
----------------------------------
Block 0x34
0x35: v35(0xdd62ed3e) = CONST 
0x3a: v3a = EQ v35(0xdd62ed3e) v12
0xd44: vd44(0xd8c) = CONST 
0xd45: JUMPI vd44(0xd8c) v3a
----------------------------------

Begin block 0x3f
prev = {'0x34'}, next = {'0x4a', '0xd8f'}
----------------------------------
Block 0x3f
0x40: v40(0xf2fde38b) = CONST 
0x45: v45 = EQ v40(0xf2fde38b) v12
0xd46: vd46(0xd8f) = CONST 
0xd47: JUMPI vd46(0xd8f) v45
----------------------------------

Begin block 0x4a
prev = {'0x3f'}, next = {'0xd92', '0x55'}
----------------------------------
Block 0x4a
0x4b: v4b(0xfcd3533c) = CONST 
0x50: v50 = EQ v4b(0xfcd3533c) v12
0xd48: vd48(0xd92) = CONST 
0xd49: JUMPI vd48(0xd92) v50
----------------------------------

Begin block 0x55
prev = {'0x4a'}, next = {'0xf30x0'}
----------------------------------
Block 0x55
0x55: v55(0xf3) = CONST 
0x58: JUMP v55(0xf3)
----------------------------------

Begin block 0x59
prev = {'0x1e'}, next = {'0xd7d', '0x65'}
----------------------------------
Block 0x59
0x5b: v5b(0x5c658165) = CONST 
0x60: v60 = EQ v5b(0x5c658165) v12
0xd4a: vd4a(0xd7d) = CONST 
0xd4b: JUMPI vd4a(0xd7d) v60
----------------------------------

Begin block 0x65
prev = {'0x59'}, next = {'0x70', '0xd80'}
----------------------------------
Block 0x65
0x66: v66(0x70a08231) = CONST 
0x6b: v6b = EQ v66(0x70a08231) v12
0xd4c: vd4c(0xd80) = CONST 
0xd4d: JUMPI vd4c(0xd80) v6b
----------------------------------

Begin block 0x70
prev = {'0x65'}, next = {'0x7b', '0xd83'}
----------------------------------
Block 0x70
0x71: v71(0x8da5cb5b) = CONST 
0x76: v76 = EQ v71(0x8da5cb5b) v12
0xd4e: vd4e(0xd83) = CONST 
0xd4f: JUMPI vd4e(0xd83) v76
----------------------------------

Begin block 0x7b
prev = {'0x70'}, next = {'0xd86', '0x86'}
----------------------------------
Block 0x7b
0x7c: v7c(0x95d89b41) = CONST 
0x81: v81 = EQ v7c(0x95d89b41) v12
0xd50: vd50(0xd86) = CONST 
0xd51: JUMPI vd50(0xd86) v81
----------------------------------

Begin block 0x86
prev = {'0x7b'}, next = {'0xf30x0'}
----------------------------------
Block 0x86
0x86: v86(0xf3) = CONST 
0x89: JUMP v86(0xf3)
----------------------------------

Begin block 0x8a
prev = {'0xd'}, next = {'0xc6', '0x96'}
----------------------------------
Block 0x8a
0x8c: v8c(0x27e235e3) = CONST 
0x91: v91 = GT v8c(0x27e235e3) v12
0x92: v92(0xc6) = CONST 
0x95: JUMPI v92(0xc6) v91
----------------------------------

Begin block 0x96
prev = {'0x8a'}, next = {'0xa1', '0xd71'}
----------------------------------
Block 0x96
0x97: v97(0x27e235e3) = CONST 
0x9c: v9c = EQ v97(0x27e235e3) v12
0xd52: vd52(0xd71) = CONST 
0xd53: JUMPI vd52(0xd71) v9c
----------------------------------

Begin block 0xa1
prev = {'0x96'}, next = {'0xd74', '0xac'}
----------------------------------
Block 0xa1
0xa2: va2(0x313ce567) = CONST 
0xa7: va7 = EQ va2(0x313ce567) v12
0xd54: vd54(0xd74) = CONST 
0xd55: JUMPI vd54(0xd74) va7
----------------------------------

Begin block 0xac
prev = {'0xa1'}, next = {'0xb7', '0xd77'}
----------------------------------
Block 0xac
0xad: vad(0x3eaaf86b) = CONST 
0xb2: vb2 = EQ vad(0x3eaaf86b) v12
0xd56: vd56(0xd77) = CONST 
0xd57: JUMPI vd56(0xd77) vb2
----------------------------------

Begin block 0xb7
prev = {'0xac'}, next = {'0xd7a', '0xc2'}
----------------------------------
Block 0xb7
0xb8: vb8(0x48a1d0ec) = CONST 
0xbd: vbd = EQ vb8(0x48a1d0ec) v12
0xd58: vd58(0xd7a) = CONST 
0xd59: JUMPI vd58(0xd7a) vbd
----------------------------------

Begin block 0xc2
prev = {'0xb7'}, next = {'0xf30x0'}
----------------------------------
Block 0xc2
0xc2: vc2(0xf3) = CONST 
0xc5: JUMP vc2(0xf3)
----------------------------------

Begin block 0xc6
prev = {'0x8a'}, next = {'0xd65', '0xd2'}
----------------------------------
Block 0xc6
0xc8: vc8(0x6fdde03) = CONST 
0xcd: vcd = EQ vc8(0x6fdde03) v12
0xd5a: vd5a(0xd65) = CONST 
0xd5b: JUMPI vd5a(0xd65) vcd
----------------------------------

Begin block 0xd2
prev = {'0xc6'}, next = {'0xdd', '0xd68'}
----------------------------------
Block 0xd2
0xd3: vd3(0x95ea7b3) = CONST 
0xd8: vd8 = EQ vd3(0x95ea7b3) v12
0xd5c: vd5c(0xd68) = CONST 
0xd5d: JUMPI vd5c(0xd68) vd8
----------------------------------

Begin block 0xdd
prev = {'0xd2'}, next = {'0xe8', '0xd6b'}
----------------------------------
Block 0xdd
0xde: vde(0x18160ddd) = CONST 
0xe3: ve3 = EQ vde(0x18160ddd) v12
0xd5e: vd5e(0xd6b) = CONST 
0xd5f: JUMPI vd5e(0xd6b) ve3
----------------------------------

Begin block 0xe8
prev = {'0xdd'}, next = {'0xd62', '0xd6e'}
----------------------------------
Block 0xe8
0xe9: ve9(0x23b872dd) = CONST 
0xee: vee = EQ ve9(0x23b872dd) v12
0xd60: vd60(0xd6e) = CONST 
0xd61: JUMPI vd60(0xd6e) vee
----------------------------------

Begin block 0xf3
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xf3
0xf4: vf4(0x0) = CONST 
0xf7: REVERT vf4(0x0) vf4(0x0)
----------------------------------

Begin block 0xf30x0
prev = {'0xc2', '0xd62', '0x86', '0x55'}, next = {}
----------------------------------
Block 0xf30x0
0xf40x0: v0f4(0x0) = CONST 
0xf70x0: REVERT v0f4(0x0) v0f4(0x0)
----------------------------------

Begin block 0xf8
prev = {}, next = {'0x100', '0x104'}
----------------------------------
function name()()
Block 0xf8
0xf9: vf9 = CALLVALUE 
0xfb: vfb = ISZERO vf9
0xfc: vfc(0x104) = CONST 
0xff: JUMPI vfc(0x104) vfb
----------------------------------

Begin block 0x100
prev = {'0xf8'}, next = {}
----------------------------------
Block 0x100
0x100: v100(0x0) = CONST 
0x103: REVERT v100(0x0) v100(0x0)
----------------------------------

Begin block 0x104
prev = {'0xf8'}, next = {'0x10d0xf8'}
----------------------------------
Block 0x104
0x106: v106(0x10d) = CONST 
0x109: v109(0x46c) = CONST 
0x10c: v10c_0, v10c_1 = CALLPRIVATE v109(0x46c) v106(0x10d)
----------------------------------

Begin block 0x10d0xf8
prev = {'0x104'}, next = {'0x12f0xf8'}
----------------------------------
Block 0x10d0xf8
0x10e0xf8: vf810e(0x40) = CONST 
0x1110xf8: vf8111 = MLOAD vf810e(0x40)
0x1120xf8: vf8112(0x20) = CONST 
0x1160xf8: MSTORE vf8111 vf8112(0x20)
0x1180xf8: vf8118 = MLOAD v10c_0
0x11b0xf8: vf811b = ADD vf8111 vf8112(0x20)
0x11c0xf8: MSTORE vf811b vf8118
0x11e0xf8: vf811e = MLOAD v10c_0
0x1250xf8: vf8125 = ADD vf8111 vf810e(0x40)
0x1280xf8: vf8128 = ADD v10c_0 vf8112(0x20)
0x12d0xf8: vf812d(0x0) = CONST 
----------------------------------

Begin block 0x10d0x375
prev = {'0x381'}, next = {'0x12f0x375'}
----------------------------------
Block 0x10d0x375
0x10e0x375: v37510e(0x40) = CONST 
0x1110x375: v375111 = MLOAD v37510e(0x40)
0x1120x375: v375112(0x20) = CONST 
0x1160x375: MSTORE v375111 v375112(0x20)
0x1180x375: v375118 = MLOAD v389_0
0x11b0x375: v37511b = ADD v375111 v375112(0x20)
0x11c0x375: MSTORE v37511b v375118
0x11e0x375: v37511e = MLOAD v389_0
0x1250x375: v375125 = ADD v375111 v37510e(0x40)
0x1280x375: v375128 = ADD v389_0 v375112(0x20)
0x12d0x375: v37512d(0x0) = CONST 
----------------------------------

Begin block 0x12f0xf8
prev = {'0x1380xf8', '0x10d0xf8'}, next = {'0x1470xf8', '0x1380xf8'}
----------------------------------
Block 0x12f0xf8
0x12f0xf8_0x0: v12ff8_0 = PHI vf812d(0x0) vf8142
0x1320xf8: vf8132 = LT v12ff8_0 vf811e
0x1330xf8: vf8133 = ISZERO vf8132
0x1340xf8: vf8134(0x147) = CONST 
0x1370xf8: JUMPI vf8134(0x147) vf8133
----------------------------------

Begin block 0x12f0x375
prev = {'0x1380x375', '0x10d0x375'}, next = {'0x1470x375', '0x1380x375'}
----------------------------------
Block 0x12f0x375
0x12f0x375_0x0: v12f375_0 = PHI v37512d(0x0) v375142
0x1320x375: v375132 = LT v12f375_0 v37511e
0x1330x375: v375133 = ISZERO v375132
0x1340x375: v375134(0x147) = CONST 
0x1370x375: JUMPI v375134(0x147) v375133
----------------------------------

Begin block 0x1380xf8
prev = {'0x12f0xf8'}, next = {'0x12f0xf8'}
----------------------------------
Block 0x1380xf8
0x1380xf8_0x0: v138f8_0 = PHI vf812d(0x0) vf8142
0x13a0xf8: vf813a = ADD v138f8_0 vf8128
0x13b0xf8: vf813b = MLOAD vf813a
0x13e0xf8: vf813e = ADD v138f8_0 vf8125
0x13f0xf8: MSTORE vf813e vf813b
0x1400xf8: vf8140(0x20) = CONST 
0x1420xf8: vf8142 = ADD vf8140(0x20) v138f8_0
0x1430xf8: vf8143(0x12f) = CONST 
0x1460xf8: JUMP vf8143(0x12f)
----------------------------------

Begin block 0x1380x375
prev = {'0x12f0x375'}, next = {'0x12f0x375'}
----------------------------------
Block 0x1380x375
0x1380x375_0x0: v138375_0 = PHI v37512d(0x0) v375142
0x13a0x375: v37513a = ADD v138375_0 v375128
0x13b0x375: v37513b = MLOAD v37513a
0x13e0x375: v37513e = ADD v138375_0 v375125
0x13f0x375: MSTORE v37513e v37513b
0x1400x375: v375140(0x20) = CONST 
0x1420x375: v375142 = ADD v375140(0x20) v138375_0
0x1430x375: v375143(0x12f) = CONST 
0x1460x375: JUMP v375143(0x12f)
----------------------------------

Begin block 0x1470xf8
prev = {'0x12f0xf8'}, next = {'0x1740xf8', '0x15b0xf8'}
----------------------------------
Block 0x1470xf8
0x1500xf8: vf8150 = ADD vf811e vf8125
0x1520xf8: vf8152(0x1f) = CONST 
0x1540xf8: vf8154 = AND vf8152(0x1f) vf811e
0x1560xf8: vf8156 = ISZERO vf8154
0x1570xf8: vf8157(0x174) = CONST 
0x15a0xf8: JUMPI vf8157(0x174) vf8156
----------------------------------

Begin block 0x1470x375
prev = {'0x12f0x375'}, next = {'0x1740x375', '0x15b0x375'}
----------------------------------
Block 0x1470x375
0x1500x375: v375150 = ADD v37511e v375125
0x1520x375: v375152(0x1f) = CONST 
0x1540x375: v375154 = AND v375152(0x1f) v37511e
0x1560x375: v375156 = ISZERO v375154
0x1570x375: v375157(0x174) = CONST 
0x15a0x375: JUMPI v375157(0x174) v375156
----------------------------------

Begin block 0x15b0xf8
prev = {'0x1470xf8'}, next = {'0x1740xf8'}
----------------------------------
Block 0x15b0xf8
0x15d0xf8: vf815d = SUB vf8150 vf8154
0x15f0xf8: vf815f = MLOAD vf815d
0x1600xf8: vf8160(0x1) = CONST 
0x1630xf8: vf8163(0x20) = CONST 
0x1650xf8: vf8165 = SUB vf8163(0x20) vf8154
0x1660xf8: vf8166(0x100) = CONST 
0x1690xf8: vf8169 = EXP vf8166(0x100) vf8165
0x16a0xf8: vf816a = SUB vf8169 vf8160(0x1)
0x16b0xf8: vf816b = NOT vf816a
0x16c0xf8: vf816c = AND vf816b vf815f
0x16e0xf8: MSTORE vf815d vf816c
0x16f0xf8: vf816f(0x20) = CONST 
0x1710xf8: vf8171 = ADD vf816f(0x20) vf815d
----------------------------------

Begin block 0x15b0x375
prev = {'0x1470x375'}, next = {'0x1740x375'}
----------------------------------
Block 0x15b0x375
0x15d0x375: v37515d = SUB v375150 v375154
0x15f0x375: v37515f = MLOAD v37515d
0x1600x375: v375160(0x1) = CONST 
0x1630x375: v375163(0x20) = CONST 
0x1650x375: v375165 = SUB v375163(0x20) v375154
0x1660x375: v375166(0x100) = CONST 
0x1690x375: v375169 = EXP v375166(0x100) v375165
0x16a0x375: v37516a = SUB v375169 v375160(0x1)
0x16b0x375: v37516b = NOT v37516a
0x16c0x375: v37516c = AND v37516b v37515f
0x16e0x375: MSTORE v37515d v37516c
0x16f0x375: v37516f(0x20) = CONST 
0x1710x375: v375171 = ADD v37516f(0x20) v37515d
----------------------------------

Begin block 0x1740xf8
prev = {'0x1470xf8', '0x15b0xf8'}, next = {}
----------------------------------
Block 0x1740xf8
0x1740xf8_0x1: v174f8_1 = PHI vf8150 vf8171
0x17a0xf8: vf817a(0x40) = CONST 
0x17c0xf8: vf817c = MLOAD vf817a(0x40)
0x17f0xf8: vf817f = SUB v174f8_1 vf817c
0x1810xf8: RETURN vf817c vf817f
----------------------------------

Begin block 0x1740x375
prev = {'0x1470x375', '0x15b0x375'}, next = {}
----------------------------------
Block 0x1740x375
0x1740x375_0x1: v174375_1 = PHI v375150 v375171
0x17a0x375: v37517a(0x40) = CONST 
0x17c0x375: v37517c = MLOAD v37517a(0x40)
0x17f0x375: v37517f = SUB v174375_1 v37517c
0x1810x375: RETURN v37517c v37517f
----------------------------------

Begin block 0x182
prev = {}, next = {'0x18e', '0x18a'}
----------------------------------
function approve(address,uint256)()
Block 0x182
0x183: v183 = CALLVALUE 
0x185: v185 = ISZERO v183
0x186: v186(0x18e) = CONST 
0x189: JUMPI v186(0x18e) v185
----------------------------------

Begin block 0x18a
prev = {'0x182'}, next = {}
----------------------------------
Block 0x18a
0x18a: v18a(0x0) = CONST 
0x18d: REVERT v18a(0x0) v18a(0x0)
----------------------------------

Begin block 0x18e
prev = {'0x182'}, next = {'0x1a5', '0x1a1'}
----------------------------------
Block 0x18e
0x190: v190(0x1bb) = CONST 
0x193: v193(0x4) = CONST 
0x196: v196 = CALLDATASIZE 
0x197: v197 = SUB v196 v193(0x4)
0x198: v198(0x40) = CONST 
0x19b: v19b = LT v197 v198(0x40)
0x19c: v19c = ISZERO v19b
0x19d: v19d(0x1a5) = CONST 
0x1a0: JUMPI v19d(0x1a5) v19c
----------------------------------

Begin block 0x1a1
prev = {'0x18e'}, next = {}
----------------------------------
Block 0x1a1
0x1a1: v1a1(0x0) = CONST 
0x1a4: REVERT v1a1(0x0) v1a1(0x0)
----------------------------------

Begin block 0x1a5
prev = {'0x18e'}, next = {'0x4f7'}
----------------------------------
Block 0x1a5
0x1a7: v1a7(0x1) = CONST 
0x1a9: v1a9(0x1) = CONST 
0x1ab: v1ab(0xa0) = CONST 
0x1ad: v1ad(0x10000000000000000000000000000000000000000) = SHL v1ab(0xa0) v1a9(0x1)
0x1ae: v1ae(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1ad(0x10000000000000000000000000000000000000000) v1a7(0x1)
0x1b0: v1b0 = CALLDATALOAD v193(0x4)
0x1b1: v1b1 = AND v1b0 v1ae(0xffffffffffffffffffffffffffffffffffffffff)
0x1b3: v1b3(0x20) = CONST 
0x1b5: v1b5 = ADD v1b3(0x20) v193(0x4)
0x1b6: v1b6 = CALLDATALOAD v1b5
0x1b7: v1b7(0x4f7) = CONST 
0x1ba: JUMP v1b7(0x4f7)
----------------------------------

Begin block 0x1bb0x182
prev = {'0x5c10x182'}, next = {}
----------------------------------
Block 0x1bb0x182
0x1bc0x182: v1821bc(0x40) = CONST 
0x1bf0x182: v1821bf = MLOAD v1821bc(0x40)
0x1c10x182: v1821c1 = ISZERO v5bf(0x1)
0x1c20x182: v1821c2 = ISZERO v1821c1
0x1c40x182: MSTORE v1821bf v1821c2
0x1c50x182: v1821c5 = MLOAD v1821bc(0x40)
0x1c90x182: v1821c9 = SUB v1821bf v1821c5
0x1ca0x182: v1821ca(0x20) = CONST 
0x1cc0x182: v1821cc = ADD v1821ca(0x20) v1821c9
0x1ce0x182: RETURN v1821c5 v1821cc
----------------------------------

Begin block 0x1bb0x1f6
prev = {'0x79f'}, next = {}
----------------------------------
Block 0x1bb0x1f6
0x1bc0x1f6: v1f61bc(0x40) = CONST 
0x1bf0x1f6: v1f61bf = MLOAD v1f61bc(0x40)
0x1c10x1f6: v1f61c1 = ISZERO v802(0x1)
0x1c20x1f6: v1f61c2 = ISZERO v1f61c1
0x1c40x1f6: MSTORE v1f61bf v1f61c2
0x1c50x1f6: v1f61c5 = MLOAD v1f61bc(0x40)
0x1c90x1f6: v1f61c9 = SUB v1f61bf v1f61c5
0x1ca0x1f6: v1f61ca(0x20) = CONST 
0x1cc0x1f6: v1f61cc = ADD v1f61ca(0x20) v1f61c9
0x1ce0x1f6: RETURN v1f61c5 v1f61cc
----------------------------------

Begin block 0x1bb0x38a
prev = {'0xa4f'}, next = {}
----------------------------------
Block 0x1bb0x38a
0x1bc0x38a: v38a1bc(0x40) = CONST 
0x1bf0x38a: v38a1bf = MLOAD v38a1bc(0x40)
0x1c10x38a: v38a1c1 = ISZERO vaa6(0x1)
0x1c20x38a: v38a1c2 = ISZERO v38a1c1
0x1c40x38a: MSTORE v38a1bf v38a1c2
0x1c50x38a: v38a1c5 = MLOAD v38a1bc(0x40)
0x1c90x38a: v38a1c9 = SUB v38a1bf v38a1c5
0x1ca0x38a: v38a1ca(0x20) = CONST 
0x1cc0x38a: v38a1cc = ADD v38a1ca(0x20) v38a1c9
0x1ce0x38a: RETURN v38a1c5 v38a1cc
----------------------------------

Begin block 0x1cf
prev = {}, next = {'0x1d7', '0x1db'}
----------------------------------
function totalSupply()()
Block 0x1cf
0x1d0: v1d0 = CALLVALUE 
0x1d2: v1d2 = ISZERO v1d0
0x1d3: v1d3(0x1db) = CONST 
0x1d6: JUMPI v1d3(0x1db) v1d2
----------------------------------

Begin block 0x1d7
prev = {'0x1cf'}, next = {}
----------------------------------
Block 0x1d7
0x1d7: v1d7(0x0) = CONST 
0x1da: REVERT v1d7(0x0) v1d7(0x0)
----------------------------------

Begin block 0x1db
prev = {'0x1cf'}, next = {'0x5c7'}
----------------------------------
Block 0x1db
0x1dd: v1dd(0x1e4) = CONST 
0x1e0: v1e0(0x5c7) = CONST 
0x1e3: JUMP v1e0(0x5c7)
----------------------------------

Begin block 0x1e40x1cf
prev = {'0x5c7'}, next = {}
----------------------------------
Block 0x1e40x1cf
0x1e50x1cf: v1cf1e5(0x40) = CONST 
0x1e80x1cf: v1cf1e8 = MLOAD v1cf1e5(0x40)
0x1eb0x1cf: MSTORE v1cf1e8 v5ca
0x1ec0x1cf: v1cf1ec = MLOAD v1cf1e5(0x40)
0x1f00x1cf: v1cf1f0 = SUB v1cf1e8 v1cf1ec
0x1f10x1cf: v1cf1f1(0x20) = CONST 
0x1f30x1cf: v1cf1f3 = ADD v1cf1f1(0x20) v1cf1f0
0x1f50x1cf: RETURN v1cf1ec v1cf1f3
----------------------------------

Begin block 0x1e40x239
prev = {'0x80c'}, next = {}
----------------------------------
Block 0x1e40x239
0x1e50x239: v2391e5(0x40) = CONST 
0x1e80x239: v2391e8 = MLOAD v2391e5(0x40)
0x1eb0x239: MSTORE v2391e8 v81b
0x1ec0x239: v2391ec = MLOAD v2391e5(0x40)
0x1f00x239: v2391f0 = SUB v2391e8 v2391ec
0x1f10x239: v2391f1(0x20) = CONST 
0x1f30x239: v2391f3 = ADD v2391f1(0x20) v2391f0
0x1f50x239: RETURN v2391ec v2391f3
----------------------------------

Begin block 0x1e40x297
prev = {'0x827'}, next = {}
----------------------------------
Block 0x1e40x297
0x1e50x297: v2971e5(0x40) = CONST 
0x1e80x297: v2971e8 = MLOAD v2971e5(0x40)
0x1eb0x297: MSTORE v2971e8 v82a
0x1ec0x297: v2971ec = MLOAD v2971e5(0x40)
0x1f00x297: v2971f0 = SUB v2971e8 v2971ec
0x1f10x297: v2971f1(0x20) = CONST 
0x1f30x297: v2971f3 = ADD v2971f1(0x20) v2971f0
0x1f50x297: RETURN v2971ec v2971f3
----------------------------------

Begin block 0x1e40x2ac
prev = {'0x8760x2ac'}, next = {}
----------------------------------
Block 0x1e40x2ac
0x1e50x2ac: v2ac1e5(0x40) = CONST 
0x1e80x2ac: v2ac1e8 = MLOAD v2ac1e5(0x40)
0x1eb0x2ac: MSTORE v2ac1e8 v2ac875_0
0x1ec0x2ac: v2ac1ec = MLOAD v2ac1e5(0x40)
0x1f00x2ac: v2ac1f0 = SUB v2ac1e8 v2ac1ec
0x1f10x2ac: v2ac1f1(0x20) = CONST 
0x1f30x2ac: v2ac1f3 = ADD v2ac1f1(0x20) v2ac1f0
0x1f50x2ac: RETURN v2ac1ec v2ac1f3
----------------------------------

Begin block 0x1e40x2d6
prev = {'0x87e'}, next = {}
----------------------------------
Block 0x1e40x2d6
0x1e50x2d6: v2d61e5(0x40) = CONST 
0x1e80x2d6: v2d61e8 = MLOAD v2d61e5(0x40)
0x1eb0x2d6: MSTORE v2d61e8 v898
0x1ec0x2d6: v2d61ec = MLOAD v2d61e5(0x40)
0x1f00x2d6: v2d61f0 = SUB v2d61e8 v2d61ec
0x1f10x2d6: v2d61f1(0x20) = CONST 
0x1f30x2d6: v2d61f3 = ADD v2d61f1(0x20) v2d61f0
0x1f50x2d6: RETURN v2d61ec v2d61f3
----------------------------------

Begin block 0x1e40x311
prev = {'0x89b'}, next = {}
----------------------------------
Block 0x1e40x311
0x1e50x311: v3111e5(0x40) = CONST 
0x1e80x311: v3111e8 = MLOAD v3111e5(0x40)
0x1eb0x311: MSTORE v3111e8 v8b3
0x1ec0x311: v3111ec = MLOAD v3111e5(0x40)
0x1f00x311: v3111f0 = SUB v3111e8 v3111ec
0x1f10x311: v3111f1(0x20) = CONST 
0x1f30x311: v3111f3 = ADD v3111f1(0x20) v3111f0
0x1f50x311: RETURN v3111ec v3111f3
----------------------------------

Begin block 0x1e40x3c3
prev = {'0xaaf'}, next = {}
----------------------------------
Block 0x1e40x3c3
0x1e50x3c3: v3c31e5(0x40) = CONST 
0x1e80x3c3: v3c31e8 = MLOAD v3c31e5(0x40)
0x1eb0x3c3: MSTORE v3c31e8 vad7
0x1ec0x3c3: v3c31ec = MLOAD v3c31e5(0x40)
0x1f00x3c3: v3c31f0 = SUB v3c31e8 v3c31ec
0x1f10x3c3: v3c31f1(0x20) = CONST 
0x1f30x3c3: v3c31f3 = ADD v3c31f1(0x20) v3c31f0
0x1f50x3c3: RETURN v3c31ec v3c31f3
----------------------------------

Begin block 0x1f6
prev = {}, next = {'0x1fe', '0x202'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x1f6
0x1f7: v1f7 = CALLVALUE 
0x1f9: v1f9 = ISZERO v1f7
0x1fa: v1fa(0x202) = CONST 
0x1fd: JUMPI v1fa(0x202) v1f9
----------------------------------

Begin block 0x1fe
prev = {'0x1f6'}, next = {}
----------------------------------
Block 0x1fe
0x1fe: v1fe(0x0) = CONST 
0x201: REVERT v1fe(0x0) v1fe(0x0)
----------------------------------

Begin block 0x202
prev = {'0x1f6'}, next = {'0x219', '0x215'}
----------------------------------
Block 0x202
0x204: v204(0x1bb) = CONST 
0x207: v207(0x4) = CONST 
0x20a: v20a = CALLDATASIZE 
0x20b: v20b = SUB v20a v207(0x4)
0x20c: v20c(0x60) = CONST 
0x20f: v20f = LT v20b v20c(0x60)
0x210: v210 = ISZERO v20f
0x211: v211(0x219) = CONST 
0x214: JUMPI v211(0x219) v210
----------------------------------

Begin block 0x215
prev = {'0x202'}, next = {}
----------------------------------
Block 0x215
0x215: v215(0x0) = CONST 
0x218: REVERT v215(0x0) v215(0x0)
----------------------------------

Begin block 0x219
prev = {'0x202'}, next = {'0x5cd'}
----------------------------------
Block 0x219
0x21b: v21b(0x1) = CONST 
0x21d: v21d(0x1) = CONST 
0x21f: v21f(0xa0) = CONST 
0x221: v221(0x10000000000000000000000000000000000000000) = SHL v21f(0xa0) v21d(0x1)
0x222: v222(0xffffffffffffffffffffffffffffffffffffffff) = SUB v221(0x10000000000000000000000000000000000000000) v21b(0x1)
0x224: v224 = CALLDATALOAD v207(0x4)
0x226: v226 = AND v222(0xffffffffffffffffffffffffffffffffffffffff) v224
0x228: v228(0x20) = CONST 
0x22b: v22b = ADD v207(0x4) v228(0x20)
0x22c: v22c = CALLDATALOAD v22b
0x22f: v22f = AND v222(0xffffffffffffffffffffffffffffffffffffffff) v22c
0x231: v231(0x40) = CONST 
0x233: v233 = ADD v231(0x40) v207(0x4)
0x234: v234 = CALLDATALOAD v233
0x235: v235(0x5cd) = CONST 
0x238: JUMP v235(0x5cd)
----------------------------------

Begin block 0x239
prev = {}, next = {'0x241', '0x245'}
----------------------------------
function balances(address)()
Block 0x239
0x23a: v23a = CALLVALUE 
0x23c: v23c = ISZERO v23a
0x23d: v23d(0x245) = CONST 
0x240: JUMPI v23d(0x245) v23c
----------------------------------

Begin block 0x241
prev = {'0x239'}, next = {}
----------------------------------
Block 0x241
0x241: v241(0x0) = CONST 
0x244: REVERT v241(0x0) v241(0x0)
----------------------------------

Begin block 0x245
prev = {'0x239'}, next = {'0x258', '0x25c'}
----------------------------------
Block 0x245
0x247: v247(0x1e4) = CONST 
0x24a: v24a(0x4) = CONST 
0x24d: v24d = CALLDATASIZE 
0x24e: v24e = SUB v24d v24a(0x4)
0x24f: v24f(0x20) = CONST 
0x252: v252 = LT v24e v24f(0x20)
0x253: v253 = ISZERO v252
0x254: v254(0x25c) = CONST 
0x257: JUMPI v254(0x25c) v253
----------------------------------

Begin block 0x258
prev = {'0x245'}, next = {}
----------------------------------
Block 0x258
0x258: v258(0x0) = CONST 
0x25b: REVERT v258(0x0) v258(0x0)
----------------------------------

Begin block 0x25c
prev = {'0x245'}, next = {'0x80c'}
----------------------------------
Block 0x25c
0x25e: v25e = CALLDATALOAD v24a(0x4)
0x25f: v25f(0x1) = CONST 
0x261: v261(0x1) = CONST 
0x263: v263(0xa0) = CONST 
0x265: v265(0x10000000000000000000000000000000000000000) = SHL v263(0xa0) v261(0x1)
0x266: v266(0xffffffffffffffffffffffffffffffffffffffff) = SUB v265(0x10000000000000000000000000000000000000000) v25f(0x1)
0x267: v267 = AND v266(0xffffffffffffffffffffffffffffffffffffffff) v25e
0x268: v268(0x80c) = CONST 
0x26b: JUMP v268(0x80c)
----------------------------------

Begin block 0x26c
prev = {}, next = {'0x278', '0x274'}
----------------------------------
function decimals()()
Block 0x26c
0x26d: v26d = CALLVALUE 
0x26f: v26f = ISZERO v26d
0x270: v270(0x278) = CONST 
0x273: JUMPI v270(0x278) v26f
----------------------------------

Begin block 0x274
prev = {'0x26c'}, next = {}
----------------------------------
Block 0x274
0x274: v274(0x0) = CONST 
0x277: REVERT v274(0x0) v274(0x0)
----------------------------------

Begin block 0x278
prev = {'0x26c'}, next = {'0x81e'}
----------------------------------
Block 0x278
0x27a: v27a(0x281) = CONST 
0x27d: v27d(0x81e) = CONST 
0x280: JUMP v27d(0x81e)
----------------------------------

Begin block 0x281
prev = {'0x81e'}, next = {}
----------------------------------
Block 0x281
0x282: v282(0x40) = CONST 
0x285: v285 = MLOAD v282(0x40)
0x286: v286(0xff) = CONST 
0x28a: v28a = AND v824 v286(0xff)
0x28c: MSTORE v285 v28a
0x28d: v28d = MLOAD v282(0x40)
0x291: v291 = SUB v285 v28d
0x292: v292(0x20) = CONST 
0x294: v294 = ADD v292(0x20) v291
0x296: RETURN v28d v294
----------------------------------

Begin block 0x297
prev = {}, next = {'0x29f', '0x2a3'}
----------------------------------
function _totalSupply()()
Block 0x297
0x298: v298 = CALLVALUE 
0x29a: v29a = ISZERO v298
0x29b: v29b(0x2a3) = CONST 
0x29e: JUMPI v29b(0x2a3) v29a
----------------------------------

Begin block 0x29f
prev = {'0x297'}, next = {}
----------------------------------
Block 0x29f
0x29f: v29f(0x0) = CONST 
0x2a2: REVERT v29f(0x0) v29f(0x0)
----------------------------------

Begin block 0x2a3
prev = {'0x297'}, next = {'0x827'}
----------------------------------
Block 0x2a3
0x2a5: v2a5(0x1e4) = CONST 
0x2a8: v2a8(0x827) = CONST 
0x2ab: JUMP v2a8(0x827)
----------------------------------

Begin block 0x2ac
prev = {}, next = {'0x2b4', '0x2b8'}
----------------------------------
function onePercent(uint256)()
Block 0x2ac
0x2ad: v2ad = CALLVALUE 
0x2af: v2af = ISZERO v2ad
0x2b0: v2b0(0x2b8) = CONST 
0x2b3: JUMPI v2b0(0x2b8) v2af
----------------------------------

Begin block 0x2b4
prev = {'0x2ac'}, next = {}
----------------------------------
Block 0x2b4
0x2b4: v2b4(0x0) = CONST 
0x2b7: REVERT v2b4(0x0) v2b4(0x0)
----------------------------------

Begin block 0x2b8
prev = {'0x2ac'}, next = {'0x2cb', '0x2cf'}
----------------------------------
Block 0x2b8
0x2ba: v2ba(0x1e4) = CONST 
0x2bd: v2bd(0x4) = CONST 
0x2c0: v2c0 = CALLDATASIZE 
0x2c1: v2c1 = SUB v2c0 v2bd(0x4)
0x2c2: v2c2(0x20) = CONST 
0x2c5: v2c5 = LT v2c1 v2c2(0x20)
0x2c6: v2c6 = ISZERO v2c5
0x2c7: v2c7(0x2cf) = CONST 
0x2ca: JUMPI v2c7(0x2cf) v2c6
----------------------------------

Begin block 0x2cb
prev = {'0x2b8'}, next = {}
----------------------------------
Block 0x2cb
0x2cb: v2cb(0x0) = CONST 
0x2ce: REVERT v2cb(0x0) v2cb(0x0)
----------------------------------

Begin block 0x2cf
prev = {'0x2b8'}, next = {'0x82d0x2ac'}
----------------------------------
Block 0x2cf
0x2d1: v2d1 = CALLDATALOAD v2bd(0x4)
0x2d2: v2d2(0x82d) = CONST 
0x2d5: JUMP v2d2(0x82d)
----------------------------------

Begin block 0x2d6
prev = {}, next = {'0x2e2', '0x2de'}
----------------------------------
function allowed(address,address)()
Block 0x2d6
0x2d7: v2d7 = CALLVALUE 
0x2d9: v2d9 = ISZERO v2d7
0x2da: v2da(0x2e2) = CONST 
0x2dd: JUMPI v2da(0x2e2) v2d9
----------------------------------

Begin block 0x2de
prev = {'0x2d6'}, next = {}
----------------------------------
Block 0x2de
0x2de: v2de(0x0) = CONST 
0x2e1: REVERT v2de(0x0) v2de(0x0)
----------------------------------

Begin block 0x2e2
prev = {'0x2d6'}, next = {'0x2f9', '0x2f5'}
----------------------------------
Block 0x2e2
0x2e4: v2e4(0x1e4) = CONST 
0x2e7: v2e7(0x4) = CONST 
0x2ea: v2ea = CALLDATASIZE 
0x2eb: v2eb = SUB v2ea v2e7(0x4)
0x2ec: v2ec(0x40) = CONST 
0x2ef: v2ef = LT v2eb v2ec(0x40)
0x2f0: v2f0 = ISZERO v2ef
0x2f1: v2f1(0x2f9) = CONST 
0x2f4: JUMPI v2f1(0x2f9) v2f0
----------------------------------

Begin block 0x2f5
prev = {'0x2e2'}, next = {}
----------------------------------
Block 0x2f5
0x2f5: v2f5(0x0) = CONST 
0x2f8: REVERT v2f5(0x0) v2f5(0x0)
----------------------------------

Begin block 0x2f9
prev = {'0x2e2'}, next = {'0x87e'}
----------------------------------
Block 0x2f9
0x2fb: v2fb(0x1) = CONST 
0x2fd: v2fd(0x1) = CONST 
0x2ff: v2ff(0xa0) = CONST 
0x301: v301(0x10000000000000000000000000000000000000000) = SHL v2ff(0xa0) v2fd(0x1)
0x302: v302(0xffffffffffffffffffffffffffffffffffffffff) = SUB v301(0x10000000000000000000000000000000000000000) v2fb(0x1)
0x304: v304 = CALLDATALOAD v2e7(0x4)
0x306: v306 = AND v302(0xffffffffffffffffffffffffffffffffffffffff) v304
0x308: v308(0x20) = CONST 
0x30a: v30a = ADD v308(0x20) v2e7(0x4)
0x30b: v30b = CALLDATALOAD v30a
0x30c: v30c = AND v30b v302(0xffffffffffffffffffffffffffffffffffffffff)
0x30d: v30d(0x87e) = CONST 
0x310: JUMP v30d(0x87e)
----------------------------------

Begin block 0x311
prev = {}, next = {'0x31d', '0x319'}
----------------------------------
function balanceOf(address)()
Block 0x311
0x312: v312 = CALLVALUE 
0x314: v314 = ISZERO v312
0x315: v315(0x31d) = CONST 
0x318: JUMPI v315(0x31d) v314
----------------------------------

Begin block 0x319
prev = {'0x311'}, next = {}
----------------------------------
Block 0x319
0x319: v319(0x0) = CONST 
0x31c: REVERT v319(0x0) v319(0x0)
----------------------------------

Begin block 0x31d
prev = {'0x311'}, next = {'0x334', '0x330'}
----------------------------------
Block 0x31d
0x31f: v31f(0x1e4) = CONST 
0x322: v322(0x4) = CONST 
0x325: v325 = CALLDATASIZE 
0x326: v326 = SUB v325 v322(0x4)
0x327: v327(0x20) = CONST 
0x32a: v32a = LT v326 v327(0x20)
0x32b: v32b = ISZERO v32a
0x32c: v32c(0x334) = CONST 
0x32f: JUMPI v32c(0x334) v32b
----------------------------------

Begin block 0x330
prev = {'0x31d'}, next = {}
----------------------------------
Block 0x330
0x330: v330(0x0) = CONST 
0x333: REVERT v330(0x0) v330(0x0)
----------------------------------

Begin block 0x334
prev = {'0x31d'}, next = {'0x89b'}
----------------------------------
Block 0x334
0x336: v336 = CALLDATALOAD v322(0x4)
0x337: v337(0x1) = CONST 
0x339: v339(0x1) = CONST 
0x33b: v33b(0xa0) = CONST 
0x33d: v33d(0x10000000000000000000000000000000000000000) = SHL v33b(0xa0) v339(0x1)
0x33e: v33e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33d(0x10000000000000000000000000000000000000000) v337(0x1)
0x33f: v33f = AND v33e(0xffffffffffffffffffffffffffffffffffffffff) v336
0x340: v340(0x89b) = CONST 
0x343: JUMP v340(0x89b)
----------------------------------

Begin block 0x344
prev = {}, next = {'0x34c', '0x350'}
----------------------------------
function owner()()
Block 0x344
0x345: v345 = CALLVALUE 
0x347: v347 = ISZERO v345
0x348: v348(0x350) = CONST 
0x34b: JUMPI v348(0x350) v347
----------------------------------

Begin block 0x34c
prev = {'0x344'}, next = {}
----------------------------------
Block 0x34c
0x34c: v34c(0x0) = CONST 
0x34f: REVERT v34c(0x0) v34c(0x0)
----------------------------------

Begin block 0x350
prev = {'0x344'}, next = {'0x8b6'}
----------------------------------
Block 0x350
0x352: v352(0x359) = CONST 
0x355: v355(0x8b6) = CONST 
0x358: JUMP v355(0x8b6)
----------------------------------

Begin block 0x359
prev = {'0x8b6'}, next = {}
----------------------------------
Block 0x359
0x35a: v35a(0x40) = CONST 
0x35d: v35d = MLOAD v35a(0x40)
0x35e: v35e(0x1) = CONST 
0x360: v360(0x1) = CONST 
0x362: v362(0xa0) = CONST 
0x364: v364(0x10000000000000000000000000000000000000000) = SHL v362(0xa0) v360(0x1)
0x365: v365(0xffffffffffffffffffffffffffffffffffffffff) = SUB v364(0x10000000000000000000000000000000000000000) v35e(0x1)
0x368: v368 = AND v8c2 v365(0xffffffffffffffffffffffffffffffffffffffff)
0x36a: MSTORE v35d v368
0x36b: v36b = MLOAD v35a(0x40)
0x36f: v36f = SUB v35d v36b
0x370: v370(0x20) = CONST 
0x372: v372 = ADD v370(0x20) v36f
0x374: RETURN v36b v372
----------------------------------

Begin block 0x375
prev = {}, next = {'0x37d', '0x381'}
----------------------------------
function symbol()()
Block 0x375
0x376: v376 = CALLVALUE 
0x378: v378 = ISZERO v376
0x379: v379(0x381) = CONST 
0x37c: JUMPI v379(0x381) v378
----------------------------------

Begin block 0x37d
prev = {'0x375'}, next = {}
----------------------------------
Block 0x37d
0x37d: v37d(0x0) = CONST 
0x380: REVERT v37d(0x0) v37d(0x0)
----------------------------------

Begin block 0x381
prev = {'0x375'}, next = {'0x10d0x375'}
----------------------------------
Block 0x381
0x383: v383(0x10d) = CONST 
0x386: v386(0x8c5) = CONST 
0x389: v389_0, v389_1 = CALLPRIVATE v386(0x8c5) v383(0x10d)
----------------------------------

Begin block 0x38a
prev = {}, next = {'0x396', '0x392'}
----------------------------------
function transfer(address,uint256)()
Block 0x38a
0x38b: v38b = CALLVALUE 
0x38d: v38d = ISZERO v38b
0x38e: v38e(0x396) = CONST 
0x391: JUMPI v38e(0x396) v38d
----------------------------------

Begin block 0x392
prev = {'0x38a'}, next = {}
----------------------------------
Block 0x392
0x392: v392(0x0) = CONST 
0x395: REVERT v392(0x0) v392(0x0)
----------------------------------

Begin block 0x396
prev = {'0x38a'}, next = {'0x3ad', '0x3a9'}
----------------------------------
Block 0x396
0x398: v398(0x1bb) = CONST 
0x39b: v39b(0x4) = CONST 
0x39e: v39e = CALLDATASIZE 
0x39f: v39f = SUB v39e v39b(0x4)
0x3a0: v3a0(0x40) = CONST 
0x3a3: v3a3 = LT v39f v3a0(0x40)
0x3a4: v3a4 = ISZERO v3a3
0x3a5: v3a5(0x3ad) = CONST 
0x3a8: JUMPI v3a5(0x3ad) v3a4
----------------------------------

Begin block 0x3a9
prev = {'0x396'}, next = {}
----------------------------------
Block 0x3a9
0x3a9: v3a9(0x0) = CONST 
0x3ac: REVERT v3a9(0x0) v3a9(0x0)
----------------------------------

Begin block 0x3ad
prev = {'0x396'}, next = {'0x91f'}
----------------------------------
Block 0x3ad
0x3af: v3af(0x1) = CONST 
0x3b1: v3b1(0x1) = CONST 
0x3b3: v3b3(0xa0) = CONST 
0x3b5: v3b5(0x10000000000000000000000000000000000000000) = SHL v3b3(0xa0) v3b1(0x1)
0x3b6: v3b6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b5(0x10000000000000000000000000000000000000000) v3af(0x1)
0x3b8: v3b8 = CALLDATALOAD v39b(0x4)
0x3b9: v3b9 = AND v3b8 v3b6(0xffffffffffffffffffffffffffffffffffffffff)
0x3bb: v3bb(0x20) = CONST 
0x3bd: v3bd = ADD v3bb(0x20) v39b(0x4)
0x3be: v3be = CALLDATALOAD v3bd
0x3bf: v3bf(0x91f) = CONST 
0x3c2: JUMP v3bf(0x91f)
----------------------------------

Begin block 0x3c3
prev = {}, next = {'0x3cb', '0x3cf'}
----------------------------------
function allowance(address,address)()
Block 0x3c3
0x3c4: v3c4 = CALLVALUE 
0x3c6: v3c6 = ISZERO v3c4
0x3c7: v3c7(0x3cf) = CONST 
0x3ca: JUMPI v3c7(0x3cf) v3c6
----------------------------------

Begin block 0x3cb
prev = {'0x3c3'}, next = {}
----------------------------------
Block 0x3cb
0x3cb: v3cb(0x0) = CONST 
0x3ce: REVERT v3cb(0x0) v3cb(0x0)
----------------------------------

Begin block 0x3cf
prev = {'0x3c3'}, next = {'0x3e2', '0x3e6'}
----------------------------------
Block 0x3cf
0x3d1: v3d1(0x1e4) = CONST 
0x3d4: v3d4(0x4) = CONST 
0x3d7: v3d7 = CALLDATASIZE 
0x3d8: v3d8 = SUB v3d7 v3d4(0x4)
0x3d9: v3d9(0x40) = CONST 
0x3dc: v3dc = LT v3d8 v3d9(0x40)
0x3dd: v3dd = ISZERO v3dc
0x3de: v3de(0x3e6) = CONST 
0x3e1: JUMPI v3de(0x3e6) v3dd
----------------------------------

Begin block 0x3e2
prev = {'0x3cf'}, next = {}
----------------------------------
Block 0x3e2
0x3e2: v3e2(0x0) = CONST 
0x3e5: REVERT v3e2(0x0) v3e2(0x0)
----------------------------------

Begin block 0x3e6
prev = {'0x3cf'}, next = {'0xaaf'}
----------------------------------
Block 0x3e6
0x3e8: v3e8(0x1) = CONST 
0x3ea: v3ea(0x1) = CONST 
0x3ec: v3ec(0xa0) = CONST 
0x3ee: v3ee(0x10000000000000000000000000000000000000000) = SHL v3ec(0xa0) v3ea(0x1)
0x3ef: v3ef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ee(0x10000000000000000000000000000000000000000) v3e8(0x1)
0x3f1: v3f1 = CALLDATALOAD v3d4(0x4)
0x3f3: v3f3 = AND v3ef(0xffffffffffffffffffffffffffffffffffffffff) v3f1
0x3f5: v3f5(0x20) = CONST 
0x3f7: v3f7 = ADD v3f5(0x20) v3d4(0x4)
0x3f8: v3f8 = CALLDATALOAD v3f7
0x3f9: v3f9 = AND v3f8 v3ef(0xffffffffffffffffffffffffffffffffffffffff)
0x3fa: v3fa(0xaaf) = CONST 
0x3fd: JUMP v3fa(0xaaf)
----------------------------------

Begin block 0x3fe
prev = {}, next = {'0x40a', '0x406'}
----------------------------------
function transferOwnership(address)()
Block 0x3fe
0x3ff: v3ff = CALLVALUE 
0x401: v401 = ISZERO v3ff
0x402: v402(0x40a) = CONST 
0x405: JUMPI v402(0x40a) v401
----------------------------------

Begin block 0x406
prev = {'0x3fe'}, next = {}
----------------------------------
Block 0x406
0x406: v406(0x0) = CONST 
0x409: REVERT v406(0x0) v406(0x0)
----------------------------------

Begin block 0x40a
prev = {'0x3fe'}, next = {'0x41d', '0x421'}
----------------------------------
Block 0x40a
0x40c: v40c(0x431) = CONST 
0x40f: v40f(0x4) = CONST 
0x412: v412 = CALLDATASIZE 
0x413: v413 = SUB v412 v40f(0x4)
0x414: v414(0x20) = CONST 
0x417: v417 = LT v413 v414(0x20)
0x418: v418 = ISZERO v417
0x419: v419(0x421) = CONST 
0x41c: JUMPI v419(0x421) v418
----------------------------------

Begin block 0x41d
prev = {'0x40a'}, next = {}
----------------------------------
Block 0x41d
0x41d: v41d(0x0) = CONST 
0x420: REVERT v41d(0x0) v41d(0x0)
----------------------------------

Begin block 0x421
prev = {'0x40a'}, next = {'0xada'}
----------------------------------
Block 0x421
0x423: v423 = CALLDATALOAD v40f(0x4)
0x424: v424(0x1) = CONST 
0x426: v426(0x1) = CONST 
0x428: v428(0xa0) = CONST 
0x42a: v42a(0x10000000000000000000000000000000000000000) = SHL v428(0xa0) v426(0x1)
0x42b: v42b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v42a(0x10000000000000000000000000000000000000000) v424(0x1)
0x42c: v42c = AND v42b(0xffffffffffffffffffffffffffffffffffffffff) v423
0x42d: v42d(0xada) = CONST 
0x430: JUMP v42d(0xada)
----------------------------------

Begin block 0x4310x3fe
prev = {'0xaf1'}, next = {}
----------------------------------
Block 0x4310x3fe
0x4320x3fe: STOP 
----------------------------------

Begin block 0x4310x433
prev = {'0xbdd'}, next = {}
----------------------------------
Block 0x4310x433
0x4320x433: STOP 
----------------------------------

Begin block 0x433
prev = {}, next = {'0x43f', '0x43b'}
----------------------------------
function burn(uint256,address)()
Block 0x433
0x434: v434 = CALLVALUE 
0x436: v436 = ISZERO v434
0x437: v437(0x43f) = CONST 
0x43a: JUMPI v437(0x43f) v436
----------------------------------

Begin block 0x43b
prev = {'0x433'}, next = {}
----------------------------------
Block 0x43b
0x43b: v43b(0x0) = CONST 
0x43e: REVERT v43b(0x0) v43b(0x0)
----------------------------------

Begin block 0x43f
prev = {'0x433'}, next = {'0x452', '0x456'}
----------------------------------
Block 0x43f
0x441: v441(0x431) = CONST 
0x444: v444(0x4) = CONST 
0x447: v447 = CALLDATASIZE 
0x448: v448 = SUB v447 v444(0x4)
0x449: v449(0x40) = CONST 
0x44c: v44c = LT v448 v449(0x40)
0x44d: v44d = ISZERO v44c
0x44e: v44e(0x456) = CONST 
0x451: JUMPI v44e(0x456) v44d
----------------------------------

Begin block 0x452
prev = {'0x43f'}, next = {}
----------------------------------
Block 0x452
0x452: v452(0x0) = CONST 
0x455: REVERT v452(0x0) v452(0x0)
----------------------------------

Begin block 0x456
prev = {'0x43f'}, next = {'0xb4c'}
----------------------------------
Block 0x456
0x459: v459 = CALLDATALOAD v444(0x4)
0x45b: v45b(0x20) = CONST 
0x45d: v45d = ADD v45b(0x20) v444(0x4)
0x45e: v45e = CALLDATALOAD v45d
0x45f: v45f(0x1) = CONST 
0x461: v461(0x1) = CONST 
0x463: v463(0xa0) = CONST 
0x465: v465(0x10000000000000000000000000000000000000000) = SHL v463(0xa0) v461(0x1)
0x466: v466(0xffffffffffffffffffffffffffffffffffffffff) = SUB v465(0x10000000000000000000000000000000000000000) v45f(0x1)
0x467: v467 = AND v466(0xffffffffffffffffffffffffffffffffffffffff) v45e
0x468: v468(0xb4c) = CONST 
0x46b: JUMP v468(0xb4c)
----------------------------------

Begin block 0x46c
prev = {}, next = {'0x4ef0x46c', '0x4a9'}
----------------------------------
function 0x46c(v46carg0)
Block 0x46c
0x46d: v46d(0x2) = CONST 
0x470: v470 = SLOAD v46d(0x2)
0x471: v471(0x40) = CONST 
0x474: v474 = MLOAD v471(0x40)
0x475: v475(0x20) = CONST 
0x477: v477(0x1) = CONST 
0x47a: v47a = AND v470 v477(0x1)
0x47b: v47b = ISZERO v47a
0x47c: v47c(0x100) = CONST 
0x47f: v47f = MUL v47c(0x100) v47b
0x480: v480(0x0) = CONST 
0x482: v482(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v480(0x0)
0x483: v483 = ADD v482(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v47f
0x486: v486 = AND v470 v483
0x489: v489 = DIV v486 v46d(0x2)
0x48a: v48a(0x1f) = CONST 
0x48d: v48d = ADD v489 v48a(0x1f)
0x490: v490 = DIV v48d v475(0x20)
0x492: v492 = MUL v475(0x20) v490
0x494: v494 = ADD v474 v492
0x496: v496 = ADD v475(0x20) v494
0x499: MSTORE v471(0x40) v496
0x49c: MSTORE v474 v489
0x4a0: v4a0 = ADD v474 v475(0x20)
0x4a4: v4a4 = ISZERO v489
0x4a5: v4a5(0x4ef) = CONST 
0x4a8: JUMPI v4a5(0x4ef) v4a4
----------------------------------

Begin block 0x4a9
prev = {'0x46c'}, next = {'0x4c40x46c', '0x4b1'}
----------------------------------
Block 0x4a9
0x4aa: v4aa(0x1f) = CONST 
0x4ac: v4ac = LT v4aa(0x1f) v489
0x4ad: v4ad(0x4c4) = CONST 
0x4b0: JUMPI v4ad(0x4c4) v4ac
----------------------------------

Begin block 0x4b1
prev = {'0x4a9'}, next = {'0x4ef0x46c'}
----------------------------------
Block 0x4b1
0x4b1: v4b1(0x100) = CONST 
0x4b6: v4b6 = SLOAD v46d(0x2)
0x4b7: v4b7 = DIV v4b6 v4b1(0x100)
0x4b8: v4b8 = MUL v4b7 v4b1(0x100)
0x4ba: MSTORE v4a0 v4b8
0x4bc: v4bc(0x20) = CONST 
0x4be: v4be = ADD v4bc(0x20) v4a0
0x4c0: v4c0(0x4ef) = CONST 
0x4c3: JUMP v4c0(0x4ef)
----------------------------------

Begin block 0x4c40x46c
prev = {'0x4a9'}, next = {'0x4d20x46c'}
----------------------------------
Block 0x4c40x46c
0x4c60x46c: v46c4c6 = ADD v4a0 v489
0x4c90x46c: v46c4c9(0x0) = CONST 
0x4cb0x46c: MSTORE v46c4c9(0x0) v46d(0x2)
0x4cc0x46c: v46c4cc(0x20) = CONST 
0x4ce0x46c: v46c4ce(0x0) = CONST 
0x4d00x46c: v46c4d0 = SHA3 v46c4ce(0x0) v46c4cc(0x20)
----------------------------------

Begin block 0x4c40x8c5
prev = {'0x904'}, next = {'0x4d20x8c5'}
----------------------------------
Block 0x4c40x8c5
0x4c60x8c5: v8c54c6 = ADD v8fb v8e4
0x4c90x8c5: v8c54c9(0x0) = CONST 
0x4cb0x8c5: MSTORE v8c54c9(0x0) v8c6(0x1)
0x4cc0x8c5: v8c54cc(0x20) = CONST 
0x4ce0x8c5: v8c54ce(0x0) = CONST 
0x4d00x8c5: v8c54d0 = SHA3 v8c54ce(0x0) v8c54cc(0x20)
----------------------------------

Begin block 0x4d20x46c
prev = {'0x4d20x46c', '0x4c40x46c'}, next = {'0x4d20x46c', '0x4e60x46c'}
----------------------------------
Block 0x4d20x46c
0x4d20x46c_0x0: v4d246c_0 = PHI v4a0 v46c4de
0x4d20x46c_0x1: v4d246c_1 = PHI v46c4da v46c4d0
0x4d40x46c: v46c4d4 = SLOAD v4d246c_1
0x4d60x46c: MSTORE v4d246c_0 v46c4d4
0x4d80x46c: v46c4d8(0x1) = CONST 
0x4da0x46c: v46c4da = ADD v46c4d8(0x1) v4d246c_1
0x4dc0x46c: v46c4dc(0x20) = CONST 
0x4de0x46c: v46c4de = ADD v46c4dc(0x20) v4d246c_0
0x4e10x46c: v46c4e1 = GT v46c4c6 v46c4de
0x4e20x46c: v46c4e2(0x4d2) = CONST 
0x4e50x46c: JUMPI v46c4e2(0x4d2) v46c4e1
----------------------------------

Begin block 0x4d20x8c5
prev = {'0x4c40x8c5', '0x4d20x8c5'}, next = {'0x4d20x8c5', '0x4e60x8c5'}
----------------------------------
Block 0x4d20x8c5
0x4d20x8c5_0x0: v4d28c5_0 = PHI v8fb v8c54de
0x4d20x8c5_0x1: v4d28c5_1 = PHI v8c54da v8c54d0
0x4d40x8c5: v8c54d4 = SLOAD v4d28c5_1
0x4d60x8c5: MSTORE v4d28c5_0 v8c54d4
0x4d80x8c5: v8c54d8(0x1) = CONST 
0x4da0x8c5: v8c54da = ADD v8c54d8(0x1) v4d28c5_1
0x4dc0x8c5: v8c54dc(0x20) = CONST 
0x4de0x8c5: v8c54de = ADD v8c54dc(0x20) v4d28c5_0
0x4e10x8c5: v8c54e1 = GT v8c54c6 v8c54de
0x4e20x8c5: v8c54e2(0x4d2) = CONST 
0x4e50x8c5: JUMPI v8c54e2(0x4d2) v8c54e1
----------------------------------

Begin block 0x4e60x46c
prev = {'0x4d20x46c'}, next = {'0x4ef0x46c'}
----------------------------------
Block 0x4e60x46c
0x4e80x46c: v46c4e8 = SUB v46c4de v46c4c6
0x4e90x46c: v46c4e9(0x1f) = CONST 
0x4eb0x46c: v46c4eb = AND v46c4e9(0x1f) v46c4e8
0x4ed0x46c: v46c4ed = ADD v46c4c6 v46c4eb
----------------------------------

Begin block 0x4e60x8c5
prev = {'0x4d20x8c5'}, next = {'0x4ef0x8c5'}
----------------------------------
Block 0x4e60x8c5
0x4e80x8c5: v8c54e8 = SUB v8c54de v8c54c6
0x4e90x8c5: v8c54e9(0x1f) = CONST 
0x4eb0x8c5: v8c54eb = AND v8c54e9(0x1f) v8c54e8
0x4ed0x8c5: v8c54ed = ADD v8c54c6 v8c54eb
----------------------------------

Begin block 0x4ef0x46c
prev = {'0x4b1', '0x46c', '0x4e60x46c'}, next = {}
----------------------------------
Block 0x4ef0x46c
0x4f60x46c: RETURNPRIVATE v46carg0 v474 v46carg0
----------------------------------

Begin block 0x4ef0x8c5
prev = {'0x90c', '0x8c5', '0x4e60x8c5'}, next = {}
----------------------------------
Block 0x4ef0x8c5
0x4f60x8c5: RETURNPRIVATE v8c5arg0 v8cd v8c5arg0
----------------------------------

Begin block 0x4f7
prev = {'0x1a5'}, next = {'0x50c', '0x508'}
----------------------------------
Block 0x4f7
0x4f8: v4f8(0x0) = CONST 
0x4fa: v4fa(0x1) = CONST 
0x4fc: v4fc(0x1) = CONST 
0x4fe: v4fe(0xa0) = CONST 
0x500: v500(0x10000000000000000000000000000000000000000) = SHL v4fe(0xa0) v4fc(0x1)
0x501: v501(0xffffffffffffffffffffffffffffffffffffffff) = SUB v500(0x10000000000000000000000000000000000000000) v4fa(0x1)
0x503: v503 = AND v1b1 v501(0xffffffffffffffffffffffffffffffffffffffff)
0x504: v504(0x50c) = CONST 
0x507: JUMPI v504(0x50c) v503
----------------------------------

Begin block 0x508
prev = {'0x4f7'}, next = {}
----------------------------------
Block 0x508
0x508: v508(0x0) = CONST 
0x50b: REVERT v508(0x0) v508(0x0)
----------------------------------

Begin block 0x50c
prev = {'0x4f7'}, next = {'0x524', '0x528'}
----------------------------------
Block 0x50c
0x50d: v50d = CALLER 
0x50e: v50e(0x0) = CONST 
0x512: MSTORE v50e(0x0) v50d
0x513: v513(0x7) = CONST 
0x515: v515(0x20) = CONST 
0x517: MSTORE v515(0x20) v513(0x7)
0x518: v518(0x40) = CONST 
0x51b: v51b = SHA3 v50e(0x0) v518(0x40)
0x51c: v51c = SLOAD v51b
0x51e: v51e = GT v1b6 v51c
0x51f: v51f = ISZERO v51e
0x520: v520(0x528) = CONST 
0x523: JUMPI v520(0x528) v51f
----------------------------------

Begin block 0x524
prev = {'0x50c'}, next = {}
----------------------------------
Block 0x524
0x524: v524(0x0) = CONST 
0x527: REVERT v524(0x0) v524(0x0)
----------------------------------

Begin block 0x528
prev = {'0x50c'}, next = {'0x553', '0x556'}
----------------------------------
Block 0x528
0x529: v529 = CALLER 
0x52a: v52a(0x0) = CONST 
0x52e: MSTORE v52a(0x0) v529
0x52f: v52f(0x8) = CONST 
0x531: v531(0x20) = CONST 
0x535: MSTORE v531(0x20) v52f(0x8)
0x536: v536(0x40) = CONST 
0x53a: v53a = SHA3 v52a(0x0) v536(0x40)
0x53b: v53b(0x1) = CONST 
0x53d: v53d(0x1) = CONST 
0x53f: v53f(0xa0) = CONST 
0x541: v541(0x10000000000000000000000000000000000000000) = SHL v53f(0xa0) v53d(0x1)
0x542: v542(0xffffffffffffffffffffffffffffffffffffffff) = SUB v541(0x10000000000000000000000000000000000000000) v53b(0x1)
0x544: v544 = AND v1b1 v542(0xffffffffffffffffffffffffffffffffffffffff)
0x546: MSTORE v52a(0x0) v544
0x549: MSTORE v531(0x20) v53a
0x54b: v54b = SHA3 v52a(0x0) v536(0x40)
0x54c: v54c = SLOAD v54b
0x54d: v54d = ISZERO v54c
0x54f: v54f(0x556) = CONST 
0x552: JUMPI v54f(0x556) v54d
----------------------------------

Begin block 0x553
prev = {'0x528'}, next = {'0x556'}
----------------------------------
Block 0x553
0x555: v555 = ISZERO v1b6
----------------------------------

Begin block 0x556
prev = {'0x553', '0x528'}, next = {'0x55b', '0x55f'}
----------------------------------
Block 0x556
0x556_0x0: v556_0 = PHI v54d v555
0x557: v557(0x55f) = CONST 
0x55a: JUMPI v557(0x55f) v556_0
----------------------------------

Begin block 0x55b
prev = {'0x556'}, next = {}
----------------------------------
Block 0x55b
0x55b: v55b(0x0) = CONST 
0x55e: REVERT v55b(0x0) v55b(0x0)
----------------------------------

Begin block 0x55f
prev = {'0x556'}, next = {'0x5c10x182'}
----------------------------------
Block 0x55f
0x560: v560 = CALLER 
0x561: v561(0x0) = CONST 
0x565: MSTORE v561(0x0) v560
0x566: v566(0x8) = CONST 
0x568: v568(0x20) = CONST 
0x56c: MSTORE v568(0x20) v566(0x8)
0x56d: v56d(0x40) = CONST 
0x571: v571 = SHA3 v561(0x0) v56d(0x40)
0x572: v572(0x1) = CONST 
0x574: v574(0x1) = CONST 
0x576: v576(0xa0) = CONST 
0x578: v578(0x10000000000000000000000000000000000000000) = SHL v576(0xa0) v574(0x1)
0x579: v579(0xffffffffffffffffffffffffffffffffffffffff) = SUB v578(0x10000000000000000000000000000000000000000) v572(0x1)
0x57b: v57b = AND v1b1 v579(0xffffffffffffffffffffffffffffffffffffffff)
0x57e: MSTORE v561(0x0) v57b
0x581: MSTORE v568(0x20) v571
0x585: v585 = SHA3 v561(0x0) v56d(0x40)
0x588: SSTORE v585 v1b6
0x58a: v58a = MLOAD v56d(0x40)
0x58d: MSTORE v58a v1b6
0x58f: v58f = MLOAD v56d(0x40)
0x593: v593(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x5b8: v5b8 = SUB v58a v58f
0x5bb: v5bb = ADD v568(0x20) v5b8
0x5bd: LOG3 v58f v5bb v593(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v560 v57b
0x5bf: v5bf(0x1) = CONST 
----------------------------------

Begin block 0x5c10x182
prev = {'0x55f'}, next = {'0x1bb0x182'}
----------------------------------
Block 0x5c10x182
0x5c60x182: JUMP v190(0x1bb)
----------------------------------

Begin block 0x5c10xc81
prev = {'0xc81'}, next = {}
----------------------------------
Block 0x5c10xc81
0x5c60xc81: RETURNPRIVATE vc81arg2 vc84
----------------------------------

Begin block 0x5c10xccb
prev = {'0xce3'}, next = {}
----------------------------------
Block 0x5c10xccb
0x5c60xccb: RETURNPRIVATE vccbarg2 vcce
----------------------------------

Begin block 0x5c7
prev = {'0x1db'}, next = {'0x1e40x1cf'}
----------------------------------
Block 0x5c7
0x5c8: v5c8(0x4) = CONST 
0x5ca: v5ca = SLOAD v5c8(0x4)
0x5cc: JUMP v1dd(0x1e4)
----------------------------------

Begin block 0x5cd
prev = {'0x219'}, next = {'0x5de', '0x5e2'}
----------------------------------
Block 0x5cd
0x5ce: v5ce(0x0) = CONST 
0x5d0: v5d0(0x1) = CONST 
0x5d2: v5d2(0x1) = CONST 
0x5d4: v5d4(0xa0) = CONST 
0x5d6: v5d6(0x10000000000000000000000000000000000000000) = SHL v5d4(0xa0) v5d2(0x1)
0x5d7: v5d7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d6(0x10000000000000000000000000000000000000000) v5d0(0x1)
0x5d9: v5d9 = AND v226 v5d7(0xffffffffffffffffffffffffffffffffffffffff)
0x5da: v5da(0x5e2) = CONST 
0x5dd: JUMPI v5da(0x5e2) v5d9
----------------------------------

Begin block 0x5de
prev = {'0x5cd'}, next = {}
----------------------------------
Block 0x5de
0x5de: v5de(0x0) = CONST 
0x5e1: REVERT v5de(0x0) v5de(0x0)
----------------------------------

Begin block 0x5e2
prev = {'0x5cd'}, next = {'0x5f5', '0x5f1'}
----------------------------------
Block 0x5e2
0x5e3: v5e3(0x1) = CONST 
0x5e5: v5e5(0x1) = CONST 
0x5e7: v5e7(0xa0) = CONST 
0x5e9: v5e9(0x10000000000000000000000000000000000000000) = SHL v5e7(0xa0) v5e5(0x1)
0x5ea: v5ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e9(0x10000000000000000000000000000000000000000) v5e3(0x1)
0x5ec: v5ec = AND v22f v5ea(0xffffffffffffffffffffffffffffffffffffffff)
0x5ed: v5ed(0x5f5) = CONST 
0x5f0: JUMPI v5ed(0x5f5) v5ec
----------------------------------

Begin block 0x5f1
prev = {'0x5e2'}, next = {}
----------------------------------
Block 0x5f1
0x5f1: v5f1(0x0) = CONST 
0x5f4: REVERT v5f1(0x0) v5f1(0x0)
----------------------------------

Begin block 0x5f5
prev = {'0x5e2'}, next = {'0x621', '0x625'}
----------------------------------
Block 0x5f5
0x5f6: v5f6(0x1) = CONST 
0x5f8: v5f8(0x1) = CONST 
0x5fa: v5fa(0xa0) = CONST 
0x5fc: v5fc(0x10000000000000000000000000000000000000000) = SHL v5fa(0xa0) v5f8(0x1)
0x5fd: v5fd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5fc(0x10000000000000000000000000000000000000000) v5f6(0x1)
0x5ff: v5ff = AND v226 v5fd(0xffffffffffffffffffffffffffffffffffffffff)
0x600: v600(0x0) = CONST 
0x604: MSTORE v600(0x0) v5ff
0x605: v605(0x8) = CONST 
0x607: v607(0x20) = CONST 
0x60b: MSTORE v607(0x20) v605(0x8)
0x60c: v60c(0x40) = CONST 
0x610: v610 = SHA3 v600(0x0) v60c(0x40)
0x611: v611 = CALLER 
0x613: MSTORE v600(0x0) v611
0x616: MSTORE v607(0x20) v610
0x618: v618 = SHA3 v600(0x0) v60c(0x40)
0x619: v619 = SLOAD v618
0x61b: v61b = GT v234 v619
0x61c: v61c = ISZERO v61b
0x61d: v61d(0x625) = CONST 
0x620: JUMPI v61d(0x625) v61c
----------------------------------

Begin block 0x621
prev = {'0x5f5'}, next = {}
----------------------------------
Block 0x621
0x621: v621(0x0) = CONST 
0x624: REVERT v621(0x0) v621(0x0)
----------------------------------

Begin block 0x625
prev = {'0x5f5'}, next = {'0x64a', '0x646'}
----------------------------------
Block 0x625
0x626: v626(0x1) = CONST 
0x628: v628(0x1) = CONST 
0x62a: v62a(0xa0) = CONST 
0x62c: v62c(0x10000000000000000000000000000000000000000) = SHL v62a(0xa0) v628(0x1)
0x62d: v62d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v62c(0x10000000000000000000000000000000000000000) v626(0x1)
0x62f: v62f = AND v226 v62d(0xffffffffffffffffffffffffffffffffffffffff)
0x630: v630(0x0) = CONST 
0x634: MSTORE v630(0x0) v62f
0x635: v635(0x7) = CONST 
0x637: v637(0x20) = CONST 
0x639: MSTORE v637(0x20) v635(0x7)
0x63a: v63a(0x40) = CONST 
0x63d: v63d = SHA3 v630(0x0) v63a(0x40)
0x63e: v63e = SLOAD v63d
0x640: v640 = GT v234 v63e
0x641: v641 = ISZERO v640
0x642: v642(0x64a) = CONST 
0x645: JUMPI v642(0x64a) v641
----------------------------------

Begin block 0x646
prev = {'0x625'}, next = {}
----------------------------------
Block 0x646
0x646: v646(0x0) = CONST 
0x649: REVERT v646(0x0) v646(0x0)
----------------------------------

Begin block 0x64a
prev = {'0x625'}, next = {'0x673'}
----------------------------------
Block 0x64a
0x64b: v64b(0x1) = CONST 
0x64d: v64d(0x1) = CONST 
0x64f: v64f(0xa0) = CONST 
0x651: v651(0x10000000000000000000000000000000000000000) = SHL v64f(0xa0) v64d(0x1)
0x652: v652(0xffffffffffffffffffffffffffffffffffffffff) = SUB v651(0x10000000000000000000000000000000000000000) v64b(0x1)
0x654: v654 = AND v226 v652(0xffffffffffffffffffffffffffffffffffffffff)
0x655: v655(0x0) = CONST 
0x659: MSTORE v655(0x0) v654
0x65a: v65a(0x7) = CONST 
0x65c: v65c(0x20) = CONST 
0x65e: MSTORE v65c(0x20) v65a(0x7)
0x65f: v65f(0x40) = CONST 
0x662: v662 = SHA3 v655(0x0) v65f(0x40)
0x663: v663 = SLOAD v662
0x664: v664(0x673) = CONST 
0x669: v669(0xffffffff) = CONST 
0x66e: v66e(0xc6c) = CONST 
0x671: v671(0xc6c) = AND v66e(0xc6c) v669(0xffffffff)
0x672: v672_0 = CALLPRIVATE v671(0xc6c) v234 v663 v664(0x673)
----------------------------------

Begin block 0x673
prev = {'0x64a'}, next = {'0x699'}
----------------------------------
Block 0x673
0x674: v674(0x1) = CONST 
0x676: v676(0x1) = CONST 
0x678: v678(0xa0) = CONST 
0x67a: v67a(0x10000000000000000000000000000000000000000) = SHL v678(0xa0) v676(0x1)
0x67b: v67b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v67a(0x10000000000000000000000000000000000000000) v674(0x1)
0x67d: v67d = AND v226 v67b(0xffffffffffffffffffffffffffffffffffffffff)
0x67e: v67e(0x0) = CONST 
0x682: MSTORE v67e(0x0) v67d
0x683: v683(0x7) = CONST 
0x685: v685(0x20) = CONST 
0x687: MSTORE v685(0x20) v683(0x7)
0x688: v688(0x40) = CONST 
0x68b: v68b = SHA3 v67e(0x0) v688(0x40)
0x68f: SSTORE v68b v672_0
0x691: v691(0x699) = CONST 
0x695: v695(0x82d) = CONST 
0x698: v698_0 = CALLPRIVATE v695(0x82d) v234 v691(0x699)
----------------------------------

Begin block 0x699
prev = {'0x673'}, next = {'0x6ab'}
----------------------------------
Block 0x699
0x69c: v69c(0x6ab) = CONST 
0x6a1: v6a1(0xffffffff) = CONST 
0x6a6: v6a6(0xc81) = CONST 
0x6a9: v6a9(0xc81) = AND v6a6(0xc81) v6a1(0xffffffff)
0x6aa: v6aa_0 = CALLPRIVATE v6a9(0xc81) v698_0 v234 v69c(0x6ab)
----------------------------------

Begin block 0x6ab
prev = {'0x699'}, next = {'0x6c1'}
----------------------------------
Block 0x6ab
0x6ac: v6ac(0x4) = CONST 
0x6ae: v6ae = SLOAD v6ac(0x4)
0x6b2: v6b2(0x6c1) = CONST 
0x6b7: v6b7(0xffffffff) = CONST 
0x6bc: v6bc(0xc81) = CONST 
0x6bf: v6bf(0xc81) = AND v6bc(0xc81) v6b7(0xffffffff)
0x6c0: v6c0_0 = CALLPRIVATE v6bf(0xc81) v698_0 v6ae v6b2(0x6c1)
----------------------------------

Begin block 0x6c1
prev = {'0x6ab'}, next = {'0x732', '0x72e'}
----------------------------------
Block 0x6c1
0x6c2: v6c2(0x4) = CONST 
0x6c4: SSTORE v6c2(0x4) v6c0_0
0x6c5: v6c5(0x40) = CONST 
0x6c8: v6c8 = MLOAD v6c5(0x40)
0x6cb: MSTORE v6c8 v698_0
0x6cc: v6cc = CALLER 
0x6cd: v6cd(0x20) = CONST 
0x6d0: v6d0 = ADD v6c8 v6cd(0x20)
0x6d1: MSTORE v6d0 v6cc
0x6d2: v6d2(0x1) = CONST 
0x6d4: v6d4(0x1) = CONST 
0x6d6: v6d6(0xa0) = CONST 
0x6d8: v6d8(0x10000000000000000000000000000000000000000) = SHL v6d6(0xa0) v6d4(0x1)
0x6d9: v6d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6d8(0x10000000000000000000000000000000000000000) v6d2(0x1)
0x6db: v6db = AND v22f v6d9(0xffffffffffffffffffffffffffffffffffffffff)
0x6de: v6de = ADD v6c5(0x40) v6c8
0x6df: MSTORE v6de v6db
0x6e1: v6e1 = MLOAD v6c5(0x40)
0x6e2: v6e2(0x4c4fa1e366e2f60c4c4b018f7ab5b15419b1ad450e677587a56d922f90ba64e9) = CONST 
0x706: v706 = SUB v6c8 v6e1
0x707: v707(0x60) = CONST 
0x709: v709 = ADD v707(0x60) v706
0x70b: LOG1 v6e1 v709 v6e2(0x4c4fa1e366e2f60c4c4b018f7ab5b15419b1ad450e677587a56d922f90ba64e9)
0x70c: v70c(0x1) = CONST 
0x70e: v70e(0x1) = CONST 
0x710: v710(0xa0) = CONST 
0x712: v712(0x10000000000000000000000000000000000000000) = SHL v710(0xa0) v70e(0x1)
0x713: v713(0xffffffffffffffffffffffffffffffffffffffff) = SUB v712(0x10000000000000000000000000000000000000000) v70c(0x1)
0x715: v715 = AND v22f v713(0xffffffffffffffffffffffffffffffffffffffff)
0x716: v716(0x0) = CONST 
0x71a: MSTORE v716(0x0) v715
0x71b: v71b(0x7) = CONST 
0x71d: v71d(0x20) = CONST 
0x71f: MSTORE v71d(0x20) v71b(0x7)
0x720: v720(0x40) = CONST 
0x723: v723 = SHA3 v716(0x0) v720(0x40)
0x724: v724 = SLOAD v723
0x727: v727 = ADD v724 v6aa_0
0x728: v728 = LT v727 v724
0x729: v729 = ISZERO v728
0x72a: v72a(0x732) = CONST 
0x72d: JUMPI v72a(0x732) v729
----------------------------------

Begin block 0x72e
prev = {'0x6c1'}, next = {}
----------------------------------
Block 0x72e
0x72e: v72e(0x0) = CONST 
0x731: REVERT v72e(0x0) v72e(0x0)
----------------------------------

Begin block 0x732
prev = {'0x6c1'}, next = {'0x75b'}
----------------------------------
Block 0x732
0x733: v733(0x1) = CONST 
0x735: v735(0x1) = CONST 
0x737: v737(0xa0) = CONST 
0x739: v739(0x10000000000000000000000000000000000000000) = SHL v737(0xa0) v735(0x1)
0x73a: v73a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v739(0x10000000000000000000000000000000000000000) v733(0x1)
0x73c: v73c = AND v22f v73a(0xffffffffffffffffffffffffffffffffffffffff)
0x73d: v73d(0x0) = CONST 
0x741: MSTORE v73d(0x0) v73c
0x742: v742(0x7) = CONST 
0x744: v744(0x20) = CONST 
0x746: MSTORE v744(0x20) v742(0x7)
0x747: v747(0x40) = CONST 
0x74a: v74a = SHA3 v73d(0x0) v747(0x40)
0x74b: v74b = SLOAD v74a
0x74c: v74c(0x75b) = CONST 
0x751: v751(0xffffffff) = CONST 
0x756: v756(0xc81) = CONST 
0x759: v759(0xc81) = AND v756(0xc81) v751(0xffffffff)
0x75a: v75a_0 = CALLPRIVATE v759(0xc81) v6aa_0 v74b v74c(0x75b)
----------------------------------

Begin block 0x75b
prev = {'0x732'}, next = {'0x79f'}
----------------------------------
Block 0x75b
0x75c: v75c(0x1) = CONST 
0x75e: v75e(0x1) = CONST 
0x760: v760(0xa0) = CONST 
0x762: v762(0x10000000000000000000000000000000000000000) = SHL v760(0xa0) v75e(0x1)
0x763: v763(0xffffffffffffffffffffffffffffffffffffffff) = SUB v762(0x10000000000000000000000000000000000000000) v75c(0x1)
0x766: v766 = AND v22f v763(0xffffffffffffffffffffffffffffffffffffffff)
0x767: v767(0x0) = CONST 
0x76b: MSTORE v767(0x0) v766
0x76c: v76c(0x7) = CONST 
0x76e: v76e(0x20) = CONST 
0x772: MSTORE v76e(0x20) v76c(0x7)
0x773: v773(0x40) = CONST 
0x777: v777 = SHA3 v767(0x0) v773(0x40)
0x77b: SSTORE v777 v75a_0
0x77e: v77e = AND v226 v763(0xffffffffffffffffffffffffffffffffffffffff)
0x780: MSTORE v767(0x0) v77e
0x781: v781(0x8) = CONST 
0x784: MSTORE v76e(0x20) v781(0x8)
0x787: v787 = SHA3 v767(0x0) v773(0x40)
0x788: v788 = CALLER 
0x78a: MSTORE v767(0x0) v788
0x78d: MSTORE v76e(0x20) v787
0x78e: v78e = SHA3 v767(0x0) v773(0x40)
0x78f: v78f = SLOAD v78e
0x790: v790(0x79f) = CONST 
0x795: v795(0xffffffff) = CONST 
0x79a: v79a(0xc6c) = CONST 
0x79d: v79d(0xc6c) = AND v79a(0xc6c) v795(0xffffffff)
0x79e: v79e_0 = CALLPRIVATE v79d(0xc6c) v234 v78f v790(0x79f)
----------------------------------

Begin block 0x79f
prev = {'0x75b'}, next = {'0x1bb0x1f6'}
----------------------------------
Block 0x79f
0x7a0: v7a0(0x1) = CONST 
0x7a2: v7a2(0x1) = CONST 
0x7a4: v7a4(0xa0) = CONST 
0x7a6: v7a6(0x10000000000000000000000000000000000000000) = SHL v7a4(0xa0) v7a2(0x1)
0x7a7: v7a7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7a6(0x10000000000000000000000000000000000000000) v7a0(0x1)
0x7aa: v7aa = AND v226 v7a7(0xffffffffffffffffffffffffffffffffffffffff)
0x7ab: v7ab(0x0) = CONST 
0x7af: MSTORE v7ab(0x0) v7aa
0x7b0: v7b0(0x8) = CONST 
0x7b2: v7b2(0x20) = CONST 
0x7b6: MSTORE v7b2(0x20) v7b0(0x8)
0x7b7: v7b7(0x40) = CONST 
0x7bb: v7bb = SHA3 v7ab(0x0) v7b7(0x40)
0x7bc: v7bc = CALLER 
0x7be: MSTORE v7ab(0x0) v7bc
0x7c0: MSTORE v7b2(0x20) v7bb
0x7c4: v7c4 = SHA3 v7ab(0x0) v7b7(0x40)
0x7c8: SSTORE v7c4 v79e_0
0x7ca: v7ca = MLOAD v7b7(0x40)
0x7cd: MSTORE v7ca v6aa_0
0x7cf: v7cf = MLOAD v7b7(0x40)
0x7d2: v7d2 = AND v22f v7a7(0xffffffffffffffffffffffffffffffffffffffff)
0x7d6: v7d6(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x7fb: v7fb = SUB v7ca v7cf
0x7fe: v7fe = ADD v7b2(0x20) v7fb
0x800: LOG3 v7cf v7fe v7d6(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v7aa v7d2
0x802: v802(0x1) = CONST 
0x80b: JUMP v204(0x1bb)
----------------------------------

Begin block 0x80c
prev = {'0x25c'}, next = {'0x1e40x239'}
----------------------------------
Block 0x80c
0x80d: v80d(0x7) = CONST 
0x80f: v80f(0x20) = CONST 
0x811: MSTORE v80f(0x20) v80d(0x7)
0x812: v812(0x0) = CONST 
0x816: MSTORE v812(0x0) v267
0x817: v817(0x40) = CONST 
0x81a: v81a = SHA3 v812(0x0) v817(0x40)
0x81b: v81b = SLOAD v81a
0x81d: JUMP v247(0x1e4)
----------------------------------

Begin block 0x81e
prev = {'0x278'}, next = {'0x281'}
----------------------------------
Block 0x81e
0x81f: v81f(0x3) = CONST 
0x821: v821 = SLOAD v81f(0x3)
0x822: v822(0xff) = CONST 
0x824: v824 = AND v822(0xff) v821
0x826: JUMP v27a(0x281)
----------------------------------

Begin block 0x827
prev = {'0x2a3'}, next = {'0x1e40x297'}
----------------------------------
Block 0x827
0x828: v828(0x4) = CONST 
0x82a: v82a = SLOAD v828(0x4)
0x82c: JUMP v2a5(0x1e4)
----------------------------------

Begin block 0x82d
prev = {}, next = {'0xc910x82d'}
----------------------------------
function 0x82d(v82darg0, v82darg1)
Block 0x82d
0x82e: v82e(0x0) = CONST 
0x831: v831(0x845) = CONST 
0x834: v834(0x5) = CONST 
0x836: v836 = SLOAD v834(0x5)
0x838: v838(0xc91) = CONST 
0x83e: v83e(0xffffffff) = CONST 
0x843: v843(0xc91) = AND v83e(0xffffffff) v838(0xc91)
0x844: JUMP v843(0xc91)
----------------------------------

Begin block 0x82d0x2ac
prev = {'0x2cf'}, next = {'0xc910x2ac'}
----------------------------------
Block 0x82d0x2ac
0x82e0x2ac: v2ac82e(0x0) = CONST 
0x8310x2ac: v2ac831(0x845) = CONST 
0x8340x2ac: v2ac834(0x5) = CONST 
0x8360x2ac: v2ac836 = SLOAD v2ac834(0x5)
0x8380x2ac: v2ac838(0xc91) = CONST 
0x83e0x2ac: v2ac83e(0xffffffff) = CONST 
0x8430x2ac: v2ac843(0xc91) = AND v2ac83e(0xffffffff) v2ac838(0xc91)
0x8440x2ac: JUMP v2ac843(0xc91)
----------------------------------

Begin block 0x8450x2ac
prev = {'0xcc20x2ac'}, next = {'0x86a0x2ac'}
----------------------------------
Block 0x8450x2ac
0x8480x2ac: v2ac848(0x0) = CONST 
0x84a0x2ac: v2ac84a(0x876) = CONST 
0x84d0x2ac: v2ac84d(0x4) = CONST 
0x84f0x2ac: v2ac84f(0xa) = CONST 
0x8510x2ac: v2ac851(0x2710) = EXP v2ac84f(0xa) v2ac84d(0x4)
0x8520x2ac: v2ac852(0x5) = CONST 
0x8540x2ac: v2ac854 = SLOAD v2ac852(0x5)
0x8550x2ac: v2ac855 = MUL v2ac854 v2ac851(0x2710)
0x8560x2ac: v2ac856(0x86a) = CONST 
0x8590x2ac: v2ac859(0x5) = CONST 
0x85b0x2ac: v2ac85b = SLOAD v2ac859(0x5)
0x85d0x2ac: v2ac85d(0xccb) = CONST 
0x8630x2ac: v2ac863(0xffffffff) = CONST 
0x8680x2ac: v2ac868(0xccb) = AND v2ac863(0xffffffff) v2ac85d(0xccb)
0x8690x2ac: v2ac869_0 = CALLPRIVATE v2ac868(0xccb) v2ac85b v2accc1_0 v2ac856(0x86a)
----------------------------------

Begin block 0x8450x82d
prev = {'0xcc20x82d'}, next = {'0x86a0x82d'}
----------------------------------
Block 0x8450x82d
0x8480x82d: v82d848(0x0) = CONST 
0x84a0x82d: v82d84a(0x876) = CONST 
0x84d0x82d: v82d84d(0x4) = CONST 
0x84f0x82d: v82d84f(0xa) = CONST 
0x8510x82d: v82d851(0x2710) = EXP v82d84f(0xa) v82d84d(0x4)
0x8520x82d: v82d852(0x5) = CONST 
0x8540x82d: v82d854 = SLOAD v82d852(0x5)
0x8550x82d: v82d855 = MUL v82d854 v82d851(0x2710)
0x8560x82d: v82d856(0x86a) = CONST 
0x8590x82d: v82d859(0x5) = CONST 
0x85b0x82d: v82d85b = SLOAD v82d859(0x5)
0x85d0x82d: v82d85d(0xccb) = CONST 
0x8630x82d: v82d863(0xffffffff) = CONST 
0x8680x82d: v82d868(0xccb) = AND v82d863(0xffffffff) v82d85d(0xccb)
0x8690x82d: v82d869_0 = CALLPRIVATE v82d868(0xccb) v82d85b v82dcc1_0 v82d856(0x86a)
----------------------------------

Begin block 0x86a0x2ac
prev = {'0x8450x2ac'}, next = {'0x8760x2ac'}
----------------------------------
Block 0x86a0x2ac
0x86c0x2ac: v2ac86c(0xffffffff) = CONST 
0x8710x2ac: v2ac871(0xcec) = CONST 
0x8740x2ac: v2ac874(0xcec) = AND v2ac871(0xcec) v2ac86c(0xffffffff)
0x8750x2ac: v2ac875_0 = CALLPRIVATE v2ac874(0xcec) v2ac855 v2ac869_0 v2ac84a(0x876)
----------------------------------

Begin block 0x86a0x82d
prev = {'0x8450x82d'}, next = {'0x8760x82d'}
----------------------------------
Block 0x86a0x82d
0x86c0x82d: v82d86c(0xffffffff) = CONST 
0x8710x82d: v82d871(0xcec) = CONST 
0x8740x82d: v82d874(0xcec) = AND v82d871(0xcec) v82d86c(0xffffffff)
0x8750x82d: v82d875_0 = CALLPRIVATE v82d874(0xcec) v82d855 v82d869_0 v82d84a(0x876)
----------------------------------

Begin block 0x8760x2ac
prev = {'0x86a0x2ac'}, next = {'0x1e40x2ac'}
----------------------------------
Block 0x8760x2ac
0x87d0x2ac: JUMP v2ba(0x1e4)
----------------------------------

Begin block 0x8760x82d
prev = {'0x86a0x82d'}, next = {}
----------------------------------
Block 0x8760x82d
0x87d0x82d: RETURNPRIVATE v82darg1 v82d875_0
----------------------------------

Begin block 0x87e
prev = {'0x2f9'}, next = {'0x1e40x2d6'}
----------------------------------
Block 0x87e
0x87f: v87f(0x8) = CONST 
0x881: v881(0x20) = CONST 
0x885: MSTORE v881(0x20) v87f(0x8)
0x886: v886(0x0) = CONST 
0x88a: MSTORE v886(0x0) v306
0x88b: v88b(0x40) = CONST 
0x88f: v88f = SHA3 v886(0x0) v88b(0x40)
0x892: MSTORE v881(0x20) v88f
0x895: MSTORE v886(0x0) v30c
0x897: v897 = SHA3 v886(0x0) v88b(0x40)
0x898: v898 = SLOAD v897
0x89a: JUMP v2e4(0x1e4)
----------------------------------

Begin block 0x89b
prev = {'0x334'}, next = {'0x1e40x311'}
----------------------------------
Block 0x89b
0x89c: v89c(0x1) = CONST 
0x89e: v89e(0x1) = CONST 
0x8a0: v8a0(0xa0) = CONST 
0x8a2: v8a2(0x10000000000000000000000000000000000000000) = SHL v8a0(0xa0) v89e(0x1)
0x8a3: v8a3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8a2(0x10000000000000000000000000000000000000000) v89c(0x1)
0x8a4: v8a4 = AND v8a3(0xffffffffffffffffffffffffffffffffffffffff) v33f
0x8a5: v8a5(0x0) = CONST 
0x8a9: MSTORE v8a5(0x0) v8a4
0x8aa: v8aa(0x7) = CONST 
0x8ac: v8ac(0x20) = CONST 
0x8ae: MSTORE v8ac(0x20) v8aa(0x7)
0x8af: v8af(0x40) = CONST 
0x8b2: v8b2 = SHA3 v8a5(0x0) v8af(0x40)
0x8b3: v8b3 = SLOAD v8b2
0x8b5: JUMP v31f(0x1e4)
----------------------------------

Begin block 0x8b6
prev = {'0x350'}, next = {'0x359'}
----------------------------------
Block 0x8b6
0x8b7: v8b7(0x0) = CONST 
0x8b9: v8b9 = SLOAD v8b7(0x0)
0x8ba: v8ba(0x1) = CONST 
0x8bc: v8bc(0x1) = CONST 
0x8be: v8be(0xa0) = CONST 
0x8c0: v8c0(0x10000000000000000000000000000000000000000) = SHL v8be(0xa0) v8bc(0x1)
0x8c1: v8c1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8c0(0x10000000000000000000000000000000000000000) v8ba(0x1)
0x8c2: v8c2 = AND v8c1(0xffffffffffffffffffffffffffffffffffffffff) v8b9
0x8c4: JUMP v352(0x359)
----------------------------------

Begin block 0x8c5
prev = {}, next = {'0x4ef0x8c5', '0x904'}
----------------------------------
function 0x8c5(v8c5arg0)
Block 0x8c5
0x8c6: v8c6(0x1) = CONST 
0x8c9: v8c9 = SLOAD v8c6(0x1)
0x8ca: v8ca(0x40) = CONST 
0x8cd: v8cd = MLOAD v8ca(0x40)
0x8ce: v8ce(0x20) = CONST 
0x8d0: v8d0(0x2) = CONST 
0x8d4: v8d4 = AND v8c6(0x1) v8c9
0x8d5: v8d5 = ISZERO v8d4
0x8d6: v8d6(0x100) = CONST 
0x8d9: v8d9 = MUL v8d6(0x100) v8d5
0x8da: v8da(0x0) = CONST 
0x8dc: v8dc(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v8da(0x0)
0x8dd: v8dd = ADD v8dc(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v8d9
0x8e0: v8e0 = AND v8c9 v8dd
0x8e4: v8e4 = DIV v8e0 v8d0(0x2)
0x8e5: v8e5(0x1f) = CONST 
0x8e8: v8e8 = ADD v8e4 v8e5(0x1f)
0x8eb: v8eb = DIV v8e8 v8ce(0x20)
0x8ed: v8ed = MUL v8ce(0x20) v8eb
0x8ef: v8ef = ADD v8cd v8ed
0x8f1: v8f1 = ADD v8ce(0x20) v8ef
0x8f4: MSTORE v8ca(0x40) v8f1
0x8f7: MSTORE v8cd v8e4
0x8fb: v8fb = ADD v8cd v8ce(0x20)
0x8ff: v8ff = ISZERO v8e4
0x900: v900(0x4ef) = CONST 
0x903: JUMPI v900(0x4ef) v8ff
----------------------------------

Begin block 0x904
prev = {'0x8c5'}, next = {'0x4c40x8c5', '0x90c'}
----------------------------------
Block 0x904
0x905: v905(0x1f) = CONST 
0x907: v907 = LT v905(0x1f) v8e4
0x908: v908(0x4c4) = CONST 
0x90b: JUMPI v908(0x4c4) v907
----------------------------------

Begin block 0x90c
prev = {'0x904'}, next = {'0x4ef0x8c5'}
----------------------------------
Block 0x90c
0x90c: v90c(0x100) = CONST 
0x911: v911 = SLOAD v8c6(0x1)
0x912: v912 = DIV v911 v90c(0x100)
0x913: v913 = MUL v912 v90c(0x100)
0x915: MSTORE v8fb v913
0x917: v917(0x20) = CONST 
0x919: v919 = ADD v917(0x20) v8fb
0x91b: v91b(0x4ef) = CONST 
0x91e: JUMP v91b(0x4ef)
----------------------------------

Begin block 0x91f
prev = {'0x3ad'}, next = {'0x934', '0x930'}
----------------------------------
Block 0x91f
0x920: v920(0x0) = CONST 
0x922: v922(0x1) = CONST 
0x924: v924(0x1) = CONST 
0x926: v926(0xa0) = CONST 
0x928: v928(0x10000000000000000000000000000000000000000) = SHL v926(0xa0) v924(0x1)
0x929: v929(0xffffffffffffffffffffffffffffffffffffffff) = SUB v928(0x10000000000000000000000000000000000000000) v922(0x1)
0x92b: v92b = AND v3b9 v929(0xffffffffffffffffffffffffffffffffffffffff)
0x92c: v92c(0x934) = CONST 
0x92f: JUMPI v92c(0x934) v92b
----------------------------------

Begin block 0x930
prev = {'0x91f'}, next = {}
----------------------------------
Block 0x930
0x930: v930(0x0) = CONST 
0x933: REVERT v930(0x0) v930(0x0)
----------------------------------

Begin block 0x934
prev = {'0x91f'}, next = {'0x94c', '0x950'}
----------------------------------
Block 0x934
0x935: v935 = CALLER 
0x936: v936(0x0) = CONST 
0x93a: MSTORE v936(0x0) v935
0x93b: v93b(0x7) = CONST 
0x93d: v93d(0x20) = CONST 
0x93f: MSTORE v93d(0x20) v93b(0x7)
0x940: v940(0x40) = CONST 
0x943: v943 = SHA3 v936(0x0) v940(0x40)
0x944: v944 = SLOAD v943
0x946: v946 = GT v3be v944
0x947: v947 = ISZERO v946
0x948: v948(0x950) = CONST 
0x94b: JUMPI v948(0x950) v947
----------------------------------

Begin block 0x94c
prev = {'0x934'}, next = {}
----------------------------------
Block 0x94c
0x94c: v94c(0x0) = CONST 
0x94f: REVERT v94c(0x0) v94c(0x0)
----------------------------------

Begin block 0x950
prev = {'0x934'}, next = {'0x970'}
----------------------------------
Block 0x950
0x951: v951 = CALLER 
0x952: v952(0x0) = CONST 
0x956: MSTORE v952(0x0) v951
0x957: v957(0x7) = CONST 
0x959: v959(0x20) = CONST 
0x95b: MSTORE v959(0x20) v957(0x7)
0x95c: v95c(0x40) = CONST 
0x95f: v95f = SHA3 v952(0x0) v95c(0x40)
0x960: v960 = SLOAD v95f
0x961: v961(0x970) = CONST 
0x966: v966(0xffffffff) = CONST 
0x96b: v96b(0xc6c) = CONST 
0x96e: v96e(0xc6c) = AND v96b(0xc6c) v966(0xffffffff)
0x96f: v96f_0 = CALLPRIVATE v96e(0xc6c) v3be v960 v961(0x970)
----------------------------------

Begin block 0x970
prev = {'0x950'}, next = {'0x98d'}
----------------------------------
Block 0x970
0x971: v971 = CALLER 
0x972: v972(0x0) = CONST 
0x976: MSTORE v972(0x0) v971
0x977: v977(0x7) = CONST 
0x979: v979(0x20) = CONST 
0x97b: MSTORE v979(0x20) v977(0x7)
0x97c: v97c(0x40) = CONST 
0x97f: v97f = SHA3 v972(0x0) v97c(0x40)
0x983: SSTORE v97f v96f_0
0x985: v985(0x98d) = CONST 
0x989: v989(0x82d) = CONST 
0x98c: v98c_0 = CALLPRIVATE v989(0x82d) v3be v985(0x98d)
----------------------------------

Begin block 0x98d
prev = {'0x970'}, next = {'0x99f'}
----------------------------------
Block 0x98d
0x990: v990(0x99f) = CONST 
0x995: v995(0xffffffff) = CONST 
0x99a: v99a(0xc81) = CONST 
0x99d: v99d(0xc81) = AND v99a(0xc81) v995(0xffffffff)
0x99e: v99e_0 = CALLPRIVATE v99d(0xc81) v98c_0 v3be v990(0x99f)
----------------------------------

Begin block 0x99f
prev = {'0x98d'}, next = {'0x9b5'}
----------------------------------
Block 0x99f
0x9a0: v9a0(0x4) = CONST 
0x9a2: v9a2 = SLOAD v9a0(0x4)
0x9a6: v9a6(0x9b5) = CONST 
0x9ab: v9ab(0xffffffff) = CONST 
0x9b0: v9b0(0xc81) = CONST 
0x9b3: v9b3(0xc81) = AND v9b0(0xc81) v9ab(0xffffffff)
0x9b4: v9b4_0 = CALLPRIVATE v9b3(0xc81) v98c_0 v9a2 v9a6(0x9b5)
----------------------------------

Begin block 0x9b5
prev = {'0x99f'}, next = {'0xa22', '0xa26'}
----------------------------------
Block 0x9b5
0x9b6: v9b6(0x4) = CONST 
0x9b8: SSTORE v9b6(0x4) v9b4_0
0x9b9: v9b9(0x40) = CONST 
0x9bc: v9bc = MLOAD v9b9(0x40)
0x9bf: MSTORE v9bc v98c_0
0x9c0: v9c0 = CALLER 
0x9c1: v9c1(0x20) = CONST 
0x9c4: v9c4 = ADD v9bc v9c1(0x20)
0x9c5: MSTORE v9c4 v9c0
0x9c6: v9c6(0x1) = CONST 
0x9c8: v9c8(0x1) = CONST 
0x9ca: v9ca(0xa0) = CONST 
0x9cc: v9cc(0x10000000000000000000000000000000000000000) = SHL v9ca(0xa0) v9c8(0x1)
0x9cd: v9cd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9cc(0x10000000000000000000000000000000000000000) v9c6(0x1)
0x9cf: v9cf = AND v3b9 v9cd(0xffffffffffffffffffffffffffffffffffffffff)
0x9d2: v9d2 = ADD v9b9(0x40) v9bc
0x9d3: MSTORE v9d2 v9cf
0x9d5: v9d5 = MLOAD v9b9(0x40)
0x9d6: v9d6(0x4c4fa1e366e2f60c4c4b018f7ab5b15419b1ad450e677587a56d922f90ba64e9) = CONST 
0x9fa: v9fa = SUB v9bc v9d5
0x9fb: v9fb(0x60) = CONST 
0x9fd: v9fd = ADD v9fb(0x60) v9fa
0x9ff: LOG1 v9d5 v9fd v9d6(0x4c4fa1e366e2f60c4c4b018f7ab5b15419b1ad450e677587a56d922f90ba64e9)
0xa00: va00(0x1) = CONST 
0xa02: va02(0x1) = CONST 
0xa04: va04(0xa0) = CONST 
0xa06: va06(0x10000000000000000000000000000000000000000) = SHL va04(0xa0) va02(0x1)
0xa07: va07(0xffffffffffffffffffffffffffffffffffffffff) = SUB va06(0x10000000000000000000000000000000000000000) va00(0x1)
0xa09: va09 = AND v3b9 va07(0xffffffffffffffffffffffffffffffffffffffff)
0xa0a: va0a(0x0) = CONST 
0xa0e: MSTORE va0a(0x0) va09
0xa0f: va0f(0x7) = CONST 
0xa11: va11(0x20) = CONST 
0xa13: MSTORE va11(0x20) va0f(0x7)
0xa14: va14(0x40) = CONST 
0xa17: va17 = SHA3 va0a(0x0) va14(0x40)
0xa18: va18 = SLOAD va17
0xa1b: va1b = ADD va18 v99e_0
0xa1c: va1c = LT va1b va18
0xa1d: va1d = ISZERO va1c
0xa1e: va1e(0xa26) = CONST 
0xa21: JUMPI va1e(0xa26) va1d
----------------------------------

Begin block 0xa22
prev = {'0x9b5'}, next = {}
----------------------------------
Block 0xa22
0xa22: va22(0x0) = CONST 
0xa25: REVERT va22(0x0) va22(0x0)
----------------------------------

Begin block 0xa26
prev = {'0x9b5'}, next = {'0xa4f'}
----------------------------------
Block 0xa26
0xa27: va27(0x1) = CONST 
0xa29: va29(0x1) = CONST 
0xa2b: va2b(0xa0) = CONST 
0xa2d: va2d(0x10000000000000000000000000000000000000000) = SHL va2b(0xa0) va29(0x1)
0xa2e: va2e(0xffffffffffffffffffffffffffffffffffffffff) = SUB va2d(0x10000000000000000000000000000000000000000) va27(0x1)
0xa30: va30 = AND v3b9 va2e(0xffffffffffffffffffffffffffffffffffffffff)
0xa31: va31(0x0) = CONST 
0xa35: MSTORE va31(0x0) va30
0xa36: va36(0x7) = CONST 
0xa38: va38(0x20) = CONST 
0xa3a: MSTORE va38(0x20) va36(0x7)
0xa3b: va3b(0x40) = CONST 
0xa3e: va3e = SHA3 va31(0x0) va3b(0x40)
0xa3f: va3f = SLOAD va3e
0xa40: va40(0xa4f) = CONST 
0xa45: va45(0xffffffff) = CONST 
0xa4a: va4a(0xc81) = CONST 
0xa4d: va4d(0xc81) = AND va4a(0xc81) va45(0xffffffff)
0xa4e: va4e_0 = CALLPRIVATE va4d(0xc81) v99e_0 va3f va40(0xa4f)
----------------------------------

Begin block 0xa4f
prev = {'0xa26'}, next = {'0x1bb0x38a'}
----------------------------------
Block 0xa4f
0xa50: va50(0x1) = CONST 
0xa52: va52(0x1) = CONST 
0xa54: va54(0xa0) = CONST 
0xa56: va56(0x10000000000000000000000000000000000000000) = SHL va54(0xa0) va52(0x1)
0xa57: va57(0xffffffffffffffffffffffffffffffffffffffff) = SUB va56(0x10000000000000000000000000000000000000000) va50(0x1)
0xa59: va59 = AND v3b9 va57(0xffffffffffffffffffffffffffffffffffffffff)
0xa5a: va5a(0x0) = CONST 
0xa5e: MSTORE va5a(0x0) va59
0xa5f: va5f(0x7) = CONST 
0xa61: va61(0x20) = CONST 
0xa65: MSTORE va61(0x20) va5f(0x7)
0xa66: va66(0x40) = CONST 
0xa6b: va6b = SHA3 va5a(0x0) va66(0x40)
0xa6f: SSTORE va6b va4e_0
0xa71: va71 = MLOAD va66(0x40)
0xa74: MSTORE va71 v99e_0
0xa76: va76 = MLOAD va66(0x40)
0xa79: va79 = CALLER 
0xa7b: va7b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xa9f: va9f = SUB va71 va76
0xaa2: vaa2 = ADD va61(0x20) va9f
0xaa4: LOG3 va76 vaa2 va7b(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) va79 va59
0xaa6: vaa6(0x1) = CONST 
0xaae: JUMP v398(0x1bb)
----------------------------------

Begin block 0xaaf
prev = {'0x3e6'}, next = {'0x1e40x3c3'}
----------------------------------
Block 0xaaf
0xab0: vab0(0x1) = CONST 
0xab2: vab2(0x1) = CONST 
0xab4: vab4(0xa0) = CONST 
0xab6: vab6(0x10000000000000000000000000000000000000000) = SHL vab4(0xa0) vab2(0x1)
0xab7: vab7(0xffffffffffffffffffffffffffffffffffffffff) = SUB vab6(0x10000000000000000000000000000000000000000) vab0(0x1)
0xaba: vaba = AND vab7(0xffffffffffffffffffffffffffffffffffffffff) v3f3
0xabb: vabb(0x0) = CONST 
0xabf: MSTORE vabb(0x0) vaba
0xac0: vac0(0x8) = CONST 
0xac2: vac2(0x20) = CONST 
0xac6: MSTORE vac2(0x20) vac0(0x8)
0xac7: vac7(0x40) = CONST 
0xacb: vacb = SHA3 vabb(0x0) vac7(0x40)
0xacf: vacf = AND vab7(0xffffffffffffffffffffffffffffffffffffffff) v3f9
0xad1: MSTORE vabb(0x0) vacf
0xad5: MSTORE vac2(0x20) vacb
0xad6: vad6 = SHA3 vabb(0x0) vac7(0x40)
0xad7: vad7 = SLOAD vad6
0xad9: JUMP v3d1(0x1e4)
----------------------------------

Begin block 0xada
prev = {'0x421'}, next = {'0xaf1', '0xaed'}
----------------------------------
Block 0xada
0xadb: vadb(0x0) = CONST 
0xadd: vadd = SLOAD vadb(0x0)
0xade: vade(0x1) = CONST 
0xae0: vae0(0x1) = CONST 
0xae2: vae2(0xa0) = CONST 
0xae4: vae4(0x10000000000000000000000000000000000000000) = SHL vae2(0xa0) vae0(0x1)
0xae5: vae5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae4(0x10000000000000000000000000000000000000000) vade(0x1)
0xae6: vae6 = AND vae5(0xffffffffffffffffffffffffffffffffffffffff) vadd
0xae7: vae7 = CALLER 
0xae8: vae8 = EQ vae7 vae6
0xae9: vae9(0xaf1) = CONST 
0xaec: JUMPI vae9(0xaf1) vae8
----------------------------------

Begin block 0xaed
prev = {'0xada'}, next = {}
----------------------------------
Block 0xaed
0xaed: vaed(0x0) = CONST 
0xaf0: REVERT vaed(0x0) vaed(0x0)
----------------------------------

Begin block 0xaf1
prev = {'0xada'}, next = {'0x4310x3fe'}
----------------------------------
Block 0xaf1
0xaf2: vaf2(0x0) = CONST 
0xaf5: vaf5 = SLOAD vaf2(0x0)
0xaf6: vaf6(0x40) = CONST 
0xaf8: vaf8 = MLOAD vaf6(0x40)
0xaf9: vaf9(0x1) = CONST 
0xafb: vafb(0x1) = CONST 
0xafd: vafd(0xa0) = CONST 
0xaff: vaff(0x10000000000000000000000000000000000000000) = SHL vafd(0xa0) vafb(0x1)
0xb00: vb00(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaff(0x10000000000000000000000000000000000000000) vaf9(0x1)
0xb03: vb03 = AND v42c vb00(0xffffffffffffffffffffffffffffffffffffffff)
0xb06: vb06 = AND vaf5 vb00(0xffffffffffffffffffffffffffffffffffffffff)
0xb08: vb08(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xb2a: LOG3 vaf8 vaf2(0x0) vb08(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vb06 vb03
0xb2b: vb2b(0x0) = CONST 
0xb2e: vb2e = SLOAD vb2b(0x0)
0xb2f: vb2f(0x1) = CONST 
0xb31: vb31(0x1) = CONST 
0xb33: vb33(0xa0) = CONST 
0xb35: vb35(0x10000000000000000000000000000000000000000) = SHL vb33(0xa0) vb31(0x1)
0xb36: vb36(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb35(0x10000000000000000000000000000000000000000) vb2f(0x1)
0xb37: vb37(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vb36(0xffffffffffffffffffffffffffffffffffffffff)
0xb38: vb38 = AND vb37(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vb2e
0xb39: vb39(0x1) = CONST 
0xb3b: vb3b(0x1) = CONST 
0xb3d: vb3d(0xa0) = CONST 
0xb3f: vb3f(0x10000000000000000000000000000000000000000) = SHL vb3d(0xa0) vb3b(0x1)
0xb40: vb40(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb3f(0x10000000000000000000000000000000000000000) vb39(0x1)
0xb44: vb44 = AND vb40(0xffffffffffffffffffffffffffffffffffffffff) v42c
0xb48: vb48 = OR vb44 vb38
0xb4a: SSTORE vb2b(0x0) vb48
0xb4b: JUMP v40c(0x431)
----------------------------------

Begin block 0xb4c
prev = {'0x456'}, next = {'0xb5f', '0xb63'}
----------------------------------
Block 0xb4c
0xb4d: vb4d(0x0) = CONST 
0xb4f: vb4f = SLOAD vb4d(0x0)
0xb50: vb50(0x1) = CONST 
0xb52: vb52(0x1) = CONST 
0xb54: vb54(0xa0) = CONST 
0xb56: vb56(0x10000000000000000000000000000000000000000) = SHL vb54(0xa0) vb52(0x1)
0xb57: vb57(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb56(0x10000000000000000000000000000000000000000) vb50(0x1)
0xb58: vb58 = AND vb57(0xffffffffffffffffffffffffffffffffffffffff) vb4f
0xb59: vb59 = CALLER 
0xb5a: vb5a = EQ vb59 vb58
0xb5b: vb5b(0xb63) = CONST 
0xb5e: JUMPI vb5b(0xb63) vb5a
----------------------------------

Begin block 0xb5f
prev = {'0xb4c'}, next = {}
----------------------------------
Block 0xb5f
0xb5f: vb5f(0x0) = CONST 
0xb62: REVERT vb5f(0x0) vb5f(0x0)
----------------------------------

Begin block 0xb63
prev = {'0xb4c'}, next = {'0xb84', '0xb88'}
----------------------------------
Block 0xb63
0xb64: vb64(0x1) = CONST 
0xb66: vb66(0x1) = CONST 
0xb68: vb68(0xa0) = CONST 
0xb6a: vb6a(0x10000000000000000000000000000000000000000) = SHL vb68(0xa0) vb66(0x1)
0xb6b: vb6b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb6a(0x10000000000000000000000000000000000000000) vb64(0x1)
0xb6d: vb6d = AND v467 vb6b(0xffffffffffffffffffffffffffffffffffffffff)
0xb6e: vb6e(0x0) = CONST 
0xb72: MSTORE vb6e(0x0) vb6d
0xb73: vb73(0x7) = CONST 
0xb75: vb75(0x20) = CONST 
0xb77: MSTORE vb75(0x20) vb73(0x7)
0xb78: vb78(0x40) = CONST 
0xb7b: vb7b = SHA3 vb6e(0x0) vb78(0x40)
0xb7c: vb7c = SLOAD vb7b
0xb7e: vb7e = GT v459 vb7c
0xb7f: vb7f = ISZERO vb7e
0xb80: vb80(0xb88) = CONST 
0xb83: JUMPI vb80(0xb88) vb7f
----------------------------------

Begin block 0xb84
prev = {'0xb63'}, next = {}
----------------------------------
Block 0xb84
0xb84: vb84(0x0) = CONST 
0xb87: REVERT vb84(0x0) vb84(0x0)
----------------------------------

Begin block 0xb88
prev = {'0xb63'}, next = {'0xbb1'}
----------------------------------
Block 0xb88
0xb89: vb89(0x1) = CONST 
0xb8b: vb8b(0x1) = CONST 
0xb8d: vb8d(0xa0) = CONST 
0xb8f: vb8f(0x10000000000000000000000000000000000000000) = SHL vb8d(0xa0) vb8b(0x1)
0xb90: vb90(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb8f(0x10000000000000000000000000000000000000000) vb89(0x1)
0xb92: vb92 = AND v467 vb90(0xffffffffffffffffffffffffffffffffffffffff)
0xb93: vb93(0x0) = CONST 
0xb97: MSTORE vb93(0x0) vb92
0xb98: vb98(0x7) = CONST 
0xb9a: vb9a(0x20) = CONST 
0xb9c: MSTORE vb9a(0x20) vb98(0x7)
0xb9d: vb9d(0x40) = CONST 
0xba0: vba0 = SHA3 vb93(0x0) vb9d(0x40)
0xba1: vba1 = SLOAD vba0
0xba2: vba2(0xbb1) = CONST 
0xba7: vba7(0xffffffff) = CONST 
0xbac: vbac(0xc6c) = CONST 
0xbaf: vbaf(0xc6c) = AND vbac(0xc6c) vba7(0xffffffff)
0xbb0: vbb0_0 = CALLPRIVATE vbaf(0xc6c) v459 vba1 vba2(0xbb1)
----------------------------------

Begin block 0xbb1
prev = {'0xb88'}, next = {'0xbdd'}
----------------------------------
Block 0xbb1
0xbb2: vbb2(0x1) = CONST 
0xbb4: vbb4(0x1) = CONST 
0xbb6: vbb6(0xa0) = CONST 
0xbb8: vbb8(0x10000000000000000000000000000000000000000) = SHL vbb6(0xa0) vbb4(0x1)
0xbb9: vbb9(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbb8(0x10000000000000000000000000000000000000000) vbb2(0x1)
0xbbb: vbbb = AND v467 vbb9(0xffffffffffffffffffffffffffffffffffffffff)
0xbbc: vbbc(0x0) = CONST 
0xbc0: MSTORE vbbc(0x0) vbbb
0xbc1: vbc1(0x7) = CONST 
0xbc3: vbc3(0x20) = CONST 
0xbc5: MSTORE vbc3(0x20) vbc1(0x7)
0xbc6: vbc6(0x40) = CONST 
0xbc9: vbc9 = SHA3 vbbc(0x0) vbc6(0x40)
0xbca: SSTORE vbc9 vbb0_0
0xbcb: vbcb(0x4) = CONST 
0xbcd: vbcd = SLOAD vbcb(0x4)
0xbce: vbce(0xbdd) = CONST 
0xbd3: vbd3(0xffffffff) = CONST 
0xbd8: vbd8(0xc6c) = CONST 
0xbdb: vbdb(0xc6c) = AND vbd8(0xc6c) vbd3(0xffffffff)
0xbdc: vbdc_0 = CALLPRIVATE vbdb(0xc6c) v459 vbcd vbce(0xbdd)
----------------------------------

Begin block 0xbdd
prev = {'0xbb1'}, next = {'0x4310x433'}
----------------------------------
Block 0xbdd
0xbde: vbde(0x4) = CONST 
0xbe0: SSTORE vbde(0x4) vbdc_0
0xbe1: vbe1(0x40) = CONST 
0xbe4: vbe4 = MLOAD vbe1(0x40)
0xbe7: MSTORE vbe4 v459
0xbe8: vbe8 = CALLER 
0xbe9: vbe9(0x20) = CONST 
0xbec: vbec = ADD vbe4 vbe9(0x20)
0xbed: MSTORE vbec vbe8
0xbee: vbee(0x1) = CONST 
0xbf0: vbf0(0x1) = CONST 
0xbf2: vbf2(0xa0) = CONST 
0xbf4: vbf4(0x10000000000000000000000000000000000000000) = SHL vbf2(0xa0) vbf0(0x1)
0xbf5: vbf5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbf4(0x10000000000000000000000000000000000000000) vbee(0x1)
0xbf7: vbf7 = AND v467 vbf5(0xffffffffffffffffffffffffffffffffffffffff)
0xbfa: vbfa = ADD vbe1(0x40) vbe4
0xbfb: MSTORE vbfa vbf7
0xbfd: vbfd = MLOAD vbe1(0x40)
0xbfe: vbfe(0x98360426e8601da793e58d23059fb0e187d79434699ff033c0f6662f7eccd35c) = CONST 
0xc22: vc22 = SUB vbe4 vbfd
0xc23: vc23(0x60) = CONST 
0xc25: vc25 = ADD vc23(0x60) vc22
0xc27: LOG1 vbfd vc25 vbfe(0x98360426e8601da793e58d23059fb0e187d79434699ff033c0f6662f7eccd35c)
0xc28: vc28(0x40) = CONST 
0xc2b: vc2b = MLOAD vc28(0x40)
0xc2e: MSTORE vc2b v459
0xc30: vc30 = MLOAD vc28(0x40)
0xc31: vc31(0x0) = CONST 
0xc34: vc34(0x1) = CONST 
0xc36: vc36(0x1) = CONST 
0xc38: vc38(0xa0) = CONST 
0xc3a: vc3a(0x10000000000000000000000000000000000000000) = SHL vc38(0xa0) vc36(0x1)
0xc3b: vc3b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc3a(0x10000000000000000000000000000000000000000) vc34(0x1)
0xc3d: vc3d = AND v467 vc3b(0xffffffffffffffffffffffffffffffffffffffff)
0xc3f: vc3f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xc63: vc63 = SUB vc2b vc30
0xc64: vc64(0x20) = CONST 
0xc66: vc66 = ADD vc64(0x20) vc63
0xc68: LOG3 vc30 vc66 vc3f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vc3d vc31(0x0)
0xc6b: JUMP v441(0x431)
----------------------------------

Begin block 0xc6c
prev = {}, next = {'0xc77', '0xc7b'}
----------------------------------
function 0xc6c(vc6carg0, vc6carg1, vc6carg2)
Block 0xc6c
0xc6d: vc6d(0x0) = CONST 
0xc71: vc71 = GT vc6carg0 vc6carg1
0xc72: vc72 = ISZERO vc71
0xc73: vc73(0xc7b) = CONST 
0xc76: JUMPI vc73(0xc7b) vc72
----------------------------------

Begin block 0xc77
prev = {'0xc6c'}, next = {}
----------------------------------
Block 0xc77
0xc77: vc77(0x0) = CONST 
0xc7a: REVERT vc77(0x0) vc77(0x0)
----------------------------------

Begin block 0xc7b
prev = {'0xc6c'}, next = {}
----------------------------------
Block 0xc7b
0xc7e: vc7e = SUB vc6carg1 vc6carg0
0xc80: RETURNPRIVATE vc6carg2 vc7e
----------------------------------

Begin block 0xc81
prev = {}, next = {'0x5c10xc81', '0xc8d'}
----------------------------------
function 0xc81(vc81arg0, vc81arg1, vc81arg2)
Block 0xc81
0xc84: vc84 = ADD vc81arg0 vc81arg1
0xc87: vc87 = LT vc84 vc81arg1
0xc88: vc88 = ISZERO vc87
0xc89: vc89(0x5c1) = CONST 
0xc8c: JUMPI vc89(0x5c1) vc88
----------------------------------

Begin block 0xc8d
prev = {'0xc81'}, next = {}
----------------------------------
Block 0xc8d
0xc8d: vc8d(0x0) = CONST 
0xc90: REVERT vc8d(0x0) vc8d(0x0)
----------------------------------

Begin block 0xc910x2ac
prev = {'0x82d0x2ac'}, next = {'0xc9e0x2ac'}
----------------------------------
Block 0xc910x2ac
0xc920x2ac: v2acc92(0x0) = CONST 
0xc950x2ac: v2acc95(0xc9e) = CONST 
0xc9a0x2ac: v2acc9a(0xc81) = CONST 
0xc9d0x2ac: v2acc9d_0 = CALLPRIVATE v2acc9a(0xc81) v2ac836 v2d1 v2acc95(0xc9e)
----------------------------------

Begin block 0xc910x82d
prev = {'0x82d'}, next = {'0xc9e0x82d'}
----------------------------------
Block 0xc910x82d
0xc920x82d: v82dc92(0x0) = CONST 
0xc950x82d: v82dc95(0xc9e) = CONST 
0xc9a0x82d: v82dc9a(0xc81) = CONST 
0xc9d0x82d: v82dc9d_0 = CALLPRIVATE v82dc9a(0xc81) v836 v82darg0 v82dc95(0xc9e)
----------------------------------

Begin block 0xc9e0x2ac
prev = {'0xc910x2ac'}, next = {'0xcad0x2ac'}
----------------------------------
Block 0xc9e0x2ac
0xca10x2ac: v2acca1(0x0) = CONST 
0xca30x2ac: v2acca3(0xcad) = CONST 
0xca70x2ac: v2acca7(0x1) = CONST 
0xca90x2ac: v2acca9(0xc6c) = CONST 
0xcac0x2ac: v2accac_0 = CALLPRIVATE v2acca9(0xc6c) v2acca7(0x1) v2acc9d_0 v2acca3(0xcad)
----------------------------------

Begin block 0xc9e0x82d
prev = {'0xc910x82d'}, next = {'0xcad0x82d'}
----------------------------------
Block 0xc9e0x82d
0xca10x82d: v82dca1(0x0) = CONST 
0xca30x82d: v82dca3(0xcad) = CONST 
0xca70x82d: v82dca7(0x1) = CONST 
0xca90x82d: v82dca9(0xc6c) = CONST 
0xcac0x82d: v82dcac_0 = CALLPRIVATE v82dca9(0xc6c) v82dca7(0x1) v82dc9d_0 v82dca3(0xcad)
----------------------------------

Begin block 0xcad0x2ac
prev = {'0xc9e0x2ac'}, next = {'0xcbc0x2ac'}
----------------------------------
Block 0xcad0x2ac
0xcb00x2ac: v2accb0(0xcc2) = CONST 
0xcb30x2ac: v2accb3(0xcbc) = CONST 
0xcb80x2ac: v2accb8(0xccb) = CONST 
0xcbb0x2ac: v2accbb_0 = CALLPRIVATE v2accb8(0xccb) v2ac836 v2accac_0 v2accb3(0xcbc)
----------------------------------

Begin block 0xcad0x82d
prev = {'0xc9e0x82d'}, next = {'0xcbc0x82d'}
----------------------------------
Block 0xcad0x82d
0xcb00x82d: v82dcb0(0xcc2) = CONST 
0xcb30x82d: v82dcb3(0xcbc) = CONST 
0xcb80x82d: v82dcb8(0xccb) = CONST 
0xcbb0x82d: v82dcbb_0 = CALLPRIVATE v82dcb8(0xccb) v836 v82dcac_0 v82dcb3(0xcbc)
----------------------------------

Begin block 0xcbc0x2ac
prev = {'0xcad0x2ac'}, next = {'0xcc20x2ac'}
----------------------------------
Block 0xcbc0x2ac
0xcbe0x2ac: v2accbe(0xcec) = CONST 
0xcc10x2ac: v2accc1_0 = CALLPRIVATE v2accbe(0xcec) v2ac836 v2accbb_0 v2accb0(0xcc2)
----------------------------------

Begin block 0xcbc0x82d
prev = {'0xcad0x82d'}, next = {'0xcc20x82d'}
----------------------------------
Block 0xcbc0x82d
0xcbe0x82d: v82dcbe(0xcec) = CONST 
0xcc10x82d: v82dcc1_0 = CALLPRIVATE v82dcbe(0xcec) v836 v82dcbb_0 v82dcb0(0xcc2)
----------------------------------

Begin block 0xcc20x2ac
prev = {'0xcbc0x2ac'}, next = {'0x8450x2ac'}
----------------------------------
Block 0xcc20x2ac
0xcca0x2ac: JUMP v2ac831(0x845)
----------------------------------

Begin block 0xcc20x82d
prev = {'0xcbc0x82d'}, next = {'0x8450x82d'}
----------------------------------
Block 0xcc20x82d
0xcca0x82d: JUMP v831(0x845)
----------------------------------

Begin block 0xccb
prev = {}, next = {'0xce3', '0xcd6'}
----------------------------------
function 0xccb(vccbarg0, vccbarg1, vccbarg2)
Block 0xccb
0xcce: vcce = MUL vccbarg0 vccbarg1
0xcd0: vcd0 = ISZERO vccbarg1
0xcd2: vcd2(0xce3) = CONST 
0xcd5: JUMPI vcd2(0xce3) vcd0
----------------------------------

Begin block 0xcd6
prev = {'0xccb'}, next = {'0xce0', '0xcdf'}
----------------------------------
Block 0xcd6
0xcdb: vcdb(0xce0) = CONST 
0xcde: JUMPI vcdb(0xce0) vccbarg1
----------------------------------

Begin block 0xcdf
prev = {'0xcd6'}, next = {}
----------------------------------
Block 0xcdf
0xcdf: THROW 
----------------------------------

Begin block 0xce0
prev = {'0xcd6'}, next = {'0xce3'}
----------------------------------
Block 0xce0
0xce1: vce1 = DIV vcce vccbarg1
0xce2: vce2 = EQ vce1 vccbarg0
----------------------------------

Begin block 0xce3
prev = {'0xce0', '0xccb'}, next = {'0x5c10xccb', '0xce8'}
----------------------------------
Block 0xce3
0xce3_0x0: vce3_0 = PHI vcd0 vce2
0xce4: vce4(0x5c1) = CONST 
0xce7: JUMPI vce4(0x5c1) vce3_0
----------------------------------

Begin block 0xce8
prev = {'0xce3'}, next = {}
----------------------------------
Block 0xce8
0xce8: vce8(0x0) = CONST 
0xceb: REVERT vce8(0x0) vce8(0x0)
----------------------------------

Begin block 0xcec
prev = {}, next = {'0xcfa', '0xcf6'}
----------------------------------
function 0xcec(vcecarg0, vcecarg1, vcecarg2)
Block 0xcec
0xced: vced(0x0) = CONST 
0xcf1: vcf1 = GT vcecarg0 vced(0x0)
0xcf2: vcf2(0xcfa) = CONST 
0xcf5: JUMPI vcf2(0xcfa) vcf1
----------------------------------

Begin block 0xcf6
prev = {'0xcec'}, next = {}
----------------------------------
Block 0xcf6
0xcf6: vcf6(0x0) = CONST 
0xcf9: REVERT vcf6(0x0) vcf6(0x0)
----------------------------------

Begin block 0xcfa
prev = {'0xcec'}, next = {'0xd03', '0xd02'}
----------------------------------
Block 0xcfa
0xcfe: vcfe(0xd03) = CONST 
0xd01: JUMPI vcfe(0xd03) vcecarg0
----------------------------------

Begin block 0xd02
prev = {'0xcfa'}, next = {}
----------------------------------
Block 0xd02
0xd02: THROW 
----------------------------------

Begin block 0xd03
prev = {'0xcfa'}, next = {}
----------------------------------
Block 0xd03
0xd04: vd04 = DIV vcecarg1 vcecarg0
0xd0a: RETURNPRIVATE vcecarg2 vd04
----------------------------------

Begin block 0xd62
prev = {'0xe8', '0x0'}, next = {'0xf30x0'}
----------------------------------
Block 0xd62
0xd63: vd63(0xf3) = CONST 
0xd64: CALLPRIVATE vd63(0xf3)
----------------------------------

Begin block 0xd65
prev = {'0xc6'}, next = {}
----------------------------------
Block 0xd65
0xd66: vd66(0xf8) = CONST 
0xd67: CALLPRIVATE vd66(0xf8)
----------------------------------

Begin block 0xd68
prev = {'0xd2'}, next = {}
----------------------------------
Block 0xd68
0xd69: vd69(0x182) = CONST 
0xd6a: CALLPRIVATE vd69(0x182)
----------------------------------

Begin block 0xd6b
prev = {'0xdd'}, next = {}
----------------------------------
Block 0xd6b
0xd6c: vd6c(0x1cf) = CONST 
0xd6d: CALLPRIVATE vd6c(0x1cf)
----------------------------------

Begin block 0xd6e
prev = {'0xe8'}, next = {}
----------------------------------
Block 0xd6e
0xd6f: vd6f(0x1f6) = CONST 
0xd70: CALLPRIVATE vd6f(0x1f6)
----------------------------------

Begin block 0xd71
prev = {'0x96'}, next = {}
----------------------------------
Block 0xd71
0xd72: vd72(0x239) = CONST 
0xd73: CALLPRIVATE vd72(0x239)
----------------------------------

Begin block 0xd74
prev = {'0xa1'}, next = {}
----------------------------------
Block 0xd74
0xd75: vd75(0x26c) = CONST 
0xd76: CALLPRIVATE vd75(0x26c)
----------------------------------

Begin block 0xd77
prev = {'0xac'}, next = {}
----------------------------------
Block 0xd77
0xd78: vd78(0x297) = CONST 
0xd79: CALLPRIVATE vd78(0x297)
----------------------------------

Begin block 0xd7a
prev = {'0xb7'}, next = {}
----------------------------------
Block 0xd7a
0xd7b: vd7b(0x2ac) = CONST 
0xd7c: CALLPRIVATE vd7b(0x2ac)
----------------------------------

Begin block 0xd7d
prev = {'0x59'}, next = {}
----------------------------------
Block 0xd7d
0xd7e: vd7e(0x2d6) = CONST 
0xd7f: CALLPRIVATE vd7e(0x2d6)
----------------------------------

Begin block 0xd80
prev = {'0x65'}, next = {}
----------------------------------
Block 0xd80
0xd81: vd81(0x311) = CONST 
0xd82: CALLPRIVATE vd81(0x311)
----------------------------------

Begin block 0xd83
prev = {'0x70'}, next = {}
----------------------------------
Block 0xd83
0xd84: vd84(0x344) = CONST 
0xd85: CALLPRIVATE vd84(0x344)
----------------------------------

Begin block 0xd86
prev = {'0x7b'}, next = {}
----------------------------------
Block 0xd86
0xd87: vd87(0x375) = CONST 
0xd88: CALLPRIVATE vd87(0x375)
----------------------------------

Begin block 0xd89
prev = {'0x29'}, next = {}
----------------------------------
Block 0xd89
0xd8a: vd8a(0x38a) = CONST 
0xd8b: CALLPRIVATE vd8a(0x38a)
----------------------------------

Begin block 0xd8c
prev = {'0x34'}, next = {}
----------------------------------
Block 0xd8c
0xd8d: vd8d(0x3c3) = CONST 
0xd8e: CALLPRIVATE vd8d(0x3c3)
----------------------------------

Begin block 0xd8f
prev = {'0x3f'}, next = {}
----------------------------------
Block 0xd8f
0xd90: vd90(0x3fe) = CONST 
0xd91: CALLPRIVATE vd90(0x3fe)
----------------------------------

Begin block 0xd92
prev = {'0x4a'}, next = {}
----------------------------------
Block 0xd92
0xd93: vd93(0x433) = CONST 
0xd94: CALLPRIVATE vd93(0x433)
----------------------------------
