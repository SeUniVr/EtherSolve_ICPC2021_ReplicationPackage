
Begin block 0x0
prev = {}, next = {'0xd', '0x705'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0x6ef: v6ef(0x705) = CONST 
0x6f0: JUMPI v6ef(0x705) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0x40', '0x708'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0x6f1: v6f1(0x708) = CONST 
0x6f2: JUMPI v6f1(0x708) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0x70b', '0x4b'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0x6f3: v6f3(0x70b) = CONST 
0x6f4: JUMPI v6f3(0x70b) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0x70e', '0x56'}
----------------------------------
Block 0x4b
0x4c: v4c(0x18160ddd) = CONST 
0x51: v51 = EQ v4c(0x18160ddd) v34
0x6f5: v6f5(0x70e) = CONST 
0x6f6: JUMPI v6f5(0x70e) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x61', '0x711'}
----------------------------------
Block 0x56
0x57: v57(0x23b872dd) = CONST 
0x5c: v5c = EQ v57(0x23b872dd) v34
0x6f7: v6f7(0x711) = CONST 
0x6f8: JUMPI v6f7(0x711) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x714', '0x6c'}
----------------------------------
Block 0x61
0x62: v62(0x313ce567) = CONST 
0x67: v67 = EQ v62(0x313ce567) v34
0x6f9: v6f9(0x714) = CONST 
0x6fa: JUMPI v6f9(0x714) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0x717', '0x77'}
----------------------------------
Block 0x6c
0x6d: v6d(0x70a08231) = CONST 
0x72: v72 = EQ v6d(0x70a08231) v34
0x6fb: v6fb(0x717) = CONST 
0x6fc: JUMPI v6fb(0x717) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0x71a', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x95d89b41) = CONST 
0x7d: v7d = EQ v78(0x95d89b41) v34
0x6fd: v6fd(0x71a) = CONST 
0x6fe: JUMPI v6fd(0x71a) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0x8d', '0x71d'}
----------------------------------
Block 0x82
0x83: v83(0xa9059cbb) = CONST 
0x88: v88 = EQ v83(0xa9059cbb) v34
0x6ff: v6ff(0x71d) = CONST 
0x700: JUMPI v6ff(0x71d) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x720', '0x98'}
----------------------------------
Block 0x8d
0x8e: v8e(0xcae9ca51) = CONST 
0x93: v93 = EQ v8e(0xcae9ca51) v34
0x701: v701(0x720) = CONST 
0x702: JUMPI v701(0x720) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0x723', '0x705'}
----------------------------------
Block 0x98
0x99: v99(0xdd62ed3e) = CONST 
0x9e: v9e = EQ v99(0xdd62ed3e) v34
0x703: v703(0x723) = CONST 
0x704: JUMPI v703(0x723) v9e
----------------------------------

Begin block 0xa3
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xa3
0xa4: va4(0x0) = CONST 
0xa7: REVERT va4(0x0) va4(0x0)
----------------------------------

Begin block 0xa8
prev = {}, next = {'0xb4', '0xb0'}
----------------------------------
function name()()
Block 0xa8
0xa9: va9 = CALLVALUE 
0xab: vab = ISZERO va9
0xac: vac(0xb4) = CONST 
0xaf: JUMPI vac(0xb4) vab
----------------------------------

Begin block 0xb0
prev = {'0xa8'}, next = {}
----------------------------------
Block 0xb0
0xb0: vb0(0x0) = CONST 
0xb3: REVERT vb0(0x0) vb0(0x0)
----------------------------------

Begin block 0xb4
prev = {'0xa8'}, next = {'0xbd0xa8'}
----------------------------------
Block 0xb4
0xb6: vb6(0xbd) = CONST 
0xb9: vb9(0x2d2) = CONST 
0xbc: vbc_0, vbc_1 = CALLPRIVATE vb9(0x2d2) vb6(0xbd)
----------------------------------

Begin block 0xbd0xa8
prev = {'0xb4'}, next = {'0xdf0xa8'}
----------------------------------
Block 0xbd0xa8
0xbe0xa8: va8be(0x40) = CONST 
0xc10xa8: va8c1 = MLOAD va8be(0x40)
0xc20xa8: va8c2(0x20) = CONST 
0xc60xa8: MSTORE va8c1 va8c2(0x20)
0xc80xa8: va8c8 = MLOAD vbc_0
0xcb0xa8: va8cb = ADD va8c1 va8c2(0x20)
0xcc0xa8: MSTORE va8cb va8c8
0xce0xa8: va8ce = MLOAD vbc_0
0xd50xa8: va8d5 = ADD va8c1 va8be(0x40)
0xd80xa8: va8d8 = ADD vbc_0 va8c2(0x20)
0xdd0xa8: va8dd(0x0) = CONST 
----------------------------------

Begin block 0xbd0x207
prev = {'0x213'}, next = {'0xdf0x207'}
----------------------------------
Block 0xbd0x207
0xbe0x207: v207be(0x40) = CONST 
0xc10x207: v207c1 = MLOAD v207be(0x40)
0xc20x207: v207c2(0x20) = CONST 
0xc60x207: MSTORE v207c1 v207c2(0x20)
0xc80x207: v207c8 = MLOAD v21b_0
0xcb0x207: v207cb = ADD v207c1 v207c2(0x20)
0xcc0x207: MSTORE v207cb v207c8
0xce0x207: v207ce = MLOAD v21b_0
0xd50x207: v207d5 = ADD v207c1 v207be(0x40)
0xd80x207: v207d8 = ADD v21b_0 v207c2(0x20)
0xdd0x207: v207dd(0x0) = CONST 
----------------------------------

Begin block 0xdf0xa8
prev = {'0xbd0xa8', '0xe80xa8'}, next = {'0xf70xa8', '0xe80xa8'}
----------------------------------
Block 0xdf0xa8
0xdf0xa8_0x0: vdfa8_0 = PHI va8dd(0x0) va8f2
0xe20xa8: va8e2 = LT vdfa8_0 va8ce
0xe30xa8: va8e3 = ISZERO va8e2
0xe40xa8: va8e4(0xf7) = CONST 
0xe70xa8: JUMPI va8e4(0xf7) va8e3
----------------------------------

Begin block 0xdf0x207
prev = {'0xe80x207', '0xbd0x207'}, next = {'0xf70x207', '0xe80x207'}
----------------------------------
Block 0xdf0x207
0xdf0x207_0x0: vdf207_0 = PHI v207dd(0x0) v207f2
0xe20x207: v207e2 = LT vdf207_0 v207ce
0xe30x207: v207e3 = ISZERO v207e2
0xe40x207: v207e4(0xf7) = CONST 
0xe70x207: JUMPI v207e4(0xf7) v207e3
----------------------------------

Begin block 0xe80xa8
prev = {'0xdf0xa8'}, next = {'0xdf0xa8'}
----------------------------------
Block 0xe80xa8
0xe80xa8_0x0: ve8a8_0 = PHI va8dd(0x0) va8f2
0xea0xa8: va8ea = ADD ve8a8_0 va8d8
0xeb0xa8: va8eb = MLOAD va8ea
0xee0xa8: va8ee = ADD ve8a8_0 va8d5
0xef0xa8: MSTORE va8ee va8eb
0xf00xa8: va8f0(0x20) = CONST 
0xf20xa8: va8f2 = ADD va8f0(0x20) ve8a8_0
0xf30xa8: va8f3(0xdf) = CONST 
0xf60xa8: JUMP va8f3(0xdf)
----------------------------------

Begin block 0xe80x207
prev = {'0xdf0x207'}, next = {'0xdf0x207'}
----------------------------------
Block 0xe80x207
0xe80x207_0x0: ve8207_0 = PHI v207dd(0x0) v207f2
0xea0x207: v207ea = ADD ve8207_0 v207d8
0xeb0x207: v207eb = MLOAD v207ea
0xee0x207: v207ee = ADD ve8207_0 v207d5
0xef0x207: MSTORE v207ee v207eb
0xf00x207: v207f0(0x20) = CONST 
0xf20x207: v207f2 = ADD v207f0(0x20) ve8207_0
0xf30x207: v207f3(0xdf) = CONST 
0xf60x207: JUMP v207f3(0xdf)
----------------------------------

Begin block 0xf70xa8
prev = {'0xdf0xa8'}, next = {'0x10b0xa8', '0x1240xa8'}
----------------------------------
Block 0xf70xa8
0x1000xa8: va8100 = ADD va8ce va8d5
0x1020xa8: va8102(0x1f) = CONST 
0x1040xa8: va8104 = AND va8102(0x1f) va8ce
0x1060xa8: va8106 = ISZERO va8104
0x1070xa8: va8107(0x124) = CONST 
0x10a0xa8: JUMPI va8107(0x124) va8106
----------------------------------

Begin block 0xf70x207
prev = {'0xdf0x207'}, next = {'0x10b0x207', '0x1240x207'}
----------------------------------
Block 0xf70x207
0x1000x207: v207100 = ADD v207ce v207d5
0x1020x207: v207102(0x1f) = CONST 
0x1040x207: v207104 = AND v207102(0x1f) v207ce
0x1060x207: v207106 = ISZERO v207104
0x1070x207: v207107(0x124) = CONST 
0x10a0x207: JUMPI v207107(0x124) v207106
----------------------------------

Begin block 0x10b0xa8
prev = {'0xf70xa8'}, next = {'0x1240xa8'}
----------------------------------
Block 0x10b0xa8
0x10d0xa8: va810d = SUB va8100 va8104
0x10f0xa8: va810f = MLOAD va810d
0x1100xa8: va8110(0x1) = CONST 
0x1130xa8: va8113(0x20) = CONST 
0x1150xa8: va8115 = SUB va8113(0x20) va8104
0x1160xa8: va8116(0x100) = CONST 
0x1190xa8: va8119 = EXP va8116(0x100) va8115
0x11a0xa8: va811a = SUB va8119 va8110(0x1)
0x11b0xa8: va811b = NOT va811a
0x11c0xa8: va811c = AND va811b va810f
0x11e0xa8: MSTORE va810d va811c
0x11f0xa8: va811f(0x20) = CONST 
0x1210xa8: va8121 = ADD va811f(0x20) va810d
----------------------------------

Begin block 0x10b0x207
prev = {'0xf70x207'}, next = {'0x1240x207'}
----------------------------------
Block 0x10b0x207
0x10d0x207: v20710d = SUB v207100 v207104
0x10f0x207: v20710f = MLOAD v20710d
0x1100x207: v207110(0x1) = CONST 
0x1130x207: v207113(0x20) = CONST 
0x1150x207: v207115 = SUB v207113(0x20) v207104
0x1160x207: v207116(0x100) = CONST 
0x1190x207: v207119 = EXP v207116(0x100) v207115
0x11a0x207: v20711a = SUB v207119 v207110(0x1)
0x11b0x207: v20711b = NOT v20711a
0x11c0x207: v20711c = AND v20711b v20710f
0x11e0x207: MSTORE v20710d v20711c
0x11f0x207: v20711f(0x20) = CONST 
0x1210x207: v207121 = ADD v20711f(0x20) v20710d
----------------------------------

Begin block 0x1240xa8
prev = {'0xf70xa8', '0x10b0xa8'}, next = {}
----------------------------------
Block 0x1240xa8
0x1240xa8_0x1: v124a8_1 = PHI va8100 va8121
0x12a0xa8: va812a(0x40) = CONST 
0x12c0xa8: va812c = MLOAD va812a(0x40)
0x12f0xa8: va812f = SUB v124a8_1 va812c
0x1310xa8: RETURN va812c va812f
----------------------------------

Begin block 0x1240x207
prev = {'0xf70x207', '0x10b0x207'}, next = {}
----------------------------------
Block 0x1240x207
0x1240x207_0x1: v124207_1 = PHI v207100 v207121
0x12a0x207: v20712a(0x40) = CONST 
0x12c0x207: v20712c = MLOAD v20712a(0x40)
0x12f0x207: v20712f = SUB v124207_1 v20712c
0x1310x207: RETURN v20712c v20712f
----------------------------------

Begin block 0x132
prev = {}, next = {'0x13a', '0x13e'}
----------------------------------
function approve(address,uint256)()
Block 0x132
0x133: v133 = CALLVALUE 
0x135: v135 = ISZERO v133
0x136: v136(0x13e) = CONST 
0x139: JUMPI v136(0x13e) v135
----------------------------------

Begin block 0x13a
prev = {'0x132'}, next = {}
----------------------------------
Block 0x13a
0x13a: v13a(0x0) = CONST 
0x13d: REVERT v13a(0x0) v13a(0x0)
----------------------------------

Begin block 0x13e
prev = {'0x132'}, next = {'0x1560x132'}
----------------------------------
Block 0x13e
0x140: v140(0x156) = CONST 
0x143: v143(0x1) = CONST 
0x145: v145(0xa0) = CONST 
0x147: v147(0x2) = CONST 
0x149: v149(0x10000000000000000000000000000000000000000) = EXP v147(0x2) v145(0xa0)
0x14a: v14a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v149(0x10000000000000000000000000000000000000000) v143(0x1)
0x14b: v14b(0x4) = CONST 
0x14d: v14d = CALLDATALOAD v14b(0x4)
0x14e: v14e = AND v14d v14a(0xffffffffffffffffffffffffffffffffffffffff)
0x14f: v14f(0x24) = CONST 
0x151: v151 = CALLDATALOAD v14f(0x24)
0x152: v152(0x360) = CONST 
0x155: v155_0 = CALLPRIVATE v152(0x360) v151 v14e v140(0x156)
----------------------------------

Begin block 0x1560x132
prev = {'0x13e'}, next = {}
----------------------------------
Block 0x1560x132
0x1570x132: v132157(0x40) = CONST 
0x15a0x132: v13215a = MLOAD v132157(0x40)
0x15c0x132: v13215c = ISZERO v155_0
0x15d0x132: v13215d = ISZERO v13215c
0x15f0x132: MSTORE v13215a v13215d
0x1600x132: v132160 = MLOAD v132157(0x40)
0x1640x132: v132164 = SUB v13215a v132160
0x1650x132: v132165(0x20) = CONST 
0x1670x132: v132167 = ADD v132165(0x20) v132164
0x1690x132: RETURN v132160 v132167
----------------------------------

Begin block 0x1560x191
prev = {'0x3f8'}, next = {}
----------------------------------
Block 0x1560x191
0x1570x191: v191157(0x40) = CONST 
0x15a0x191: v19115a = MLOAD v191157(0x40)
0x15c0x191: v19115c = ISZERO v3fa(0x1)
0x15d0x191: v19115d = ISZERO v19115c
0x15f0x191: MSTORE v19115a v19115d
0x1600x191: v191160 = MLOAD v191157(0x40)
0x1640x191: v191164 = SUB v19115a v191160
0x1650x191: v191165(0x20) = CONST 
0x1670x191: v191167 = ADD v191165(0x20) v191164
0x1690x191: RETURN v191160 v191167
----------------------------------

Begin block 0x1560x242
prev = {'0x597'}, next = {}
----------------------------------
Block 0x1560x242
0x1560x242_0x0: v156242_0 = PHI v487(0x0) v593(0x1)
0x1570x242: v242157(0x40) = CONST 
0x15a0x242: v24215a = MLOAD v242157(0x40)
0x15c0x242: v24215c = ISZERO v156242_0
0x15d0x242: v24215d = ISZERO v24215c
0x15f0x242: MSTORE v24215a v24215d
0x1600x242: v242160 = MLOAD v242157(0x40)
0x1640x242: v242164 = SUB v24215a v242160
0x1650x242: v242165(0x20) = CONST 
0x1670x242: v242167 = ADD v242165(0x20) v242164
0x1690x242: RETURN v242160 v242167
----------------------------------

Begin block 0x16a
prev = {}, next = {'0x176', '0x172'}
----------------------------------
function totalSupply()()
Block 0x16a
0x16b: v16b = CALLVALUE 
0x16d: v16d = ISZERO v16b
0x16e: v16e(0x176) = CONST 
0x171: JUMPI v16e(0x176) v16d
----------------------------------

Begin block 0x172
prev = {'0x16a'}, next = {}
----------------------------------
Block 0x172
0x172: v172(0x0) = CONST 
0x175: REVERT v172(0x0) v172(0x0)
----------------------------------

Begin block 0x176
prev = {'0x16a'}, next = {'0x38d'}
----------------------------------
Block 0x176
0x178: v178(0x17f) = CONST 
0x17b: v17b(0x38d) = CONST 
0x17e: JUMP v17b(0x38d)
----------------------------------

Begin block 0x17f0x16a
prev = {'0x38d'}, next = {}
----------------------------------
Block 0x17f0x16a
0x1800x16a: v16a180(0x40) = CONST 
0x1830x16a: v16a183 = MLOAD v16a180(0x40)
0x1860x16a: MSTORE v16a183 v390
0x1870x16a: v16a187 = MLOAD v16a180(0x40)
0x18b0x16a: v16a18b = SUB v16a183 v16a187
0x18c0x16a: v16a18c(0x20) = CONST 
0x18e0x16a: v16a18e = ADD v16a18c(0x20) v16a18b
0x1900x16a: RETURN v16a187 v16a18e
----------------------------------

Begin block 0x17f0x1e6
prev = {'0x40b'}, next = {}
----------------------------------
Block 0x17f0x1e6
0x1800x1e6: v1e6180(0x40) = CONST 
0x1830x1e6: v1e6183 = MLOAD v1e6180(0x40)
0x1860x1e6: MSTORE v1e6183 v41a
0x1870x1e6: v1e6187 = MLOAD v1e6180(0x40)
0x18b0x1e6: v1e618b = SUB v1e6183 v1e6187
0x18c0x1e6: v1e618c(0x20) = CONST 
0x18e0x1e6: v1e618e = ADD v1e618c(0x20) v1e618b
0x1900x1e6: RETURN v1e6187 v1e618e
----------------------------------

Begin block 0x17f0x2ab
prev = {'0x59f'}, next = {}
----------------------------------
Block 0x17f0x2ab
0x1800x2ab: v2ab180(0x40) = CONST 
0x1830x2ab: v2ab183 = MLOAD v2ab180(0x40)
0x1860x2ab: MSTORE v2ab183 v5b9
0x1870x2ab: v2ab187 = MLOAD v2ab180(0x40)
0x18b0x2ab: v2ab18b = SUB v2ab183 v2ab187
0x18c0x2ab: v2ab18c(0x20) = CONST 
0x18e0x2ab: v2ab18e = ADD v2ab18c(0x20) v2ab18b
0x1900x2ab: RETURN v2ab187 v2ab18e
----------------------------------

Begin block 0x191
prev = {}, next = {'0x199', '0x19d'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x191
0x192: v192 = CALLVALUE 
0x194: v194 = ISZERO v192
0x195: v195(0x19d) = CONST 
0x198: JUMPI v195(0x19d) v194
----------------------------------

Begin block 0x199
prev = {'0x191'}, next = {}
----------------------------------
Block 0x199
0x199: v199(0x0) = CONST 
0x19c: REVERT v199(0x0) v199(0x0)
----------------------------------

Begin block 0x19d
prev = {'0x191'}, next = {'0x393'}
----------------------------------
Block 0x19d
0x19f: v19f(0x156) = CONST 
0x1a2: v1a2(0x1) = CONST 
0x1a4: v1a4(0xa0) = CONST 
0x1a6: v1a6(0x2) = CONST 
0x1a8: v1a8(0x10000000000000000000000000000000000000000) = EXP v1a6(0x2) v1a4(0xa0)
0x1a9: v1a9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a8(0x10000000000000000000000000000000000000000) v1a2(0x1)
0x1aa: v1aa(0x4) = CONST 
0x1ac: v1ac = CALLDATALOAD v1aa(0x4)
0x1ae: v1ae = AND v1a9(0xffffffffffffffffffffffffffffffffffffffff) v1ac
0x1b0: v1b0(0x24) = CONST 
0x1b2: v1b2 = CALLDATALOAD v1b0(0x24)
0x1b3: v1b3 = AND v1b2 v1a9(0xffffffffffffffffffffffffffffffffffffffff)
0x1b4: v1b4(0x44) = CONST 
0x1b6: v1b6 = CALLDATALOAD v1b4(0x44)
0x1b7: v1b7(0x393) = CONST 
0x1ba: JUMP v1b7(0x393)
----------------------------------

Begin block 0x1bb
prev = {}, next = {'0x1c7', '0x1c3'}
----------------------------------
function decimals()()
Block 0x1bb
0x1bc: v1bc = CALLVALUE 
0x1be: v1be = ISZERO v1bc
0x1bf: v1bf(0x1c7) = CONST 
0x1c2: JUMPI v1bf(0x1c7) v1be
----------------------------------

Begin block 0x1c3
prev = {'0x1bb'}, next = {}
----------------------------------
Block 0x1c3
0x1c3: v1c3(0x0) = CONST 
0x1c6: REVERT v1c3(0x0) v1c3(0x0)
----------------------------------

Begin block 0x1c7
prev = {'0x1bb'}, next = {'0x402'}
----------------------------------
Block 0x1c7
0x1c9: v1c9(0x1d0) = CONST 
0x1cc: v1cc(0x402) = CONST 
0x1cf: JUMP v1cc(0x402)
----------------------------------

Begin block 0x1d0
prev = {'0x402'}, next = {}
----------------------------------
Block 0x1d0
0x1d1: v1d1(0x40) = CONST 
0x1d4: v1d4 = MLOAD v1d1(0x40)
0x1d5: v1d5(0xff) = CONST 
0x1d9: v1d9 = AND v408 v1d5(0xff)
0x1db: MSTORE v1d4 v1d9
0x1dc: v1dc = MLOAD v1d1(0x40)
0x1e0: v1e0 = SUB v1d4 v1dc
0x1e1: v1e1(0x20) = CONST 
0x1e3: v1e3 = ADD v1e1(0x20) v1e0
0x1e5: RETURN v1dc v1e3
----------------------------------

Begin block 0x1e6
prev = {}, next = {'0x1f2', '0x1ee'}
----------------------------------
function balanceOf(address)()
Block 0x1e6
0x1e7: v1e7 = CALLVALUE 
0x1e9: v1e9 = ISZERO v1e7
0x1ea: v1ea(0x1f2) = CONST 
0x1ed: JUMPI v1ea(0x1f2) v1e9
----------------------------------

Begin block 0x1ee
prev = {'0x1e6'}, next = {}
----------------------------------
Block 0x1ee
0x1ee: v1ee(0x0) = CONST 
0x1f1: REVERT v1ee(0x0) v1ee(0x0)
----------------------------------

Begin block 0x1f2
prev = {'0x1e6'}, next = {'0x40b'}
----------------------------------
Block 0x1f2
0x1f4: v1f4(0x17f) = CONST 
0x1f7: v1f7(0x1) = CONST 
0x1f9: v1f9(0xa0) = CONST 
0x1fb: v1fb(0x2) = CONST 
0x1fd: v1fd(0x10000000000000000000000000000000000000000) = EXP v1fb(0x2) v1f9(0xa0)
0x1fe: v1fe(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1fd(0x10000000000000000000000000000000000000000) v1f7(0x1)
0x1ff: v1ff(0x4) = CONST 
0x201: v201 = CALLDATALOAD v1ff(0x4)
0x202: v202 = AND v201 v1fe(0xffffffffffffffffffffffffffffffffffffffff)
0x203: v203(0x40b) = CONST 
0x206: JUMP v203(0x40b)
----------------------------------

Begin block 0x207
prev = {}, next = {'0x20f', '0x213'}
----------------------------------
function symbol()()
Block 0x207
0x208: v208 = CALLVALUE 
0x20a: v20a = ISZERO v208
0x20b: v20b(0x213) = CONST 
0x20e: JUMPI v20b(0x213) v20a
----------------------------------

Begin block 0x20f
prev = {'0x207'}, next = {}
----------------------------------
Block 0x20f
0x20f: v20f(0x0) = CONST 
0x212: REVERT v20f(0x0) v20f(0x0)
----------------------------------

Begin block 0x213
prev = {'0x207'}, next = {'0xbd0x207'}
----------------------------------
Block 0x213
0x215: v215(0xbd) = CONST 
0x218: v218(0x41d) = CONST 
0x21b: v21b_0, v21b_1 = CALLPRIVATE v218(0x41d) v215(0xbd)
----------------------------------

Begin block 0x21c
prev = {}, next = {'0x224', '0x228'}
----------------------------------
function transfer(address,uint256)()
Block 0x21c
0x21d: v21d = CALLVALUE 
0x21f: v21f = ISZERO v21d
0x220: v220(0x228) = CONST 
0x223: JUMPI v220(0x228) v21f
----------------------------------

Begin block 0x224
prev = {'0x21c'}, next = {}
----------------------------------
Block 0x224
0x224: v224(0x0) = CONST 
0x227: REVERT v224(0x0) v224(0x0)
----------------------------------

Begin block 0x228
prev = {'0x21c'}, next = {'0x477'}
----------------------------------
Block 0x228
0x22a: v22a(0x240) = CONST 
0x22d: v22d(0x1) = CONST 
0x22f: v22f(0xa0) = CONST 
0x231: v231(0x2) = CONST 
0x233: v233(0x10000000000000000000000000000000000000000) = EXP v231(0x2) v22f(0xa0)
0x234: v234(0xffffffffffffffffffffffffffffffffffffffff) = SUB v233(0x10000000000000000000000000000000000000000) v22d(0x1)
0x235: v235(0x4) = CONST 
0x237: v237 = CALLDATALOAD v235(0x4)
0x238: v238 = AND v237 v234(0xffffffffffffffffffffffffffffffffffffffff)
0x239: v239(0x24) = CONST 
0x23b: v23b = CALLDATALOAD v239(0x24)
0x23c: v23c(0x477) = CONST 
0x23f: JUMP v23c(0x477)
----------------------------------

Begin block 0x240
prev = {'0x482'}, next = {}
----------------------------------
Block 0x240
0x241: STOP 
----------------------------------

Begin block 0x242
prev = {}, next = {'0x24a', '0x24e'}
----------------------------------
function approveAndCall(address,uint256,bytes)()
Block 0x242
0x243: v243 = CALLVALUE 
0x245: v245 = ISZERO v243
0x246: v246(0x24e) = CONST 
0x249: JUMPI v246(0x24e) v245
----------------------------------

Begin block 0x24a
prev = {'0x242'}, next = {}
----------------------------------
Block 0x24a
0x24a: v24a(0x0) = CONST 
0x24d: REVERT v24a(0x0) v24a(0x0)
----------------------------------

Begin block 0x24e
prev = {'0x242'}, next = {'0x486'}
----------------------------------
Block 0x24e
0x250: v250(0x40) = CONST 
0x253: v253 = MLOAD v250(0x40)
0x254: v254(0x20) = CONST 
0x256: v256(0x4) = CONST 
0x258: v258(0x44) = CONST 
0x25a: v25a = CALLDATALOAD v258(0x44)
0x25d: v25d = ADD v25a v256(0x4)
0x25e: v25e = CALLDATALOAD v25d
0x25f: v25f(0x1f) = CONST 
0x262: v262 = ADD v25e v25f(0x1f)
0x265: v265 = DIV v262 v254(0x20)
0x267: v267 = MUL v254(0x20) v265
0x269: v269 = ADD v253 v267
0x26b: v26b = ADD v254(0x20) v269
0x26e: MSTORE v250(0x40) v26b
0x271: MSTORE v253 v25e
0x272: v272(0x156) = CONST 
0x277: v277 = CALLDATALOAD v256(0x4)
0x278: v278(0x1) = CONST 
0x27a: v27a(0xa0) = CONST 
0x27c: v27c(0x2) = CONST 
0x27e: v27e(0x10000000000000000000000000000000000000000) = EXP v27c(0x2) v27a(0xa0)
0x27f: v27f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v27e(0x10000000000000000000000000000000000000000) v278(0x1)
0x280: v280 = AND v27f(0xffffffffffffffffffffffffffffffffffffffff) v277
0x282: v282(0x24) = CONST 
0x285: v285 = CALLDATALOAD v282(0x24)
0x287: v287 = CALLDATASIZE 
0x28a: v28a(0x64) = CONST 
0x28e: v28e = ADD v282(0x24) v25a
0x294: v294 = ADD v253 v254(0x20)
0x29a: CALLDATACOPY v294 v28e v25e
0x29f: v29f(0x486) = CONST 
0x2aa: JUMP v29f(0x486)
----------------------------------

Begin block 0x2ab
prev = {}, next = {'0x2b3', '0x2b7'}
----------------------------------
function allowance(address,address)()
Block 0x2ab
0x2ac: v2ac = CALLVALUE 
0x2ae: v2ae = ISZERO v2ac
0x2af: v2af(0x2b7) = CONST 
0x2b2: JUMPI v2af(0x2b7) v2ae
----------------------------------

Begin block 0x2b3
prev = {'0x2ab'}, next = {}
----------------------------------
Block 0x2b3
0x2b3: v2b3(0x0) = CONST 
0x2b6: REVERT v2b3(0x0) v2b3(0x0)
----------------------------------

Begin block 0x2b7
prev = {'0x2ab'}, next = {'0x59f'}
----------------------------------
Block 0x2b7
0x2b9: v2b9(0x17f) = CONST 
0x2bc: v2bc(0x1) = CONST 
0x2be: v2be(0xa0) = CONST 
0x2c0: v2c0(0x2) = CONST 
0x2c2: v2c2(0x10000000000000000000000000000000000000000) = EXP v2c0(0x2) v2be(0xa0)
0x2c3: v2c3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c2(0x10000000000000000000000000000000000000000) v2bc(0x1)
0x2c4: v2c4(0x4) = CONST 
0x2c6: v2c6 = CALLDATALOAD v2c4(0x4)
0x2c8: v2c8 = AND v2c3(0xffffffffffffffffffffffffffffffffffffffff) v2c6
0x2ca: v2ca(0x24) = CONST 
0x2cc: v2cc = CALLDATALOAD v2ca(0x24)
0x2cd: v2cd = AND v2cc v2c3(0xffffffffffffffffffffffffffffffffffffffff)
0x2ce: v2ce(0x59f) = CONST 
0x2d1: JUMP v2ce(0x59f)
----------------------------------

Begin block 0x2d2
prev = {}, next = {'0x312', '0x3580x2d2'}
----------------------------------
function 0x2d2(v2d2arg0)
Block 0x2d2
0x2d3: v2d3(0x0) = CONST 
0x2d6: v2d6 = SLOAD v2d3(0x0)
0x2d7: v2d7(0x40) = CONST 
0x2da: v2da = MLOAD v2d7(0x40)
0x2db: v2db(0x20) = CONST 
0x2dd: v2dd(0x2) = CONST 
0x2df: v2df(0x1) = CONST 
0x2e2: v2e2 = AND v2d6 v2df(0x1)
0x2e3: v2e3 = ISZERO v2e2
0x2e4: v2e4(0x100) = CONST 
0x2e7: v2e7 = MUL v2e4(0x100) v2e3
0x2e8: v2e8(0x0) = CONST 
0x2ea: v2ea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v2e8(0x0)
0x2eb: v2eb = ADD v2ea(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v2e7
0x2ee: v2ee = AND v2d6 v2eb
0x2f2: v2f2 = DIV v2ee v2dd(0x2)
0x2f3: v2f3(0x1f) = CONST 
0x2f6: v2f6 = ADD v2f2 v2f3(0x1f)
0x2f9: v2f9 = DIV v2f6 v2db(0x20)
0x2fb: v2fb = MUL v2db(0x20) v2f9
0x2fd: v2fd = ADD v2da v2fb
0x2ff: v2ff = ADD v2db(0x20) v2fd
0x302: MSTORE v2d7(0x40) v2ff
0x305: MSTORE v2da v2f2
0x309: v309 = ADD v2da v2db(0x20)
0x30d: v30d = ISZERO v2f2
0x30e: v30e(0x358) = CONST 
0x311: JUMPI v30e(0x358) v30d
----------------------------------

Begin block 0x312
prev = {'0x2d2'}, next = {'0x31a', '0x32d0x2d2'}
----------------------------------
Block 0x312
0x313: v313(0x1f) = CONST 
0x315: v315 = LT v313(0x1f) v2f2
0x316: v316(0x32d) = CONST 
0x319: JUMPI v316(0x32d) v315
----------------------------------

Begin block 0x31a
prev = {'0x312'}, next = {'0x3580x2d2'}
----------------------------------
Block 0x31a
0x31a: v31a(0x100) = CONST 
0x31f: v31f = SLOAD v2d3(0x0)
0x320: v320 = DIV v31f v31a(0x100)
0x321: v321 = MUL v320 v31a(0x100)
0x323: MSTORE v309 v321
0x325: v325(0x20) = CONST 
0x327: v327 = ADD v325(0x20) v309
0x329: v329(0x358) = CONST 
0x32c: JUMP v329(0x358)
----------------------------------

Begin block 0x32d0x2d2
prev = {'0x312'}, next = {'0x33b0x2d2'}
----------------------------------
Block 0x32d0x2d2
0x32f0x2d2: v2d232f = ADD v309 v2f2
0x3320x2d2: v2d2332(0x0) = CONST 
0x3340x2d2: MSTORE v2d2332(0x0) v2d3(0x0)
0x3350x2d2: v2d2335(0x20) = CONST 
0x3370x2d2: v2d2337(0x0) = CONST 
0x3390x2d2: v2d2339 = SHA3 v2d2337(0x0) v2d2335(0x20)
----------------------------------

Begin block 0x32d0x41d
prev = {'0x45c'}, next = {'0x33b0x41d'}
----------------------------------
Block 0x32d0x41d
0x32f0x41d: v41d32f = ADD v453 v43c
0x3320x41d: v41d332(0x0) = CONST 
0x3340x41d: MSTORE v41d332(0x0) v41e(0x1)
0x3350x41d: v41d335(0x20) = CONST 
0x3370x41d: v41d337(0x0) = CONST 
0x3390x41d: v41d339 = SHA3 v41d337(0x0) v41d335(0x20)
----------------------------------

Begin block 0x33b0x2d2
prev = {'0x33b0x2d2', '0x32d0x2d2'}, next = {'0x34f0x2d2', '0x33b0x2d2'}
----------------------------------
Block 0x33b0x2d2
0x33b0x2d2_0x0: v33b2d2_0 = PHI v309 v2d2347
0x33b0x2d2_0x1: v33b2d2_1 = PHI v2d2343 v2d2339
0x33d0x2d2: v2d233d = SLOAD v33b2d2_1
0x33f0x2d2: MSTORE v33b2d2_0 v2d233d
0x3410x2d2: v2d2341(0x1) = CONST 
0x3430x2d2: v2d2343 = ADD v2d2341(0x1) v33b2d2_1
0x3450x2d2: v2d2345(0x20) = CONST 
0x3470x2d2: v2d2347 = ADD v2d2345(0x20) v33b2d2_0
0x34a0x2d2: v2d234a = GT v2d232f v2d2347
0x34b0x2d2: v2d234b(0x33b) = CONST 
0x34e0x2d2: JUMPI v2d234b(0x33b) v2d234a
----------------------------------

Begin block 0x33b0x41d
prev = {'0x33b0x41d', '0x32d0x41d'}, next = {'0x33b0x41d', '0x34f0x41d'}
----------------------------------
Block 0x33b0x41d
0x33b0x41d_0x0: v33b41d_0 = PHI v453 v41d347
0x33b0x41d_0x1: v33b41d_1 = PHI v41d343 v41d339
0x33d0x41d: v41d33d = SLOAD v33b41d_1
0x33f0x41d: MSTORE v33b41d_0 v41d33d
0x3410x41d: v41d341(0x1) = CONST 
0x3430x41d: v41d343 = ADD v41d341(0x1) v33b41d_1
0x3450x41d: v41d345(0x20) = CONST 
0x3470x41d: v41d347 = ADD v41d345(0x20) v33b41d_0
0x34a0x41d: v41d34a = GT v41d32f v41d347
0x34b0x41d: v41d34b(0x33b) = CONST 
0x34e0x41d: JUMPI v41d34b(0x33b) v41d34a
----------------------------------

Begin block 0x34f0x2d2
prev = {'0x33b0x2d2'}, next = {'0x3580x2d2'}
----------------------------------
Block 0x34f0x2d2
0x3510x2d2: v2d2351 = SUB v2d2347 v2d232f
0x3520x2d2: v2d2352(0x1f) = CONST 
0x3540x2d2: v2d2354 = AND v2d2352(0x1f) v2d2351
0x3560x2d2: v2d2356 = ADD v2d232f v2d2354
----------------------------------

Begin block 0x34f0x41d
prev = {'0x33b0x41d'}, next = {'0x3580x41d'}
----------------------------------
Block 0x34f0x41d
0x3510x41d: v41d351 = SUB v41d347 v41d32f
0x3520x41d: v41d352(0x1f) = CONST 
0x3540x41d: v41d354 = AND v41d352(0x1f) v41d351
0x3560x41d: v41d356 = ADD v41d32f v41d354
----------------------------------

Begin block 0x3580x2d2
prev = {'0x2d2', '0x31a', '0x34f0x2d2'}, next = {}
----------------------------------
Block 0x3580x2d2
0x35f0x2d2: RETURNPRIVATE v2d2arg0 v2da v2d2arg0
----------------------------------

Begin block 0x3580x41d
prev = {'0x464', '0x41d', '0x34f0x41d'}, next = {}
----------------------------------
Block 0x3580x41d
0x35f0x41d: RETURNPRIVATE v41darg0 v425 v41darg0
----------------------------------

Begin block 0x360
prev = {}, next = {}
----------------------------------
function 0x360(v360arg0, v360arg1, v360arg2)
Block 0x360
0x361: v361 = CALLER 
0x362: v362(0x0) = CONST 
0x366: MSTORE v362(0x0) v361
0x367: v367(0x5) = CONST 
0x369: v369(0x20) = CONST 
0x36d: MSTORE v369(0x20) v367(0x5)
0x36e: v36e(0x40) = CONST 
0x372: v372 = SHA3 v362(0x0) v36e(0x40)
0x373: v373(0x1) = CONST 
0x375: v375(0xa0) = CONST 
0x377: v377(0x2) = CONST 
0x379: v379(0x10000000000000000000000000000000000000000) = EXP v377(0x2) v375(0xa0)
0x37a: v37a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v379(0x10000000000000000000000000000000000000000) v373(0x1)
0x37e: v37e = AND v37a(0xffffffffffffffffffffffffffffffffffffffff) v360arg1
0x380: MSTORE v362(0x0) v37e
0x383: MSTORE v369(0x20) v372
0x387: v387 = SHA3 v362(0x0) v36e(0x40)
0x388: SSTORE v387 v360arg0
0x389: v389(0x1) = CONST 
0x38c: RETURNPRIVATE v360arg2 v389(0x1)
----------------------------------

Begin block 0x38d
prev = {'0x176'}, next = {'0x17f0x16a'}
----------------------------------
Block 0x38d
0x38e: v38e(0x3) = CONST 
0x390: v390 = SLOAD v38e(0x3)
0x392: JUMP v178(0x17f)
----------------------------------

Begin block 0x393
prev = {'0x19d'}, next = {'0x3c3', '0x3bf'}
----------------------------------
Block 0x393
0x394: v394(0x1) = CONST 
0x396: v396(0xa0) = CONST 
0x398: v398(0x2) = CONST 
0x39a: v39a(0x10000000000000000000000000000000000000000) = EXP v398(0x2) v396(0xa0)
0x39b: v39b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v39a(0x10000000000000000000000000000000000000000) v394(0x1)
0x39d: v39d = AND v1ae v39b(0xffffffffffffffffffffffffffffffffffffffff)
0x39e: v39e(0x0) = CONST 
0x3a2: MSTORE v39e(0x0) v39d
0x3a3: v3a3(0x5) = CONST 
0x3a5: v3a5(0x20) = CONST 
0x3a9: MSTORE v3a5(0x20) v3a3(0x5)
0x3aa: v3aa(0x40) = CONST 
0x3ae: v3ae = SHA3 v39e(0x0) v3aa(0x40)
0x3af: v3af = CALLER 
0x3b1: MSTORE v39e(0x0) v3af
0x3b4: MSTORE v3a5(0x20) v3ae
0x3b6: v3b6 = SHA3 v39e(0x0) v3aa(0x40)
0x3b7: v3b7 = SLOAD v3b6
0x3b9: v3b9 = GT v1b6 v3b7
0x3ba: v3ba = ISZERO v3b9
0x3bb: v3bb(0x3c3) = CONST 
0x3be: JUMPI v3bb(0x3c3) v3ba
----------------------------------

Begin block 0x3bf
prev = {'0x393'}, next = {}
----------------------------------
Block 0x3bf
0x3bf: v3bf(0x0) = CONST 
0x3c2: REVERT v3bf(0x0) v3bf(0x0)
----------------------------------

Begin block 0x3c3
prev = {'0x393'}, next = {'0x3f8'}
----------------------------------
Block 0x3c3
0x3c4: v3c4(0x1) = CONST 
0x3c6: v3c6(0xa0) = CONST 
0x3c8: v3c8(0x2) = CONST 
0x3ca: v3ca(0x10000000000000000000000000000000000000000) = EXP v3c8(0x2) v3c6(0xa0)
0x3cb: v3cb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ca(0x10000000000000000000000000000000000000000) v3c4(0x1)
0x3cd: v3cd = AND v1ae v3cb(0xffffffffffffffffffffffffffffffffffffffff)
0x3ce: v3ce(0x0) = CONST 
0x3d2: MSTORE v3ce(0x0) v3cd
0x3d3: v3d3(0x5) = CONST 
0x3d5: v3d5(0x20) = CONST 
0x3d9: MSTORE v3d5(0x20) v3d3(0x5)
0x3da: v3da(0x40) = CONST 
0x3de: v3de = SHA3 v3ce(0x0) v3da(0x40)
0x3df: v3df = CALLER 
0x3e1: MSTORE v3ce(0x0) v3df
0x3e4: MSTORE v3d5(0x20) v3de
0x3e6: v3e6 = SHA3 v3ce(0x0) v3da(0x40)
0x3e8: v3e8 = SLOAD v3e6
0x3eb: v3eb = SUB v3e8 v1b6
0x3ed: SSTORE v3e6 v3eb
0x3ee: v3ee(0x3f8) = CONST 
0x3f4: v3f4(0x5bc) = CONST 
0x3f7: CALLPRIVATE v3f4(0x5bc) v1b6 v1b3 v1ae v3ee(0x3f8)
----------------------------------

Begin block 0x3f8
prev = {'0x3c3'}, next = {'0x1560x191'}
----------------------------------
Block 0x3f8
0x3fa: v3fa(0x1) = CONST 
0x401: JUMP v19f(0x156)
----------------------------------

Begin block 0x402
prev = {'0x1c7'}, next = {'0x1d0'}
----------------------------------
Block 0x402
0x403: v403(0x2) = CONST 
0x405: v405 = SLOAD v403(0x2)
0x406: v406(0xff) = CONST 
0x408: v408 = AND v406(0xff) v405
0x40a: JUMP v1c9(0x1d0)
----------------------------------

Begin block 0x40b
prev = {'0x1f2'}, next = {'0x17f0x1e6'}
----------------------------------
Block 0x40b
0x40c: v40c(0x4) = CONST 
0x40e: v40e(0x20) = CONST 
0x410: MSTORE v40e(0x20) v40c(0x4)
0x411: v411(0x0) = CONST 
0x415: MSTORE v411(0x0) v202
0x416: v416(0x40) = CONST 
0x419: v419 = SHA3 v411(0x0) v416(0x40)
0x41a: v41a = SLOAD v419
0x41c: JUMP v1f4(0x17f)
----------------------------------

Begin block 0x41d
prev = {}, next = {'0x3580x41d', '0x45c'}
----------------------------------
function 0x41d(v41darg0)
Block 0x41d
0x41e: v41e(0x1) = CONST 
0x421: v421 = SLOAD v41e(0x1)
0x422: v422(0x40) = CONST 
0x425: v425 = MLOAD v422(0x40)
0x426: v426(0x20) = CONST 
0x428: v428(0x2) = CONST 
0x42c: v42c = AND v41e(0x1) v421
0x42d: v42d = ISZERO v42c
0x42e: v42e(0x100) = CONST 
0x431: v431 = MUL v42e(0x100) v42d
0x432: v432(0x0) = CONST 
0x434: v434(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v432(0x0)
0x435: v435 = ADD v434(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v431
0x438: v438 = AND v421 v435
0x43c: v43c = DIV v438 v428(0x2)
0x43d: v43d(0x1f) = CONST 
0x440: v440 = ADD v43c v43d(0x1f)
0x443: v443 = DIV v440 v426(0x20)
0x445: v445 = MUL v426(0x20) v443
0x447: v447 = ADD v425 v445
0x449: v449 = ADD v426(0x20) v447
0x44c: MSTORE v422(0x40) v449
0x44f: MSTORE v425 v43c
0x453: v453 = ADD v425 v426(0x20)
0x457: v457 = ISZERO v43c
0x458: v458(0x358) = CONST 
0x45b: JUMPI v458(0x358) v457
----------------------------------

Begin block 0x45c
prev = {'0x41d'}, next = {'0x464', '0x32d0x41d'}
----------------------------------
Block 0x45c
0x45d: v45d(0x1f) = CONST 
0x45f: v45f = LT v45d(0x1f) v43c
0x460: v460(0x32d) = CONST 
0x463: JUMPI v460(0x32d) v45f
----------------------------------

Begin block 0x464
prev = {'0x45c'}, next = {'0x3580x41d'}
----------------------------------
Block 0x464
0x464: v464(0x100) = CONST 
0x469: v469 = SLOAD v41e(0x1)
0x46a: v46a = DIV v469 v464(0x100)
0x46b: v46b = MUL v46a v464(0x100)
0x46d: MSTORE v453 v46b
0x46f: v46f(0x20) = CONST 
0x471: v471 = ADD v46f(0x20) v453
0x473: v473(0x358) = CONST 
0x476: JUMP v473(0x358)
----------------------------------

Begin block 0x477
prev = {'0x228'}, next = {'0x482'}
----------------------------------
Block 0x477
0x478: v478(0x482) = CONST 
0x47b: v47b = CALLER 
0x47e: v47e(0x5bc) = CONST 
0x481: CALLPRIVATE v47e(0x5bc) v23b v238 v47b v478(0x482)
----------------------------------

Begin block 0x482
prev = {'0x477'}, next = {'0x240'}
----------------------------------
Block 0x482
0x485: JUMP v22a(0x240)
----------------------------------

Begin block 0x486
prev = {'0x24e'}, next = {'0x493'}
----------------------------------
Block 0x486
0x487: v487(0x0) = CONST 
0x48a: v48a(0x493) = CONST 
0x48f: v48f(0x360) = CONST 
0x492: v492_0 = CALLPRIVATE v48f(0x360) v285 v280 v48a(0x493)
----------------------------------

Begin block 0x493
prev = {'0x486'}, next = {'0x499', '0x597'}
----------------------------------
Block 0x493
0x494: v494 = ISZERO v492_0
0x495: v495(0x597) = CONST 
0x498: JUMPI v495(0x597) v494
----------------------------------

Begin block 0x499
prev = {'0x493'}, next = {'0x513'}
----------------------------------
Block 0x499
0x499: v499(0x40) = CONST 
0x49b: v49b = MLOAD v499(0x40)
0x49c: v49c(0x8f4ffcb100000000000000000000000000000000000000000000000000000000) = CONST 
0x4be: MSTORE v49b v49c(0x8f4ffcb100000000000000000000000000000000000000000000000000000000)
0x4bf: v4bf = CALLER 
0x4c0: v4c0(0x4) = CONST 
0x4c3: v4c3 = ADD v49b v4c0(0x4)
0x4c6: MSTORE v4c3 v4bf
0x4c7: v4c7(0x24) = CONST 
0x4ca: v4ca = ADD v49b v4c7(0x24)
0x4cd: MSTORE v4ca v285
0x4ce: v4ce = ADDRESS 
0x4cf: v4cf(0x44) = CONST 
0x4d2: v4d2 = ADD v49b v4cf(0x44)
0x4d5: MSTORE v4d2 v4ce
0x4d6: v4d6(0x80) = CONST 
0x4d8: v4d8(0x64) = CONST 
0x4db: v4db = ADD v49b v4d8(0x64)
0x4de: MSTORE v4db v4d6(0x80)
0x4e0: v4e0 = MLOAD v253
0x4e1: v4e1(0x84) = CONST 
0x4e4: v4e4 = ADD v49b v4e1(0x84)
0x4e5: MSTORE v4e4 v4e0
0x4e7: v4e7 = MLOAD v253
0x4e8: v4e8(0x1) = CONST 
0x4ea: v4ea(0xa0) = CONST 
0x4ec: v4ec(0x2) = CONST 
0x4ee: v4ee(0x10000000000000000000000000000000000000000) = EXP v4ec(0x2) v4ea(0xa0)
0x4ef: v4ef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ee(0x10000000000000000000000000000000000000000) v4e8(0x1)
0x4f1: v4f1 = AND v280 v4ef(0xffffffffffffffffffffffffffffffffffffffff)
0x4f3: v4f3(0x8f4ffcb1) = CONST 
0x503: v503(0xa4) = CONST 
0x507: v507 = ADD v49b v503(0xa4)
0x509: v509(0x20) = CONST 
0x50c: v50c = ADD v253 v509(0x20)
0x511: v511(0x0) = CONST 
----------------------------------

Begin block 0x513
prev = {'0x499', '0x51c'}, next = {'0x51c', '0x52b'}
----------------------------------
Block 0x513
0x513_0x0: v513_0 = PHI v511(0x0) v526
0x516: v516 = LT v513_0 v4e7
0x517: v517 = ISZERO v516
0x518: v518(0x52b) = CONST 
0x51b: JUMPI v518(0x52b) v517
----------------------------------

Begin block 0x51c
prev = {'0x513'}, next = {'0x513'}
----------------------------------
Block 0x51c
0x51c_0x0: v51c_0 = PHI v511(0x0) v526
0x51e: v51e = ADD v51c_0 v50c
0x51f: v51f = MLOAD v51e
0x522: v522 = ADD v51c_0 v507
0x523: MSTORE v522 v51f
0x524: v524(0x20) = CONST 
0x526: v526 = ADD v524(0x20) v51c_0
0x527: v527(0x513) = CONST 
0x52a: JUMP v527(0x513)
----------------------------------

Begin block 0x52b
prev = {'0x513'}, next = {'0x53f', '0x558'}
----------------------------------
Block 0x52b
0x534: v534 = ADD v4e7 v507
0x536: v536(0x1f) = CONST 
0x538: v538 = AND v536(0x1f) v4e7
0x53a: v53a = ISZERO v538
0x53b: v53b(0x558) = CONST 
0x53e: JUMPI v53b(0x558) v53a
----------------------------------

Begin block 0x53f
prev = {'0x52b'}, next = {'0x558'}
----------------------------------
Block 0x53f
0x541: v541 = SUB v534 v538
0x543: v543 = MLOAD v541
0x544: v544(0x1) = CONST 
0x547: v547(0x20) = CONST 
0x549: v549 = SUB v547(0x20) v538
0x54a: v54a(0x100) = CONST 
0x54d: v54d = EXP v54a(0x100) v549
0x54e: v54e = SUB v54d v544(0x1)
0x54f: v54f = NOT v54e
0x550: v550 = AND v54f v543
0x552: MSTORE v541 v550
0x553: v553(0x20) = CONST 
0x555: v555 = ADD v553(0x20) v541
----------------------------------

Begin block 0x558
prev = {'0x53f', '0x52b'}, next = {'0x57a', '0x576'}
----------------------------------
Block 0x558
0x558_0x1: v558_1 = PHI v534 v555
0x561: v561(0x0) = CONST 
0x563: v563(0x40) = CONST 
0x565: v565 = MLOAD v563(0x40)
0x568: v568 = SUB v558_1 v565
0x56a: v56a(0x0) = CONST 
0x56e: v56e = EXTCODESIZE v4f1
0x56f: v56f = ISZERO v56e
0x571: v571 = ISZERO v56f
0x572: v572(0x57a) = CONST 
0x575: JUMPI v572(0x57a) v571
----------------------------------

Begin block 0x576
prev = {'0x558'}, next = {}
----------------------------------
Block 0x576
0x576: v576(0x0) = CONST 
0x579: REVERT v576(0x0) v576(0x0)
----------------------------------

Begin block 0x57a
prev = {'0x558'}, next = {'0x58e', '0x585'}
----------------------------------
Block 0x57a
0x57c: v57c = GAS 
0x57d: v57d = CALL v57c v4f1 v56a(0x0) v565 v568 v565 v561(0x0)
0x57e: v57e = ISZERO v57d
0x580: v580 = ISZERO v57e
0x581: v581(0x58e) = CONST 
0x584: JUMPI v581(0x58e) v580
----------------------------------

Begin block 0x585
prev = {'0x57a'}, next = {}
----------------------------------
Block 0x585
0x585: v585 = RETURNDATASIZE 
0x586: v586(0x0) = CONST 
0x589: RETURNDATACOPY v586(0x0) v586(0x0) v585
0x58a: v58a = RETURNDATASIZE 
0x58b: v58b(0x0) = CONST 
0x58d: REVERT v58b(0x0) v58a
----------------------------------

Begin block 0x58e
prev = {'0x57a'}, next = {'0x597'}
----------------------------------
Block 0x58e
0x593: v593(0x1) = CONST 
----------------------------------

Begin block 0x597
prev = {'0x58e', '0x493'}, next = {'0x1560x242'}
----------------------------------
Block 0x597
0x59e: JUMP v272(0x156)
----------------------------------

Begin block 0x59f
prev = {'0x2b7'}, next = {'0x17f0x2ab'}
----------------------------------
Block 0x59f
0x5a0: v5a0(0x5) = CONST 
0x5a2: v5a2(0x20) = CONST 
0x5a6: MSTORE v5a2(0x20) v5a0(0x5)
0x5a7: v5a7(0x0) = CONST 
0x5ab: MSTORE v5a7(0x0) v2c8
0x5ac: v5ac(0x40) = CONST 
0x5b0: v5b0 = SHA3 v5a7(0x0) v5ac(0x40)
0x5b3: MSTORE v5a2(0x20) v5b0
0x5b6: MSTORE v5a7(0x0) v2cd
0x5b8: v5b8 = SHA3 v5a7(0x0) v5ac(0x40)
0x5b9: v5b9 = SLOAD v5b8
0x5bb: JUMP v2b9(0x17f)
----------------------------------

Begin block 0x5bc
prev = {}, next = {'0x5d3', '0x5cf'}
----------------------------------
function 0x5bc(v5bcarg0, v5bcarg1, v5bcarg2, v5bcarg3)
Block 0x5bc
0x5bd: v5bd(0x0) = CONST 
0x5bf: v5bf(0x1) = CONST 
0x5c1: v5c1(0xa0) = CONST 
0x5c3: v5c3(0x2) = CONST 
0x5c5: v5c5(0x10000000000000000000000000000000000000000) = EXP v5c3(0x2) v5c1(0xa0)
0x5c6: v5c6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5c5(0x10000000000000000000000000000000000000000) v5bf(0x1)
0x5c8: v5c8 = AND v5bcarg1 v5c6(0xffffffffffffffffffffffffffffffffffffffff)
0x5c9: v5c9 = ISZERO v5c8
0x5ca: v5ca = ISZERO v5c9
0x5cb: v5cb(0x5d3) = CONST 
0x5ce: JUMPI v5cb(0x5d3) v5ca
----------------------------------

Begin block 0x5cf
prev = {'0x5bc'}, next = {}
----------------------------------
Block 0x5cf
0x5cf: v5cf(0x0) = CONST 
0x5d2: REVERT v5cf(0x0) v5cf(0x0)
----------------------------------

Begin block 0x5d3
prev = {'0x5bc'}, next = {'0x5f4', '0x5f8'}
----------------------------------
Block 0x5d3
0x5d4: v5d4(0x1) = CONST 
0x5d6: v5d6(0xa0) = CONST 
0x5d8: v5d8(0x2) = CONST 
0x5da: v5da(0x10000000000000000000000000000000000000000) = EXP v5d8(0x2) v5d6(0xa0)
0x5db: v5db(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5da(0x10000000000000000000000000000000000000000) v5d4(0x1)
0x5dd: v5dd = AND v5bcarg2 v5db(0xffffffffffffffffffffffffffffffffffffffff)
0x5de: v5de(0x0) = CONST 
0x5e2: MSTORE v5de(0x0) v5dd
0x5e3: v5e3(0x4) = CONST 
0x5e5: v5e5(0x20) = CONST 
0x5e7: MSTORE v5e5(0x20) v5e3(0x4)
0x5e8: v5e8(0x40) = CONST 
0x5eb: v5eb = SHA3 v5de(0x0) v5e8(0x40)
0x5ec: v5ec = SLOAD v5eb
0x5ee: v5ee = GT v5bcarg0 v5ec
0x5ef: v5ef = ISZERO v5ee
0x5f0: v5f0(0x5f8) = CONST 
0x5f3: JUMPI v5f0(0x5f8) v5ef
----------------------------------

Begin block 0x5f4
prev = {'0x5d3'}, next = {}
----------------------------------
Block 0x5f4
0x5f4: v5f4(0x0) = CONST 
0x5f7: REVERT v5f4(0x0) v5f4(0x0)
----------------------------------

Begin block 0x5f8
prev = {'0x5d3'}, next = {'0x61e', '0x61a'}
----------------------------------
Block 0x5f8
0x5f9: v5f9(0x1) = CONST 
0x5fb: v5fb(0xa0) = CONST 
0x5fd: v5fd(0x2) = CONST 
0x5ff: v5ff(0x10000000000000000000000000000000000000000) = EXP v5fd(0x2) v5fb(0xa0)
0x600: v600(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5ff(0x10000000000000000000000000000000000000000) v5f9(0x1)
0x602: v602 = AND v5bcarg1 v600(0xffffffffffffffffffffffffffffffffffffffff)
0x603: v603(0x0) = CONST 
0x607: MSTORE v603(0x0) v602
0x608: v608(0x4) = CONST 
0x60a: v60a(0x20) = CONST 
0x60c: MSTORE v60a(0x20) v608(0x4)
0x60d: v60d(0x40) = CONST 
0x610: v610 = SHA3 v603(0x0) v60d(0x40)
0x611: v611 = SLOAD v610
0x614: v614 = ADD v611 v5bcarg0
0x615: v615 = GT v614 v611
0x616: v616(0x61e) = CONST 
0x619: JUMPI v616(0x61e) v615
----------------------------------

Begin block 0x61a
prev = {'0x5f8'}, next = {}
----------------------------------
Block 0x61a
0x61a: v61a(0x0) = CONST 
0x61d: REVERT v61a(0x0) v61a(0x0)
----------------------------------

Begin block 0x61e
prev = {'0x5f8'}, next = {'0x6bd', '0x6bc'}
----------------------------------
Block 0x61e
0x620: v620(0x1) = CONST 
0x622: v622(0xa0) = CONST 
0x624: v624(0x2) = CONST 
0x626: v626(0x10000000000000000000000000000000000000000) = EXP v624(0x2) v622(0xa0)
0x627: v627(0xffffffffffffffffffffffffffffffffffffffff) = SUB v626(0x10000000000000000000000000000000000000000) v620(0x1)
0x62a: v62a = AND v5bcarg1 v627(0xffffffffffffffffffffffffffffffffffffffff)
0x62b: v62b(0x0) = CONST 
0x62f: MSTORE v62b(0x0) v62a
0x630: v630(0x4) = CONST 
0x632: v632(0x20) = CONST 
0x636: MSTORE v632(0x20) v630(0x4)
0x637: v637(0x40) = CONST 
0x63b: v63b = SHA3 v62b(0x0) v637(0x40)
0x63d: v63d = SLOAD v63b
0x640: v640 = AND v5bcarg2 v627(0xffffffffffffffffffffffffffffffffffffffff)
0x643: MSTORE v62b(0x0) v640
0x646: v646 = SHA3 v62b(0x0) v637(0x40)
0x648: v648 = SLOAD v646
0x64b: v64b = SUB v648 v5bcarg0
0x64e: SSTORE v646 v64b
0x652: MSTORE v62b(0x0) v62a
0x654: v654 = SLOAD v63b
0x656: v656 = ADD v5bcarg0 v654
0x659: SSTORE v63b v656
0x65b: v65b = MLOAD v637(0x40)
0x65e: MSTORE v65b v5bcarg0
0x660: v660 = MLOAD v637(0x40)
0x664: v664 = ADD v63d v648
0x667: v667(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x68c: v68c = SUB v65b v660
0x68f: v68f = ADD v632(0x20) v68c
0x691: LOG3 v660 v68f v667(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v640 v62a
0x692: v692(0x1) = CONST 
0x694: v694(0xa0) = CONST 
0x696: v696(0x2) = CONST 
0x698: v698(0x10000000000000000000000000000000000000000) = EXP v696(0x2) v694(0xa0)
0x699: v699(0xffffffffffffffffffffffffffffffffffffffff) = SUB v698(0x10000000000000000000000000000000000000000) v692(0x1)
0x69c: v69c = AND v5bcarg1 v699(0xffffffffffffffffffffffffffffffffffffffff)
0x69d: v69d(0x0) = CONST 
0x6a1: MSTORE v69d(0x0) v69c
0x6a2: v6a2(0x4) = CONST 
0x6a4: v6a4(0x20) = CONST 
0x6a6: MSTORE v6a4(0x20) v6a2(0x4)
0x6a7: v6a7(0x40) = CONST 
0x6ab: v6ab = SHA3 v69d(0x0) v6a7(0x40)
0x6ac: v6ac = SLOAD v6ab
0x6af: v6af = AND v5bcarg2 v699(0xffffffffffffffffffffffffffffffffffffffff)
0x6b1: MSTORE v69d(0x0) v6af
0x6b3: v6b3 = SHA3 v69d(0x0) v6a7(0x40)
0x6b4: v6b4 = SLOAD v6b3
0x6b5: v6b5 = ADD v6b4 v6ac
0x6b7: v6b7 = EQ v664 v6b5
0x6b8: v6b8(0x6bd) = CONST 
0x6bb: JUMPI v6b8(0x6bd) v6b7
----------------------------------

Begin block 0x6bc
prev = {'0x61e'}, next = {}
----------------------------------
Block 0x6bc
0x6bc: THROW 
----------------------------------

Begin block 0x6bd
prev = {'0x61e'}, next = {}
----------------------------------
Block 0x6bd
0x6c2: RETURNPRIVATE v5bcarg3
----------------------------------

Begin block 0x705
prev = {'0x98', '0x0'}, next = {}
----------------------------------
Block 0x705
0x706: v706(0xa3) = CONST 
0x707: CALLPRIVATE v706(0xa3)
----------------------------------

Begin block 0x708
prev = {'0xd'}, next = {}
----------------------------------
Block 0x708
0x709: v709(0xa8) = CONST 
0x70a: CALLPRIVATE v709(0xa8)
----------------------------------

Begin block 0x70b
prev = {'0x40'}, next = {}
----------------------------------
Block 0x70b
0x70c: v70c(0x132) = CONST 
0x70d: CALLPRIVATE v70c(0x132)
----------------------------------

Begin block 0x70e
prev = {'0x4b'}, next = {}
----------------------------------
Block 0x70e
0x70f: v70f(0x16a) = CONST 
0x710: CALLPRIVATE v70f(0x16a)
----------------------------------

Begin block 0x711
prev = {'0x56'}, next = {}
----------------------------------
Block 0x711
0x712: v712(0x191) = CONST 
0x713: CALLPRIVATE v712(0x191)
----------------------------------

Begin block 0x714
prev = {'0x61'}, next = {}
----------------------------------
Block 0x714
0x715: v715(0x1bb) = CONST 
0x716: CALLPRIVATE v715(0x1bb)
----------------------------------

Begin block 0x717
prev = {'0x6c'}, next = {}
----------------------------------
Block 0x717
0x718: v718(0x1e6) = CONST 
0x719: CALLPRIVATE v718(0x1e6)
----------------------------------

Begin block 0x71a
prev = {'0x77'}, next = {}
----------------------------------
Block 0x71a
0x71b: v71b(0x207) = CONST 
0x71c: CALLPRIVATE v71b(0x207)
----------------------------------

Begin block 0x71d
prev = {'0x82'}, next = {}
----------------------------------
Block 0x71d
0x71e: v71e(0x21c) = CONST 
0x71f: CALLPRIVATE v71e(0x21c)
----------------------------------

Begin block 0x720
prev = {'0x8d'}, next = {}
----------------------------------
Block 0x720
0x721: v721(0x242) = CONST 
0x722: CALLPRIVATE v721(0x242)
----------------------------------

Begin block 0x723
prev = {'0x98'}, next = {}
----------------------------------
Block 0x723
0x724: v724(0x2ab) = CONST 
0x725: CALLPRIVATE v724(0x2ab)
----------------------------------
