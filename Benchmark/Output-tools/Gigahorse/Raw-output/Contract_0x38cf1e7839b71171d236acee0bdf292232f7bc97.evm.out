
Begin block 0x0
prev = {}, next = {'0xf03', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xee5: vee5(0xf03) = CONST 
0xee6: JUMPI vee5(0xf03) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xf06', '0x41'}
----------------------------------
Block 0xd
0xd: vd(0x0) = CONST 
0xf: vf = CALLDATALOAD vd(0x0)
0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x2f: v2f = DIV vf v10(0x100000000000000000000000000000000000000000000000000000000)
0x30: v30(0xffffffff) = CONST 
0x35: v35 = AND v30(0xffffffff) v2f
0x37: v37(0x2d05d3f) = CONST 
0x3c: v3c = EQ v37(0x2d05d3f) v35
0xee7: vee7(0xf06) = CONST 
0xee8: JUMPI vee7(0xf06) v3c
----------------------------------

Begin block 0x41
prev = {'0xd'}, next = {'0xf09', '0x4c'}
----------------------------------
Block 0x41
0x42: v42(0xfb5a6b4) = CONST 
0x47: v47 = EQ v42(0xfb5a6b4) v35
0xee9: vee9(0xf09) = CONST 
0xeea: JUMPI vee9(0xf09) v47
----------------------------------

Begin block 0x4c
prev = {'0x41'}, next = {'0x57', '0xf0c'}
----------------------------------
Block 0x4c
0x4d: v4d(0x13d033c0) = CONST 
0x52: v52 = EQ v4d(0x13d033c0) v35
0xeeb: veeb(0xf0c) = CONST 
0xeec: JUMPI veeb(0xf0c) v52
----------------------------------

Begin block 0x57
prev = {'0x4c'}, next = {'0xf0f', '0x62'}
----------------------------------
Block 0x57
0x58: v58(0x19165587) = CONST 
0x5d: v5d = EQ v58(0x19165587) v35
0xeed: veed(0xf0f) = CONST 
0xeee: JUMPI veed(0xf0f) v5d
----------------------------------

Begin block 0x62
prev = {'0x57'}, next = {'0x6d', '0xf12'}
----------------------------------
Block 0x62
0x63: v63(0x38af3eed) = CONST 
0x68: v68 = EQ v63(0x38af3eed) v35
0xeef: veef(0xf12) = CONST 
0xef0: JUMPI veef(0xf12) v68
----------------------------------

Begin block 0x6d
prev = {'0x62'}, next = {'0x78', '0xf15'}
----------------------------------
Block 0x6d
0x6e: v6e(0x6e66f6e9) = CONST 
0x73: v73 = EQ v6e(0x6e66f6e9) v35
0xef1: vef1(0xf15) = CONST 
0xef2: JUMPI vef1(0xf15) v73
----------------------------------

Begin block 0x78
prev = {'0x6d'}, next = {'0x83', '0xf18'}
----------------------------------
Block 0x78
0x79: v79(0x715018a6) = CONST 
0x7e: v7e = EQ v79(0x715018a6) v35
0xef3: vef3(0xf18) = CONST 
0xef4: JUMPI vef3(0xf18) v7e
----------------------------------

Begin block 0x83
prev = {'0x78'}, next = {'0xf1b', '0x8e'}
----------------------------------
Block 0x83
0x84: v84(0x8da5cb5b) = CONST 
0x89: v89 = EQ v84(0x8da5cb5b) v35
0xef5: vef5(0xf1b) = CONST 
0xef6: JUMPI vef5(0xf1b) v89
----------------------------------

Begin block 0x8e
prev = {'0x83'}, next = {'0xf1e', '0x99'}
----------------------------------
Block 0x8e
0x8f: v8f(0x8f32d59b) = CONST 
0x94: v94 = EQ v8f(0x8f32d59b) v35
0xef7: vef7(0xf1e) = CONST 
0xef8: JUMPI vef7(0xf1e) v94
----------------------------------

Begin block 0x99
prev = {'0x8e'}, next = {'0xf21', '0xa4'}
----------------------------------
Block 0x99
0x9a: v9a(0x9852595c) = CONST 
0x9f: v9f = EQ v9a(0x9852595c) v35
0xef9: vef9(0xf21) = CONST 
0xefa: JUMPI vef9(0xf21) v9f
----------------------------------

Begin block 0xa4
prev = {'0x99'}, next = {'0xaf', '0xf24'}
----------------------------------
Block 0xa4
0xa5: va5(0xbe9a6555) = CONST 
0xaa: vaa = EQ va5(0xbe9a6555) v35
0xefb: vefb(0xf24) = CONST 
0xefc: JUMPI vefb(0xf24) vaa
----------------------------------

Begin block 0xaf
prev = {'0xa4'}, next = {'0xba', '0xf27'}
----------------------------------
Block 0xaf
0xb0: vb0(0xe465cd67) = CONST 
0xb5: vb5 = EQ vb0(0xe465cd67) v35
0xefd: vefd(0xf27) = CONST 
0xefe: JUMPI vefd(0xf27) vb5
----------------------------------

Begin block 0xba
prev = {'0xaf'}, next = {'0xf2a', '0xc5'}
----------------------------------
Block 0xba
0xbb: vbb(0xf2fde38b) = CONST 
0xc0: vc0 = EQ vbb(0xf2fde38b) v35
0xeff: veff(0xf2a) = CONST 
0xf00: JUMPI veff(0xf2a) vc0
----------------------------------

Begin block 0xc5
prev = {'0xba'}, next = {'0xf2d', '0xf03'}
----------------------------------
Block 0xc5
0xc6: vc6(0xff7cea35) = CONST 
0xcb: vcb = EQ vc6(0xff7cea35) v35
0xf01: vf01(0xf2d) = CONST 
0xf02: JUMPI vf01(0xf2d) vcb
----------------------------------

Begin block 0xd0
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0xd0
0xd1: vd1(0x0) = CONST 
0xd4: REVERT vd1(0x0) vd1(0x0)
----------------------------------

Begin block 0xd5
prev = {}, next = {'0xe1', '0xdd'}
----------------------------------
function creator()()
Block 0xd5
0xd6: vd6 = CALLVALUE 
0xd8: vd8 = ISZERO vd6
0xd9: vd9(0xe1) = CONST 
0xdc: JUMPI vd9(0xe1) vd8
----------------------------------

Begin block 0xdd
prev = {'0xd5'}, next = {}
----------------------------------
Block 0xdd
0xdd: vdd(0x0) = CONST 
0xe0: REVERT vdd(0x0) vdd(0x0)
----------------------------------

Begin block 0xe1
prev = {'0xd5'}, next = {'0x4ad'}
----------------------------------
Block 0xe1
0xe3: ve3(0xea) = CONST 
0xe6: ve6(0x4ad) = CONST 
0xe9: JUMP ve6(0x4ad)
----------------------------------

Begin block 0xea
prev = {'0x4ad'}, next = {}
----------------------------------
Block 0xea
0xeb: veb(0x40) = CONST 
0xed: ved = MLOAD veb(0x40)
0xf0: vf0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x105: v105 = AND vf0(0xffffffffffffffffffffffffffffffffffffffff) v4d0
0x106: v106(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x11b: v11b = AND v106(0xffffffffffffffffffffffffffffffffffffffff) v105
0x11d: MSTORE ved v11b
0x11e: v11e(0x20) = CONST 
0x120: v120 = ADD v11e(0x20) ved
0x124: v124(0x40) = CONST 
0x126: v126 = MLOAD v124(0x40)
0x129: v129 = SUB v120 v126
0x12b: RETURN v126 v129
----------------------------------

Begin block 0x12c
prev = {}, next = {'0x138', '0x134'}
----------------------------------
function duration()()
Block 0x12c
0x12d: v12d = CALLVALUE 
0x12f: v12f = ISZERO v12d
0x130: v130(0x138) = CONST 
0x133: JUMPI v130(0x138) v12f
----------------------------------

Begin block 0x134
prev = {'0x12c'}, next = {}
----------------------------------
Block 0x134
0x134: v134(0x0) = CONST 
0x137: REVERT v134(0x0) v134(0x0)
----------------------------------

Begin block 0x138
prev = {'0x12c'}, next = {'0x4d3'}
----------------------------------
Block 0x138
0x13a: v13a(0x141) = CONST 
0x13d: v13d(0x4d3) = CONST 
0x140: JUMP v13d(0x4d3)
----------------------------------

Begin block 0x141
prev = {'0x4d3'}, next = {}
----------------------------------
Block 0x141
0x142: v142(0x40) = CONST 
0x144: v144 = MLOAD v142(0x40)
0x148: MSTORE v144 v4d8
0x149: v149(0x20) = CONST 
0x14b: v14b = ADD v149(0x20) v144
0x14f: v14f(0x40) = CONST 
0x151: v151 = MLOAD v14f(0x40)
0x154: v154 = SUB v14b v151
0x156: RETURN v151 v154
----------------------------------

Begin block 0x157
prev = {}, next = {'0x163', '0x15f'}
----------------------------------
function cliff()()
Block 0x157
0x158: v158 = CALLVALUE 
0x15a: v15a = ISZERO v158
0x15b: v15b(0x163) = CONST 
0x15e: JUMPI v15b(0x163) v15a
----------------------------------

Begin block 0x15f
prev = {'0x157'}, next = {}
----------------------------------
Block 0x15f
0x15f: v15f(0x0) = CONST 
0x162: REVERT v15f(0x0) v15f(0x0)
----------------------------------

Begin block 0x163
prev = {'0x157'}, next = {'0x4dd'}
----------------------------------
Block 0x163
0x165: v165(0x16c) = CONST 
0x168: v168(0x4dd) = CONST 
0x16b: JUMP v168(0x4dd)
----------------------------------

Begin block 0x16c
prev = {'0x4dd'}, next = {}
----------------------------------
Block 0x16c
0x16d: v16d(0x40) = CONST 
0x16f: v16f = MLOAD v16d(0x40)
0x173: MSTORE v16f v4e2
0x174: v174(0x20) = CONST 
0x176: v176 = ADD v174(0x20) v16f
0x17a: v17a(0x40) = CONST 
0x17c: v17c = MLOAD v17a(0x40)
0x17f: v17f = SUB v176 v17c
0x181: RETURN v17c v17f
----------------------------------

Begin block 0x182
prev = {}, next = {'0x18e', '0x18a'}
----------------------------------
function release(address)()
Block 0x182
0x183: v183 = CALLVALUE 
0x185: v185 = ISZERO v183
0x186: v186(0x18e) = CONST 
0x189: JUMPI v186(0x18e) v185
----------------------------------

Begin block 0x18a
prev = {'0x182'}, next = {}
----------------------------------
Block 0x18a
0x18a: v18a(0x0) = CONST 
0x18d: REVERT v18a(0x0) v18a(0x0)
----------------------------------

Begin block 0x18e
prev = {'0x182'}, next = {'0x4e7'}
----------------------------------
Block 0x18e
0x190: v190(0x1c3) = CONST 
0x193: v193(0x4) = CONST 
0x196: v196 = CALLDATASIZE 
0x197: v197 = SUB v196 v193(0x4)
0x199: v199 = ADD v193(0x4) v197
0x19d: v19d = CALLDATALOAD v193(0x4)
0x19e: v19e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1b3: v1b3 = AND v19e(0xffffffffffffffffffffffffffffffffffffffff) v19d
0x1b5: v1b5(0x20) = CONST 
0x1b7: v1b7(0x24) = ADD v1b5(0x20) v193(0x4)
0x1bf: v1bf(0x4e7) = CONST 
0x1c2: JUMP v1bf(0x4e7)
----------------------------------

Begin block 0x1c3
prev = {'0x705'}, next = {}
----------------------------------
Block 0x1c3
0x1c4: STOP 
----------------------------------

Begin block 0x1c5
prev = {}, next = {'0x1d1', '0x1cd'}
----------------------------------
function beneficiary()()
Block 0x1c5
0x1c6: v1c6 = CALLVALUE 
0x1c8: v1c8 = ISZERO v1c6
0x1c9: v1c9(0x1d1) = CONST 
0x1cc: JUMPI v1c9(0x1d1) v1c8
----------------------------------

Begin block 0x1cd
prev = {'0x1c5'}, next = {}
----------------------------------
Block 0x1cd
0x1cd: v1cd(0x0) = CONST 
0x1d0: REVERT v1cd(0x0) v1cd(0x0)
----------------------------------

Begin block 0x1d1
prev = {'0x1c5'}, next = {'0x71b'}
----------------------------------
Block 0x1d1
0x1d3: v1d3(0x1da) = CONST 
0x1d6: v1d6(0x71b) = CONST 
0x1d9: JUMP v1d6(0x71b)
----------------------------------

Begin block 0x1da
prev = {'0x71b'}, next = {}
----------------------------------
Block 0x1da
0x1db: v1db(0x40) = CONST 
0x1dd: v1dd = MLOAD v1db(0x40)
0x1e0: v1e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x1f5: v1f5 = AND v1e0(0xffffffffffffffffffffffffffffffffffffffff) v740
0x1f6: v1f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x20b: v20b = AND v1f6(0xffffffffffffffffffffffffffffffffffffffff) v1f5
0x20d: MSTORE v1dd v20b
0x20e: v20e(0x20) = CONST 
0x210: v210 = ADD v20e(0x20) v1dd
0x214: v214(0x40) = CONST 
0x216: v216 = MLOAD v214(0x40)
0x219: v219 = SUB v210 v216
0x21b: RETURN v216 v219
----------------------------------

Begin block 0x21c
prev = {}, next = {'0x228', '0x224'}
----------------------------------
function tokenReward()()
Block 0x21c
0x21d: v21d = CALLVALUE 
0x21f: v21f = ISZERO v21d
0x220: v220(0x228) = CONST 
0x223: JUMPI v220(0x228) v21f
----------------------------------

Begin block 0x224
prev = {'0x21c'}, next = {}
----------------------------------
Block 0x224
0x224: v224(0x0) = CONST 
0x227: REVERT v224(0x0) v224(0x0)
----------------------------------

Begin block 0x228
prev = {'0x21c'}, next = {'0x745'}
----------------------------------
Block 0x228
0x22a: v22a(0x231) = CONST 
0x22d: v22d(0x745) = CONST 
0x230: JUMP v22d(0x745)
----------------------------------

Begin block 0x231
prev = {'0x745'}, next = {}
----------------------------------
Block 0x231
0x232: v232(0x40) = CONST 
0x234: v234 = MLOAD v232(0x40)
0x237: v237(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x24c: v24c = AND v237(0xffffffffffffffffffffffffffffffffffffffff) v768
0x24d: v24d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x262: v262 = AND v24d(0xffffffffffffffffffffffffffffffffffffffff) v24c
0x264: MSTORE v234 v262
0x265: v265(0x20) = CONST 
0x267: v267 = ADD v265(0x20) v234
0x26b: v26b(0x40) = CONST 
0x26d: v26d = MLOAD v26b(0x40)
0x270: v270 = SUB v267 v26d
0x272: RETURN v26d v270
----------------------------------

Begin block 0x273
prev = {}, next = {'0x27f', '0x27b'}
----------------------------------
function renounceOwnership()()
Block 0x273
0x274: v274 = CALLVALUE 
0x276: v276 = ISZERO v274
0x277: v277(0x27f) = CONST 
0x27a: JUMPI v277(0x27f) v276
----------------------------------

Begin block 0x27b
prev = {'0x273'}, next = {}
----------------------------------
Block 0x27b
0x27b: v27b(0x0) = CONST 
0x27e: REVERT v27b(0x0) v27b(0x0)
----------------------------------

Begin block 0x27f
prev = {'0x273'}, next = {'0x76b'}
----------------------------------
Block 0x27f
0x281: v281(0x288) = CONST 
0x284: v284(0x76b) = CONST 
0x287: JUMP v284(0x76b)
----------------------------------

Begin block 0x288
prev = {'0x77e'}, next = {}
----------------------------------
Block 0x288
0x289: STOP 
----------------------------------

Begin block 0x28a
prev = {}, next = {'0x292', '0x296'}
----------------------------------
function owner()()
Block 0x28a
0x28b: v28b = CALLVALUE 
0x28d: v28d = ISZERO v28b
0x28e: v28e(0x296) = CONST 
0x291: JUMPI v28e(0x296) v28d
----------------------------------

Begin block 0x292
prev = {'0x28a'}, next = {}
----------------------------------
Block 0x292
0x292: v292(0x0) = CONST 
0x295: REVERT v292(0x0) v292(0x0)
----------------------------------

Begin block 0x296
prev = {'0x28a'}, next = {'0x83d'}
----------------------------------
Block 0x296
0x298: v298(0x29f) = CONST 
0x29b: v29b(0x83d) = CONST 
0x29e: JUMP v29b(0x83d)
----------------------------------

Begin block 0x29f
prev = {'0x83d'}, next = {}
----------------------------------
Block 0x29f
0x2a0: v2a0(0x40) = CONST 
0x2a2: v2a2 = MLOAD v2a0(0x40)
0x2a5: v2a5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2ba: v2ba = AND v2a5(0xffffffffffffffffffffffffffffffffffffffff) v861
0x2bb: v2bb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x2d0: v2d0 = AND v2bb(0xffffffffffffffffffffffffffffffffffffffff) v2ba
0x2d2: MSTORE v2a2 v2d0
0x2d3: v2d3(0x20) = CONST 
0x2d5: v2d5 = ADD v2d3(0x20) v2a2
0x2d9: v2d9(0x40) = CONST 
0x2db: v2db = MLOAD v2d9(0x40)
0x2de: v2de = SUB v2d5 v2db
0x2e0: RETURN v2db v2de
----------------------------------

Begin block 0x2e1
prev = {}, next = {'0x2e9', '0x2ed'}
----------------------------------
function isOwner()()
Block 0x2e1
0x2e2: v2e2 = CALLVALUE 
0x2e4: v2e4 = ISZERO v2e2
0x2e5: v2e5(0x2ed) = CONST 
0x2e8: JUMPI v2e5(0x2ed) v2e4
----------------------------------

Begin block 0x2e9
prev = {'0x2e1'}, next = {}
----------------------------------
Block 0x2e9
0x2e9: v2e9(0x0) = CONST 
0x2ec: REVERT v2e9(0x0) v2e9(0x0)
----------------------------------

Begin block 0x2ed
prev = {'0x2e1'}, next = {'0x2f6'}
----------------------------------
Block 0x2ed
0x2ef: v2ef(0x2f6) = CONST 
0x2f2: v2f2(0x866) = CONST 
0x2f5: v2f5_0 = CALLPRIVATE v2f2(0x866) v2ef(0x2f6)
----------------------------------

Begin block 0x2f6
prev = {'0x2ed'}, next = {}
----------------------------------
Block 0x2f6
0x2f7: v2f7(0x40) = CONST 
0x2f9: v2f9 = MLOAD v2f7(0x40)
0x2fc: v2fc = ISZERO v2f5_0
0x2fd: v2fd = ISZERO v2fc
0x2fe: v2fe = ISZERO v2fd
0x2ff: v2ff = ISZERO v2fe
0x301: MSTORE v2f9 v2ff
0x302: v302(0x20) = CONST 
0x304: v304 = ADD v302(0x20) v2f9
0x308: v308(0x40) = CONST 
0x30a: v30a = MLOAD v308(0x40)
0x30d: v30d = SUB v304 v30a
0x30f: RETURN v30a v30d
----------------------------------

Begin block 0x310
prev = {}, next = {'0x318', '0x31c'}
----------------------------------
function released(address)()
Block 0x310
0x311: v311 = CALLVALUE 
0x313: v313 = ISZERO v311
0x314: v314(0x31c) = CONST 
0x317: JUMPI v314(0x31c) v313
----------------------------------

Begin block 0x318
prev = {'0x310'}, next = {}
----------------------------------
Block 0x318
0x318: v318(0x0) = CONST 
0x31b: REVERT v318(0x0) v318(0x0)
----------------------------------

Begin block 0x31c
prev = {'0x310'}, next = {'0x8bd'}
----------------------------------
Block 0x31c
0x31e: v31e(0x351) = CONST 
0x321: v321(0x4) = CONST 
0x324: v324 = CALLDATASIZE 
0x325: v325 = SUB v324 v321(0x4)
0x327: v327 = ADD v321(0x4) v325
0x32b: v32b = CALLDATALOAD v321(0x4)
0x32c: v32c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x341: v341 = AND v32c(0xffffffffffffffffffffffffffffffffffffffff) v32b
0x343: v343(0x20) = CONST 
0x345: v345(0x24) = ADD v343(0x20) v321(0x4)
0x34d: v34d(0x8bd) = CONST 
0x350: JUMP v34d(0x8bd)
----------------------------------

Begin block 0x351
prev = {'0x8bd'}, next = {}
----------------------------------
Block 0x351
0x352: v352(0x40) = CONST 
0x354: v354 = MLOAD v352(0x40)
0x358: MSTORE v354 v8ff
0x359: v359(0x20) = CONST 
0x35b: v35b = ADD v359(0x20) v354
0x35f: v35f(0x40) = CONST 
0x361: v361 = MLOAD v35f(0x40)
0x364: v364 = SUB v35b v361
0x366: RETURN v361 v364
----------------------------------

Begin block 0x367
prev = {}, next = {'0x36f', '0x373'}
----------------------------------
function start()()
Block 0x367
0x368: v368 = CALLVALUE 
0x36a: v36a = ISZERO v368
0x36b: v36b(0x373) = CONST 
0x36e: JUMPI v36b(0x373) v36a
----------------------------------

Begin block 0x36f
prev = {'0x367'}, next = {}
----------------------------------
Block 0x36f
0x36f: v36f(0x0) = CONST 
0x372: REVERT v36f(0x0) v36f(0x0)
----------------------------------

Begin block 0x373
prev = {'0x367'}, next = {'0x906'}
----------------------------------
Block 0x373
0x375: v375(0x37c) = CONST 
0x378: v378(0x906) = CONST 
0x37b: JUMP v378(0x906)
----------------------------------

Begin block 0x37c
prev = {'0x906'}, next = {}
----------------------------------
Block 0x37c
0x37d: v37d(0x40) = CONST 
0x37f: v37f = MLOAD v37d(0x40)
0x383: MSTORE v37f v90b
0x384: v384(0x20) = CONST 
0x386: v386 = ADD v384(0x20) v37f
0x38a: v38a(0x40) = CONST 
0x38c: v38c = MLOAD v38a(0x40)
0x38f: v38f = SUB v386 v38c
0x391: RETURN v38c v38f
----------------------------------

Begin block 0x392
prev = {}, next = {'0x39e', '0x39a'}
----------------------------------
function createVestingPeriod(address,uint256,uint256,uint256,address)()
Block 0x392
0x393: v393 = CALLVALUE 
0x395: v395 = ISZERO v393
0x396: v396(0x39e) = CONST 
0x399: JUMPI v396(0x39e) v395
----------------------------------

Begin block 0x39a
prev = {'0x392'}, next = {}
----------------------------------
Block 0x39a
0x39a: v39a(0x0) = CONST 
0x39d: REVERT v39a(0x0) v39a(0x0)
----------------------------------

Begin block 0x39e
prev = {'0x392'}, next = {'0x910'}
----------------------------------
Block 0x39e
0x3a0: v3a0(0x411) = CONST 
0x3a3: v3a3(0x4) = CONST 
0x3a6: v3a6 = CALLDATASIZE 
0x3a7: v3a7 = SUB v3a6 v3a3(0x4)
0x3a9: v3a9 = ADD v3a3(0x4) v3a7
0x3ad: v3ad = CALLDATALOAD v3a3(0x4)
0x3ae: v3ae(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x3c3: v3c3 = AND v3ae(0xffffffffffffffffffffffffffffffffffffffff) v3ad
0x3c5: v3c5(0x20) = CONST 
0x3c7: v3c7(0x24) = ADD v3c5(0x20) v3a3(0x4)
0x3cd: v3cd = CALLDATALOAD v3c7(0x24)
0x3cf: v3cf(0x20) = CONST 
0x3d1: v3d1(0x44) = ADD v3cf(0x20) v3c7(0x24)
0x3d7: v3d7 = CALLDATALOAD v3d1(0x44)
0x3d9: v3d9(0x20) = CONST 
0x3db: v3db(0x64) = ADD v3d9(0x20) v3d1(0x44)
0x3e1: v3e1 = CALLDATALOAD v3db(0x64)
0x3e3: v3e3(0x20) = CONST 
0x3e5: v3e5(0x84) = ADD v3e3(0x20) v3db(0x64)
0x3eb: v3eb = CALLDATALOAD v3e5(0x84)
0x3ec: v3ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x401: v401 = AND v3ec(0xffffffffffffffffffffffffffffffffffffffff) v3eb
0x403: v403(0x20) = CONST 
0x405: v405(0xa4) = ADD v403(0x20) v3e5(0x84)
0x40d: v40d(0x910) = CONST 
0x410: JUMP v40d(0x910)
----------------------------------

Begin block 0x411
prev = {'0xa05'}, next = {}
----------------------------------
Block 0x411
0x412: STOP 
----------------------------------

Begin block 0x413
prev = {}, next = {'0x41f', '0x41b'}
----------------------------------
function transferOwnership(address)()
Block 0x413
0x414: v414 = CALLVALUE 
0x416: v416 = ISZERO v414
0x417: v417(0x41f) = CONST 
0x41a: JUMPI v417(0x41f) v416
----------------------------------

Begin block 0x41b
prev = {'0x413'}, next = {}
----------------------------------
Block 0x41b
0x41b: v41b(0x0) = CONST 
0x41e: REVERT v41b(0x0) v41b(0x0)
----------------------------------

Begin block 0x41f
prev = {'0x413'}, next = {'0xa9b'}
----------------------------------
Block 0x41f
0x421: v421(0x454) = CONST 
0x424: v424(0x4) = CONST 
0x427: v427 = CALLDATASIZE 
0x428: v428 = SUB v427 v424(0x4)
0x42a: v42a = ADD v424(0x4) v428
0x42e: v42e = CALLDATALOAD v424(0x4)
0x42f: v42f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x444: v444 = AND v42f(0xffffffffffffffffffffffffffffffffffffffff) v42e
0x446: v446(0x20) = CONST 
0x448: v448(0x24) = ADD v446(0x20) v424(0x4)
0x450: v450(0xa9b) = CONST 
0x453: JUMP v450(0xa9b)
----------------------------------

Begin block 0x454
prev = {'0xab7'}, next = {}
----------------------------------
Block 0x454
0x455: STOP 
----------------------------------

Begin block 0x456
prev = {}, next = {'0x462', '0x45e'}
----------------------------------
function _addressOfTokenUsedAsReward()()
Block 0x456
0x457: v457 = CALLVALUE 
0x459: v459 = ISZERO v457
0x45a: v45a(0x462) = CONST 
0x45d: JUMPI v45a(0x462) v459
----------------------------------

Begin block 0x45e
prev = {'0x456'}, next = {}
----------------------------------
Block 0x45e
0x45e: v45e(0x0) = CONST 
0x461: REVERT v45e(0x0) v45e(0x0)
----------------------------------

Begin block 0x462
prev = {'0x456'}, next = {'0xaba'}
----------------------------------
Block 0x462
0x464: v464(0x46b) = CONST 
0x467: v467(0xaba) = CONST 
0x46a: JUMP v467(0xaba)
----------------------------------

Begin block 0x46b
prev = {'0xaba'}, next = {}
----------------------------------
Block 0x46b
0x46c: v46c(0x40) = CONST 
0x46e: v46e = MLOAD v46c(0x40)
0x471: v471(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x486: v486 = AND v471(0xffffffffffffffffffffffffffffffffffffffff) vadd
0x487: v487(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x49c: v49c = AND v487(0xffffffffffffffffffffffffffffffffffffffff) v486
0x49e: MSTORE v46e v49c
0x49f: v49f(0x20) = CONST 
0x4a1: v4a1 = ADD v49f(0x20) v46e
0x4a5: v4a5(0x40) = CONST 
0x4a7: v4a7 = MLOAD v4a5(0x40)
0x4aa: v4aa = SUB v4a1 v4a7
0x4ac: RETURN v4a7 v4aa
----------------------------------

Begin block 0x4ad
prev = {'0xe1'}, next = {'0xea'}
----------------------------------
Block 0x4ad
0x4ae: v4ae(0x7) = CONST 
0x4b0: v4b0(0x0) = CONST 
0x4b3: v4b3 = SLOAD v4ae(0x7)
0x4b5: v4b5(0x100) = CONST 
0x4b8: v4b8(0x1) = EXP v4b5(0x100) v4b0(0x0)
0x4ba: v4ba = DIV v4b3 v4b8(0x1)
0x4bb: v4bb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x4d0: v4d0 = AND v4bb(0xffffffffffffffffffffffffffffffffffffffff) v4ba
0x4d2: JUMP ve3(0xea)
----------------------------------

Begin block 0x4d3
prev = {'0x138'}, next = {'0x141'}
----------------------------------
Block 0x4d3
0x4d4: v4d4(0x0) = CONST 
0x4d6: v4d6(0x5) = CONST 
0x4d8: v4d8 = SLOAD v4d6(0x5)
0x4dc: JUMP v13a(0x141)
----------------------------------

Begin block 0x4dd
prev = {'0x163'}, next = {'0x16c'}
----------------------------------
Block 0x4dd
0x4de: v4de(0x0) = CONST 
0x4e0: v4e0(0x3) = CONST 
0x4e2: v4e2 = SLOAD v4e0(0x3)
0x4e6: JUMP v165(0x16c)
----------------------------------

Begin block 0x4e7
prev = {'0x18e'}, next = {'0x545', '0x541'}
----------------------------------
Block 0x4e7
0x4e8: v4e8(0x0) = CONST 
0x4ea: v4ea(0x7) = CONST 
0x4ec: v4ec(0x0) = CONST 
0x4ef: v4ef = SLOAD v4ea(0x7)
0x4f1: v4f1(0x100) = CONST 
0x4f4: v4f4(0x1) = EXP v4f1(0x100) v4ec(0x0)
0x4f6: v4f6 = DIV v4ef v4f4(0x1)
0x4f7: v4f7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x50c: v50c = AND v4f7(0xffffffffffffffffffffffffffffffffffffffff) v4f6
0x50d: v50d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x522: v522 = AND v50d(0xffffffffffffffffffffffffffffffffffffffff) v50c
0x523: v523 = CALLER 
0x524: v524(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x539: v539 = AND v524(0xffffffffffffffffffffffffffffffffffffffff) v523
0x53a: v53a = EQ v539 v522
0x53b: v53b = ISZERO v53a
0x53c: v53c = ISZERO v53b
0x53d: v53d(0x545) = CONST 
0x540: JUMPI v53d(0x545) v53c
----------------------------------

Begin block 0x541
prev = {'0x4e7'}, next = {}
----------------------------------
Block 0x541
0x541: v541(0x0) = CONST 
0x544: REVERT v541(0x0) v541(0x0)
----------------------------------

Begin block 0x545
prev = {'0x4e7'}, next = {'0xae0'}
----------------------------------
Block 0x545
0x546: v546(0x54e) = CONST 
0x54a: v54a(0xae0) = CONST 
0x54d: JUMP v54a(0xae0)
----------------------------------

Begin block 0x54e
prev = {'0xb3c'}, next = {'0x55b', '0x55f'}
----------------------------------
Block 0x54e
0x551: v551(0x0) = CONST 
0x554: v554 = GT vb3b_0 v551(0x0)
0x555: v555 = ISZERO v554
0x556: v556 = ISZERO v555
0x557: v557(0x55f) = CONST 
0x55a: JUMPI v557(0x55f) v556
----------------------------------

Begin block 0x55b
prev = {'0x54e'}, next = {}
----------------------------------
Block 0x55b
0x55b: v55b(0x0) = CONST 
0x55e: REVERT v55b(0x0) v55b(0x0)
----------------------------------

Begin block 0x55f
prev = {'0x54e'}, next = {'0x5b1'}
----------------------------------
Block 0x55f
0x560: v560(0x5b1) = CONST 
0x564: v564(0x8) = CONST 
0x566: v566(0x0) = CONST 
0x569: v569(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x57e: v57e = AND v569(0xffffffffffffffffffffffffffffffffffffffff) v1b3
0x57f: v57f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x594: v594 = AND v57f(0xffffffffffffffffffffffffffffffffffffffff) v57e
0x596: MSTORE v566(0x0) v594
0x597: v597(0x20) = CONST 
0x599: v599(0x20) = ADD v597(0x20) v566(0x0)
0x59c: MSTORE v599(0x20) v564(0x8)
0x59d: v59d(0x20) = CONST 
0x59f: v59f(0x40) = ADD v59d(0x20) v599(0x20)
0x5a0: v5a0(0x0) = CONST 
0x5a2: v5a2 = SHA3 v5a0(0x0) v59f(0x40)
0x5a3: v5a3 = SLOAD v5a2
0x5a4: v5a4(0xb43) = CONST 
0x5aa: v5aa(0xffffffff) = CONST 
0x5af: v5af(0xb43) = AND v5aa(0xffffffff) v5a4(0xb43)
0x5b0: v5b0_0 = CALLPRIVATE v5af(0xb43) vb3b_0 v5a3 v560(0x5b1)
----------------------------------

Begin block 0x5b1
prev = {'0x55f'}, next = {'0x6db', '0x6d7'}
----------------------------------
Block 0x5b1
0x5b2: v5b2(0x8) = CONST 
0x5b4: v5b4(0x0) = CONST 
0x5b7: v5b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5cc: v5cc = AND v5b7(0xffffffffffffffffffffffffffffffffffffffff) v1b3
0x5cd: v5cd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x5e2: v5e2 = AND v5cd(0xffffffffffffffffffffffffffffffffffffffff) v5cc
0x5e4: MSTORE v5b4(0x0) v5e2
0x5e5: v5e5(0x20) = CONST 
0x5e7: v5e7(0x20) = ADD v5e5(0x20) v5b4(0x0)
0x5ea: MSTORE v5e7(0x20) v5b2(0x8)
0x5eb: v5eb(0x20) = CONST 
0x5ed: v5ed(0x40) = ADD v5eb(0x20) v5e7(0x20)
0x5ee: v5ee(0x0) = CONST 
0x5f0: v5f0 = SHA3 v5ee(0x0) v5ed(0x40)
0x5f3: SSTORE v5f0 v5b0_0
0x5f5: v5f5(0x1) = CONST 
0x5f7: v5f7(0x0) = CONST 
0x5fa: v5fa = SLOAD v5f5(0x1)
0x5fc: v5fc(0x100) = CONST 
0x5ff: v5ff(0x1) = EXP v5fc(0x100) v5f7(0x0)
0x601: v601 = DIV v5fa v5ff(0x1)
0x602: v602(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x617: v617 = AND v602(0xffffffffffffffffffffffffffffffffffffffff) v601
0x618: v618(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x62d: v62d = AND v618(0xffffffffffffffffffffffffffffffffffffffff) v617
0x62e: v62e(0xa9059cbb) = CONST 
0x633: v633(0x2) = CONST 
0x635: v635(0x0) = CONST 
0x638: v638 = SLOAD v633(0x2)
0x63a: v63a(0x100) = CONST 
0x63d: v63d(0x1) = EXP v63a(0x100) v635(0x0)
0x63f: v63f = DIV v638 v63d(0x1)
0x640: v640(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x655: v655 = AND v640(0xffffffffffffffffffffffffffffffffffffffff) v63f
0x657: v657(0x40) = CONST 
0x659: v659 = MLOAD v657(0x40)
0x65b: v65b(0xffffffff) = CONST 
0x660: v660(0xa9059cbb) = AND v65b(0xffffffff) v62e(0xa9059cbb)
0x661: v661(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x67f: v67f(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = MUL v661(0x100000000000000000000000000000000000000000000000000000000) v660(0xa9059cbb)
0x681: MSTORE v659 v67f(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x682: v682(0x4) = CONST 
0x684: v684 = ADD v682(0x4) v659
0x687: v687(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x69c: v69c = AND v687(0xffffffffffffffffffffffffffffffffffffffff) v655
0x69d: v69d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x6b2: v6b2 = AND v69d(0xffffffffffffffffffffffffffffffffffffffff) v69c
0x6b4: MSTORE v684 v6b2
0x6b5: v6b5(0x20) = CONST 
0x6b7: v6b7 = ADD v6b5(0x20) v684
0x6ba: MSTORE v6b7 vb3b_0
0x6bb: v6bb(0x20) = CONST 
0x6bd: v6bd = ADD v6bb(0x20) v6b7
0x6c2: v6c2(0x20) = CONST 
0x6c4: v6c4(0x40) = CONST 
0x6c6: v6c6 = MLOAD v6c4(0x40)
0x6c9: v6c9 = SUB v6bd v6c6
0x6cb: v6cb(0x0) = CONST 
0x6cf: v6cf = EXTCODESIZE v62d
0x6d0: v6d0 = ISZERO v6cf
0x6d2: v6d2 = ISZERO v6d0
0x6d3: v6d3(0x6db) = CONST 
0x6d6: JUMPI v6d3(0x6db) v6d2
----------------------------------

Begin block 0x6d7
prev = {'0x5b1'}, next = {}
----------------------------------
Block 0x6d7
0x6d7: v6d7(0x0) = CONST 
0x6da: REVERT v6d7(0x0) v6d7(0x0)
----------------------------------

Begin block 0x6db
prev = {'0x5b1'}, next = {'0x6ef', '0x6e6'}
----------------------------------
Block 0x6db
0x6dd: v6dd = GAS 
0x6de: v6de = CALL v6dd v62d v6cb(0x0) v6c6 v6c9 v6c6 v6c2(0x20)
0x6df: v6df = ISZERO v6de
0x6e1: v6e1 = ISZERO v6df
0x6e2: v6e2(0x6ef) = CONST 
0x6e5: JUMPI v6e2(0x6ef) v6e1
----------------------------------

Begin block 0x6e6
prev = {'0x6db'}, next = {}
----------------------------------
Block 0x6e6
0x6e6: v6e6 = RETURNDATASIZE 
0x6e7: v6e7(0x0) = CONST 
0x6ea: RETURNDATACOPY v6e7(0x0) v6e7(0x0) v6e6
0x6eb: v6eb = RETURNDATASIZE 
0x6ec: v6ec(0x0) = CONST 
0x6ee: REVERT v6ec(0x0) v6eb
----------------------------------

Begin block 0x6ef
prev = {'0x6db'}, next = {'0x705', '0x701'}
----------------------------------
Block 0x6ef
0x6f4: v6f4(0x40) = CONST 
0x6f6: v6f6 = MLOAD v6f4(0x40)
0x6f7: v6f7 = RETURNDATASIZE 
0x6f8: v6f8(0x20) = CONST 
0x6fb: v6fb = LT v6f7 v6f8(0x20)
0x6fc: v6fc = ISZERO v6fb
0x6fd: v6fd(0x705) = CONST 
0x700: JUMPI v6fd(0x705) v6fc
----------------------------------

Begin block 0x701
prev = {'0x6ef'}, next = {}
----------------------------------
Block 0x701
0x701: v701(0x0) = CONST 
0x704: REVERT v701(0x0) v701(0x0)
----------------------------------

Begin block 0x705
prev = {'0x6ef'}, next = {'0x1c3'}
----------------------------------
Block 0x705
0x707: v707 = ADD v6f6 v6f7
0x70b: v70b = MLOAD v6f6
0x70d: v70d(0x20) = CONST 
0x70f: v70f = ADD v70d(0x20) v6f6
0x71a: JUMP v190(0x1c3)
----------------------------------

Begin block 0x71b
prev = {'0x1d1'}, next = {'0x1da'}
----------------------------------
Block 0x71b
0x71c: v71c(0x0) = CONST 
0x71e: v71e(0x2) = CONST 
0x720: v720(0x0) = CONST 
0x723: v723 = SLOAD v71e(0x2)
0x725: v725(0x100) = CONST 
0x728: v728(0x1) = EXP v725(0x100) v720(0x0)
0x72a: v72a = DIV v723 v728(0x1)
0x72b: v72b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x740: v740 = AND v72b(0xffffffffffffffffffffffffffffffffffffffff) v72a
0x744: JUMP v1d3(0x1da)
----------------------------------

Begin block 0x745
prev = {'0x228'}, next = {'0x231'}
----------------------------------
Block 0x745
0x746: v746(0x1) = CONST 
0x748: v748(0x0) = CONST 
0x74b: v74b = SLOAD v746(0x1)
0x74d: v74d(0x100) = CONST 
0x750: v750(0x1) = EXP v74d(0x100) v748(0x0)
0x752: v752 = DIV v74b v750(0x1)
0x753: v753(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x768: v768 = AND v753(0xffffffffffffffffffffffffffffffffffffffff) v752
0x76a: JUMP v22a(0x231)
----------------------------------

Begin block 0x76b
prev = {'0x27f'}, next = {'0x773'}
----------------------------------
Block 0x76b
0x76c: v76c(0x773) = CONST 
0x76f: v76f(0x866) = CONST 
0x772: v772_0 = CALLPRIVATE v76f(0x866) v76c(0x773)
----------------------------------

Begin block 0x773
prev = {'0x76b'}, next = {'0x77e', '0x77a'}
----------------------------------
Block 0x773
0x774: v774 = ISZERO v772_0
0x775: v775 = ISZERO v774
0x776: v776(0x77e) = CONST 
0x779: JUMPI v776(0x77e) v775
----------------------------------

Begin block 0x77a
prev = {'0x773'}, next = {}
----------------------------------
Block 0x77a
0x77a: v77a(0x0) = CONST 
0x77d: REVERT v77a(0x0) v77a(0x0)
----------------------------------

Begin block 0x77e
prev = {'0x773'}, next = {'0x288'}
----------------------------------
Block 0x77e
0x77f: v77f(0x0) = CONST 
0x781: v781(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x796: v796(0x0) = AND v781(0xffffffffffffffffffffffffffffffffffffffff) v77f(0x0)
0x797: v797(0x0) = CONST 
0x79b: v79b = SLOAD v797(0x0)
0x79d: v79d(0x100) = CONST 
0x7a0: v7a0(0x1) = EXP v79d(0x100) v797(0x0)
0x7a2: v7a2 = DIV v79b v7a0(0x1)
0x7a3: v7a3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7b8: v7b8 = AND v7a3(0xffffffffffffffffffffffffffffffffffffffff) v7a2
0x7b9: v7b9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x7ce: v7ce = AND v7b9(0xffffffffffffffffffffffffffffffffffffffff) v7b8
0x7cf: v7cf(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0x7f0: v7f0(0x40) = CONST 
0x7f2: v7f2 = MLOAD v7f0(0x40)
0x7f3: v7f3(0x40) = CONST 
0x7f5: v7f5 = MLOAD v7f3(0x40)
0x7f8: v7f8 = SUB v7f2 v7f5
0x7fa: LOG3 v7f5 v7f8 v7cf(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) v7ce v796(0x0)
0x7fb: v7fb(0x0) = CONST 
0x7fe: v7fe(0x0) = CONST 
0x800: v800(0x100) = CONST 
0x803: v803(0x1) = EXP v800(0x100) v7fe(0x0)
0x805: v805 = SLOAD v7fb(0x0)
0x807: v807(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x81c: v81c(0xffffffffffffffffffffffffffffffffffffffff) = MUL v807(0xffffffffffffffffffffffffffffffffffffffff) v803(0x1)
0x81d: v81d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v81c(0xffffffffffffffffffffffffffffffffffffffff)
0x81e: v81e = AND v81d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v805
0x821: v821(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x836: v836(0x0) = AND v821(0xffffffffffffffffffffffffffffffffffffffff) v7fb(0x0)
0x837: v837(0x0) = MUL v836(0x0) v803(0x1)
0x838: v838 = OR v837(0x0) v81e
0x83a: SSTORE v7fb(0x0) v838
0x83c: JUMP v281(0x288)
----------------------------------

Begin block 0x83d
prev = {'0x296'}, next = {'0x29f'}
----------------------------------
Block 0x83d
0x83e: v83e(0x0) = CONST 
0x841: v841(0x0) = CONST 
0x844: v844 = SLOAD v83e(0x0)
0x846: v846(0x100) = CONST 
0x849: v849(0x1) = EXP v846(0x100) v841(0x0)
0x84b: v84b = DIV v844 v849(0x1)
0x84c: v84c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x861: v861 = AND v84c(0xffffffffffffffffffffffffffffffffffffffff) v84b
0x865: JUMP v298(0x29f)
----------------------------------

Begin block 0x866
prev = {}, next = {}
----------------------------------
function 0x866(v866arg0)
Block 0x866
0x867: v867(0x0) = CONST 
0x86a: v86a(0x0) = CONST 
0x86d: v86d = SLOAD v867(0x0)
0x86f: v86f(0x100) = CONST 
0x872: v872(0x1) = EXP v86f(0x100) v86a(0x0)
0x874: v874 = DIV v86d v872(0x1)
0x875: v875(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x88a: v88a = AND v875(0xffffffffffffffffffffffffffffffffffffffff) v874
0x88b: v88b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8a0: v8a0 = AND v88b(0xffffffffffffffffffffffffffffffffffffffff) v88a
0x8a1: v8a1 = CALLER 
0x8a2: v8a2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8b7: v8b7 = AND v8a2(0xffffffffffffffffffffffffffffffffffffffff) v8a1
0x8b8: v8b8 = EQ v8b7 v8a0
0x8bc: RETURNPRIVATE v866arg0 v8b8
----------------------------------

Begin block 0x8bd
prev = {'0x31c'}, next = {'0x351'}
----------------------------------
Block 0x8bd
0x8be: v8be(0x0) = CONST 
0x8c0: v8c0(0x8) = CONST 
0x8c2: v8c2(0x0) = CONST 
0x8c5: v8c5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8da: v8da = AND v8c5(0xffffffffffffffffffffffffffffffffffffffff) v341
0x8db: v8db(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x8f0: v8f0 = AND v8db(0xffffffffffffffffffffffffffffffffffffffff) v8da
0x8f2: MSTORE v8c2(0x0) v8f0
0x8f3: v8f3(0x20) = CONST 
0x8f5: v8f5(0x20) = ADD v8f3(0x20) v8c2(0x0)
0x8f8: MSTORE v8f5(0x20) v8c0(0x8)
0x8f9: v8f9(0x20) = CONST 
0x8fb: v8fb(0x40) = ADD v8f9(0x20) v8f5(0x20)
0x8fc: v8fc(0x0) = CONST 
0x8fe: v8fe = SHA3 v8fc(0x0) v8fb(0x40)
0x8ff: v8ff = SLOAD v8fe
0x905: JUMP v31e(0x351)
----------------------------------

Begin block 0x906
prev = {'0x373'}, next = {'0x37c'}
----------------------------------
Block 0x906
0x907: v907(0x0) = CONST 
0x909: v909(0x4) = CONST 
0x90b: v90b = SLOAD v909(0x4)
0x90f: JUMP v375(0x37c)
----------------------------------

Begin block 0x910
prev = {'0x39e'}, next = {'0x96c', '0x968'}
----------------------------------
Block 0x910
0x911: v911(0x7) = CONST 
0x913: v913(0x0) = CONST 
0x916: v916 = SLOAD v911(0x7)
0x918: v918(0x100) = CONST 
0x91b: v91b(0x1) = EXP v918(0x100) v913(0x0)
0x91d: v91d = DIV v916 v91b(0x1)
0x91e: v91e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x933: v933 = AND v91e(0xffffffffffffffffffffffffffffffffffffffff) v91d
0x934: v934(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x949: v949 = AND v934(0xffffffffffffffffffffffffffffffffffffffff) v933
0x94a: v94a = CALLER 
0x94b: v94b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x960: v960 = AND v94b(0xffffffffffffffffffffffffffffffffffffffff) v94a
0x961: v961 = EQ v960 v949
0x962: v962 = ISZERO v961
0x963: v963 = ISZERO v962
0x964: v964(0x96c) = CONST 
0x967: JUMPI v964(0x96c) v963
----------------------------------

Begin block 0x968
prev = {'0x910'}, next = {}
----------------------------------
Block 0x968
0x968: v968(0x0) = CONST 
0x96b: REVERT v968(0x0) v968(0x0)
----------------------------------

Begin block 0x96c
prev = {'0x910'}, next = {'0x977', '0x97b'}
----------------------------------
Block 0x96c
0x96f: v96f = GT v3d7 v3e1
0x970: v970 = ISZERO v96f
0x971: v971 = ISZERO v970
0x972: v972 = ISZERO v971
0x973: v973(0x97b) = CONST 
0x976: JUMPI v973(0x97b) v972
----------------------------------

Begin block 0x977
prev = {'0x96c'}, next = {}
----------------------------------
Block 0x977
0x977: v977(0x0) = CONST 
0x97a: REVERT v977(0x0) v977(0x0)
----------------------------------

Begin block 0x97b
prev = {'0x96c'}, next = {'0x98a', '0x986'}
----------------------------------
Block 0x97b
0x97c: v97c(0x0) = CONST 
0x97f: v97f = GT v3e1 v97c(0x0)
0x980: v980 = ISZERO v97f
0x981: v981 = ISZERO v980
0x982: v982(0x98a) = CONST 
0x985: JUMPI v982(0x98a) v981
----------------------------------

Begin block 0x986
prev = {'0x97b'}, next = {}
----------------------------------
Block 0x986
0x986: v986(0x0) = CONST 
0x989: REVERT v986(0x0) v986(0x0)
----------------------------------

Begin block 0x98a
prev = {'0x97b'}, next = {'0x99e'}
----------------------------------
Block 0x98a
0x98b: v98b = TIMESTAMP 
0x98c: v98c(0x99e) = CONST 
0x991: v991(0xb43) = CONST 
0x997: v997(0xffffffff) = CONST 
0x99c: v99c(0xb43) = AND v997(0xffffffff) v991(0xb43)
0x99d: v99d_0 = CALLPRIVATE v99c(0xb43) v3e1 v3cd v98c(0x99e)
----------------------------------

Begin block 0x99e
prev = {'0x98a'}, next = {'0x9aa', '0x9a6'}
----------------------------------
Block 0x99e
0x99f: v99f = GT v99d_0 v98b
0x9a0: v9a0 = ISZERO v99f
0x9a1: v9a1 = ISZERO v9a0
0x9a2: v9a2(0x9aa) = CONST 
0x9a5: JUMPI v9a2(0x9aa) v9a1
----------------------------------

Begin block 0x9a6
prev = {'0x99e'}, next = {}
----------------------------------
Block 0x9a6
0x9a6: v9a6(0x0) = CONST 
0x9a9: REVERT v9a6(0x0) v9a6(0x0)
----------------------------------

Begin block 0x9aa
prev = {'0x99e'}, next = {'0xa05'}
----------------------------------
Block 0x9aa
0x9ac: v9ac(0x2) = CONST 
0x9ae: v9ae(0x0) = CONST 
0x9b0: v9b0(0x100) = CONST 
0x9b3: v9b3(0x1) = EXP v9b0(0x100) v9ae(0x0)
0x9b5: v9b5 = SLOAD v9ac(0x2)
0x9b7: v9b7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9cc: v9cc(0xffffffffffffffffffffffffffffffffffffffff) = MUL v9b7(0xffffffffffffffffffffffffffffffffffffffff) v9b3(0x1)
0x9cd: v9cd(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v9cc(0xffffffffffffffffffffffffffffffffffffffff)
0x9ce: v9ce = AND v9cd(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) v9b5
0x9d1: v9d1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0x9e6: v9e6 = AND v9d1(0xffffffffffffffffffffffffffffffffffffffff) v3c3
0x9e7: v9e7 = MUL v9e6 v9b3(0x1)
0x9e8: v9e8 = OR v9e7 v9ce
0x9ea: SSTORE v9ac(0x2) v9e8
0x9ed: v9ed(0x5) = CONST 
0x9f1: SSTORE v9ed(0x5) v3e1
0x9f3: v9f3(0xa05) = CONST 
0x9f8: v9f8(0xb43) = CONST 
0x9fe: v9fe(0xffffffff) = CONST 
0xa03: va03(0xb43) = AND v9fe(0xffffffff) v9f8(0xb43)
0xa04: va04_0 = CALLPRIVATE va03(0xb43) v3d7 v3cd v9f3(0xa05)
----------------------------------

Begin block 0xa05
prev = {'0x9aa'}, next = {'0x411'}
----------------------------------
Block 0xa05
0xa06: va06(0x3) = CONST 
0xa0a: SSTORE va06(0x3) va04_0
0xa0d: va0d(0x4) = CONST 
0xa11: SSTORE va0d(0x4) v3cd
0xa14: va14(0x6) = CONST 
0xa16: va16(0x0) = CONST 
0xa18: va18(0x100) = CONST 
0xa1b: va1b(0x1) = EXP va18(0x100) va16(0x0)
0xa1d: va1d = SLOAD va14(0x6)
0xa1f: va1f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa34: va34(0xffffffffffffffffffffffffffffffffffffffff) = MUL va1f(0xffffffffffffffffffffffffffffffffffffffff) va1b(0x1)
0xa35: va35(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT va34(0xffffffffffffffffffffffffffffffffffffffff)
0xa36: va36 = AND va35(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) va1d
0xa39: va39(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa4e: va4e = AND va39(0xffffffffffffffffffffffffffffffffffffffff) v401
0xa4f: va4f = MUL va4e va1b(0x1)
0xa50: va50 = OR va4f va36
0xa52: SSTORE va14(0x6) va50
0xa55: va55(0x1) = CONST 
0xa57: va57(0x0) = CONST 
0xa59: va59(0x100) = CONST 
0xa5c: va5c(0x1) = EXP va59(0x100) va57(0x0)
0xa5e: va5e = SLOAD va55(0x1)
0xa60: va60(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa75: va75(0xffffffffffffffffffffffffffffffffffffffff) = MUL va60(0xffffffffffffffffffffffffffffffffffffffff) va5c(0x1)
0xa76: va76(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT va75(0xffffffffffffffffffffffffffffffffffffffff)
0xa77: va77 = AND va76(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) va5e
0xa7a: va7a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xa8f: va8f = AND va7a(0xffffffffffffffffffffffffffffffffffffffff) v401
0xa90: va90 = MUL va8f va5c(0x1)
0xa91: va91 = OR va90 va77
0xa93: SSTORE va55(0x1) va91
0xa9a: JUMP v3a0(0x411)
----------------------------------

Begin block 0xa9b
prev = {'0x41f'}, next = {'0xaa3'}
----------------------------------
Block 0xa9b
0xa9c: va9c(0xaa3) = CONST 
0xa9f: va9f(0x866) = CONST 
0xaa2: vaa2_0 = CALLPRIVATE va9f(0x866) va9c(0xaa3)
----------------------------------

Begin block 0xaa3
prev = {'0xa9b'}, next = {'0xaae', '0xaaa'}
----------------------------------
Block 0xaa3
0xaa4: vaa4 = ISZERO vaa2_0
0xaa5: vaa5 = ISZERO vaa4
0xaa6: vaa6(0xaae) = CONST 
0xaa9: JUMPI vaa6(0xaae) vaa5
----------------------------------

Begin block 0xaaa
prev = {'0xaa3'}, next = {}
----------------------------------
Block 0xaaa
0xaaa: vaaa(0x0) = CONST 
0xaad: REVERT vaaa(0x0) vaaa(0x0)
----------------------------------

Begin block 0xaae
prev = {'0xaa3'}, next = {'0xb64'}
----------------------------------
Block 0xaae
0xaaf: vaaf(0xab7) = CONST 
0xab3: vab3(0xb64) = CONST 
0xab6: JUMP vab3(0xb64)
----------------------------------

Begin block 0xab7
prev = {'0xba0'}, next = {'0x454'}
----------------------------------
Block 0xab7
0xab9: JUMP v421(0x454)
----------------------------------

Begin block 0xaba
prev = {'0x462'}, next = {'0x46b'}
----------------------------------
Block 0xaba
0xabb: vabb(0x6) = CONST 
0xabd: vabd(0x0) = CONST 
0xac0: vac0 = SLOAD vabb(0x6)
0xac2: vac2(0x100) = CONST 
0xac5: vac5(0x1) = EXP vac2(0x100) vabd(0x0)
0xac7: vac7 = DIV vac0 vac5(0x1)
0xac8: vac8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xadd: vadd = AND vac8(0xffffffffffffffffffffffffffffffffffffffff) vac7
0xadf: JUMP v464(0x46b)
----------------------------------

Begin block 0xae0
prev = {'0x545'}, next = {'0xc5e'}
----------------------------------
Block 0xae0
0xae1: vae1(0x0) = CONST 
0xae3: vae3(0xb3c) = CONST 
0xae6: vae6(0x8) = CONST 
0xae8: vae8(0x0) = CONST 
0xaeb: vaeb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb00: vb00 = AND vaeb(0xffffffffffffffffffffffffffffffffffffffff) v1b3
0xb01: vb01(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb16: vb16 = AND vb01(0xffffffffffffffffffffffffffffffffffffffff) vb00
0xb18: MSTORE vae8(0x0) vb16
0xb19: vb19(0x20) = CONST 
0xb1b: vb1b(0x20) = ADD vb19(0x20) vae8(0x0)
0xb1e: MSTORE vb1b(0x20) vae6(0x8)
0xb1f: vb1f(0x20) = CONST 
0xb21: vb21(0x40) = ADD vb1f(0x20) vb1b(0x20)
0xb22: vb22(0x0) = CONST 
0xb24: vb24 = SHA3 vb22(0x0) vb21(0x40)
0xb25: vb25 = SLOAD vb24
0xb26: vb26(0xb2e) = CONST 
0xb2a: vb2a(0xc5e) = CONST 
0xb2d: JUMP vb2a(0xc5e)
----------------------------------

Begin block 0xb2e
prev = {'0xe29'}, next = {'0xb3c'}
----------------------------------
Block 0xb2e
0xb2e_0x0: vb2e_0 = PHI vdbc(0x0) vead vdae_0
0xb2f: vb2f(0xe30) = CONST 
0xb35: vb35(0xffffffff) = CONST 
0xb3a: vb3a(0xe30) = AND vb35(0xffffffff) vb2f(0xe30)
0xb3b: vb3b_0 = CALLPRIVATE vb3a(0xe30) vb25 vb2e_0 vae3(0xb3c)
----------------------------------

Begin block 0xb3c
prev = {'0xb2e'}, next = {'0x54e'}
----------------------------------
Block 0xb3c
0xb42: JUMP v546(0x54e)
----------------------------------

Begin block 0xb43
prev = {}, next = {'0xb5a', '0xb56'}
----------------------------------
function 0xb43(vb43arg0, vb43arg1, vb43arg2)
Block 0xb43
0xb44: vb44(0x0) = CONST 
0xb49: vb49 = ADD vb43arg1 vb43arg0
0xb4e: vb4e = LT vb49 vb43arg1
0xb4f: vb4f = ISZERO vb4e
0xb50: vb50 = ISZERO vb4f
0xb51: vb51 = ISZERO vb50
0xb52: vb52(0xb5a) = CONST 
0xb55: JUMPI vb52(0xb5a) vb51
----------------------------------

Begin block 0xb56
prev = {'0xb43'}, next = {}
----------------------------------
Block 0xb56
0xb56: vb56(0x0) = CONST 
0xb59: REVERT vb56(0x0) vb56(0x0)
----------------------------------

Begin block 0xb5a
prev = {'0xb43'}, next = {}
----------------------------------
Block 0xb5a
0xb63: RETURNPRIVATE vb43arg2 vb49
----------------------------------

Begin block 0xb64
prev = {'0xaae'}, next = {'0xba0', '0xb9c'}
----------------------------------
Block 0xb64
0xb65: vb65(0x0) = CONST 
0xb67: vb67(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb7c: vb7c(0x0) = AND vb67(0xffffffffffffffffffffffffffffffffffffffff) vb65(0x0)
0xb7e: vb7e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xb93: vb93 = AND vb7e(0xffffffffffffffffffffffffffffffffffffffff) v444
0xb94: vb94 = EQ vb93 vb7c(0x0)
0xb95: vb95 = ISZERO vb94
0xb96: vb96 = ISZERO vb95
0xb97: vb97 = ISZERO vb96
0xb98: vb98(0xba0) = CONST 
0xb9b: JUMPI vb98(0xba0) vb97
----------------------------------

Begin block 0xb9c
prev = {'0xb64'}, next = {}
----------------------------------
Block 0xb9c
0xb9c: vb9c(0x0) = CONST 
0xb9f: REVERT vb9c(0x0) vb9c(0x0)
----------------------------------

Begin block 0xba0
prev = {'0xb64'}, next = {'0xab7'}
----------------------------------
Block 0xba0
0xba2: vba2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbb7: vbb7 = AND vba2(0xffffffffffffffffffffffffffffffffffffffff) v444
0xbb8: vbb8(0x0) = CONST 
0xbbc: vbbc = SLOAD vbb8(0x0)
0xbbe: vbbe(0x100) = CONST 
0xbc1: vbc1(0x1) = EXP vbbe(0x100) vbb8(0x0)
0xbc3: vbc3 = DIV vbbc vbc1(0x1)
0xbc4: vbc4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbd9: vbd9 = AND vbc4(0xffffffffffffffffffffffffffffffffffffffff) vbc3
0xbda: vbda(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xbef: vbef = AND vbda(0xffffffffffffffffffffffffffffffffffffffff) vbd9
0xbf0: vbf0(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
0xc11: vc11(0x40) = CONST 
0xc13: vc13 = MLOAD vc11(0x40)
0xc14: vc14(0x40) = CONST 
0xc16: vc16 = MLOAD vc14(0x40)
0xc19: vc19 = SUB vc13 vc16
0xc1b: LOG3 vc16 vc19 vbf0(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) vbef vbb7
0xc1d: vc1d(0x0) = CONST 
0xc20: vc20(0x100) = CONST 
0xc23: vc23(0x1) = EXP vc20(0x100) vc1d(0x0)
0xc25: vc25 = SLOAD vc1d(0x0)
0xc27: vc27(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc3c: vc3c(0xffffffffffffffffffffffffffffffffffffffff) = MUL vc27(0xffffffffffffffffffffffffffffffffffffffff) vc23(0x1)
0xc3d: vc3d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vc3c(0xffffffffffffffffffffffffffffffffffffffff)
0xc3e: vc3e = AND vc3d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) vc25
0xc41: vc41(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc56: vc56 = AND vc41(0xffffffffffffffffffffffffffffffffffffffff) v444
0xc57: vc57 = MUL vc56 vc23(0x1)
0xc58: vc58 = OR vc57 vc3e
0xc5a: SSTORE vc1d(0x0) vc58
0xc5d: JUMP vaaf(0xab7)
----------------------------------

Begin block 0xc5e
prev = {'0xae0'}, next = {'0xd20', '0xd1c'}
----------------------------------
Block 0xc5e
0xc5f: vc5f(0x0) = CONST 
0xc62: vc62(0x0) = CONST 
0xc64: vc64(0x1) = CONST 
0xc66: vc66(0x0) = CONST 
0xc69: vc69 = SLOAD vc64(0x1)
0xc6b: vc6b(0x100) = CONST 
0xc6e: vc6e(0x1) = EXP vc6b(0x100) vc66(0x0)
0xc70: vc70 = DIV vc69 vc6e(0x1)
0xc71: vc71(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc86: vc86 = AND vc71(0xffffffffffffffffffffffffffffffffffffffff) vc70
0xc87: vc87(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xc9c: vc9c = AND vc87(0xffffffffffffffffffffffffffffffffffffffff) vc86
0xc9d: vc9d(0x70a08231) = CONST 
0xca2: vca2 = ADDRESS 
0xca3: vca3(0x40) = CONST 
0xca5: vca5 = MLOAD vca3(0x40)
0xca7: vca7(0xffffffff) = CONST 
0xcac: vcac(0x70a08231) = AND vca7(0xffffffff) vc9d(0x70a08231)
0xcad: vcad(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0xccb: vccb(0x70a0823100000000000000000000000000000000000000000000000000000000) = MUL vcad(0x100000000000000000000000000000000000000000000000000000000) vcac(0x70a08231)
0xccd: MSTORE vca5 vccb(0x70a0823100000000000000000000000000000000000000000000000000000000)
0xcce: vcce(0x4) = CONST 
0xcd0: vcd0 = ADD vcce(0x4) vca5
0xcd3: vcd3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xce8: vce8 = AND vcd3(0xffffffffffffffffffffffffffffffffffffffff) vca2
0xce9: vce9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xcfe: vcfe = AND vce9(0xffffffffffffffffffffffffffffffffffffffff) vce8
0xd00: MSTORE vcd0 vcfe
0xd01: vd01(0x20) = CONST 
0xd03: vd03 = ADD vd01(0x20) vcd0
0xd07: vd07(0x20) = CONST 
0xd09: vd09(0x40) = CONST 
0xd0b: vd0b = MLOAD vd09(0x40)
0xd0e: vd0e = SUB vd03 vd0b
0xd10: vd10(0x0) = CONST 
0xd14: vd14 = EXTCODESIZE vc9c
0xd15: vd15 = ISZERO vd14
0xd17: vd17 = ISZERO vd15
0xd18: vd18(0xd20) = CONST 
0xd1b: JUMPI vd18(0xd20) vd17
----------------------------------

Begin block 0xd1c
prev = {'0xc5e'}, next = {}
----------------------------------
Block 0xd1c
0xd1c: vd1c(0x0) = CONST 
0xd1f: REVERT vd1c(0x0) vd1c(0x0)
----------------------------------

Begin block 0xd20
prev = {'0xc5e'}, next = {'0xd34', '0xd2b'}
----------------------------------
Block 0xd20
0xd22: vd22 = GAS 
0xd23: vd23 = CALL vd22 vc9c vd10(0x0) vd0b vd0e vd0b vd07(0x20)
0xd24: vd24 = ISZERO vd23
0xd26: vd26 = ISZERO vd24
0xd27: vd27(0xd34) = CONST 
0xd2a: JUMPI vd27(0xd34) vd26
----------------------------------

Begin block 0xd2b
prev = {'0xd20'}, next = {}
----------------------------------
Block 0xd2b
0xd2b: vd2b = RETURNDATASIZE 
0xd2c: vd2c(0x0) = CONST 
0xd2f: RETURNDATACOPY vd2c(0x0) vd2c(0x0) vd2b
0xd30: vd30 = RETURNDATASIZE 
0xd31: vd31(0x0) = CONST 
0xd33: REVERT vd31(0x0) vd30
----------------------------------

Begin block 0xd34
prev = {'0xd20'}, next = {'0xd46', '0xd4a'}
----------------------------------
Block 0xd34
0xd39: vd39(0x40) = CONST 
0xd3b: vd3b = MLOAD vd39(0x40)
0xd3c: vd3c = RETURNDATASIZE 
0xd3d: vd3d(0x20) = CONST 
0xd40: vd40 = LT vd3c vd3d(0x20)
0xd41: vd41 = ISZERO vd40
0xd42: vd42(0xd4a) = CONST 
0xd45: JUMPI vd42(0xd4a) vd41
----------------------------------

Begin block 0xd46
prev = {'0xd34'}, next = {}
----------------------------------
Block 0xd46
0xd46: vd46(0x0) = CONST 
0xd49: REVERT vd46(0x0) vd46(0x0)
----------------------------------

Begin block 0xd4a
prev = {'0xd34'}, next = {'0xdaf'}
----------------------------------
Block 0xd4a
0xd4c: vd4c = ADD vd3b vd3c
0xd50: vd50 = MLOAD vd3b
0xd52: vd52(0x20) = CONST 
0xd54: vd54 = ADD vd52(0x20) vd3b
0xd5e: vd5e(0xdaf) = CONST 
0xd61: vd61(0x8) = CONST 
0xd63: vd63(0x0) = CONST 
0xd66: vd66(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd7b: vd7b = AND vd66(0xffffffffffffffffffffffffffffffffffffffff) v1b3
0xd7c: vd7c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xd91: vd91 = AND vd7c(0xffffffffffffffffffffffffffffffffffffffff) vd7b
0xd93: MSTORE vd63(0x0) vd91
0xd94: vd94(0x20) = CONST 
0xd96: vd96(0x20) = ADD vd94(0x20) vd63(0x0)
0xd99: MSTORE vd96(0x20) vd61(0x8)
0xd9a: vd9a(0x20) = CONST 
0xd9c: vd9c(0x40) = ADD vd9a(0x20) vd96(0x20)
0xd9d: vd9d(0x0) = CONST 
0xd9f: vd9f = SHA3 vd9d(0x0) vd9c(0x40)
0xda0: vda0 = SLOAD vd9f
0xda2: vda2(0xb43) = CONST 
0xda8: vda8(0xffffffff) = CONST 
0xdad: vdad(0xb43) = AND vda8(0xffffffff) vda2(0xb43)
0xdae: vdae_0 = CALLPRIVATE vdad(0xb43) vda0 vd50 vd5e(0xdaf)
----------------------------------

Begin block 0xdaf
prev = {'0xd4a'}, next = {'0xdbc', '0xdc4'}
----------------------------------
Block 0xdaf
0xdb2: vdb2(0x3) = CONST 
0xdb4: vdb4 = SLOAD vdb2(0x3)
0xdb5: vdb5 = TIMESTAMP 
0xdb6: vdb6 = LT vdb5 vdb4
0xdb7: vdb7 = ISZERO vdb6
0xdb8: vdb8(0xdc4) = CONST 
0xdbb: JUMPI vdb8(0xdc4) vdb7
----------------------------------

Begin block 0xdbc
prev = {'0xdaf'}, next = {'0xe29'}
----------------------------------
Block 0xdbc
0xdbc: vdbc(0x0) = CONST 
0xdc0: vdc0(0xe29) = CONST 
0xdc3: JUMP vdc0(0xe29)
----------------------------------

Begin block 0xdc4
prev = {'0xdaf'}, next = {'0xddb'}
----------------------------------
Block 0xdc4
0xdc5: vdc5(0xddb) = CONST 
0xdc8: vdc8(0x5) = CONST 
0xdca: vdca = SLOAD vdc8(0x5)
0xdcb: vdcb(0x4) = CONST 
0xdcd: vdcd = SLOAD vdcb(0x4)
0xdce: vdce(0xb43) = CONST 
0xdd4: vdd4(0xffffffff) = CONST 
0xdd9: vdd9(0xb43) = AND vdd4(0xffffffff) vdce(0xb43)
0xdda: vdda_0 = CALLPRIVATE vdd9(0xb43) vdca vdcd vdc5(0xddb)
----------------------------------

Begin block 0xddb
prev = {'0xdc4'}, next = {'0xdeb', '0xde4'}
----------------------------------
Block 0xddb
0xddc: vddc = TIMESTAMP 
0xddd: vddd = LT vddc vdda_0
0xdde: vdde = ISZERO vddd
0xddf: vddf = ISZERO vdde
0xde0: vde0(0xdeb) = CONST 
0xde3: JUMPI vde0(0xdeb) vddf
----------------------------------

Begin block 0xde4
prev = {'0xddb'}, next = {'0xe29'}
----------------------------------
Block 0xde4
0xde7: vde7(0xe29) = CONST 
0xdea: JUMP vde7(0xe29)
----------------------------------

Begin block 0xdeb
prev = {'0xddb'}, next = {'0xe09'}
----------------------------------
Block 0xdeb
0xdec: vdec(0xe26) = CONST 
0xdef: vdef(0x5) = CONST 
0xdf1: vdf1 = SLOAD vdef(0x5)
0xdf2: vdf2(0xe18) = CONST 
0xdf5: vdf5(0xe09) = CONST 
0xdf8: vdf8(0x4) = CONST 
0xdfa: vdfa = SLOAD vdf8(0x4)
0xdfb: vdfb = TIMESTAMP 
0xdfc: vdfc(0xe30) = CONST 
0xe02: ve02(0xffffffff) = CONST 
0xe07: ve07(0xe30) = AND ve02(0xffffffff) vdfc(0xe30)
0xe08: ve08_0 = CALLPRIVATE ve07(0xe30) vdfa vdfb vdf5(0xe09)
----------------------------------

Begin block 0xe09
prev = {'0xdeb'}, next = {'0xe51'}
----------------------------------
Block 0xe09
0xe0b: ve0b(0xe51) = CONST 
0xe11: ve11(0xffffffff) = CONST 
0xe16: ve16(0xe51) = AND ve11(0xffffffff) ve0b(0xe51)
0xe17: JUMP ve16(0xe51)
----------------------------------

Begin block 0xe18
prev = {'0xe88'}, next = {'0xe8f'}
----------------------------------
Block 0xe18
0xe19: ve19(0xe8f) = CONST 
0xe1f: ve1f(0xffffffff) = CONST 
0xe24: ve24(0xe8f) = AND ve1f(0xffffffff) ve19(0xe8f)
0xe25: JUMP ve24(0xe8f)
----------------------------------

Begin block 0xe26
prev = {'0xeac'}, next = {'0xe29'}
----------------------------------
Block 0xe26
----------------------------------

Begin block 0xe29
prev = {'0xde4', '0xdbc', '0xe26'}, next = {'0xb2e'}
----------------------------------
Block 0xe29
0xe2f: JUMP vb26(0xb2e)
----------------------------------

Begin block 0xe30
prev = {}, next = {'0xe3e', '0xe42'}
----------------------------------
function 0xe30(ve30arg0, ve30arg1, ve30arg2)
Block 0xe30
0xe31: ve31(0x0) = CONST 
0xe36: ve36 = GT ve30arg0 ve30arg1
0xe37: ve37 = ISZERO ve36
0xe38: ve38 = ISZERO ve37
0xe39: ve39 = ISZERO ve38
0xe3a: ve3a(0xe42) = CONST 
0xe3d: JUMPI ve3a(0xe42) ve39
----------------------------------

Begin block 0xe3e
prev = {'0xe30'}, next = {}
----------------------------------
Block 0xe3e
0xe3e: ve3e(0x0) = CONST 
0xe41: REVERT ve3e(0x0) ve3e(0x0)
----------------------------------

Begin block 0xe42
prev = {'0xe30'}, next = {}
----------------------------------
Block 0xe42
0xe45: ve45 = SUB ve30arg1 ve30arg0
0xe50: RETURNPRIVATE ve30arg2 ve45
----------------------------------

Begin block 0xe51
prev = {'0xe09'}, next = {'0xe66', '0xe5e'}
----------------------------------
Block 0xe51
0xe52: ve52(0x0) = CONST 
0xe55: ve55(0x0) = CONST 
0xe58: ve58 = EQ vdae_0 ve55(0x0)
0xe59: ve59 = ISZERO ve58
0xe5a: ve5a(0xe66) = CONST 
0xe5d: JUMPI ve5a(0xe66) ve59
----------------------------------

Begin block 0xe5e
prev = {'0xe51'}, next = {'0xe88'}
----------------------------------
Block 0xe5e
0xe5e: ve5e(0x0) = CONST 
0xe62: ve62(0xe88) = CONST 
0xe65: JUMP ve62(0xe88)
----------------------------------

Begin block 0xe66
prev = {'0xe51'}, next = {'0xe76', '0xe77'}
----------------------------------
Block 0xe66
0xe69: ve69 = MUL vdae_0 ve08_0
0xe70: ve70 = ISZERO vdae_0
0xe71: ve71 = ISZERO ve70
0xe72: ve72(0xe77) = CONST 
0xe75: JUMPI ve72(0xe77) ve71
----------------------------------

Begin block 0xe76
prev = {'0xe66'}, next = {}
----------------------------------
Block 0xe76
0xe76: THROW 
----------------------------------

Begin block 0xe77
prev = {'0xe66'}, next = {'0xe84', '0xe80'}
----------------------------------
Block 0xe77
0xe78: ve78 = DIV ve69 vdae_0
0xe79: ve79 = EQ ve78 ve08_0
0xe7a: ve7a = ISZERO ve79
0xe7b: ve7b = ISZERO ve7a
0xe7c: ve7c(0xe84) = CONST 
0xe7f: JUMPI ve7c(0xe84) ve7b
----------------------------------

Begin block 0xe80
prev = {'0xe77'}, next = {}
----------------------------------
Block 0xe80
0xe80: ve80(0x0) = CONST 
0xe83: REVERT ve80(0x0) ve80(0x0)
----------------------------------

Begin block 0xe84
prev = {'0xe77'}, next = {'0xe88'}
----------------------------------
Block 0xe84
----------------------------------

Begin block 0xe88
prev = {'0xe84', '0xe5e'}, next = {'0xe18'}
----------------------------------
Block 0xe88
0xe8e: JUMP vdf2(0xe18)
----------------------------------

Begin block 0xe8f
prev = {'0xe18'}, next = {'0xea1', '0xe9d'}
----------------------------------
Block 0xe8f
0xe90: ve90(0x0) = CONST 
0xe93: ve93(0x0) = CONST 
0xe96: ve96 = GT vdf1 ve93(0x0)
0xe97: ve97 = ISZERO ve96
0xe98: ve98 = ISZERO ve97
0xe99: ve99(0xea1) = CONST 
0xe9c: JUMPI ve99(0xea1) ve98
----------------------------------

Begin block 0xe9d
prev = {'0xe8f'}, next = {}
----------------------------------
Block 0xe9d
0xe9d: ve9d(0x0) = CONST 
0xea0: REVERT ve9d(0x0) ve9d(0x0)
----------------------------------

Begin block 0xea1
prev = {'0xe8f'}, next = {'0xeab', '0xeac'}
----------------------------------
Block 0xea1
0xea5: vea5 = ISZERO vdf1
0xea6: vea6 = ISZERO vea5
0xea7: vea7(0xeac) = CONST 
0xeaa: JUMPI vea7(0xeac) vea6
----------------------------------

Begin block 0xeab
prev = {'0xea1'}, next = {}
----------------------------------
Block 0xeab
0xeab: THROW 
----------------------------------

Begin block 0xeac
prev = {'0xea1'}, next = {'0xe26'}
----------------------------------
Block 0xeac
0xeac_0x0: veac_0 = PHI ve5e(0x0) ve69
0xead: vead = DIV veac_0 vdf1
0xeb8: JUMP vdec(0xe26)
----------------------------------

Begin block 0xf03
prev = {'0x0', '0xc5'}, next = {}
----------------------------------
Block 0xf03
0xf04: vf04(0xd0) = CONST 
0xf05: CALLPRIVATE vf04(0xd0)
----------------------------------

Begin block 0xf06
prev = {'0xd'}, next = {}
----------------------------------
Block 0xf06
0xf07: vf07(0xd5) = CONST 
0xf08: CALLPRIVATE vf07(0xd5)
----------------------------------

Begin block 0xf09
prev = {'0x41'}, next = {}
----------------------------------
Block 0xf09
0xf0a: vf0a(0x12c) = CONST 
0xf0b: CALLPRIVATE vf0a(0x12c)
----------------------------------

Begin block 0xf0c
prev = {'0x4c'}, next = {}
----------------------------------
Block 0xf0c
0xf0d: vf0d(0x157) = CONST 
0xf0e: CALLPRIVATE vf0d(0x157)
----------------------------------

Begin block 0xf0f
prev = {'0x57'}, next = {}
----------------------------------
Block 0xf0f
0xf10: vf10(0x182) = CONST 
0xf11: CALLPRIVATE vf10(0x182)
----------------------------------

Begin block 0xf12
prev = {'0x62'}, next = {}
----------------------------------
Block 0xf12
0xf13: vf13(0x1c5) = CONST 
0xf14: CALLPRIVATE vf13(0x1c5)
----------------------------------

Begin block 0xf15
prev = {'0x6d'}, next = {}
----------------------------------
Block 0xf15
0xf16: vf16(0x21c) = CONST 
0xf17: CALLPRIVATE vf16(0x21c)
----------------------------------

Begin block 0xf18
prev = {'0x78'}, next = {}
----------------------------------
Block 0xf18
0xf19: vf19(0x273) = CONST 
0xf1a: CALLPRIVATE vf19(0x273)
----------------------------------

Begin block 0xf1b
prev = {'0x83'}, next = {}
----------------------------------
Block 0xf1b
0xf1c: vf1c(0x28a) = CONST 
0xf1d: CALLPRIVATE vf1c(0x28a)
----------------------------------

Begin block 0xf1e
prev = {'0x8e'}, next = {}
----------------------------------
Block 0xf1e
0xf1f: vf1f(0x2e1) = CONST 
0xf20: CALLPRIVATE vf1f(0x2e1)
----------------------------------

Begin block 0xf21
prev = {'0x99'}, next = {}
----------------------------------
Block 0xf21
0xf22: vf22(0x310) = CONST 
0xf23: CALLPRIVATE vf22(0x310)
----------------------------------

Begin block 0xf24
prev = {'0xa4'}, next = {}
----------------------------------
Block 0xf24
0xf25: vf25(0x367) = CONST 
0xf26: CALLPRIVATE vf25(0x367)
----------------------------------

Begin block 0xf27
prev = {'0xaf'}, next = {}
----------------------------------
Block 0xf27
0xf28: vf28(0x392) = CONST 
0xf29: CALLPRIVATE vf28(0x392)
----------------------------------

Begin block 0xf2a
prev = {'0xba'}, next = {}
----------------------------------
Block 0xf2a
0xf2b: vf2b(0x413) = CONST 
0xf2c: CALLPRIVATE vf2b(0x413)
----------------------------------

Begin block 0xf2d
prev = {'0xc5'}, next = {}
----------------------------------
Block 0xf2d
0xf2e: vf2e(0x456) = CONST 
0xf2f: CALLPRIVATE vf2e(0x456)
----------------------------------
