
Begin block 0x0
prev = {}, next = {'0xedb', '0xd'}
----------------------------------
function __function_selector__()
Block 0x0
0x0: v0(0x80) = CONST 
0x2: v2(0x40) = CONST 
0x4: MSTORE v2(0x40) v0(0x80)
0x5: v5(0x4) = CONST 
0x7: v7 = CALLDATASIZE 
0x8: v8 = LT v7 v5(0x4)
0xead: vead(0xedb) = CONST 
0xeae: JUMPI vead(0xedb) v8
----------------------------------

Begin block 0xd
prev = {'0x0'}, next = {'0xede', '0x40'}
----------------------------------
Block 0xd
0xd: vd(0xffffffff) = CONST 
0x12: v12(0x100000000000000000000000000000000000000000000000000000000) = CONST 
0x30: v30(0x0) = CONST 
0x32: v32 = CALLDATALOAD v30(0x0)
0x33: v33 = DIV v32 v12(0x100000000000000000000000000000000000000000000000000000000)
0x34: v34 = AND v33 vd(0xffffffff)
0x35: v35(0x6fdde03) = CONST 
0x3b: v3b = EQ v34 v35(0x6fdde03)
0xeaf: veaf(0xede) = CONST 
0xeb0: JUMPI veaf(0xede) v3b
----------------------------------

Begin block 0x40
prev = {'0xd'}, next = {'0xee1', '0x4b'}
----------------------------------
Block 0x40
0x41: v41(0x95ea7b3) = CONST 
0x46: v46 = EQ v41(0x95ea7b3) v34
0xeb1: veb1(0xee1) = CONST 
0xeb2: JUMPI veb1(0xee1) v46
----------------------------------

Begin block 0x4b
prev = {'0x40'}, next = {'0xee4', '0x56'}
----------------------------------
Block 0x4b
0x4c: v4c(0x17655f6c) = CONST 
0x51: v51 = EQ v4c(0x17655f6c) v34
0xeb3: veb3(0xee4) = CONST 
0xeb4: JUMPI veb3(0xee4) v51
----------------------------------

Begin block 0x56
prev = {'0x4b'}, next = {'0x61', '0xee7'}
----------------------------------
Block 0x56
0x57: v57(0x18160ddd) = CONST 
0x5c: v5c = EQ v57(0x18160ddd) v34
0xeb5: veb5(0xee7) = CONST 
0xeb6: JUMPI veb5(0xee7) v5c
----------------------------------

Begin block 0x61
prev = {'0x56'}, next = {'0x6c', '0xeea'}
----------------------------------
Block 0x61
0x62: v62(0x1e5253a4) = CONST 
0x67: v67 = EQ v62(0x1e5253a4) v34
0xeb7: veb7(0xeea) = CONST 
0xeb8: JUMPI veb7(0xeea) v67
----------------------------------

Begin block 0x6c
prev = {'0x61'}, next = {'0xeed', '0x77'}
----------------------------------
Block 0x6c
0x6d: v6d(0x23b872dd) = CONST 
0x72: v72 = EQ v6d(0x23b872dd) v34
0xeb9: veb9(0xeed) = CONST 
0xeba: JUMPI veb9(0xeed) v72
----------------------------------

Begin block 0x77
prev = {'0x6c'}, next = {'0xef0', '0x82'}
----------------------------------
Block 0x77
0x78: v78(0x278ecde1) = CONST 
0x7d: v7d = EQ v78(0x278ecde1) v34
0xebb: vebb(0xef0) = CONST 
0xebc: JUMPI vebb(0xef0) v7d
----------------------------------

Begin block 0x82
prev = {'0x77'}, next = {'0xef3', '0x8d'}
----------------------------------
Block 0x82
0x83: v83(0x2852b71c) = CONST 
0x88: v88 = EQ v83(0x2852b71c) v34
0xebd: vebd(0xef3) = CONST 
0xebe: JUMPI vebd(0xef3) v88
----------------------------------

Begin block 0x8d
prev = {'0x82'}, next = {'0x98', '0xef6'}
----------------------------------
Block 0x8d
0x8e: v8e(0x308dc720) = CONST 
0x93: v93 = EQ v8e(0x308dc720) v34
0xebf: vebf(0xef6) = CONST 
0xec0: JUMPI vebf(0xef6) v93
----------------------------------

Begin block 0x98
prev = {'0x8d'}, next = {'0xef9', '0xa3'}
----------------------------------
Block 0x98
0x99: v99(0x313ce567) = CONST 
0x9e: v9e = EQ v99(0x313ce567) v34
0xec1: vec1(0xef9) = CONST 
0xec2: JUMPI vec1(0xef9) v9e
----------------------------------

Begin block 0xa3
prev = {'0x98'}, next = {'0xefc', '0xae'}
----------------------------------
Block 0xa3
0xa4: va4(0x70a08231) = CONST 
0xa9: va9 = EQ va4(0x70a08231) v34
0xec3: vec3(0xefc) = CONST 
0xec4: JUMPI vec3(0xefc) va9
----------------------------------

Begin block 0xae
prev = {'0xa3'}, next = {'0xb9', '0xeff'}
----------------------------------
Block 0xae
0xaf: vaf(0x867904b4) = CONST 
0xb4: vb4 = EQ vaf(0x867904b4) v34
0xec5: vec5(0xeff) = CONST 
0xec6: JUMPI vec5(0xeff) vb4
----------------------------------

Begin block 0xb9
prev = {'0xae'}, next = {'0xc4', '0xf02'}
----------------------------------
Block 0xb9
0xba: vba(0x8da5cb5b) = CONST 
0xbf: vbf = EQ vba(0x8da5cb5b) v34
0xec7: vec7(0xf02) = CONST 
0xec8: JUMPI vec7(0xf02) vbf
----------------------------------

Begin block 0xc4
prev = {'0xb9'}, next = {'0xcf', '0xf05'}
----------------------------------
Block 0xc4
0xc5: vc5(0x95d89b41) = CONST 
0xca: vca = EQ vc5(0x95d89b41) v34
0xec9: vec9(0xf05) = CONST 
0xeca: JUMPI vec9(0xf05) vca
----------------------------------

Begin block 0xcf
prev = {'0xc4'}, next = {'0xda', '0xf08'}
----------------------------------
Block 0xcf
0xd0: vd0(0x97848574) = CONST 
0xd5: vd5 = EQ vd0(0x97848574) v34
0xecb: vecb(0xf08) = CONST 
0xecc: JUMPI vecb(0xf08) vd5
----------------------------------

Begin block 0xda
prev = {'0xcf'}, next = {'0xe5', '0xf0b'}
----------------------------------
Block 0xda
0xdb: vdb(0xa035b1fe) = CONST 
0xe0: ve0 = EQ vdb(0xa035b1fe) v34
0xecd: vecd(0xf0b) = CONST 
0xece: JUMPI vecd(0xf0b) ve0
----------------------------------

Begin block 0xe5
prev = {'0xda'}, next = {'0xf0e', '0xf0'}
----------------------------------
Block 0xe5
0xe6: ve6(0xa9059cbb) = CONST 
0xeb: veb = EQ ve6(0xa9059cbb) v34
0xecf: vecf(0xf0e) = CONST 
0xed0: JUMPI vecf(0xf0e) veb
----------------------------------

Begin block 0xf0
prev = {'0xe5'}, next = {'0xf11', '0xfb'}
----------------------------------
Block 0xf0
0xf1: vf1(0xb0428da6) = CONST 
0xf6: vf6 = EQ vf1(0xb0428da6) v34
0xed1: ved1(0xf11) = CONST 
0xed2: JUMPI ved1(0xf11) vf6
----------------------------------

Begin block 0xfb
prev = {'0xf0'}, next = {'0xf14', '0x106'}
----------------------------------
Block 0xfb
0xfc: vfc(0xcafc0fbd) = CONST 
0x101: v101 = EQ vfc(0xcafc0fbd) v34
0xed3: ved3(0xf14) = CONST 
0xed4: JUMPI ved3(0xf14) v101
----------------------------------

Begin block 0x106
prev = {'0xfb'}, next = {'0x111', '0xf17'}
----------------------------------
Block 0x106
0x107: v107(0xd123b6e2) = CONST 
0x10c: v10c = EQ v107(0xd123b6e2) v34
0xed5: ved5(0xf17) = CONST 
0xed6: JUMPI ved5(0xf17) v10c
----------------------------------

Begin block 0x111
prev = {'0x106'}, next = {'0xf1a', '0x11c'}
----------------------------------
Block 0x111
0x112: v112(0xdd62ed3e) = CONST 
0x117: v117 = EQ v112(0xdd62ed3e) v34
0xed7: ved7(0xf1a) = CONST 
0xed8: JUMPI ved7(0xf1a) v117
----------------------------------

Begin block 0x11c
prev = {'0x111'}, next = {'0xf1d', '0xedb'}
----------------------------------
Block 0x11c
0x11d: v11d(0xf2fde38b) = CONST 
0x122: v122 = EQ v11d(0xf2fde38b) v34
0xed9: ved9(0xf1d) = CONST 
0xeda: JUMPI ved9(0xf1d) v122
----------------------------------

Begin block 0x127
prev = {}, next = {}
----------------------------------
function batchLock_63efZf()()
Block 0x127
0x128: v128(0x0) = CONST 
0x12b: REVERT v128(0x0) v128(0x0)
----------------------------------

Begin block 0x12c
prev = {}, next = {'0x138', '0x134'}
----------------------------------
function name()()
Block 0x12c
0x12d: v12d = CALLVALUE 
0x12f: v12f = ISZERO v12d
0x130: v130(0x138) = CONST 
0x133: JUMPI v130(0x138) v12f
----------------------------------

Begin block 0x134
prev = {'0x12c'}, next = {}
----------------------------------
Block 0x134
0x134: v134(0x0) = CONST 
0x137: REVERT v134(0x0) v134(0x0)
----------------------------------

Begin block 0x138
prev = {'0x12c'}, next = {'0x1410x12c'}
----------------------------------
Block 0x138
0x13a: v13a(0x141) = CONST 
0x13d: v13d(0x569) = CONST 
0x140: v140_0, v140_1 = CALLPRIVATE v13d(0x569) v13a(0x141)
----------------------------------

Begin block 0x1410x12c
prev = {'0x138'}, next = {'0x1630x12c'}
----------------------------------
Block 0x1410x12c
0x1420x12c: v12c142(0x40) = CONST 
0x1450x12c: v12c145 = MLOAD v12c142(0x40)
0x1460x12c: v12c146(0x20) = CONST 
0x14a0x12c: MSTORE v12c145 v12c146(0x20)
0x14c0x12c: v12c14c = MLOAD v140_0
0x14f0x12c: v12c14f = ADD v12c145 v12c146(0x20)
0x1500x12c: MSTORE v12c14f v12c14c
0x1520x12c: v12c152 = MLOAD v140_0
0x1590x12c: v12c159 = ADD v12c145 v12c142(0x40)
0x15c0x12c: v12c15c = ADD v140_0 v12c146(0x20)
0x1610x12c: v12c161(0x0) = CONST 
----------------------------------

Begin block 0x1410x3ea
prev = {'0x3f6'}, next = {'0x1630x3ea'}
----------------------------------
Block 0x1410x3ea
0x1420x3ea: v3ea142(0x40) = CONST 
0x1450x3ea: v3ea145 = MLOAD v3ea142(0x40)
0x1460x3ea: v3ea146(0x20) = CONST 
0x14a0x3ea: MSTORE v3ea145 v3ea146(0x20)
0x14c0x3ea: v3ea14c = MLOAD v3fe_0
0x14f0x3ea: v3ea14f = ADD v3ea145 v3ea146(0x20)
0x1500x3ea: MSTORE v3ea14f v3ea14c
0x1520x3ea: v3ea152 = MLOAD v3fe_0
0x1590x3ea: v3ea159 = ADD v3ea145 v3ea142(0x40)
0x15c0x3ea: v3ea15c = ADD v3fe_0 v3ea146(0x20)
0x1610x3ea: v3ea161(0x0) = CONST 
----------------------------------

Begin block 0x1630x12c
prev = {'0x16c0x12c', '0x1410x12c'}, next = {'0x16c0x12c', '0x17b0x12c'}
----------------------------------
Block 0x1630x12c
0x1630x12c_0x0: v16312c_0 = PHI v12c161(0x0) v12c176
0x1660x12c: v12c166 = LT v16312c_0 v12c152
0x1670x12c: v12c167 = ISZERO v12c166
0x1680x12c: v12c168(0x17b) = CONST 
0x16b0x12c: JUMPI v12c168(0x17b) v12c167
----------------------------------

Begin block 0x1630x3ea
prev = {'0x16c0x3ea', '0x1410x3ea'}, next = {'0x16c0x3ea', '0x17b0x3ea'}
----------------------------------
Block 0x1630x3ea
0x1630x3ea_0x0: v1633ea_0 = PHI v3ea161(0x0) v3ea176
0x1660x3ea: v3ea166 = LT v1633ea_0 v3ea152
0x1670x3ea: v3ea167 = ISZERO v3ea166
0x1680x3ea: v3ea168(0x17b) = CONST 
0x16b0x3ea: JUMPI v3ea168(0x17b) v3ea167
----------------------------------

Begin block 0x16c0x12c
prev = {'0x1630x12c'}, next = {'0x1630x12c'}
----------------------------------
Block 0x16c0x12c
0x16c0x12c_0x0: v16c12c_0 = PHI v12c161(0x0) v12c176
0x16e0x12c: v12c16e = ADD v16c12c_0 v12c15c
0x16f0x12c: v12c16f = MLOAD v12c16e
0x1720x12c: v12c172 = ADD v16c12c_0 v12c159
0x1730x12c: MSTORE v12c172 v12c16f
0x1740x12c: v12c174(0x20) = CONST 
0x1760x12c: v12c176 = ADD v12c174(0x20) v16c12c_0
0x1770x12c: v12c177(0x163) = CONST 
0x17a0x12c: JUMP v12c177(0x163)
----------------------------------

Begin block 0x16c0x3ea
prev = {'0x1630x3ea'}, next = {'0x1630x3ea'}
----------------------------------
Block 0x16c0x3ea
0x16c0x3ea_0x0: v16c3ea_0 = PHI v3ea161(0x0) v3ea176
0x16e0x3ea: v3ea16e = ADD v16c3ea_0 v3ea15c
0x16f0x3ea: v3ea16f = MLOAD v3ea16e
0x1720x3ea: v3ea172 = ADD v16c3ea_0 v3ea159
0x1730x3ea: MSTORE v3ea172 v3ea16f
0x1740x3ea: v3ea174(0x20) = CONST 
0x1760x3ea: v3ea176 = ADD v3ea174(0x20) v16c3ea_0
0x1770x3ea: v3ea177(0x163) = CONST 
0x17a0x3ea: JUMP v3ea177(0x163)
----------------------------------

Begin block 0x17b0x12c
prev = {'0x1630x12c'}, next = {'0x1a80x12c', '0x18f0x12c'}
----------------------------------
Block 0x17b0x12c
0x1840x12c: v12c184 = ADD v12c152 v12c159
0x1860x12c: v12c186(0x1f) = CONST 
0x1880x12c: v12c188 = AND v12c186(0x1f) v12c152
0x18a0x12c: v12c18a = ISZERO v12c188
0x18b0x12c: v12c18b(0x1a8) = CONST 
0x18e0x12c: JUMPI v12c18b(0x1a8) v12c18a
----------------------------------

Begin block 0x17b0x3ea
prev = {'0x1630x3ea'}, next = {'0x18f0x3ea', '0x1a80x3ea'}
----------------------------------
Block 0x17b0x3ea
0x1840x3ea: v3ea184 = ADD v3ea152 v3ea159
0x1860x3ea: v3ea186(0x1f) = CONST 
0x1880x3ea: v3ea188 = AND v3ea186(0x1f) v3ea152
0x18a0x3ea: v3ea18a = ISZERO v3ea188
0x18b0x3ea: v3ea18b(0x1a8) = CONST 
0x18e0x3ea: JUMPI v3ea18b(0x1a8) v3ea18a
----------------------------------

Begin block 0x18f0x12c
prev = {'0x17b0x12c'}, next = {'0x1a80x12c'}
----------------------------------
Block 0x18f0x12c
0x1910x12c: v12c191 = SUB v12c184 v12c188
0x1930x12c: v12c193 = MLOAD v12c191
0x1940x12c: v12c194(0x1) = CONST 
0x1970x12c: v12c197(0x20) = CONST 
0x1990x12c: v12c199 = SUB v12c197(0x20) v12c188
0x19a0x12c: v12c19a(0x100) = CONST 
0x19d0x12c: v12c19d = EXP v12c19a(0x100) v12c199
0x19e0x12c: v12c19e = SUB v12c19d v12c194(0x1)
0x19f0x12c: v12c19f = NOT v12c19e
0x1a00x12c: v12c1a0 = AND v12c19f v12c193
0x1a20x12c: MSTORE v12c191 v12c1a0
0x1a30x12c: v12c1a3(0x20) = CONST 
0x1a50x12c: v12c1a5 = ADD v12c1a3(0x20) v12c191
----------------------------------

Begin block 0x18f0x3ea
prev = {'0x17b0x3ea'}, next = {'0x1a80x3ea'}
----------------------------------
Block 0x18f0x3ea
0x1910x3ea: v3ea191 = SUB v3ea184 v3ea188
0x1930x3ea: v3ea193 = MLOAD v3ea191
0x1940x3ea: v3ea194(0x1) = CONST 
0x1970x3ea: v3ea197(0x20) = CONST 
0x1990x3ea: v3ea199 = SUB v3ea197(0x20) v3ea188
0x19a0x3ea: v3ea19a(0x100) = CONST 
0x19d0x3ea: v3ea19d = EXP v3ea19a(0x100) v3ea199
0x19e0x3ea: v3ea19e = SUB v3ea19d v3ea194(0x1)
0x19f0x3ea: v3ea19f = NOT v3ea19e
0x1a00x3ea: v3ea1a0 = AND v3ea19f v3ea193
0x1a20x3ea: MSTORE v3ea191 v3ea1a0
0x1a30x3ea: v3ea1a3(0x20) = CONST 
0x1a50x3ea: v3ea1a5 = ADD v3ea1a3(0x20) v3ea191
----------------------------------

Begin block 0x1a80x12c
prev = {'0x18f0x12c', '0x17b0x12c'}, next = {}
----------------------------------
Block 0x1a80x12c
0x1a80x12c_0x1: v1a812c_1 = PHI v12c184 v12c1a5
0x1ae0x12c: v12c1ae(0x40) = CONST 
0x1b00x12c: v12c1b0 = MLOAD v12c1ae(0x40)
0x1b30x12c: v12c1b3 = SUB v1a812c_1 v12c1b0
0x1b50x12c: RETURN v12c1b0 v12c1b3
----------------------------------

Begin block 0x1a80x3ea
prev = {'0x17b0x3ea', '0x18f0x3ea'}, next = {}
----------------------------------
Block 0x1a80x3ea
0x1a80x3ea_0x1: v1a83ea_1 = PHI v3ea184 v3ea1a5
0x1ae0x3ea: v3ea1ae(0x40) = CONST 
0x1b00x3ea: v3ea1b0 = MLOAD v3ea1ae(0x40)
0x1b30x3ea: v3ea1b3 = SUB v1a83ea_1 v3ea1b0
0x1b50x3ea: RETURN v3ea1b0 v3ea1b3
----------------------------------

Begin block 0x1b6
prev = {}, next = {'0x1be', '0x1c2'}
----------------------------------
function approve(address,uint256)()
Block 0x1b6
0x1b7: v1b7 = CALLVALUE 
0x1b9: v1b9 = ISZERO v1b7
0x1ba: v1ba(0x1c2) = CONST 
0x1bd: JUMPI v1ba(0x1c2) v1b9
----------------------------------

Begin block 0x1be
prev = {'0x1b6'}, next = {}
----------------------------------
Block 0x1be
0x1be: v1be(0x0) = CONST 
0x1c1: REVERT v1be(0x0) v1be(0x0)
----------------------------------

Begin block 0x1c2
prev = {'0x1b6'}, next = {'0x1d9', '0x1d5'}
----------------------------------
Block 0x1c2
0x1c4: v1c4(0x1ef) = CONST 
0x1c7: v1c7(0x4) = CONST 
0x1ca: v1ca = CALLDATASIZE 
0x1cb: v1cb = SUB v1ca v1c7(0x4)
0x1cc: v1cc(0x40) = CONST 
0x1cf: v1cf = LT v1cb v1cc(0x40)
0x1d0: v1d0 = ISZERO v1cf
0x1d1: v1d1(0x1d9) = CONST 
0x1d4: JUMPI v1d1(0x1d9) v1d0
----------------------------------

Begin block 0x1d5
prev = {'0x1c2'}, next = {}
----------------------------------
Block 0x1d5
0x1d5: v1d5(0x0) = CONST 
0x1d8: REVERT v1d5(0x0) v1d5(0x0)
----------------------------------

Begin block 0x1d9
prev = {'0x1c2'}, next = {'0x5f7'}
----------------------------------
Block 0x1d9
0x1db: v1db(0x1) = CONST 
0x1dd: v1dd(0xa0) = CONST 
0x1df: v1df(0x2) = CONST 
0x1e1: v1e1(0x10000000000000000000000000000000000000000) = EXP v1df(0x2) v1dd(0xa0)
0x1e2: v1e2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1e1(0x10000000000000000000000000000000000000000) v1db(0x1)
0x1e4: v1e4 = CALLDATALOAD v1c7(0x4)
0x1e5: v1e5 = AND v1e4 v1e2(0xffffffffffffffffffffffffffffffffffffffff)
0x1e7: v1e7(0x20) = CONST 
0x1e9: v1e9 = ADD v1e7(0x20) v1c7(0x4)
0x1ea: v1ea = CALLDATALOAD v1e9
0x1eb: v1eb(0x5f7) = CONST 
0x1ee: JUMP v1eb(0x5f7)
----------------------------------

Begin block 0x1ef0x1b6
prev = {'0x6940x1b6'}, next = {}
----------------------------------
Block 0x1ef0x1b6
0x1f00x1b6: v1b61f0(0x40) = CONST 
0x1f30x1b6: v1b61f3 = MLOAD v1b61f0(0x40)
0x1f50x1b6: v1b61f5 = ISZERO v692(0x1)
0x1f60x1b6: v1b61f6 = ISZERO v1b61f5
0x1f80x1b6: MSTORE v1b61f3 v1b61f6
0x1f90x1b6: v1b61f9 = MLOAD v1b61f0(0x40)
0x1fd0x1b6: v1b61fd = SUB v1b61f3 v1b61f9
0x1fe0x1b6: v1b61fe(0x20) = CONST 
0x2000x1b6: v1b6200 = ADD v1b61fe(0x20) v1b61fd
0x2020x1b6: RETURN v1b61f9 v1b6200
----------------------------------

Begin block 0x1ef0x203
prev = {'0x74b'}, next = {}
----------------------------------
Block 0x1ef0x203
0x1f00x203: v2031f0(0x40) = CONST 
0x1f30x203: v2031f3 = MLOAD v2031f0(0x40)
0x1f50x203: v2031f5 = ISZERO v74d
0x1f60x203: v2031f6 = ISZERO v2031f5
0x1f80x203: MSTORE v2031f3 v2031f6
0x1f90x203: v2031f9 = MLOAD v2031f0(0x40)
0x1fd0x203: v2031fd = SUB v2031f3 v2031f9
0x1fe0x203: v2031fe(0x20) = CONST 
0x2000x203: v203200 = ADD v2031fe(0x20) v2031fd
0x2020x203: RETURN v2031f9 v203200
----------------------------------

Begin block 0x1ef0x298
prev = {'0x8aa'}, next = {}
----------------------------------
Block 0x1ef0x298
0x1f00x298: v2981f0(0x40) = CONST 
0x1f30x298: v2981f3 = MLOAD v2981f0(0x40)
0x1f50x298: v2981f5 = ISZERO v903(0x1)
0x1f60x298: v2981f6 = ISZERO v2981f5
0x1f80x298: MSTORE v2981f3 v2981f6
0x1f90x298: v2981f9 = MLOAD v2981f0(0x40)
0x1fd0x298: v2981fd = SUB v2981f3 v2981f9
0x1fe0x298: v2981fe(0x20) = CONST 
0x2000x298: v298200 = ADD v2981fe(0x20) v2981fd
0x2020x298: RETURN v2981f9 v298200
----------------------------------

Begin block 0x1ef0x380
prev = {'0xbaa'}, next = {}
----------------------------------
Block 0x1ef0x380
0x1f00x380: v3801f0(0x40) = CONST 
0x1f30x380: v3801f3 = MLOAD v3801f0(0x40)
0x1f50x380: v3801f5 = ISZERO vbac(0x1)
0x1f60x380: v3801f6 = ISZERO v3801f5
0x1f80x380: MSTORE v3801f3 v3801f6
0x1f90x380: v3801f9 = MLOAD v3801f0(0x40)
0x1fd0x380: v3801fd = SUB v3801f3 v3801f9
0x1fe0x380: v3801fe(0x20) = CONST 
0x2000x380: v380200 = ADD v3801fe(0x20) v3801fd
0x2020x380: RETURN v3801f9 v380200
----------------------------------

Begin block 0x1ef0x447
prev = {'0xcea0x447'}, next = {}
----------------------------------
Block 0x1ef0x447
0x1f00x447: v4471f0(0x40) = CONST 
0x1f30x447: v4471f3 = MLOAD v4471f0(0x40)
0x1f50x447: v4471f5 = ISZERO v447d41(0x1)
0x1f60x447: v4471f6 = ISZERO v4471f5
0x1f80x447: MSTORE v4471f3 v4471f6
0x1f90x447: v4471f9 = MLOAD v4471f0(0x40)
0x1fd0x447: v4471fd = SUB v4471f3 v4471f9
0x1fe0x447: v4471fe(0x20) = CONST 
0x2000x447: v447200 = ADD v4471fe(0x20) v4471fd
0x2020x447: RETURN v4471f9 v447200
----------------------------------

Begin block 0x1ef0x495
prev = {'0xd4e'}, next = {}
----------------------------------
Block 0x1ef0x495
0x1f00x495: v4951f0(0x40) = CONST 
0x1f30x495: v4951f3 = MLOAD v4951f0(0x40)
0x1f50x495: v4951f5 = ISZERO vd69
0x1f60x495: v4951f6 = ISZERO v4951f5
0x1f80x495: MSTORE v4951f3 v4951f6
0x1f90x495: v4951f9 = MLOAD v4951f0(0x40)
0x1fd0x495: v4951fd = SUB v4951f3 v4951f9
0x1fe0x495: v4951fe(0x20) = CONST 
0x2000x495: v495200 = ADD v4951fe(0x20) v4951fd
0x2020x495: RETURN v4951f9 v495200
----------------------------------

Begin block 0x203
prev = {}, next = {'0x20f', '0x20b'}
----------------------------------
function transferOtherERC20Assets(address,uint256)()
Block 0x203
0x204: v204 = CALLVALUE 
0x206: v206 = ISZERO v204
0x207: v207(0x20f) = CONST 
0x20a: JUMPI v207(0x20f) v206
----------------------------------

Begin block 0x20b
prev = {'0x203'}, next = {}
----------------------------------
Block 0x20b
0x20b: v20b(0x0) = CONST 
0x20e: REVERT v20b(0x0) v20b(0x0)
----------------------------------

Begin block 0x20f
prev = {'0x203'}, next = {'0x222', '0x226'}
----------------------------------
Block 0x20f
0x211: v211(0x1ef) = CONST 
0x214: v214(0x4) = CONST 
0x217: v217 = CALLDATASIZE 
0x218: v218 = SUB v217 v214(0x4)
0x219: v219(0x40) = CONST 
0x21c: v21c = LT v218 v219(0x40)
0x21d: v21d = ISZERO v21c
0x21e: v21e(0x226) = CONST 
0x221: JUMPI v21e(0x226) v21d
----------------------------------

Begin block 0x222
prev = {'0x20f'}, next = {}
----------------------------------
Block 0x222
0x222: v222(0x0) = CONST 
0x225: REVERT v222(0x0) v222(0x0)
----------------------------------

Begin block 0x226
prev = {'0x20f'}, next = {'0x69a'}
----------------------------------
Block 0x226
0x228: v228(0x1) = CONST 
0x22a: v22a(0xa0) = CONST 
0x22c: v22c(0x2) = CONST 
0x22e: v22e(0x10000000000000000000000000000000000000000) = EXP v22c(0x2) v22a(0xa0)
0x22f: v22f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v22e(0x10000000000000000000000000000000000000000) v228(0x1)
0x231: v231 = CALLDATALOAD v214(0x4)
0x232: v232 = AND v231 v22f(0xffffffffffffffffffffffffffffffffffffffff)
0x234: v234(0x20) = CONST 
0x236: v236 = ADD v234(0x20) v214(0x4)
0x237: v237 = CALLDATALOAD v236
0x238: v238(0x69a) = CONST 
0x23b: JUMP v238(0x69a)
----------------------------------

Begin block 0x23c
prev = {}, next = {'0x244', '0x248'}
----------------------------------
function totalSupply()()
Block 0x23c
0x23d: v23d = CALLVALUE 
0x23f: v23f = ISZERO v23d
0x240: v240(0x248) = CONST 
0x243: JUMPI v240(0x248) v23f
----------------------------------

Begin block 0x244
prev = {'0x23c'}, next = {}
----------------------------------
Block 0x244
0x244: v244(0x0) = CONST 
0x247: REVERT v244(0x0) v244(0x0)
----------------------------------

Begin block 0x248
prev = {'0x23c'}, next = {'0x754'}
----------------------------------
Block 0x248
0x24a: v24a(0x251) = CONST 
0x24d: v24d(0x754) = CONST 
0x250: JUMP v24d(0x754)
----------------------------------

Begin block 0x2510x23c
prev = {'0x754'}, next = {}
----------------------------------
Block 0x2510x23c
0x2520x23c: v23c252(0x40) = CONST 
0x2550x23c: v23c255 = MLOAD v23c252(0x40)
0x2580x23c: MSTORE v23c255 v783
0x2590x23c: v23c259 = MLOAD v23c252(0x40)
0x25d0x23c: v23c25d = SUB v23c255 v23c259
0x25e0x23c: v23c25e(0x20) = CONST 
0x2600x23c: v23c260 = ADD v23c25e(0x20) v23c25d
0x2620x23c: RETURN v23c259 v23c260
----------------------------------

Begin block 0x2510x34d
prev = {'0xb34'}, next = {}
----------------------------------
Block 0x2510x34d
0x2520x34d: v34d252(0x40) = CONST 
0x2550x34d: v34d255 = MLOAD v34d252(0x40)
0x2580x34d: MSTORE v34d255 vb4c
0x2590x34d: v34d259 = MLOAD v34d252(0x40)
0x25d0x34d: v34d25d = SUB v34d255 v34d259
0x25e0x34d: v34d25e(0x20) = CONST 
0x2600x34d: v34d260 = ADD v34d25e(0x20) v34d25d
0x2620x34d: RETURN v34d259 v34d260
----------------------------------

Begin block 0x2510x432
prev = {'0xc7e'}, next = {}
----------------------------------
Block 0x2510x432
0x2520x432: v432252(0x40) = CONST 
0x2550x432: v432255 = MLOAD v432252(0x40)
0x2580x432: MSTORE v432255 vc81
0x2590x432: v432259 = MLOAD v432252(0x40)
0x25d0x432: v43225d = SUB v432255 v432259
0x25e0x432: v43225e(0x20) = CONST 
0x2600x432: v432260 = ADD v43225e(0x20) v43225d
0x2620x432: RETURN v432259 v432260
----------------------------------

Begin block 0x2510x480
prev = {'0xd48'}, next = {}
----------------------------------
Block 0x2510x480
0x2520x480: v480252(0x40) = CONST 
0x2550x480: v480255 = MLOAD v480252(0x40)
0x2580x480: MSTORE v480255 vd4b
0x2590x480: v480259 = MLOAD v480252(0x40)
0x25d0x480: v48025d = SUB v480255 v480259
0x25e0x480: v48025e(0x20) = CONST 
0x2600x480: v480260 = ADD v48025e(0x20) v48025d
0x2620x480: RETURN v480259 v480260
----------------------------------

Begin block 0x2510x4fb
prev = {'0xd9a'}, next = {}
----------------------------------
Block 0x2510x4fb
0x2520x4fb: v4fb252(0x40) = CONST 
0x2550x4fb: v4fb255 = MLOAD v4fb252(0x40)
0x2580x4fb: MSTORE v4fb255 vdc2
0x2590x4fb: v4fb259 = MLOAD v4fb252(0x40)
0x25d0x4fb: v4fb25d = SUB v4fb255 v4fb259
0x25e0x4fb: v4fb25e(0x20) = CONST 
0x2600x4fb: v4fb260 = ADD v4fb25e(0x20) v4fb25d
0x2620x4fb: RETURN v4fb259 v4fb260
----------------------------------

Begin block 0x263
prev = {}, next = {'0x26f', '0x26b'}
----------------------------------
function RegisterShareholder(address)()
Block 0x263
0x264: v264 = CALLVALUE 
0x266: v266 = ISZERO v264
0x267: v267(0x26f) = CONST 
0x26a: JUMPI v267(0x26f) v266
----------------------------------

Begin block 0x26b
prev = {'0x263'}, next = {}
----------------------------------
Block 0x26b
0x26b: v26b(0x0) = CONST 
0x26e: REVERT v26b(0x0) v26b(0x0)
----------------------------------

Begin block 0x26f
prev = {'0x263'}, next = {'0x282', '0x286'}
----------------------------------
Block 0x26f
0x271: v271(0x296) = CONST 
0x274: v274(0x4) = CONST 
0x277: v277 = CALLDATASIZE 
0x278: v278 = SUB v277 v274(0x4)
0x279: v279(0x20) = CONST 
0x27c: v27c = LT v278 v279(0x20)
0x27d: v27d = ISZERO v27c
0x27e: v27e(0x286) = CONST 
0x281: JUMPI v27e(0x286) v27d
----------------------------------

Begin block 0x282
prev = {'0x26f'}, next = {}
----------------------------------
Block 0x282
0x282: v282(0x0) = CONST 
0x285: REVERT v282(0x0) v282(0x0)
----------------------------------

Begin block 0x286
prev = {'0x26f'}, next = {'0x7860x263'}
----------------------------------
Block 0x286
0x288: v288 = CALLDATALOAD v274(0x4)
0x289: v289(0x1) = CONST 
0x28b: v28b(0xa0) = CONST 
0x28d: v28d(0x2) = CONST 
0x28f: v28f(0x10000000000000000000000000000000000000000) = EXP v28d(0x2) v28b(0xa0)
0x290: v290(0xffffffffffffffffffffffffffffffffffffffff) = SUB v28f(0x10000000000000000000000000000000000000000) v289(0x1)
0x291: v291 = AND v290(0xffffffffffffffffffffffffffffffffffffffff) v288
0x292: v292(0x786) = CONST 
0x295: JUMP v292(0x786)
----------------------------------

Begin block 0x2960x263
prev = {'0x79d0x263'}, next = {}
----------------------------------
Block 0x2960x263
0x2970x263: STOP 
----------------------------------

Begin block 0x2960x2db
prev = {'0xa2e'}, next = {}
----------------------------------
Block 0x2960x2db
0x2970x2db: STOP 
----------------------------------

Begin block 0x2960x305
prev = {'0xaa1'}, next = {}
----------------------------------
Block 0x2960x305
0x2970x305: STOP 
----------------------------------

Begin block 0x2960x3ff
prev = {'0xc35'}, next = {}
----------------------------------
Block 0x2960x3ff
0x2970x3ff: STOP 
----------------------------------

Begin block 0x2960x4c8
prev = {'0xd970x4c8'}, next = {}
----------------------------------
Block 0x2960x4c8
0x2970x4c8: STOP 
----------------------------------

Begin block 0x2960x536
prev = {'0xe3b'}, next = {}
----------------------------------
Block 0x2960x536
0x2970x536: STOP 
----------------------------------

Begin block 0x298
prev = {}, next = {'0x2a4', '0x2a0'}
----------------------------------
function transferFrom(address,address,uint256)()
Block 0x298
0x299: v299 = CALLVALUE 
0x29b: v29b = ISZERO v299
0x29c: v29c(0x2a4) = CONST 
0x29f: JUMPI v29c(0x2a4) v29b
----------------------------------

Begin block 0x2a0
prev = {'0x298'}, next = {}
----------------------------------
Block 0x2a0
0x2a0: v2a0(0x0) = CONST 
0x2a3: REVERT v2a0(0x0) v2a0(0x0)
----------------------------------

Begin block 0x2a4
prev = {'0x298'}, next = {'0x2bb', '0x2b7'}
----------------------------------
Block 0x2a4
0x2a6: v2a6(0x1ef) = CONST 
0x2a9: v2a9(0x4) = CONST 
0x2ac: v2ac = CALLDATASIZE 
0x2ad: v2ad = SUB v2ac v2a9(0x4)
0x2ae: v2ae(0x60) = CONST 
0x2b1: v2b1 = LT v2ad v2ae(0x60)
0x2b2: v2b2 = ISZERO v2b1
0x2b3: v2b3(0x2bb) = CONST 
0x2b6: JUMPI v2b3(0x2bb) v2b2
----------------------------------

Begin block 0x2b7
prev = {'0x2a4'}, next = {}
----------------------------------
Block 0x2b7
0x2b7: v2b7(0x0) = CONST 
0x2ba: REVERT v2b7(0x0) v2b7(0x0)
----------------------------------

Begin block 0x2bb
prev = {'0x2a4'}, next = {'0x7ec'}
----------------------------------
Block 0x2bb
0x2bd: v2bd(0x1) = CONST 
0x2bf: v2bf(0xa0) = CONST 
0x2c1: v2c1(0x2) = CONST 
0x2c3: v2c3(0x10000000000000000000000000000000000000000) = EXP v2c1(0x2) v2bf(0xa0)
0x2c4: v2c4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c3(0x10000000000000000000000000000000000000000) v2bd(0x1)
0x2c6: v2c6 = CALLDATALOAD v2a9(0x4)
0x2c8: v2c8 = AND v2c4(0xffffffffffffffffffffffffffffffffffffffff) v2c6
0x2ca: v2ca(0x20) = CONST 
0x2cd: v2cd = ADD v2a9(0x4) v2ca(0x20)
0x2ce: v2ce = CALLDATALOAD v2cd
0x2d1: v2d1 = AND v2c4(0xffffffffffffffffffffffffffffffffffffffff) v2ce
0x2d3: v2d3(0x40) = CONST 
0x2d5: v2d5 = ADD v2d3(0x40) v2a9(0x4)
0x2d6: v2d6 = CALLDATALOAD v2d5
0x2d7: v2d7(0x7ec) = CONST 
0x2da: JUMP v2d7(0x7ec)
----------------------------------

Begin block 0x2db
prev = {}, next = {'0x2e3', '0x2e7'}
----------------------------------
function refund(uint256)()
Block 0x2db
0x2dc: v2dc = CALLVALUE 
0x2de: v2de = ISZERO v2dc
0x2df: v2df(0x2e7) = CONST 
0x2e2: JUMPI v2df(0x2e7) v2de
----------------------------------

Begin block 0x2e3
prev = {'0x2db'}, next = {}
----------------------------------
Block 0x2e3
0x2e3: v2e3(0x0) = CONST 
0x2e6: REVERT v2e3(0x0) v2e3(0x0)
----------------------------------

Begin block 0x2e7
prev = {'0x2db'}, next = {'0x2fe', '0x2fa'}
----------------------------------
Block 0x2e7
0x2e9: v2e9(0x296) = CONST 
0x2ec: v2ec(0x4) = CONST 
0x2ef: v2ef = CALLDATASIZE 
0x2f0: v2f0 = SUB v2ef v2ec(0x4)
0x2f1: v2f1(0x20) = CONST 
0x2f4: v2f4 = LT v2f0 v2f1(0x20)
0x2f5: v2f5 = ISZERO v2f4
0x2f6: v2f6(0x2fe) = CONST 
0x2f9: JUMPI v2f6(0x2fe) v2f5
----------------------------------

Begin block 0x2fa
prev = {'0x2e7'}, next = {}
----------------------------------
Block 0x2fa
0x2fa: v2fa(0x0) = CONST 
0x2fd: REVERT v2fa(0x0) v2fa(0x0)
----------------------------------

Begin block 0x2fe
prev = {'0x2e7'}, next = {'0x90b'}
----------------------------------
Block 0x2fe
0x300: v300 = CALLDATALOAD v2ec(0x4)
0x301: v301(0x90b) = CONST 
0x304: JUMP v301(0x90b)
----------------------------------

Begin block 0x305
prev = {}, next = {'0xa32'}
----------------------------------
function accept()()
Block 0x305
0x306: v306(0x296) = CONST 
0x309: v309(0xa32) = CONST 
0x30c: JUMP v309(0xa32)
----------------------------------

Begin block 0x30d
prev = {}, next = {'0x315', '0x319'}
----------------------------------
function DissolveBusiness()()
Block 0x30d
0x30e: v30e = CALLVALUE 
0x310: v310 = ISZERO v30e
0x311: v311(0x319) = CONST 
0x314: JUMPI v311(0x319) v310
----------------------------------

Begin block 0x315
prev = {'0x30d'}, next = {}
----------------------------------
Block 0x315
0x315: v315(0x0) = CONST 
0x318: REVERT v315(0x0) v315(0x0)
----------------------------------

Begin block 0x319
prev = {'0x30d'}, next = {'0xb11'}
----------------------------------
Block 0x319
0x31b: v31b(0x296) = CONST 
0x31e: v31e(0xb11) = CONST 
0x321: JUMP v31e(0xb11)
----------------------------------

Begin block 0x322
prev = {}, next = {'0x32e', '0x32a'}
----------------------------------
function decimals()()
Block 0x322
0x323: v323 = CALLVALUE 
0x325: v325 = ISZERO v323
0x326: v326(0x32e) = CONST 
0x329: JUMPI v326(0x32e) v325
----------------------------------

Begin block 0x32a
prev = {'0x322'}, next = {}
----------------------------------
Block 0x32a
0x32a: v32a(0x0) = CONST 
0x32d: REVERT v32a(0x0) v32a(0x0)
----------------------------------

Begin block 0x32e
prev = {'0x322'}, next = {'0xb2b'}
----------------------------------
Block 0x32e
0x330: v330(0x337) = CONST 
0x333: v333(0xb2b) = CONST 
0x336: JUMP v333(0xb2b)
----------------------------------

Begin block 0x337
prev = {'0xb2b'}, next = {}
----------------------------------
Block 0x337
0x338: v338(0x40) = CONST 
0x33b: v33b = MLOAD v338(0x40)
0x33c: v33c(0xff) = CONST 
0x340: v340 = AND vb31 v33c(0xff)
0x342: MSTORE v33b v340
0x343: v343 = MLOAD v338(0x40)
0x347: v347 = SUB v33b v343
0x348: v348(0x20) = CONST 
0x34a: v34a = ADD v348(0x20) v347
0x34c: RETURN v343 v34a
----------------------------------

Begin block 0x34d
prev = {}, next = {'0x355', '0x359'}
----------------------------------
function balanceOf(address)()
Block 0x34d
0x34e: v34e = CALLVALUE 
0x350: v350 = ISZERO v34e
0x351: v351(0x359) = CONST 
0x354: JUMPI v351(0x359) v350
----------------------------------

Begin block 0x355
prev = {'0x34d'}, next = {}
----------------------------------
Block 0x355
0x355: v355(0x0) = CONST 
0x358: REVERT v355(0x0) v355(0x0)
----------------------------------

Begin block 0x359
prev = {'0x34d'}, next = {'0x36c', '0x370'}
----------------------------------
Block 0x359
0x35b: v35b(0x251) = CONST 
0x35e: v35e(0x4) = CONST 
0x361: v361 = CALLDATASIZE 
0x362: v362 = SUB v361 v35e(0x4)
0x363: v363(0x20) = CONST 
0x366: v366 = LT v362 v363(0x20)
0x367: v367 = ISZERO v366
0x368: v368(0x370) = CONST 
0x36b: JUMPI v368(0x370) v367
----------------------------------

Begin block 0x36c
prev = {'0x359'}, next = {}
----------------------------------
Block 0x36c
0x36c: v36c(0x0) = CONST 
0x36f: REVERT v36c(0x0) v36c(0x0)
----------------------------------

Begin block 0x370
prev = {'0x359'}, next = {'0xb34'}
----------------------------------
Block 0x370
0x372: v372 = CALLDATALOAD v35e(0x4)
0x373: v373(0x1) = CONST 
0x375: v375(0xa0) = CONST 
0x377: v377(0x2) = CONST 
0x379: v379(0x10000000000000000000000000000000000000000) = EXP v377(0x2) v375(0xa0)
0x37a: v37a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v379(0x10000000000000000000000000000000000000000) v373(0x1)
0x37b: v37b = AND v37a(0xffffffffffffffffffffffffffffffffffffffff) v372
0x37c: v37c(0xb34) = CONST 
0x37f: JUMP v37c(0xb34)
----------------------------------

Begin block 0x380
prev = {}, next = {'0x388', '0x38c'}
----------------------------------
function issue(address,uint256)()
Block 0x380
0x381: v381 = CALLVALUE 
0x383: v383 = ISZERO v381
0x384: v384(0x38c) = CONST 
0x387: JUMPI v384(0x38c) v383
----------------------------------

Begin block 0x388
prev = {'0x380'}, next = {}
----------------------------------
Block 0x388
0x388: v388(0x0) = CONST 
0x38b: REVERT v388(0x0) v388(0x0)
----------------------------------

Begin block 0x38c
prev = {'0x380'}, next = {'0x39f', '0x3a3'}
----------------------------------
Block 0x38c
0x38e: v38e(0x1ef) = CONST 
0x391: v391(0x4) = CONST 
0x394: v394 = CALLDATASIZE 
0x395: v395 = SUB v394 v391(0x4)
0x396: v396(0x40) = CONST 
0x399: v399 = LT v395 v396(0x40)
0x39a: v39a = ISZERO v399
0x39b: v39b(0x3a3) = CONST 
0x39e: JUMPI v39b(0x3a3) v39a
----------------------------------

Begin block 0x39f
prev = {'0x38c'}, next = {}
----------------------------------
Block 0x39f
0x39f: v39f(0x0) = CONST 
0x3a2: REVERT v39f(0x0) v39f(0x0)
----------------------------------

Begin block 0x3a3
prev = {'0x38c'}, next = {'0xb4f'}
----------------------------------
Block 0x3a3
0x3a5: v3a5(0x1) = CONST 
0x3a7: v3a7(0xa0) = CONST 
0x3a9: v3a9(0x2) = CONST 
0x3ab: v3ab(0x10000000000000000000000000000000000000000) = EXP v3a9(0x2) v3a7(0xa0)
0x3ac: v3ac(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3ab(0x10000000000000000000000000000000000000000) v3a5(0x1)
0x3ae: v3ae = CALLDATALOAD v391(0x4)
0x3af: v3af = AND v3ae v3ac(0xffffffffffffffffffffffffffffffffffffffff)
0x3b1: v3b1(0x20) = CONST 
0x3b3: v3b3 = ADD v3b1(0x20) v391(0x4)
0x3b4: v3b4 = CALLDATALOAD v3b3
0x3b5: v3b5(0xb4f) = CONST 
0x3b8: JUMP v3b5(0xb4f)
----------------------------------

Begin block 0x3b9
prev = {}, next = {'0x3c5', '0x3c1'}
----------------------------------
function owner()()
Block 0x3b9
0x3ba: v3ba = CALLVALUE 
0x3bc: v3bc = ISZERO v3ba
0x3bd: v3bd(0x3c5) = CONST 
0x3c0: JUMPI v3bd(0x3c5) v3bc
----------------------------------

Begin block 0x3c1
prev = {'0x3b9'}, next = {}
----------------------------------
Block 0x3c1
0x3c1: v3c1(0x0) = CONST 
0x3c4: REVERT v3c1(0x0) v3c1(0x0)
----------------------------------

Begin block 0x3c5
prev = {'0x3b9'}, next = {'0xbb4'}
----------------------------------
Block 0x3c5
0x3c7: v3c7(0x3ce) = CONST 
0x3ca: v3ca(0xbb4) = CONST 
0x3cd: JUMP v3ca(0xbb4)
----------------------------------

Begin block 0x3ce
prev = {'0xbb4'}, next = {}
----------------------------------
Block 0x3ce
0x3cf: v3cf(0x40) = CONST 
0x3d2: v3d2 = MLOAD v3cf(0x40)
0x3d3: v3d3(0x1) = CONST 
0x3d5: v3d5(0xa0) = CONST 
0x3d7: v3d7(0x2) = CONST 
0x3d9: v3d9(0x10000000000000000000000000000000000000000) = EXP v3d7(0x2) v3d5(0xa0)
0x3da: v3da(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3d9(0x10000000000000000000000000000000000000000) v3d3(0x1)
0x3dd: v3dd = AND vbc0 v3da(0xffffffffffffffffffffffffffffffffffffffff)
0x3df: MSTORE v3d2 v3dd
0x3e0: v3e0 = MLOAD v3cf(0x40)
0x3e4: v3e4 = SUB v3d2 v3e0
0x3e5: v3e5(0x20) = CONST 
0x3e7: v3e7 = ADD v3e5(0x20) v3e4
0x3e9: RETURN v3e0 v3e7
----------------------------------

Begin block 0x3ea
prev = {}, next = {'0x3f2', '0x3f6'}
----------------------------------
function symbol()()
Block 0x3ea
0x3eb: v3eb = CALLVALUE 
0x3ed: v3ed = ISZERO v3eb
0x3ee: v3ee(0x3f6) = CONST 
0x3f1: JUMPI v3ee(0x3f6) v3ed
----------------------------------

Begin block 0x3f2
prev = {'0x3ea'}, next = {}
----------------------------------
Block 0x3f2
0x3f2: v3f2(0x0) = CONST 
0x3f5: REVERT v3f2(0x0) v3f2(0x0)
----------------------------------

Begin block 0x3f6
prev = {'0x3ea'}, next = {'0x1410x3ea'}
----------------------------------
Block 0x3f6
0x3f8: v3f8(0x141) = CONST 
0x3fb: v3fb(0xbc3) = CONST 
0x3fe: v3fe_0, v3fe_1 = CALLPRIVATE v3fb(0xbc3) v3f8(0x141)
----------------------------------

Begin block 0x3ff
prev = {}, next = {'0x40b', '0x407'}
----------------------------------
function NevadaBlackBook(address)()
Block 0x3ff
0x400: v400 = CALLVALUE 
0x402: v402 = ISZERO v400
0x403: v403(0x40b) = CONST 
0x406: JUMPI v403(0x40b) v402
----------------------------------

Begin block 0x407
prev = {'0x3ff'}, next = {}
----------------------------------
Block 0x407
0x407: v407(0x0) = CONST 
0x40a: REVERT v407(0x0) v407(0x0)
----------------------------------

Begin block 0x40b
prev = {'0x3ff'}, next = {'0x422', '0x41e'}
----------------------------------
Block 0x40b
0x40d: v40d(0x296) = CONST 
0x410: v410(0x4) = CONST 
0x413: v413 = CALLDATASIZE 
0x414: v414 = SUB v413 v410(0x4)
0x415: v415(0x20) = CONST 
0x418: v418 = LT v414 v415(0x20)
0x419: v419 = ISZERO v418
0x41a: v41a(0x422) = CONST 
0x41d: JUMPI v41a(0x422) v419
----------------------------------

Begin block 0x41e
prev = {'0x40b'}, next = {}
----------------------------------
Block 0x41e
0x41e: v41e(0x0) = CONST 
0x421: REVERT v41e(0x0) v41e(0x0)
----------------------------------

Begin block 0x422
prev = {'0x40b'}, next = {'0xc1e'}
----------------------------------
Block 0x422
0x424: v424 = CALLDATALOAD v410(0x4)
0x425: v425(0x1) = CONST 
0x427: v427(0xa0) = CONST 
0x429: v429(0x2) = CONST 
0x42b: v42b(0x10000000000000000000000000000000000000000) = EXP v429(0x2) v427(0xa0)
0x42c: v42c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v42b(0x10000000000000000000000000000000000000000) v425(0x1)
0x42d: v42d = AND v42c(0xffffffffffffffffffffffffffffffffffffffff) v424
0x42e: v42e(0xc1e) = CONST 
0x431: JUMP v42e(0xc1e)
----------------------------------

Begin block 0x432
prev = {}, next = {'0x43e', '0x43a'}
----------------------------------
function price()()
Block 0x432
0x433: v433 = CALLVALUE 
0x435: v435 = ISZERO v433
0x436: v436(0x43e) = CONST 
0x439: JUMPI v436(0x43e) v435
----------------------------------

Begin block 0x43a
prev = {'0x432'}, next = {}
----------------------------------
Block 0x43a
0x43a: v43a(0x0) = CONST 
0x43d: REVERT v43a(0x0) v43a(0x0)
----------------------------------

Begin block 0x43e
prev = {'0x432'}, next = {'0xc7e'}
----------------------------------
Block 0x43e
0x440: v440(0x251) = CONST 
0x443: v443(0xc7e) = CONST 
0x446: JUMP v443(0xc7e)
----------------------------------

Begin block 0x447
prev = {}, next = {'0x453', '0x44f'}
----------------------------------
function transfer(address,uint256)()
Block 0x447
0x448: v448 = CALLVALUE 
0x44a: v44a = ISZERO v448
0x44b: v44b(0x453) = CONST 
0x44e: JUMPI v44b(0x453) v44a
----------------------------------

Begin block 0x44f
prev = {'0x447'}, next = {}
----------------------------------
Block 0x44f
0x44f: v44f(0x0) = CONST 
0x452: REVERT v44f(0x0) v44f(0x0)
----------------------------------

Begin block 0x453
prev = {'0x447'}, next = {'0x466', '0x46a'}
----------------------------------
Block 0x453
0x455: v455(0x1ef) = CONST 
0x458: v458(0x4) = CONST 
0x45b: v45b = CALLDATASIZE 
0x45c: v45c = SUB v45b v458(0x4)
0x45d: v45d(0x40) = CONST 
0x460: v460 = LT v45c v45d(0x40)
0x461: v461 = ISZERO v460
0x462: v462(0x46a) = CONST 
0x465: JUMPI v462(0x46a) v461
----------------------------------

Begin block 0x466
prev = {'0x453'}, next = {}
----------------------------------
Block 0x466
0x466: v466(0x0) = CONST 
0x469: REVERT v466(0x0) v466(0x0)
----------------------------------

Begin block 0x46a
prev = {'0x453'}, next = {'0xc840x447'}
----------------------------------
Block 0x46a
0x46c: v46c(0x1) = CONST 
0x46e: v46e(0xa0) = CONST 
0x470: v470(0x2) = CONST 
0x472: v472(0x10000000000000000000000000000000000000000) = EXP v470(0x2) v46e(0xa0)
0x473: v473(0xffffffffffffffffffffffffffffffffffffffff) = SUB v472(0x10000000000000000000000000000000000000000) v46c(0x1)
0x475: v475 = CALLDATALOAD v458(0x4)
0x476: v476 = AND v475 v473(0xffffffffffffffffffffffffffffffffffffffff)
0x478: v478(0x20) = CONST 
0x47a: v47a = ADD v478(0x20) v458(0x4)
0x47b: v47b = CALLDATALOAD v47a
0x47c: v47c(0xc84) = CONST 
0x47f: JUMP v47c(0xc84)
----------------------------------

Begin block 0x480
prev = {}, next = {'0x48c', '0x488'}
----------------------------------
function _totalShares()()
Block 0x480
0x481: v481 = CALLVALUE 
0x483: v483 = ISZERO v481
0x484: v484(0x48c) = CONST 
0x487: JUMPI v484(0x48c) v483
----------------------------------

Begin block 0x488
prev = {'0x480'}, next = {}
----------------------------------
Block 0x488
0x488: v488(0x0) = CONST 
0x48b: REVERT v488(0x0) v488(0x0)
----------------------------------

Begin block 0x48c
prev = {'0x480'}, next = {'0xd48'}
----------------------------------
Block 0x48c
0x48e: v48e(0x251) = CONST 
0x491: v491(0xd48) = CONST 
0x494: JUMP v491(0xd48)
----------------------------------

Begin block 0x495
prev = {}, next = {'0x49d', '0x4a1'}
----------------------------------
function isRegulated(address)()
Block 0x495
0x496: v496 = CALLVALUE 
0x498: v498 = ISZERO v496
0x499: v499(0x4a1) = CONST 
0x49c: JUMPI v499(0x4a1) v498
----------------------------------

Begin block 0x49d
prev = {'0x495'}, next = {}
----------------------------------
Block 0x49d
0x49d: v49d(0x0) = CONST 
0x4a0: REVERT v49d(0x0) v49d(0x0)
----------------------------------

Begin block 0x4a1
prev = {'0x495'}, next = {'0x4b8', '0x4b4'}
----------------------------------
Block 0x4a1
0x4a3: v4a3(0x1ef) = CONST 
0x4a6: v4a6(0x4) = CONST 
0x4a9: v4a9 = CALLDATASIZE 
0x4aa: v4aa = SUB v4a9 v4a6(0x4)
0x4ab: v4ab(0x20) = CONST 
0x4ae: v4ae = LT v4aa v4ab(0x20)
0x4af: v4af = ISZERO v4ae
0x4b0: v4b0(0x4b8) = CONST 
0x4b3: JUMPI v4b0(0x4b8) v4af
----------------------------------

Begin block 0x4b4
prev = {'0x4a1'}, next = {}
----------------------------------
Block 0x4b4
0x4b4: v4b4(0x0) = CONST 
0x4b7: REVERT v4b4(0x0) v4b4(0x0)
----------------------------------

Begin block 0x4b8
prev = {'0x4a1'}, next = {'0xd4e'}
----------------------------------
Block 0x4b8
0x4ba: v4ba = CALLDATALOAD v4a6(0x4)
0x4bb: v4bb(0x1) = CONST 
0x4bd: v4bd(0xa0) = CONST 
0x4bf: v4bf(0x2) = CONST 
0x4c1: v4c1(0x10000000000000000000000000000000000000000) = EXP v4bf(0x2) v4bd(0xa0)
0x4c2: v4c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c1(0x10000000000000000000000000000000000000000) v4bb(0x1)
0x4c3: v4c3 = AND v4c2(0xffffffffffffffffffffffffffffffffffffffff) v4ba
0x4c4: v4c4(0xd4e) = CONST 
0x4c7: JUMP v4c4(0xd4e)
----------------------------------

Begin block 0x4c8
prev = {}, next = {'0x4d4', '0x4d0'}
----------------------------------
function ensureRegulated(address)()
Block 0x4c8
0x4c9: v4c9 = CALLVALUE 
0x4cb: v4cb = ISZERO v4c9
0x4cc: v4cc(0x4d4) = CONST 
0x4cf: JUMPI v4cc(0x4d4) v4cb
----------------------------------

Begin block 0x4d0
prev = {'0x4c8'}, next = {}
----------------------------------
Block 0x4d0
0x4d0: v4d0(0x0) = CONST 
0x4d3: REVERT v4d0(0x0) v4d0(0x0)
----------------------------------

Begin block 0x4d4
prev = {'0x4c8'}, next = {'0x4eb', '0x4e7'}
----------------------------------
Block 0x4d4
0x4d6: v4d6(0x296) = CONST 
0x4d9: v4d9(0x4) = CONST 
0x4dc: v4dc = CALLDATASIZE 
0x4dd: v4dd = SUB v4dc v4d9(0x4)
0x4de: v4de(0x20) = CONST 
0x4e1: v4e1 = LT v4dd v4de(0x20)
0x4e2: v4e2 = ISZERO v4e1
0x4e3: v4e3(0x4eb) = CONST 
0x4e6: JUMPI v4e3(0x4eb) v4e2
----------------------------------

Begin block 0x4e7
prev = {'0x4d4'}, next = {}
----------------------------------
Block 0x4e7
0x4e7: v4e7(0x0) = CONST 
0x4ea: REVERT v4e7(0x0) v4e7(0x0)
----------------------------------

Begin block 0x4eb
prev = {'0x4d4'}, next = {'0xd6c0x4c8'}
----------------------------------
Block 0x4eb
0x4ed: v4ed = CALLDATALOAD v4d9(0x4)
0x4ee: v4ee(0x1) = CONST 
0x4f0: v4f0(0xa0) = CONST 
0x4f2: v4f2(0x2) = CONST 
0x4f4: v4f4(0x10000000000000000000000000000000000000000) = EXP v4f2(0x2) v4f0(0xa0)
0x4f5: v4f5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4f4(0x10000000000000000000000000000000000000000) v4ee(0x1)
0x4f6: v4f6 = AND v4f5(0xffffffffffffffffffffffffffffffffffffffff) v4ed
0x4f7: v4f7(0xd6c) = CONST 
0x4fa: JUMP v4f7(0xd6c)
----------------------------------

Begin block 0x4fb
prev = {}, next = {'0x503', '0x507'}
----------------------------------
function allowance(address,address)()
Block 0x4fb
0x4fc: v4fc = CALLVALUE 
0x4fe: v4fe = ISZERO v4fc
0x4ff: v4ff(0x507) = CONST 
0x502: JUMPI v4ff(0x507) v4fe
----------------------------------

Begin block 0x503
prev = {'0x4fb'}, next = {}
----------------------------------
Block 0x503
0x503: v503(0x0) = CONST 
0x506: REVERT v503(0x0) v503(0x0)
----------------------------------

Begin block 0x507
prev = {'0x4fb'}, next = {'0x51e', '0x51a'}
----------------------------------
Block 0x507
0x509: v509(0x251) = CONST 
0x50c: v50c(0x4) = CONST 
0x50f: v50f = CALLDATASIZE 
0x510: v510 = SUB v50f v50c(0x4)
0x511: v511(0x40) = CONST 
0x514: v514 = LT v510 v511(0x40)
0x515: v515 = ISZERO v514
0x516: v516(0x51e) = CONST 
0x519: JUMPI v516(0x51e) v515
----------------------------------

Begin block 0x51a
prev = {'0x507'}, next = {}
----------------------------------
Block 0x51a
0x51a: v51a(0x0) = CONST 
0x51d: REVERT v51a(0x0) v51a(0x0)
----------------------------------

Begin block 0x51e
prev = {'0x507'}, next = {'0xd9a'}
----------------------------------
Block 0x51e
0x520: v520(0x1) = CONST 
0x522: v522(0xa0) = CONST 
0x524: v524(0x2) = CONST 
0x526: v526(0x10000000000000000000000000000000000000000) = EXP v524(0x2) v522(0xa0)
0x527: v527(0xffffffffffffffffffffffffffffffffffffffff) = SUB v526(0x10000000000000000000000000000000000000000) v520(0x1)
0x529: v529 = CALLDATALOAD v50c(0x4)
0x52b: v52b = AND v527(0xffffffffffffffffffffffffffffffffffffffff) v529
0x52d: v52d(0x20) = CONST 
0x52f: v52f = ADD v52d(0x20) v50c(0x4)
0x530: v530 = CALLDATALOAD v52f
0x531: v531 = AND v530 v527(0xffffffffffffffffffffffffffffffffffffffff)
0x532: v532(0xd9a) = CONST 
0x535: JUMP v532(0xd9a)
----------------------------------

Begin block 0x536
prev = {}, next = {'0x542', '0x53e'}
----------------------------------
function transferOwnership(address)()
Block 0x536
0x537: v537 = CALLVALUE 
0x539: v539 = ISZERO v537
0x53a: v53a(0x542) = CONST 
0x53d: JUMPI v53a(0x542) v539
----------------------------------

Begin block 0x53e
prev = {'0x536'}, next = {}
----------------------------------
Block 0x53e
0x53e: v53e(0x0) = CONST 
0x541: REVERT v53e(0x0) v53e(0x0)
----------------------------------

Begin block 0x542
prev = {'0x536'}, next = {'0x559', '0x555'}
----------------------------------
Block 0x542
0x544: v544(0x296) = CONST 
0x547: v547(0x4) = CONST 
0x54a: v54a = CALLDATASIZE 
0x54b: v54b = SUB v54a v547(0x4)
0x54c: v54c(0x20) = CONST 
0x54f: v54f = LT v54b v54c(0x20)
0x550: v550 = ISZERO v54f
0x551: v551(0x559) = CONST 
0x554: JUMPI v551(0x559) v550
----------------------------------

Begin block 0x555
prev = {'0x542'}, next = {}
----------------------------------
Block 0x555
0x555: v555(0x0) = CONST 
0x558: REVERT v555(0x0) v555(0x0)
----------------------------------

Begin block 0x559
prev = {'0x542'}, next = {'0xdc5'}
----------------------------------
Block 0x559
0x55b: v55b = CALLDATALOAD v547(0x4)
0x55c: v55c(0x1) = CONST 
0x55e: v55e(0xa0) = CONST 
0x560: v560(0x2) = CONST 
0x562: v562(0x10000000000000000000000000000000000000000) = EXP v560(0x2) v55e(0xa0)
0x563: v563(0xffffffffffffffffffffffffffffffffffffffff) = SUB v562(0x10000000000000000000000000000000000000000) v55c(0x1)
0x564: v564 = AND v563(0xffffffffffffffffffffffffffffffffffffffff) v55b
0x565: v565(0xdc5) = CONST 
0x568: JUMP v565(0xdc5)
----------------------------------

Begin block 0x569
prev = {}, next = {'0x5a9', '0x5ef0x569'}
----------------------------------
function 0x569(v569arg0)
Block 0x569
0x56a: v56a(0x7) = CONST 
0x56d: v56d = SLOAD v56a(0x7)
0x56e: v56e(0x40) = CONST 
0x571: v571 = MLOAD v56e(0x40)
0x572: v572(0x20) = CONST 
0x574: v574(0x2) = CONST 
0x576: v576(0x1) = CONST 
0x579: v579 = AND v56d v576(0x1)
0x57a: v57a = ISZERO v579
0x57b: v57b(0x100) = CONST 
0x57e: v57e = MUL v57b(0x100) v57a
0x57f: v57f(0x0) = CONST 
0x581: v581(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v57f(0x0)
0x582: v582 = ADD v581(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v57e
0x585: v585 = AND v56d v582
0x589: v589 = DIV v585 v574(0x2)
0x58a: v58a(0x1f) = CONST 
0x58d: v58d = ADD v589 v58a(0x1f)
0x590: v590 = DIV v58d v572(0x20)
0x592: v592 = MUL v572(0x20) v590
0x594: v594 = ADD v571 v592
0x596: v596 = ADD v572(0x20) v594
0x599: MSTORE v56e(0x40) v596
0x59c: MSTORE v571 v589
0x5a0: v5a0 = ADD v571 v572(0x20)
0x5a4: v5a4 = ISZERO v589
0x5a5: v5a5(0x5ef) = CONST 
0x5a8: JUMPI v5a5(0x5ef) v5a4
----------------------------------

Begin block 0x5a9
prev = {'0x569'}, next = {'0x5b1', '0x5c40x569'}
----------------------------------
Block 0x5a9
0x5aa: v5aa(0x1f) = CONST 
0x5ac: v5ac = LT v5aa(0x1f) v589
0x5ad: v5ad(0x5c4) = CONST 
0x5b0: JUMPI v5ad(0x5c4) v5ac
----------------------------------

Begin block 0x5b1
prev = {'0x5a9'}, next = {'0x5ef0x569'}
----------------------------------
Block 0x5b1
0x5b1: v5b1(0x100) = CONST 
0x5b6: v5b6 = SLOAD v56a(0x7)
0x5b7: v5b7 = DIV v5b6 v5b1(0x100)
0x5b8: v5b8 = MUL v5b7 v5b1(0x100)
0x5ba: MSTORE v5a0 v5b8
0x5bc: v5bc(0x20) = CONST 
0x5be: v5be = ADD v5bc(0x20) v5a0
0x5c0: v5c0(0x5ef) = CONST 
0x5c3: JUMP v5c0(0x5ef)
----------------------------------

Begin block 0x5c40x569
prev = {'0x5a9'}, next = {'0x5d20x569'}
----------------------------------
Block 0x5c40x569
0x5c60x569: v5695c6 = ADD v5a0 v589
0x5c90x569: v5695c9(0x0) = CONST 
0x5cb0x569: MSTORE v5695c9(0x0) v56a(0x7)
0x5cc0x569: v5695cc(0x20) = CONST 
0x5ce0x569: v5695ce(0x0) = CONST 
0x5d00x569: v5695d0 = SHA3 v5695ce(0x0) v5695cc(0x20)
----------------------------------

Begin block 0x5c40xbc3
prev = {'0xc03'}, next = {'0x5d20xbc3'}
----------------------------------
Block 0x5c40xbc3
0x5c60xbc3: vbc35c6 = ADD vbfa vbe3
0x5c90xbc3: vbc35c9(0x0) = CONST 
0x5cb0xbc3: MSTORE vbc35c9(0x0) vbc4(0x6)
0x5cc0xbc3: vbc35cc(0x20) = CONST 
0x5ce0xbc3: vbc35ce(0x0) = CONST 
0x5d00xbc3: vbc35d0 = SHA3 vbc35ce(0x0) vbc35cc(0x20)
----------------------------------

Begin block 0x5d20x569
prev = {'0x5d20x569', '0x5c40x569'}, next = {'0x5e60x569', '0x5d20x569'}
----------------------------------
Block 0x5d20x569
0x5d20x569_0x0: v5d2569_0 = PHI v5a0 v5695de
0x5d20x569_0x1: v5d2569_1 = PHI v5695da v5695d0
0x5d40x569: v5695d4 = SLOAD v5d2569_1
0x5d60x569: MSTORE v5d2569_0 v5695d4
0x5d80x569: v5695d8(0x1) = CONST 
0x5da0x569: v5695da = ADD v5695d8(0x1) v5d2569_1
0x5dc0x569: v5695dc(0x20) = CONST 
0x5de0x569: v5695de = ADD v5695dc(0x20) v5d2569_0
0x5e10x569: v5695e1 = GT v5695c6 v5695de
0x5e20x569: v5695e2(0x5d2) = CONST 
0x5e50x569: JUMPI v5695e2(0x5d2) v5695e1
----------------------------------

Begin block 0x5d20xbc3
prev = {'0x5c40xbc3', '0x5d20xbc3'}, next = {'0x5e60xbc3', '0x5d20xbc3'}
----------------------------------
Block 0x5d20xbc3
0x5d20xbc3_0x0: v5d2bc3_0 = PHI vbfa vbc35de
0x5d20xbc3_0x1: v5d2bc3_1 = PHI vbc35da vbc35d0
0x5d40xbc3: vbc35d4 = SLOAD v5d2bc3_1
0x5d60xbc3: MSTORE v5d2bc3_0 vbc35d4
0x5d80xbc3: vbc35d8(0x1) = CONST 
0x5da0xbc3: vbc35da = ADD vbc35d8(0x1) v5d2bc3_1
0x5dc0xbc3: vbc35dc(0x20) = CONST 
0x5de0xbc3: vbc35de = ADD vbc35dc(0x20) v5d2bc3_0
0x5e10xbc3: vbc35e1 = GT vbc35c6 vbc35de
0x5e20xbc3: vbc35e2(0x5d2) = CONST 
0x5e50xbc3: JUMPI vbc35e2(0x5d2) vbc35e1
----------------------------------

Begin block 0x5e60x569
prev = {'0x5d20x569'}, next = {'0x5ef0x569'}
----------------------------------
Block 0x5e60x569
0x5e80x569: v5695e8 = SUB v5695de v5695c6
0x5e90x569: v5695e9(0x1f) = CONST 
0x5eb0x569: v5695eb = AND v5695e9(0x1f) v5695e8
0x5ed0x569: v5695ed = ADD v5695c6 v5695eb
----------------------------------

Begin block 0x5e60xbc3
prev = {'0x5d20xbc3'}, next = {'0x5ef0xbc3'}
----------------------------------
Block 0x5e60xbc3
0x5e80xbc3: vbc35e8 = SUB vbc35de vbc35c6
0x5e90xbc3: vbc35e9(0x1f) = CONST 
0x5eb0xbc3: vbc35eb = AND vbc35e9(0x1f) vbc35e8
0x5ed0xbc3: vbc35ed = ADD vbc35c6 vbc35eb
----------------------------------

Begin block 0x5ef0x569
prev = {'0x5b1', '0x5e60x569', '0x569'}, next = {}
----------------------------------
Block 0x5ef0x569
0x5f60x569: RETURNPRIVATE v569arg0 v571 v569arg0
----------------------------------

Begin block 0x5ef0xbc3
prev = {'0xc0b', '0xbc3', '0x5e60xbc3'}, next = {}
----------------------------------
Block 0x5ef0xbc3
0x5f60xbc3: RETURNPRIVATE vbc3arg0 vbcb vbc3arg0
----------------------------------

Begin block 0x5f7
prev = {'0x1d9'}, next = {'0x627', '0x601'}
----------------------------------
Block 0x5f7
0x5f8: v5f8(0x0) = CONST 
0x5fb: v5fb = ISZERO v1ea
0x5fd: v5fd(0x627) = CONST 
0x600: JUMPI v5fd(0x627) v5fb
----------------------------------

Begin block 0x601
prev = {'0x5f7'}, next = {'0x627'}
----------------------------------
Block 0x601
0x602: v602 = CALLER 
0x603: v603(0x0) = CONST 
0x607: MSTORE v603(0x0) v602
0x608: v608(0xb) = CONST 
0x60a: v60a(0x20) = CONST 
0x60e: MSTORE v60a(0x20) v608(0xb)
0x60f: v60f(0x40) = CONST 
0x613: v613 = SHA3 v603(0x0) v60f(0x40)
0x614: v614(0x1) = CONST 
0x616: v616(0xa0) = CONST 
0x618: v618(0x2) = CONST 
0x61a: v61a(0x10000000000000000000000000000000000000000) = EXP v618(0x2) v616(0xa0)
0x61b: v61b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v61a(0x10000000000000000000000000000000000000000) v614(0x1)
0x61d: v61d = AND v1e5 v61b(0xffffffffffffffffffffffffffffffffffffffff)
0x61f: MSTORE v603(0x0) v61d
0x622: MSTORE v60a(0x20) v613
0x624: v624 = SHA3 v603(0x0) v60f(0x40)
0x625: v625 = SLOAD v624
0x626: v626 = ISZERO v625
----------------------------------

Begin block 0x627
prev = {'0x5f7', '0x601'}, next = {'0x62e', '0x632'}
----------------------------------
Block 0x627
0x627_0x0: v627_0 = PHI v5fb v626
0x628: v628 = ISZERO v627_0
0x629: v629 = ISZERO v628
0x62a: v62a(0x632) = CONST 
0x62d: JUMPI v62a(0x632) v629
----------------------------------

Begin block 0x62e
prev = {'0x627'}, next = {}
----------------------------------
Block 0x62e
0x62e: v62e(0x0) = CONST 
0x631: REVERT v62e(0x0) v62e(0x0)
----------------------------------

Begin block 0x632
prev = {'0x627'}, next = {'0x6940x1b6'}
----------------------------------
Block 0x632
0x633: v633 = CALLER 
0x634: v634(0x0) = CONST 
0x638: MSTORE v634(0x0) v633
0x639: v639(0xb) = CONST 
0x63b: v63b(0x20) = CONST 
0x63f: MSTORE v63b(0x20) v639(0xb)
0x640: v640(0x40) = CONST 
0x644: v644 = SHA3 v634(0x0) v640(0x40)
0x645: v645(0x1) = CONST 
0x647: v647(0xa0) = CONST 
0x649: v649(0x2) = CONST 
0x64b: v64b(0x10000000000000000000000000000000000000000) = EXP v649(0x2) v647(0xa0)
0x64c: v64c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v64b(0x10000000000000000000000000000000000000000) v645(0x1)
0x64e: v64e = AND v1e5 v64c(0xffffffffffffffffffffffffffffffffffffffff)
0x651: MSTORE v634(0x0) v64e
0x654: MSTORE v63b(0x20) v644
0x658: v658 = SHA3 v634(0x0) v640(0x40)
0x65b: SSTORE v658 v1ea
0x65d: v65d = MLOAD v640(0x40)
0x660: MSTORE v65d v1ea
0x662: v662 = MLOAD v640(0x40)
0x666: v666(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
0x68b: v68b = SUB v65d v662
0x68e: v68e = ADD v63b(0x20) v68b
0x690: LOG3 v662 v68e v666(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) v633 v64e
0x692: v692(0x1) = CONST 
----------------------------------

Begin block 0x6940x1b6
prev = {'0x632'}, next = {'0x1ef0x1b6'}
----------------------------------
Block 0x6940x1b6
0x6990x1b6: JUMP v1c4(0x1ef)
----------------------------------

Begin block 0x6940xe80
prev = {'0xe80'}, next = {}
----------------------------------
Block 0x6940xe80
0x6990xe80: RETURNPRIVATE ve80arg2 ve83
----------------------------------

Begin block 0x69a
prev = {'0x226'}, next = {'0x6b2', '0x6ae'}
----------------------------------
Block 0x69a
0x69b: v69b(0x0) = CONST 
0x69e: v69e = SLOAD v69b(0x0)
0x69f: v69f(0x1) = CONST 
0x6a1: v6a1(0xa0) = CONST 
0x6a3: v6a3(0x2) = CONST 
0x6a5: v6a5(0x10000000000000000000000000000000000000000) = EXP v6a3(0x2) v6a1(0xa0)
0x6a6: v6a6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6a5(0x10000000000000000000000000000000000000000) v69f(0x1)
0x6a7: v6a7 = AND v6a6(0xffffffffffffffffffffffffffffffffffffffff) v69e
0x6a8: v6a8 = CALLER 
0x6a9: v6a9 = EQ v6a8 v6a7
0x6aa: v6aa(0x6b2) = CONST 
0x6ad: JUMPI v6aa(0x6b2) v6a9
----------------------------------

Begin block 0x6ae
prev = {'0x69a'}, next = {}
----------------------------------
Block 0x6ae
0x6ae: v6ae(0x0) = CONST 
0x6b1: REVERT v6ae(0x0) v6ae(0x0)
----------------------------------

Begin block 0x6b2
prev = {'0x69a'}, next = {'0x721', '0x71d'}
----------------------------------
Block 0x6b2
0x6b3: v6b3(0x2) = CONST 
0x6b5: v6b5 = SLOAD v6b3(0x2)
0x6b6: v6b6(0x40) = CONST 
0x6b9: v6b9 = MLOAD v6b6(0x40)
0x6ba: v6ba(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = CONST 
0x6dc: MSTORE v6b9 v6ba(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
0x6dd: v6dd(0x1) = CONST 
0x6df: v6df(0xa0) = CONST 
0x6e1: v6e1(0x2) = CONST 
0x6e3: v6e3(0x10000000000000000000000000000000000000000) = EXP v6e1(0x2) v6df(0xa0)
0x6e4: v6e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6e3(0x10000000000000000000000000000000000000000) v6dd(0x1)
0x6e7: v6e7 = AND v6e4(0xffffffffffffffffffffffffffffffffffffffff) v6b5
0x6e8: v6e8(0x4) = CONST 
0x6eb: v6eb = ADD v6b9 v6e8(0x4)
0x6ec: MSTORE v6eb v6e7
0x6ed: v6ed(0x24) = CONST 
0x6f0: v6f0 = ADD v6b9 v6ed(0x24)
0x6f3: MSTORE v6f0 v237
0x6f5: v6f5 = MLOAD v6b6(0x40)
0x6f8: v6f8 = AND v232 v6e4(0xffffffffffffffffffffffffffffffffffffffff)
0x6fa: v6fa(0xa9059cbb) = CONST 
0x700: v700(0x44) = CONST 
0x704: v704 = ADD v6b9 v700(0x44)
0x706: v706(0x20) = CONST 
0x70e: v70e = SUB v6b9 v6f5
0x70f: v70f = ADD v70e v700(0x44)
0x711: v711(0x0) = CONST 
0x715: v715 = EXTCODESIZE v6f8
0x716: v716 = ISZERO v715
0x718: v718 = ISZERO v716
0x719: v719(0x721) = CONST 
0x71c: JUMPI v719(0x721) v718
----------------------------------

Begin block 0x71d
prev = {'0x6b2'}, next = {}
----------------------------------
Block 0x71d
0x71d: v71d(0x0) = CONST 
0x720: REVERT v71d(0x0) v71d(0x0)
----------------------------------

Begin block 0x721
prev = {'0x6b2'}, next = {'0x735', '0x72c'}
----------------------------------
Block 0x721
0x723: v723 = GAS 
0x724: v724 = CALL v723 v6f8 v711(0x0) v6f5 v70f v6f5 v706(0x20)
0x725: v725 = ISZERO v724
0x727: v727 = ISZERO v725
0x728: v728(0x735) = CONST 
0x72b: JUMPI v728(0x735) v727
----------------------------------

Begin block 0x72c
prev = {'0x721'}, next = {}
----------------------------------
Block 0x72c
0x72c: v72c = RETURNDATASIZE 
0x72d: v72d(0x0) = CONST 
0x730: RETURNDATACOPY v72d(0x0) v72d(0x0) v72c
0x731: v731 = RETURNDATASIZE 
0x732: v732(0x0) = CONST 
0x734: REVERT v732(0x0) v731
----------------------------------

Begin block 0x735
prev = {'0x721'}, next = {'0x747', '0x74b'}
----------------------------------
Block 0x735
0x73a: v73a(0x40) = CONST 
0x73c: v73c = MLOAD v73a(0x40)
0x73d: v73d = RETURNDATASIZE 
0x73e: v73e(0x20) = CONST 
0x741: v741 = LT v73d v73e(0x20)
0x742: v742 = ISZERO v741
0x743: v743(0x74b) = CONST 
0x746: JUMPI v743(0x74b) v742
----------------------------------

Begin block 0x747
prev = {'0x735'}, next = {}
----------------------------------
Block 0x747
0x747: v747(0x0) = CONST 
0x74a: REVERT v747(0x0) v747(0x0)
----------------------------------

Begin block 0x74b
prev = {'0x735'}, next = {'0x1ef0x203'}
----------------------------------
Block 0x74b
0x74d: v74d = MLOAD v73c
0x753: JUMP v211(0x1ef)
----------------------------------

Begin block 0x754
prev = {'0x248'}, next = {'0x2510x23c'}
----------------------------------
Block 0x754
0x755: v755(0x0) = CONST 
0x758: MSTORE v755(0x0) v755(0x0)
0x759: v759(0xa) = CONST 
0x75b: v75b(0x20) = CONST 
0x75d: MSTORE v75b(0x20) v759(0xa)
0x75e: v75e(0x13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e3) = CONST 
0x77f: v77f = SLOAD v75e(0x13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e3)
0x780: v780(0x9) = CONST 
0x782: v782 = SLOAD v780(0x9)
0x783: v783 = SUB v782 v77f
0x785: JUMP v24a(0x251)
----------------------------------

Begin block 0x786
prev = {}, next = {'0x7990x786', '0x79d0x786'}
----------------------------------
function 0x786(v786arg0, v786arg1)
Block 0x786
0x787: v787(0x0) = CONST 
0x789: v789 = SLOAD v787(0x0)
0x78a: v78a(0x1) = CONST 
0x78c: v78c(0xa0) = CONST 
0x78e: v78e(0x2) = CONST 
0x790: v790(0x10000000000000000000000000000000000000000) = EXP v78e(0x2) v78c(0xa0)
0x791: v791(0xffffffffffffffffffffffffffffffffffffffff) = SUB v790(0x10000000000000000000000000000000000000000) v78a(0x1)
0x792: v792 = AND v791(0xffffffffffffffffffffffffffffffffffffffff) v789
0x793: v793 = CALLER 
0x794: v794 = EQ v793 v792
0x795: v795(0x79d) = CONST 
0x798: JUMPI v795(0x79d) v794
----------------------------------

Begin block 0x7860x263
prev = {'0x286'}, next = {'0x7990x263', '0x79d0x263'}
----------------------------------
Block 0x7860x263
0x7870x263: v263787(0x0) = CONST 
0x7890x263: v263789 = SLOAD v263787(0x0)
0x78a0x263: v26378a(0x1) = CONST 
0x78c0x263: v26378c(0xa0) = CONST 
0x78e0x263: v26378e(0x2) = CONST 
0x7900x263: v263790(0x10000000000000000000000000000000000000000) = EXP v26378e(0x2) v26378c(0xa0)
0x7910x263: v263791(0xffffffffffffffffffffffffffffffffffffffff) = SUB v263790(0x10000000000000000000000000000000000000000) v26378a(0x1)
0x7920x263: v263792 = AND v263791(0xffffffffffffffffffffffffffffffffffffffff) v263789
0x7930x263: v263793 = CALLER 
0x7940x263: v263794 = EQ v263793 v263792
0x7950x263: v263795(0x79d) = CONST 
0x7980x263: JUMPI v263795(0x79d) v263794
----------------------------------

Begin block 0x7990x263
prev = {'0x7860x263'}, next = {}
----------------------------------
Block 0x7990x263
0x7990x263: v263799(0x0) = CONST 
0x79c0x263: REVERT v263799(0x0) v263799(0x0)
----------------------------------

Begin block 0x7990x786
prev = {'0x786'}, next = {}
----------------------------------
Block 0x7990x786
0x7990x786: v786799(0x0) = CONST 
0x79c0x786: REVERT v786799(0x0) v786799(0x0)
----------------------------------

Begin block 0x79d0x263
prev = {'0x7860x263'}, next = {'0x2960x263'}
----------------------------------
Block 0x79d0x263
0x79e0x263: v26379e(0x1) = CONST 
0x7a00x263: v2637a0(0xa0) = CONST 
0x7a20x263: v2637a2(0x2) = CONST 
0x7a40x263: v2637a4(0x10000000000000000000000000000000000000000) = EXP v2637a2(0x2) v2637a0(0xa0)
0x7a50x263: v2637a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2637a4(0x10000000000000000000000000000000000000000) v26379e(0x1)
0x7a70x263: v2637a7 = AND v291 v2637a5(0xffffffffffffffffffffffffffffffffffffffff)
0x7a80x263: v2637a8(0x0) = CONST 
0x7ac0x263: MSTORE v2637a8(0x0) v2637a7
0x7ad0x263: v2637ad(0x1) = CONST 
0x7af0x263: v2637af(0x20) = CONST 
0x7b30x263: MSTORE v2637af(0x20) v2637ad(0x1)
0x7b40x263: v2637b4(0x40) = CONST 
0x7b80x263: v2637b8 = SHA3 v2637a8(0x0) v2637b4(0x40)
0x7ba0x263: v2637ba = SLOAD v2637b8
0x7bb0x263: v2637bb(0xff) = CONST 
0x7bd0x263: v2637bd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v2637bb(0xff)
0x7be0x263: v2637be = AND v2637bd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v2637ba
0x7c10x263: v2637c1 = OR v2637ad(0x1) v2637be
0x7c40x263: SSTORE v2637b8 v2637c1
0x7c50x263: v2637c5 = MLOAD v2637b4(0x40)
0x7c60x263: v2637c6(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) = CONST 
0x7e90x263: LOG2 v2637c5 v2637a8(0x0) v2637c6(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) v2637a7
0x7eb0x263: JUMP v271(0x296)
----------------------------------

Begin block 0x79d0x786
prev = {'0x786'}, next = {}
----------------------------------
Block 0x79d0x786
0x79e0x786: v78679e(0x1) = CONST 
0x7a00x786: v7867a0(0xa0) = CONST 
0x7a20x786: v7867a2(0x2) = CONST 
0x7a40x786: v7867a4(0x10000000000000000000000000000000000000000) = EXP v7867a2(0x2) v7867a0(0xa0)
0x7a50x786: v7867a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7867a4(0x10000000000000000000000000000000000000000) v78679e(0x1)
0x7a70x786: v7867a7 = AND v786arg0 v7867a5(0xffffffffffffffffffffffffffffffffffffffff)
0x7a80x786: v7867a8(0x0) = CONST 
0x7ac0x786: MSTORE v7867a8(0x0) v7867a7
0x7ad0x786: v7867ad(0x1) = CONST 
0x7af0x786: v7867af(0x20) = CONST 
0x7b30x786: MSTORE v7867af(0x20) v7867ad(0x1)
0x7b40x786: v7867b4(0x40) = CONST 
0x7b80x786: v7867b8 = SHA3 v7867a8(0x0) v7867b4(0x40)
0x7ba0x786: v7867ba = SLOAD v7867b8
0x7bb0x786: v7867bb(0xff) = CONST 
0x7bd0x786: v7867bd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v7867bb(0xff)
0x7be0x786: v7867be = AND v7867bd(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v7867ba
0x7c10x786: v7867c1 = OR v7867ad(0x1) v7867be
0x7c40x786: SSTORE v7867b8 v7867c1
0x7c50x786: v7867c5 = MLOAD v7867b4(0x40)
0x7c60x786: v7867c6(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) = CONST 
0x7e90x786: LOG2 v7867c5 v7867a8(0x0) v7867c6(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) v7867a7
0x7eb0x786: RETURNPRIVATE v786arg1
----------------------------------

Begin block 0x7ec
prev = {'0x2bb'}, next = {'0x7f7'}
----------------------------------
Block 0x7ec
0x7ed: v7ed(0x0) = CONST 
0x7ef: v7ef(0x7f7) = CONST 
0x7f3: v7f3(0xd6c) = CONST 
0x7f6: CALLPRIVATE v7f3(0xd6c) v2c8 v7ef(0x7f7)
----------------------------------

Begin block 0x7f7
prev = {'0x7ec'}, next = {'0x800'}
----------------------------------
Block 0x7f7
0x7f8: v7f8(0x800) = CONST 
0x7fc: v7fc(0xd6c) = CONST 
0x7ff: CALLPRIVATE v7fc(0xd6c) v2d1 v7f8(0x800)
----------------------------------

Begin block 0x800
prev = {'0x7f7'}, next = {'0x829'}
----------------------------------
Block 0x800
0x801: v801(0x1) = CONST 
0x803: v803(0xa0) = CONST 
0x805: v805(0x2) = CONST 
0x807: v807(0x10000000000000000000000000000000000000000) = EXP v805(0x2) v803(0xa0)
0x808: v808(0xffffffffffffffffffffffffffffffffffffffff) = SUB v807(0x10000000000000000000000000000000000000000) v801(0x1)
0x80a: v80a = AND v2c8 v808(0xffffffffffffffffffffffffffffffffffffffff)
0x80b: v80b(0x0) = CONST 
0x80f: MSTORE v80b(0x0) v80a
0x810: v810(0xa) = CONST 
0x812: v812(0x20) = CONST 
0x814: MSTORE v812(0x20) v810(0xa)
0x815: v815(0x40) = CONST 
0x818: v818 = SHA3 v80b(0x0) v815(0x40)
0x819: v819 = SLOAD v818
0x81a: v81a(0x829) = CONST 
0x81f: v81f(0xffffffff) = CONST 
0x824: v824(0xe6b) = CONST 
0x827: v827(0xe6b) = AND v824(0xe6b) v81f(0xffffffff)
0x828: v828_0 = CALLPRIVATE v827(0xe6b) v2d6 v819 v81a(0x829)
----------------------------------

Begin block 0x829
prev = {'0x800'}, next = {'0x866'}
----------------------------------
Block 0x829
0x82a: v82a(0x1) = CONST 
0x82c: v82c(0xa0) = CONST 
0x82e: v82e(0x2) = CONST 
0x830: v830(0x10000000000000000000000000000000000000000) = EXP v82e(0x2) v82c(0xa0)
0x831: v831(0xffffffffffffffffffffffffffffffffffffffff) = SUB v830(0x10000000000000000000000000000000000000000) v82a(0x1)
0x833: v833 = AND v2c8 v831(0xffffffffffffffffffffffffffffffffffffffff)
0x834: v834(0x0) = CONST 
0x838: MSTORE v834(0x0) v833
0x839: v839(0xa) = CONST 
0x83b: v83b(0x20) = CONST 
0x83f: MSTORE v83b(0x20) v839(0xa)
0x840: v840(0x40) = CONST 
0x844: v844 = SHA3 v834(0x0) v840(0x40)
0x848: SSTORE v844 v828_0
0x849: v849(0xb) = CONST 
0x84c: MSTORE v83b(0x20) v849(0xb)
0x84f: v84f = SHA3 v834(0x0) v840(0x40)
0x850: v850 = CALLER 
0x852: MSTORE v834(0x0) v850
0x854: MSTORE v83b(0x20) v84f
0x855: v855 = SHA3 v834(0x0) v840(0x40)
0x856: v856 = SLOAD v855
0x857: v857(0x866) = CONST 
0x85c: v85c(0xffffffff) = CONST 
0x861: v861(0xe6b) = CONST 
0x864: v864(0xe6b) = AND v861(0xe6b) v85c(0xffffffff)
0x865: v865_0 = CALLPRIVATE v864(0xe6b) v2d6 v856 v857(0x866)
----------------------------------

Begin block 0x866
prev = {'0x829'}, next = {'0x8aa'}
----------------------------------
Block 0x866
0x867: v867(0x1) = CONST 
0x869: v869(0xa0) = CONST 
0x86b: v86b(0x2) = CONST 
0x86d: v86d(0x10000000000000000000000000000000000000000) = EXP v86b(0x2) v869(0xa0)
0x86e: v86e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v86d(0x10000000000000000000000000000000000000000) v867(0x1)
0x871: v871 = AND v2c8 v86e(0xffffffffffffffffffffffffffffffffffffffff)
0x872: v872(0x0) = CONST 
0x876: MSTORE v872(0x0) v871
0x877: v877(0xb) = CONST 
0x879: v879(0x20) = CONST 
0x87d: MSTORE v879(0x20) v877(0xb)
0x87e: v87e(0x40) = CONST 
0x882: v882 = SHA3 v872(0x0) v87e(0x40)
0x883: v883 = CALLER 
0x885: MSTORE v872(0x0) v883
0x887: MSTORE v879(0x20) v882
0x88a: v88a = SHA3 v872(0x0) v87e(0x40)
0x88e: SSTORE v88a v865_0
0x891: v891 = AND v2d1 v86e(0xffffffffffffffffffffffffffffffffffffffff)
0x893: MSTORE v872(0x0) v891
0x894: v894(0xa) = CONST 
0x898: MSTORE v879(0x20) v894(0xa)
0x899: v899 = SHA3 v872(0x0) v87e(0x40)
0x89a: v89a = SLOAD v899
0x89b: v89b(0x8aa) = CONST 
0x8a0: v8a0(0xffffffff) = CONST 
0x8a5: v8a5(0xe80) = CONST 
0x8a8: v8a8(0xe80) = AND v8a5(0xe80) v8a0(0xffffffff)
0x8a9: v8a9_0 = CALLPRIVATE v8a8(0xe80) v2d6 v89a v89b(0x8aa)
----------------------------------

Begin block 0x8aa
prev = {'0x866'}, next = {'0x1ef0x298'}
----------------------------------
Block 0x8aa
0x8ab: v8ab(0x1) = CONST 
0x8ad: v8ad(0xa0) = CONST 
0x8af: v8af(0x2) = CONST 
0x8b1: v8b1(0x10000000000000000000000000000000000000000) = EXP v8af(0x2) v8ad(0xa0)
0x8b2: v8b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8b1(0x10000000000000000000000000000000000000000) v8ab(0x1)
0x8b5: v8b5 = AND v2d1 v8b2(0xffffffffffffffffffffffffffffffffffffffff)
0x8b6: v8b6(0x0) = CONST 
0x8ba: MSTORE v8b6(0x0) v8b5
0x8bb: v8bb(0xa) = CONST 
0x8bd: v8bd(0x20) = CONST 
0x8c1: MSTORE v8bd(0x20) v8bb(0xa)
0x8c2: v8c2(0x40) = CONST 
0x8c7: v8c7 = SHA3 v8b6(0x0) v8c2(0x40)
0x8cb: SSTORE v8c7 v8a9_0
0x8cd: v8cd = MLOAD v8c2(0x40)
0x8d0: MSTORE v8cd v2d6
0x8d2: v8d2 = MLOAD v8c2(0x40)
0x8d7: v8d7 = AND v2c8 v8b2(0xffffffffffffffffffffffffffffffffffffffff)
0x8d9: v8d9(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0x8fe: v8fe = SUB v8cd v8d2
0x8ff: v8ff = ADD v8fe v8bd(0x20)
0x901: LOG3 v8d2 v8ff v8d9(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v8d7 v8b5
0x903: v903(0x1) = CONST 
0x90a: JUMP v2a6(0x1ef)
----------------------------------

Begin block 0x90b
prev = {'0x2fe'}, next = {'0x922', '0x91e'}
----------------------------------
Block 0x90b
0x90c: v90c(0x0) = CONST 
0x90e: v90e = SLOAD v90c(0x0)
0x90f: v90f(0x1) = CONST 
0x911: v911(0xa0) = CONST 
0x913: v913(0x2) = CONST 
0x915: v915(0x10000000000000000000000000000000000000000) = EXP v913(0x2) v911(0xa0)
0x916: v916(0xffffffffffffffffffffffffffffffffffffffff) = SUB v915(0x10000000000000000000000000000000000000000) v90f(0x1)
0x917: v917 = AND v916(0xffffffffffffffffffffffffffffffffffffffff) v90e
0x918: v918 = CALLER 
0x919: v919 = EQ v918 v917
0x91a: v91a(0x922) = CONST 
0x91d: JUMPI v91a(0x922) v919
----------------------------------

Begin block 0x91e
prev = {'0x90b'}, next = {}
----------------------------------
Block 0x91e
0x91e: v91e(0x0) = CONST 
0x921: REVERT v91e(0x0) v91e(0x0)
----------------------------------

Begin block 0x922
prev = {'0x90b'}, next = {'0x939', '0x935'}
----------------------------------
Block 0x922
0x923: v923(0x3) = CONST 
0x925: v925 = SLOAD v923(0x3)
0x926: v926(0x1) = CONST 
0x928: v928(0xa0) = CONST 
0x92a: v92a(0x2) = CONST 
0x92c: v92c(0x10000000000000000000000000000000000000000) = EXP v92a(0x2) v928(0xa0)
0x92d: v92d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v92c(0x10000000000000000000000000000000000000000) v926(0x1)
0x92e: v92e = AND v92d(0xffffffffffffffffffffffffffffffffffffffff) v925
0x92f: v92f = ISZERO v92e
0x930: v930 = ISZERO v92f
0x931: v931(0x939) = CONST 
0x934: JUMPI v931(0x939) v930
----------------------------------

Begin block 0x935
prev = {'0x922'}, next = {}
----------------------------------
Block 0x935
0x935: v935(0x0) = CONST 
0x938: REVERT v935(0x0) v935(0x0)
----------------------------------

Begin block 0x939
prev = {'0x922'}, next = {'0x957', '0x953'}
----------------------------------
Block 0x939
0x93a: v93a(0x2) = CONST 
0x93c: v93c = SLOAD v93a(0x2)
0x93d: v93d(0x3) = CONST 
0x93f: v93f = SLOAD v93d(0x3)
0x940: v940(0x1) = CONST 
0x942: v942(0xa0) = CONST 
0x944: v944(0x2) = CONST 
0x946: v946(0x10000000000000000000000000000000000000000) = EXP v944(0x2) v942(0xa0)
0x947: v947(0xffffffffffffffffffffffffffffffffffffffff) = SUB v946(0x10000000000000000000000000000000000000000) v940(0x1)
0x94a: v94a = AND v947(0xffffffffffffffffffffffffffffffffffffffff) v93f
0x94c: v94c = AND v93c v947(0xffffffffffffffffffffffffffffffffffffffff)
0x94d: v94d = EQ v94c v94a
0x94e: v94e = ISZERO v94d
0x94f: v94f(0x957) = CONST 
0x952: JUMPI v94f(0x957) v94e
----------------------------------

Begin block 0x953
prev = {'0x939'}, next = {}
----------------------------------
Block 0x953
0x953: v953(0x0) = CONST 
0x956: REVERT v953(0x0) v953(0x0)
----------------------------------

Begin block 0x957
prev = {'0x939'}, next = {'0x96c'}
----------------------------------
Block 0x957
0x958: v958(0x2) = CONST 
0x95a: v95a = SLOAD v958(0x2)
0x95b: v95b(0x96c) = CONST 
0x95f: v95f(0x1) = CONST 
0x961: v961(0xa0) = CONST 
0x963: v963(0x2) = CONST 
0x965: v965(0x10000000000000000000000000000000000000000) = EXP v963(0x2) v961(0xa0)
0x966: v966(0xffffffffffffffffffffffffffffffffffffffff) = SUB v965(0x10000000000000000000000000000000000000000) v95f(0x1)
0x967: v967 = AND v966(0xffffffffffffffffffffffffffffffffffffffff) v95a
0x968: v968(0x786) = CONST 
0x96b: CALLPRIVATE v968(0x786) v967 v95b(0x96c)
----------------------------------

Begin block 0x96c
prev = {'0x957'}, next = {'0x9e4', '0x9d0'}
----------------------------------
Block 0x96c
0x96d: v96d(0x2) = CONST 
0x970: v970 = SLOAD v96d(0x2)
0x971: v971(0x1) = CONST 
0x973: v973(0xa0) = CONST 
0x975: v975(0x2) = CONST 
0x977: v977(0x10000000000000000000000000000000000000000) = EXP v975(0x2) v973(0xa0)
0x978: v978(0xffffffffffffffffffffffffffffffffffffffff) = SUB v977(0x10000000000000000000000000000000000000000) v971(0x1)
0x97b: v97b = AND v978(0xffffffffffffffffffffffffffffffffffffffff) v970
0x97c: v97c(0x0) = CONST 
0x980: MSTORE v97c(0x0) v97b
0x981: v981(0x1) = CONST 
0x983: v983(0x20) = CONST 
0x987: MSTORE v983(0x20) v981(0x1)
0x988: v988(0x40) = CONST 
0x98c: v98c = SHA3 v97c(0x0) v988(0x40)
0x98e: v98e = SLOAD v98c
0x98f: v98f(0xff) = CONST 
0x991: v991(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v98f(0xff)
0x992: v992 = AND v991(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) v98e
0x995: v995 = OR v981(0x1) v992
0x998: SSTORE v98c v995
0x99a: v99a = SLOAD v96d(0x2)
0x99c: v99c = MLOAD v988(0x40)
0x9a0: v9a0 = AND v978(0xffffffffffffffffffffffffffffffffffffffff) v99a
0x9a2: v9a2(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) = CONST 
0x9c5: LOG2 v99c v97c(0x0) v9a2(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) v9a0
0x9c6: v9c6(0x0) = CONST 
0x9c9: v9c9 = GT v300 v9c6(0x0)
0x9cb: v9cb = ISZERO v9c9
0x9cc: v9cc(0x9e4) = CONST 
0x9cf: JUMPI v9cc(0x9e4) v9cb
----------------------------------

Begin block 0x9d0
prev = {'0x96c'}, next = {'0x9e4'}
----------------------------------
Block 0x9d0
0x9d1: v9d1 = CALLER 
0x9d2: v9d2(0x0) = CONST 
0x9d6: MSTORE v9d2(0x0) v9d1
0x9d7: v9d7(0x5) = CONST 
0x9d9: v9d9(0x20) = CONST 
0x9db: MSTORE v9d9(0x20) v9d7(0x5)
0x9dc: v9dc(0x40) = CONST 
0x9df: v9df = SHA3 v9d2(0x0) v9dc(0x40)
0x9e0: v9e0 = SLOAD v9df
0x9e2: v9e2 = GT v300 v9e0
0x9e3: v9e3 = ISZERO v9e2
----------------------------------

Begin block 0x9e4
prev = {'0x9d0', '0x96c'}, next = {'0x9eb', '0x9ef'}
----------------------------------
Block 0x9e4
0x9e4_0x0: v9e4_0 = PHI v9c9 v9e3
0x9e5: v9e5 = ISZERO v9e4_0
0x9e6: v9e6 = ISZERO v9e5
0x9e7: v9e7(0x9ef) = CONST 
0x9ea: JUMPI v9e7(0x9ef) v9e6
----------------------------------

Begin block 0x9eb
prev = {'0x9e4'}, next = {}
----------------------------------
Block 0x9eb
0x9eb: v9eb(0x0) = CONST 
0x9ee: REVERT v9eb(0x0) v9eb(0x0)
----------------------------------

Begin block 0x9ef
prev = {'0x9e4'}, next = {'0xa2e', '0xa25'}
----------------------------------
Block 0x9ef
0x9f0: v9f0 = CALLER 
0x9f1: v9f1(0x0) = CONST 
0x9f5: MSTORE v9f1(0x0) v9f0
0x9f6: v9f6(0x5) = CONST 
0x9f8: v9f8(0x20) = CONST 
0x9fa: MSTORE v9f8(0x20) v9f6(0x5)
0x9fb: v9fb(0x40) = CONST 
0x9ff: v9ff = SHA3 v9f1(0x0) v9fb(0x40)
0xa01: va01 = SLOAD v9ff
0xa04: va04 = SUB va01 v300
0xa06: SSTORE v9ff va04
0xa07: va07 = MLOAD v9fb(0x40)
0xa09: va09 = ISZERO v300
0xa0a: va0a(0x8fc) = CONST 
0xa0d: va0d = MUL va0a(0x8fc) va09
0xa18: va18 = CALL va0d v9f0 v300 va07 v9f1(0x0) va07 v9f1(0x0)
0xa1e: va1e = ISZERO va18
0xa20: va20 = ISZERO va1e
0xa21: va21(0xa2e) = CONST 
0xa24: JUMPI va21(0xa2e) va20
----------------------------------

Begin block 0xa25
prev = {'0x9ef'}, next = {}
----------------------------------
Block 0xa25
0xa25: va25 = RETURNDATASIZE 
0xa26: va26(0x0) = CONST 
0xa29: RETURNDATACOPY va26(0x0) va26(0x0) va25
0xa2a: va2a = RETURNDATASIZE 
0xa2b: va2b(0x0) = CONST 
0xa2d: REVERT va2b(0x0) va2a
----------------------------------

Begin block 0xa2e
prev = {'0x9ef'}, next = {'0x2960x2db'}
----------------------------------
Block 0xa2e
0xa31: JUMP v2e9(0x296)
----------------------------------

Begin block 0xa32
prev = {'0x305'}, next = {'0xa49', '0xa45'}
----------------------------------
Block 0xa32
0xa33: va33(0x0) = CONST 
0xa35: va35 = SLOAD va33(0x0)
0xa36: va36(0x1) = CONST 
0xa38: va38(0xa0) = CONST 
0xa3a: va3a(0x2) = CONST 
0xa3c: va3c(0x10000000000000000000000000000000000000000) = EXP va3a(0x2) va38(0xa0)
0xa3d: va3d(0xffffffffffffffffffffffffffffffffffffffff) = SUB va3c(0x10000000000000000000000000000000000000000) va36(0x1)
0xa3e: va3e = AND va3d(0xffffffffffffffffffffffffffffffffffffffff) va35
0xa3f: va3f = CALLER 
0xa40: va40 = EQ va3f va3e
0xa41: va41(0xa49) = CONST 
0xa44: JUMPI va41(0xa49) va40
----------------------------------

Begin block 0xa45
prev = {'0xa32'}, next = {}
----------------------------------
Block 0xa45
0xa45: va45(0x0) = CONST 
0xa48: REVERT va45(0x0) va45(0x0)
----------------------------------

Begin block 0xa49
prev = {'0xa32'}, next = {'0xa53', '0xa57'}
----------------------------------
Block 0xa49
0xa4a: va4a(0x4) = CONST 
0xa4c: va4c = SLOAD va4a(0x4)
0xa4d: va4d = CALLVALUE 
0xa4e: va4e = EQ va4d va4c
0xa4f: va4f(0xa57) = CONST 
0xa52: JUMPI va4f(0xa57) va4e
----------------------------------

Begin block 0xa53
prev = {'0xa49'}, next = {}
----------------------------------
Block 0xa53
0xa53: va53(0x0) = CONST 
0xa56: REVERT va53(0x0) va53(0x0)
----------------------------------

Begin block 0xa57
prev = {'0xa49'}, next = {'0xa6a', '0xa6e'}
----------------------------------
Block 0xa57
0xa58: va58(0x3) = CONST 
0xa5a: va5a = SLOAD va58(0x3)
0xa5b: va5b(0x1) = CONST 
0xa5d: va5d(0xa0) = CONST 
0xa5f: va5f(0x2) = CONST 
0xa61: va61(0x10000000000000000000000000000000000000000) = EXP va5f(0x2) va5d(0xa0)
0xa62: va62(0xffffffffffffffffffffffffffffffffffffffff) = SUB va61(0x10000000000000000000000000000000000000000) va5b(0x1)
0xa63: va63 = AND va62(0xffffffffffffffffffffffffffffffffffffffff) va5a
0xa64: va64 = ISZERO va63
0xa65: va65 = ISZERO va64
0xa66: va66(0xa6e) = CONST 
0xa69: JUMPI va66(0xa6e) va65
----------------------------------

Begin block 0xa6a
prev = {'0xa57'}, next = {}
----------------------------------
Block 0xa6a
0xa6a: va6a(0x0) = CONST 
0xa6d: REVERT va6a(0x0) va6a(0x0)
----------------------------------

Begin block 0xa6e
prev = {'0xa57'}, next = {'0xa8c', '0xa88'}
----------------------------------
Block 0xa6e
0xa6f: va6f(0x2) = CONST 
0xa71: va71 = SLOAD va6f(0x2)
0xa72: va72(0x3) = CONST 
0xa74: va74 = SLOAD va72(0x3)
0xa75: va75(0x1) = CONST 
0xa77: va77(0xa0) = CONST 
0xa79: va79(0x2) = CONST 
0xa7b: va7b(0x10000000000000000000000000000000000000000) = EXP va79(0x2) va77(0xa0)
0xa7c: va7c(0xffffffffffffffffffffffffffffffffffffffff) = SUB va7b(0x10000000000000000000000000000000000000000) va75(0x1)
0xa7f: va7f = AND va7c(0xffffffffffffffffffffffffffffffffffffffff) va74
0xa81: va81 = AND va71 va7c(0xffffffffffffffffffffffffffffffffffffffff)
0xa82: va82 = EQ va81 va7f
0xa83: va83 = ISZERO va82
0xa84: va84(0xa8c) = CONST 
0xa87: JUMPI va84(0xa8c) va83
----------------------------------

Begin block 0xa88
prev = {'0xa6e'}, next = {}
----------------------------------
Block 0xa88
0xa88: va88(0x0) = CONST 
0xa8b: REVERT va88(0x0) va88(0x0)
----------------------------------

Begin block 0xa8c
prev = {'0xa6e'}, next = {'0xaa1'}
----------------------------------
Block 0xa8c
0xa8d: va8d(0x2) = CONST 
0xa8f: va8f = SLOAD va8d(0x2)
0xa90: va90(0xaa1) = CONST 
0xa94: va94(0x1) = CONST 
0xa96: va96(0xa0) = CONST 
0xa98: va98(0x2) = CONST 
0xa9a: va9a(0x10000000000000000000000000000000000000000) = EXP va98(0x2) va96(0xa0)
0xa9b: va9b(0xffffffffffffffffffffffffffffffffffffffff) = SUB va9a(0x10000000000000000000000000000000000000000) va94(0x1)
0xa9c: va9c = AND va9b(0xffffffffffffffffffffffffffffffffffffffff) va8f
0xa9d: va9d(0x786) = CONST 
0xaa0: CALLPRIVATE va9d(0x786) va9c va90(0xaa1)
----------------------------------

Begin block 0xaa1
prev = {'0xa8c'}, next = {'0x2960x305'}
----------------------------------
Block 0xaa1
0xaa2: vaa2(0x2) = CONST 
0xaa5: vaa5 = SLOAD vaa2(0x2)
0xaa6: vaa6(0x1) = CONST 
0xaa8: vaa8(0xa0) = CONST 
0xaaa: vaaa(0x2) = CONST 
0xaac: vaac(0x10000000000000000000000000000000000000000) = EXP vaaa(0x2) vaa8(0xa0)
0xaad: vaad(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaac(0x10000000000000000000000000000000000000000) vaa6(0x1)
0xab0: vab0 = AND vaad(0xffffffffffffffffffffffffffffffffffffffff) vaa5
0xab1: vab1(0x0) = CONST 
0xab5: MSTORE vab1(0x0) vab0
0xab6: vab6(0x1) = CONST 
0xab8: vab8(0x20) = CONST 
0xabc: MSTORE vab8(0x20) vab6(0x1)
0xabd: vabd(0x40) = CONST 
0xac1: vac1 = SHA3 vab1(0x0) vabd(0x40)
0xac3: vac3 = SLOAD vac1
0xac4: vac4(0xff) = CONST 
0xac6: vac6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vac4(0xff)
0xac7: vac7 = AND vac6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vac3
0xaca: vaca = OR vab6(0x1) vac7
0xacd: SSTORE vac1 vaca
0xacf: vacf = SLOAD vaa2(0x2)
0xad1: vad1 = MLOAD vabd(0x40)
0xad5: vad5 = AND vaad(0xffffffffffffffffffffffffffffffffffffffff) vacf
0xad7: vad7(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) = CONST 
0xafa: LOG2 vad1 vab1(0x0) vad7(0x4b1f97197167a4faa77e820abe9ecff2f1919129cd21f6d64bf693c22c76b177) vad5
0xafb: vafb = CALLER 
0xafc: vafc(0x0) = CONST 
0xb00: MSTORE vafc(0x0) vafb
0xb01: vb01(0x5) = CONST 
0xb03: vb03(0x20) = CONST 
0xb05: MSTORE vb03(0x20) vb01(0x5)
0xb06: vb06(0x40) = CONST 
0xb09: vb09 = SHA3 vafc(0x0) vb06(0x40)
0xb0b: vb0b = SLOAD vb09
0xb0c: vb0c = CALLVALUE 
0xb0d: vb0d = ADD vb0c vb0b
0xb0f: SSTORE vb09 vb0d
0xb10: JUMP v306(0x296)
----------------------------------

Begin block 0xb11
prev = {'0x319'}, next = {'0xb24', '0xb28'}
----------------------------------
Block 0xb11
0xb12: vb12(0x0) = CONST 
0xb14: vb14 = SLOAD vb12(0x0)
0xb15: vb15(0x1) = CONST 
0xb17: vb17(0xa0) = CONST 
0xb19: vb19(0x2) = CONST 
0xb1b: vb1b(0x10000000000000000000000000000000000000000) = EXP vb19(0x2) vb17(0xa0)
0xb1c: vb1c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb1b(0x10000000000000000000000000000000000000000) vb15(0x1)
0xb1d: vb1d = AND vb1c(0xffffffffffffffffffffffffffffffffffffffff) vb14
0xb1e: vb1e = CALLER 
0xb1f: vb1f = EQ vb1e vb1d
0xb20: vb20(0xb28) = CONST 
0xb23: JUMPI vb20(0xb28) vb1f
----------------------------------

Begin block 0xb24
prev = {'0xb11'}, next = {}
----------------------------------
Block 0xb24
0xb24: vb24(0x0) = CONST 
0xb27: REVERT vb24(0x0) vb24(0x0)
----------------------------------

Begin block 0xb28
prev = {'0xb11'}, next = {}
----------------------------------
Block 0xb28
0xb29: vb29 = CALLER 
0xb2a: SELFDESTRUCT vb29
----------------------------------

Begin block 0xb2b
prev = {'0x32e'}, next = {'0x337'}
----------------------------------
Block 0xb2b
0xb2c: vb2c(0x8) = CONST 
0xb2e: vb2e = SLOAD vb2c(0x8)
0xb2f: vb2f(0xff) = CONST 
0xb31: vb31 = AND vb2f(0xff) vb2e
0xb33: JUMP v330(0x337)
----------------------------------

Begin block 0xb34
prev = {'0x370'}, next = {'0x2510x34d'}
----------------------------------
Block 0xb34
0xb35: vb35(0x1) = CONST 
0xb37: vb37(0xa0) = CONST 
0xb39: vb39(0x2) = CONST 
0xb3b: vb3b(0x10000000000000000000000000000000000000000) = EXP vb39(0x2) vb37(0xa0)
0xb3c: vb3c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb3b(0x10000000000000000000000000000000000000000) vb35(0x1)
0xb3d: vb3d = AND vb3c(0xffffffffffffffffffffffffffffffffffffffff) v37b
0xb3e: vb3e(0x0) = CONST 
0xb42: MSTORE vb3e(0x0) vb3d
0xb43: vb43(0xa) = CONST 
0xb45: vb45(0x20) = CONST 
0xb47: MSTORE vb45(0x20) vb43(0xa)
0xb48: vb48(0x40) = CONST 
0xb4b: vb4b = SHA3 vb3e(0x0) vb48(0x40)
0xb4c: vb4c = SLOAD vb4b
0xb4e: JUMP v35b(0x251)
----------------------------------

Begin block 0xb4f
prev = {'0x3a3'}, next = {'0xb67', '0xb63'}
----------------------------------
Block 0xb4f
0xb50: vb50(0x0) = CONST 
0xb53: vb53 = SLOAD vb50(0x0)
0xb54: vb54(0x1) = CONST 
0xb56: vb56(0xa0) = CONST 
0xb58: vb58(0x2) = CONST 
0xb5a: vb5a(0x10000000000000000000000000000000000000000) = EXP vb58(0x2) vb56(0xa0)
0xb5b: vb5b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb5a(0x10000000000000000000000000000000000000000) vb54(0x1)
0xb5c: vb5c = AND vb5b(0xffffffffffffffffffffffffffffffffffffffff) vb53
0xb5d: vb5d = CALLER 
0xb5e: vb5e = EQ vb5d vb5c
0xb5f: vb5f(0xb67) = CONST 
0xb62: JUMPI vb5f(0xb67) vb5e
----------------------------------

Begin block 0xb63
prev = {'0xb4f'}, next = {}
----------------------------------
Block 0xb63
0xb63: vb63(0x0) = CONST 
0xb66: REVERT vb63(0x0) vb63(0x0)
----------------------------------

Begin block 0xb67
prev = {'0xb4f'}, next = {'0xb7c', '0xb78'}
----------------------------------
Block 0xb67
0xb68: vb68(0x1) = CONST 
0xb6a: vb6a(0xa0) = CONST 
0xb6c: vb6c(0x2) = CONST 
0xb6e: vb6e(0x10000000000000000000000000000000000000000) = EXP vb6c(0x2) vb6a(0xa0)
0xb6f: vb6f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb6e(0x10000000000000000000000000000000000000000) vb68(0x1)
0xb71: vb71 = AND v3af vb6f(0xffffffffffffffffffffffffffffffffffffffff)
0xb72: vb72 = ISZERO vb71
0xb73: vb73 = ISZERO vb72
0xb74: vb74(0xb7c) = CONST 
0xb77: JUMPI vb74(0xb7c) vb73
----------------------------------

Begin block 0xb78
prev = {'0xb67'}, next = {}
----------------------------------
Block 0xb78
0xb78: vb78(0x0) = CONST 
0xb7b: REVERT vb78(0x0) vb78(0x0)
----------------------------------

Begin block 0xb7c
prev = {'0xb67'}, next = {'0xb97', '0xb93'}
----------------------------------
Block 0xb7c
0xb7d: vb7d(0x2) = CONST 
0xb7f: vb7f = SLOAD vb7d(0x2)
0xb80: vb80(0x1) = CONST 
0xb82: vb82(0xa0) = CONST 
0xb84: vb84(0x2) = CONST 
0xb86: vb86(0x10000000000000000000000000000000000000000) = EXP vb84(0x2) vb82(0xa0)
0xb87: vb87(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb86(0x10000000000000000000000000000000000000000) vb80(0x1)
0xb8a: vb8a = AND vb87(0xffffffffffffffffffffffffffffffffffffffff) v3af
0xb8c: vb8c = AND vb7f vb87(0xffffffffffffffffffffffffffffffffffffffff)
0xb8d: vb8d = EQ vb8c vb8a
0xb8e: vb8e = ISZERO vb8d
0xb8f: vb8f(0xb97) = CONST 
0xb92: JUMPI vb8f(0xb97) vb8e
----------------------------------

Begin block 0xb93
prev = {'0xb7c'}, next = {}
----------------------------------
Block 0xb93
0xb93: vb93(0x0) = CONST 
0xb96: REVERT vb93(0x0) vb93(0x0)
----------------------------------

Begin block 0xb97
prev = {'0xb7c'}, next = {'0xba0'}
----------------------------------
Block 0xb97
0xb98: vb98(0xba0) = CONST 
0xb9c: vb9c(0x786) = CONST 
0xb9f: CALLPRIVATE vb9c(0x786) v3af vb98(0xba0)
----------------------------------

Begin block 0xba0
prev = {'0xb97'}, next = {'0xbaa'}
----------------------------------
Block 0xba0
0xba1: vba1(0xbaa) = CONST 
0xba6: vba6(0xc84) = CONST 
0xba9: vba9_0 = CALLPRIVATE vba6(0xc84) v3b4 v3af vba1(0xbaa)
----------------------------------

Begin block 0xbaa
prev = {'0xba0'}, next = {'0x1ef0x380'}
----------------------------------
Block 0xbaa
0xbac: vbac(0x1) = CONST 
0xbb3: JUMP v38e(0x1ef)
----------------------------------

Begin block 0xbb4
prev = {'0x3c5'}, next = {'0x3ce'}
----------------------------------
Block 0xbb4
0xbb5: vbb5(0x2) = CONST 
0xbb7: vbb7 = SLOAD vbb5(0x2)
0xbb8: vbb8(0x1) = CONST 
0xbba: vbba(0xa0) = CONST 
0xbbc: vbbc(0x2) = CONST 
0xbbe: vbbe(0x10000000000000000000000000000000000000000) = EXP vbbc(0x2) vbba(0xa0)
0xbbf: vbbf(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbbe(0x10000000000000000000000000000000000000000) vbb8(0x1)
0xbc0: vbc0 = AND vbbf(0xffffffffffffffffffffffffffffffffffffffff) vbb7
0xbc2: JUMP v3c7(0x3ce)
----------------------------------

Begin block 0xbc3
prev = {}, next = {'0x5ef0xbc3', '0xc03'}
----------------------------------
function 0xbc3(vbc3arg0)
Block 0xbc3
0xbc4: vbc4(0x6) = CONST 
0xbc7: vbc7 = SLOAD vbc4(0x6)
0xbc8: vbc8(0x40) = CONST 
0xbcb: vbcb = MLOAD vbc8(0x40)
0xbcc: vbcc(0x20) = CONST 
0xbce: vbce(0x2) = CONST 
0xbd0: vbd0(0x1) = CONST 
0xbd3: vbd3 = AND vbc7 vbd0(0x1)
0xbd4: vbd4 = ISZERO vbd3
0xbd5: vbd5(0x100) = CONST 
0xbd8: vbd8 = MUL vbd5(0x100) vbd4
0xbd9: vbd9(0x0) = CONST 
0xbdb: vbdb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT vbd9(0x0)
0xbdc: vbdc = ADD vbdb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) vbd8
0xbdf: vbdf = AND vbc7 vbdc
0xbe3: vbe3 = DIV vbdf vbce(0x2)
0xbe4: vbe4(0x1f) = CONST 
0xbe7: vbe7 = ADD vbe3 vbe4(0x1f)
0xbea: vbea = DIV vbe7 vbcc(0x20)
0xbec: vbec = MUL vbcc(0x20) vbea
0xbee: vbee = ADD vbcb vbec
0xbf0: vbf0 = ADD vbcc(0x20) vbee
0xbf3: MSTORE vbc8(0x40) vbf0
0xbf6: MSTORE vbcb vbe3
0xbfa: vbfa = ADD vbcb vbcc(0x20)
0xbfe: vbfe = ISZERO vbe3
0xbff: vbff(0x5ef) = CONST 
0xc02: JUMPI vbff(0x5ef) vbfe
----------------------------------

Begin block 0xc03
prev = {'0xbc3'}, next = {'0xc0b', '0x5c40xbc3'}
----------------------------------
Block 0xc03
0xc04: vc04(0x1f) = CONST 
0xc06: vc06 = LT vc04(0x1f) vbe3
0xc07: vc07(0x5c4) = CONST 
0xc0a: JUMPI vc07(0x5c4) vc06
----------------------------------

Begin block 0xc0b
prev = {'0xc03'}, next = {'0x5ef0xbc3'}
----------------------------------
Block 0xc0b
0xc0b: vc0b(0x100) = CONST 
0xc10: vc10 = SLOAD vbc4(0x6)
0xc11: vc11 = DIV vc10 vc0b(0x100)
0xc12: vc12 = MUL vc11 vc0b(0x100)
0xc14: MSTORE vbfa vc12
0xc16: vc16(0x20) = CONST 
0xc18: vc18 = ADD vc16(0x20) vbfa
0xc1a: vc1a(0x5ef) = CONST 
0xc1d: JUMP vc1a(0x5ef)
----------------------------------

Begin block 0xc1e
prev = {'0x422'}, next = {'0xc35', '0xc31'}
----------------------------------
Block 0xc1e
0xc1f: vc1f(0x0) = CONST 
0xc21: vc21 = SLOAD vc1f(0x0)
0xc22: vc22(0x1) = CONST 
0xc24: vc24(0xa0) = CONST 
0xc26: vc26(0x2) = CONST 
0xc28: vc28(0x10000000000000000000000000000000000000000) = EXP vc26(0x2) vc24(0xa0)
0xc29: vc29(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc28(0x10000000000000000000000000000000000000000) vc22(0x1)
0xc2a: vc2a = AND vc29(0xffffffffffffffffffffffffffffffffffffffff) vc21
0xc2b: vc2b = CALLER 
0xc2c: vc2c = EQ vc2b vc2a
0xc2d: vc2d(0xc35) = CONST 
0xc30: JUMPI vc2d(0xc35) vc2c
----------------------------------

Begin block 0xc31
prev = {'0xc1e'}, next = {}
----------------------------------
Block 0xc31
0xc31: vc31(0x0) = CONST 
0xc34: REVERT vc31(0x0) vc31(0x0)
----------------------------------

Begin block 0xc35
prev = {'0xc1e'}, next = {'0x2960x3ff'}
----------------------------------
Block 0xc35
0xc36: vc36(0x1) = CONST 
0xc38: vc38(0xa0) = CONST 
0xc3a: vc3a(0x2) = CONST 
0xc3c: vc3c(0x10000000000000000000000000000000000000000) = EXP vc3a(0x2) vc38(0xa0)
0xc3d: vc3d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc3c(0x10000000000000000000000000000000000000000) vc36(0x1)
0xc3f: vc3f = AND v42d vc3d(0xffffffffffffffffffffffffffffffffffffffff)
0xc40: vc40(0x0) = CONST 
0xc44: MSTORE vc40(0x0) vc3f
0xc45: vc45(0x1) = CONST 
0xc47: vc47(0x20) = CONST 
0xc49: MSTORE vc47(0x20) vc45(0x1)
0xc4a: vc4a(0x40) = CONST 
0xc4e: vc4e = SHA3 vc40(0x0) vc4a(0x40)
0xc50: vc50 = SLOAD vc4e
0xc51: vc51(0xff) = CONST 
0xc53: vc53(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vc51(0xff)
0xc54: vc54 = AND vc53(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) vc50
0xc56: SSTORE vc4e vc54
0xc57: vc57 = MLOAD vc4a(0x40)
0xc58: vc58(0x3add86390d8542bdd3b58cb90396f269d513385b6247b7ae9c5079ae74ce8d1b) = CONST 
0xc7b: LOG2 vc57 vc40(0x0) vc58(0x3add86390d8542bdd3b58cb90396f269d513385b6247b7ae9c5079ae74ce8d1b) vc3f
0xc7d: JUMP v40d(0x296)
----------------------------------

Begin block 0xc7e
prev = {'0x43e'}, next = {'0x2510x432'}
----------------------------------
Block 0xc7e
0xc7f: vc7f(0x4) = CONST 
0xc81: vc81 = SLOAD vc7f(0x4)
0xc83: JUMP v440(0x251)
----------------------------------

Begin block 0xc84
prev = {}, next = {'0xc8f0xc84'}
----------------------------------
function 0xc84(vc84arg0, vc84arg1, vc84arg2)
Block 0xc84
0xc85: vc85(0x0) = CONST 
0xc87: vc87(0xc8f) = CONST 
0xc8a: vc8a = CALLER 
0xc8b: vc8b(0xd6c) = CONST 
0xc8e: CALLPRIVATE vc8b(0xd6c) vc8a vc87(0xc8f)
----------------------------------

Begin block 0xc840x447
prev = {'0x46a'}, next = {'0xc8f0x447'}
----------------------------------
Block 0xc840x447
0xc850x447: v447c85(0x0) = CONST 
0xc870x447: v447c87(0xc8f) = CONST 
0xc8a0x447: v447c8a = CALLER 
0xc8b0x447: v447c8b(0xd6c) = CONST 
0xc8e0x447: CALLPRIVATE v447c8b(0xd6c) v447c8a v447c87(0xc8f)
----------------------------------

Begin block 0xc8f0x447
prev = {'0xc840x447'}, next = {'0xc980x447'}
----------------------------------
Block 0xc8f0x447
0xc900x447: v447c90(0xc98) = CONST 
0xc940x447: v447c94(0xd6c) = CONST 
0xc970x447: CALLPRIVATE v447c94(0xd6c) v476 v447c90(0xc98)
----------------------------------

Begin block 0xc8f0xc84
prev = {'0xc84'}, next = {'0xc980xc84'}
----------------------------------
Block 0xc8f0xc84
0xc900xc84: vc84c90(0xc98) = CONST 
0xc940xc84: vc84c94(0xd6c) = CONST 
0xc970xc84: CALLPRIVATE vc84c94(0xd6c) vc84arg1 vc84c90(0xc98)
----------------------------------

Begin block 0xc980x447
prev = {'0xc8f0x447'}, next = {'0xcb80x447'}
----------------------------------
Block 0xc980x447
0xc990x447: v447c99 = CALLER 
0xc9a0x447: v447c9a(0x0) = CONST 
0xc9e0x447: MSTORE v447c9a(0x0) v447c99
0xc9f0x447: v447c9f(0xa) = CONST 
0xca10x447: v447ca1(0x20) = CONST 
0xca30x447: MSTORE v447ca1(0x20) v447c9f(0xa)
0xca40x447: v447ca4(0x40) = CONST 
0xca70x447: v447ca7 = SHA3 v447c9a(0x0) v447ca4(0x40)
0xca80x447: v447ca8 = SLOAD v447ca7
0xca90x447: v447ca9(0xcb8) = CONST 
0xcae0x447: v447cae(0xffffffff) = CONST 
0xcb30x447: v447cb3(0xe6b) = CONST 
0xcb60x447: v447cb6(0xe6b) = AND v447cb3(0xe6b) v447cae(0xffffffff)
0xcb70x447: v447cb7_0 = CALLPRIVATE v447cb6(0xe6b) v47b v447ca8 v447ca9(0xcb8)
----------------------------------

Begin block 0xc980xc84
prev = {'0xc8f0xc84'}, next = {'0xcb80xc84'}
----------------------------------
Block 0xc980xc84
0xc990xc84: vc84c99 = CALLER 
0xc9a0xc84: vc84c9a(0x0) = CONST 
0xc9e0xc84: MSTORE vc84c9a(0x0) vc84c99
0xc9f0xc84: vc84c9f(0xa) = CONST 
0xca10xc84: vc84ca1(0x20) = CONST 
0xca30xc84: MSTORE vc84ca1(0x20) vc84c9f(0xa)
0xca40xc84: vc84ca4(0x40) = CONST 
0xca70xc84: vc84ca7 = SHA3 vc84c9a(0x0) vc84ca4(0x40)
0xca80xc84: vc84ca8 = SLOAD vc84ca7
0xca90xc84: vc84ca9(0xcb8) = CONST 
0xcae0xc84: vc84cae(0xffffffff) = CONST 
0xcb30xc84: vc84cb3(0xe6b) = CONST 
0xcb60xc84: vc84cb6(0xe6b) = AND vc84cb3(0xe6b) vc84cae(0xffffffff)
0xcb70xc84: vc84cb7_0 = CALLPRIVATE vc84cb6(0xe6b) vc84arg0 vc84ca8 vc84ca9(0xcb8)
----------------------------------

Begin block 0xcb80x447
prev = {'0xc980x447'}, next = {'0xcea0x447'}
----------------------------------
Block 0xcb80x447
0xcb90x447: v447cb9 = CALLER 
0xcba0x447: v447cba(0x0) = CONST 
0xcbe0x447: MSTORE v447cba(0x0) v447cb9
0xcbf0x447: v447cbf(0xa) = CONST 
0xcc10x447: v447cc1(0x20) = CONST 
0xcc30x447: MSTORE v447cc1(0x20) v447cbf(0xa)
0xcc40x447: v447cc4(0x40) = CONST 
0xcc80x447: v447cc8 = SHA3 v447cba(0x0) v447cc4(0x40)
0xccc0x447: SSTORE v447cc8 v447cb7_0
0xccd0x447: v447ccd(0x1) = CONST 
0xccf0x447: v447ccf(0xa0) = CONST 
0xcd10x447: v447cd1(0x2) = CONST 
0xcd30x447: v447cd3(0x10000000000000000000000000000000000000000) = EXP v447cd1(0x2) v447ccf(0xa0)
0xcd40x447: v447cd4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v447cd3(0x10000000000000000000000000000000000000000) v447ccd(0x1)
0xcd60x447: v447cd6 = AND v476 v447cd4(0xffffffffffffffffffffffffffffffffffffffff)
0xcd80x447: MSTORE v447cba(0x0) v447cd6
0xcd90x447: v447cd9 = SHA3 v447cba(0x0) v447cc4(0x40)
0xcda0x447: v447cda = SLOAD v447cd9
0xcdb0x447: v447cdb(0xcea) = CONST 
0xce00x447: v447ce0(0xffffffff) = CONST 
0xce50x447: v447ce5(0xe80) = CONST 
0xce80x447: v447ce8(0xe80) = AND v447ce5(0xe80) v447ce0(0xffffffff)
0xce90x447: v447ce9_0 = CALLPRIVATE v447ce8(0xe80) v47b v447cda v447cdb(0xcea)
----------------------------------

Begin block 0xcb80xc84
prev = {'0xc980xc84'}, next = {'0xcea0xc84'}
----------------------------------
Block 0xcb80xc84
0xcb90xc84: vc84cb9 = CALLER 
0xcba0xc84: vc84cba(0x0) = CONST 
0xcbe0xc84: MSTORE vc84cba(0x0) vc84cb9
0xcbf0xc84: vc84cbf(0xa) = CONST 
0xcc10xc84: vc84cc1(0x20) = CONST 
0xcc30xc84: MSTORE vc84cc1(0x20) vc84cbf(0xa)
0xcc40xc84: vc84cc4(0x40) = CONST 
0xcc80xc84: vc84cc8 = SHA3 vc84cba(0x0) vc84cc4(0x40)
0xccc0xc84: SSTORE vc84cc8 vc84cb7_0
0xccd0xc84: vc84ccd(0x1) = CONST 
0xccf0xc84: vc84ccf(0xa0) = CONST 
0xcd10xc84: vc84cd1(0x2) = CONST 
0xcd30xc84: vc84cd3(0x10000000000000000000000000000000000000000) = EXP vc84cd1(0x2) vc84ccf(0xa0)
0xcd40xc84: vc84cd4(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc84cd3(0x10000000000000000000000000000000000000000) vc84ccd(0x1)
0xcd60xc84: vc84cd6 = AND vc84arg1 vc84cd4(0xffffffffffffffffffffffffffffffffffffffff)
0xcd80xc84: MSTORE vc84cba(0x0) vc84cd6
0xcd90xc84: vc84cd9 = SHA3 vc84cba(0x0) vc84cc4(0x40)
0xcda0xc84: vc84cda = SLOAD vc84cd9
0xcdb0xc84: vc84cdb(0xcea) = CONST 
0xce00xc84: vc84ce0(0xffffffff) = CONST 
0xce50xc84: vc84ce5(0xe80) = CONST 
0xce80xc84: vc84ce8(0xe80) = AND vc84ce5(0xe80) vc84ce0(0xffffffff)
0xce90xc84: vc84ce9_0 = CALLPRIVATE vc84ce8(0xe80) vc84arg0 vc84cda vc84cdb(0xcea)
----------------------------------

Begin block 0xcea0x447
prev = {'0xcb80x447'}, next = {'0x1ef0x447'}
----------------------------------
Block 0xcea0x447
0xceb0x447: v447ceb(0x1) = CONST 
0xced0x447: v447ced(0xa0) = CONST 
0xcef0x447: v447cef(0x2) = CONST 
0xcf10x447: v447cf1(0x10000000000000000000000000000000000000000) = EXP v447cef(0x2) v447ced(0xa0)
0xcf20x447: v447cf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v447cf1(0x10000000000000000000000000000000000000000) v447ceb(0x1)
0xcf40x447: v447cf4 = AND v476 v447cf2(0xffffffffffffffffffffffffffffffffffffffff)
0xcf50x447: v447cf5(0x0) = CONST 
0xcf90x447: MSTORE v447cf5(0x0) v447cf4
0xcfa0x447: v447cfa(0xa) = CONST 
0xcfc0x447: v447cfc(0x20) = CONST 
0xd000x447: MSTORE v447cfc(0x20) v447cfa(0xa)
0xd010x447: v447d01(0x40) = CONST 
0xd060x447: v447d06 = SHA3 v447cf5(0x0) v447d01(0x40)
0xd0a0x447: SSTORE v447d06 v447ce9_0
0xd0c0x447: v447d0c = MLOAD v447d01(0x40)
0xd0f0x447: MSTORE v447d0c v47b
0xd110x447: v447d11 = MLOAD v447d01(0x40)
0xd140x447: v447d14 = CALLER 
0xd160x447: v447d16(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd3a0x447: v447d3a = SUB v447d0c v447d11
0xd3d0x447: v447d3d = ADD v447cfc(0x20) v447d3a
0xd3f0x447: LOG3 v447d11 v447d3d v447d16(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) v447d14 v447cf4
0xd410x447: v447d41(0x1) = CONST 
0xd470x447: JUMP v455(0x1ef)
----------------------------------

Begin block 0xcea0xc84
prev = {'0xcb80xc84'}, next = {}
----------------------------------
Block 0xcea0xc84
0xceb0xc84: vc84ceb(0x1) = CONST 
0xced0xc84: vc84ced(0xa0) = CONST 
0xcef0xc84: vc84cef(0x2) = CONST 
0xcf10xc84: vc84cf1(0x10000000000000000000000000000000000000000) = EXP vc84cef(0x2) vc84ced(0xa0)
0xcf20xc84: vc84cf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc84cf1(0x10000000000000000000000000000000000000000) vc84ceb(0x1)
0xcf40xc84: vc84cf4 = AND vc84arg1 vc84cf2(0xffffffffffffffffffffffffffffffffffffffff)
0xcf50xc84: vc84cf5(0x0) = CONST 
0xcf90xc84: MSTORE vc84cf5(0x0) vc84cf4
0xcfa0xc84: vc84cfa(0xa) = CONST 
0xcfc0xc84: vc84cfc(0x20) = CONST 
0xd000xc84: MSTORE vc84cfc(0x20) vc84cfa(0xa)
0xd010xc84: vc84d01(0x40) = CONST 
0xd060xc84: vc84d06 = SHA3 vc84cf5(0x0) vc84d01(0x40)
0xd0a0xc84: SSTORE vc84d06 vc84ce9_0
0xd0c0xc84: vc84d0c = MLOAD vc84d01(0x40)
0xd0f0xc84: MSTORE vc84d0c vc84arg0
0xd110xc84: vc84d11 = MLOAD vc84d01(0x40)
0xd140xc84: vc84d14 = CALLER 
0xd160xc84: vc84d16(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
0xd3a0xc84: vc84d3a = SUB vc84d0c vc84d11
0xd3d0xc84: vc84d3d = ADD vc84cfc(0x20) vc84d3a
0xd3f0xc84: LOG3 vc84d11 vc84d3d vc84d16(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) vc84d14 vc84cf4
0xd410xc84: vc84d41(0x1) = CONST 
0xd470xc84: RETURNPRIVATE vc84arg2 vc84d41(0x1)
----------------------------------

Begin block 0xd48
prev = {'0x48c'}, next = {'0x2510x480'}
----------------------------------
Block 0xd48
0xd49: vd49(0x9) = CONST 
0xd4b: vd4b = SLOAD vd49(0x9)
0xd4d: JUMP v48e(0x251)
----------------------------------

Begin block 0xd4e
prev = {'0x4b8'}, next = {'0x1ef0x495'}
----------------------------------
Block 0xd4e
0xd4f: vd4f(0x1) = CONST 
0xd51: vd51(0xa0) = CONST 
0xd53: vd53(0x2) = CONST 
0xd55: vd55(0x10000000000000000000000000000000000000000) = EXP vd53(0x2) vd51(0xa0)
0xd56: vd56(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd55(0x10000000000000000000000000000000000000000) vd4f(0x1)
0xd57: vd57 = AND vd56(0xffffffffffffffffffffffffffffffffffffffff) v4c3
0xd58: vd58(0x0) = CONST 
0xd5c: MSTORE vd58(0x0) vd57
0xd5d: vd5d(0x1) = CONST 
0xd5f: vd5f(0x20) = CONST 
0xd61: MSTORE vd5f(0x20) vd5d(0x1)
0xd62: vd62(0x40) = CONST 
0xd65: vd65 = SHA3 vd58(0x0) vd62(0x40)
0xd66: vd66 = SLOAD vd65
0xd67: vd67(0xff) = CONST 
0xd69: vd69 = AND vd67(0xff) vd66
0xd6b: JUMP v4a3(0x1ef)
----------------------------------

Begin block 0xd6c
prev = {}, next = {'0xd970xd6c', '0xd930xd6c'}
----------------------------------
function 0xd6c(vd6carg0, vd6carg1)
Block 0xd6c
0xd6d: vd6d(0x1) = CONST 
0xd6f: vd6f(0xa0) = CONST 
0xd71: vd71(0x2) = CONST 
0xd73: vd73(0x10000000000000000000000000000000000000000) = EXP vd71(0x2) vd6f(0xa0)
0xd74: vd74(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd73(0x10000000000000000000000000000000000000000) vd6d(0x1)
0xd76: vd76 = AND vd6carg0 vd74(0xffffffffffffffffffffffffffffffffffffffff)
0xd77: vd77(0x0) = CONST 
0xd7b: MSTORE vd77(0x0) vd76
0xd7c: vd7c(0x1) = CONST 
0xd7e: vd7e(0x20) = CONST 
0xd82: MSTORE vd7e(0x20) vd7c(0x1)
0xd83: vd83(0x40) = CONST 
0xd87: vd87 = SHA3 vd77(0x0) vd83(0x40)
0xd88: vd88 = SLOAD vd87
0xd89: vd89(0xff) = CONST 
0xd8b: vd8b = AND vd89(0xff) vd88
0xd8c: vd8c = ISZERO vd8b
0xd8d: vd8d = ISZERO vd8c
0xd8e: vd8e = EQ vd8d vd7c(0x1)
0xd8f: vd8f(0xd97) = CONST 
0xd92: JUMPI vd8f(0xd97) vd8e
----------------------------------

Begin block 0xd6c0x4c8
prev = {'0x4eb'}, next = {'0xd930x4c8', '0xd970x4c8'}
----------------------------------
Block 0xd6c0x4c8
0xd6d0x4c8: v4c8d6d(0x1) = CONST 
0xd6f0x4c8: v4c8d6f(0xa0) = CONST 
0xd710x4c8: v4c8d71(0x2) = CONST 
0xd730x4c8: v4c8d73(0x10000000000000000000000000000000000000000) = EXP v4c8d71(0x2) v4c8d6f(0xa0)
0xd740x4c8: v4c8d74(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c8d73(0x10000000000000000000000000000000000000000) v4c8d6d(0x1)
0xd760x4c8: v4c8d76 = AND v4f6 v4c8d74(0xffffffffffffffffffffffffffffffffffffffff)
0xd770x4c8: v4c8d77(0x0) = CONST 
0xd7b0x4c8: MSTORE v4c8d77(0x0) v4c8d76
0xd7c0x4c8: v4c8d7c(0x1) = CONST 
0xd7e0x4c8: v4c8d7e(0x20) = CONST 
0xd820x4c8: MSTORE v4c8d7e(0x20) v4c8d7c(0x1)
0xd830x4c8: v4c8d83(0x40) = CONST 
0xd870x4c8: v4c8d87 = SHA3 v4c8d77(0x0) v4c8d83(0x40)
0xd880x4c8: v4c8d88 = SLOAD v4c8d87
0xd890x4c8: v4c8d89(0xff) = CONST 
0xd8b0x4c8: v4c8d8b = AND v4c8d89(0xff) v4c8d88
0xd8c0x4c8: v4c8d8c = ISZERO v4c8d8b
0xd8d0x4c8: v4c8d8d = ISZERO v4c8d8c
0xd8e0x4c8: v4c8d8e = EQ v4c8d8d v4c8d7c(0x1)
0xd8f0x4c8: v4c8d8f(0xd97) = CONST 
0xd920x4c8: JUMPI v4c8d8f(0xd97) v4c8d8e
----------------------------------

Begin block 0xd930x4c8
prev = {'0xd6c0x4c8'}, next = {}
----------------------------------
Block 0xd930x4c8
0xd930x4c8: v4c8d93(0x0) = CONST 
0xd960x4c8: REVERT v4c8d93(0x0) v4c8d93(0x0)
----------------------------------

Begin block 0xd930xd6c
prev = {'0xd6c'}, next = {}
----------------------------------
Block 0xd930xd6c
0xd930xd6c: vd6cd93(0x0) = CONST 
0xd960xd6c: REVERT vd6cd93(0x0) vd6cd93(0x0)
----------------------------------

Begin block 0xd970x4c8
prev = {'0xd6c0x4c8'}, next = {'0x2960x4c8'}
----------------------------------
Block 0xd970x4c8
0xd990x4c8: JUMP v4d6(0x296)
----------------------------------

Begin block 0xd970xd6c
prev = {'0xd6c'}, next = {}
----------------------------------
Block 0xd970xd6c
0xd990xd6c: RETURNPRIVATE vd6carg1
----------------------------------

Begin block 0xd9a
prev = {'0x51e'}, next = {'0x2510x4fb'}
----------------------------------
Block 0xd9a
0xd9b: vd9b(0x1) = CONST 
0xd9d: vd9d(0xa0) = CONST 
0xd9f: vd9f(0x2) = CONST 
0xda1: vda1(0x10000000000000000000000000000000000000000) = EXP vd9f(0x2) vd9d(0xa0)
0xda2: vda2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vda1(0x10000000000000000000000000000000000000000) vd9b(0x1)
0xda5: vda5 = AND vda2(0xffffffffffffffffffffffffffffffffffffffff) v52b
0xda6: vda6(0x0) = CONST 
0xdaa: MSTORE vda6(0x0) vda5
0xdab: vdab(0xb) = CONST 
0xdad: vdad(0x20) = CONST 
0xdb1: MSTORE vdad(0x20) vdab(0xb)
0xdb2: vdb2(0x40) = CONST 
0xdb6: vdb6 = SHA3 vda6(0x0) vdb2(0x40)
0xdba: vdba = AND vda2(0xffffffffffffffffffffffffffffffffffffffff) v531
0xdbc: MSTORE vda6(0x0) vdba
0xdc0: MSTORE vdad(0x20) vdb6
0xdc1: vdc1 = SHA3 vda6(0x0) vdb2(0x40)
0xdc2: vdc2 = SLOAD vdc1
0xdc4: JUMP v509(0x251)
----------------------------------

Begin block 0xdc5
prev = {'0x559'}, next = {'0xdd8', '0xddc'}
----------------------------------
Block 0xdc5
0xdc6: vdc6(0x0) = CONST 
0xdc8: vdc8 = SLOAD vdc6(0x0)
0xdc9: vdc9(0x1) = CONST 
0xdcb: vdcb(0xa0) = CONST 
0xdcd: vdcd(0x2) = CONST 
0xdcf: vdcf(0x10000000000000000000000000000000000000000) = EXP vdcd(0x2) vdcb(0xa0)
0xdd0: vdd0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdcf(0x10000000000000000000000000000000000000000) vdc9(0x1)
0xdd1: vdd1 = AND vdd0(0xffffffffffffffffffffffffffffffffffffffff) vdc8
0xdd2: vdd2 = CALLER 
0xdd3: vdd3 = EQ vdd2 vdd1
0xdd4: vdd4(0xddc) = CONST 
0xdd7: JUMPI vdd4(0xddc) vdd3
----------------------------------

Begin block 0xdd8
prev = {'0xdc5'}, next = {}
----------------------------------
Block 0xdd8
0xdd8: vdd8(0x0) = CONST 
0xddb: REVERT vdd8(0x0) vdd8(0x0)
----------------------------------

Begin block 0xddc
prev = {'0xdc5'}, next = {'0xded', '0xdf1'}
----------------------------------
Block 0xddc
0xddd: vddd(0x1) = CONST 
0xddf: vddf(0xa0) = CONST 
0xde1: vde1(0x2) = CONST 
0xde3: vde3(0x10000000000000000000000000000000000000000) = EXP vde1(0x2) vddf(0xa0)
0xde4: vde4(0xffffffffffffffffffffffffffffffffffffffff) = SUB vde3(0x10000000000000000000000000000000000000000) vddd(0x1)
0xde6: vde6 = AND v564 vde4(0xffffffffffffffffffffffffffffffffffffffff)
0xde7: vde7 = ISZERO vde6
0xde8: vde8 = ISZERO vde7
0xde9: vde9(0xdf1) = CONST 
0xdec: JUMPI vde9(0xdf1) vde8
----------------------------------

Begin block 0xded
prev = {'0xddc'}, next = {}
----------------------------------
Block 0xded
0xded: vded(0x0) = CONST 
0xdf0: REVERT vded(0x0) vded(0x0)
----------------------------------

Begin block 0xdf1
prev = {'0xddc'}, next = {'0xe0c', '0xe08'}
----------------------------------
Block 0xdf1
0xdf2: vdf2(0x2) = CONST 
0xdf4: vdf4 = SLOAD vdf2(0x2)
0xdf5: vdf5(0x1) = CONST 
0xdf7: vdf7(0xa0) = CONST 
0xdf9: vdf9(0x2) = CONST 
0xdfb: vdfb(0x10000000000000000000000000000000000000000) = EXP vdf9(0x2) vdf7(0xa0)
0xdfc: vdfc(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdfb(0x10000000000000000000000000000000000000000) vdf5(0x1)
0xdff: vdff = AND vdfc(0xffffffffffffffffffffffffffffffffffffffff) v564
0xe01: ve01 = AND vdf4 vdfc(0xffffffffffffffffffffffffffffffffffffffff)
0xe02: ve02 = EQ ve01 vdff
0xe03: ve03 = ISZERO ve02
0xe04: ve04(0xe0c) = CONST 
0xe07: JUMPI ve04(0xe0c) ve03
----------------------------------

Begin block 0xe08
prev = {'0xdf1'}, next = {}
----------------------------------
Block 0xe08
0xe08: ve08(0x0) = CONST 
0xe0b: REVERT ve08(0x0) ve08(0x0)
----------------------------------

Begin block 0xe0c
prev = {'0xdf1'}, next = {'0xe15'}
----------------------------------
Block 0xe0c
0xe0d: ve0d(0xe15) = CONST 
0xe11: ve11(0x786) = CONST 
0xe14: CALLPRIVATE ve11(0x786) v564 ve0d(0xe15)
----------------------------------

Begin block 0xe15
prev = {'0xe0c'}, next = {'0xe3b'}
----------------------------------
Block 0xe15
0xe16: ve16(0x2) = CONST 
0xe18: ve18 = SLOAD ve16(0x2)
0xe19: ve19(0x1) = CONST 
0xe1b: ve1b(0xa0) = CONST 
0xe1d: ve1d(0x2) = CONST 
0xe1f: ve1f(0x10000000000000000000000000000000000000000) = EXP ve1d(0x2) ve1b(0xa0)
0xe20: ve20(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve1f(0x10000000000000000000000000000000000000000) ve19(0x1)
0xe21: ve21 = AND ve20(0xffffffffffffffffffffffffffffffffffffffff) ve18
0xe22: ve22(0x0) = CONST 
0xe26: MSTORE ve22(0x0) ve21
0xe27: ve27(0xa) = CONST 
0xe29: ve29(0x20) = CONST 
0xe2b: MSTORE ve29(0x20) ve27(0xa)
0xe2c: ve2c(0x40) = CONST 
0xe2f: ve2f = SHA3 ve22(0x0) ve2c(0x40)
0xe30: ve30 = SLOAD ve2f
0xe31: ve31(0xe3b) = CONST 
0xe37: ve37(0xc84) = CONST 
0xe3a: ve3a_0 = CALLPRIVATE ve37(0xc84) ve30 v564 ve31(0xe3b)
----------------------------------

Begin block 0xe3b
prev = {'0xe15'}, next = {'0x2960x536'}
----------------------------------
Block 0xe3b
0xe3d: ve3d(0x2) = CONST 
0xe40: ve40 = SLOAD ve3d(0x2)
0xe41: ve41(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
0xe56: ve56(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT ve41(0xffffffffffffffffffffffffffffffffffffffff)
0xe57: ve57 = AND ve56(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) ve40
0xe58: ve58(0x1) = CONST 
0xe5a: ve5a(0xa0) = CONST 
0xe5c: ve5c(0x2) = CONST 
0xe5e: ve5e(0x10000000000000000000000000000000000000000) = EXP ve5c(0x2) ve5a(0xa0)
0xe5f: ve5f(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve5e(0x10000000000000000000000000000000000000000) ve58(0x1)
0xe63: ve63 = AND ve5f(0xffffffffffffffffffffffffffffffffffffffff) v564
0xe67: ve67 = OR ve63 ve57
0xe69: SSTORE ve3d(0x2) ve67
0xe6a: JUMP v544(0x296)
----------------------------------

Begin block 0xe6b
prev = {}, next = {'0xe7a', '0xe76'}
----------------------------------
function 0xe6b(ve6barg0, ve6barg1, ve6barg2)
Block 0xe6b
0xe6c: ve6c(0x0) = CONST 
0xe70: ve70 = GT ve6barg0 ve6barg1
0xe71: ve71 = ISZERO ve70
0xe72: ve72(0xe7a) = CONST 
0xe75: JUMPI ve72(0xe7a) ve71
----------------------------------

Begin block 0xe76
prev = {'0xe6b'}, next = {}
----------------------------------
Block 0xe76
0xe76: ve76(0x0) = CONST 
0xe79: REVERT ve76(0x0) ve76(0x0)
----------------------------------

Begin block 0xe7a
prev = {'0xe6b'}, next = {}
----------------------------------
Block 0xe7a
0xe7d: ve7d = SUB ve6barg1 ve6barg0
0xe7f: RETURNPRIVATE ve6barg2 ve7d
----------------------------------

Begin block 0xe80
prev = {}, next = {'0xe8c', '0x6940xe80'}
----------------------------------
function 0xe80(ve80arg0, ve80arg1, ve80arg2)
Block 0xe80
0xe83: ve83 = ADD ve80arg0 ve80arg1
0xe86: ve86 = LT ve83 ve80arg1
0xe87: ve87 = ISZERO ve86
0xe88: ve88(0x694) = CONST 
0xe8b: JUMPI ve88(0x694) ve87
----------------------------------

Begin block 0xe8c
prev = {'0xe80'}, next = {}
----------------------------------
Block 0xe8c
0xe8c: ve8c(0x0) = CONST 
0xe8f: REVERT ve8c(0x0) ve8c(0x0)
----------------------------------

Begin block 0xedb
prev = {'0x11c', '0x0'}, next = {}
----------------------------------
Block 0xedb
0xedc: vedc(0x127) = CONST 
0xedd: CALLPRIVATE vedc(0x127)
----------------------------------

Begin block 0xede
prev = {'0xd'}, next = {}
----------------------------------
Block 0xede
0xedf: vedf(0x12c) = CONST 
0xee0: CALLPRIVATE vedf(0x12c)
----------------------------------

Begin block 0xee1
prev = {'0x40'}, next = {}
----------------------------------
Block 0xee1
0xee2: vee2(0x1b6) = CONST 
0xee3: CALLPRIVATE vee2(0x1b6)
----------------------------------

Begin block 0xee4
prev = {'0x4b'}, next = {}
----------------------------------
Block 0xee4
0xee5: vee5(0x203) = CONST 
0xee6: CALLPRIVATE vee5(0x203)
----------------------------------

Begin block 0xee7
prev = {'0x56'}, next = {}
----------------------------------
Block 0xee7
0xee8: vee8(0x23c) = CONST 
0xee9: CALLPRIVATE vee8(0x23c)
----------------------------------

Begin block 0xeea
prev = {'0x61'}, next = {}
----------------------------------
Block 0xeea
0xeeb: veeb(0x263) = CONST 
0xeec: CALLPRIVATE veeb(0x263)
----------------------------------

Begin block 0xeed
prev = {'0x6c'}, next = {}
----------------------------------
Block 0xeed
0xeee: veee(0x298) = CONST 
0xeef: CALLPRIVATE veee(0x298)
----------------------------------

Begin block 0xef0
prev = {'0x77'}, next = {}
----------------------------------
Block 0xef0
0xef1: vef1(0x2db) = CONST 
0xef2: CALLPRIVATE vef1(0x2db)
----------------------------------

Begin block 0xef3
prev = {'0x82'}, next = {}
----------------------------------
Block 0xef3
0xef4: vef4(0x305) = CONST 
0xef5: CALLPRIVATE vef4(0x305)
----------------------------------

Begin block 0xef6
prev = {'0x8d'}, next = {}
----------------------------------
Block 0xef6
0xef7: vef7(0x30d) = CONST 
0xef8: CALLPRIVATE vef7(0x30d)
----------------------------------

Begin block 0xef9
prev = {'0x98'}, next = {}
----------------------------------
Block 0xef9
0xefa: vefa(0x322) = CONST 
0xefb: CALLPRIVATE vefa(0x322)
----------------------------------

Begin block 0xefc
prev = {'0xa3'}, next = {}
----------------------------------
Block 0xefc
0xefd: vefd(0x34d) = CONST 
0xefe: CALLPRIVATE vefd(0x34d)
----------------------------------

Begin block 0xeff
prev = {'0xae'}, next = {}
----------------------------------
Block 0xeff
0xf00: vf00(0x380) = CONST 
0xf01: CALLPRIVATE vf00(0x380)
----------------------------------

Begin block 0xf02
prev = {'0xb9'}, next = {}
----------------------------------
Block 0xf02
0xf03: vf03(0x3b9) = CONST 
0xf04: CALLPRIVATE vf03(0x3b9)
----------------------------------

Begin block 0xf05
prev = {'0xc4'}, next = {}
----------------------------------
Block 0xf05
0xf06: vf06(0x3ea) = CONST 
0xf07: CALLPRIVATE vf06(0x3ea)
----------------------------------

Begin block 0xf08
prev = {'0xcf'}, next = {}
----------------------------------
Block 0xf08
0xf09: vf09(0x3ff) = CONST 
0xf0a: CALLPRIVATE vf09(0x3ff)
----------------------------------

Begin block 0xf0b
prev = {'0xda'}, next = {}
----------------------------------
Block 0xf0b
0xf0c: vf0c(0x432) = CONST 
0xf0d: CALLPRIVATE vf0c(0x432)
----------------------------------

Begin block 0xf0e
prev = {'0xe5'}, next = {}
----------------------------------
Block 0xf0e
0xf0f: vf0f(0x447) = CONST 
0xf10: CALLPRIVATE vf0f(0x447)
----------------------------------

Begin block 0xf11
prev = {'0xf0'}, next = {}
----------------------------------
Block 0xf11
0xf12: vf12(0x480) = CONST 
0xf13: CALLPRIVATE vf12(0x480)
----------------------------------

Begin block 0xf14
prev = {'0xfb'}, next = {}
----------------------------------
Block 0xf14
0xf15: vf15(0x495) = CONST 
0xf16: CALLPRIVATE vf15(0x495)
----------------------------------

Begin block 0xf17
prev = {'0x106'}, next = {}
----------------------------------
Block 0xf17
0xf18: vf18(0x4c8) = CONST 
0xf19: CALLPRIVATE vf18(0x4c8)
----------------------------------

Begin block 0xf1a
prev = {'0x111'}, next = {}
----------------------------------
Block 0xf1a
0xf1b: vf1b(0x4fb) = CONST 
0xf1c: CALLPRIVATE vf1b(0x4fb)
----------------------------------

Begin block 0xf1d
prev = {'0x11c'}, next = {}
----------------------------------
Block 0xf1d
0xf1e: vf1e(0x536) = CONST 
0xf1f: CALLPRIVATE vf1e(0x536)
----------------------------------
