<!DOCTYPE html>
<html>
<head>
    <title>Call Graph</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" integrity="sha256-iq5ygGJ7021Pi7H5S+QAUXCPUfaBzfqeplbg/KlEssg=" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js" integrity="sha256-JuQeAGbk9rG/EoRMixuy5X8syzICcvB0dj3KindZkY0=" crossorigin="anonymous"></script>

    
    <style type="text/css">
        #mynetwork {
          height: 100%;
            background-color: #232625;
        }
        body {
            background-color: #232625;
            color: #ffffff;
            font-size: 10px;
        }
        html, body {
          height: 95%;
        }
    </style>
    

    <script>
        var options = {"autoResize": true, "edges": {"font": {"align": "horizontal", "background": "none", "color": "#FFFFFF", "face": "arial", "multi": false, "strokeColor": "#ffffff", "strokeWidth": 0, "vadjust": 0}}, "height": "100%", "layout": {"hierarchical": {"blockShifting": true, "direction": "LR", "edgeMinimization": true, "enabled": true, "levelSeparation": 450, "nodeSpacing": 200, "parentCentralization": false, "sortMethod": "directed", "treeSpacing": 100}, "improvedLayout": true}, "manipulation": false, "nodes": {"borderWidth": 1, "borderWidthSelected": 2, "chosen": true, "color": "#000000", "font": {"align": "left", "color": "#FFFFFF"}, "shape": "box"}, "physics": {"enabled": false}, "width": "100%"};
        var nodes = [{"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n9 PUSH2 0x019c\n12 JUMPI", "id": "0", "isExpanded": false, "label": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)", "size": 150, "truncLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "412 JUMPDEST\n413 PUSH2 0x01a5\n416 CALLER\n417 PUSH2 0x08cc\n420 JUMP", "id": "1", "isExpanded": false, "label": "412 JUMPDEST\n413 PUSH2 0x01a5\n416 CALLER\n417 PUSH2 0x08cc\n420 JUMP", "size": 150, "truncLabel": "412 JUMPDEST\n413 PUSH2 0x01a5\n416 CALLER\n417 PUSH2 0x08cc\n420 JUMP"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2252 JUMPDEST\n2253 PUSH1 0x03\n2255 SLOAD\n2256 TIMESTAMP\n2257 GT\n2258 PUSH2 0x0914\n2261 JUMPI", "id": "2", "isExpanded": false, "label": "2252 JUMPDEST\n2253 PUSH1 0x03\n2255 SLOAD\n2256 TIMESTAMP\n2257 GT\n2258 PUSH2 0x0914\n(click to expand +)", "size": 150, "truncLabel": "2252 JUMPDEST\n2253 PUSH1 0x03\n2255 SLOAD\n2256 TIMESTAMP\n2257 GT\n2258 PUSH2 0x0914\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2262 PUSH1 0x40\n2264 DUP1\n2265 MLOAD\n2266 PUSH3 0x461bcd\n2270 PUSH1 0xe5\n2272 SHL\n2273 DUP2\n2274 MSTORE\n2275 PUSH1 0x20\n2277 PUSH1 0x04\n2279 DUP3\n2280 ADD\n2281 MSTORE\n2282 PUSH1 0x0f\n2284 PUSH1 0x24\n2286 DUP3\n2287 ADD\n2288 MSTORE\n2289 PUSH15 0x6e6f7720(...)\n2305 PUSH1 0x88\n2307 SHL\n2308 PUSH1 0x44\n2310 DUP3\n2311 ADD\n2312 MSTORE\n2313 SWAP1\n2314 MLOAD\n2315 SWAP1\n2316 DUP2\n2317 SWAP1\n2318 SUB\n2319 PUSH1 0x64\n2321 ADD\n2322 SWAP1\n2323 REVERT", "id": "3", "isExpanded": false, "label": "2262 PUSH1 0x40\n2264 DUP1\n2265 MLOAD\n2266 PUSH3 0x461bcd\n2270 PUSH1 0xe5\n2272 SHL\n(click to expand +)", "size": 150, "truncLabel": "2262 PUSH1 0x40\n2264 DUP1\n2265 MLOAD\n2266 PUSH3 0x461bcd\n2270 PUSH1 0xe5\n2272 SHL\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2324 JUMPDEST\n2325 PUSH1 0x04\n2327 SLOAD\n2328 TIMESTAMP\n2329 LT\n2330 PUSH2 0x095a\n2333 JUMPI", "id": "4", "isExpanded": false, "label": "2324 JUMPDEST\n2325 PUSH1 0x04\n2327 SLOAD\n2328 TIMESTAMP\n2329 LT\n2330 PUSH2 0x095a\n(click to expand +)", "size": 150, "truncLabel": "2324 JUMPDEST\n2325 PUSH1 0x04\n2327 SLOAD\n2328 TIMESTAMP\n2329 LT\n2330 PUSH2 0x095a\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2334 PUSH1 0x40\n2336 DUP1\n2337 MLOAD\n2338 PUSH3 0x461bcd\n2342 PUSH1 0xe5\n2344 SHL\n2345 DUP2\n2346 MSTORE\n2347 PUSH1 0x20\n2349 PUSH1 0x04\n2351 DUP3\n2352 ADD\n2353 MSTORE\n2354 PUSH1 0x0d\n2356 PUSH1 0x24\n2358 DUP3\n2359 ADD\n2360 MSTORE\n2361 PUSH13 0x6e6f7720(...)\n2375 PUSH1 0x98\n2377 SHL\n2378 PUSH1 0x44\n2380 DUP3\n2381 ADD\n2382 MSTORE\n2383 SWAP1\n2384 MLOAD\n2385 SWAP1\n2386 DUP2\n2387 SWAP1\n2388 SUB\n2389 PUSH1 0x64\n2391 ADD\n2392 SWAP1\n2393 REVERT", "id": "5", "isExpanded": false, "label": "2334 PUSH1 0x40\n2336 DUP1\n2337 MLOAD\n2338 PUSH3 0x461bcd\n2342 PUSH1 0xe5\n2344 SHL\n(click to expand +)", "size": 150, "truncLabel": "2334 PUSH1 0x40\n2336 DUP1\n2337 MLOAD\n2338 PUSH3 0x461bcd\n2342 PUSH1 0xe5\n2344 SHL\n(click to expand +)"}];
        var edges = [{"arrows": "to", "from": "0", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "1"}, {"arrows": "to", "from": "1", "label": "", "smooth": {"type": "cubicBezier"}, "to": "2"}, {"arrows": "to", "from": "2", "label": "1_timestamp == 0", "smooth": {"type": "cubicBezier"}, "to": "3"}, {"arrows": "to", "from": "2", "label": "Not(1_timestamp == 0)", "smooth": {"type": "cubicBezier"}, "to": "4"}, {"arrows": "to", "from": "4", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "5"}];
    </script>
</head>
<body>
<p>Mythril / Ethereum LASER Symbolic VM</p>
<div id="mynetwork"></div>
<script type="text/javascript">
    var container = document.getElementById('mynetwork');

    var nodesSet = new vis.DataSet(nodes);
    var edgesSet = new vis.DataSet(edges);
    var data = {'nodes': nodesSet, 'edges': edgesSet}

    var gph = new vis.Network(container, data, options);
    gph.on("click", function (params) {
        // parse node id
        var nodeID = params['nodes']['0'];
        if (nodeID) {
            var clickedNode = nodesSet.get(nodeID);

            if(clickedNode.isExpanded) {
                clickedNode.label = clickedNode.truncLabel;
            }
            else {
                clickedNode.label = clickedNode.fullLabel;
            }

            clickedNode.isExpanded = !clickedNode.isExpanded;

            nodesSet.update(clickedNode);
        }
    });
</script>
</body>
</html>