<!DOCTYPE html>
<html>
<head>
    <title>Call Graph</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" integrity="sha256-iq5ygGJ7021Pi7H5S+QAUXCPUfaBzfqeplbg/KlEssg=" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js" integrity="sha256-JuQeAGbk9rG/EoRMixuy5X8syzICcvB0dj3KindZkY0=" crossorigin="anonymous"></script>

    
    <style type="text/css">
        #mynetwork {
          height: 100%;
            background-color: #232625;
        }
        body {
            background-color: #232625;
            color: #ffffff;
            font-size: 10px;
        }
        html, body {
          height: 95%;
        }
    </style>
    

    <script>
        var options = {"autoResize": true, "edges": {"font": {"align": "horizontal", "background": "none", "color": "#FFFFFF", "face": "arial", "multi": false, "strokeColor": "#ffffff", "strokeWidth": 0, "vadjust": 0}}, "height": "100%", "layout": {"hierarchical": {"blockShifting": true, "direction": "LR", "edgeMinimization": true, "enabled": true, "levelSeparation": 450, "nodeSpacing": 200, "parentCentralization": false, "sortMethod": "directed", "treeSpacing": 100}, "improvedLayout": true}, "manipulation": false, "nodes": {"borderWidth": 1, "borderWidthSelected": 2, "chosen": true, "color": "#000000", "font": {"align": "left", "color": "#FFFFFF"}, "shape": "box"}, "physics": {"enabled": false}, "width": "100%"};
        var nodes = [{"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n9 PUSH2 0x00dd\n12 JUMPI", "id": "0", "isExpanded": false, "label": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)", "size": 150, "truncLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "221 JUMPDEST\n222 ORIGIN\n223 CALLER\n224 EQ\n225 ISZERO\n226 PUSH2 0x0132\n229 JUMPI", "id": "1", "isExpanded": false, "label": "221 JUMPDEST\n222 ORIGIN\n223 CALLER\n224 EQ\n225 ISZERO\n226 PUSH2 0x0132\n(click to expand +)", "size": 150, "truncLabel": "221 JUMPDEST\n222 ORIGIN\n223 CALLER\n224 EQ\n225 ISZERO\n226 PUSH2 0x0132\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "230 PUSH1 0x40\n232 DUP1\n233 MLOAD\n234 PUSH3 0x461bcd\n238 PUSH1 0xe5\n240 SHL\n241 DUP2\n242 MSTORE\n243 PUSH1 0x20\n245 PUSH1 0x04\n247 DUP3\n248 ADD\n249 MSTORE\n250 PUSH1 0x17\n252 PUSH1 0x24\n254 DUP3\n255 ADD\n256 MSTORE\n257 PUSH32 0x72616d70(...)\n290 PUSH1 0x44\n292 DUP3\n293 ADD\n294 MSTORE\n295 SWAP1\n296 MLOAD\n297 SWAP1\n298 DUP2\n299 SWAP1\n300 SUB\n301 PUSH1 0x64\n303 ADD\n304 SWAP1\n305 REVERT", "id": "2", "isExpanded": false, "label": "230 PUSH1 0x40\n232 DUP1\n233 MLOAD\n234 PUSH3 0x461bcd\n238 PUSH1 0xe5\n240 SHL\n(click to expand +)", "size": 150, "truncLabel": "230 PUSH1 0x40\n232 DUP1\n233 MLOAD\n234 PUSH3 0x461bcd\n238 PUSH1 0xe5\n240 SHL\n(click to expand +)"}];
        var edges = [{"arrows": "to", "from": "0", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "1"}, {"arrows": "to", "from": "1", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "2"}];
    </script>
</head>
<body>
<p>Mythril / Ethereum LASER Symbolic VM</p>
<div id="mynetwork"></div>
<script type="text/javascript">
    var container = document.getElementById('mynetwork');

    var nodesSet = new vis.DataSet(nodes);
    var edgesSet = new vis.DataSet(edges);
    var data = {'nodes': nodesSet, 'edges': edgesSet}

    var gph = new vis.Network(container, data, options);
    gph.on("click", function (params) {
        // parse node id
        var nodeID = params['nodes']['0'];
        if (nodeID) {
            var clickedNode = nodesSet.get(nodeID);

            if(clickedNode.isExpanded) {
                clickedNode.label = clickedNode.truncLabel;
            }
            else {
                clickedNode.label = clickedNode.fullLabel;
            }

            clickedNode.isExpanded = !clickedNode.isExpanded;

            nodesSet.update(clickedNode);
        }
    });
</script>
</body>
</html>