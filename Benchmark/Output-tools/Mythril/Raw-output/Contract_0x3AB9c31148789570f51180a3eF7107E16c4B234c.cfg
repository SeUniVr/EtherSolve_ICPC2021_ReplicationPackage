<!DOCTYPE html>
<html>
<head>
    <title>Call Graph</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" integrity="sha256-iq5ygGJ7021Pi7H5S+QAUXCPUfaBzfqeplbg/KlEssg=" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js" integrity="sha256-JuQeAGbk9rG/EoRMixuy5X8syzICcvB0dj3KindZkY0=" crossorigin="anonymous"></script>

    
    <style type="text/css">
        #mynetwork {
          height: 100%;
            background-color: #232625;
        }
        body {
            background-color: #232625;
            color: #ffffff;
            font-size: 10px;
        }
        html, body {
          height: 95%;
        }
    </style>
    

    <script>
        var options = {"autoResize": true, "edges": {"font": {"align": "horizontal", "background": "none", "color": "#FFFFFF", "face": "arial", "multi": false, "strokeColor": "#ffffff", "strokeWidth": 0, "vadjust": 0}}, "height": "100%", "layout": {"hierarchical": {"blockShifting": true, "direction": "LR", "edgeMinimization": true, "enabled": true, "levelSeparation": 450, "nodeSpacing": 200, "parentCentralization": false, "sortMethod": "directed", "treeSpacing": 100}, "improvedLayout": true}, "manipulation": false, "nodes": {"borderWidth": 1, "borderWidthSelected": 2, "chosen": true, "color": "#000000", "font": {"align": "left", "color": "#FFFFFF"}, "shape": "box"}, "physics": {"enabled": false}, "width": "100%"};
        var nodes = [{"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n9 PUSH2 0x011d\n12 JUMPI", "id": "0", "isExpanded": false, "label": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)", "size": 150, "truncLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "285 JUMPDEST\n286 PUSH1 0x00\n288 CALLVALUE\n289 GT\n290 ISZERO\n291 PUSH2 0x0175\n294 JUMPI", "id": "1", "isExpanded": false, "label": "285 JUMPDEST\n286 PUSH1 0x00\n288 CALLVALUE\n289 GT\n290 ISZERO\n291 PUSH2 0x0175\n(click to expand +)", "size": 150, "truncLabel": "285 JUMPDEST\n286 PUSH1 0x00\n288 CALLVALUE\n289 GT\n290 ISZERO\n291 PUSH2 0x0175\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "295 CALLER\n296 PUSH20 0xffffffff(...)\n317 AND\n318 PUSH32 0xe1fffcc4(...)\n351 CALLVALUE\n352 PUSH1 0x40\n354 MLOAD\n355 DUP1\n356 DUP3\n357 DUP2\n358 MSTORE\n359 PUSH1 0x20\n361 ADD\n362 SWAP2\n363 POP\n364 POP\n365 PUSH1 0x40\n367 MLOAD\n368 DUP1\n369 SWAP2\n370 SUB\n371 SWAP1\n372 LOG2\n373 JUMPDEST\n374 STOP", "id": "2", "isExpanded": false, "label": "295 CALLER\n296 PUSH20 0xffffffff(...)\n317 AND\n318 PUSH32 0xe1fffcc4(...)\n351 CALLVALUE\n352 PUSH1 0x40\n(click to expand +)", "size": 150, "truncLabel": "295 CALLER\n296 PUSH20 0xffffffff(...)\n317 AND\n318 PUSH32 0xe1fffcc4(...)\n351 CALLVALUE\n352 PUSH1 0x40\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "373 JUMPDEST\n374 STOP", "id": "3", "isExpanded": false, "label": "373 JUMPDEST\n374 STOP", "size": 150, "truncLabel": "373 JUMPDEST\n374 STOP"}];
        var edges = [{"arrows": "to", "from": "0", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "1"}, {"arrows": "to", "from": "1", "label": "If(call_value1 == 0, 1, 0) == 0", "smooth": {"type": "cubicBezier"}, "to": "2"}, {"arrows": "to", "from": "1", "label": "Not(If(call_value1 == 0, 1, 0) == 0)", "smooth": {"type": "cubicBezier"}, "to": "3"}];
    </script>
</head>
<body>
<p>Mythril / Ethereum LASER Symbolic VM</p>
<div id="mynetwork"></div>
<script type="text/javascript">
    var container = document.getElementById('mynetwork');

    var nodesSet = new vis.DataSet(nodes);
    var edgesSet = new vis.DataSet(edges);
    var data = {'nodes': nodesSet, 'edges': edgesSet}

    var gph = new vis.Network(container, data, options);
    gph.on("click", function (params) {
        // parse node id
        var nodeID = params['nodes']['0'];
        if (nodeID) {
            var clickedNode = nodesSet.get(nodeID);

            if(clickedNode.isExpanded) {
                clickedNode.label = clickedNode.truncLabel;
            }
            else {
                clickedNode.label = clickedNode.fullLabel;
            }

            clickedNode.isExpanded = !clickedNode.isExpanded;

            nodesSet.update(clickedNode);
        }
    });
</script>
</body>
</html>