<!DOCTYPE html>
<html>
<head>
    <title>Call Graph</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" integrity="sha256-iq5ygGJ7021Pi7H5S+QAUXCPUfaBzfqeplbg/KlEssg=" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js" integrity="sha256-JuQeAGbk9rG/EoRMixuy5X8syzICcvB0dj3KindZkY0=" crossorigin="anonymous"></script>

    
    <style type="text/css">
        #mynetwork {
          height: 100%;
            background-color: #232625;
        }
        body {
            background-color: #232625;
            color: #ffffff;
            font-size: 10px;
        }
        html, body {
          height: 95%;
        }
    </style>
    

    <script>
        var options = {"autoResize": true, "edges": {"font": {"align": "horizontal", "background": "none", "color": "#FFFFFF", "face": "arial", "multi": false, "strokeColor": "#ffffff", "strokeWidth": 0, "vadjust": 0}}, "height": "100%", "layout": {"hierarchical": {"blockShifting": true, "direction": "LR", "edgeMinimization": true, "enabled": true, "levelSeparation": 450, "nodeSpacing": 200, "parentCentralization": false, "sortMethod": "directed", "treeSpacing": 100}, "improvedLayout": true}, "manipulation": false, "nodes": {"borderWidth": 1, "borderWidthSelected": 2, "chosen": true, "color": "#000000", "font": {"align": "left", "color": "#FFFFFF"}, "shape": "box"}, "physics": {"enabled": false}, "width": "100%"};
        var nodes = [{"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n9 PUSH2 0x0166\n12 JUMPI", "id": "0", "isExpanded": false, "label": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)", "size": 150, "truncLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "358 JUMPDEST\n359 PUSH1 0x00\n361 DUP1\n362 SWAP1\n363 SLOAD\n364 SWAP1\n365 PUSH2 0x0100\n368 EXP\n369 SWAP1\n370 DIV\n371 PUSH20 0xffffffff(...)\n392 AND\n393 PUSH20 0xffffffff(...)\n414 AND\n415 CALLER\n416 PUSH20 0xffffffff(...)\n437 AND\n438 EQ\n439 ISZERO\n440 PUSH2 0x01c8\n443 JUMPI", "id": "1", "isExpanded": false, "label": "358 JUMPDEST\n359 PUSH1 0x00\n361 DUP1\n362 SWAP1\n363 SLOAD\n364 SWAP1\n(click to expand +)", "size": 150, "truncLabel": "358 JUMPDEST\n359 PUSH1 0x00\n361 DUP1\n362 SWAP1\n363 SLOAD\n364 SWAP1\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "456 JUMPDEST\n457 PUSH2 0x01d0\n460 PUSH2 0x0815\n463 JUMP", "id": "2", "isExpanded": false, "label": "456 JUMPDEST\n457 PUSH2 0x01d0\n460 PUSH2 0x0815\n463 JUMP", "size": 150, "truncLabel": "456 JUMPDEST\n457 PUSH2 0x01d0\n460 PUSH2 0x0815\n463 JUMP"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2069 JUMPDEST\n2070 PUSH1 0x00\n2072 PUSH1 0x08\n2074 PUSH1 0x00\n2076 SWAP1\n2077 SLOAD\n2078 SWAP1\n2079 PUSH2 0x0100\n2082 EXP\n2083 SWAP1\n2084 DIV\n2085 PUSH1 0xff\n2087 AND\n2088 PUSH2 0x0e0f\n2091 JUMPI", "id": "3", "isExpanded": false, "label": "2069 JUMPDEST\n2070 PUSH1 0x00\n2072 PUSH1 0x08\n2074 PUSH1 0x00\n2076 SWAP1\n2077 SLOAD\n(click to expand +)", "size": 150, "truncLabel": "2069 JUMPDEST\n2070 PUSH1 0x00\n2072 PUSH1 0x08\n2074 PUSH1 0x00\n2076 SWAP1\n2077 SLOAD\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2092 PUSH1 0x00\n2094 PUSH1 0x14\n2096 SWAP1\n2097 SLOAD\n2098 SWAP1\n2099 PUSH2 0x0100\n2102 EXP\n2103 SWAP1\n2104 DIV\n2105 PUSH1 0xff\n2107 AND\n2108 PUSH2 0x08ad\n2111 JUMPI", "id": "4", "isExpanded": false, "label": "2092 PUSH1 0x00\n2094 PUSH1 0x14\n2096 SWAP1\n2097 SLOAD\n2098 SWAP1\n2099 PUSH2 0x0100\n(click to expand +)", "size": 150, "truncLabel": "2092 PUSH1 0x00\n2094 PUSH1 0x14\n2096 SWAP1\n2097 SLOAD\n2098 SWAP1\n2099 PUSH2 0x0100\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "2112 PUSH1 0x40\n2114 MLOAD\n2115 PUSH32 0x08c379a0(...)\n2148 DUP2\n2149 MSTORE\n2150 PUSH1 0x04\n2152 ADD\n2153 DUP1\n2154 DUP1\n2155 PUSH1 0x20\n2157 ADD\n2158 DUP3\n2159 DUP2\n2160 SUB\n2161 DUP3\n2162 MSTORE\n2163 PUSH1 0x1f\n2165 DUP2\n2166 MSTORE\n2167 PUSH1 0x20\n2169 ADD\n2170 DUP1\n2171 PUSH32 0x5265656e(...)\n2204 DUP2\n2205 MSTORE\n2206 POP\n2207 PUSH1 0x20\n2209 ADD\n2210 SWAP2\n2211 POP\n2212 POP\n2213 PUSH1 0x40\n2215 MLOAD\n2216 DUP1\n2217 SWAP2\n2218 SUB\n2219 SWAP1\n2220 REVERT", "id": "5", "isExpanded": false, "label": "2112 PUSH1 0x40\n2114 MLOAD\n2115 PUSH32 0x08c379a0(...)\n2148 DUP2\n2149 MSTORE\n2150 PUSH1 0x04\n(click to expand +)", "size": 150, "truncLabel": "2112 PUSH1 0x40\n2114 MLOAD\n2115 PUSH32 0x08c379a0(...)\n2148 DUP2\n2149 MSTORE\n2150 PUSH1 0x04\n(click to expand +)"}];
        var edges = [{"arrows": "to", "from": "0", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "1"}, {"arrows": "to", "from": "1", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "2"}, {"arrows": "to", "from": "2", "label": "", "smooth": {"type": "cubicBezier"}, "to": "3"}, {"arrows": "to", "from": "3", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "4"}, {"arrows": "to", "from": "4", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "5"}];
    </script>
</head>
<body>
<p>Mythril / Ethereum LASER Symbolic VM</p>
<div id="mynetwork"></div>
<script type="text/javascript">
    var container = document.getElementById('mynetwork');

    var nodesSet = new vis.DataSet(nodes);
    var edgesSet = new vis.DataSet(edges);
    var data = {'nodes': nodesSet, 'edges': edgesSet}

    var gph = new vis.Network(container, data, options);
    gph.on("click", function (params) {
        // parse node id
        var nodeID = params['nodes']['0'];
        if (nodeID) {
            var clickedNode = nodesSet.get(nodeID);

            if(clickedNode.isExpanded) {
                clickedNode.label = clickedNode.truncLabel;
            }
            else {
                clickedNode.label = clickedNode.fullLabel;
            }

            clickedNode.isExpanded = !clickedNode.isExpanded;

            nodesSet.update(clickedNode);
        }
    });
</script>
</body>
</html>