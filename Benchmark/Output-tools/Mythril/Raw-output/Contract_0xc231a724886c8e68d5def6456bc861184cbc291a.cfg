<!DOCTYPE html>
<html>
<head>
    <title>Call Graph</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" integrity="sha256-iq5ygGJ7021Pi7H5S+QAUXCPUfaBzfqeplbg/KlEssg=" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js" integrity="sha256-JuQeAGbk9rG/EoRMixuy5X8syzICcvB0dj3KindZkY0=" crossorigin="anonymous"></script>

    
    <style type="text/css">
        #mynetwork {
          height: 100%;
            background-color: #232625;
        }
        body {
            background-color: #232625;
            color: #ffffff;
            font-size: 10px;
        }
        html, body {
          height: 95%;
        }
    </style>
    

    <script>
        var options = {"autoResize": true, "edges": {"font": {"align": "horizontal", "background": "none", "color": "#FFFFFF", "face": "arial", "multi": false, "strokeColor": "#ffffff", "strokeWidth": 0, "vadjust": 0}}, "height": "100%", "layout": {"hierarchical": {"blockShifting": true, "direction": "LR", "edgeMinimization": true, "enabled": true, "levelSeparation": 450, "nodeSpacing": 200, "parentCentralization": false, "sortMethod": "directed", "treeSpacing": 100}, "improvedLayout": true}, "manipulation": false, "nodes": {"borderWidth": 1, "borderWidthSelected": 2, "chosen": true, "color": "#000000", "font": {"align": "left", "color": "#FFFFFF"}, "shape": "box"}, "physics": {"enabled": false}, "width": "100%"};
        var nodes = [{"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n9 PUSH2 0x0034\n12 JUMPI", "id": "0", "isExpanded": false, "label": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)", "size": 150, "truncLabel": "0 PUSH1 0x80\n2 PUSH1 0x40\n4 MSTORE\n5 PUSH1 0x04\n7 CALLDATASIZE\n8 LT\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "52 JUMPDEST\n53 PUSH2 0x08fc\n56 GAS\n57 GT\n58 PUSH2 0x0042\n61 JUMPI", "id": "1", "isExpanded": false, "label": "52 JUMPDEST\n53 PUSH2 0x08fc\n56 GAS\n57 GT\n58 PUSH2 0x0042\n61 JUMPI", "size": 150, "truncLabel": "52 JUMPDEST\n53 PUSH2 0x08fc\n56 GAS\n57 GT\n58 PUSH2 0x0042\n61 JUMPI"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "62 PUSH2 0x00bb\n65 JUMP", "id": "2", "isExpanded": false, "label": "62 PUSH2 0x00bb\n65 JUMP", "size": 150, "truncLabel": "62 PUSH2 0x00bb\n65 JUMP"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "66 JUMPDEST\n67 PUSH1 0x01\n69 SLOAD\n70 PUSH1 0x40\n72 DUP1\n73 MLOAD\n74 PUSH1 0x20\n76 CALLDATASIZE\n77 PUSH1 0x1f\n79 DUP2\n80 ADD\n81 DUP3\n82 SWAP1\n83 DIV\n84 DUP3\n85 MUL\n86 DUP4\n87 ADD\n88 DUP3\n89 ADD\n90 SWAP1\n91 SWAP4\n92 MSTORE\n93 DUP3\n94 DUP3\n95 MSTORE\n96 PUSH20 0xffffffff(...)\n117 SWAP1\n118 SWAP4\n119 AND\n120 SWAP3\n121 PUSH1 0x60\n123 SWAP3\n124 PUSH1 0x00\n126 SWAP2\n127 DUP2\n128 SWAP1\n129 DUP5\n130 ADD\n131 DUP4\n132 DUP3\n133 DUP1\n134 DUP3\n135 DUP5\n136 CALLDATACOPY\n137 PUSH1 0x00\n139 SWAP3\n140 ADD\n141 DUP3\n142 SWAP1\n143 MSTORE\n144 POP\n145 DUP5\n146 MLOAD\n147 SWAP5\n148 SWAP6\n149 POP\n150 SWAP4\n151 DUP5\n152 SWAP4\n153 POP\n154 SWAP2\n155 POP\n156 POP\n157 PUSH1 0x20\n159 DUP5\n160 ADD\n161 DUP6\n162 GAS\n163 DELEGATECALL\n164 RETURNDATASIZE\n165 PUSH1 0x40\n167 MLOAD\n168 DUP2\n169 PUSH1 0x00\n171 DUP3\n172 RETURNDATACOPY\n173 DUP3\n174 DUP1\n175 ISZERO\n176 PUSH2 0x00b7\n179 JUMPI", "id": "3", "isExpanded": false, "label": "66 JUMPDEST\n67 PUSH1 0x01\n69 SLOAD\n70 PUSH1 0x40\n72 DUP1\n73 MLOAD\n(click to expand +)", "size": 150, "truncLabel": "66 JUMPDEST\n67 PUSH1 0x01\n69 SLOAD\n70 PUSH1 0x40\n72 DUP1\n73 MLOAD\n(click to expand +)"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "187 JUMPDEST\n188 STOP", "id": "4", "isExpanded": false, "label": "187 JUMPDEST\n188 STOP", "size": 150, "truncLabel": "187 JUMPDEST\n188 STOP"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "180 DUP3\n181 DUP3\n182 RETURN", "id": "5", "isExpanded": false, "label": "180 DUP3\n181 DUP3\n182 RETURN", "size": 150, "truncLabel": "180 DUP3\n181 DUP3\n182 RETURN"}, {"color": {"background": "#2f7e5b", "border": "#26996f", "highlight": {"background": "#28a16f", "border": "#26996f"}}, "fullLabel": "183 JUMPDEST\n184 DUP3\n185 DUP3\n186 REVERT", "id": "6", "isExpanded": false, "label": "183 JUMPDEST\n184 DUP3\n185 DUP3\n186 REVERT", "size": 150, "truncLabel": "183 JUMPDEST\n184 DUP3\n185 DUP3\n186 REVERT"}];
        var edges = [{"arrows": "to", "from": "0", "label": "True", "smooth": {"type": "cubicBezier"}, "to": "1"}, {"arrows": "to", "from": "1", "label": "And(Extract(0xff, 12, 1_gas) == 0,    ULE(Extract(11, 0, 1_gas), 0x8fc))", "smooth": {"type": "cubicBezier"}, "to": "2"}, {"arrows": "to", "from": "1", "label": "Not(And(Extract(0xff, 12, 1_gas) == 0,        ULE(Extract(11, 0, 1_gas), 0x8fc)))", "smooth": {"type": "cubicBezier"}, "to": "3"}, {"arrows": "to", "from": "2", "label": "", "smooth": {"type": "cubicBezier"}, "to": "4"}, {"arrows": "to", "from": "3", "label": "If(1_retval_163 == 0, 1, 0) == 0", "smooth": {"type": "cubicBezier"}, "to": "5"}, {"arrows": "to", "from": "3", "label": "Not(If(1_retval_163 == 0, 1, 0) == 0)", "smooth": {"type": "cubicBezier"}, "to": "6"}];
    </script>
</head>
<body>
<p>Mythril / Ethereum LASER Symbolic VM</p>
<div id="mynetwork"></div>
<script type="text/javascript">
    var container = document.getElementById('mynetwork');

    var nodesSet = new vis.DataSet(nodes);
    var edgesSet = new vis.DataSet(edges);
    var data = {'nodes': nodesSet, 'edges': edgesSet}

    var gph = new vis.Network(container, data, options);
    gph.on("click", function (params) {
        // parse node id
        var nodeID = params['nodes']['0'];
        if (nodeID) {
            var clickedNode = nodesSet.get(nodeID);

            if(clickedNode.isExpanded) {
                clickedNode.label = clickedNode.truncLabel;
            }
            else {
                clickedNode.label = clickedNode.fullLabel;
            }

            clickedNode.isExpanded = !clickedNode.isExpanded;

            nodesSet.update(clickedNode);
        }
    });
</script>
</body>
</html>